{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenid@!","text":"<p>En este espacio encontrar\u00e1s apuntes de los m\u00f3dulos de ciclos formativos que yo imparto, as\u00ed como otros textos que me apetezca compartir. Desde el curso 23/24 se ha incorporado Dcano como colaborador en la creaci\u00f3n de los contenidos, por tanto los contenidos de los m\u00f3dulos de los que es responsable tambi\u00e9n se han actualizado y mejorado. </p> <p>Ahora mismo trabajamos en los siguientes m\u00f3dulos:</p> <ul> <li>Programaci\u00f3n: En el que se imparten los fundamentos de la programaci\u00f3n y la programaci\u00f3n orientada a objetos.     </li> <li>Entornos de desarrollo: En el que se dan a conocer las herramientas y t\u00e9cnicas necesarias para el desarrollo de software.    </li> <li>Incidentes de seguridad: En el que se estudian los incidentes de seguridad y las t\u00e9cnicas para prevenirlos y solucionarlos.    </li> </ul> <p>A parte de los contenidos de los m\u00f3dulos, puedes encontrar pr\u00e1cticas, ejercicios y otros textos que te pueden resultar de inter\u00e9s y est\u00e1n relacionadas con el contenido de los m\u00f3dulos.  </p> <p>Existe tambi\u00e9n un apartado blog en el que se comparten textos que tienen relaci\u00f3n con los m\u00f3dulos, pero que no son propiamente apuntes.</p> <p>En ocasiones los textos los hemos generado nosotros, en otras ocasiones los textos han sido una mezcla entre distintos autores, en cuyo caso se ha indicado la fuente. Por tanto, para una versi\u00f3n m\u00e1s actualizada y completa de los contenidos, te recomiendo que visites la fuente original.</p> <p>Los apuntes est\u00e1n en constante revisi\u00f3n y actualizaci\u00f3n, por lo que te recomiendo que visites la p\u00e1gina con frecuencia para estar al d\u00eda de las novedades. Tambi\u00e9n, si encuentras alg\u00fan error o tienes alguna sugerencia, no dudes en ponerte en contacto conmigo.</p> <p>Espero que encuentres \u00fatil la informaci\u00f3n que aqu\u00ed se comparte. \u00a1Gracias por tu visita!</p>"},{"location":"about/","title":"Acerca de","text":"<p>Acerca de</p> <p>el HTML es</p>"},{"location":"blog/","title":"Blog","text":"<p>{{ blog_content }}</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#tag:actualizacion","title":"Actualizacion","text":"<ul> <li>            2.4.-Actualizaciones          </li> <li>            2.5.-Ejecutables en IDEs          </li> <li>            2.6.-Evaluaci\u00f3n de IDEs          </li> </ul>"},{"location":"tags/#tag:almacenamiento","title":"Almacenamiento","text":"<ul> <li>            IS U3.3.1. MITRE          </li> <li>            IS U4.1.2. Playbook          </li> <li>            UD 3 - 1.1 Recopilaci\u00f3n y almacenamiento de evidencias          </li> </ul>"},{"location":"tags/#tag:asignaci\u00f3n","title":"Asignaci\u00f3n","text":"<ul> <li>            3.8.-Ampliaci\u00f3n I          </li> </ul>"},{"location":"tags/#tag:bbdd","title":"BBDD","text":"<ul> <li>            UD 9 - Acceso a base de datos relacionales          </li> </ul>"},{"location":"tags/#tag:basico","title":"Basico","text":"<ul> <li>            * Pr\u00e1ctica 4.1: Kotlin B\u00e1sico          </li> </ul>"},{"location":"tags/#tag:buenas-pr\u00e1cticas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>            Separa responsabilidades.          </li> </ul>"},{"location":"tags/#tag:case","title":"CASE","text":"<ul> <li>            UD 2 - Entornos de desarrollo integrado          </li> <li>            UD 3 - Herramientas Git/Github          </li> </ul>"},{"location":"tags/#tag:cadenas","title":"Cadenas","text":"<ul> <li>            * Pr\u00e1ctica 3.0: Cadenas          </li> <li>            3.0.-Est.Datos: Cadenas          </li> <li>            7.1.-Sistema archivos:E/S          </li> </ul>"},{"location":"tags/#tag:ciberseguridad","title":"Ciberseguridad","text":"<ul> <li>            Incidentes de ciberseguridad          </li> <li>            UD 1 - Planes de ciberseguridad          </li> <li>            UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad          </li> <li>            UD 3 - Detecci\u00f3n de incidentes          </li> <li>            UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad          </li> <li>            UD 5 - Implemetaci\u00f3n de medidas          </li> <li>            UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes          </li> </ul>"},{"location":"tags/#tag:concienciaci\u00f3n","title":"Concienciaci\u00f3n","text":"<ul> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            UD 1 - 4.1 Plan de concienciaci\u00f3n          </li> </ul>"},{"location":"tags/#tag:conjuntos","title":"Conjuntos","text":"<ul> <li>            * Pr\u00e1ctica 3.3: Conjuntos          </li> </ul>"},{"location":"tags/#tag:consola","title":"Consola","text":"<ul> <li>            7.2.-Entrada/Salida estandar          </li> <li>            7.2.1.-Lectura desde teclado          </li> </ul>"},{"location":"tags/#tag:copia-profunda","title":"Copia profunda","text":"<ul> <li>            3.8.-Ampliaci\u00f3n I          </li> </ul>"},{"location":"tags/#tag:copia-superficial","title":"Copia superficial","text":"<ul> <li>            3.8.-Ampliaci\u00f3n I          </li> </ul>"},{"location":"tags/#tag:dao","title":"DAO","text":"<ul> <li>            9.1.-Acceso a BBDD          </li> <li>            9.2.-JDBC: B\u00e1sico          </li> <li>            9.3.-JDBC: Prepared statement          </li> <li>            9.4.-DAO          </li> <li>            9.5.-Otros aspectos          </li> </ul>"},{"location":"tags/#tag:debug","title":"Debug","text":"<ul> <li>            UD 3 - 3.3 Depuraci\u00f3n          </li> </ul>"},{"location":"tags/#tag:depurar","title":"Depurar","text":"<ul> <li>            2.4.-Depurar programas          </li> </ul>"},{"location":"tags/#tag:detekt","title":"Detekt","text":"<ul> <li>            UD 4 - 4.3 An\u00e1lisis est\u00e1tico de c\u00f3digo          </li> </ul>"},{"location":"tags/#tag:diagramas","title":"Diagramas","text":"<ul> <li>            UD 5 - 5.1 \u00bfQu\u00e9 es UML?          </li> <li>            UD 5 - 5.2 Diagrama de clases          </li> </ul>"},{"location":"tags/#tag:diccionarios","title":"Diccionarios","text":"<ul> <li>            * Pr\u00e1ctica 3.2: Diccionarios          </li> </ul>"},{"location":"tags/#tag:dinamica","title":"Dinamica","text":"<ul> <li>            U0: Nos conocemos          </li> </ul>"},{"location":"tags/#tag:documentar","title":"Documentar","text":"<ul> <li>            2.5.-Documentar el c\u00f3digo          </li> <li>            2.5.1-\u00bfDeber\u00edas documentar tu c\u00f3digo?          </li> </ul>"},{"location":"tags/#tag:dokka","title":"Dokka","text":"<ul> <li>            UD 4 - 4.4 Documentaci\u00f3n y comentarios          </li> </ul>"},{"location":"tags/#tag:edes","title":"EDES","text":"<ul> <li>            1.1.-Software y Hardware          </li> <li>            1.2.-C\u00f3digo fuente, objeto y ejecutable          </li> <li>            1.3.-C\u00f3digo intermedio          </li> <li>            1.4.-Traductores          </li> <li>            1.5.-Lenguajes de programaci\u00f3n          </li> <li>            1.6.-Herramientas y funcionalidades          </li> <li>            2.1.-IDEs          </li> <li>            2.2.-Modulos          </li> <li>            2.3.-Personalizaci\u00f3n          </li> <li>            2.4.-Actualizaciones          </li> <li>            2.5.-Ejecutables en IDEs          </li> <li>            2.6.-Evaluaci\u00f3n de IDEs          </li> <li>            4.1.-Sistemas de control de versiones          </li> <li>            Entornos de desarrollo          </li> <li>            UD 1 - 1.5 Fases de desarrollo de software.          </li> <li>            UD 1 - Introducci\u00f3n al desarrollo de software          </li> <li>            UD 2 - Entornos de desarrollo integrado          </li> <li>            UD 3 - 3.1 Pruebas          </li> <li>            UD 3 - 3.2 Test de unidad y TDD          </li> <li>            UD 3 - 3.3 Depuraci\u00f3n          </li> <li>            UD 3 - 3.3 Kotest          </li> <li>            UD 3 - 3.4 Mockk          </li> <li>            UD 3 - Dise\u00f1o y Realizaci\u00f3n de Pruebas          </li> <li>            UD 3 - Herramientas Git/Github          </li> <li>            UD 4 - 4.1 Sistemas de control de versiones          </li> <li>            UD 4 - 4.3 An\u00e1lisis est\u00e1tico de c\u00f3digo          </li> <li>            UD 4 - 4.4 Documentaci\u00f3n y comentarios          </li> </ul>"},{"location":"tags/#tag:ejercicios","title":"Ejercicios","text":"<ul> <li>            * Pr\u00e1ctica 1.1: Instala python          </li> <li>            * Pr\u00e1ctica 1.3: Git B\u00e1sico          </li> <li>            * Pr\u00e1ctica 1.4: GitHub B\u00e1sico          </li> <li>            * Pr\u00e1ctica 1.5: Creaci\u00f3n de entorno          </li> <li>            * Pr\u00e1ctica 1.6: Uso de pytest          </li> <li>            * Pr\u00e1ctica 1.7: Acceso ssh a github          </li> <li>            * Pr\u00e1ctica 2.1: Sentencias condicionales          </li> <li>            * Pr\u00e1ctica 2.2: Sentencias iterativas y saltos          </li> <li>            * Pr\u00e1ctica 2.3: Capturas de excepciones          </li> <li>            * Pr\u00e1ctica 2.4: Depurar programas          </li> <li>            * Pr\u00e1ctica 3.0: Cadenas          </li> <li>            * Pr\u00e1ctica 3.1: Listas y tuplas          </li> <li>            * Pr\u00e1ctica 3.2: Diccionarios          </li> <li>            * Pr\u00e1ctica 3.3: Conjuntos          </li> <li>            * Pr\u00e1ctica 3.4: JSON          </li> <li>            * Pr\u00e1ctica 3.5: XML          </li> <li>            * Pr\u00e1ctica 4.1: Kotlin B\u00e1sico          </li> <li>            * Pr\u00e1ctica 4.2: Kotlin POO I          </li> <li>            * Pr\u00e1ctica 4.3: Kotlin POO II          </li> <li>            * Pr\u00e1ctica 4.4: Kotlin POO III          </li> <li>            * Pr\u00e1ctica 4.5: Kotlin POO IV          </li> <li>            * Pr\u00e1ctica 4.6: Prueba I          </li> <li>            * Pr\u00e1ctica 4.7: Grupos I          </li> <li>            * Pr\u00e1ctica 4.8: Grupos II          </li> <li>            * Pr\u00e1ctica 5.1: Relaci\u00f3n de ejercicios          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> </ul>"},{"location":"tags/#tag:evidencias","title":"Evidencias","text":"<ul> <li>            IS U3.3.1. MITRE          </li> <li>            IS U4.1.2. Playbook          </li> <li>            UD 3 - 1.1 Recopilaci\u00f3n y almacenamiento de evidencias          </li> </ul>"},{"location":"tags/#tag:file","title":"File","text":"<ul> <li>            7.3.-Gesti\u00f3n Archivos          </li> <li>            7.4.-Lectura/Escritura Archivos          </li> <li>            7.4.1.-Archivo de texto          </li> </ul>"},{"location":"tags/#tag:funciones","title":"Funciones","text":"<ul> <li>            3.5.-Funciones          </li> </ul>"},{"location":"tags/#tag:funciones-de-extensi\u00f3n","title":"Funciones de extensi\u00f3n","text":"<ul> <li>            * Pr\u00e1ctica 4.8: Grupos II          </li> </ul>"},{"location":"tags/#tag:git","title":"GIT","text":"<ul> <li>            4.1.-Sistemas de control de versiones          </li> <li>            UD 4 - 4.1 Sistemas de control de versiones          </li> </ul>"},{"location":"tags/#tag:gen\u00e9ricos","title":"Gen\u00e9ricos","text":"<ul> <li>            * Pr\u00e1ctica 4.8: Grupos II          </li> </ul>"},{"location":"tags/#tag:github","title":"GitHub","text":"<ul> <li>            4.1.-Sistemas de control de versiones          </li> <li>            UD 4 - 4.1 Sistemas de control de versiones          </li> </ul>"},{"location":"tags/#tag:globales","title":"Globales","text":"<ul> <li>            3.9.-Ampliaci\u00f3n II          </li> </ul>"},{"location":"tags/#tag:gson","title":"Gson","text":"<ul> <li>            Tratamiento de ficheros JSON.          </li> </ul>"},{"location":"tags/#tag:hardware","title":"Hardware","text":"<ul> <li>            1.1.-Software y Hardware          </li> <li>            UD 3 - 3.2 Test de unidad y TDD          </li> </ul>"},{"location":"tags/#tag:herencia","title":"Herencia","text":"<ul> <li>            * Pr\u00e1ctica 5.1: Relaci\u00f3n de ejercicios          </li> </ul>"},{"location":"tags/#tag:ide","title":"IDE","text":"<ul> <li>            2.1.-IDEs          </li> <li>            2.2.-Modulos          </li> <li>            2.3.-Personalizaci\u00f3n          </li> <li>            2.4.-Actualizaciones          </li> <li>            2.5.-Ejecutables en IDEs          </li> <li>            2.6.-Evaluaci\u00f3n de IDEs          </li> <li>            Pr\u00e1ctica 2.2: Evaluaci\u00f3n IDEs          </li> </ul>"},{"location":"tags/#tag:ids","title":"IDS","text":"<ul> <li>            2.2.1.-SOC - Servicios y herramientas          </li> </ul>"},{"location":"tags/#tag:ips","title":"IPS","text":"<ul> <li>            2.2.1.-SOC - Servicios y herramientas          </li> </ul>"},{"location":"tags/#tag:is","title":"IS","text":"<ul> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            IS U3.3.1. MITRE          </li> <li>            IS U4.1.2. Playbook          </li> <li>            U0: Nos conocemos          </li> <li>            UD 1 - 2.1 Plan director de seguridad - Ejemplo          </li> <li>            UD 1 - 4.1 Plan de concienciaci\u00f3n          </li> <li>            UD 3 - 1.1 Recopilaci\u00f3n y almacenamiento de evidencias          </li> </ul>"},{"location":"tags/#tag:identidad","title":"Identidad","text":"<ul> <li>            3.8.-Ampliaci\u00f3n I          </li> </ul>"},{"location":"tags/#tag:incidentes","title":"Incidentes","text":"<ul> <li>            Incidentes de ciberseguridad          </li> <li>            UD 1 - Planes de ciberseguridad          </li> <li>            UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad          </li> <li>            UD 2 - P1: Taxonom\u00eda          </li> <li>            UD 3 - Detecci\u00f3n de incidentes          </li> <li>            UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad          </li> <li>            UD 5 - Implemetaci\u00f3n de medidas          </li> <li>            UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes          </li> </ul>"},{"location":"tags/#tag:inform\u00e1tica","title":"Inform\u00e1tica","text":"<ul> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            UD 1 - 4.1 Plan de concienciaci\u00f3n          </li> </ul>"},{"location":"tags/#tag:iterables-con-for","title":"Iterables con for","text":"<ul> <li>            3.9.-Ampliaci\u00f3n II          </li> </ul>"},{"location":"tags/#tag:jdbc","title":"JDBC","text":"<ul> <li>            9.1.-Acceso a BBDD          </li> <li>            9.2.-JDBC: B\u00e1sico          </li> <li>            9.3.-JDBC: Prepared statement          </li> <li>            9.4.-DAO          </li> <li>            9.5.-Otros aspectos          </li> </ul>"},{"location":"tags/#tag:json","title":"JSON","text":"<ul> <li>            * Pr\u00e1ctica 3.4: JSON          </li> <li>            3.6.-Manejo de JSON          </li> <li>            Tratamiento de ficheros JSON.          </li> </ul>"},{"location":"tags/#tag:kdoc","title":"KDoc","text":"<ul> <li>            UD 4 - 4.4 Documentaci\u00f3n y comentarios          </li> </ul>"},{"location":"tags/#tag:kotlin","title":"Kotlin","text":"<ul> <li>            * Pr\u00e1ctica 4.2: Kotlin POO I          </li> <li>            * Pr\u00e1ctica 4.3: Kotlin POO II          </li> </ul>"},{"location":"tags/#tag:lenguajes","title":"Lenguajes","text":"<ul> <li>            1.2.-C\u00f3digo fuente, objeto y ejecutable          </li> <li>            1.3.-C\u00f3digo intermedio          </li> <li>            1.5.-Lenguajes de programaci\u00f3n          </li> </ul>"},{"location":"tags/#tag:listas","title":"Listas","text":"<ul> <li>            * Pr\u00e1ctica 3.1: Listas y tuplas          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> </ul>"},{"location":"tags/#tag:mvc","title":"MVC","text":"<ul> <li>            Modelos MVVM y MVC.          </li> </ul>"},{"location":"tags/#tag:mvvm","title":"MVVM","text":"<ul> <li>            Modelos MVVM y MVC.          </li> </ul>"},{"location":"tags/#tag:mock","title":"Mock","text":"<ul> <li>            UD 3 - 3.4 Mockk          </li> </ul>"},{"location":"tags/#tag:modulos","title":"Modulos","text":"<ul> <li>            2.2.-Modulos          </li> </ul>"},{"location":"tags/#tag:mutabilidad","title":"Mutabilidad","text":"<ul> <li>            3.8.-Ampliaci\u00f3n I          </li> </ul>"},{"location":"tags/#tag:poo","title":"POO","text":"<ul> <li>            * Pr\u00e1ctica 4.2: Kotlin POO I          </li> <li>            * Pr\u00e1ctica 4.3: Kotlin POO II          </li> <li>            * Pr\u00e1ctica 4.4: Kotlin POO III          </li> <li>            * Pr\u00e1ctica 4.5: Kotlin POO IV          </li> <li>            * Pr\u00e1ctica 4.6: Prueba I          </li> <li>            * Pr\u00e1ctica 4.7: Grupos I          </li> <li>            4.3.1.-Programaci\u00f3n orientada a objetos          </li> <li>            UD 4 - Programaci\u00f3n orientada a objetos          </li> <li>            UD 5 - Puesta en practica de la POO          </li> </ul>"},{"location":"tags/#tag:paso-por-referencia","title":"Paso por referencia","text":"<ul> <li>            3.8.-Ampliaci\u00f3n I          </li> </ul>"},{"location":"tags/#tag:paso-por-valor","title":"Paso por valor","text":"<ul> <li>            3.8.-Ampliaci\u00f3n I          </li> </ul>"},{"location":"tags/#tag:personalizaci\u00f3n","title":"Personalizaci\u00f3n","text":"<ul> <li>            2.3.-Personalizaci\u00f3n          </li> </ul>"},{"location":"tags/#tag:plan","title":"Plan","text":"<ul> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            UD 1 - 4.1 Plan de concienciaci\u00f3n          </li> </ul>"},{"location":"tags/#tag:presentacion","title":"Presentacion","text":"<ul> <li>            U0: Nos conocemos          </li> </ul>"},{"location":"tags/#tag:pruebas","title":"Pruebas","text":"<ul> <li>            UD 3 - 3.1 Pruebas          </li> </ul>"},{"location":"tags/#tag:puesto-de-trabajo","title":"Puesto de trabajo","text":"<ul> <li>            1.3.-Puesto de trabajo          </li> </ul>"},{"location":"tags/#tag:quality-assurance","title":"Quality Assurance","text":"<ul> <li>            UD 3 - Dise\u00f1o y Realizaci\u00f3n de Pruebas          </li> </ul>"},{"location":"tags/#tag:recopilaci\u00f3n","title":"Recopilaci\u00f3n","text":"<ul> <li>            IS U3.3.1. MITRE          </li> <li>            IS U4.1.2. Playbook          </li> <li>            UD 3 - 1.1 Recopilaci\u00f3n y almacenamiento de evidencias          </li> </ul>"},{"location":"tags/#tag:regex","title":"Regex","text":"<ul> <li>            * Pr\u00e1ctica 4.8: Grupos II          </li> </ul>"},{"location":"tags/#tag:return-con-operadores-l\u00f3gicos","title":"Return con operadores l\u00f3gicos","text":"<ul> <li>            3.9.-Ampliaci\u00f3n II          </li> </ul>"},{"location":"tags/#tag:siem","title":"SIEM","text":"<ul> <li>            2.2.1.-SOC - Servicios y herramientas          </li> </ul>"},{"location":"tags/#tag:soc","title":"SOC","text":"<ul> <li>            2.2.1.-SOC - Servicios y herramientas          </li> </ul>"},{"location":"tags/#tag:srp","title":"SRP","text":"<ul> <li>            Separa responsabilidades.          </li> </ul>"},{"location":"tags/#tag:seguridad","title":"Seguridad","text":"<ul> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            1.4.-Concienciaci\u00f3n y formaci\u00f3n          </li> <li>            IS U3.3.1. MITRE          </li> <li>            IS U4.1.2. Playbook          </li> <li>            UD 1 - 4.1 Plan de concienciaci\u00f3n          </li> <li>            UD 3 - 1.1 Recopilaci\u00f3n y almacenamiento de evidencias          </li> </ul>"},{"location":"tags/#tag:sentencias-condicionales","title":"Sentencias condicionales","text":"<ul> <li>            2.1.-Condicionales          </li> </ul>"},{"location":"tags/#tag:sentencias-iterativas","title":"Sentencias iterativas","text":"<ul> <li>            2.2.-Iterativas y saltos          </li> </ul>"},{"location":"tags/#tag:software","title":"Software","text":"<ul> <li>            * Pr\u00e1ctica 1.1: Instala python          </li> <li>            * Pr\u00e1ctica 1.3: Git B\u00e1sico          </li> <li>            * Pr\u00e1ctica 1.4: GitHub B\u00e1sico          </li> <li>            * Pr\u00e1ctica 1.5: Creaci\u00f3n de entorno          </li> <li>            * Pr\u00e1ctica 1.6: Uso de pytest          </li> <li>            * Pr\u00e1ctica 1.7: Acceso ssh a github          </li> <li>            * Pr\u00e1ctica 2.1: Sentencias condicionales          </li> <li>            * Pr\u00e1ctica 2.2: Sentencias iterativas y saltos          </li> <li>            * Pr\u00e1ctica 2.3: Capturas de excepciones          </li> <li>            * Pr\u00e1ctica 2.4: Depurar programas          </li> <li>            * Pr\u00e1ctica 3.0: Cadenas          </li> <li>            * Pr\u00e1ctica 3.1: Listas y tuplas          </li> <li>            * Pr\u00e1ctica 3.2: Diccionarios          </li> <li>            * Pr\u00e1ctica 3.3: Conjuntos          </li> <li>            * Pr\u00e1ctica 3.4: JSON          </li> <li>            * Pr\u00e1ctica 3.5: XML          </li> <li>            * Pr\u00e1ctica 4.1: Kotlin B\u00e1sico          </li> <li>            * Pr\u00e1ctica 4.2: Kotlin POO I          </li> <li>            * Pr\u00e1ctica 4.3: Kotlin POO II          </li> <li>            * Pr\u00e1ctica 4.4: Kotlin POO III          </li> <li>            * Pr\u00e1ctica 4.5: Kotlin POO IV          </li> <li>            * Pr\u00e1ctica 4.6: Prueba I          </li> <li>            * Pr\u00e1ctica 4.7: Grupos I          </li> <li>            * Pr\u00e1ctica 4.8: Grupos II          </li> <li>            * Pr\u00e1ctica 5.1: Relaci\u00f3n de ejercicios          </li> <li>            1.1.-Software y Hardware          </li> <li>            1.1.-Un programa          </li> <li>            1.1.1.-Pseudoc\u00f3digo          </li> <li>            1.2.-Practica con un lenguaje          </li> <li>            1.3.-Tipos de datos          </li> <li>            2.1.-Condicionales          </li> <li>            2.2.-Iterativas y saltos          </li> <li>            2.3.-Captura de excepciones          </li> <li>            2.4.-Depurar programas          </li> <li>            2.5.-Documentar el c\u00f3digo          </li> <li>            2.5.1-\u00bfDeber\u00edas documentar tu c\u00f3digo?          </li> <li>            3.0.-Est.Datos: Cadenas          </li> <li>            3.1.-Est.Datos: Listas          </li> <li>            3.2.-Est.Datos: Tuplas          </li> <li>            3.3.-Est.Datos: Diccionarios          </li> <li>            3.4.-Est.Datos: Conjuntos          </li> <li>            3.5.-Funciones          </li> <li>            3.6.-Manejo de JSON          </li> <li>            3.7.-Manejo de XML          </li> <li>            3.8.-Ampliaci\u00f3n I          </li> <li>            3.9.-Ampliaci\u00f3n II          </li> <li>            4.1.-Kotlin: B\u00e1sico          </li> <li>            4.2.1.-Aclaraciones          </li> <li>            4.3.1.-Programaci\u00f3n orientada a objetos          </li> <li>            5.1.-Revisitando las clases y los objetos          </li> <li>            5.2.-Visibilidad en miembros          </li> <li>            5.3.-Herencia          </li> <li>            6.1.-Jerarqu\u00eda de Clases          </li> <li>            6.2.-Ejemplo          </li> <li>            6.3.-Principios SOLID          </li> <li>            6.4.-Comentarios y documentaci\u00f3n          </li> <li>            7.1.-Sistema archivos:E/S          </li> <li>            7.2.-Entrada/Salida estandar          </li> <li>            7.2.1.-Lectura desde teclado          </li> <li>            7.3.-Gesti\u00f3n Archivos          </li> <li>            7.4.-Lectura/Escritura Archivos          </li> <li>            7.4.1.-Archivo de texto          </li> <li>            9.1.-Acceso a BBDD          </li> <li>            9.2.-JDBC: B\u00e1sico          </li> <li>            9.3.-JDBC: Prepared statement          </li> <li>            9.4.-DAO          </li> <li>            9.5.-Otros aspectos          </li> <li>            Entornos de desarrollo          </li> <li>            Programaci\u00f3n          </li> <li>            Pr\u00e1ctica 1.10: Preguntas sobre actividades          </li> <li>            Pr\u00e1ctica 1.11: Elementos de desarrollo          </li> <li>            Pr\u00e1ctica 4.1: Git/Github b\u00e1sico          </li> <li>            Pr\u00e1ctica 4.2: Git/Github merge          </li> <li>            Pr\u00e1ctica 4.3: Git/Github rebase I          </li> <li>            Pr\u00e1ctica 4.4: Git/Github rebase II          </li> <li>            Pr\u00e1ctica 4.5: Git/Github Pull Request (PR)          </li> <li>            UD 1 - Introducci\u00f3n al desarrollo de software          </li> <li>            UD 1 - Mi primer programa          </li> <li>            UD 1 - P3: Aplica Scrum          </li> <li>            UD 1 - P4: Relaci\u00f3n software y hardware          </li> <li>            UD 2 - P1: Herramientas de desarrollo          </li> <li>            UD 2 - Sentencias condicionales y repetitivas          </li> <li>            UD 3 - 3.1 Pruebas          </li> <li>            UD 3 - 3.2 Test de unidad y TDD          </li> <li>            UD 3 - 3.3 Depuraci\u00f3n          </li> <li>            UD 3 - 3.3 Kotest          </li> <li>            UD 3 - 3.4 Mockk          </li> <li>            UD 3 - Estructuras de datos          </li> <li>            UD 3 - P1: Git/Github b\u00e1sico          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 4 - P1: Git/Github b\u00e1sico          </li> <li>            UD 4 - Programaci\u00f3n orientada a objetos          </li> <li>            UD 5 - 5.1 \u00bfQu\u00e9 es UML?          </li> <li>            UD 5 - 5.2 Diagrama de clases          </li> <li>            UD 5 - Puesta en practica de la POO          </li> <li>            UD 6 - Creaci\u00f3n de programas con POO          </li> <li>            UD 7 - Interfaces texto y gr\u00e1fica. Entrada/Salida          </li> <li>            UD 9 - Acceso a base de datos relacionales          </li> </ul>"},{"location":"tags/#tag:taxonom\u00eda","title":"Taxonom\u00eda","text":"<ul> <li>            UD 2 - P1: Taxonom\u00eda          </li> </ul>"},{"location":"tags/#tag:teclado","title":"Teclado","text":"<ul> <li>            7.2.-Entrada/Salida estandar          </li> <li>            7.2.1.-Lectura desde teclado          </li> </ul>"},{"location":"tags/#tag:tools","title":"Tools","text":"<ul> <li>            1.4.-Traductores          </li> <li>            1.6.-Herramientas y funcionalidades          </li> <li>            UD 2 - Entornos de desarrollo integrado          </li> <li>            UD 3 - Herramientas Git/Github          </li> <li>            UD 4 - 4.3 An\u00e1lisis est\u00e1tico de c\u00f3digo          </li> </ul>"},{"location":"tags/#tag:tuplas","title":"Tuplas","text":"<ul> <li>            * Pr\u00e1ctica 3.1: Listas y tuplas          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> <li>            UD 3 - P1: Listas          </li> </ul>"},{"location":"tags/#tag:uml","title":"UML","text":"<ul> <li>            UD 5 - 5.1 \u00bfQu\u00e9 es UML?          </li> <li>            UD 5 - 5.2 Diagrama de clases          </li> </ul>"},{"location":"tags/#tag:xml","title":"XML","text":"<ul> <li>            * Pr\u00e1ctica 3.5: XML          </li> <li>            3.7.-Manejo de XML          </li> </ul>"},{"location":"tags/#tag:atributo-de-clase","title":"atributo de clase","text":"<ul> <li>            Atributos de clase vs Propiedades.          </li> <li>            Clases selladas en detalle con varios ejemplos.          </li> </ul>"},{"location":"tags/#tag:capfd","title":"capfd","text":"<ul> <li>            Pruebas Unitarias con monkeypatch y capfd.          </li> </ul>"},{"location":"tags/#tag:clase-abstracta","title":"clase abstracta","text":"<ul> <li>            Diferencias entre clase abstracta e interfaz.          </li> </ul>"},{"location":"tags/#tag:clases-abstractas","title":"clases abstractas","text":"<ul> <li>            * Pr\u00e1ctica 5.1: Relaci\u00f3n de ejercicios          </li> </ul>"},{"location":"tags/#tag:dise\u00f1o","title":"dise\u00f1o","text":"<ul> <li>            Modelos MVVM y MVC.          </li> </ul>"},{"location":"tags/#tag:git","title":"git","text":"<ul> <li>            Pr\u00e1ctica 4.1: Git/Github b\u00e1sico          </li> <li>            Pr\u00e1ctica 4.2: Git/Github merge          </li> <li>            Pr\u00e1ctica 4.3: Git/Github rebase I          </li> <li>            Pr\u00e1ctica 4.4: Git/Github rebase II          </li> <li>            Pr\u00e1ctica 4.5: Git/Github Pull Request (PR)          </li> <li>            UD 3 - P1: Git/Github b\u00e1sico          </li> <li>            UD 4 - P1: Git/Github b\u00e1sico          </li> </ul>"},{"location":"tags/#tag:github","title":"github","text":"<ul> <li>            Pr\u00e1ctica 4.1: Git/Github b\u00e1sico          </li> <li>            Pr\u00e1ctica 4.2: Git/Github merge          </li> <li>            Pr\u00e1ctica 4.3: Git/Github rebase I          </li> <li>            Pr\u00e1ctica 4.4: Git/Github rebase II          </li> <li>            Pr\u00e1ctica 4.5: Git/Github Pull Request (PR)          </li> <li>            UD 3 - P1: Git/Github b\u00e1sico          </li> <li>            UD 4 - P1: Git/Github b\u00e1sico          </li> </ul>"},{"location":"tags/#tag:herencia","title":"herencia","text":"<ul> <li>            Polimorfismo en la Herencia.          </li> </ul>"},{"location":"tags/#tag:incidentes","title":"incidentes","text":"<ul> <li>            1.2.2.-An\u00e1lisis de Riesgos          </li> <li>            2.1.-Taxonom\u00eda de incidentes          </li> <li>            2.2.1.-SOC - Servicios y herramientas          </li> <li>            UD 1 - 2.1.1 Taxonom\u00eda de incidentes          </li> </ul>"},{"location":"tags/#tag:inicializaci\u00f3n","title":"inicializaci\u00f3n","text":"<ul> <li>            Modificador lateinit.          </li> </ul>"},{"location":"tags/#tag:interfaces","title":"interfaces","text":"<ul> <li>            * Pr\u00e1ctica 5.1: Relaci\u00f3n de ejercicios          </li> </ul>"},{"location":"tags/#tag:interfaz","title":"interfaz","text":"<ul> <li>            Diferencias entre clase abstracta e interfaz.          </li> </ul>"},{"location":"tags/#tag:join","title":"join","text":"<ul> <li>            3.9.-Ampliaci\u00f3n II          </li> </ul>"},{"location":"tags/#tag:kotest","title":"kotest","text":"<ul> <li>            UD 3 - 3.3 Kotest          </li> </ul>"},{"location":"tags/#tag:kotlin","title":"kotlin","text":"<ul> <li>            * Pr\u00e1ctica 4.1: Kotlin B\u00e1sico          </li> <li>            4.1.-Kotlin: B\u00e1sico          </li> <li>            4.2.1.-Aclaraciones          </li> <li>            4.3.1.-Programaci\u00f3n orientada a objetos          </li> <li>            5.1.-Revisitando las clases y los objetos          </li> <li>            5.2.-Visibilidad en miembros          </li> <li>            5.3.-Herencia          </li> <li>            6.1.-Jerarqu\u00eda de Clases          </li> <li>            6.2.-Ejemplo          </li> <li>            6.3.-Principios SOLID          </li> <li>            6.4.-Comentarios y documentaci\u00f3n          </li> <li>            Atributos de clase vs Propiedades.          </li> <li>            Clases selladas en detalle con varios ejemplos.          </li> <li>            Diferencias entre clase abstracta e interfaz.          </li> <li>            Modelos MVVM y MVC.          </li> <li>            Modificador lateinit.          </li> <li>            OBJECTS Ejemplos y diferencias claves.          </li> <li>            Polimorfismo en la Herencia.          </li> <li>            Scope functions en kotlin, como usarlas.          </li> <li>            Tratamiento de ficheros JSON.          </li> </ul>"},{"location":"tags/#tag:ktlint","title":"ktlint","text":"<ul> <li>            UD 4 - 4.3 An\u00e1lisis est\u00e1tico de c\u00f3digo          </li> </ul>"},{"location":"tags/#tag:lateinit","title":"lateinit","text":"<ul> <li>            Modificador lateinit.          </li> </ul>"},{"location":"tags/#tag:monkeypatch","title":"monkeypatch","text":"<ul> <li>            Pruebas Unitarias con monkeypatch y capfd.          </li> </ul>"},{"location":"tags/#tag:normativa","title":"normativa","text":"<ul> <li>            1.3.-Puesto de trabajo          </li> </ul>"},{"location":"tags/#tag:object","title":"object","text":"<ul> <li>            OBJECTS Ejemplos y diferencias claves.          </li> </ul>"},{"location":"tags/#tag:patrones","title":"patrones","text":"<ul> <li>            Modelos MVVM y MVC.          </li> </ul>"},{"location":"tags/#tag:polimorfismo","title":"polimorfismo","text":"<ul> <li>            Polimorfismo en la Herencia.          </li> </ul>"},{"location":"tags/#tag:pol\u00edtica","title":"pol\u00edtica","text":"<ul> <li>            1.3.-Puesto de trabajo          </li> </ul>"},{"location":"tags/#tag:principios","title":"principios","text":"<ul> <li>            1.1.-PrincipiosGenerales          </li> </ul>"},{"location":"tags/#tag:propiedad","title":"propiedad","text":"<ul> <li>            Atributos de clase vs Propiedades.          </li> <li>            Clases selladas en detalle con varios ejemplos.          </li> </ul>"},{"location":"tags/#tag:pytest","title":"pytest","text":"<ul> <li>            Pruebas Unitarias con monkeypatch y capfd.          </li> </ul>"},{"location":"tags/#tag:python","title":"python","text":"<ul> <li>            Porque en Python empiezan los programas con if __name__ == __main__          </li> <li>            Pruebas Unitarias con monkeypatch y capfd.          </li> <li>            Separa responsabilidades.          </li> </ul>"},{"location":"tags/#tag:riesgos","title":"riesgos","text":"<ul> <li>            1.2.2.-An\u00e1lisis de Riesgos          </li> </ul>"},{"location":"tags/#tag:scope-functions","title":"scope functions","text":"<ul> <li>            Scope functions en kotlin, como usarlas.          </li> </ul>"},{"location":"tags/#tag:singleton","title":"singleton","text":"<ul> <li>            OBJECTS Ejemplos y diferencias claves.          </li> </ul>"},{"location":"tags/#tag:taxonom\u00eda","title":"taxonom\u00eda","text":"<ul> <li>            2.1.-Taxonom\u00eda de incidentes          </li> <li>            UD 1 - 2.1.1 Taxonom\u00eda de incidentes          </li> </ul>"},{"location":"tags/#tag:test","title":"test","text":"<ul> <li>            Pruebas Unitarias con monkeypatch y capfd.          </li> <li>            Separa responsabilidades.          </li> <li>            UD 3 - 3.1 Pruebas          </li> </ul>"},{"location":"tags/#tag:testing","title":"testing","text":"<ul> <li>            UD 3 - Dise\u00f1o y Realizaci\u00f3n de Pruebas          </li> </ul>"},{"location":"tags/#tag:tuplas","title":"tuplas","text":"<ul> <li>            3.2.-Est.Datos: Tuplas          </li> </ul>"},{"location":"blog/20221026-nameEnPython/","title":"Porque en Python empiezan los programas con if __name__ == __main__","text":"<p>Cuando un int\u00e9rprete de Python lee un archivo de Python, primero establece algunas variables especiales. Luego ejecuta el c\u00f3digo desde el archivo.</p> <p>Una de esas variables se llama <code>__name__</code> .</p> <p>Si sigues este art\u00edculo paso a paso y lees sus fragmentos de c\u00f3digo, aprender\u00e1s c\u00f3mo usar <code>if __name__ == \"__main__\"</code>, y por qu\u00e9 es tan importante.</p>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#modulos-de-python-explicados","title":"M\u00f3dulos de Python explicados","text":"<p>Los archivos de Python se llaman m\u00f3dulos y se identifican mediante la extensi\u00f3n de archivo <code>.py</code>. Un m\u00f3dulo puede definir funciones, clases y variables.</p> <p>Entonces, cuando el int\u00e9rprete ejecuta un m\u00f3dulo, el variable <code>__name__</code> se establecer\u00e1 como <code>__main__</code> si el m\u00f3dulo que se est\u00e1 ejecutando es el programa principal.</p> <p>Pero si el c\u00f3digo est\u00e1 importando el m\u00f3dulo desde otro m\u00f3dulo, entonces el variable <code>__name__</code> se establecer\u00e1 en el nombre de ese m\u00f3dulo.</p> <p>Echemos un vistazo a un ejemplo. Cree un m\u00f3dulo de Python llamado <code>file_one.py</code> y pegue este c\u00f3digo de nivel superior dentro:</p> <pre><code># Python file one module\n\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n</code></pre> <p>Al ejecutar este archivo, ver\u00e1s exactamente de lo que est\u00e1bamos hablando. La variable <code>__name__</code> para este m\u00f3dulo se establece en <code>__main__</code>:</p> <pre><code>File one __name__ is set to: __main_\n</code></pre> <p>Ahora agregua otro archivo llamado <code>file_two.py</code> y pegua este c\u00f3digo dentro:</p> <pre><code># Python module to import\n\nprint(\"File two __name__ is set to: {}\" .format(__name__))\n</code></pre> <p>Adem\u00e1s, modifica el c\u00f3digo en <code>file_one.py</code> de esta manera para que importemos el m\u00f3dulo <code>file_two</code>:</p> <pre><code># Python module to execute\nimport file_two\n\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n</code></pre> <p>Ejecutando nuestro c\u00f3digo <code>file_one</code> una vez m\u00e1s mostrar\u00e1 que la variable <code>__name__</code> en <code>file_one</code> no cambi\u00f3, y a\u00fan permanece establecida en <code>__main__</code>. Pero ahora la variable <code>__name__</code> en <code>file_two</code> se establece como el nombre del m\u00f3dulo, por lo tanto <code>file_two</code>.</p> <p>El resultado deber\u00eda verse as\u00ed:</p> <pre><code>File two __name__ is set to: file_two\nFile one __name__ is set to: __main__\n</code></pre> <p>Pero ejecuta <code>file_two</code> directamente y ver\u00e1s que su nombre est\u00e1 establecido en <code>__main__</code>:</p> <pre><code>File two __name__ is set to: __main__\n</code></pre> <p>La variable <code>__name__</code> para el archivo/m\u00f3dulo que se ejecuta ser\u00e1 siempre <code>__main__</code>. Pero la variable <code>__name__</code> para todos los dem\u00e1s m\u00f3dulos que se importan se establecer\u00e1 en el nombre de su m\u00f3dulo.</p>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#convenciones-de-nombres-de-archivos-de-python","title":"Convenciones de nombres de archivos de Python","text":"<p>La forma habitual de usar <code>__name__</code> y <code>__main__</code> se ve as\u00ed:</p> <pre><code>if __name__ == \"__main__\":\n   Do something here\n</code></pre> <p>Veamos c\u00f3mo funciona esto en la vida real y c\u00f3mo usar realmente estas variables.</p> <p>Modifica <code>file_one</code> y <code>file_two</code> para que se vean as\u00ed:</p> <p><code>file_one</code>:</p> <pre><code># Python module to execute\nimport file_two\n\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n\nif __name__ == \"__main__\":\n   print(\"File one executed when ran directly\")\nelse:\n   print(\"File one executed when imported\")\n</code></pre> <p><code>file_two</code>:</p> <pre><code># Python module to import\n\nprint(\"File two __name__ is set to: {}\" .format(__name__))\n\nif __name__ == \"__main__\":\n   print(\"File two executed when ran directly\")\nelse:\n   print(\"File two executed when imported\")\n</code></pre> <p>Nuevamente, al ejecutar <code>file_one</code> , ver\u00e1s que el programa reconoci\u00f3 cu\u00e1l de estos dos m\u00f3dulos es <code>__main__</code> y ejecut\u00f3 el c\u00f3digo de acuerdo con nuestras primeras declaraciones <code>if else</code>.</p> <p>El resultado deber\u00eda verse as\u00ed:</p> <pre><code>File two __name__ is set to: file_two\nFile two executed when imported\nFile one __name__ is set to: __main__\nFile one executed when ran directly\n</code></pre> <p>Ahora ejecuta <code>file_two</code> y ver\u00e1s que la variable <code>__name__</code> est\u00e1 establecida en <code>__main__</code>:</p> <pre><code>File two __name__ is set to: __main__\nFile two executed when ran directly\n</code></pre> <p>Cuando se importan y ejecutan m\u00f3dulos como este, se importar\u00e1n sus funciones y se ejecutar\u00e1 el c\u00f3digo de nivel superior.</p> <p>Para ver este proceso en acci\u00f3n, modifica tus archivos para que se vean as\u00ed:</p> <p><code>file_one</code>:</p> <pre><code># Python module to execute\nimport file_two\n\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n\ndef function_one():\n   print(\"Function one is executed\")\n\ndef function_two():\n   print(\"Function two is executed\")\n\nif __name__ == \"__main__\":\n   print(\"File one executed when ran directly\")\nelse:\n   print(\"File one executed when imported\")\n</code></pre> <p><code>file_two</code>:</p> <pre><code># Python module to import\n\nprint(\"File two __name__ is set to: {}\" .format(__name__))\n\ndef function_three():\n   print(\"Function three is executed\")\n\nif __name__ == \"__main__\":\n   print(\"File two executed when ran directly\")\nelse:\n   print(\"File two executed when imported\")\n</code></pre> <p>Ahora las funciones se cargan pero no se ejecutan.</p> <p>Para ejecutar una de estas funciones, modifica la parte <code>if __name__ == \"__main__\"</code> de <code>file_one</code> para que se vea as\u00ed:</p> <pre><code>if __name__ == \"__main__\":\n   print(\"File one executed when ran directly\")\n   function_two()\nelse:\n   print(\"File one executed when imported\")\n</code></pre> <p>Al ejecutar <code>file_one</code>, deber\u00edas ver que sea as\u00ed:</p> <pre><code>File two __name__ is set to: file_two\nFile two executed when imported\nFile one __name__ is set to: __main__\nFile one executed when ran directly\nFunction two is executed\n</code></pre> <p>Adem\u00e1s, puedes ejecutar funciones desde archivos importados. Para hacer eso, modifica la parte <code>if __name__ ==\"__name__\"</code> de <code>file_one</code> para que se vea as\u00ed:</p> <pre><code>if __name__ == \"__main__\":\n   print(\"File one executed when ran directly\")\n   function_two()\n   file_two.function_three()\nelse:\n   print(\"File one executed when imported\")\n</code></pre> <p>Y puedes espera un resultado como este:</p> <pre><code>File two __name__ is set to: file_two\nFile two executed when imported\nFile one __name__ is set to: __main__\nFile one executed when ran directly\nFunction two is executed\nFunction three is executed\n</code></pre> <p>Ahora digamos que el m\u00f3dulo <code>file_two</code> es realmente grande con muchas funciones (dos en nuestro caso), y no deseas importarlas todas. Modifica   <code>file_two</code> para que se vea as\u00ed:</p> <pre><code># Python module to import\n\nprint(\"File two __name__ is set to: {}\" .format(__name__))\n\ndef function_three():\n   print(\"Function three is executed\")\n\ndef function_four():\n   print(\"Function four is executed\")\n\nif __name__ == \"__main__\":\n   print(\"File two executed when ran directly\")\nelse:\n   print(\"File two executed when imported\")\n</code></pre> <p>Y para importar las funciones espec\u00edficas del m\u00f3dulo, usa el bloque <code>from</code> import en el archivo <code>file_one</code>:</p> <pre><code># Python module to execute\nfrom file_two import function_three\n\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n\ndef function_one():\n   print(\"Function one is executed\")\n\ndef function_two():\n   print(\"Function two is executed\")\n\nif __name__ == \"__main__\":\n   print(\"File one executed when ran directly\")\n   function_two()\n   function_three()\nelse:\n   print(\"File one executed when imported\")\n</code></pre>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#conclusion","title":"Conclusion","text":"<p>Hay un caso de uso realmente agradable para la variable <code>__name__</code>, ya sea que desees un archivo que se pueda ejecutar como el programa principal o sea importardo por otros m\u00f3dulos. Podemos usar un bloque <code>if __name__ == \"__name__\"</code> para permitir o evitar que se ejecuten partes del c\u00f3digo cuando sean importados los m\u00f3dulos.</p> <p>Cuando el int\u00e9rprete de Python lee un archivo, la variable <code>__name__</code> se establece como <code>__main__</code> si el m\u00f3dulo que se est\u00e1 ejecutando, o como el nombre del m\u00f3dulo si se importa. Al leer el archivo se ejecuta todo el c\u00f3digo de nivel superior, pero no las funciones y clases (ya que solamente se importar\u00e1n).</p>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#fuente","title":"Fuente","text":"<ul> <li>Python if name == main Explicado con ejemplos de c\u00f3digo</li> </ul>","tags":["python"]},{"location":"blog/20230213-scopeFunctions/","title":"Funciones de alcance (scope functions)","text":"<p>Kotlin proporciona un conjunto de funciones que ayudan a aclarar un poco m\u00e1s el c\u00f3digo y hacen la programaci\u00f3n un poco mas divertida. Estas funciones se llaman scope functions.</p> <p>Scope functions: el prop\u00f3sito de estas funciones es ejecutar un bloque de c\u00f3digo dentro del contexto de un objeto.</p> <p>La librer\u00eda est\u00e1ndar actualmente cuenta con las siguientes funciones de alcance: <code>let</code>, <code>run</code>, <code>with</code>, <code>apply</code> y <code>also</code>.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#como-usarlas","title":"\u00bfC\u00f3mo usarlas?","text":"<p>Hay dos elementos que las diferencian:</p> <ol> <li>C\u00f3mo accedemos al objeto referenciado dentro del scope:</li> <li>Para las funciones <code>let</code> y <code>also</code> accedemos mediante el <code>it</code>.</li> <li>Para <code>run</code>, <code>with</code> y <code>apply</code> utilizamos <code>this</code>.</li> <li>Qu\u00e9 valor retorna:</li> <li><code>apply</code> y <code>also</code> devuelven el objeto como tal, tras ejecutar el bloque de c\u00f3digo.</li> <li><code>let</code>, <code>run</code> y <code>with</code> devuelven el valor de retorno del lambda que reciben, es decir, retorna el valor de nuestra \u00faltima sentencia ejecutada en ese lambda.</li> </ol> <p>Por otra parte tambien podemos hacer la siguiente distinci\u00f3n entre ellas:</p> <p></p> <ul> <li>Input: </li> <li>input receiver, recibe el objeto mediante llamada a funciones de extension: <code>apply</code>, <code>run</code>, <code>also</code>, <code>let</code>. </li> <li> <p>input parameter, recibe el objeto como par\u00e1metro: <code>with</code></p> </li> <li> <p>Binding in lambda </p> </li> <li>Receiver <code>this</code>: El mismo objeto es quien recibe la llamada de las funciones <code>apply</code>, <code>run</code>, <code>with</code></li> <li> <p>Parameter <code>it</code>: <code>also</code>, <code>let</code>. En este caso, nos permite llamar a una referencia pas\u00e1ndole <code>it</code> como argumento, por ejemplo ::println</p> </li> <li> <p>Output</p> </li> <li>El mismo objeto: <code>apply</code>, <code>also</code>.</li> <li>El resultado de la lambda: <code>run</code>, <code>let</code>, <code>with</code>. <code>run</code> y <code>with son lo mismo, salvo que</code>run es una funci\u00f3n de extensi\u00f3n.</li> </ul> <p>Podemos ver la definici\u00f3n de cada una de estas funciones a continuaci\u00f3n:</p> <pre><code>//with\ninline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R {\n    return receiver.block()\n}\n\n//also\ninline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T {\n    block(this)\n    return this\n}\n\n//apply\ninline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T {\n    block()\n    return this\n}\n\n//let\ninline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R {\n    return block(this)\n}\n\n//run\ninline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R {\n    return block()\n}\n</code></pre> <p>Y ejemplos de uso de cada uno de ellas.</p> <pre><code>//with\nval r: R = with(T()) { this.foo(); this.toR() }\n\n//also\nval t: T = T().also { it.foo() }\n\n//apply\nval t: T = T().apply { this.foo() }\n\n//let\nval r: R = T().let { it.foo(); it.toR() }\n\n//run\nval r: R = T().run { this.foo(); this.toR() }\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#cuando-usarlas","title":"\u00bfCu\u00e1ndo usarlas?","text":"<p>Si bien todas realizan la misma funci\u00f3n, lo que cambia, adem\u00e1s de lo previamente mencionado, es el contexto, y es ah\u00ed donde debemos distinguir qu\u00e9 funci\u00f3n conviene utilizar.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#let","title":"let","text":"<pre><code>// `let` implementation without contract\ninline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R = block(this)\n</code></pre> <p><code>let</code>, por ejemplo, se suele utilizar en dos situaciones distintas, cuando queremos ejecutar un bloque de c\u00f3digo solo con valores no nulos o para invocar una o m\u00e1s funciones con resultados en cadena. Unos ejemplos sencillos ser\u00edan:</p> <pre><code>val str: String? = \"Hello\"   \nval value = str?.let { \n   \"$it world\"\n}\nprintln(value)\n\n~ Hello world\n</code></pre> <pre><code>val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\", \"five\")\nnumbers.map { it.length }.filter { it &gt; 3 }.let {\nprintln(it)\n}\n\n~ [5, 4, 4]\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#run","title":"run","text":"<pre><code>// `run` implementation without contract\ninline fun &lt;R&gt; run(block: () -&gt; R): R = block()\n\n// `run` implementation without contract\ninline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R = block()\n</code></pre> <p>El <code>run</code> se suele utilizar cuando inicializamos una variable seguido de una interacci\u00f3n con la misma. Tiene la particularidad de que no siempre es necesario utilizar el <code>this</code> para referenciar al objeto dentro del scope, como en el siguiente ejemplo:</p> <pre><code>fun request(status: String): String = \"Result for request '$status'\"\nval result = service.run {\n  status = 200\n  query(\"$status\")\n}\nprint(result)\n\n~ Result for query '200'\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#apply","title":"apply","text":"<pre><code>// `apply` implementation without contract\ninline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T {\n    block()\n    return this\n}\n</code></pre> <p>En el caso del <code>apply</code>, es com\u00fan utilizarlo para la inicializaci\u00f3n de objetos. Se lee como: aplicar las siguientes asignaciones al objeto.</p> <pre><code>val user = User(\"Lucas\").apply {\n  age = 26\n  country = \"Argentina\"\n  address = \"Avenida Siempre Viva 742\"\n}\nprint(user)\n\n~ Person(name=Lucas, age=26, country=Argentina, address=Avenida Siempre Viva 742)\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#also","title":"also","text":"<pre><code>// `also` implementation without contract\ninline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T {\n    block(this)\n    return this\n}\n</code></pre> <p><code>also</code>, tiene un buen uso cuando realizamos algunas acciones que no est\u00e1n estrictamente relacionadas con el objeto en s\u00ed, pero que lo utilizan como argumento. Se lee como: y adem\u00e1s, realiza lo siguiente.</p> <pre><code>getResults(fooParam).also {\n   Log.v(TAG, \"It's greater than ${it}\")\n}\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#with","title":"with","text":"<pre><code>// `with` implementation without contract\ninline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R =\n    receiver.block()\n</code></pre> <p><code>with</code>, a diferencia de las dem\u00e1s funciones, pasa al objeto como par\u00e1metro en vez de ser el objeto qui\u00e9n llame a la funci\u00f3n. Se suele utilizar en contextos donde no necesitamos obtener un resultado en s\u00ed mismo, sino que queremos aplicar una operaci\u00f3n con/sobre el objeto. Se lee como: con este objeto, hacemos lo siguiente.</p> <pre><code>val numbers = mutableListOf(\"one\", \"two\", \"three\")\nval firstAndLast = with(numbers) {\n    \"The first element is ${first()},\" +\n    \" the last element is ${last()}\"\n}\nprint(firstAndLast)\n\n~ The first element is one, the last element is three\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#como-estas-funciones-nos-podrian-ayudar-a-dar-claridad-a-nuestro-codigo","title":"\u00bfC\u00f3mo estas funciones nos podr\u00edan ayudar a dar claridad a nuestro c\u00f3digo?","text":"<p>Bueno, pongamos un ejemplo m\u00e1s cercano a la realidad para verlo con mejor perspectiva. Supongamos que tenemos la siguiente funci\u00f3n, que sirve para actualizar una vista en Android. <pre><code>fun bind(fooDTO: FooDTO?) {\n    if (fooDTO != null) {\n      if (fooDTO.title != null) {\n        tv_title.text = fooDTO.title\n      } else {\n        container_title.visibility = GONE\n      }\n      if (fooDTO.listFoo != null) {\n        fooDTO.listFoo.forEach { objectList -&gt;\n            if (objectList != null &amp;&amp; objectList.text != null) {\n              itemView.text = objectList.text\n              container_body.addView(itemView)\n            }\n        }\n      } else {\n        container_body.visibility = GONE\n      }\n    }\n}\n</code></pre></p> <p>\u00bfBastante engorroso a simple vista no? Ahora cambiemos los if-else por scope functions. Nos quedar\u00eda algo como: <pre><code>fun bind(fooDTO: FooDTO?) {\n    fooDTO?.let {\n        it.title?.let { tv_title.text = it }\n        :? run { container_title.visibility = GONE }\n\n        it.listFoo?.forEach { objectList -&gt;\n            objectList?.text?.run {\n                itemView.text = this\n                container_body.addView(itemView)\n            }\n        } :? run { container_body.visibility = GONE }\n    }\n}\n</code></pre></p> <p>Obviamente cada una de las funciones elegidas pueden ser discutidas, en cuanto a si es el <code>run</code> o el <code>apply</code> el que deber\u00eda usar, por dar un ejemplo, pero creo que podemos coincidir en que, la estructura completa del m\u00e9todo (funci\u00f3n en Kotlin) y la coherencia del c\u00f3digo, es mucho m\u00e1s acertada que en la versi\u00f3n anterior.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#otras-funciones","title":"Otras funciones","text":"<p>Existen otras dos funciones que son muy \u00fatiles, pero que no entran en el espectro de las  scope functions , que son <code>takeIf</code> y <code>takeUnless</code>. Estas funciones nos permiten ejecutar acciones dependiendo del estado del objeto. Si la condici\u00f3n se cumple, retorna el objeto y sino devuelve <code>null</code>. <pre><code>val positiveNumber = number.takeIf { it &gt;= 0 }\nval negativeNumber = number.takeUnless { it &gt;= 0 }\n</code></pre></p> <p>Si combinamos las diferentes funciones, junto con el operador de nullabilidad <code>?.</code>, podemos notar c\u00f3mo el c\u00f3digo va tomando un formato m\u00e1s natural.</p> <pre><code>fooDTO?.let {\n    it.title?.takeIf { it.isNotEmpty() }?.apply { tv_title?.text = this }\n        ?: run { tv_title?.visibility = GONE }\n\n    it.subtitle?.takeIf { it.isNotEmpty() }?.apply { tv_subtitle?.text = this }\n        ?: run { tv_subtitle?.visibility = GONE }\n}\n</code></pre> <p>Como se indica en la documentaci\u00f3n oficial:</p> <p>Las funciones de alcance no introducen nuevas capacidades t\u00e9cnicas, pero pueden hacer que su c\u00f3digo sea m\u00e1s conciso y legible.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#fuente","title":"Fuente","text":"<ul> <li>Funciones de alcance (scope functions)</li> <li>Kotlin Scoping Functions apply vs. with, let, also, and run</li> <li>Scope Functions - kt.academy</li> <li>Resumen de scope functions</li> </ul>","tags":["scope functions","kotlin"]},{"location":"blog/20240201-propiedadesVsAtributos/","title":"Atributos de clase vs Propiedades","text":"<p>En el vasto universo de la programaci\u00f3n, el manejo de las propiedades y atributos de clase es un pilar fundamental que var\u00eda significativamente entre diferentes lenguajes.  Esta dicotom\u00eda es particularmente intrigante en Kotlin, un lenguaje que entrelaza de manera \u00fanica estos conceptos, presentando un enfoque distintivo que se distancia de  otros lenguajes de programaci\u00f3n m\u00e1s tradicionales. En este contexto, exploraremos en profundidad c\u00f3mo Kotlin redefine la gesti\u00f3n de propiedades y atributos de clase,  contrast\u00e1ndolo con su contraparte en C#, donde la distinci\u00f3n entre ambos es m\u00e1s evidente y ortodoxa.</p> <p>A continuaci\u00f3n, se desglosar\u00e1n las diferencias fundamentales y las similitudes entre estas dos potencias de la programaci\u00f3n, enfoc\u00e1ndonos en c\u00f3mo cada una maneja la encapsulaci\u00f3n,  la validaci\u00f3n y el control de acceso a los datos de una clase. Con el fin de ilustrar estos conceptos de manera pr\u00e1ctica, se presentar\u00e1 un ejemplo comparativo,  demostrando c\u00f3mo se definen y se manipulan los atributos de clase y las propiedades en C# y en Kotlin. </p> <p>Este an\u00e1lisis no solo resaltar\u00e1 las peculiaridades sint\u00e1cticas y estructurales de cada lenguaje sino que tambi\u00e9n profundizar\u00e1 en la filosof\u00eda de dise\u00f1o y los patrones de  programaci\u00f3n que cada uno promueve, proporcionando as\u00ed una comprensi\u00f3n integral de sus capacidades e idiosincrasias.</p>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240201-propiedadesVsAtributos/#csharp-c","title":"CSharp (C#)","text":"<p>En C#, un atributo de clase es una variable que pertenece a la clase, mientras que una propiedad es una forma de acceder y  controlar el acceso a ese atributo. Las propiedades pueden ofrecer un control m\u00e1s detallado sobre c\u00f3mo se accede o se modifica  un atributo, por ejemplo, validando datos antes de asignarlos.</p> <p>Esto un ejemplo simple de c\u00f3mo definir un atributo de clase y su propiedad:</p> <pre><code>using System;\n\npublic class Coche\n{\n    // Atributo de clase privado\n    private string color;\n\n    // Propiedad p\u00fablica para acceder y asignar el atributo 'color'\n    public string Color\n    {\n        get\n        {\n            // Aqu\u00ed se puede agregar l\u00f3gica adicional al obtener el color\n            return color;\n        }\n        set\n        {\n            // Aqu\u00ed se puede validar el valor antes de asignarlo al atributo 'color'\n            if (value == null)\n                throw new ArgumentNullException(\"El color no puede ser nulo.\");\n            else\n                color = value;\n        }\n    }\n\n    // Constructor de la clase\n    public Coche(string inicialColor)\n    {\n        // Asignar un color inicial al coche a trav\u00e9s de la propiedad\n        Color = inicialColor;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Crear una instancia de Coche con un color inicial\n        Coche miCoche = new Coche(\"Rojo\");\n\n        // Mostrar el color actual del coche\n        Console.WriteLine(\"El color del coche es: \" + miCoche.Color);\n\n        // Cambiar el color del coche\n        miCoche.Color = \"Azul\";\n\n        // Mostrar el nuevo color del coche\n        Console.WriteLine(\"El nuevo color del coche es: \" + miCoche.Color);\n    }\n}\n</code></pre> <p>En este ejemplo, <code>color</code> es un atributo de clase privado de la clase <code>Coche</code>. La propiedad <code>Color</code> permite acceder y modificar el atributo <code>color</code>.  Nota c\u00f3mo la propiedad <code>Color</code> proporciona un m\u00e9todo <code>get</code> para obtener el valor del color y un m\u00e9todo <code>set</code> para cambiar el color, incluyendo una  validaci\u00f3n para asegurarse de que el nuevo color no sea nulo antes de asignarlo al atributo <code>color</code>.</p>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240201-propiedadesVsAtributos/#kotlin","title":"Kotlin","text":"<p>Ahora realizamos el mismo c\u00f3digo en Kotlin y despu\u00e9s mostramos las diferencias.</p> <pre><code>class Coche(inicialColor: String) {\n    // Atributo de clase con propiedad incorporada\n    var color: String = inicialColor\n        set(value) {\n            // Validar el valor antes de asignarlo al atributo 'color'\n            if (value.isEmpty()) {\n                throw IllegalArgumentException(\"El color no puede estar vac\u00edo.\")\n            }\n            field = value\n        }\n\n    init {\n        // Validaci\u00f3n adicional o l\u00f3gica de inicializaci\u00f3n si es necesario\n    }\n}\n\nfun main() {\n    // Crear una instancia de Coche con un color inicial\n    val miCoche = Coche(\"Rojo\")\n\n    // Mostrar el color actual del coche\n    println(\"El color del coche es: ${miCoche.color}\")\n\n    // Cambiar el color del coche\n    miCoche.color = \"Azul\"\n\n    // Mostrar el nuevo color del coche\n    println(\"El nuevo color del coche es: ${miCoche.color}\")\n}\n</code></pre>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240201-propiedadesVsAtributos/#diferencias-y-caracteristicas-de-kotlin-en-relacion-con-c-en-este-contexto","title":"Diferencias y caracter\u00edsticas de Kotlin en relaci\u00f3n con C# en este contexto:","text":"<ol> <li> <p>Propiedades Incorporadas:</p> <ul> <li>Kotlin maneja atributos de clase y propiedades como una sola entidad, a diferencia de C# que los maneja por separado.   En Kotlin, al definir un <code>var</code> (variable mutable) o <code>val</code> (variable inmutable), est\u00e1s creando autom\u00e1ticamente una propiedad   con su getter y setter correspondiente. Esto reduce la cantidad de c\u00f3digo necesario para definir propiedades simples.</li> </ul> </li> <li> <p>Palabras Clave <code>field</code>:</p> <ul> <li>En el setter de Kotlin, usas <code>field</code> para referirte al respaldo del campo de la propiedad. Es una palabra clave especial   que solo se puede usar dentro de los accesores de las propiedades (getters y setters).</li> </ul> </li> <li> <p>Inicializaci\u00f3n de Propiedades:</p> <ul> <li>En Kotlin, las propiedades pueden ser inicializadas directamente en su declaraci\u00f3n o en el bloque de inicializaci\u00f3n <code>init</code>.   Esto ofrece una sintaxis m\u00e1s concisa y clara.</li> </ul> </li> <li> <p>Verificaci\u00f3n de Nulos y Validaci\u00f3n:</p> <ul> <li>Kotlin tiene un sistema de tipos que distingue entre referencias que pueden ser nulas y las que no pueden serlo.   En este ejemplo, el tipo <code>String</code> no admite nulos. Si se intenta asignar un valor nulo a <code>color</code>, el programa no compilar\u00e1.</li> <li>La validaci\u00f3n en el <code>setter</code> se hace de manera similar a C#, pero lanzando una <code>IllegalArgumentException</code> si el valor es inv\u00e1lido.</li> </ul> </li> <li> <p>Sintaxis de Funciones y Clases:</p> <ul> <li>La sintaxis de Kotlin es m\u00e1s concisa. Por ejemplo, no es necesario especificar el tipo de retorno para funciones que no retornan un valor (equivalente a <code>void</code> en C#).</li> </ul> </li> </ol>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240201-propiedadesVsAtributos/#conclusion","title":"Conclusi\u00f3n:","text":"<p>Kotlin, con su dise\u00f1o moderno, ofrece un enfoque m\u00e1s compacto y expresivo, especialmente \u00fatil para definir propiedades y realizar validaciones.  El idioma promueve un c\u00f3digo m\u00e1s seguro y menos propenso a errores en tiempo de ejecuci\u00f3n gracias a su manejo de nulos y su sistema de tipos.</p>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240202-modificadorLateInit/","title":"Modificador lateinit","text":"<p>El modificador <code>lateinit</code> es \u00fatil en Kotlin para casos en los que queremos declarar una propiedad no nula pero no podemos inicializarla en el momento de la creaci\u00f3n del objeto.  Es com\u00fanmente utilizado en situaciones como la inyecci\u00f3n de dependencias o la inicializaci\u00f3n posterior en el ciclo de vida del objeto.</p>","tags":["lateinit","inicializaci\u00f3n","kotlin"]},{"location":"blog/20240202-modificadorLateInit/#ejemplo-gestor-de-tareas","title":"Ejemplo: Gestor de Tareas","text":"<p>Vamos a crear una clase <code>GestorTareas</code> que represente un sistema simple para manejar tareas. Inicialmente, cuando se crea el gestor, a\u00fan no tenemos una lista de tareas para asignarle,  as\u00ed que queremos inicializar esa lista m\u00e1s tarde.</p> <ol> <li> <p>Creaci\u00f3n de la Clase con <code>lateinit</code>:</p> <ul> <li>Define una clase <code>Tarea</code> con una propiedad <code>descripcion</code>.</li> <li>Define la clase <code>GestorTareas</code> que inicialmente no sabe cu\u00e1les son las tareas que va a gestionar.</li> <li>Utiliza <code>lateinit</code> para declarar una propiedad que almacenar\u00e1 una lista de <code>Tarea</code>.</li> <li> <p>Proporciona una funci\u00f3n <code>inicializarTareas</code> para configurar las tareas despu\u00e9s de la creaci\u00f3n del objeto <code>GestorTareas</code>.</p> <pre><code>class Tarea(val descripcion: String)\n\nclass GestorTareas {\n    lateinit var tareas: List&lt;Tarea&gt;\n\n    fun inicializarTareas(tareas: List&lt;Tarea&gt;) {\n        this.tareas = tareas\n    }\n\n    fun mostrarTareas() {\n        if (::tareas.isInitialized) {\n            tareas.forEach { tarea -&gt;\n                println(tarea.descripcion)\n            }\n        } else {\n            println(\"Las tareas a\u00fan no han sido inicializadas.\")\n        }\n    }\n}\n</code></pre> <pre><code>fun main() {\n    val gestor = GestorTareas()\n    gestor.mostrarTareas()  // Debe indicar que las tareas no est\u00e1n inicializadas\n\n    val listaTareas = listOf(Tarea(\"Aprender Kotlin\"), Tarea(\"Hacer ejercicio\"))\n    gestor.inicializarTareas(listaTareas)\n\n    gestor.mostrarTareas()  // Ahora debe mostrar las tareas asignadas\n}\n</code></pre> </li> </ul> <p>En este ejemplo, el gestor de tareas comienza sin conocer las tareas. Solo despu\u00e9s de inicializarlo con una lista de tareas (mediante el m\u00e9todo <code>inicializarTareas</code>),  est\u00e1 listo para funcionar y mostrar las tareas. Esto demuestra el uso de <code>lateinit</code> para propiedades que ser\u00e1n inicializadas m\u00e1s tarde y tambi\u00e9n muestra c\u00f3mo comprobar  si una propiedad <code>lateinit</code> ha sido inicializada antes de usarla, usando <code>::tareas.isInitialized</code>.</p> <p>En Kotlin, el operador <code>::</code> se utiliza como referencia a funciones o propiedades, y tambi\u00e9n para acceder a ciertas propiedades de la reflexi\u00f3n del lenguaje.</p> </li> <li> <p>Verificaci\u00f3n de Inicializaci\u00f3n con <code>lateinit</code>:</p> </li> <li>En el contexto de una propiedad <code>lateinit</code>, puedes usar <code>::</code> para hacer referencia a la propiedad y luego <code>.isInitialized</code> para verificar si la propiedad ha sido inicializada.</li> <li>Ejemplo:         <pre><code>class Ejemplo {\n    lateinit var texto: String\n}\n\nfun main() {\n    val ejemplo = Ejemplo()\n    if (::texto.isInitialized) { // Verifica si 'texto' ha sido inicializado\n        println(ejemplo.texto)\n    } else {\n        println(\"texto no est\u00e1 inicializado.\")\n    }\n}\n</code></pre></li> <li> <p>Esto es especialmente \u00fatil para propiedades <code>lateinit</code>, ya que acceder a una propiedad <code>lateinit</code> no inicializada lanzar\u00eda una excepci\u00f3n.      La verificaci\u00f3n con <code>.isInitialized</code> te permite evitar esta excepci\u00f3n comprobando primero si la propiedad ha sido inicializada.</p> <p>El uso de <code>::</code> es bastante vers\u00e1til y forma parte de las capacidades reflexivas y funcionales de Kotlin,  permitiendo escribir c\u00f3digo m\u00e1s abstracto y general, as\u00ed como realizar comprobaciones en tiempo de ejecuci\u00f3n sobre las propiedades y funciones de tus objetos.</p> </li> </ol>","tags":["lateinit","inicializaci\u00f3n","kotlin"]},{"location":"blog/20240202-modificadorLateInit/#referencia-a-funciones-o-propiedades","title":"Referencia a Funciones o Propiedades:","text":"<ul> <li>Puedes obtener una referencia a una funci\u00f3n espec\u00edfica de una clase o un objeto usando el operador <code>::</code>.</li> <li>Esto es \u00fatil, por ejemplo c\u00f3mo ya hemos visto anteriormente en esta unidad, cuando quieres pasar una funci\u00f3n como argumento a otra funci\u00f3n de orden superior.</li> <li>Ejemplo:<pre><code>```kotlin\nfun saludar() {\n    println(\"\u00a1Hola!\")\n}\n\nfun ejecutarAccion(accion: () -&gt; Unit) {\n    accion()\n}\n\nfun main() {\n    // Pasamos la referencia de la funci\u00f3n 'saludar' a 'ejecutarAccion'\n    ejecutarAccion(::saludar) // Imprime \"\u00a1Hola!\"\n}\n```\n</code></pre> <ul> <li>Lo mismo se puede hacer con propiedades para obtener una referencia a la propiedad que puedes usar para leer o modificar la propiedad.</li> <li>Ejemplo:     <code>kotlin     var contador = 0      fun main() {         val referenciaContador = ::contador         referenciaContador.set(referenciaContador.get() + 1)         println(contador) // Imprime 1     }</code></li> </ul> </li> </ul>","tags":["lateinit","inicializaci\u00f3n","kotlin"]},{"location":"blog/20240203-polimorfismoHerencia/","title":"Polimorfismo en la Herencia","text":"<p>Para explicar este concepto, primero crearemos una clase <code>Padre</code> con la propiedad <code>numAleatorio</code> y los m\u00e9todos <code>dameNumero()</code> y <code>dameTamanio()</code>.  Luego, crearemos la clase <code>Hija</code> que hereda de <code>Padre</code> y tiene sus propios atributos y m\u00e9todos.</p> <ul> <li>Clase Padre:</li> </ul> <pre><code>import kotlin.random.Random\n\nopen class Padre {\n    val numAleatorio: Int = Random.nextInt(100, 1000)\n\n    open fun dameNumero(): Int {\n        return numAleatorio\n    }\n\n    fun dameTamanio(texto: String): Int {\n        return texto.length\n    }\n}\n</code></pre> <p>En este c\u00f3digo, la clase <code>Padre</code> genera un n\u00famero aleatorio al inicializarse. La funci\u00f3n <code>dameNumero()</code> simplemente devuelve ese n\u00famero,  y la funci\u00f3n <code>dameTamanio()</code> devuelve la longitud del texto recibido.</p> <ul> <li>Clase Hija:</li> </ul> <pre><code>class Hija(var descripcion: String = \"Clase Derivada\") : Padre() {\n    var contador: Int = 0\n\n    override fun dameNumero(): Int {\n        contador++\n        println(\"Mostramos descripcion desde la funci\u00f3n dameNumero() -&gt; $descripcion\")\n        return contador\n    }\n\n    fun muestraDescripcion() {\n        println(descripcion)\n    }\n}\n</code></pre> <p>La clase <code>Hija</code> hereda de <code>Padre</code> y sobreescribe el m\u00e9todo <code>dameNumero()</code> para incrementar y devolver el valor de  su propio contador y tambi\u00e9n mostrar por pantalla su propiedad <code>descripcion</code>.  Tambi\u00e9n tiene un m\u00e9todo <code>muestraDescripcion()</code> que imprime su descripci\u00f3n.</p> <ul> <li>Programa principal:</li> </ul> <pre><code>fun main() {\n    val padre1 = Padre()\n    println(\"Info de padre1:\")\n    println(\"--------------\")\n    println(\"dameNumero() en padre: ${padre1.dameNumero()}\")\n    println(\"numAleatorio = ${padre1.numAleatorio}\")\n    println(\"numAleatorio = ${padre1.numAleatorio}\")\n    println(\"numAleatorio = ${padre1.numAleatorio}\")\n    println(\"dameTamanio('padre1 como Padre') = ${padre1.dameTamanio(\"padre1 como Padre\")}\")\n\n    println()\n\n    val padre2 : Padre = Hija()\n    println(\"Info de padre2:\")\n    println(\"--------------\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"numAleatorio = ${padre2.numAleatorio}\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"numAleatorio = ${padre2.numAleatorio}\")\n    println(\"dameTamanio('padre2 como Padre instanciado con Hija()') = ${padre2.dameTamanio(\"padre2 como Padre instanciado con Hija()\")}\")\n\n    // El objeto padre2 es de tipo Padre y no puede llamar a muestraDescripcion(), \n    // que es un m\u00e9todo propio de la clase Hija\n    // padre2.muestraDescripcion()\n    // Tampoco puede acceder directamente a contador, ya que es una propiedad \n    // de la clase Hija.\n    //println(\"contador = ${padre2.contador}\")\n}\n</code></pre> <p>En la funci\u00f3n <code>main</code>, creamos instancias de ambas clases y mostramos sus comportamientos mediante llamadas a sus m\u00e9todos.</p> <pre><code>Nota: La clase `Hija` no puede acceder directamente a `numAleatorio` de `Padre` si fuera privada, as\u00ed que en este caso, `numAleatorio` \nest\u00e1 declarada como p\u00fablica. \n\nAdem\u00e1s, el m\u00e9todo `dameNumero()` en la clase `Hija` sobreescribe el m\u00e9todo de la clase `Padre`, lo cual se permite en Kotlin gracias a \nque la clase `Padre` y el m\u00e9todo `dameNumero()` est\u00e1n marcados como `open`.\n</code></pre> <p>Si ejecutamos el programa, lo que est\u00e1mos observando es un concepto central en la programaci\u00f3n orientada a objetos llamado \"polimorfismo\".  Este concepto permite que una variable de un tipo de clase <code>base</code> (superclase) pueda referenciar a un objeto de una clase <code>derivada</code> (subclase),  y al llamar a m\u00e9todos sobrescritos, se invocar\u00e1n las implementaciones de la <code>subclase</code>.</p> <p>En nuestro caso, tenemos:</p> <pre><code>val padre2: Padre = Hija()\n</code></pre> <p>Aqu\u00ed, <code>padre2</code> es una referencia de tipo <code>Padre</code>, pero apunta a una instancia de <code>Hija</code>.  Esto es posible porque <code>Hija</code> es una subclase de <code>Padre</code> y, por lo tanto, hereda todas sus propiedades y comportamientos.  Sin embargo, al sobrescribir el m\u00e9todo <code>dameNumero()</code> en <code>Hija</code>, cuando este m\u00e9todo se llama en la instancia <code>padre2</code>,  se ejecuta la versi\u00f3n de <code>Hija</code> del m\u00e9todo, no la de <code>Padre</code>. Esto es una manifestaci\u00f3n de polimorfismo.</p> <p>Cuando hacemos llamadas a m\u00e9todos a trav\u00e9s de una referencia de tipo <code>Padre</code>, como <code>padre2</code>, sucede lo siguiente:</p> <ol> <li> <p>Acceso a M\u00e9todos y Propiedades:</p> <ul> <li>Si el m\u00e9todo o la propiedad existe en la clase <code>Padre</code> y no est\u00e1 sobrescrito en <code>Hija</code>, se accede a la versi\u00f3n de <code>Padre</code>.</li> <li>Si el m\u00e9todo est\u00e1 sobrescrito en <code>Hija</code>, como <code>dameNumero()</code>, se accede a la versi\u00f3n de <code>Hija</code>,   incluso si la llamada se realiza a trav\u00e9s de una referencia de tipo <code>Padre</code>.</li> </ul> </li> <li> <p>Acceso Restringido a Miembros Espec\u00edficos de la Subclase:</p> <ul> <li>No podemos acceder directamente a miembros espec\u00edficos de <code>Hija</code> (como <code>contador</code> o <code>muestraDescripcion()</code>) a trav\u00e9s de una   referencia de tipo <code>Padre</code> sin un casting expl\u00edcito. Esto es porque, seg\u00fan la definici\u00f3n de <code>Padre</code>, esos miembros no existen.</li> </ul> </li> </ol> <p>En resumen, el tipo de la referencia (<code>Padre</code> en este caso) determina qu\u00e9 propiedades y m\u00e9todos est\u00e1n accesibles.  Sin embargo, el tipo real del objeto al que apunta la referencia (una instancia de <code>Hija</code>) determina qu\u00e9 implementaciones de  m\u00e9todos se ejecutan cuando se invocan. </p> <p>Esto permite el dise\u00f1o de sistemas flexibles y extensibles donde puedes usar objetos de diferentes subclases de manera intercambiable,  siempre que compartan una interfaz com\u00fan definida por su clase base.</p> <p>*** Casting</p> <p>Si ahora en el <code>main</code> realizamos un Casting de <code>padre2</code> como <code>Hija</code>:</p> <pre><code>fun main() {\n\n    ...    \n\n    // Casting de padre2 a Hija en l\u00ednea para llamar a\n    // contador y muestraDescripcion() directamente.\n    val padre2ComoHija = (padre2 as Hija)\n    println(\"Info de padre2ComoHija:\")\n    println(\"--------------\")\n    println(\"dameNumero() en padre2ComoHija: ${padre2ComoHija.dameNumero()}\")\n    println(\"dameNumero() en padre2ComoHija: ${padre2ComoHija.dameNumero()}\")\n    println(\"dameNumero() en padre2ComoHija: ${padre2ComoHija.dameNumero()}\")\n    padre2ComoHija.muestraDescripcion()\n    println(\"contador = ${padre2ComoHija.contador}\")\n    println(\"numAleatorio = ${padre2ComoHija.numAleatorio}\")\n    println(\"numAleatorio = ${padre2ComoHija.numAleatorio}\")\n    println(\"dameTamanio('padre2 con Casting a Hija') = ${padre2ComoHija.dameTamanio(\"padre2 con Casting a Hija\")}\")\n}\n</code></pre> <p>La capacidad de <code>padre2ComoHija</code> para acceder a <code>numAleatorio</code> directamente despu\u00e9s del casting a <code>Hija</code> se debe a c\u00f3mo funciona la herencia en la POO.  Cuando hacemos un casting de una referencia de una clase base (<code>Padre</code>) a una clase derivada (<code>Hija</code>), no estamos cambiando el objeto en s\u00ed,  sino c\u00f3mo nos referimos a ese objeto en nuestro c\u00f3digo.</p> <p>Aqu\u00ed est\u00e1n los puntos clave:</p> <ol> <li>Herencia:</li> <li> <p><code>Hija</code> es una subclase de <code>Padre</code>, lo que significa que una instancia de <code>Hija</code> hereda todos los campos y m\u00e9todos p\u00fablicos o protegidos de <code>Padre</code>.      En nuestro caso, <code>numAleatorio</code> es un campo p\u00fablico en <code>Padre</code>, por lo que tambi\u00e9n es accesible a trav\u00e9s de cualquier instancia de <code>Hija</code>.</p> </li> <li> <p>Casting:</p> </li> <li> <p>Al hacer <code>(padre2 as Hija)</code>, estamos dici\u00e9ndole al compilador: \"Trata <code>padre2</code>, que sabes que es de tipo <code>Padre</code>, como si fuera de tipo <code>Hija</code>\".      Esto es seguro porque <code>padre2</code> es realmente una instancia de <code>Hija</code>. Despu\u00e9s de este casting, podemos acceder, no solo a los miembros de <code>Hija</code>,      sino tambi\u00e9n a todos los miembros accesibles de <code>Padre</code> (como <code>numAleatorio</code>) a trav\u00e9s de la referencia <code>padre2ComoHija</code>.</p> </li> <li> <p>Acceso a los Miembros de Clase:</p> </li> <li><code>numAleatorio</code> es un miembro de <code>Padre</code> que es accesible en <code>Hija</code> debido a la herencia. Cuando hacemos el casting de <code>padre2</code> a <code>Hija</code>,      estamos simplemente proporcionando una referencia de tipo <code>Hija</code> al mismo objeto.      El objeto no cambia, ni sus miembros. Por lo tanto, <code>padre2ComoHija</code> tiene acceso a <code>numAleatorio</code> porque <code>Hija</code> tiene acceso a los miembros      p\u00fablicos de <code>Padre</code>.</li> </ol> <p>El hecho de que podamos acceder a <code>numAleatorio</code> a trav\u00e9s de <code>padre2ComoHija</code> es un reflejo de estos principios de herencia y polimorfismo en la  programaci\u00f3n orientada a objetos. El objeto no ha cambiado, solo la forma en que nos referimos a \u00e9l en nuestro c\u00f3digo, permiti\u00e9ndonos acceder a m\u00e1s de sus funcionalidades a trav\u00e9s del tipo m\u00e1s espec\u00edfico (<code>Hija</code>).</p>","tags":["herencia","polimorfismo","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/","title":"Diferencias entre clase abstracta e interfaz","text":"<p>En Kotlin, tanto las clases abstractas como las interfaces son conceptos fundamentales para la abstracci\u00f3n y el dise\u00f1o de clases.  Permiten definir una estructura que otras clases pueden implementar o heredar. Aunque comparten algunos prop\u00f3sitos,  tienen caracter\u00edsticas y usos distintos. </p>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/#clase-abstracta","title":"Clase Abstracta","text":"<p>Una clase abstracta es una clase que no se puede instanciar por s\u00ed misma. Se utiliza como clase base para otras clases.  Las clases abstractas se utilizan para definir un patr\u00f3n com\u00fan para un grupo de clases relacionadas.</p> <p>Caracter\u00edsticas: - Puede contener implementaciones concretas de algunos m\u00e9todos. - Puede declarar constructores. - Puede tener propiedades con estado (variables con valores almacenados). - Las clases que heredan de una clase abstracta deben implementar todos los m\u00e9todos abstractos, a menos que ellas mismas sean abstractas.</p> <p>Uso t\u00edpico: - Cuando tienes una base com\u00fan para varias clases, pero nunca necesitas instanciar la clase base por s\u00ed misma. - Cuando tus clases base necesitan tener algunas implementaciones comunes que quieres compartir con las clases derivadas.</p>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/#interfaz","title":"Interfaz","text":"<p>Una interfaz define un contrato que otras clases pueden implementar. En Kotlin, las interfaces son m\u00e1s flexibles y  potentes que en muchos otros lenguajes.</p> <p>Caracter\u00edsticas: - No puede contener un estado (no puede tener propiedades inicializadas). - Puede contener declaraciones de m\u00e9todos as\u00ed como implementaciones de m\u00e9todos (a partir de Java 8 y Kotlin).    Sin embargo, las implementaciones de m\u00e9todos en las interfaces no pueden tener un estado. - Una clase puede implementar m\u00faltiples interfaces.</p> <p>Uso t\u00edpico: - Cuando varias clases no relacionadas deben compartir m\u00e9todos comunes (pero la implementaci\u00f3n puede ser diferente para cada clase). - Cuando necesitas asegurarte de que una clase implemente ciertos m\u00e9todos.</p>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/#diferencias-principales","title":"Diferencias Principales","text":"<ul> <li>Instanciaci\u00f3n: No puedes instanciar clases abstractas ni interfaces. La diferencia es que una clase abstracta puede tener un constructor    y puede realizar inicializaci\u00f3n en \u00e9l. Las interfaces no pueden tener constructores.</li> <li>Estado: Las clases abstractas pueden mantener un estado (tener propiedades que almacenen valores), pero las interfaces no.</li> <li>Implementaci\u00f3n M\u00faltiple: Las clases en Kotlin no pueden heredar de m\u00e1s de una clase (abstracta o no), pero pueden implementar m\u00faltiples interfaces.</li> <li>Funciones con Implementaci\u00f3n: Ambas, clases abstractas e interfaces, pueden tener funciones con implementaci\u00f3n.    Sin embargo, solo las clases abstractas pueden tener un estado que esas funciones puedan modificar.</li> </ul>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/#cuando-usar-uno-u-otro","title":"Cu\u00e1ndo usar uno u otro","text":"<ul> <li>Usa una clase abstracta cuando tengas clases que compartan un c\u00f3digo com\u00fan muy estrechamente relacionado,   y cuando ese c\u00f3digo incluya alg\u00fan estado que deba ser mantenido.</li> <li>Usa una interfaz cuando tengas clases que necesiten compartir m\u00e9todos, pero no comportamientos (implementaciones de m\u00e9todos) o estados,   o cuando quieras aprovechar la implementaci\u00f3n m\u00faltiple para combinar varios comportamientos.</li> </ul> <p>En resumen, la elecci\u00f3n entre una clase abstracta y una interfaz puede depender de las necesidades espec\u00edficas de tu dise\u00f1o de software y  de las caracter\u00edsticas del lenguaje que est\u00e9s utilizando. Kotlin ofrece una gran flexibilidad y caracter\u00edsticas adicionales para interfaces  que otros lenguajes no tienen, por lo que vale la pena considerar estas caracter\u00edsticas al tomar tu decisi\u00f3n.</p>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/#ejemplo-de-clase-abstracta","title":"Ejemplo de Clase Abstracta","text":"<p>Escenario: Supongamos que est\u00e1s construyendo un sistema para un zool\u00f3gico que necesita manejar diferentes tipos de animales.  Todos los animales tienen ciertas caracter\u00edsticas en com\u00fan, como la necesidad de alimentarse, pero cada tipo de animal tiene su propia forma de alimentarse.</p> <pre><code>// Clase abstracta Animal\nabstract class Animal(val nombre: String) {\n    abstract fun alimentarse()\n\n    fun dormir() {\n        println(\"$nombre est\u00e1 durmiendo\")\n    }\n}\n\n// Clase concreta Le\u00f3n que hereda de Animal\nclass Leon(nombre: String) : Animal(nombre) {\n    override fun alimentarse() {\n        println(\"$nombre, el le\u00f3n, est\u00e1 comiendo carne\")\n    }\n}\n\n// Clase concreta Elefante que hereda de Animal\nclass Elefante(nombre: String) : Animal(nombre) {\n    override fun alimentarse() {\n        println(\"$nombre, el elefante, est\u00e1 comiendo vegetales\")\n    }\n}\n\nfun main() {\n    val leon = Leon(\"Leo\")\n    leon.alimentarse()  // Output: Leo, el le\u00f3n, est\u00e1 comiendo carne\n    leon.dormir()       // Output: Leo est\u00e1 durmiendo\n\n    val elefante = Elefante(\"Eli\")\n    elefante.alimentarse()  // Output: Eli, el elefante, est\u00e1 comiendo vegetales\n    elefante.dormir()       // Output: Eli est\u00e1 durmiendo\n}\n</code></pre> <p>En este ejemplo, <code>Animal</code> es una clase abstracta que define un m\u00e9todo abstracto <code>alimentarse</code> y un m\u00e9todo concreto <code>dormir</code>.  Las clases <code>Leon</code> y <code>Elefante</code> heredan de <code>Animal</code> y proporcionan su propia implementaci\u00f3n del m\u00e9todo <code>alimentarse</code>.</p>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/#ejemplo-de-interfaz","title":"Ejemplo de Interfaz","text":"<p>Escenario: Imagina que est\u00e1s desarrollando un software para gestionar dispositivos inteligentes en una casa. Cada dispositivo tiene diferentes capacidades,  pero todos deben poder ser encendidos o apagados.</p> <pre><code>// Interfaz DispositivoInteligente\ninterface DispositivoInteligente {\n    fun encender()\n    fun apagar()\n}\n\n// Clase Luz que implementa la interfaz DispositivoInteligente\nclass Luz : DispositivoInteligente {\n    override fun encender() {\n        println(\"La luz est\u00e1 encendida\")\n    }\n\n    override fun apagar() {\n        println(\"La luz est\u00e1 apagada\")\n    }\n}\n\n// Clase Termostato que implementa la interfaz DispositivoInteligente\nclass Termostato : DispositivoInteligente {\n    override fun encender() {\n        println(\"El termostato est\u00e1 ajustando la temperatura\")\n    }\n\n    override fun apagar() {\n        println(\"El termostato est\u00e1 apagado\")\n    }\n}\n\nfun main() {\n    val luz = Luz()\n    luz.encender()  // Output: La luz est\u00e1 encendida\n    luz.apagar()    // Output: La luz est\u00e1 apagada\n\n    val termostato = Termostato()\n    termostato.encender()  // Output: El termostato est\u00e1 ajustando la temperatura\n    termostato.apagar()    // Output: El termostato est\u00e1 apagado\n}\n</code></pre> <p>En este ejemplo, <code>DispositivoInteligente</code> es una interfaz que define dos m\u00e9todos: <code>encender</code> y <code>apagar</code>.  Las clases <code>Luz</code> y <code>Termostato</code> implementan esta interfaz y proporcionan sus propias implementaciones de estos m\u00e9todos.</p>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240204-claseAbstractaVsInterfaz/#resumen","title":"Resumen","text":"<ul> <li>Usa una clase abstracta cuando quieras que varias clases compartan un c\u00f3digo com\u00fan y tengan un estado com\u00fan, como en el ejemplo del zool\u00f3gico,   donde todos los animales se alimentan de formas diferentes, pero comparten ciertas caracter\u00edsticas y comportamientos.</li> <li>Usa una interfaz cuando quieras que diferentes clases sigan un contrato com\u00fan pero no necesariamente compartan un c\u00f3digo com\u00fan o estado,   como en el ejemplo de los dispositivos inteligentes, donde diferentes dispositivos pueden ser encendidos y apagados, pero la implementaci\u00f3n var\u00eda   significativamente entre dispositivos.</li> </ul>","tags":["clase abstracta","interfaz","kotlin"]},{"location":"blog/20240205-sealedClassEjemplos/","title":"Clases selladas en detalle con varios ejemplos.","text":"","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240205-sealedClassEjemplos/#sealed-class","title":"Sealed Class","text":"<p>Las clases selladas (<code>sealed class</code>) en Kotlin son una caracter\u00edstica especial que se utiliza para representar jerarqu\u00edas de  clases restringidas, en las cuales una clase tiene un n\u00famero limitado de subtipos.  Se utilizan principalmente cuando se desea que un valor pueda ser de uno entre varios tipos, pero no de cualquier otro tipo.  Son especialmente \u00fatiles en el manejo de estados o en la implementaci\u00f3n del patr\u00f3n de dise\u00f1o de Visitor.</p> <p>Algunas caracter\u00edsticas clave de las clases selladas:</p> <ol> <li>Extensibilidad limitada: Solo las clases que est\u00e1n en el mismo archivo que la clase sellada pueden extenderla.    Esto asegura que todos los subtipos sean conocidos en tiempo de compilaci\u00f3n y ayuda a evitar errores en tiempo de ejecuci\u00f3n.</li> <li>Uso con <code>when</code>: Las clases selladas son muy \u00fatiles con la expresi\u00f3n <code>when</code> en Kotlin, ya que puedes asegurarte de    que has manejado todos los casos posibles sin necesidad de un bloque <code>else</code>.</li> </ol>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240205-sealedClassEjemplos/#ejemplos-de-uso-de-clases-selladas","title":"Ejemplos de uso de clases selladas:","text":"","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240205-sealedClassEjemplos/#ejemplo-1","title":"Ejemplo 1:","text":"<p>Supongamos que est\u00e1s construyendo una aplicaci\u00f3n y necesitas representar diferentes tipos de operaciones en una calculadora.  Podr\u00edas tener operaciones como Suma, Resta, Multiplicaci\u00f3n y Divisi\u00f3n. Aqu\u00ed hay un ejemplo de c\u00f3mo podr\u00edas hacerlo usando clases selladas:</p> <pre><code>sealed class CalculadoraOperacion {\n    data class Suma(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n    data class Resta(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n    data class Multiplicacion(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n    data class Division(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n}\n\nfun ejecutarOperacion(operacion: CalculadoraOperacion): Double {\n    return when (operacion) {\n        is CalculadoraOperacion.Suma -&gt; operacion.valor1 + operacion.valor2\n        is CalculadoraOperacion.Resta -&gt; operacion.valor1 - operacion.valor2\n        is CalculadoraOperacion.Multiplicacion -&gt; operacion.valor1 * operacion.valor2\n        is CalculadoraOperacion.Division -&gt; operacion.valor1 / operacion.valor2\n    }\n}\n\nfun main() {\n    val suma = CalculadoraOperacion.Suma(10.0, 20.0)\n    println(\"El resultado de la suma es: ${ejecutarOperacion(suma)}\")\n}\n</code></pre> <ul> <li>En este ejemplo, <code>CalculadoraOperacion</code> es una clase sellada que tiene cuatro subtipos:  <code>Suma</code>, <code>Resta</code>, <code>Multiplicacion</code>, y <code>Division</code>. </li> <li>Cada uno de estos subtipos tiene su propia implementaci\u00f3n y datos asociados. </li> <li>La funci\u00f3n <code>ejecutarOperacion</code> acepta un <code>CalculadoraOperacion</code> y usa <code>when</code> para determinar qu\u00e9 operaci\u00f3n realizar. </li> <li>Una de las ventajas aqu\u00ed es que si a\u00f1ades un nuevo subtipo de <code>CalculadoraOperacion</code> y te olvidas de manejarlo en  <code>ejecutarOperacion</code>, el compilador te advertir\u00e1 que el <code>when</code> no est\u00e1 manejando todos los casos posibles, ayud\u00e1ndote  a evitar errores.</li> </ul>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240205-sealedClassEjemplos/#ejemplo-2","title":"Ejemplo 2:","text":"<p>Supongamos que est\u00e1s desarrollando un sistema de notificaciones para una aplicaci\u00f3n y tienes varios tipos de  notificaciones, como mensajes, alertas y advertencias. </p> <p>Puedes usar una clase sellada para modelar estos diferentes tipos de notificaciones.</p> <pre><code>// Definici\u00f3n de la clase sellada\nsealed class Notificacion {\n    class Mensaje(val contenido: String) : Notificacion()\n    class Alerta(val titulo: String, val descripcion: String) : Notificacion()\n    class Advertencia(val mensaje: String) : Notificacion()\n}\n\n// Funci\u00f3n que maneja las notificaciones\nfun manejarNotificacion(notificacion: Notificacion) {\n    when (notificacion) {\n        is Notificacion.Mensaje -&gt; println(\"Tienes un nuevo mensaje: ${notificacion.contenido}\")\n        is Notificacion.Alerta -&gt; println(\"Alerta: ${notificacion.titulo} - ${notificacion.descripcion}\")\n        is Notificacion.Advertencia -&gt; println(\"Advertencia: ${notificacion.mensaje}\")\n    }\n}\n\n// Funci\u00f3n principal para demostrar el uso de las clases selladas\nfun main() {\n    val mensaje = Notificacion.Mensaje(\"Bienvenido a Kotlin!\")\n    val alerta = Notificacion.Alerta(\"Error de Servidor\", \"El servidor no responde.\")\n    val advertencia = Notificacion.Advertencia(\"Bater\u00eda baja.\")\n\n    manejarNotificacion(mensaje)\n    manejarNotificacion(alerta)\n    manejarNotificacion(advertencia)\n}\n</code></pre> <p>En este ejemplo:</p> <ol> <li><code>Notificacion</code> es una clase sellada con tres subclases: <code>Mensaje</code>, <code>Alerta</code>, y <code>Advertencia</code>.</li> <li>Cada tipo de notificaci\u00f3n puede contener diferentes tipos de informaci\u00f3n. Por ejemplo, <code>Mensaje</code> solo tiene contenido,    <code>Alerta</code> tiene t\u00edtulo y descripci\u00f3n, y <code>Advertencia</code> solo tiene un mensaje.</li> <li>La funci\u00f3n <code>manejarNotificacion</code> usa un <code>when</code> para determinar el tipo de notificaci\u00f3n y actuar en consecuencia.</li> <li>En la funci\u00f3n <code>main</code>, se crean instancias de diferentes tipos de notificaciones y se pasan a la funci\u00f3n <code>manejarNotificacion</code>.</li> </ol> <p>La belleza de este enfoque es que si decides a\u00f1adir un nuevo tipo de notificaci\u00f3n en el futuro, el compilador te advertir\u00e1  en los lugares donde no est\u00e9s manejando este nuevo tipo, gracias a las garant\u00edas de exhaustividad proporcionadas por las  clases selladas en combinaci\u00f3n con <code>when</code>.</p>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240205-sealedClassEjemplos/#ejemplo-3","title":"Ejemplo 3:","text":"<p>Las clases que est\u00e1n dentro de una clase sellada pueden tener sus propios m\u00e9todos y propiedades adicionales,  no solo los que se definen en su constructor primario. </p> <p>Esto te permite tener una estructura de clases muy flexible y rica en comportamiento. Cada subclase puede  tener su propia implementaci\u00f3n de m\u00e9todos y sus propias propiedades.</p> <pre><code>sealed class Dispositivo {\n    abstract fun mostrarInfo(): String\n\n    class Smartphone(val marca: String, val modelo: String, val sistemaOperativo: String) : Dispositivo() {\n        private val appsInstaladas = mutableListOf&lt;String&gt;()\n\n        fun instalarApp(nombreApp: String) {\n            appsInstaladas.add(nombreApp)\n        }\n\n        override fun mostrarInfo(): String {\n            return \"Smartphone $marca $modelo con SO $sistemaOperativo. Apps instaladas: $appsInstaladas\"\n        }\n    }\n\n    class Tableta(val marca: String, val tama\u00f1oPantalla: Double) : Dispositivo() {\n        var nivelBateria = 100\n\n        fun usarBateria(porcentaje: Int) {\n            nivelBateria -= porcentaje\n        }\n\n        override fun mostrarInfo(): String {\n            return \"Tableta $marca con pantalla de $tama\u00f1oPantalla pulgadas. Bater\u00eda al $nivelBateria%\"\n        }\n    }\n}\n\nfun describirDispositivo(dispositivo: Dispositivo) {\n    println(dispositivo.mostrarInfo())\n}\n\nfun main() {\n    val miSmartphone = Dispositivo.Smartphone(\"Pixel\", \"5\", \"Android\")\n    miSmartphone.instalarApp(\"Twitter\")\n    miSmartphone.instalarApp(\"Spotify\")\n\n    val miTableta = Dispositivo.Tableta(\"iPad\", 10.2)\n    miTableta.usarBateria(10)\n\n    describirDispositivo(miSmartphone)\n    describirDispositivo(miTableta)\n}\n</code></pre> <p>En este ejemplo:</p> <ol> <li><code>Dispositivo</code> es una clase sellada con dos subclases: <code>Smartphone</code> y <code>Tableta</code>.</li> <li><code>Smartphone</code> tiene una propiedad <code>appsInstaladas</code> que no se define en el constructor, sino en el cuerpo de la clase.    Tambi\u00e9n tiene un m\u00e9todo <code>instalarApp</code> para agregar aplicaciones a la lista.</li> <li><code>Tableta</code> tiene una propiedad mutable <code>nivelBateria</code> y un m\u00e9todo <code>usarBateria</code> para simular el uso de la bater\u00eda.</li> <li>Ambas clases <code>Smartphone</code> y <code>Tableta</code> implementan el m\u00e9todo abstracto <code>mostrarInfo</code> de la clase sellada <code>Dispositivo</code>,    pero cada una con su propia l\u00f3gica.</li> </ol> <p>Este ejemplo muestra c\u00f3mo puedes tener estructuras de clases complejas y bien organizadas utilizando clases selladas,  aprovechando la posibilidad de a\u00f1adir propiedades y m\u00e9todos espec\u00edficos en cada subclase.</p>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240205-sealedClassEjemplos/#ejemplo-4","title":"Ejemplo 4:","text":"<p>Las clases que extienden una clase sellada en Kotlin no necesitan estar anidadas dentro de la clase sellada; sin embargo,  deben estar en el mismo archivo que la clase sellada. </p> <p>Esto se debe a que el objetivo de una clase sellada es restringir la jerarqu\u00eda de herencia a un conjunto conocido de subtipos,  lo que se facilita al requerir que todas las subclases est\u00e9n en el mismo archivo.</p> <p>Si las clases <code>Smartphone</code> y <code>Tableta</code> est\u00e1n fuera de la clase sellada <code>Dispositivo</code>, pero en el mismo archivo,  seguir\u00edan siendo subclases v\u00e1lidas de <code>Dispositivo</code>. Funcionalmente, ser\u00eda lo mismo en t\u00e9rminos de c\u00f3mo puedes usar estas clases  y c\u00f3mo funcionar\u00eda la comprobaci\u00f3n de tipos en tiempo de compilaci\u00f3n.</p> <pre><code>sealed class Dispositivo {\n    abstract fun mostrarInfo(): String\n}\n\nclass Smartphone(val marca: String, val modelo: String, val sistemaOperativo: String) : Dispositivo() {\n    private val appsInstaladas = mutableListOf&lt;String&gt;()\n\n    fun instalarApp(nombreApp: String) {\n        appsInstaladas.add(nombreApp)\n    }\n\n    override fun mostrarInfo(): String {\n        return \"Smartphone $marca $modelo con SO $sistemaOperativo. Apps instaladas: $appsInstaladas\"\n    }\n}\n\nclass Tableta(val marca: String, val tama\u00f1oPantalla: Double) : Dispositivo() {\n    var nivelBateria = 100\n\n    fun usarBateria(porcentaje: Int) {\n        nivelBateria -= porcentaje\n    }\n\n    override fun mostrarInfo(): String {\n        return \"Tableta $marca con pantalla de $tama\u00f1oPantalla pulgadas. Bater\u00eda al $nivelBateria%\"\n    }\n}\n\nfun describirDispositivo(dispositivo: Dispositivo) {\n    println(dispositivo.mostrarInfo())\n}\n\nfun main() {\n    val miSmartphone = Smartphone(\"Pixel\", \"5\", \"Android\")\n    miSmartphone.instalarApp(\"Twitter\")\n    miSmartphone.instalarApp(\"Spotify\")\n\n    val miTableta = Tableta(\"iPad\", 10.2)\n    miTableta.usarBateria(10)\n\n    describirDispositivo(miSmartphone)\n    describirDispositivo(miTableta)\n}\n</code></pre> <p>En este c\u00f3digo, <code>Smartphone</code> y <code>Tableta</code> son clases independientes que extienden la clase sellada <code>Dispositivo</code> y proporcionan  su propia implementaci\u00f3n de <code>mostrarInfo()</code>.</p> <p>Esto mantiene la capacidad de <code>Dispositivo</code> para limitar sus subtipos a un conjunto conocido y manejable, aprovechando las  ventajas de las clases selladas en Kotlin.</p>","tags":["atributo de clase","propiedad","kotlin"]},{"location":"blog/20240214-profundizandoObjects/","title":"OBJECTS Ejemplos y diferencias claves","text":"<p>En Kotlin, los objetos son una forma flexible y poderosa de definir estructuras \u00fanicas sin la necesidad de seguir el procedimiento tradicional de definici\u00f3n de clases.  Podemos pensar en ellos como una manera de crear una \"instancia \u00fanica\" de una clase con funcionalidades espec\u00edficas, sin necesidad de crear una clase de manera expl\u00edcita.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#1-object-expressions","title":"1. Object Expressions","text":"<p>Los \"object expressions\" crean una instancia de una clase an\u00f3nima al vuelo, lo que es \u00fatil cuando necesitas una ligera modificaci\u00f3n de una clase o interfaz existente sin declarar una nueva clase en tu c\u00f3digo.  Son similares a las clases an\u00f3nimas en Java.</p> <p>Por ejemplo, si tenemos una interfaz gr\u00e1fica con un componente que requiere un escuchador de eventos, podemos usar un \"object expression\" para manejar clics o movimientos del mouse directamente donde los necesitemos,  sin crear una clase <code>MouseAdapter</code> completa en otra parte:</p> <pre><code>fun countClicks(window: JComponent) {\n    var clickCount = 0\n    var enterCount = 0\n\n    window.addMouseListener(object : MouseAdapter() {\n        override fun mouseClicked(e: MouseEvent) {\n            clickCount++\n        }\n\n        override fun mouseEntered(e: MouseEvent) {\n            enterCount++\n        }\n    })\n    // Aqu\u00ed podemos usar clickCount y enterCount seg\u00fan lo necesites.\n}\n</code></pre> <p>En este ejemplo estamos creando una \u00fanica instancia de una clase que hereda de MouseAdapter. La clase MouseAdapter es una clase existente en el API de Swing de Java, que se usa para recibir eventos del rat\u00f3n (mouse).  Lo que hacemos con el \"object expression\" es crear un objeto an\u00f3nimo que extiende MouseAdapter y sobreescribimos los m\u00e9todos mouseClicked y mouseEntered para modificar su funcionalidad de acuerdo con nuestras necesidades espec\u00edficas.</p> <ul> <li>Al sobreescribir mouseClicked, definimos lo que sucede cada vez que se hace clic con el mouse sobre el componente JComponent (en este caso, incrementando el contador clickCount).</li> <li>Al sobreescribir mouseEntered, definimos lo que sucede cada vez que el cursor del mouse entra en el \u00e1rea del componente JComponent (incrementando el contador enterCount).</li> </ul> <p>Esto nos permite manejar eventos espec\u00edficos del mouse directamente, sin la necesidad de crear una subclase de MouseAdapter en otra parte de nuestro c\u00f3digo.  Es una forma muy directa y concisa de adjuntar comportamiento espec\u00edfico a eventos de componentes GUI en aplicaciones Java/Kotlin.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#otro-ejemplo-similar-modificando-una-clase-existente-al-vuelo-seria-el-siguiente","title":"Otro ejemplo similar modificando una clase existente al Vuelo ser\u00eda el siguiente:","text":"<p>Supongamos que estamos trabajando en una aplicaci\u00f3n que necesita realizar una operaci\u00f3n espec\u00edfica cuando se hace clic en un bot\u00f3n, pero no queremos o no necesitamos crear una clase completa solo para esto.  Podemos usar un object expression para manejar el evento del clic directamente:</p> <pre><code>button.setOnClickListener(object : View.OnClickListener {\n    override fun onClick(v: View?) {\n        // Aqu\u00ed manejamos el clic en el bot\u00f3n\n        println(\"El bot\u00f3n fue clickeado\")\n    }\n})\n</code></pre> <p>Este c\u00f3digo crea una instancia an\u00f3nima de una clase que implementa la interfaz View.OnClickListener. Esto significa que en ese bloque de c\u00f3digo, estamos definiendo una clase an\u00f3nima que no tiene nombre  pero que implementa los m\u00e9todos de la interfaz OnClickListener. Este objeto an\u00f3nimo sobrescribe el m\u00e9todo onClick para proporcionar una implementaci\u00f3n espec\u00edfica de lo que debe suceder cuando se haga clic  en la vista (en este caso, un bot\u00f3n).</p> <p>El contexto de uso aqu\u00ed es t\u00edpico del desarrollo de aplicaciones Android con Kotlin, donde se prefiere el uso de expresiones lambda y objetos an\u00f3nimos para implementaciones de interfaces con un solo m\u00e9todo,  como View.OnClickListener. Esto permite un c\u00f3digo m\u00e1s limpio y conciso, evitando la necesidad de definir una clase completa en otro lugar solo para implementar la interfaz de escucha de clics.</p> <p>Este patr\u00f3n de dise\u00f1o es muy com\u00fan en Android para manejar eventos de la interfaz de usuario debido a su simplicidad y eficiencia. Al hacerlo como se muestra en el ejemplo, estamo efectivamente diciendo:  \"Aqu\u00ed hay una clase que cumple con View.OnClickListener y su implementaci\u00f3n de onClick es la siguiente\". Esto encapsula la l\u00f3gica de manejo de clics justo en el lugar donde se configura el listener,  lo que puede hacer que el c\u00f3digo sea m\u00e1s f\u00e1cil de entender y mantener.</p> <p>En resumen, estamos creando un objeto de la clase View.OnClickListener de manera an\u00f3nima, y dentro de este objeto, estamos sobrescribiendo el m\u00e9todo onClick.  Esto significa que estamos proporcionando una implementaci\u00f3n espec\u00edfica para el m\u00e9todo onClick que ser\u00e1 llamado cuando ocurra el evento de clic en el bot\u00f3n. En Kotlin, este patr\u00f3n se utiliza com\u00fanmente para  manejar eventos de interfaz de usuario o para personalizar el comportamiento de ciertas callbacks sin necesidad de declarar una clase completa en otra parte del c\u00f3digo.</p> <p>Al usar un \"object expression\", Kotlin te permite:</p> <ul> <li>Implementar una o m\u00e1s interfaces de forma an\u00f3nima.</li> <li>Sobrescribir m\u00e9todos de estas interfaces directamente en el lugar donde se necesita la instancia.</li> <li>Esto es especialmente \u00fatil en el desarrollo de aplicaciones Android, donde a menudo necesitas reaccionar a eventos como clics en botones, cambios en textos, etc.,   sin crear clases completas para cada peque\u00f1a acci\u00f3n o variaci\u00f3n de comportamiento.</li> </ul> <p>Al hacer esto, el objeto que creamos con el object expression tiene una \u00fanica instancia en ese contexto espec\u00edfico y lleva consigo las personalizaciones que hemos definido,  como en este caso, la acci\u00f3n a realizar cuando el bot\u00f3n es clicado.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#11-donde-se-pueden-utilizar","title":"1.1. D\u00f3nde se pueden utilizar","text":"<p>Los \"object expressions\" no se limitan \u00fanicamente a ser utilizados como par\u00e1metros en llamadas a funciones. Se pueden usar en cualquier lugar donde se esperar\u00eda una expresi\u00f3n en Kotlin.  Por ejemplo, podr\u00edamos asignar un \"object expression\" a una variable, o usarlo en cualquier otro contexto que acepte una expresi\u00f3n.</p> <p>Sin embargo, es muy com\u00fan ver \"object expressions\" utilizados en contextos como par\u00e1metros de funciones cuando se necesita pasar una implementaci\u00f3n concreta de una interfaz sin crear una clase nombrada.  Esto es especialmente \u00fatil en situaciones donde la implementaci\u00f3n es breve o solo se necesita en un lugar espec\u00edfico, como en el manejo de eventos de interfaz de usuario o en callbacks.</p> <p>Los \"object expressions\" ofrecen una forma flexible de definir e instanciar clases an\u00f3nimas para usos espec\u00edficos, ya sea extendiendo una clase existente, implementando una interfaz,  o simplemente definiendo un objeto con su propio conjunto de propiedades y m\u00e9todos.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#12-object-expression-sin-herencia","title":"1.2. Object expression sin herencia","text":"<p>Es posible crear un \"object expression\" en Kotlin sin heredar de una clase o interfaz espec\u00edfica, aunque es menos com\u00fan.  Al hacerlo, b\u00e1sicamente estamos creando una instancia an\u00f3nima de una clase sin nombre con cualquier miembro que desees definir dentro de ella.  Esto puede incluir propiedades, m\u00e9todos, y bloques de inicializaci\u00f3n, pero no constructores.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#un-ejemplo-sencillo-de-un-object-expression-que-no-hereda-de-ninguna-clase-o-interfaz","title":"Un ejemplo sencillo de un \"object expression\" que no hereda de ninguna clase o interfaz:","text":"<pre><code>val saludo = object {\n    val mensaje = \"Hola\"\n    fun mostrarMensaje() {\n        println(mensaje)\n    }\n}\n\nsaludo.mostrarMensaje() // Imprime: Hola\n</code></pre> <p>En este caso, estamos creando un objeto an\u00f3nimo con una propiedad <code>mensaje</code> y un m\u00e9todo <code>mostrarMensaje()</code>. Este objeto es \u00fanico y solo existe una instancia de \u00e9l (la asignada a <code>saludo</code>).</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#13-inicializacion","title":"1.3. Inicializaci\u00f3n","text":"<p>Un \"object expression\" en Kotlin no puede tener constructores. Esto se debe a que los \"object expressions\" son instancias an\u00f3nimas de clases definidas al vuelo, y Kotlin no permite  definir constructores para estas instancias. La raz\u00f3n principal es que los constructores est\u00e1n destinados a inicializar nuevas instancias de clases cuando se crean, y los  \"object expressions\" se inicializan en el punto donde se definen, sin necesidad de un mecanismo adicional como un constructor.</p> <p>Sin embargo, podemos inicializar un \"object expression\" usando bloques de inicializaci\u00f3n (init blocks) y definir propiedades y m\u00e9todos dentro de ellos.  Los bloques de inicializaci\u00f3n se ejecutan en el momento en que se crea la instancia del objeto.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#un-ejemplo-de-como-podriamos-inicializar-un-object-expression-sin-un-constructor-pero-utilizando-un-bloque-init-para-inicializar-propiedades","title":"Un ejemplo de c\u00f3mo podr\u00edamos inicializar un \"object expression\" sin un constructor pero utilizando un bloque <code>init</code> para inicializar propiedades:","text":"<pre><code>val ejemplo = object {\n    val propiedad1: String\n    val propiedad2: Int\n\n    // Bloque de inicializaci\u00f3n\n    init {\n        propiedad1 = \"Hola\"\n        propiedad2 = 42\n    }\n\n    fun mostrarPropiedades() {\n        println(\"$propiedad1, $propiedad2\")\n    }\n}\n\nejemplo.mostrarPropiedades() // Imprime: Hola, 42\n</code></pre> <p>En este ejemplo, el \"object expression\" inicializa sus propiedades <code>propiedad1</code> y <code>propiedad2</code> dentro del bloque <code>init</code>. Aunque no es un constructor en el sentido tradicional  (como los que se utilizan en las clases), el bloque <code>init</code> sirve a un prop\u00f3sito similar en t\u00e9rminos de inicializaci\u00f3n de las instancias.</p> <p>Por lo tanto, aunque no podemos usar constructores en \"object expressions\", Kotlin ofrece mecanismos flexibles como los bloques de inicializaci\u00f3n para configurar nuestros objetos  an\u00f3nimos en el momento de su creaci\u00f3n.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#14-conclusion","title":"1.4. Conclusi\u00f3n","text":"<p>Cuando usamos un \"object expression\" en Kotlin, estamos creando una \u00fanica instancia de una clase an\u00f3nima. Esta clase no tiene un nombre que puedas utilizar para crear otras instancias;  la instancia se crea en el lugar donde se define el \"object expression\" y es \u00fanica en ese contexto.</p> <p>Esta singularidad de la instancia es especialmente \u00fatil en casos donde solo necesitas una implementaci\u00f3n espec\u00edfica de una interfaz o una extensi\u00f3n de una clase para un uso particular,  sin la necesidad de definir una clase completa en otra parte de tu c\u00f3digo.</p> <p>Los \"object expressions\" proporcionan una forma conveniente y concisa de manejar tales situaciones, permiti\u00e9ndote definir y crear una instancia de una clase an\u00f3nima al vuelo,  completa con propiedades, m\u00e9todos, y bloques de inicializaci\u00f3n seg\u00fan sea necesario, sin la complejidad de definir una nueva clase nombrada.</p> <p>Este enfoque es com\u00fanmente utilizado para escenarios de uso \u00fanico, como escuchas de eventos o adaptadores en programaci\u00f3n de interfaces de usuario, donde la implementaci\u00f3n espec\u00edfica  no se reutiliza en otra parte del c\u00f3digo. La clase an\u00f3nima creada por un \"object expression\" vive en el alcance en el que se define y se destruye cuando sale de ese alcance, lo que  proporciona no solo una soluci\u00f3n elegante para necesidades espec\u00edficas sino tambi\u00e9n una gesti\u00f3n de memoria eficiente.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#2-object-declarations","title":"2. Object Declarations","text":"<p>Los \"object declarations\" se usan para crear un \u00fanico objeto de una clase. Kotlin gestiona la creaci\u00f3n de este objeto de manera que solo se crea una instancia (Singleton).  Esto es \u00fatil para cosas como mantener un conjunto de constantes relacionadas o una instancia de un servicio que se va a usar a lo largo de toda tu aplicaci\u00f3n.</p> <p>Supongamos que necesitamos una configuraci\u00f3n global en nuestra aplicaci\u00f3n para mantener URLs o configuraciones de API. En lugar de pasar esta configuraci\u00f3n alrededor,  podemos usar un object declaration para tenerla accesible globalmente:</p> <pre><code>object ConfiguracionGlobal {\n    val urlAPI: String = \"https://api.misitio.com\"\n    fun obtenerInfo() {\n        println(\"Accediendo a la API en $urlAPI\")\n    }\n}\n\n// Acceso a la configuraci\u00f3n global desde cualquier parte del c\u00f3digo\nConfiguracionGlobal.obtenerInfo()\n</code></pre> <p>Este c\u00f3digo define <code>ConfiguracionGlobal</code> como un singleton, asegur\u00e1ndose de que la URL de la API y el m\u00e9todo <code>obtenerInfo</code> est\u00e9n disponibles globalmente sin necesidad de crear  m\u00faltiples instancias de la configuraci\u00f3n.</p> <p>En Kotlin, un \"object declaration\" se utiliza para declarar un tipo de objeto con una \u00fanica instancia en toda la aplicaci\u00f3n.  A diferencia de las clases, donde puedes crear m\u00faltiples instancias, un \"object declaration\" nos permite tener una sola instancia de ese objeto, accesible globalmente.  Esta \u00fanica instancia se crea de manera perezosa, es decir, la primera vez que se accede al objeto.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#la-sintaxis-para-declarar-un-objeto-es-simple-usas-la-palabra-clave-object-seguida-del-nombre-del-objeto","title":"La sintaxis para declarar un objeto es simple: usas la palabra clave <code>object</code> seguida del nombre del objeto:","text":"<pre><code>object MiSingleton {\n    val propiedad = \"Esta es una propiedad de MiSingleton\"\n    fun miFuncion() {\n        println(\"Esta es una funci\u00f3n de MiSingleton\")\n    }\n}\n</code></pre> <p>Podemos acceder a la propiedad y llamar a la funci\u00f3n de <code>MiSingleton</code> directamente a trav\u00e9s del nombre del objeto:</p> <pre><code>println(MiSingleton.propiedad)  // Accede a la propiedad\nMiSingleton.miFuncion()         // Llama a la funci\u00f3n\n</code></pre>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#21-que-es-un-singleton","title":"2.1. \u00bfQu\u00e9 es un Singleton?","text":"<p>Un Singleton es un patr\u00f3n de dise\u00f1o que restringe la instanciaci\u00f3n de una clase a un solo objeto. Es \u00fatil cuando necesitas exactamente una instancia de una clase para coordinar acciones  a trav\u00e9s de tu aplicaci\u00f3n. El patr\u00f3n Singleton asegura que una clase tenga solo una instancia y proporciona un punto de acceso global a esa instancia.</p> <p>En muchos lenguajes de programaci\u00f3n, implementar un Singleton requiere varios pasos, incluyendo:</p> <ol> <li>Hacer el constructor de la clase privado para prevenir la instanciaci\u00f3n directa.</li> <li>Crear una propiedad est\u00e1tica en la clase que almacene la \u00fanica instancia.</li> <li>Proporcionar un m\u00e9todo est\u00e1tico que permita a los clientes acceder a la instancia \u00fanica.</li> </ol> <p>En Kotlin, las \"object declarations\" simplifican este proceso. Al declarar un objeto con <code>object</code>, Kotlin autom\u00e1ticamente maneja la creaci\u00f3n de la \u00fanica instancia y asegura que no puedas  crear instancias adicionales por tu cuenta.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#22-ejemplo-practico-de-singleton","title":"2.2. Ejemplo Pr\u00e1ctico de Singleton","text":"<p>Un uso com\u00fan de los Singletons es para la configuraci\u00f3n de una aplicaci\u00f3n o para gestionar recursos compartidos, como conexiones a bases de datos o preferencias de usuario.</p> <pre><code>object ConfiguracionApp {\n    var urlServidor: String = \"https://api.miapp.com\"\n    var puerto: Int = 8080\n    // M\u00e1s configuraci\u00f3n aqu\u00ed\n}\n\n// Acceso a la configuraci\u00f3n en otra parte del c\u00f3digo\nfun establecerConfiguracion() {\n    ConfiguracionApp.urlServidor = \"https://api.otrodominio.com\"\n}\n</code></pre> <p>Este enfoque garantiza que la configuraci\u00f3n sea accesible de manera uniforme en toda la aplicaci\u00f3n, y cambios hechos en una parte del c\u00f3digo ser\u00e1n reflejados en todo lugar donde se acceda a esta configuraci\u00f3n.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#23-conclusion","title":"2.3. Conclusi\u00f3n","text":"<p>Las \"object declarations\" en Kotlin brindan una forma muy clara y concisa de implementar el patr\u00f3n Singleton, garantizando que solo exista una instancia de un objeto y que esta sea accesible globalmente.  Esto simplifica la gesti\u00f3n de recursos compartidos y la configuraci\u00f3n de aplicaciones, entre otros usos.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#3-companion-objects","title":"3. Companion Objects","text":"<p>Los \"companion objects\" se usan dentro de una clase para proporcionar miembros est\u00e1ticos (que en Kotlin no se llaman est\u00e1ticos como en Java) accesibles sin una instancia de la clase.  Son \u00fatiles para cuando necesitas funciones o propiedades que est\u00e1n relacionadas con la clase pero que pueden ser accedidas sin tener una instancia de la clase.</p> <p>Por ejemplo, si quieres tener un m\u00e9todo <code>create()</code> para tu clase <code>MyClass</code> que act\u00fae como un constructor alternativo, puedes hacerlo en un companion object:</p> <pre><code>class MyClass {\n    companion object {\n        fun create(): MyClass = MyClass()\n    }\n}\n// Accedes as\u00ed\nval myClassInstance = MyClass.create()\n</code></pre>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#31-metodos-y-propiedades-relacionados-con-la-clase","title":"3.1. M\u00e9todos y Propiedades Relacionados con la Clase","text":"<p>Supongamos que tenemos una clase <code>Usuario</code> y queremos tener un m\u00e9todo para crear un usuario predeterminado. En lugar de tener este m\u00e9todo como est\u00e1tico (como lo har\u00edas en Java),  Kotlin utiliza el \"companion object\":</p> <pre><code>class Usuario(val nombre: String, val edad: Int) {\n    companion object {\n        fun usuarioPredeterminado() = Usuario(\"NombrePredeterminado\", 30)\n    }\n}\n\n// Crear un usuario predeterminado\nval usuario = Usuario.usuarioPredeterminado()\n</code></pre> <p>Este c\u00f3digo permite acceder al m\u00e9todo <code>usuarioPredeterminado</code> sin necesidad de instanciar primero la clase <code>Usuario</code>.  Es \u00fatil para m\u00e9todos que est\u00e1n relacionados con la clase pero no requieren una instancia de la misma para funcionar.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#32-herencia-e-implementacion-de-interfaces","title":"3.2. Herencia e implementaci\u00f3n de interfaces","text":"<p>Un <code>companion object</code> en Kotlin puede implementar interfaces y extender otras clases ya que son objetos reales.</p> <p>Esto proporciona una flexibilidad adicional en Kotlin, permitiendo que el <code>companion object</code> no solo contenga propiedades y m\u00e9todos est\u00e1ticos, sino tambi\u00e9n que tenga comportamientos  definidos por interfaces o clases base. Esto puede ser \u00fatil en varios casos de uso, como cuando se quiere que un objeto compa\u00f1ero act\u00fae como un factory con una interfaz com\u00fan,  o cuando se quiere agrupar m\u00e9todos est\u00e1ticos que deben cumplir con un contrato de interfaz.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#un-ejemplo-de-como-un-companion-object-puede-implementar-una-interfaz","title":"Un ejemplo de c\u00f3mo un <code>companion object</code> puede implementar una interfaz:","text":"<pre><code>interface MyInterface {\n    fun doSomething()\n}\n\nclass MyClass {\n    companion object : MyInterface {\n        override fun doSomething() {\n            println(\"Haciendo algo\")\n        }\n    }\n}\n\nfun main() {\n    MyClass.doSomething() // Accede directamente mediante la clase\n}\n</code></pre>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#un-ejemplo-de-como-un-companion-object-puede-extender-una-clase","title":"Un ejemplo de c\u00f3mo un <code>companion object</code> puede extender una clase:","text":"<pre><code>open class MyBaseClass {\n    open fun printMessage() {\n        println(\"Mensaje desde MyBaseClass\")\n    }\n}\n\nclass MyClass {\n    companion object : MyBaseClass() {\n        override fun printMessage() {\n            println(\"Mensaje sobrescrito desde el companion object\")\n        }\n    }\n}\n\nfun main() {\n    MyClass.printMessage() // Accede directamente mediante la clase\n}\n</code></pre> <p>Estos ejemplos muestran c\u00f3mo los <code>companion objects</code> ofrecen una rica funcionalidad que va m\u00e1s all\u00e1 de simplemente contener miembros est\u00e1ticos,  permiti\u00e9ndoles participar en la jerarqu\u00eda de clases e interfaces de Kotlin.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#33-conclusion","title":"3.3. Conclusi\u00f3n","text":"<p>Un \"companion object\" en Kotlin es un objeto especial que se define dentro de una clase. Cada clase puede tener un solo companion object, el cual puede contener propiedades y  funciones que son accesibles sin tener una instancia de la clase, pero a\u00fan as\u00ed, est\u00e1n relacionadas con la clase. Esto es similar a los miembros est\u00e1ticos en lenguajes como Java,  con la diferencia de que en Kotlin, se agrupan dentro de un \"objeto compa\u00f1ero\".</p> <p>Los \"companion objects\" son \u00fatiles cuando necesitamos funciones o propiedades que se relacionan con una clase, pero que no requieren una instancia de esa clase para ser usadas.  Por ejemplo, podr\u00edamos querer tener un m\u00e9todo de f\u00e1brica para crear instancias de una clase o variables est\u00e1ticas que sean compartidas por todas las instancias.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#ejemplo-de-companion-object","title":"Ejemplo de Companion Object:","text":"<pre><code>Copy code\nclass MiClase {\n    companion object {\n        val CONSTANTE = \"Una constante\"\n        fun crearInstancia(): MiClase = MiClase()\n    }\n}\n\n// Acceso a la constante y funci\u00f3n sin una instancia de MiClase\nval miInstancia = MiClase.crearInstancia()\nprintln(MiClase.CONSTANTE)\n</code></pre> <p>En este ejemplo, MiClase tiene un \"companion object\" que contiene una constante y un m\u00e9todo para crear instancias. Estos miembros son accesibles a trav\u00e9s de la clase en s\u00ed, no de una instancia de la clase.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240214-profundizandoObjects/#4-diferencias-clave-entre-object-declarations-y-companion-objects","title":"4. Diferencias Clave entre \"object declarations\" y \"Companion objects\"","text":"<ul> <li> <p>Ubicaci\u00f3n: Los \"companion objects\" se definen dentro de una clase y est\u00e1n relacionados con esa clase. Las \"object declarations\" se definen por su cuenta y representan un \u00fanico objeto global.</p> </li> <li> <p>Acceso: Los miembros de un \"companion object\" son accesibles a trav\u00e9s de la clase contenedora, imitando el acceso est\u00e1tico. Los miembros de una \"object declaration\" son accesibles directamente a trav\u00e9s del nombre del objeto.</p> </li> <li> <p>Uso: Los \"companion objects\" se utilizan para miembros relacionados con la clase que no requieren una instancia de la clase, como m\u00e9todos de f\u00e1brica o constantes.   Las \"object declarations\" se utilizan para crear singletons, \u00fatiles para gestionar estados o configuraciones globales.</p> </li> <li> <p>Herencia: Un \"companion object\" puede implementar interfaces o extender otras clases. Una \"object declaration\" tambi\u00e9n puede hacerlo, pero su prop\u00f3sito principal es ser una instancia \u00fanica m\u00e1s que relacionarse con otra clase.</p> </li> </ul> <p>Los \"companion objects\" y las \"object declarations\", son herramientas poderosas en Kotlin que sirven a diferentes prop\u00f3sitos. Mientras que las \"object declarations\" son ideales para crear singletons y  manejar configuraciones o estados globales, los \"companion objects\" ofrecen una forma de tener acceso a propiedades y m\u00e9todos relacionados con una clase sin necesidad de crear una instancia de ella.</p>","tags":["object","singleton","kotlin"]},{"location":"blog/20240301-modelos-MVC-MVVM/","title":"Modelos MVVM y MVC","text":"<p>El modelo MVVM (Modelo-Vista-VistaModelo) y MVC (Modelo-Vista-Controlador) son patrones de dise\u00f1o de software utilizados en el desarrollo de aplicaciones para separar  la l\u00f3gica de negocio de la interfaz de usuario, facilitando as\u00ed el mantenimiento y la escalabilidad del software. Aunque ambos patrones comparten algunas similitudes,  tambi\u00e9n poseen diferencias clave que influyen en su aplicaci\u00f3n en diferentes tipos de proyectos.</p>","tags":["patrones","dise\u00f1o","MVC","MVVM","kotlin"]},{"location":"blog/20240301-modelos-MVC-MVVM/#modelo-vista-controlador-mvc","title":"Modelo-Vista-Controlador (MVC)","text":"<ul> <li>Modelo: Representa la l\u00f3gica de negocio y los datos. Es responsable de acceder a la capa de almacenamiento de datos, definir reglas de negocio, almacenar y recuperar datos.</li> <li>Vista: Es la representaci\u00f3n visual de los datos, es decir, todo lo que el usuario puede ver en pantalla.</li> <li>Controlador: Act\u00faa como un intermediario entre el Modelo y la Vista. Controla las interacciones del usuario con la Vista, solicita datos al Modelo y actualiza</li> <li>la Vista con los datos.</li> </ul> <p>Uso de MVC: Este patr\u00f3n es ampliamente utilizado en aplicaciones web, donde las interacciones del usuario son frecuentes y directas, y se necesita una clara separaci\u00f3n  entre la l\u00f3gica de negocio (Modelo), la presentaci\u00f3n de datos (Vista) y la intermediaci\u00f3n de las acciones del usuario (Controlador).</p>","tags":["patrones","dise\u00f1o","MVC","MVVM","kotlin"]},{"location":"blog/20240301-modelos-MVC-MVVM/#modelo-vista-vistamodelo-mvvm","title":"Modelo-Vista-VistaModelo (MVVM)","text":"<ul> <li>Modelo: Al igual que en MVC, representa la l\u00f3gica de negocio y los datos.</li> <li>Vista: Tambi\u00e9n representa la interfaz de usuario, como en MVC.</li> <li>VistaModelo (ViewModel): Es una capa de abstracci\u00f3n entre la Vista y el Modelo. El ViewModel transforma los datos del Modelo en valores que pueden ser mostrados   f\u00e1cilmente en la Vista. Adem\u00e1s, implementa propiedades y comandos para que la Vista pueda bindear (enlazar) datos, lo cual permite una sincronizaci\u00f3n autom\u00e1tica entre   la Vista y el ViewModel.</li> </ul> <p>Uso de MVVM: Este patr\u00f3n es preferido en aplicaciones que utilizan tecnolog\u00edas de enlace de datos (data binding), especialmente en aplicaciones de escritorio y m\u00f3viles,  como las que se desarrollan con WPF (Windows Presentation Foundation), Xamarin, y Angular. Facilita el desarrollo de interfaces de usuario complejas, donde la sincronizaci\u00f3n  autom\u00e1tica entre la Vista y el Modelo es crucial.</p>","tags":["patrones","dise\u00f1o","MVC","MVVM","kotlin"]},{"location":"blog/20240301-modelos-MVC-MVVM/#similitudes","title":"Similitudes","text":"<ol> <li>Separaci\u00f3n de preocupaciones: Ambos patrones promueven la separaci\u00f3n de la l\u00f3gica de negocio de la interfaz de usuario, lo que facilita el mantenimiento y la    prueba del software.</li> <li>Facilitan el desarrollo en equipo: Al tener una estructura definida, diferentes miembros del equipo pueden trabajar en la Vista, el Modelo y el Controlador/ViewModel    de manera simult\u00e1nea.</li> </ol>","tags":["patrones","dise\u00f1o","MVC","MVVM","kotlin"]},{"location":"blog/20240301-modelos-MVC-MVVM/#diferencias","title":"Diferencias","text":"<ol> <li>Interacci\u00f3n entre componentes: En MVC, el Controlador maneja la l\u00f3gica de c\u00f3mo los datos del Modelo se presentan en la Vista. En MVVM, el ViewModel realiza esta tarea,    pero a trav\u00e9s del enlace de datos, lo que reduce la necesidad de c\u00f3digo para actualizar la interfaz de usuario.</li> <li>Complejidad y prop\u00f3sito: MVVM es ideal para aplicaciones con interfaces de usuario complejas que requieren una actualizaci\u00f3n din\u00e1mica de la Vista. MVC es m\u00e1s simple y    se utiliza ampliamente en aplicaciones web donde este tipo de enlace de datos no es tan cr\u00edtico.</li> </ol>","tags":["patrones","dise\u00f1o","MVC","MVVM","kotlin"]},{"location":"blog/20240301-modelos-MVC-MVVM/#eleccion-del-patron","title":"Elecci\u00f3n del Patr\u00f3n","text":"<p>La elecci\u00f3n entre MVC y MVVM depende del tipo de proyecto, el lenguaje de programaci\u00f3n y el framework que se est\u00e9 utilizando. MVVM es preferible en aplicaciones donde el enlace  de datos y la actualizaci\u00f3n din\u00e1mica de la interfaz son prioritarios, mientras que MVC es adecuado para aplicaciones web que requieren una estructura clara y una separaci\u00f3n  entre la l\u00f3gica de negocio y la presentaci\u00f3n.</p>","tags":["patrones","dise\u00f1o","MVC","MVVM","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/","title":"Tratamiento de ficheros JSON","text":"","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#introduccion","title":"Introducci\u00f3n","text":"<p>Para leer un archivo JSON en Kotlin, primero necesitamos agregar una dependencia para manejar JSON, como <code>Gson</code> o <code>kotlinx.serialization</code>.</p> <p>Aqu\u00ed ten\u00e9is un ejemplo usando <code>Gson</code>, que es una biblioteca popular para la conversi\u00f3n entre objetos Java y su representaci\u00f3n JSON.</p> <p>Primero, debemos asegurarnos de incluir Gson en nuestro proyecto. Si estamos usando Gradle, podemos a\u00f1adir la siguiente l\u00ednea al archivo <code>build.gradle</code> en la secci\u00f3n de dependencias:</p> <pre><code>implementation 'com.google.code.gson:gson:2.8.8'\n</code></pre> <p>Ahora, supongamos que tenemos un archivo JSON llamado <code>data.json</code> con el siguiente contenido:</p> <pre><code>{\n  \"nombre\": \"Juan\",\n  \"edad\": 30\n}\n</code></pre> <p>Aqu\u00ed tenemos un ejemplo de c\u00f3digo en Kotlin para leer este archivo y convertirlo en un objeto de Kotlin:</p> <pre><code>import com.google.gson.Gson\nimport java.io.FileReader\n\n// Definimos una clase que represente la estructura del JSON\ndata class Usuario(val nombre: String, val edad: Int)\n\nfun main() {\n    // Creamos una instancia de Gson\n    val gson = Gson()\n\n    // Abrimos el archivo JSON\n    FileReader(\"data.json\").use { reader -&gt;\n        // Convertimos el JSON en un objeto de la clase Usuario\n        val usuario = gson.fromJson(reader, Usuario::class.java)\n\n        // Imprimimos los datos del usuario\n        println(\"Nombre: ${usuario.nombre}, Edad: ${usuario.edad}\")\n    }\n}\n</code></pre> <p>Este c\u00f3digo define una clase <code>Usuario</code> que representa la estructura del archivo JSON. Luego, utiliza <code>FileReader</code> para leer el archivo <code>data.json</code>, y Gson para convertir el contenido JSON en una instancia de <code>Usuario</code>. Finalmente, imprime los datos del usuario.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#ejemplo-simple-con-una-lista","title":"Ejemplo simple con una lista","text":"","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#1-supongamos-que-tenemos-un-archivo-json-llamado-usuariosjson-que-contiene-una-lista-de-usuarios-cada-uno-con-su-nombre-y-edad-como-en-el-siguiente-ejemplo","title":"1. Supongamos que tenemos un archivo JSON llamado <code>usuarios.json</code> que contiene una lista de usuarios, cada uno con su nombre y edad, como en el siguiente ejemplo:","text":"<pre><code>[\n  {\n    \"nombre\": \"Juan\",\n    \"edad\": 30\n  },\n  {\n    \"nombre\": \"Ana\",\n    \"edad\": 25\n  }\n]\n</code></pre>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#2-para-leer-este-archivo-y-convertirlo-en-una-lista-de-objetos-en-kotlin-primero-necesitamos-definir-la-clase-que-representa-la-estructura-de-un-usuario-igual-que-antes-luego-podemos-usar-gson-para-convertir-la-lista-json-en-una-lista-de-objetos-usuario","title":"2. Para leer este archivo y convertirlo en una lista de objetos en Kotlin, primero necesitamos definir la clase que representa la estructura de un usuario, igual que antes. Luego, podemos usar <code>Gson</code> para convertir la lista JSON en una lista de objetos <code>Usuario</code>:","text":"<pre><code>import com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.io.FileReader\n\n// La clase Usuario permanece igual\ndata class Usuario(val nombre: String, val edad: Int)\n\nfun main() {\n    // Creamos una instancia de Gson\n    val gson = Gson()\n\n    // Abrimos el archivo JSON\n    FileReader(\"usuarios.json\").use { reader -&gt;\n        // Creamos un tipo para la lista de usuarios\n        val usuarioListType = object : TypeToken&lt;List&lt;Usuario&gt;&gt;() {}.type\n\n        // Convertimos el JSON en una lista de objetos Usuario\n        val usuarios: List&lt;Usuario&gt; = gson.fromJson(reader, usuarioListType)\n\n        // Imprimimos los datos de los usuarios\n        usuarios.forEach { usuario -&gt;\n            println(\"Nombre: ${usuario.nombre}, Edad: ${usuario.edad}\")\n        }\n    }\n}\n</code></pre> <p>En este c\u00f3digo, la clave est\u00e1 en <code>TypeToken&lt;List&lt;Usuario&gt;&gt;().type</code>. Esto es necesario porque en tiempo de ejecuci\u00f3n, la informaci\u00f3n gen\u00e9rica de Java se borra debido a la implementaci\u00f3n de generics mediante type erasure. <code>TypeToken</code> permite a <code>Gson</code> entender que queremos deserializar el JSON en una <code>List&lt;Usuario&gt;</code>.</p> <p>Este enfoque nos permite manejar archivos JSON m\u00e1s complejos que contengan colecciones de objetos. Podemos seguir expandiendo este concepto para trabajar con estructuras a\u00fan m\u00e1s complejas, como listas anidadas o mapas.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#ejemplo-con-listas-que-pueden-contener-valores-nulos","title":"Ejemplo con listas que pueden contener valores nulos","text":"<p>Imaginad que queremos manejar un archivo JSON con recetas, donde cada receta tiene una lista de ingredientes, pero algunos pueden ser <code>null</code>... podemos definir una clase <code>Receta</code> que contenga una lista de ingredientes. Luego, al deserializar el JSON, podemos filtrar y almacenar solo aquellos ingredientes que no sean <code>null</code>.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#1-supongamos-que-el-archivo-json-tiene-este-formato","title":"1. Supongamos que el archivo JSON tiene este formato:","text":"<pre><code>[\n  {\n    \"nombre\": \"Receta 1\",\n    \"ingredientes\": [\"Harina\", null, \"Az\u00facar\", \"Levadura\", null]\n  },\n  {\n    \"nombre\": \"Receta 2\",\n    \"ingredientes\": [null, \"Tomate\", \"Queso\", null, \"Or\u00e9gano\"]\n  }\n]\n</code></pre>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#2-a-continuacion-pasamos-a-definir-las-clases-en-kotlin-y-leer-el-archivo-json-filtrando-los-valores-null","title":"2. A continuaci\u00f3n, pasamos a definir las clases en Kotlin y leer el archivo JSON filtrando los valores <code>null</code>:","text":"<pre><code>import com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.io.FileReader\n\n// Define la clase Receta\ndata class Receta(val nombre: String, val ingredientes: List&lt;String?&gt;)\n\nfun main() {\n    val gson = Gson()\n\n    // Define el tipo para la lista de recetas\n    val recetaListType = object : TypeToken&lt;List&lt;Receta&gt;&gt;() {}.type\n\n    FileReader(\"recetas.json\").use { reader -&gt;\n        // Deserializa el JSON a una lista de Recetas\n        val recetas: List&lt;Receta&gt; = gson.fromJson(reader, recetaListType)\n\n        // Filtra los ingredientes nulos y almacena las recetas con ingredientes no nulos\n        val recetasFiltradas = recetas.map { receta -&gt;\n            receta.copy(ingredientes = receta.ingredientes.filterNotNull())\n        }\n\n        // Imprime las recetas con ingredientes no nulos\n        recetasFiltradas.forEach { receta -&gt;\n            println(\"Receta: ${receta.nombre}\")\n            receta.ingredientes.forEach { ingrediente -&gt;\n                println(\" - $ingrediente\")\n            }\n        }\n    }\n}\n</code></pre>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#3-este-codigo-realiza-lo-siguiente","title":"3. Este c\u00f3digo realiza lo siguiente:","text":"<ol> <li>Define una clase <code>Receta</code> que representa la estructura de cada receta en el JSON, incluyendo una lista de ingredientes que puede contener valores <code>null</code>.</li> <li>Lee el archivo JSON y lo deserializa en una lista de objetos <code>Receta</code>.</li> <li>Utiliza <code>map</code> para crear una nueva lista de recetas donde cada receta ha sido copiada con una nueva lista de ingredientes que solo incluye aquellos que no son <code>null</code> (usando <code>filterNotNull</code>).</li> </ol> <p>De esta manera, cada receta en <code>recetasFiltradas</code> tendr\u00e1 solo los ingredientes no nulos, y podremos trabajar con estos datos de manera m\u00e1s limpia en nuestra aplicaci\u00f3n.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#ejemplo-con-una-lista-de-elementos-siempre-fijos-pero-con-posibilidad-de-valores-nulos","title":"Ejemplo con una lista de elementos, siempre fijos, pero con posibilidad de valores nulos","text":"<p>En este ejemplo abordamos un fichero JSON con la siguiente estructura:</p> <pre><code>[\n  {\n    \"nombre\": \"Receta 1\",\n    \"ingrediente1\": \"Harina\", \n    \"ingrediente2\": \"Az\u00facar\",\n    \"ingrediente3\": \"Levadura\",\n    \"ingrediente4\": null,\n    \"ingrediente5\": null,\n    \"ingrediente6\": null, \n    \"ingrediente7\": null,\n    \"ingrediente8\": null,\n    \"ingrediente9\": null,\n    \"ingrediente10\": null\n  },\n  {\n    \"nombre\": \"Receta 2\",\n    \"ingrediente1\": \"Tomate\", \n    \"ingrediente2\": \"Queso\",\n    \"ingrediente3\": \"Jam\u00f3n\",\n    \"ingrediente4\": \"Or\u00e9gano\",\n    \"ingrediente5\": null,\n    \"ingrediente6\": null, \n    \"ingrediente7\": null,\n    \"ingrediente8\": null,\n    \"ingrediente9\": null,\n    \"ingrediente10\": null\n  }\n]\n</code></pre> <p>Para manejar un archivo JSON como el anterior, donde cada receta tiene hasta 10 ingredientes espec\u00edficamente nombrados, y algunos pueden ser <code>null</code>, necesitaremos un enfoque un poco diferente. La idea es deserializar cada receta a un objeto que contenga estos ingredientes como campos, y luego transformar esos campos en una lista, excluyendo los valores <code>null</code>.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#1-vamos-a-modificar-la-clase-receta-para-que-refleje-esta-estructura-y-luego-procesaremos-los-ingredientes-para-obtener-solo-los-no-nulos","title":"1. Vamos a modificar la clase <code>Receta</code> para que refleje esta estructura y luego procesaremos los ingredientes para obtener solo los no nulos:","text":"<pre><code>import com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.io.FileReader\n\ndata class RecetaRaw(\n    val nombre: String,\n    val ingrediente1: String?,\n    val ingrediente2: String?,\n    val ingrediente3: String?,\n    val ingrediente4: String?,\n    val ingrediente5: String?,\n    val ingrediente6: String?,\n    val ingrediente7: String?,\n    val ingrediente8: String?,\n    val ingrediente9: String?,\n    val ingrediente10: String?\n    // A\u00f1ade m\u00e1s campos si tienes hasta 15 ingredientes.\n)\n\ndata class Receta(\n    val nombre: String,\n    val ingredientes: List&lt;String&gt;\n)\n\nfun main() {\n    val gson = Gson()\n\n    val recetaListType = object : TypeToken&lt;List&lt;RecetaRaw&gt;&gt;() {}.type\n\n    FileReader(\"recetas.json\").use { reader -&gt;\n        // Deserializa el JSON a una lista de RecetaRaw\n        val recetasRaw: List&lt;RecetaRaw&gt; = gson.fromJson(reader, recetaListType)\n\n        // Transforma RecetaRaw en Receta, filtrando los ingredientes nulos\n        val recetas = recetasRaw.map { raw -&gt;\n            Receta(\n                nombre = raw.nombre,\n                ingredientes = listOfNotNull(\n                    raw.ingrediente1,\n                    raw.ingrediente2,\n                    raw.ingrediente3,\n                    raw.ingrediente4,\n                    raw.ingrediente5,\n                    raw.ingrediente6,\n                    raw.ingrediente7,\n                    raw.ingrediente8,\n                    raw.ingrediente9,\n                    raw.ingrediente10\n                    // A\u00f1ade m\u00e1s elementos aqu\u00ed si tienes hasta 15 ingredientes.\n                )\n            )\n        }\n\n        // Imprime las recetas y sus ingredientes\n        recetas.forEach { receta -&gt;\n            println(\"Receta: ${receta.nombre}\")\n            receta.ingredientes.forEach { ingrediente -&gt;\n                println(\" - $ingrediente\")\n            }\n        }\n    }\n}\n</code></pre>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#2-explicacion-del-codigo","title":"2. Explicaci\u00f3n del c\u00f3digo:","text":"<ul> <li> <p>Este c\u00f3digo primero deserializa el JSON en una lista de <code>RecetaRaw</code>, que contiene todos los campos posibles para los ingredientes, incluidos los <code>null</code>. </p> </li> <li> <p>Luego, mapea esta lista a una nueva lista de <code>Receta</code>, donde cada <code>Receta</code> tiene un nombre y una lista de ingredientes que solo incluye los valores no nulos (utilizando <code>listOfNotNull</code> para filtrar los <code>null</code>).</p> </li> <li> <p>De esta manera, podemos manejar f\u00e1cilmente el JSON proporcionado, asegur\u00e1ndonos de que solo los ingredientes v\u00e1lidos (no nulos) se incluyan en la lista de ingredientes de cada receta.</p> </li> </ul>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#ejemplo-con-kotlinxserialization","title":"Ejemplo con kotlinx.serialization","text":"<p>Vamos a ver, por \u00faltimo, un ejemplo m\u00e1s general de lectura y escritura de archivos JSON en Kotlin, utilizando la biblioteca kotlinx.serialization, que es parte del ecosistema de Kotlin y ofrece una forma nativa de serializar y deserializar datos.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#1-insertar-las-dependencias-necesarias","title":"1. Insertar las dependencias necesarias:","text":"<p>Para usar kotlinx.serialization, primero debemos agregar las dependencias necesarias a nuestro proyecto. Si estamos utilizando Gradle, podemos incluir lo siguiente en el archivo <code>build.gradle</code>:</p> <pre><code>plugins {\n    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.0'\n}\n\ndependencies {\n    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.1'\n}\n</code></pre> <p>Siempre debemos asegurarnos de usar las versiones m\u00e1s recientes de las dependencias.</p> <p>Ahora, veamos c\u00f3mo podr\u00edamos leer y escribir un archivo JSON que contiene una lista de objetos. Usaremos un ejemplo simple de una lista de usuarios, donde cada usuario tiene un nombre y una edad.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#2-definimos-la-clase-de-datos-usuario-y-agregamos-una-anotacion-para-la-serializacion","title":"2. Definimos la clase de datos <code>Usuario</code> y agregamos una <code>Anotaci\u00f3n</code> para la serializaci\u00f3n:","text":"<pre><code>import kotlinx.serialization.*\nimport kotlinx.serialization.json.*\n\n@Serializable\ndata class Usuario(val nombre: String, val edad: Int)\n</code></pre>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#3-lectura-de-un-archivo-json","title":"3. Lectura de un archivo JSON","text":"<p>Para leer un archivo JSON y convertirlo en una lista de objetos <code>Usuario</code>, podr\u00edamos hacer lo siguiente:</p> <pre><code>import java.io.File\n\nfun leerUsuariosDeJSON(archivo: String): List&lt;Usuario&gt; {\n    val contenido = File(archivo).readText()\n    return Json.decodeFromString(ListSerializer(Usuario.serializer()), contenido)\n}\n\nval usuarios = leerUsuariosDeJSON(\"usuarios.json\")\nusuarios.forEach {\n    println(\"Nombre: ${it.nombre}, Edad: ${it.edad}\")\n}\n</code></pre> <p>Este c\u00f3digo lee todo el contenido del archivo <code>usuarios.json</code> como un <code>String</code> y luego utiliza <code>Json.decodeFromString</code> para deserializar este <code>String</code> en una lista de objetos <code>Usuario</code>.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20240308-Tratamiento-JSON/#4-escritura-a-un-archivo-json","title":"4. Escritura a un archivo JSON","text":"<p>Para escribir una lista de objetos <code>Usuario</code> en un archivo JSON, podemos hacer lo siguiente:</p> <pre><code>fun escribirUsuariosAJSON(usuarios: List&lt;Usuario&gt;, archivo: String) {\n    val contenido = Json.encodeToString(ListSerializer(Usuario.serializer()), usuarios)\n    File(archivo).writeText(contenido)\n}\n\n// Lista de ejemplo para escribir en el archivo\nval listaDeUsuarios = listOf(\n    Usuario(\"Juan\", 30),\n    Usuario(\"Ana\", 25)\n)\n\nescribirUsuariosAJSON(listaDeUsuarios, \"nuevos_usuarios.json\")\n</code></pre> <p>Este c\u00f3digo serializa una lista de objetos <code>Usuario</code> a un <code>String</code> JSON utilizando <code>Json.encodeToString</code> y luego escribe este <code>String</code> en un archivo llamado <code>nuevos_usuarios.json</code>.</p> <p>Este ejemplo cubre tanto la lectura como la escritura de datos JSON en Kotlin usando la biblioteca kotlinx.serialization, que proporciona una forma integrada y eficiente de trabajar con JSON en aplicaciones Kotlin.</p>","tags":["JSON","Gson","kotlin"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/","title":"Pruebas Unitarias con \"monkeypatch\" y \"capfd\"","text":"","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#1-pruebas-con-entradas-simuladas-monkeypatch","title":"1. Pruebas con entradas simuladas (monkeypatch)","text":"<p>Supongamos que tenemos la siguiente funci\u00f3n:</p> <pre><code>def introduce_entero(msj: str) -&gt; int:\n    valor = input(msj).strip()\n\n    while not (valor.isdigit() or (valor.startswith(\"-\") and valor[1:].isdigit())):\n        print(f\"**ERROR** '{valor}' no es un n\u00famero entero v\u00e1lido!\")\n        valor = input(msj).strip()\n\n    return int(valor)\n</code></pre> <p>Para poder probarla correctamente de forma aislada, la funci\u00f3n <code>input()</code> que contiene debemos simularla. Para ello, observa el siguiente ejemplo de prueba unitaria, d\u00f3nde \u00fanicamente vamos a probar la funci\u00f3n con entradas v\u00e1lidas:</p> <pre><code>import pytest\n\n@pytest.mark.parametrize(\n    \"mock_input, expected\",\n    [\n        ('  10', 10),   # N\u00famero positivo v\u00e1lido\n        ('-5', -5),     # N\u00famero negativo v\u00e1lido\n        ('0', 0),       # N\u00famero cero\n    ]\n)\ndef test_introduce_entero_valid(mock_input, expected, monkeypatch):\n    monkeypatch.setattr('builtins.input', lambda _: mock_input)\n    assert introduce_entero(\"Introduce un entero: \") == expected\n</code></pre>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#explicacion-detallada","title":"Explicaci\u00f3n detallada:","text":"","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#1-pytestmarkparametrize","title":"1. <code>@pytest.mark.parametrize(...)</code>:","text":"<ul> <li>Esta l\u00ednea de c\u00f3digo es un decorador que le dice a pytest que la misma prueba se debe ejecutar varias veces, cambiando los valores de entrada y salida esperados para cada prueba.</li> <li><code>mock_input</code>: Simula lo que el usuario introducir\u00eda en el teclado (por ejemplo, <code>'10'</code> o <code>'-5'</code>).</li> <li><code>expected</code>: Es el valor esperado que deber\u00eda devolver la funci\u00f3n despu\u00e9s de convertir la entrada en un n\u00famero entero.</li> <li>El decorador ejecutar\u00e1 la prueba para cada uno de los casos:<ul> <li>('  10', 10): Esperamos que el valor de entrada <code>'  10'</code> se convierta en <code>10</code>.</li> <li>('-5', -5): Esperamos que el valor de entrada <code>'-5'</code> se convierta en <code>-5</code>.</li> <li>('0', 0): El valor <code>'0'</code> debe devolver el n\u00famero <code>0</code>.</li> </ul> </li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#2-la-funcion-de-prueba-test_introduce_entero_valid","title":"2. La funci\u00f3n de prueba <code>test_introduce_entero_valid(...)</code>:","text":"<pre><code>def test_introduce_entero_valid(mock_input, expected, monkeypatch):\n</code></pre> <ul> <li><code>mock_input</code>: Este valor es la entrada simulada (lo que el usuario \"introduce\").</li> <li><code>expected</code>: Es el valor que esperamos obtener al final.</li> <li><code>monkeypatch</code>: Este par\u00e1metro es una herramienta que nos permite simular el comportamiento de la funci\u00f3n <code>input()</code> para que, durante la prueba, no tengamos que escribir nada en el teclado. </li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#3-monkeypatchsetattrbuiltinsinput-lambda-_-mock_input","title":"3. <code>monkeypatch.setattr('builtins.input', lambda _: mock_input)</code>:","text":"<ul> <li>Aqu\u00ed, estamos usando <code>monkeypatch</code> para reemplazar la funci\u00f3n <code>input()</code> por una versi\u00f3n que siempre devuelve el valor <code>mock_input</code>. Esto es como si estuvi\u00e9ramos \"enga\u00f1ando\" a la funci\u00f3n para que piense que el usuario ha introducido un valor espec\u00edfico.</li> <li><code>lambda _: mock_input</code>: Es una funci\u00f3n an\u00f3nima que siempre devuelve <code>mock_input</code>, ignorando cualquier par\u00e1metro (el mensaje que mostrar\u00eda el <code>input()</code>).</li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#4-assert-introduce_entero-expected","title":"4. <code>assert introduce_entero(...) == expected</code>:","text":"<ul> <li>Esta l\u00ednea ejecuta la funci\u00f3n <code>introduce_entero()</code> con los par\u00e1metros de prueba, y despu\u00e9s compara el resultado devuelto por la funci\u00f3n con el valor <code>expected</code>.</li> <li>Si la funci\u00f3n devuelve un valor distinto al esperado, la prueba fallar\u00e1.</li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#ejecucion-del-test","title":"Ejecuci\u00f3n del test:","text":"<p>Cada vez que pytest ejecuta este test, usa uno de los conjuntos de par\u00e1metros definidos en <code>@pytest.mark.parametrize</code>.    Por ejemplo:   1. Cuando la entrada simulada es <code>'  10'</code>, la funci\u00f3n <code>introduce_entero</code> deber\u00eda devolver <code>10</code>, y la prueba comprobar\u00e1 si ese es el caso.  2. Si la funci\u00f3n devuelve algo diferente a lo esperado (por ejemplo, si la funci\u00f3n falla y devuelve <code>'10'</code> en lugar de <code>10</code>), entonces la prueba fallar\u00e1.    </p>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#consideraciones","title":"Consideraciones:","text":"<ul> <li><code>isdigit()</code> en <code>introduce_entero()</code> se asegura de que solo se consideren cadenas que representan enteros positivos. Para los n\u00fameros negativos, la funci\u00f3n tambi\u00e9n verifica si la cadena comienza con un <code>-</code> y el resto de la cadena es un n\u00famero.    </li> <li><code>strip()</code> elimina los espacios adicionales alrededor del n\u00famero introducido, lo cual garantiza que el valor se procese correctamente incluso si el usuario introduce espacios accidentales.</li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#2-pruebas-con-capturas-de-mensajes-de-error-monkeypatch-y-capfd","title":"2. Pruebas con capturas de mensajes de error (monkeypatch y capfd)","text":"<p>Ahora vamos a realizar un test para simular una entrada inv\u00e1lida en la funci\u00f3n <code>introduce_entero</code>, capturando y comprobando el mensaje de error en la salida de la consola.</p> <p>Vamos a construir el c\u00f3digo del test y la explicaci\u00f3n detallada para entender c\u00f3mo realizar este tipo de pruebas.</p>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#test-para-introduce_entero-con-entrada-invalida-y-captura-del-error","title":"Test para <code>introduce_entero</code> con entrada inv\u00e1lida y captura del error:","text":"<pre><code>import pytest\n\n@pytest.mark.parametrize(\n    \"mock_inputs, error_msg\",\n    [\n        (['abc'], \"**ERROR** 'abc' no es un n\u00famero entero v\u00e1lido!\\n\"),  # Entrada inv\u00e1lida sin valor v\u00e1lido posterior\n        (['123abc'], \"**ERROR** '123abc' no es un n\u00famero entero v\u00e1lido!\\n\"),  # Entrada con mezcla de caracteres\n        (['-123a'], \"**ERROR** '-123a' no es un n\u00famero entero v\u00e1lido!\\n\"),  # Entrada con n\u00famero negativo y caracteres inv\u00e1lidos\n    ]\n)\ndef test_introduce_entero_invalid_only(mock_inputs, error_msg, monkeypatch, capfd):\n    input_iterator = iter(mock_inputs)\n    monkeypatch.setattr('builtins.input', lambda _: next(input_iterator))\n\n    # Usamos pytest.raises para manejar el agotamiento del iterador\n    with pytest.raises(StopIteration):\n        introduce_entero(\"Introduce un entero: \")  # Esto seguir\u00e1 esperando una entrada v\u00e1lida\n\n    # Capturamos el mensaje de salida y verificamos si se imprimi\u00f3 el mensaje de error\n    captured = capfd.readouterr()\n    assert error_msg in captured.out\n</code></pre>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#explicacion-detallada_1","title":"Explicaci\u00f3n detallada:","text":"","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#1-pytestmarkparametrize_1","title":"1. <code>@pytest.mark.parametrize(...)</code>:","text":"<ul> <li><code>@pytest.mark.parametrize</code>: Le indica a pytest que debe ejecutar la prueba varias veces con diferentes combinaciones de entradas y mensajes de error.</li> <li><code>mock_inputs</code>: Simula lo que el usuario introducir\u00eda (por ejemplo, <code>'abc'</code> o <code>'-123a'</code>), que en este caso son entradas inv\u00e1lidas.</li> <li><code>error_msg</code>: El mensaje de error esperado que deber\u00eda imprimirse cuando se detecte una entrada inv\u00e1lida.</li> <li>Cada uno de estos casos simula una entrada incorrecta:<ul> <li><code>['abc']</code>: Entrada completamente no num\u00e9rica.</li> <li><code>['123abc']</code>: Entrada con una mezcla de n\u00fameros y caracteres no v\u00e1lidos.</li> <li><code>['-123a']</code>: Un n\u00famero negativo con caracteres adicionales no v\u00e1lidos.</li> </ul> </li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#2-la-funcion-de-prueba-test_introduce_entero_invalid_only","title":"2. La funci\u00f3n de prueba <code>test_introduce_entero_invalid_only(...)</code>:","text":"<pre><code>def test_introduce_entero_invalid_only(mock_inputs, error_msg, monkeypatch, capfd):\n</code></pre> <ul> <li><code>mock_inputs</code>: Es una lista de entradas simuladas (cada una en su propio caso de prueba).</li> <li><code>error_msg</code>: Es el mensaje que esperamos que aparezca en la consola cuando el usuario introduce un valor no v\u00e1lido.</li> <li><code>monkeypatch</code>: Simula las entradas que el usuario introducir\u00eda, reemplazando la llamada a <code>input()</code>.</li> <li><code>capfd</code>: Captura la salida est\u00e1ndar (lo que se imprime en la consola), para verificar que se est\u00e1 mostrando el mensaje de error correcto.</li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#3-monkeypatchsetattrbuiltinsinput-lambda-_-nextinput_iterator","title":"3. <code>monkeypatch.setattr('builtins.input', lambda _: next(input_iterator))</code>:","text":"<ul> <li>Estamos usando <code>monkeypatch</code> para interceptar la funci\u00f3n <code>input()</code> y devolver la entrada simulada de <code>mock_inputs</code> usando un iterador.</li> <li><code>lambda _: next(input_iterator)</code>: Simula el comportamiento de <code>input()</code>, devolviendo un valor de la lista <code>mock_inputs</code> cada vez que se llama.</li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#4-manejo-del-agotamiento-del-iterador-con-pytestraisesstopiteration","title":"4. Manejo del agotamiento del iterador con <code>pytest.raises(StopIteration)</code>:","text":"<ul> <li>Este bloque permite que el test se maneje correctamente cuando el iterador se queda sin entradas simuladas.</li> <li>Como estamos simulando entradas inv\u00e1lidas, la funci\u00f3n <code>introduce_entero</code> quedar\u00eda atrapada en un bucle infinito esperando una entrada v\u00e1lida. Para manejar esto, usamos <code>pytest.raises(StopIteration)</code> para finalizar la prueba cuando el iterador se queda sin entradas.</li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#5-captura-del-mensaje-de-salida-con-capfdreadouterr","title":"5. Captura del mensaje de salida con <code>capfd.readouterr()</code>:","text":"<ul> <li><code>capfd.readouterr()</code>: Captura todo lo que se ha imprimido en la consola durante la ejecuci\u00f3n de la prueba. Esto nos permite verificar que el mensaje de error que imprimi\u00f3 la funci\u00f3n es exactamente el que esperamos.</li> <li><code>assert error_msg in captured.out</code>: Aqu\u00ed verificamos que el mensaje de error esperado se encuentra en la salida capturada.</li> </ul>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#ejecucion-del-test_1","title":"Ejecuci\u00f3n del test:","text":"<ol> <li>Simulaci\u00f3n de entradas inv\u00e1lidas: En cada ejecuci\u00f3n del test, se simula una entrada no v\u00e1lida como <code>'abc'</code> o <code>'123abc'</code>.</li> <li>Verificaci\u00f3n de errores: La funci\u00f3n <code>introduce_entero</code> deber\u00eda imprimir el mensaje de error esperado, como `\"**ERROR 'abc' no es un n\u00famero entero v\u00e1lido!\"**.</li> <li>Agotamiento del iterador: Cuando el iterador de entradas se queda sin valores, <code>pytest.raises(StopIteration)</code> finaliza el test.</li> </ol>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-Pruebas-Unitarias-Simuladas/#conclusion","title":"Conclusi\u00f3n:","text":"<p>Este test ayuda a comprobar que la funci\u00f3n <code>introduce_entero</code> detecta correctamente las entradas no v\u00e1lidas, imprime el mensaje de error adecuado y maneja de manera adecuada la espera de entradas v\u00e1lidas, incluso cuando solo se simulan entradas incorrectas.</p>","tags":["monkeypatch","capfd","python","test","pytest"]},{"location":"blog/20241008-SeparaResponsabilidades/","title":"Principio de responsabilidad \u00fanica (SRP) en un programa sencillo.","text":"","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#1-concepto-separacion-de-responsabilidades","title":"1. Concepto: Separaci\u00f3n de responsabilidades","text":"<p>En un programa bien estructurado, es importante dividirlo en tres fases principales para que sea f\u00e1cil de entender, probar y mantener. Estas fases son:</p> <ol> <li> <p>Entrada y validaci\u00f3n de datos: Esta fase se encarga de capturar los datos necesarios para resolver el problema y validar que cumplan con los requisitos (por ejemplo, asegurarse de que sean n\u00fameros y no letras, que los n\u00fameros sean positivos, etc.).</p> </li> <li> <p>Procesamiento (l\u00f3gica de negocio): Es la fase en la que realmente se resuelve el problema utilizando los datos que ya han sido validados. Es importante que la l\u00f3gica del problema est\u00e9 separada de la entrada y de la salida para que se pueda probar de forma independiente.</p> </li> <li> <p>Salida o presentaci\u00f3n de resultados: Despu\u00e9s de calcular el resultado, este se presenta al usuario de forma comprensible. Esto podr\u00eda ser un mensaje en consola o cualquier otro formato de salida.</p> </li> </ol>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#2-analogia-un-restaurante","title":"2. Analog\u00eda: Un restaurante","text":"<p>Para que entiendan mejor este concepto, usaremos una analog\u00eda con un restaurante:</p> <ul> <li> <p>Entrada y validaci\u00f3n de datos (Tomar la orden): Imagina que un cliente llega al restaurante y el camarero toma su orden. El camarero no acepta cualquier cosa; verifica que el cliente haya pedido algo que est\u00e9 en el men\u00fa. Si el cliente pide algo que no existe, el camarero le pide que elija otra cosa. Esta fase es la validaci\u00f3n de la entrada.</p> </li> <li> <p>Procesamiento o l\u00f3gica de negocio (Preparaci\u00f3n de la comida): Una vez que el camarero tiene una orden v\u00e1lida, se la lleva al cocinero. El cocinero no se preocupa por c\u00f3mo se tom\u00f3 la orden o qui\u00e9n la pidi\u00f3. Su responsabilidad es preparar la comida basada en la orden recibida.</p> </li> <li> <p>Salida o presentaci\u00f3n de resultados (Servir la comida): Cuando la comida est\u00e1 lista, el camarero se la lleva al cliente y se la presenta en la mesa. Aqu\u00ed no se hace ning\u00fan c\u00e1lculo ni verificaci\u00f3n, simplemente se entrega el resultado.</p> </li> </ul> <p>De la misma manera, en un programa bien organizado, cada fase debe estar separada y tener una \u00fanica responsabilidad.</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#3-ejemplo-practico-calcular-el-area-de-un-rectangulo","title":"3. Ejemplo pr\u00e1ctico: Calcular el \u00e1rea de un rect\u00e1ngulo","text":"<p>Vamos a usar el ejemplo de calcular el \u00e1rea de un rect\u00e1ngulo:</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#31-codigo-inicial-todo-junto-en-una-sola-funcion","title":"3.1. C\u00f3digo inicial (todo junto en una sola funci\u00f3n):","text":"<pre><code>def calcular_area_rectangulo():\n    # Entrada de datos\n    ancho = float(input(\"Introduce el ancho del rect\u00e1ngulo: \"))\n    alto = float(input(\"Introduce el alto del rect\u00e1ngulo: \"))\n\n    # Proceso de c\u00e1lculo\n    area = ancho * alto\n\n    # Salida\n    print(f\"El \u00e1rea del rect\u00e1ngulo es: {area}\")\n</code></pre> <p>Este c\u00f3digo mezcla la entrada, el procesamiento y la salida en una sola funci\u00f3n, lo cual dificulta su prueba y mantenimiento. Vamos a separarlo en tres funciones distintas.</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#32-fase-1-entrada-y-validacion-de-datos","title":"3.2. Fase 1: Entrada y validaci\u00f3n de datos","text":"<pre><code>def obtener_datos_rectangulo():\n    \"\"\"Obtiene y valida los datos de entrada del rect\u00e1ngulo.\"\"\"\n    ancho = None\n    alto = None\n\n    # Validar que el ancho y el alto sean n\u00fameros positivos\n    while ancho is None:\n        try:\n            ancho = float(input(\"Introduce el ancho del rect\u00e1ngulo (positivo): \"))\n            if ancho &lt;= 0:\n                print(\"El valor debe ser positivo.\")\n                ancho = None\n        except ValueError:\n            print(\"Por favor, introduce un n\u00famero v\u00e1lido.\")\n\n    while alto is None:\n        try:\n            alto = float(input(\"Introduce el alto del rect\u00e1ngulo (positivo): \"))\n            if alto &lt;= 0:\n                print(\"El valor debe ser positivo.\")\n                alto = None\n        except ValueError:\n            print(\"Por favor, introduce un n\u00famero v\u00e1lido.\")\n\n    return ancho, alto\n</code></pre> <ul> <li>Qu\u00e9 hace esta funci\u00f3n: Toma la entrada del usuario y valida que sean n\u00fameros positivos. Si el usuario introduce un valor inv\u00e1lido, le pide que vuelva a intentarlo.</li> </ul>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#33-fase-2-procesamiento-logica-de-negocio","title":"3.3. Fase 2: Procesamiento (l\u00f3gica de negocio)","text":"<pre><code>def calcular_area(ancho, alto):\n    \"\"\"Calcula el \u00e1rea de un rect\u00e1ngulo dado su ancho y alto.\"\"\"\n    return ancho * alto\n</code></pre> <ul> <li>Qu\u00e9 hace esta funci\u00f3n: Toma dos n\u00fameros (ancho y alto) y calcula el \u00e1rea del rect\u00e1ngulo. No tiene idea de c\u00f3mo se obtuvieron estos n\u00fameros ni de c\u00f3mo se va a mostrar el resultado. Esto es lo que se conoce como l\u00f3gica de negocio.</li> </ul>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#34-fase-3-salida-o-presentacion-de-resultados","title":"3.4. Fase 3: Salida o presentaci\u00f3n de resultados","text":"<pre><code>def mostrar_resultado(area):\n    \"\"\"Muestra el resultado del \u00e1rea en la salida est\u00e1ndar.\"\"\"\n    print(f\"El \u00e1rea del rect\u00e1ngulo es: {area}\")\n</code></pre> <ul> <li>Qu\u00e9 hace esta funci\u00f3n: Muestra el resultado en la consola. No realiza c\u00e1lculos ni toma datos de entrada.</li> </ul>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#35-funcion-principal-que-une-las-tres-fases","title":"3.5. Funci\u00f3n principal que une las tres fases","text":"<pre><code>def main():\n    ancho, alto = obtener_datos_rectangulo()  # Entrada y validaci\u00f3n de datos\n    area = calcular_area(ancho, alto)         # Procesamiento o l\u00f3gica de negocio\n    mostrar_resultado(area)                   # Presentaci\u00f3n de resultados\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ul> <li>Qu\u00e9 hace esta funci\u00f3n: Conecta las tres fases en un solo flujo. Primero, obtiene y valida los datos, luego calcula el \u00e1rea y finalmente muestra el resultado.</li> </ul>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#36-probar-la-logica-de-negocio","title":"3.6. Probar la l\u00f3gica de negocio","text":"<p>Aunque todas las fases se pueden probar, en esta etapa nos vamos a centrar en la l\u00f3gica de negocio (<code>calcular_area</code>). Esto es importante porque queremos asegurarnos de que la funci\u00f3n resuelve correctamente el problema sin preocuparnos por c\u00f3mo se obtuvieron los datos ni c\u00f3mo se muestra el resultado.</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#361-pruebas-de-la-logica-de-negocio-calcular_area","title":"3.6.1. Pruebas de la l\u00f3gica de negocio (calcular_area)","text":"<p>Podemos probar la funci\u00f3n <code>calcular_area</code> con un archivo de pruebas que no dependa de la entrada y salida:</p> <pre><code># test_calcular_area.py\n\n# Importar la funci\u00f3n calcular_area desde el archivo donde la definiste\nfrom main import calcular_area  # Ajusta el nombre del archivo si es necesario\n\ndef test_area_positiva():\n    assert calcular_area(5, 10) == 50, \"Error: el \u00e1rea de 5x10 deber\u00eda ser 50\"\n\ndef test_area_cero():\n    assert calcular_area(0, 10) == 0, \"Error: el \u00e1rea de 0x10 deber\u00eda ser 0\"\n\ndef test_area_valores_negativos():\n    # Dependiendo de la l\u00f3gica de negocio, puedes decidir si aceptar o no valores negativos\n    assert calcular_area(-5, 10) == -50, \"Error: el \u00e1rea de -5x10 deber\u00eda ser -50\"\n</code></pre>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#362-explicacion-del-proposito-de-estas-pruebas","title":"3.6.2. Explicaci\u00f3n del prop\u00f3sito de estas pruebas","text":"<p>Al probar la l\u00f3gica de negocio, no tenemos que preocuparnos por si el usuario introduce letras en lugar de n\u00fameros o si el resultado se muestra correctamente. Nos centramos en verificar que, si se pasan datos v\u00e1lidos a la funci\u00f3n <code>calcular_area</code>, esta devuelve el resultado correcto. Una vez que esta fase funcione bien, podemos estar seguros de que la parte central del programa est\u00e1 correcta.</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#4-aplicacion-en-desarrollo-web","title":"4. Aplicaci\u00f3n en desarrollo web","text":"<p>Es importante comprender que esta separaci\u00f3n de fases se aplica a aplicaciones m\u00e1s grandes, como las aplicaciones web:</p> <ol> <li> <p>Entrada y validaci\u00f3n de datos: Se realiza en el frontend (por ejemplo, en el navegador), validando que los datos sean correctos antes de enviarlos al servidor. Esto es similar a la fase de entrada y validaci\u00f3n de datos en nuestro ejemplo.</p> </li> <li> <p>Procesamiento o l\u00f3gica de negocio: El backend (servidor) recibe los datos validados y realiza el procesamiento necesario (por ejemplo, calcular valores, interactuar con bases de datos, etc.). Esto es an\u00e1logo a la fase de c\u00e1lculo de \u00e1rea en nuestro ejemplo.</p> </li> <li> <p>Salida o presentaci\u00f3n de resultados: Los resultados se devuelven al frontend para ser presentados al usuario de manera adecuada. El frontend solo se encarga de mostrar los resultados, no de realizar c\u00e1lculos ni validaciones complejas.</p> </li> </ol> <p>\u00a1Exacto! Lo que est\u00e1s describiendo est\u00e1 relacionado directamente con el Principio de Responsabilidad \u00danica (Single Responsibility Principle, SRP), que es uno de los principios fundamentales en el desarrollo de software.</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#5-principio-de-responsabilidad-unica-srp","title":"5. Principio de Responsabilidad \u00danica (SRP)","text":"<p>El SRP establece que cada m\u00f3dulo, clase o funci\u00f3n debe tener una \u00fanica responsabilidad y, por lo tanto, debe hacer solo una cosa. En otras palabras, cada componente de un programa debe tener una \u00fanica raz\u00f3n para cambiar. Si un m\u00f3dulo o funci\u00f3n se modifica por m\u00faltiples motivos, significa que est\u00e1 asumiendo m\u00e1s de una responsabilidad, lo cual lo hace m\u00e1s complejo de entender y mantener.</p> <p>Aplicar este principio tiene varias ventajas:</p> <ol> <li> <p>Facilita la lectura y comprensi\u00f3n: Cada funci\u00f3n tiene un prop\u00f3sito claro, por lo que es m\u00e1s f\u00e1cil para otros (o para ti mismo en el futuro) entender lo que hace cada parte del c\u00f3digo.</p> </li> <li> <p>Mejora la mantenibilidad: Si hay un error o se necesita realizar un cambio, solo se modifica la funci\u00f3n responsable de esa tarea espec\u00edfica, lo que minimiza el riesgo de introducir nuevos errores en otras partes del c\u00f3digo.</p> </li> <li> <p>Facilita las pruebas: Al tener funciones m\u00e1s peque\u00f1as y espec\u00edficas, se pueden crear pruebas unitarias m\u00e1s simples y precisas para verificar el comportamiento de cada funci\u00f3n de manera independiente.</p> </li> </ol>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#51-relacion-del-srp-con-la-separacion-de-fases","title":"5.1. Relaci\u00f3n del SRP con la separaci\u00f3n de fases","text":"<p>En el ejemplo de separar las fases de un programa (entrada, procesamiento y salida), estamos aplicando este principio:</p> <ol> <li> <p>La funci\u00f3n <code>obtener_datos_rectangulo</code> solo se encarga de recoger y validar la entrada de datos. No realiza c\u00e1lculos ni muestra resultados.</p> </li> <li> <p>La funci\u00f3n <code>calcular_area</code> solo se encarga de realizar el c\u00e1lculo del \u00e1rea. No se preocupa por c\u00f3mo se obtuvieron los datos ni c\u00f3mo se mostrar\u00e1 el resultado.</p> </li> <li> <p>La funci\u00f3n <code>mostrar_resultado</code> solo se encarga de mostrar el resultado al usuario. No recoge datos ni realiza c\u00e1lculos.</p> </li> </ol> <p>Cada una de estas funciones tiene una \u00fanica responsabilidad, y cada una tendr\u00eda una sola raz\u00f3n para cambiar. Por ejemplo:</p> <ul> <li>Si cambia la forma en la que se muestran los resultados (por ejemplo, de consola a una ventana gr\u00e1fica), solo se modificar\u00eda la funci\u00f3n <code>mostrar_resultado</code>.</li> <li>Si se cambia la l\u00f3gica para calcular el \u00e1rea (por ejemplo, calcular el \u00e1rea de otro tipo de figura), solo se modificar\u00eda la funci\u00f3n <code>calcular_area</code>.</li> <li>Si se quiere cambiar la forma de capturar los datos (por ejemplo, de entrada en consola a un formulario en una aplicaci\u00f3n web), solo se modificar\u00eda la funci\u00f3n <code>obtener_datos_rectangulo</code>.</li> </ul>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#52-analogia-con-el-srp-en-la-cocina-restaurante","title":"5.2. Analog\u00eda con el SRP en la cocina (Restaurante)","text":"<p>Volviendo a la analog\u00eda del restaurante:</p> <ol> <li> <p>El camarero tiene la responsabilidad de tomar la orden y verificar que el cliente haya elegido algo del men\u00fa. Si se cambia el men\u00fa (por ejemplo, se agrega un nuevo platillo), solo el camarero tiene que conocer estos cambios y su forma de tomar la orden.</p> </li> <li> <p>El cocinero se encarga de preparar la comida bas\u00e1ndose en la orden recibida. No le importa c\u00f3mo se tom\u00f3 la orden ni c\u00f3mo se va a presentar. Si se cambia la receta de un platillo, solo el cocinero se ve afectado, pero el camarero y el proceso de servir no cambian.</p> </li> <li> <p>El camarero que sirve tiene la responsabilidad de llevar la comida a la mesa. No le importa c\u00f3mo se prepar\u00f3 la comida ni qui\u00e9n la pidi\u00f3. Si cambian la forma de servir (por ejemplo, de bandejas a platos individuales), solo este camarero tendr\u00eda que cambiar su manera de trabajar.</p> </li> </ol> <p>Cada rol tiene una \u00fanica responsabilidad, lo que se traduce en que cada uno tiene una \u00fanica raz\u00f3n para cambiar. Esto facilita que, si se produce un cambio en una parte, las otras no se vean afectadas. Podria cambiar el camaremo que toma nota, el cocinero o el camarero que sirve, pero no afecta a los otros.</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#53-como-relacionar-el-srp-con-aplicaciones-reales","title":"5.3. C\u00f3mo relacionar el SRP con aplicaciones reales","text":"<p>El SRP se aplica no solo en programas peque\u00f1os, sino en proyectos m\u00e1s grandes y complejos como:</p> <ol> <li> <p>Aplicaciones web:</p> <ul> <li>El frontend (cliente) tiene la responsabilidad de capturar y validar datos (similar a <code>obtener_datos_rectangulo</code>).</li> <li>El backend (servidor) tiene la responsabilidad de procesar esos datos y devolver una respuesta (similar a <code>calcular_area</code>).</li> <li>El frontend presenta los resultados al usuario de manera comprensible (similar a <code>mostrar_resultado</code>).</li> </ul> </li> <li> <p>Aplicaciones con diferentes m\u00f3dulos:</p> <ul> <li>Cada m\u00f3dulo tiene una responsabilidad espec\u00edfica, como gestionar la base de datos, realizar c\u00e1lculos o manejar la interfaz de usuario.</li> </ul> </li> </ol>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"blog/20241008-SeparaResponsabilidades/#6-conclusion","title":"6. Conclusi\u00f3n","text":"<p>Es importante separar las fases de un programa desde el principio, ya que esto nos preparar\u00e1 para escribir c\u00f3digo modular y profesional. Aunque todas las fases se pueden probar, en este momento es recomendable centrarse en probar la l\u00f3gica de negocio (<code>calcular_area</code>) para entender c\u00f3mo se pueden realizar pruebas unitarias efectivas.</p> <p>Separar las responsabilidades en funciones independientes y peque\u00f1as sigue el principio de responsabilidad \u00fanica, lo que nos ayuda a escribir un c\u00f3digo m\u00e1s limpio, mantenible y f\u00e1cil de probar. Es importante acostumbrarse a esta pr\u00e1ctica, ya que en aplicaciones m\u00e1s complejas, esta organizaci\u00f3n ser\u00e1 crucial para gestionar el c\u00f3digo de manera eficiente.</p>","tags":["python","test","SRP","Buenas pr\u00e1cticas"]},{"location":"section1/","title":"Programaci\u00f3n","text":"<p>M\u00f3dulo de programaci\u00f3n, 1 DAW.</p> <ul> <li>Presentaci\u00f3n</li> <li>Formulario 1: Como soy</li> <li>Formulario 2: Conocimientos previos</li> </ul> <p>Se describe el m\u00f3dulo profesional de programaci\u00f3n. Esta informaci\u00f3n se divide en:</p> <ul> <li>Una primera secci\u00f3n de Informaci\u00f3n general en la que se hace una propuesta de temario, con la relaci\u00f3n de unidades y los resultados de aprendizaje asociados, asi como las posibles fechas en las que se impartir\u00edan.</li> <li>Una segunda secci\u00f3n con Materiales relacionados con el modulo, como Fuentes de informaci\u00f3n, libros recomendados, recursos y herramientas para aplicar conceptos.</li> </ul> <p>Todo el contenido est\u00e1 supeditado a mejora, de hecho est\u00e1 en construcci\u00f3n, y por tanto es solo una propuesta que ir\u00e1 cambiando, espero que a mejor. Si tienes una propuesta de mejora, no te cortes y p\u00e1samela ;-).</p>","tags":["Software"]},{"location":"section1/#informacion","title":"Informaci\u00f3n","text":"","tags":["Software"]},{"location":"section1/#propuesta-de-temario","title":"Propuesta de temario","text":"<p>En los siguientes enlaces se encuentran los contenidos, resultados de aprendizaje, criterios de evaluaci\u00f3n y herramientas para trabajarlos y poder evaluarlos. Es solo una propuesta, pero puede servir de punto de partida inicial.</p> <ol> <li>Introducci\u00f3n al desarrollo de software</li> </ol>","tags":["Software"]},{"location":"section1/#relacion-de-unidades-y-resultados-de-aprendizaje","title":"Relaci\u00f3n de unidades y resultados de aprendizaje","text":"Unidad UD 1 UD 2 UD 3 UD 4 UD 5 UD 6 RA 1 X RA 2 X RA 3 X RA 4 X RA 5 X RA 6 X","tags":["Software"]},{"location":"section1/#relacion-de-unidades-y-fechas","title":"Relaci\u00f3n de unidades y fechas","text":"<p>El curso tiene un total de 24 semanas (720 horas). La relaci\u00f3n propuesta entre unidades y semanas es la siguiente:</p> Unidad Semanas 1 Semana 1 - 2 2 Semana 2 - 7 3 Semana  - 4 Semana  - 5 Semana  - 6 Semana  -","tags":["Software"]},{"location":"section1/#materiales","title":"Materiales","text":"","tags":["Software"]},{"location":"section1/#fuentes","title":"Fuentes","text":"<ul> <li>Rafael del Rio: Utilizado para la estructura de la p\u00e1gina de presentaci\u00f3n del m\u00f3dulo.</li> <li>Jos\u00e9 Antonio Mu\u00f1oz Jim\u00e9nez: Utilizado en parte del contenido del m\u00f3dulo.</li> </ul>","tags":["Software"]},{"location":"section1/#bibliografia","title":"Bibliograf\u00eda","text":"<ul> <li>Kenneth C. Louden. \u201cLenguajes de programaci\u00f3n: Principios y pr\u00e1ctica\u201d. Paraninfo, 2004</li> <li>Roger S. Pressman. \u201cIngenier\u00eda del software: Un enfoque pr\u00e1ctico 7a Ed.\u201d. McGraw Hill, 2010</li> <li>Carlos Bl\u00e9. \u201cDise\u00f1o \u00e1gil con TDD\u201d. iExpertos, 2010</li> <li>Kent Beck. \u201cTest driven development by example\u201d. Addison Wesley, 2002</li> <li>Tobias Mayer &amp; Alan Cyment. \u201cPor un Scrum popular: Notas para una revoluci\u00f3n Agile\u201d. Dymaxicon, 2014</li> <li>Henrik Kniberg. \u201cScrum y XP desde las trincheras\u201d. C4Media, 2007</li> <li>Federico Toledo. \u201cIntroducci\u00f3n a las pruebas de S.I.: Un enfoque pr\u00e1ctico\u201d. Abstracta, 2014</li> <li>Martin Fowler. \u201cRefactoring: Improving the design of existing code\u201d. Alhambra mexicana, 1999</li> <li>Martin Fowler y Kendall Scott. \u201cUML gota a gota\u201d. Alhambra mexicana, 1999</li> <li>Robert C. Martin. \u201cUML para programadores Java\u201d. Pearson, 2004</li> <li>Cat\u00e1logo de patrones de refactorizaci\u00f3n</li> <li>Refactoring Guru</li> <li>Patrones de dise\u00f1o</li> <li>Gu\u00eda definitiva de Scrum</li> <li>Git la gu\u00eda sencilla</li> <li>Git en entornos distribuidos</li> <li>Java, generaci\u00f3n de documentaci\u00f3n</li> <li>Python Documentation Generator, Sphinx</li> <li>UML, gu\u00eda digitales/digitalguide/paginas-web/desarrollo-web/uml-lenguaje-unificado-de-modelado-orientado-a-objetos/)</li> <li>eduScurm, \u00a1Colaboraci\u00f3n que te da alas!</li> </ul>","tags":["Software"]},{"location":"section1/#recursos","title":"Recursos","text":"<ul> <li>Plataforma de e-learning: Moodle,</li> <li>Paquete ofim\u00e1tico: LibreOffice</li> <li>Sistema operativo: Windows 10 y Linux (Ubuntu u otra distribuci\u00f3n similar)</li> <li>Entornos integrados de desarrollo y Editores: Visual Studio Code, IntelliJ, PyCharm, Sublime.</li> <li>Sistema de control de versiones: git, github</li> <li>Programas para el dise\u00f1o de diagramas UML (DIA, UMLet, online LucidChart,\u2026)</li> </ul>","tags":["Software"]},{"location":"section1/#contenido","title":"Contenido","text":"<p>T\u00edpicamente se intenta tener los siguientes apartados en cada uno de los m\u00f3dulos profesionales:</p> <ul> <li>Teor\u00eda.</li> <li>Presentaciones.</li> <li>Ejercicios.</li> <li>Pr\u00e1cticas evaluables.</li> <li>Ex\u00e1menes</li> </ul>","tags":["Software"]},{"location":"section1/u01/","title":"UD 1 - Mi primer programa","text":"","tags":["Software"]},{"location":"section1/u01/#unidad-1-introduccion-a-la-programacion","title":"Unidad 1: Introducci\u00f3n a la programaci\u00f3n","text":"","tags":["Software"]},{"location":"section1/u01/#1-normativa-de-respaldo","title":"1. Normativa de respaldo","text":"<p>La unidad est\u00e1 respaldada por la normativa oficial del curso.</p>","tags":["Software"]},{"location":"section1/u01/#2-resultados-de-aprendizaje-ra","title":"2. Resultados de aprendizaje (RA)","text":"<p>RA 1: Conocer la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado.   </p>","tags":["Software"]},{"location":"section1/u01/#3-criterios-de-evaluacion","title":"3. Criterios de evaluaci\u00f3n","text":"<p>Los criterios de evaluaci\u00f3n para la unidad 1 son los siguientes:      - a) Identificar los bloques que componen la estructura de un programa inform\u00e1tico.      - b) Crear proyectos de desarrollo de aplicaciones.      - c) Utilizar entornos integrados de desarrollo (IDE).      - d) Identificar los distintos tipos de variables y su utilidad.      - e) Modificar el c\u00f3digo de un programa para crear y utilizar variables.      - f) Crear y utilizar constantes y literales.      - g) Clasificar, reconocer y utilizar operadores en expresiones.      - h) Comprobar el funcionamiento de las conversiones de tipos expl\u00edcitas e impl\u00edcitas.      - i) Introducir comentarios en el c\u00f3digo.  </p>","tags":["Software"]},{"location":"section1/u01/#4-contenidos","title":"4. Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 1 e incluye los siguientes temas:      - U1: Mi primer programa.      - U2: Estructuras de control en la programaci\u00f3n.</p>","tags":["Software"]},{"location":"section1/u01/#5-detalles-de-los-contenidos","title":"5. Detalles de los contenidos","text":"<p>Durante la unidad, los estudiantes aprender\u00e1n:         - 1.1. Qu\u00e9 es un programa y un algoritmo.      - 1.2. Bloques principales de un programa.      - 1.3. Elementos b\u00e1sicos de un lenguaje de programaci\u00f3n.      - 1.4. Instalaci\u00f3n y uso b\u00e1sico de un IDE.    </p>","tags":["Software"]},{"location":"section1/u01/#6-evaluacion","title":"6. Evaluaci\u00f3n","text":"<p>Para evaluar la unidad se realizar\u00e1n:         - Pr\u00e1ctica: Creaci\u00f3n de un proyecto b\u00e1sico de programaci\u00f3n utilizando un IDE.         - Prueba espec\u00edfica: Evaluaci\u00f3n de los conocimientos sobre estructura de programas y uso de variables.      </p>","tags":["Software"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/","title":"UD 1 - P1: Mi primer programa - Windows","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#p11-mi-primer-programa-windows","title":"P1.1 - Mi primer programa - Windows","text":"<p>A continuaci\u00f3n, ofrecemos una gu\u00eda paso a paso para aquellos usuarios principiantes interesados en aprender Python con Windows.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#1-configurar-el-entorno-de-desarrollo","title":"1. Configurar el entorno de desarrollo","text":"<p>Si eres un usuario principiante y no est\u00e1s familiarizado con Python, te recomendamos instalar Python desde Microsoft Store. La instalaci\u00f3n a trav\u00e9s de Microsoft Store utiliza el int\u00e9rprete de Python3 b\u00e1sico, pero controla el establecimiento de la configuraci\u00f3n del valor PATH para el usuario actual (lo que evita la necesidad de contar con acceso de administrador) y, adem\u00e1s, proporciona actualizaciones autom\u00e1ticas. Resulta especialmente \u00fatil si te encuentras en un entorno educativo o en un departamento de una organizaci\u00f3n que restringe los permisos o el acceso administrativo en la m\u00e1quina.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#2-instalar-python","title":"2. Instalar Python","text":"<p>Para instalar Python con Microsoft Store:</p> <ol> <li>Ve al men\u00fa Inicio (icono de Windows de la esquina inferior izquierda), escribe \"Microsoft Store\" y selecciona el v\u00ednculo para abrir Store.</li> <li>Una vez que lo hayas abierto, selecciona Buscar en el men\u00fa superior derecho y escribe \"Python\". Seleccione la versi\u00f3n de Python que quiera usar en los resultados de la opci\u00f3n Aplicaciones. Se recomienda usar la m\u00e1s reciente, a menos que tenga una raz\u00f3n para no hacerlo (por ejemplo, alinearse con la versi\u00f3n que se us\u00f3 en un proyecto existente en el que planea trabajar). Una vez que haya determinado qu\u00e9 versi\u00f3n quiere instalar, seleccione  Obtener .</li> <li>Una vez que Python haya completado el proceso de descarga e instalaci\u00f3n, abre Windows PowerShell mediante el men\u00fa Inicio (icono de Windows de la esquina inferior izquierda). Cuando PowerShell est\u00e9 abierto, escribe <code>Python --version</code> para confirmar que Python3 est\u00e1 instalado en la m\u00e1quina.</li> <li>La instalaci\u00f3n de Microsoft Store de Python incluye  PIP , el administrador de paquetes est\u00e1ndar. PIP te permite instalar y administrar paquetes adicionales que no forman parte de la biblioteca est\u00e1ndar de Python. Para confirmar que tambi\u00e9n dispones de PIP para instalar y administrar paquetes, escribe <code>pip --version</code>.</li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#3-instalar-visual-studio-code","title":"3. Instalar Visual Studio Code","text":"<p>Al usar VS Code como editor de texto/entorno de desarrollo integrado (IDE), puedes aprovechar IntelliSense (una ayuda de finalizaci\u00f3n de c\u00f3digo), el detector de errores (permite evitar que se produzcan errores en el c\u00f3digo), el soporte t\u00e9cnico de depuraci\u00f3n (ayuda a buscar errores en el c\u00f3digo despu\u00e9s de ejecutarlo), los fragmentos de c\u00f3digo (plantillas para peque\u00f1os bloques de c\u00f3digo reutilizables) y las pruebas unitarias (para probar la interfaz del c\u00f3digo con distintos tipos de entrada).</p> <p>VS Code tambi\u00e9n contiene un terminal integrado que te permite abrir una l\u00ednea de comandos de Python con el s\u00edmbolo del sistema de Windows, PowerShell o cualquier otra herramienta que prefieras, y establece un flujo de trabajo sin interrupciones entre el editor de c\u00f3digo y la l\u00ednea de comandos.</p> <ol> <li>Para instalar VS Code, descarga VS Code para Windows: https://code.visualstudio.com.</li> <li>Una vez instalado VS Code, tambi\u00e9n debes instalar la extensi\u00f3n de Python. Para instalar la extensi\u00f3n de Python, puedes seleccionar el v\u00ednculo para VS Code de Marketplace o abrir VS Code y buscar Python en el men\u00fa de extensiones (Control + May\u00fas + X).</li> <li>Python es un lenguaje interpretado y, para ejecutar el c\u00f3digo de Python, debes indicar a VS Code el int\u00e9rprete que debe usar. Se recomienda usar la versi\u00f3n m\u00e1s reciente de Python, a menos que tenga una raz\u00f3n espec\u00edfica para elegir alguna diferente. Despu\u00e9s de instalar la extensi\u00f3n de Python, selecciona un int\u00e9rprete de Python 3. Para ello, abre la paleta de comandos (Control + May\u00fas + P) y empieza a escribir el comando Python: Select Interpreter para buscarlo y, luego, selecci\u00f3nalo. Tambi\u00e9n puedes usar la opci\u00f3n Select Python Environment (Seleccionar entorno de Python) en la barra de estado inferior si est\u00e1 disponible (es posible que ya se muestre un int\u00e9rprete seleccionado). El comando presenta una lista de los int\u00e9rpretes disponibles que VS Code puede buscar autom\u00e1ticamente, incluidos los entornos virtuales. Si no ves el int\u00e9rprete que quieres, consulta Configuraci\u00f3n de los entornos de Python.    </li> <li>Para abrir el terminal en VS Code, selecciona  Ver &gt; Terminal , o bien usa el acceso directo Control + ` (mediante el car\u00e1cter de tilde aguda). El terminal predeterminado es PowerShell.</li> <li>En el terminal de VS Code, simplemente escribe el comando <code>python</code> para abrir Python.</li> <li>Para probar el int\u00e9rprete de Python, escribe <code>print(\"Hello World\")</code>. Python devolver\u00e1 la instrucci\u00f3n \"Hola mundo\".    </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#4-instalar-git-opcional","title":"4. Instalar GIT (opcional)","text":"<p>Si planeas colaborar con otras personas en el c\u00f3digo de Python u hospedar el proyecto en un sitio de c\u00f3digo abierto (como GitHub), VS Code admite el control de versiones con GIT. La pesta\u00f1a Control de c\u00f3digo fuente de VS Code realiza un seguimiento de todos los cambios y tiene comandos GIT comunes (agregar, confirmar, enviar cambios e incorporar cambios) integrados directamente en la interfaz de usuario. Primero, debes instalar GIT para alimentar el panel de control de c\u00f3digo fuente.</p> <ol> <li>Descarga e instala GIT para Windows desde el sitio web git-scm.</li> <li>Se incluye un asistente para instalaci\u00f3n que te formular\u00e1 una serie de preguntas sobre la configuraci\u00f3n de la instalaci\u00f3n de GIT. Te recomendamos que uses todas las opciones de configuraci\u00f3n predeterminadas, a menos que tengas un motivo concreto para cambiar algo.</li> <li>Si nunca has trabajado con GIT, las gu\u00edas de GitHub pueden resultarte de ayuda para empezar.</li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#5-tutorial-de-hola-mundo-para-algunos-aspectos-basicos-de-python","title":"5. Tutorial de Hola mundo para algunos aspectos b\u00e1sicos de Python","text":"<p>Python, seg\u00fan su creador Guido van Rossum, es un \"lenguaje de programaci\u00f3n de alto nivel y su filosof\u00eda de dise\u00f1o b\u00e1sico trata sobre la legibilidad del c\u00f3digo y una sintaxis que permite a los programadores expresar conceptos en unas pocas l\u00edneas de c\u00f3digo\".</p> <p>Python es un lenguaje interpretado. A diferencia de los lenguajes compilados, en los que el c\u00f3digo que escribes debe traducirse en c\u00f3digo m\u00e1quina para que lo ejecute el procesador del equipo, el c\u00f3digo de Python se pasa a un int\u00e9rprete y se ejecuta directamente. Solo tienes que escribir el c\u00f3digo y ejecutarlo. Prob\u00e9moslo.</p> <ol> <li>Con la l\u00ednea de comandos de PowerShell abierta, escribe <code>python</code> para ejecutar el int\u00e9rprete de Python 3. (Algunas instrucciones prefieren usar el comando <code>py</code> o <code>python3</code> y tambi\u00e9n deber\u00edan funcionar). Sabr\u00e1 que se ha ejecutado correctamente porque se mostrar\u00e1 un aviso &gt;&gt;&gt; con tres s\u00edmbolos de \"mayor que\" .</li> <li>Hay varios m\u00e9todos integrados que permiten realizar modificaciones en las cadenas de Python. Crea una variable con <code>variable = 'Hello World!'</code>. Presiona Entrar para que se muestre una nueva l\u00ednea.</li> <li>Imprime la variable con <code>print(variable)</code>. Se mostrar\u00e1 el texto \"Hello World!\".</li> <li>Averigua la longitud (el n\u00famero de caracteres que se usan) de la variable de cadena con <code>len(variable)</code>. Se mostrar\u00e1 que se usan 12 caracteres. (Ten en cuenta que el espacio en blanco se cuenta como un car\u00e1cter en la longitud total).</li> <li>Convierte la variable de cadena en letras may\u00fasculas: <code>variable.upper()</code>. Convierte la variable de cadena en letras min\u00fasculas: <code>variable.lower()</code>.</li> <li>Cuenta el n\u00famero de veces que se usa la letra \"l\" en la variable de cadena: <code>variable.count(\"l\")</code>.</li> <li>Busca un car\u00e1cter espec\u00edfico en la variable de cadena. En este caso, buscaremos el signo de exclamaci\u00f3n con <code>variable.find(\"!\")</code>. Se mostrar\u00e1 que el signo de exclamaci\u00f3n se encuentra en el car\u00e1cter und\u00e9cimo de la cadena.</li> <li>Reemplaza el signo de exclamaci\u00f3n por un signo de interrogaci\u00f3n: <code>variable.replace(\"!\", \"?\")</code>.</li> <li>Para salir de Python, puedes escribir <code>exit()</code> o <code>quit()</code>, o seleccionar Control-Z.</li> </ol> <p></p> <p>Lo que acabas de ver, son algunos de los m\u00e9todos de modificaci\u00f3n de cadenas integrados de Python. Ahora intenta crear un archivo de programa de Python y ejecutarlo con VS Code.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#6-tutorial-hola-mundo-para-usar-python-con-vs-code","title":"6. Tutorial Hola mundo para usar Python con VS Code","text":"<p>El equipo de VS Code ha elaborado el excelente tutorial Introducci\u00f3n a Python en el que se explica c\u00f3mo crear un programa Hola mundo con Python, ejecutar el archivo de programa, configurar y ejecutar el depurador e instalar paquetes como matplotlib y NumPy para crear un trazado gr\u00e1fico dentro de un entorno virtual.</p> <ol> <li>Abre PowerShell y crea una carpeta vac\u00eda denominada \"hello\", navega a esta carpeta y \u00e1brela en VS Code:    **Consola**Copiar</li> </ol> <p><pre><code>mkdir hello\ncd hello\ncode .\n</code></pre> 2. Una vez que se abra VS Code y se muestre la nueva carpeta Hello en la ventana Explorador del lado izquierdo, abra una ventana de l\u00ednea de comandos en el panel inferior de VS Code. Para ello, presione Control + ` (mediante el car\u00e1cter de tilde aguda) o seleccione  Ver &gt; Terminal . Al iniciar VS Code en una carpeta, esa carpeta se convierte en tu \"\u00e1rea de trabajo\". VS Code almacena la configuraci\u00f3n espec\u00edfica de esa \u00e1rea de trabajo en. vscode/settings.json, que es independiente de la configuraci\u00f3n de usuario que se almacena globalmente. 3. Contin\u00faa con el tutorial en la documentaci\u00f3n de VS Code: Creaci\u00f3n de un archivo de c\u00f3digo fuente de Hola mundo de Python.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#fuente","title":"Fuente","text":"<ul> <li>Introducci\u00f3n a Python</li> <li>Introducci\u00f3n para principiantes</li> </ul>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica002/","title":"* Pr\u00e1ctica 1.2: Primeros programas","text":""},{"location":"section1/u01/practica/PROG-U1.-Practica002/#p12-ejercicios","title":"P1.2 - Ejercicios","text":""},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-121","title":"Ejercicio 1.2.1","text":"<p>Escribe un programa que pida el nombre del usuario para luego darle la bienvenida.</p> <pre><code>Escribe tu nombre: Juan\nHola, Juan.\n</code></pre>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-122","title":"Ejercicio 1.2.2","text":"<p>Escribe un programa para pedirle al usuario las horas de trabajo y el precio por hora y calcule el importe total del servicio.</p> <pre><code>Horas de trabajo: 6\nCoste por hora: 10\nImporte total: 60\n</code></pre>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-123","title":"Ejercicio 1.2.3","text":"<p>Suponiendo que se han ejecutado las siguientes sentencias de asignaci\u00f3n:</p> <pre><code>ancho = 17\nalto = 12.0\n</code></pre> <p>Para cada una de las expresiones siguientes, intenta adivinar el valor de la expresi\u00f3n y su tipo sin ejecutarlas en  el int\u00e9rprete:</p> <p><pre><code>1. ancho / 2\n2. ancho // 2\n3. alto / 3\n4. 1 + 2 * 5\n</code></pre> Cuando termines comprueba con el int\u00e9rprete si has acertado.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-124","title":"Ejercicio 1.2.4","text":"<p>Escribe un programa que le pida al usuario una temperatura en grados Celsius, la convierta a grados Fahrenheit e imprima por pantalla la temperatura convertida.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-125","title":"Ejercicio 1.2.5","text":"<p>Escribe un programa que pida el importe sin IVA de un art\u00edculo y el tipo de IVA a aplicar y calcule e imprima por pantalla el precio final del art\u00edculo.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-126","title":"Ejercicio 1.2.6","text":"<p>Escribe un programa que pida el importe final de un art\u00edculo y calcule e imprima por pantalla el IVA que se ha pagado y el importe sin IVA (suponiendo que se ha aplicado un tipo de IVA del 10%).</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-127","title":"Ejercicio 1.2.7","text":"<p>Escribe un programa que solicite tres n\u00fameros al usuario y calcule e imprima por pantalla su suma.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-128","title":"Ejercicio 1.2.8","text":"<p>Escribir el programa del ejercicio 1.7 usando solamente dos variables diferentes.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-129","title":"Ejercicio 1.2.9","text":"<p>\u00bfEs posible escribir el programa del ejercicio 1.7 sin usar variables? Int\u00e9ntalo.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1210","title":"Ejercicio 1.2.10","text":"<p>Escribir un programa que muestre por pantalla el resultado de la siguiente operaci\u00f3n aritm\u00e9tica</p> <p></p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1211","title":"Ejercicio 1.2.11","text":"<p>Escribir un programa que lea un entero positivo, n, introducido por el usuario y despu\u00e9s muestre en pantalla la suma de todos los enteros desde 1 hasta n. La suma de los n primeros enteros positivos puede ser calculada de la siguiente forma:</p> <p></p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1212","title":"Ejercicio 1.2.12","text":"<p>Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el \u00edndice de masa corporal y lo almacene en una variable, y muestre por pantalla la frase Tu \u00edndice de masa corporal es  donde  es el \u00edndice de masa corporal calculado redondeado con dos decimales."},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1213","title":"Ejercicio 1.2.13","text":"<p>Escribir un programa que pida al usuario dos n\u00fameros enteros y muestre por pantalla los siguienteS: \"la divisi\u00f3n de <code>n</code> entre <code>m</code> da un cociente <code>c</code> y un resto <code>r</code>\", donde <code>n</code> y <code>m</code> son los n\u00fameros introducidos por el usuario, y <code>c</code> y <code>r</code> son el cociente y el resto de la divisi\u00f3n entera respectivamente.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1214","title":"Ejercicio 1.2.14","text":"<p>Una jugueter\u00eda tiene mucho \u00e9xito en dos de sus productos: payasos y mu\u00f1ecas. Suele hacer venta por correo y la empresa de log\u00edstica les cobra por peso de cada paquete as\u00ed que deben calcular el peso de los payasos y mu\u00f1ecas que saldr\u00e1n en cada paquete a demanda. Cada payaso pesa 112 g y cada mu\u00f1eca 75 g. Escribir un programa que lea el n\u00famero de payasos y mu\u00f1ecas vendidos en el \u00faltimo pedido y calcule el peso total del paquete que ser\u00e1 enviado.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1215","title":"Ejercicio 1.2.15","text":"<p>Imagina que acabas de abrir una nueva cuenta de ahorros que te ofrece el 4% de inter\u00e9s al a\u00f1o. Estos ahorros debido a intereses, que no se cobran hasta finales de a\u00f1o, se te a\u00f1aden al balance final de tu cuenta de ahorros. Escribir un programa que comience leyendo la cantidad de dinero depositada en la cuenta de ahorros, introducida por el usuario. Despu\u00e9s el programa debe calcular y mostrar por pantalla la cantidad de ahorros tras el primer, segundo y tercer a\u00f1os. Redondear cada cantidad a dos decimales.</p> <p><code>Calcula el inter\u00e9s: capital * (1 + interes)</code></p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1216","title":"Ejercicio 1.2.16","text":"<p>Una panader\u00eda vende barras de pan a 3.49\u20ac cada una. El pan que no es el d\u00eda tiene un descuento del 60%. Escribir un programa que comience leyendo el n\u00famero de barras vendidas que no son del d\u00eda. Despu\u00e9s el programa debe mostrar el precio habitual de una barra de pan (establecido en el programa como una constante), el descuento que se le hace por no ser fresca y el coste final total de todas las barras no frescas.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1217","title":"Ejercicio 1.2.17","text":"<p>Escribir un programa que pregunte el nombre del usuario en la consola y un n\u00famero entero e imprima por pantalla en l\u00edneas distintas el nombre del usuario tantas veces como el n\u00famero introducido.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1218","title":"Ejercicio 1.2.18","text":"<p>Escribir un programa que pregunte el nombre completo del usuario en la consola y despu\u00e9s muestre por pantalla el nombre completo del usuario tres veces, una con todas las letras min\u00fasculas, otra con todas las letras may\u00fasculas y otra solo con la primera letra del nombre y de los apellidos en may\u00fascula. El usuario puede introducir su nombre combinando may\u00fasculas y min\u00fasculas como quiera.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1219","title":"Ejercicio 1.2.19","text":"<p>Escribir un programa que pregunte el nombre del usuario en la consola y despu\u00e9s de que el usuario lo introduzca muestre por pantalla \"<code>NOMBRE</code> tiene <code>n</code> letras.\", donde <code>NOMBRE</code> es el nombre de usuario en may\u00fasculas y <code>n</code> es el n\u00famero de letras que tienen el nombre.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1220","title":"Ejercicio 1.2.20","text":"<p>Los tel\u00e9fonos de una empresa tienen el siguiente formato prefijo-n\u00famero-extension donde el prefijo es el c\u00f3digo del pa\u00eds +34, y la extensi\u00f3n tiene dos d\u00edgitos (por ejemplo +34-913724710-56). Escribir un programa que pregunte por un n\u00famero de tel\u00e9fono con este formato y muestre por pantalla el n\u00famero de tel\u00e9fono sin el prefijo y la extensi\u00f3n.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1221","title":"Ejercicio 1.2.21","text":"<p>Escribir un programa que pida al usuario que introduzca una frase en la consola y muestre por pantalla la frase invertida.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1222","title":"Ejercicio 1.2.22","text":"<p>Escribir un programa que pida al usuario que introduzca una frase en la consola y una vocal, y despu\u00e9s muestre por pantalla la misma frase pero con la vocal introducida en may\u00fascula.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1223","title":"Ejercicio 1.2.23","text":"<p>Escribir un programa que pregunte el correo electr\u00f3nico del usuario en la consola y muestre por pantalla otro correo electr\u00f3nico con el mismo nombre (la parte delante de la arroba @) pero con dominio ceu.es.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1224","title":"Ejercicio 1.2.24","text":"<p>Escribir un programa que pregunte por consola el precio de un producto en euros con dos decimales y muestre por pantalla el n\u00famero de euros y el n\u00famero de c\u00e9ntimos del precio introducido.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1225","title":"Ejercicio 1.2.25","text":"<p>Escribir un programa que pregunte al usuario la fecha de su nacimiento en formato dd/mm/aaaa y muestra por pantalla, el d\u00eda, el mes y el a\u00f1o. Adaptar el programa anterior para que tambi\u00e9n funcione cuando el d\u00eda o el mes se introduzcan con un solo car\u00e1cter.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1226","title":"Ejercicio 1.2.26","text":"<p>Escribir un programa que pregunte por consola por los productos de una cesta de la compra, separados por comas, y muestre por pantalla cada uno de los productos en una l\u00ednea distinta.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1227","title":"Ejercicio 1.2.27","text":"<p>Escribir un programa que pregunte el nombre el un producto, su precio y un n\u00famero de unidades y muestre por pantalla una cadena con el nombre del producto seguido de su precio unitario con 6 d\u00edgitos enteros y 2 decimales, el n\u00famero de unidades con tres d\u00edgitos y el coste total con 8 d\u00edgitos enteros y 2 decimales.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1228","title":"Ejercicio 1.2.28","text":"<p>Calcular el \u00e1rea de un tri\u00e1ngulo a partir de tres lados</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1229","title":"Ejercicio 1.2.29","text":"<p>C\u00e1lculo de un n\u00famero aleatorio entre dos valores</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1230","title":"Ejercicio 1.2.30","text":"<p>Escribir un programa que determine si un n\u00famero es primo</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1231","title":"Ejercicio 1.2.31","text":"<p>Mostrar todos los divisores de un n\u00famero</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-1232","title":"Ejercicio 1.2.32","text":"<p>Calcular la serie de Fibonacci hasta un n\u00famero dado</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica003/","title":"UD 1 - P3: Uso b\u00e1sico de Git","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica003/#p13-introduccion-y-comandos-basicos-para-trabajar-con-el-control-de-versiones-git","title":"P1.3 - Introducci\u00f3n y comandos b\u00e1sicos para trabajar con el control de versiones Git","text":"<p>A continuaci\u00f3n, ofrecemos una gu\u00eda paso a paso para aquellos usuarios principiantes interesados en trabajar con un repositorio de Git en local.</p> <p>El sistema de control de versiones Git es una herramienta fundamental para muchos desarrolladores, especialmente cuando colaboran en un proyecto. Git ayuda a mantener una visi\u00f3n de conjunto, a preservar las versiones antiguas y a integrar los cambios de manera coherente. Para ello, Git agrupa una serie de programas de l\u00ednea de comandos y crea un efectivo entorno de trabajo.</p> <p>Es la mejor forma de trabajar para un desarrollador. De esta manera vais a tener siempre vuestro c\u00f3digo a salvo en la nube. Pod\u00e9is clonar el proyecto y trabajar en cualquier ordenador.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica003/#1-instalar-git","title":"1. Instalar Git","text":"<p>La forma m\u00e1s oficial est\u00e1 disponible para ser descargada en el sitio web de Git. Solo tienes que visitar Download, seleccionar tu sistema operativo y la descarga empezar\u00e1 autom\u00e1ticamente.</p> <p>Una vez que hayamos instalado Git en nuestro ordenador, abriremos la aplicaci\u00f3n \"Git Bash\", o desde linux, podremos abrir una terminal y ejecutar el comando <code>git</code> para interactur con git.</p> <p>En windows, Git Bash es la herramienta de l\u00ednea de comandos que permite a los usuarios de Windows utilizar las funciones de Git. Git Bash es Git en una \u201cBourne Again Shell\u201d. La aplicaci\u00f3n contiene numerosas utilidades de Unix. Git Bash os permitir\u00e1 usar herramientas MinGW/Linux Bash con Git en la l\u00ednea de comandos. Todas esas cosas bonitas que se hacen en Linux tambi\u00e9n las podemos hacer en Windows a trav\u00e9s de Git Bash.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica003/#2-configurar-git-y-crear-nuestro-primer-proyecto","title":"2. Configurar Git y crear nuestro primer proyecto","text":"<ol> <li> <p>Primero tenemos que definir nuestra identidad, para ello en la l\u00ednea de comandos escribiremos las siguientes instrucciones utilizando nuestro usuario iPasen y <code>xxxxx@g.educaand.es</code>. Mas adelante podremos utilizar el correo <code>xxxxx@iesrafaelalberti.es</code>:</p> <pre><code>&gt; git config --global user.name \"dcansib483\"\n&gt; git config --global user.email \"dcansib483@g.educaand.es\"\n</code></pre> </li> <li> <p>Algunos comandos b\u00e1sicos para navegar y trabajar con ficheros y carpetas:</p> <ul> <li><code>clear</code>: limpia la pantalla de la consola.  </li> <li><code>pwd</code>: muestra el directorio actual.  </li> <li><code>ls</code>: lista los ficheros y directorios (par\u00e1metros <code>-l</code>: muestra la lista detallada y <code>-a</code>: muestra archivos ocultos).  </li> <li><code>cd</code>: para movernos entre directorios (por ejemplo <code>cd nombreDir</code>. Con <code>cd ..</code> voy al directorio anterior al actual).  </li> <li><code>mkdir</code>: para crear un directorio (por ejemplo <code>mkdir nombreDir</code>).  </li> <li><code>rmdir</code>: para borrar un directorio (por ejemplo <code>rmdir nombreDir</code>).</li> <li><code>cat</code>: para volcar el contenido de un archivo (por ejemplo <code>cat nombreFile</code>).</li> <li><code>touch</code>: para crear un archivo (por ejemplo <code>touch nombreFile</code>).</li> <li>Podemos pulsar las flechas arriba y abajo para movernos por los comandos ejecutados previamente.  </li> <li>Podemos autocompletar el nombre de los directorios o ficheros.  </li> </ul> </li> <li> <p>El fichero de Git d\u00f3nde se almacena la informaci\u00f3n de nuestra identidad est\u00e1 en un archivo oculto en nuestro <code>HOMEPATH</code> llamado <code>.gitconfig</code>, intenta encontrarlo y visualizar su contenido con el comando <code>cat</code>.</p> </li> <li> <p>Accedemos a la carpeta <code>Documents</code> y creamos el directorio <code>ProgPython</code>:</p> <pre><code>&gt; cd Documents\n&gt; mkdir ProgPython\n</code></pre> </li> <li> <p>En esta carpeta vamos a crear nuestro proyecto de Git. Inicializamos Git en este directorio para indicarle que esta carpeta es nuestra \u00e1rea de trabajo:</p> <pre><code>&gt; cd ProgPython  \n&gt; git init\n</code></pre> </li> <li> <p>Nos creamos un primer programa en Python y lo ejecutamos (todo desde la l\u00ednea de comandos por ahora):</p> <pre><code>&gt; touch holamundo.py\n</code></pre> </li> <li> <p>Podemos crearnos el programa y editarlo de manera gr\u00e1fica en el Explorador de Windows, pero esta vez vamos a usar un editor de consola para escribir el contenido de nuestro programa. Despu\u00e9s mostraremos su contenido en la terminal con el comando cat y mediante el int\u00e9rprete de Python lo ejecutaremos:</p> <pre><code>&gt; nano holamundo.py\n</code></pre> <ul> <li>Dentro del fichero escribimos <code>print(\"Hola mundo DAM-DAW!\")</code> </li> <li>Guardamos y salimos (leer las opciones en la barra inferior) </li> <li>Para comprobar el contenido del fichero utilizamos el comando siguiente:  </li> </ul> <pre><code>&gt; cat holamundo.py\n</code></pre> <ul> <li>Vamos a ejecutar el programa realizado en Python:</li> </ul> <pre><code>&gt; python holamundo.py\n</code></pre> </li> <li> <p>Ahora vamos a mirar el estado de nuestra \u00e1rea de trabajo... a ver que nos dice Git:</p> <pre><code>&gt; git status\n</code></pre> <p>\u00bfQu\u00e9 va a pasar si vamos al directorio justo anterior y volvemos a ejecutar el mismo comando?</p> </li> <li> <p>Volvemos a la carpeta de nuestro proyecto de Git... y volvemos ver el estado de nuestro proyecto... vemos que nos est\u00e1 indicando que existe un fichero nuevo sin a\u00f1adir a nuestra \u00e1rea de preparaci\u00f3n. La a\u00f1adimos:</p> <pre><code>&gt; git add holamundo.py\n</code></pre> </li> <li> <p>C\u00f3mo es un programa muy peque\u00f1o y ya lo hemos terminado, vamos a confirmar que es un buen punto de partida para hacer un commit, es decir, lo pasamos a nuestro repositorio o \u00e1rea de producci\u00f3n:</p> <pre><code>&gt; git commit -m \"Primera versi\u00f3n de hola mundo\"\n</code></pre> <p>Si volvemos a ejecutar el estado del proyecto de Git veremos que no tenemos ning\u00fan cambio pendiente... est\u00e1 todo en el repositorio.</p> </li> <li> <p>Vamos a crear otro programa, pero esta vez desde un IDE (Entorno de desarrollo integrado: Pycharm o Visual Code)</p> <p>Primero creamos un directorio que se llame <code>ejercicios1</code> y despu\u00e9s un fichero que se llame <code>prueba1.py</code> que contenga el siguiente c\u00f3digo:</p> <pre><code>edad = int(input(\"Introduzca su edad: \"))  \nif edad &gt;= 18:  \n    print(\"Toma una cerveza!\")  \nelse:  \n    print(f\"Toma un zumo de pi\u00f1a, con {edad} a\u00f1os eres menor.\")\n</code></pre> <p>Esta vez lo vamos a abrir con el IDE, dici\u00e9ndole que nos cree un proyecto en la carpeta <code>ProgPython</code>... podemos crear el directorio y el programa vac\u00edo con los comandos de consola (<code>mkdir</code> y <code>touch</code>) y despu\u00e9s abrir el fichero con el IDE (En windows: bot\u00f3n derecho desde el Explorador de archivos)</p> <p>A continuaci\u00f3n, lo vamos a ejecutar dentro de el IDE para ver c\u00f3mo funciona el programa...</p> </li> <li> <p>Esto nos ha generado en la carpeta del proyecto el directorio: <code>ejercicios1</code> y puede ser que otros directorios propios del IDE, como por ejemplo <code>.idea</code> (usado por el IDE Pycharm para la gesti\u00f3n del proyecto ). Si comprobamos el estado del proyecto (<code>git status</code>) nos muestra el directorio <code>.idea</code> para que lo a\u00f1adamos tambi\u00e9n. Si no queremos subir a nuestro repositorio esta carpeta, podemos indicarle a Git que la ignore. Para ello, vamos a crearnos, en la carpeta del proyecto de Git, el fichero <code>.gitignore</code> que contendr\u00e1 los archivos y carpetas que deseamos que Git ignore al comprobar el estado de los archivos del proyecto. En nuestro caso, solo tendr\u00e1 una l\u00ednea (podemos hacerlo con el editor <code>nano</code>):</p> <pre><code>&gt; nano .gitignore\n</code></pre> <p>Al que a\u00f1adiremos la linea siguiente:</p> <pre><code>.idea\n</code></pre> <p>A continuaci\u00f3n debemos a\u00f1adir al repositorio el fichero <code>.gitignore</code> y la carpeta <code>ejercicios1</code>:</p> <pre><code>&gt; git add .gitignore\n&gt; git add ejercicios\n&gt; git commit -m \"Primera versi\u00f3n de la carpeta ejercicios1\"\n</code></pre> </li> <li> <p>Ahora mismo tenemos todo actualizado en nuestro repositorio... para ver todos los commits que hemos realizado (observad el c\u00f3digo HASH que tiene cada commit):</p> <pre><code>&gt; git log\n</code></pre> </li> <li> <p>Podemos hacer ahora una modificaci\u00f3n al programa <code>prueba1.py</code></p> <pre><code>edad = input(\"Introduzca su edad: \")  \nif edad &gt;= 18:  \n    print(\"Toma una cerveza!\")  \nelse:  \n    print(f\"Toma un zumo de pi\u00f1a, con {edad} a\u00f1os eres menor.\")\n</code></pre> <p>Si volvemos a comprobar el estado del proyeto de Git nos dir\u00e1 que hay un fichero modificado... vamos a a\u00f1adirlo y hacer commit.</p> <pre><code>&gt; git add ejercicios1\n&gt; git commit -m \"Segunda versi\u00f3n con un error\"\n&gt; git log\n</code></pre> <p>Si ejecutamos el programa desde el IDE PyCharm observamos que nos da un gran error... nos hemos equivocado y est\u00e1 en el repositorio final :-(</p> <p>\u00bfQu\u00e9 hacemos ahora?</p> </li> <li> <p>No pasa nada, para eso tenemos un control de versiones... primero hacemos <code>git log</code>, copiamos el n\u00famero que est\u00e1 a la derecha del commit de la versi\u00f3n a la que queremos volver y lo pegamos detr\u00e1s del siguiente comando:</p> <pre><code>&gt; git log --oneline\n&gt; git reset --hard &lt;commit_hash&gt;\n</code></pre> </li> <li> <p>Si volvemos al IDE, observamos que volvemos a tener la primera versi\u00f3n de nuestro programa que funciona perfectamente. Observad tambi\u00e9n con el comando <code>git log</code> que ya no aparece la segunda versi\u00f3n, pues el comando <code>git checkout</code> la ha eliminado del control de versiones para ir a una versi\u00f3n anterior (esto no se puede deshacer).</p> </li> <li> <p>Otros comandos que nos pueden ayudar:</p> <ul> <li>Para a\u00f1adir TODOS los ficheros de un directorio =&gt; <code>git add .</code> </li> <li>Para a\u00f1adir TODOS los cambios pendientes de una sola vez =&gt; <code>git add -A</code> </li> <li>Para deshacer un <code>git add</code> antes de hacer un <code>git commit</code> =&gt; <code>git reset nombreArchivo</code> o <code>git reset</code> para deshacer todos los cambios. Tambi\u00e9n podemos usar <code>git checkout .</code>.</li> <li>Para cambiar el HEAD al commit especificado, pero sin afectar la rama: <code>git checkout &lt;commit_hash&gt;</code></li> <li>Para mover la rama y borrar todos los cambios posteriores a ese commit: <code>git reset --hard &lt;commit_hash&gt;</code></li> <li>Para mover la rama pero mantener los cambios locales en staging: <code>git reset --soft &lt;commit_hash&gt;</code></li> <li>Para cambiar el nombre de la rama master por main, es decir, renombrar la rama =&gt; <code>git branch -m main</code></li> </ul> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica003/#como-vamos-a-trabajar-con-git-proyecto","title":"\u00bfC\u00f3mo vamos a trabajar con Git (Proyecto)?","text":"<p>De manera muy b\u00e1sica, en un proyecto de Git vamos a trabajar con 3 secciones o \u00e1reas principales:   </p> <ul> <li>\u00c1rea de trabajo (creamos carpetas y ficheros, modificamos el contenido de los ficheros y ejecutamos el comando <code>add</code> para agregarlos al \u00e1rea de preparaci\u00f3n del proyecto)</li> <li>\u00c1rea de preparaci\u00f3n (staging area)</li> <li>Repositorio (commit)</li> </ul> <p></p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica003/#otros-enlaces","title":"Otros enlaces","text":"<ul> <li>Ayuda visual</li> <li>Guia r\u00e1pida</li> <li>Documentaci\u00f3n de referencia de git</li> <li>Libro de Git</li> </ul>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica004/","title":"UD 1 - P4: Ramas y GitHub","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica004/#p14-gestion-de-ramas-con-git-y-enlazar-a-github","title":"P1.4 - Gesti\u00f3n de ramas con Git y enlazar a GitHub","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica004/#1-trabajar-con-ramas","title":"1. Trabajar con ramas","text":"<p>Antes de nada, veamos qu\u00e9 es una rama y los procedimientos b\u00e1sicos para ramificar y fusionar</p> <p></p> <p>Vamos a comenzar la pr\u00e1ctica donde lo dejamos en la pr\u00e1ctica anterior, P3.</p> <ol> <li> <p>Abrimos Git Bash o una terminal y nos movemos a la carpeta de nuestro proyecto. Ahora vamos a ejecutar un comando para crear una rama nueva y tambi\u00e9n nos va a situar en ella:</p> <pre><code>&gt; git checkout -b desEjercicios1\n</code></pre> <p>Ya estamos en otra rama de desarrollo, no en main (la rama principal). En esta nueva rama vamos a tener todos los ficheros de la rama main tal y c\u00f3mo est\u00e1n en este mismo momento (c\u00f3mo si hubi\u00e9ramos sacado una foto exacta).</p> </li> <li> <p>A continuaci\u00f3n, creamos un directorio con el nombre <code>ejercicios1</code>, y dentro de esta nueva carpeta, creamos un programa que se llame <code>prueba2.py</code> que solicite dos n\u00fameros, los sume y muestre el resultado:</p> <pre><code>num1 = int(input(\"Dame un n\u00famero: \"))  \nnum2 = int(input(\"Dame otro: \"))  \nprint(\"La suma \" + str(num1) + \" + \" + str(num2) + \" es igual a \" + str(num1 + num2))  \nprint(f\"{num1} + {num2} = {num1+num2}\")  \n</code></pre> </li> <li> <p>A\u00f1adimos el fichero al \u00e1rea de preparaci\u00f3n:</p> <pre><code>&gt; git add .\n</code></pre> </li> <li> <p>Observad que los IDEs, tienen integrado Git y pod\u00e9is hacerlo tambi\u00e9n desde el mismo IDE, ya que ha detectado que el proyecto est\u00e1 gestionado por Git (En PyCharm, haciendo clic con el bot\u00f3n derecho del rat\u00f3n encima del fichero aparecen las opciones de Git)</p> </li> <li> <p>Despu\u00e9s hacemos Commit para pasarlo al repositorio:</p> <pre><code>&gt; git commit -m \"Creado el programa prueba2\"\n</code></pre> </li> <li> <p>Si nos cambiamos de nuevo a la rama <code>main</code>, podemos observar c\u00f3mo desaparece el fichero <code>prueba2.py</code>:</p> <pre><code>&gt; git checkout master\n&gt; ls -l\n&gt; ls ejercicios1\n&gt; git status\n</code></pre> </li> <li> <p>Si cambiamos a la rama <code>desEjercicios1</code> volver\u00e1 a aparecer <code>prueba2.py</code>:</p> <pre><code>&gt; git checkout desEjercicios1\n&gt; ls ejercicios1\n&gt; git status\n</code></pre> </li> <li> <p>Si ya hemos acabado el trabajo en nuestra rama y queremos actualizar todas las modificaciones a la rama principal, debemos FUSIONAR los cambios de la rama <code>desEjercicios1</code> con la rama <code>main</code>:</p> <pre><code>&gt; git checkout master\n&gt; git merge desEjercicios1\n</code></pre> </li> <li> <p>Si hay conflictos y falla,  hacemos lo siguiente para arreglarlo:</p> <p>La forma m\u00e1s directa de resolver un conflicto de fusi\u00f3n es editar el archivo conflictivo. Abre el archivo que tiene el conflicto en el editor o el IDE. Vamos a eliminar todas las l\u00edneas divisorias de conflictos, como estas: <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; master\n=======\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; desEjercicios1\n</code></pre> y arreglar el archivo hasta que quede como se desea. Cuando hayas editado el archivo, utiliza <code>git add archivoEditado.txt</code> para preparar el nuevo contenido fusionado. Para finalizar la fusi\u00f3n, crea una nueva confirmaci\u00f3n ejecutando lo siguiente:</p> <pre><code>&gt; git commit -m \"merged and resolved the conflict in archivoEditado.txt\"\n</code></pre> <p>Git ver\u00e1 que se ha resuelto el conflicto y crea una nueva confirmaci\u00f3n de fusi\u00f3n para finalizar la fusi\u00f3n.</p> </li> <li> <p>Para ver las ramas que tengo:</p> <pre><code>&gt; git branch\n</code></pre> </li> <li> <p>Si estando en la rama <code>main</code> creo un fichero nuevo o una modificaci\u00f3n, pero me olvido de a\u00f1adirlo con <code>add</code> y hacer <code>commit</code>, y cambio de rama... pues me estoy llevando todo los cambios a la rama a la que nos hemos cambiado por no haber hecho <code>commit</code>.</p> </li> <li> <p>Para eliminar una rama:</p> <pre><code>&gt; git branch -d nombreRama\n</code></pre> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica004/#2-trabajar-con-stash","title":"2. Trabajar con <code>stash</code>","text":"<p>Se trata de un comando que \u201ccongela\u201d el estado en el que se encuentra el proyecto en un momento determinado, con todos los cambios que tenemos a \"sin comitear\", y lo guarda en una pila provisional brindando la posibilidad de poder recuperarlo m\u00e1s adelante.</p> <ol> <li> <p>Por ejemplo, si tengo cambios y no quiero hacer Commit en ese momento porque mis cambios a\u00fan no son definitivos, podemos dejarlo en un \u00e1rea temporal:</p> <pre><code>&gt; git stash\n</code></pre> </li> <li> <p>A partir de ese momento podr\u00e9 cambiar de rama ya sin problemas y al volver de nuevo a mi rama para seguir trabajando en los cambios revierto el stash:</p> <pre><code>&gt; git stash pop\n</code></pre> </li> <li> <p>Tambi\u00e9n puedo hacer los <code>stash</code> que queramos con:</p> <pre><code>&gt; git stash save \"Primer stash\"\n</code></pre> </li> <li> <p>Para ver los stash que tengo:</p> <pre><code>&gt; git stash list\n</code></pre> </li> <li> <p>Para recuperar uno en concreto de la lista:</p> <pre><code>&gt; git stash pop stash@{2}\n</code></pre> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica004/#3-gestion-del-proyecto-enlazado-con-github","title":"3. Gesti\u00f3n del proyecto enlazado con Github","text":"<p>GitHub es una plataforma de desarrollo colaborativo que utiliza el sistema de control de versiones Git. Git gestiona repositorios locales en tu ordenador, permitiendo el seguimiento de cambios en tu c\u00f3digo. GitHub extiende esta funcionalidad al proporcionar repositorios remotos alojados en la nube, lo que facilita la colaboraci\u00f3n entre equipos dispersos geogr\u00e1ficamente. Permite a los desarrolladores subir sus cambios a un repositorio en l\u00ednea y fusionarlos con el trabajo de otros. Adem\u00e1s, GitHub ofrece herramientas como seguimiento de problemas, ramificaciones y solicitudes de extracci\u00f3n para facilitar la colaboraci\u00f3n y la gesti\u00f3n de proyectos.   </p> <p>Ojo, parar conectar git y github, tendreis que tener una clave publica. Aqui se explica como.</p> <ol> <li> <p>Lo primero que debemos hacer es ir a la p\u00e1gina web de GitHub y registrarnos con nuestro correo corporativo de <code>xxxxxxx@g.educaand.es</code></p> <p>GitHub - Creaci\u00f3n y configuraci\u00f3n de la cuenta</p> </li> <li> <p>Despu\u00e9s crearemos un repositorio en GitHub (para m\u00e1s informaci\u00f3n pod\u00e9is acceder a la documentaci\u00f3n de GitHub, Creaci\u00f3n de un repositorio). El nombre del repositorio puede ser el siguiente, dependiendo del curso d\u00f3nde est\u00e9s:</p> <ul> <li>DAM1_ProgPhyton</li> <li>DAW1A_ProgPython</li> <li>DAW1B_ProgPython</li> </ul> </li> <li> <p>Ahora ya tenemos nuestro proyecto gestionado por Git en local y un repositorio en la nube. Para enlazarlos y as\u00ed estar tranquilos que nuestros ficheros nunca se van a perder seguiremos las instrucciones que nos proporciona GitHub al crearnos el nuevo repositorio para conectarlo con mi repo local... por ejemplo, si lo hubi\u00e9ramos llamado <code>PruebasProgPython</code> y mi usuario de GitHub fuera <code>dcansib438</code>, nos generar\u00eda un comando similar al siguiente (lo copiamos y pegamos en Git Bash o la terminal):</p> <pre><code>&gt; git remote add origin https://github.com/dcansib438/PruebasProgPhyton.git\n</code></pre> </li> <li> <p>Para subir cambios a Github:</p> <pre><code>&gt; git push origin master\n</code></pre> </li> <li> <p>Para descargar los cambios que se hayan realizado en Github, realizados desde otro ordenador u otro desarrollador distinto:</p> <pre><code>&gt; git pull origin master\n</code></pre> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica004/#otros-enlaces","title":"Otros enlaces","text":"<ul> <li>GitHub</li> <li>Creaci\u00f3n de un repositorio en github)</li> <li>Chuleta de comandos git</li> <li>Ayuda visual</li> <li>Guia r\u00e1pida</li> <li>Documentaci\u00f3n de referencia de git</li> <li>Libro de Git</li> </ul>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/","title":"UD 1 - P5: Virtualenv con Pytest","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#p15-creacion-de-un-entorno-virtual-con-pytest","title":"P1.5 - Creaci\u00f3n de un entorno virtual con Pytest","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Los <code>entornos virtuales</code> se pueden describir como directorios de instalaci\u00f3n aislados. Este aislamiento te permite localizar la instalaci\u00f3n de las dependencias de tu proyecto, sin obligarte a instalarlas en todo el sistema.</p> <p>Se trata de un entorno Python en el que el int\u00e9rprete Python, las bibliotecas y los scripts instalados en \u00e9l est\u00e1n aislados de los instalados en otros entornos virtuales, y (por defecto) cualquier biblioteca instalada en un \u00absistema\u00bb Python, es decir, uno que est\u00e9 instalado como parte de tu sistema operativo.</p> <p><code>Virtualenv</code> es una herramienta que se utiliza para crear entornos Python aislados. Crea una carpeta que contiene todos los ejecutables necesarios para usar los paquetes que necesitar\u00eda un proyecto de Python.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#2-pasos-a-seguir-en-la-practica","title":"2. Pasos a seguir en la pr\u00e1ctica","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#21-antes-de-nada-debemos-abrir-una-carpeta-en-visual-studio-code-donde-vamos-a-trabajar-con-nuestros-programas-de-python-por-ejemplo-en-documentospractica5","title":"2.1. Antes de nada, debemos abrir una carpeta en Visual Studio Code, donde vamos a trabajar con nuestros programas de Python. (por ejemplo en ~/Documentos/practica5)","text":"<p>Podemos hacerlo de varias formas:</p> <ul> <li> <p>Desde una terminal de tu sistema operativo, navegando donde queramos crear el directorio y usando el comando <code>mkdir nombreCarpeta</code>. Posteriormente accederemos a la nueva carpeta (<code>cd</code>) creada y ejecutaremos el comando <code>code .</code>.</p> </li> <li> <p>A nivel gr\u00e1fico, desde el <code>Explorador de archivos</code>, creando una carpeta y arrastr\u00e1ndola dentro de <code>Visual Studio Code</code>.</p> </li> <li> <p>Tambi\u00e9n podemos hacerlo desde <code>Visual Studio Code</code>, en el men\u00fa <code>File -&gt; Open Folder</code>, navegaremos a la carpeta o la crearemos, despu\u00e9s simplemente pulsamos en el bot\u00f3n <code>Seleccionar carpeta</code>.</p> </li> </ul>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#22-a-continuacion-abrimos-la-consola-dentro-del-ide","title":"2.2. A continuaci\u00f3n abrimos la consola dentro del IDE:","text":"<p>Teclas r\u00e1pidas <code>Ctrl+\u00f1</code> o desde el men\u00fa <code>View -&gt; Terminal</code></p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#23-instalamos-virtualenv-con-el-siguiente-comando","title":"2.3. Instalamos virtualenv con el siguiente comando:","text":"<pre><code>pip install virtualenv\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#24-para-comprobar-su-version","title":"2.4. Para comprobar su versi\u00f3n:","text":"<pre><code>virtualenv --version\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#25-creamos-ahora-un-entorno-virtual","title":"2.5. Creamos ahora un entorno virtual:","text":"<pre><code>python -m virtualenv venv\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#26-el-entorno-virtual-crea-fisicamente-una-carpeta-llamada-venv-donde-gestionara-todas-las-librerias-que-instalemos","title":"2.6. El entorno virtual crea f\u00edsicamente una carpeta llamada venv, donde gestionar\u00e1 todas las librer\u00edas que instalemos.","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#27-para-utilizar-el-entorno-virtual-debemos-activarlo","title":"2.7. Para utilizar el entorno virtual debemos activarlo:","text":"<pre><code>.\\venv\\Scripts\\activate\n</code></pre> <ul> <li>Si se produce un error que indica que \"la ejecuci\u00f3n de scripts est\u00e1 deshabilitada en el sistema\"... deb\u00e9is abrir como Administrador <code>Windows PowerShell</code> y ejecutar el siguiente comando:</li> </ul> <pre><code>Set-ExecutionPolicy RemoteSigned\n</code></pre> <ul> <li> <p>Este error ocurre porque, en PowerShell, la ejecuci\u00f3n de scripts est\u00e1 deshabilitada por motivos de seguridad. Para solucionarlo, necesitas cambiar la pol\u00edtica de ejecuci\u00f3n para permitir la ejecuci\u00f3n de scripts.</p> </li> <li> <p>El par\u00e1metro <code>RemoteSigned</code>: Permite ejecutar scripts locales no firmados, pero los scripts descargados de Internet necesitar\u00e1n estar firmados.</p> </li> <li> <p>Si en un futuro quiers volver a la configuraci\u00f3n original, solo tienes que ejecutar el mismo comando con el par\u00e1metro <code>Restricted</code>:</p> </li> </ul> <pre><code>Set-ExecutionPolicy Restricted\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#28-si-queremos-comprobar-los-paquetes-instalados-en-el-entorno-virtual-ejecutamos-el-siguiente-comando","title":"2.8. Si queremos comprobar los paquetes instalados en el entorno virtual ejecutamos el siguiente comando:","text":"<pre><code>pip list\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#29-para-comprobar-que-tenemos-la-ultima-version-de-pip-y-actualizarla","title":"2.9. Para comprobar que tenemos la \u00faltima versi\u00f3n de pip y actualizarla:","text":"<pre><code>python -m pip install --upgrade pip\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#210-ya-tenemos-el-entorno-virtual-preparado-y-activado-para-usarlo-en-nuestro-proyecto-vamos-a-instalar-pytest-que-nos-van-a-ayudar-a-ejecutar-las-pruebas-unitarias","title":"2.10. Ya tenemos el entorno virtual preparado y activado para usarlo en nuestro proyecto. Vamos a instalar pytest, que nos van a ayudar a ejecutar las pruebas unitarias:","text":"<pre><code>pip install pytest\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#211-podemos-volver-a-revisar-los-paquetes-instalados-y-vemos-como-nos-ha-instalado-pytest-y-otros-paquetes-necesarios","title":"2.11. Podemos volver a revisar los paquetes instalados y vemos c\u00f3mo nos ha instalado pytest y otros paquetes necesarios:","text":"<pre><code>pip list\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#212-para-comprobar-la-version-que-tenemos-instalada-de-pytest","title":"2.12. Para comprobar la versi\u00f3n que tenemos instalada de pytest:","text":"<pre><code>pytest --version\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#213-si-necesitamos-desactivar-el-entorno-virtual","title":"2.13. Si necesitamos desactivar el entorno virtual","text":"<pre><code>deactivate\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#214-para-exportar-los-paquetes-que-tenemos-instalados-por-si-los-queremos-instalarlos-en-otro-entorno-posteriormente","title":"2.14. Para exportar los paquetes que tenemos instalados, por si los queremos instalarlos en otro entorno posteriormente:","text":"<pre><code>pip freeze &gt; requirements.txt\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#215-para-importarlos-en-otro-entorno-virtual-de-otra-carpeta-o-proyecto","title":"2.15. Para importarlos en otro entorno virtual de otra carpeta o proyecto:","text":"<pre><code>pip install -r requirements.txt\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica005/#fuentes","title":"Fuentes:","text":"<ul> <li>Creaci\u00f3n de entornos virtuales</li> <li>Entornos virtuales de Python explicados con ejemplos</li> </ul>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/","title":"UD 1 - P6: PU con Pytest","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#p16-mis-primeras-pruebas-unitarias","title":"P1.6 - Mis primeras pruebas unitarias","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Para realizar pruebas unitarias de forma b\u00e1sica debemos conocer qu\u00e9 es y para qu\u00e9 se usan las funciones en los lenguajes de programaci\u00f3n.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#2-funciones","title":"2. Funciones","text":"<p>Una funci\u00f3n te permite definir un bloque de c\u00f3digo reutilizable que se puede ejecutar muchas veces dentro de tu programa.</p> <p>Las funciones en Python son componentes importantes en la programaci\u00f3n que cuentan con una estructura que consta de dos principios.</p> <ul> <li>Principio de reutilizaci\u00f3n: puedes reutilizar una funci\u00f3n varias veces y en distintos programas.</li> <li>Principio de modularizaci\u00f3n: te permite segmentar programas complejos con m\u00f3dulos m\u00e1s simples para depurar y programar con mayor facilidad.</li> </ul> <p>En Python, una definici\u00f3n de funci\u00f3n tiene las siguientes caracter\u00edsticas:</p> <ol> <li>La palabra clave def.</li> <li>Un nombre de funci\u00f3n</li> <li>Par\u00e9ntesis \u2019()\u2019, y dentro de los par\u00e9ntesis los par\u00e1metros de entrada (opcionales).</li> <li>Dos puntos \u2019:\u2019</li> <li>Alg\u00fan bloque de c\u00f3digo para ejecutar</li> <li>Una sentencia de retorno (opcional)</li> </ol> <p>Un ejemplo, que adem\u00e1s vamos a usar en nuestra pr\u00e1ctica es el siguiente:</p> <pre><code>def suma(num1, num2):\n    return num1 + num2\n</code></pre> <p>En el c\u00f3digo podemos llamarla las veces que nosotros necesitemos:</p> <pre><code>print(suma(3, 2))\nprint(\"La suma de\", 3, \"+\", 2, \"es\", suma(3, 2))\ntot = 100 + suma(25, 40)\n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#3-pruebas-unitarias","title":"3. Pruebas unitarias","text":"<p>Las pruebas autom\u00e1ticas son consideradas una herramienta y una metodolog\u00eda indispensable para producir software de calidad.</p> <p>Un conjunto de pruebas, es c\u00f3digo que realiza pruebas a nuestro c\u00f3digo. Las pruebas unitarias nos permiten verificar que nuestro c\u00f3digo funciona como se espera.</p> <p>Las pruebas unitarias son un conjunto de casos de prueba dise\u00f1ados para verificar que cada \u201cunidad\u201d o componente de nuestro c\u00f3digo funciona como se espera.</p> <p>Cada prueba unitaria se ejecuta en un entorno aislado, lo que significa que no afecta a otras partes del c\u00f3digo y viceversa.</p> <p>Adem\u00e1s de ejecutarse en la m\u00e1quina del desarrollador, en entornos de trabajo profesional, estas se ejecutan en forma continua, por ejemplo cada hora o cada commit del c\u00f3digo. Esta ejecuci\u00f3n continua se realiza mediante sistemas automatizados como Jenkins. Debido a esto, agregar una pieza de c\u00f3digo de pruebas implica que esta se probar\u00e1 una y otra vez cada que una funcionalidad sea agregada o un error sea corregido.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#31-pytest","title":"3.1. Pytest","text":"<p>Pytest es un framework con muchas funcionalidades, desde pruebas peque\u00f1as hasta pruebas de gran escala como pruebas funcionales de aplicaciones y librer\u00edas. Ofrece la recolecci\u00f3n autom\u00e1tica de los tests, aserciones simples, soporte para fixtures, debugeo y mucho m\u00e1s\u2026</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#32-assert","title":"3.2. Assert","text":"<p>La palabra <code>assert</code> en Python se refiere a un enunciado que verifica ciertas suposiciones sobre nuestro c\u00f3digo. Si la suposici\u00f3n no es cierta, la afirmaci\u00f3n falla y se genera una excepci\u00f3n.</p> <p>Por ejemplo, si suponemos que una variable es mayor que cero, podemos usar <code>assert</code> para verificar esa suposici\u00f3n:</p> <pre><code>def funcion_ejemplo(x):\n    assert x &gt; 0, \"x no es mayor que cero\"\n    return x * 2\n</code></pre> <p>En este ejemplo, si <code>x</code> es igual a 0 o menor que 0, se generar\u00e1 una excepci\u00f3n <code>AssertionError</code> con el mensaje \u201cx no es mayor que cero\u201d.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#4-creando-el-primer-test","title":"4. Creando el primer test","text":"<ol> <li> <p>Para empezar, vamos a partir de la pr\u00e1ctica 5, donde creamos un entorno virtual e instalamos pytest. Vamos a seguir los siguientes pasos para realizar nuestro primer test y ejecutarlo desde el terminal.</p> </li> <li> <p>Abrir en Visual Studio Code nuestra carpeta de trabajo, vamos a crear una carpeta en ~/Documents/practica6, activar el entorno virtual y comprobar que est\u00e1 instalado correctamente pytest.</p> </li> <li> <p>Lo habitual es crear un directorio llamado <code>tests</code> que contenga los ficheros de pruebas y <code>src</code> para incluir los programas o m\u00f3dulos. Si hac\u00e9is esto, incluid en todas las carpetas del proyecto el fichero <code>__init__.py</code> vac\u00edo (si lo hac\u00e9is desde el terminal: touch init.py).</p> <p>Por ejemplo, si tenemos la siguiente estructura de nuestra carpeta o proyecto <code>practica6</code>:</p> <pre><code>\\practica6\n|\n--scr\n| |--__init__.py\n| |--main.py\n--tests\n  |--__init__.py\n  |--test_main.py\n</code></pre> </li> <li> <p>Crear una carpeta que se llame <code>src</code>. En ella crearemos un nuevo fichero <code>main.py</code> con el siguiente contenido:</p> <pre><code>def suma(num1, num2):\n    return num1 + num2\n\n\ndef main():\n    print(\"La suma de 3 + 2 es {}\".format(suma(3, 2)))\n\n    # Otras formas de hacer lo mismo:\n    print(\"La suma de\", 3, \"+\", 2, \"es\", suma(3, 2))\n\n    print(\"La suma de \" + str(3) + \" + \" + str(2) + \" es \" + str(suma(3, 2)))\n\n    res = \"La suma de \"\n    res += str(3)\n    res += \" + \" + str(2)\n    res += \" es \" + str(suma(3, 2))\n    print(res)\n\n    print(f\"La suma de 3 + 2 es {suma(3, 2)}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Si os fij\u00e1is en el c\u00f3digo, no es m\u00e1s que una funci\u00f3n que voy a llamar en mi funci\u00f3n principal en varias ocasiones.</p> </li> <li> <p>A continuaci\u00f3n, nos creamos la carpeta <code>tests</code> y dentro de ella un fichero con el nombre <code>test_main.py</code> (Pytest va a reconocer por defecto todos los programas que comiencen por <code>test_</code> c\u00f3mo pruebas unitarias que debe realizar). El contenido ser\u00e1 el siguiente:</p> <pre><code>from src.main import suma\n\ndef test_suma():\n    assert suma(1, 1) == 2\n    assert suma(0, 0) == 0\n    assert suma(100, -100) == 0\n</code></pre> <p>Si os da problemas porque no encuentra los paquetes importados desde la prueba unitaria, agregamos manualmente el directorio ra\u00edz del proyecto a sys.path:</p> <pre><code>import sys\nimport os\n\n# Agregar el directorio ra\u00edz del proyecto (practica6) al sys.path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\ndef test_suma():\n    assert suma(1, 1) == 2\n    assert suma(0, 0) == 0\n    assert suma(100, -100) == 0\n</code></pre> </li> <li> <p>Para empezar, siempre debemos importar la funci\u00f3n que deseamos probar del m\u00f3dulo d\u00f3nde est\u00e1 definida.</p> </li> <li>Todas las pruebas ser\u00e1n tambi\u00e9n una funci\u00f3n con el nombre <code>test_nombreFunci\u00f3nAProbar</code>.</li> <li>Si realizamos varias funciones para probar una misma funci\u00f3n es recomendable a\u00f1adir un texto explicativo de la prueba.</li> <li><code>assert</code> verifica que la expresi\u00f3n de la derecha es verdadera (<code>true</code>), sino generar\u00e1 una excepci\u00f3n.</li> <li> <p>Pytest capturar\u00e1 la excepci\u00f3n si se produce y la gestionar\u00e1 para mostrarnos los resultados.</p> </li> <li> <p>Vamos a ejecutar las pruebas unitarias desde la terminal:</p> <pre><code>&gt; pytest\n</code></pre> <p>El comando <code>pytest</code> nos muestra si las pruebas pasaron o no. Si queremos una informaci\u00f3n un poco m\u00e1s detallada usamos el par\u00e1metro <code>-v</code>:</p> <pre><code>&gt; pytest -v\n</code></pre> </li> <li> <p>Se pueden usar las marcas para realizar m\u00faltiples pruebas sobre un determinado m\u00e9todo (marca parametrize). En el mismo fichero <code>test_main.py</code> a\u00f1adimos otra funci\u00f3n:</p> <p><pre><code>import pytest\nfrom src.main import suma\n\ndef test_suma():\n    assert suma(1, 1) == 2\n    assert suma(0, 0) == 0\n    assert suma(100, -100) == 0\n\n@pytest.mark.parametrize(\n    \"input_n1, input_n2, expected\",\n    [\n        (1, 1, 2),\n        (0, 0, 0),\n        (100, -100, 0),\n        (-15, -1, -16),\n        (-3, 8, 5),\n        (9, suma(-1, -2), 6)\n    ]\n)\ndef test_suma_params(input_n1, input_n2, expected):\n    assert suma(input_n1, input_n2) == expected\n</code></pre> Necesitamos importar las librer\u00edas de pytest en nuestro fichero de pruebas con <code>import pytest</code>.</p> </li> <li> <p>Al volver a realizar el test obtendremos un resultado por cada tupla de par\u00e1metros probados:</p> <pre><code>&gt; pytest -v\n</code></pre> </li> <li> <p>Obliguemos a que se produzca un error, por ejemplo modificando uno de los par\u00e1metros expected <code>(0, 0, 1)</code> y observemos lo que nos muestra pytest.</p> </li> <li> <p>Pru\u00e9balo y vuelve a ejecutar los tests unitarios.</p> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#5-crea-tu-el-test","title":"5. Crea tu el test","text":"<p>Desarrolla una funci\u00f3n en <code>compara_numeros.py</code> que reciba dos n\u00fameros y retorne el mayor n\u00famero de los dos o 0 si son iguales. Realiza las pruebas unitarias y ejec\u00fatalas con pytest.</p> <p>Entrega lo siguiente:  * Los ficheros <code>compara_numeros.py</code> y <code>test_compara_numeros.py</code>  * Un pantallazo donde se muestre la vista del Explorador (View -&gt; Explorer) con las carpetas y ficheros del proyecto.  * Un pantallazo del terminal con las pruebas unitarias detalladas realizadas con \u00e9xito.  * Fuerza un error en tu c\u00f3digo, no en los tests, y muestra un pantallazo de tus pruebas unitarias realizadas de nuevo.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#6-configura-las-pruebas-en-el-ide","title":"6. Configura las pruebas en el IDE","text":"<p>Ahora vamos a configurar y realizar las pruebas unitarias desde el IDE, sin necesidad de usar los comandos. Para ello, sigue los 6 pasos de la siguiente documentaci\u00f3n para configurar y ejecutar las pruebas unitarias:  </p> <p>How to run pytest in VSCode </p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#7-crea-tu-el-test-usando-el-ide","title":"7. Crea tu el test usando el IDE","text":"<p>Desarrolla una funci\u00f3n en <code>calcula_factorial.py</code> que reciba un n\u00famero y retorne el factorial del mismo. Crea tambi\u00e9n las pruebas unitarias.</p> <p>Debe cumplir que el n\u00famero de entrada debe ser igual o superior a 0 y menor o igual a 10 (si no es correcto, retornar\u00e1 -1).</p> <pre><code>&gt; El factorial de 0 es 1. El factorial de un n\u00famero entero se define como el producto de todos los n\u00fameros enteros positivos desde el 1 hasta n. Por ejemplo, el factorial de 3 es 6 (3! = 3 x 2 x 1 = 6).\n</code></pre> <p>Entrega lo siguiente:  * Los ficheros calcula_factorial.py y test_calcula_factorial.py  * Un pantallazo de la vista de Testing. * Fuerza un error en tu c\u00f3digo, no en los tests, y muestra un pantallazo de tus pruebas unitarias realizadas de nuevo en la vista de Testing de Visual Studio Code.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica006/#fuentes","title":"Fuentes:","text":"<ul> <li>Gu\u00eda de funciones de Python con ejemplos</li> <li>Qu\u00e9 son las funciones en Python</li> <li>Full pytest documentation</li> <li>Asegura la calidad de tu c\u00f3digo</li> <li>Pruebas unitarias con pytest</li> <li>Introducci\u00f3n a pytest</li> <li>The Import System</li> </ul>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/","title":"P1.7 - Generar y usar clave SSH con Git y GitHub","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica aprender\u00e1s a generar una clave SSH en tu ordenador y a configurarla en GitHub para usarla en lugar de la autenticaci\u00f3n por HTTPS. SSH proporciona una autenticaci\u00f3n m\u00e1s segura y sin la necesidad de introducir tu contrase\u00f1a cada vez que subes o descargas cambios de GitHub.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#2-pasos","title":"2. Pasos:","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#21-verificar-si-ya-tienes-una-clave-ssh","title":"2.1. Verificar si ya tienes una clave SSH","text":"<p>Antes de generar una nueva clave, es recomendable verificar si ya tienes una clave SSH generada en tu m\u00e1quina. Para ello, abre tu terminal (Git Bash si usas Windows) y ejecuta el siguiente comando:</p> <pre><code>ls -al ~/.ssh\n</code></pre> <p>Si este comando devuelve un archivo llamado <code>id_rsa.pub</code> o similar, ya tienes una clave SSH. Si no aparece, pasa al siguiente paso para generarla.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#22-generar-una-nueva-clave-ssh","title":"2.2. Generar una nueva clave SSH","text":"<p>Si no tienes una clave SSH, puedes generar una nueva. Ejecuta el siguiente comando en tu terminal:</p> <pre><code>ssh-keygen -t ed25519 -C \"tu_correo@ejemplo.com\"\n</code></pre> <p>Explicaci\u00f3n: - <code>-t ed25519</code>: Especifica el tipo de clave SSH (recomendada por GitHub). - <code>-C \"tu_correo@ejemplo.com\"</code>: A\u00f1ade un comentario con tu correo electr\u00f3nico para identificar la clave.</p> <p>Cuando se te pida la ruta para guardar la clave, presiona Enter para aceptar la ubicaci\u00f3n predeterminada (<code>/home/tu_usuario/.ssh/id_ed25519</code>). Luego, puedes establecer una contrase\u00f1a para proteger la clave, o simplemente presionar Enter si no deseas usar una contrase\u00f1a.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#23-agregar-la-clave-ssh-al-agente-ssh","title":"2.3. Agregar la clave SSH al agente SSH","text":"<p>Para usar la clave SSH, primero debes agregarla al SSH agent de tu sistema. Ejecuta los siguientes comandos:</p> <ol> <li> <p>Iniciar el agente SSH:    <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre></p> </li> <li> <p>Agregar tu clave SSH al agente:    <pre><code>ssh-add ~/.ssh/id_ed25519\n</code></pre></p> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#24-copiar-la-clave-publica","title":"2.4. Copiar la clave p\u00fablica","text":"<p>Debes copiar el contenido de la clave p\u00fablica para a\u00f1adirla a tu cuenta de GitHub. Usa el siguiente comando para mostrar la clave p\u00fablica en la terminal:</p> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> <p>Copia el contenido que aparece en la terminal.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#25-anadir-la-clave-ssh-a-github","title":"2.5. A\u00f1adir la clave SSH a GitHub","text":"<ol> <li>Ve a GitHub y accede a tu cuenta.</li> <li>Dir\u00edgete a Settings (Configuraci\u00f3n) haciendo clic en tu foto de perfil en la parte superior derecha.</li> <li>En el men\u00fa de la izquierda, selecciona SSH and GPG keys.</li> <li>Haz clic en el bot\u00f3n New SSH key.</li> <li>Introduce un t\u00edtulo para la clave (por ejemplo, \"Clave de mi laptop\").</li> <li>Pega la clave p\u00fablica que copiaste en el campo \"Key\".</li> <li>Haz clic en Add SSH key.</li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#26-probar-la-conexion-ssh-con-github","title":"2.6. Probar la conexi\u00f3n SSH con GitHub","text":"<p>Para verificar que todo est\u00e1 configurado correctamente, puedes probar la conexi\u00f3n SSH a GitHub con el siguiente comando:</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>Si todo est\u00e1 bien configurado, deber\u00edas ver un mensaje de bienvenida de GitHub.</p> <p>Te explico lo que debe ocurrir:</p> <p>2.6.1. Advertencia de autenticidad: Al conectarte por primera vez a GitHub mediante SSH, tu sistema no tiene a\u00fan registrada la huella digital (fingerprint) de los servidores de GitHub. Este es el motivo por el cual te pidi\u00f3 confirmar la autenticidad:    <pre><code>The authenticity of host 'github.com (140.82.121.3)' can't be established.\n</code></pre>    Esto es normal cuando te conectas por primera vez a un servidor a trav\u00e9s de SSH. Al responder \"yes\", se agreg\u00f3 la clave del servidor de GitHub a la lista de \"known hosts\" (servidores conocidos) en tu m\u00e1quina, lo que permite futuras conexiones sin tener que volver a confirmar la autenticidad del servidor.</p> <p>2.6.2. Advertencia agregada: Luego de aceptar la autenticidad, te mostr\u00f3:    <pre><code>Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.\n</code></pre>    Esto confirma que el servidor de GitHub fue agregado a la lista de hosts conocidos de tu sistema.</p> <p>2.6.3. Autenticaci\u00f3n exitosa: Finalmente, el mensaje:    <pre><code>Hi nombreUsuario! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre>    Esto indica que te has autenticado correctamente con GitHub usando SSH. Sin embargo, GitHub no proporciona acceso a una shell interactiva a trav\u00e9s de SSH (es decir, no puedes usar SSH para ejecutar comandos en los servidores de GitHub, solo para interactuar con los repositorios).</p> <p>Ahora que has autenticado con \u00e9xito, puedes usar Git con SSH para ejecutar comandos como <code>git clone</code>, <code>git push</code>, y <code>git pull</code> sin necesidad de introducir tu usuario y contrase\u00f1a.</p> <p>Todo est\u00e1 funcionando correctamente, y est\u00e1s listo para trabajar con GitHub usando tu clave SSH.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#27-configurar-tu-repositorio-local-para-usar-ssh","title":"2.7. Configurar tu repositorio local para usar SSH","text":"<p>Si ya tienes un repositorio configurado con HTTPS, puedes cambiar el enlace remoto para usar SSH. Ejecuta este comando en la carpeta de tu repositorio:</p> <pre><code>git remote set-url origin git@github.com:tu_usuario/nombre_repositorio.git\n</code></pre> <p>Ahora, cuando realices operaciones como <code>git push</code> o <code>git pull</code>, se usar\u00e1 la autenticaci\u00f3n por SSH.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#28-usar-git-con-ssh","title":"2.8. Usar Git con SSH","text":"<p>A partir de ahora, puedes seguir usando los comandos <code>git push</code>, <code>git pull</code>, etc., pero sin tener que introducir tu usuario y contrase\u00f1a cada vez, ya que la autenticaci\u00f3n se har\u00e1 autom\u00e1ticamente mediante la clave SSH.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#ejercicio","title":"Ejercicio:","text":"<ol> <li>Genera tu clave SSH y config\u00farala en GitHub siguiendo los pasos anteriores.</li> <li>Clona un repositorio desde GitHub usando SSH:    <pre><code>git clone git@github.com:tu_usuario/tu_repositorio.git\n</code></pre></li> <li>Realiza cambios en el repositorio local y s\u00fabelos a GitHub usando <code>git push</code> con autenticaci\u00f3n SSH.</li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica007/#nota-importante","title":"Nota importante:","text":"<p>Aseg\u00farate de proteger tu clave privada SSH (no compartirla) y, si trabajas en varios dispositivos, tendr\u00e1s que generar y a\u00f1adir claves SSH para cada uno en GitHub.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/OtrosRecursos/readme/","title":"Readme","text":"<p>Nuevo material. </p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/","title":"PROG U1. Practica002 solucion pseudocodigo","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#p12-ejercicios-resueltos-en-pseudocodigo","title":"P1.2 - Ejercicios Resueltos en pseudoc\u00f3digo","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#1-aqui-tienes-los-algoritmos-en-pseudocodigo-para-las-tareas-solicitadas-los-algoritmos-incluyen-las-instrucciones-necesarias-y-las-explicaciones-correspondientes-para-que-sean-faciles-de-entender","title":"1. Aqu\u00ed tienes los algoritmos en pseudoc\u00f3digo para las tareas solicitadas. Los algoritmos incluyen las instrucciones necesarias y las explicaciones correspondientes para que sean f\u00e1ciles de entender.","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#algoritmo-1-determinar-si-un-numero-x-es-par-o-impar","title":"Algoritmo 1 : Determinar si un n\u00famero X es par o impar","text":"<p>Descripci\u00f3n: Este algoritmo determina si un n\u00famero es par o impar. Un n\u00famero es par si al dividirlo por 2 el resto es cero, de lo contrario, es impar.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce un n\u00famero entero: \"\n    Lee X\n\n    Si (X % 2 == 0) Entonces  // Verificar si el resto de la divisi\u00f3n entre 2 es cero\n        Escribe X + \" es un n\u00famero par.\"\n    Sino\n        Escribe X + \" es un n\u00famero impar.\"\n    FinSi\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El algoritmo solicita un n\u00famero entero, <code>X</code>. 2. Se verifica si <code>X</code> es divisible entre 2 (resto igual a cero). 3. Si el resto es cero, se indica que el n\u00famero es par. 4. Si el resto no es cero, se indica que el n\u00famero es impar.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#algoritmo-2-generar-la-tabla-de-multiplicar-del-numero-x-desde-1-hasta-10","title":"Algoritmo 2: Generar la tabla de multiplicar del n\u00famero X desde 1 hasta 10","text":"<p>Descripci\u00f3n: Este algoritmo genera la tabla de multiplicar de un n\u00famero dado <code>X</code>, desde 1 hasta 10.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce un n\u00famero entero: \"\n    Lee X\n\n    Escribe \"Tabla de multiplicar del n\u00famero \" + X + \":\"\n\n    Para i en (1...10) hacer\n        resultado = X * i  // Multiplicar el n\u00famero X por i\n        Escribe X + \" x \" + i + \" = \" + resultado\n    FinPara\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El algoritmo solicita un n\u00famero entero, <code>X</code>. 2. Utiliza un bucle <code>Para</code> para iterar desde 1 hasta 10. 3. En cada iteraci\u00f3n, se multiplica <code>X</code> por el valor de <code>i</code> y se imprime el resultado en formato de tabla. 4. Se genera la tabla de multiplicar completa del n\u00famero <code>X</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#algoritmo-3-determinar-si-un-numero-x-es-primo","title":"Algoritmo 3: Determinar si un n\u00famero X es primo","text":"<p>Descripci\u00f3n: Este algoritmo determina si un n\u00famero es primo o no. Un n\u00famero es primo si solo es divisible por 1 y por s\u00ed mismo, es decir, no tiene divisores propios.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce un n\u00famero entero: \"\n    Lee X\n\n    es_primo = verdadero  // Inicialmente asumimos que el n\u00famero es primo\n\n    Si (X &lt;= 1) Entonces  // Los n\u00fameros menores o iguales a 1 no son primos\n        es_primo = falso\n    Sino\n        Para i en (2 ... X-1) hacer\n            Si (X % i == 0) Entonces  // Si X es divisible por alg\u00fan n\u00famero entre 2 y X-1, no es primo\n                es_primo = falso\n                Romper  // Salir del bucle\n            FinSi\n        FinPara\n    FinSi\n\n    Si (es_primo) Entonces\n        Escribe X + \" es un n\u00famero primo.\"\n    Sino\n        Escribe X + \" no es un n\u00famero primo.\"\n    FinSi\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El algoritmo solicita un n\u00famero entero, <code>X</code>. 2. Inicialmente se asume que el n\u00famero es primo (variable <code>es_primo</code> se establece a <code>verdadero</code>). 3. Si el n\u00famero es menor o igual a 1, no es primo y se establece <code>es_primo = falso</code>. 4. Luego, se recorre un bucle <code>Para</code> desde 2 hasta <code>X-1</code>. Si <code>X</code> es divisible por alg\u00fan n\u00famero en ese rango, se marca como no primo (<code>es_primo = falso</code>) y se interrumpe el bucle. 5. Finalmente, se imprime si el n\u00famero es primo o no, dependiendo del valor de <code>es_primo</code>.</p> <p>Si necesitas m\u00e1s detalles o ejemplos adicionales, no dudes en pedirlo.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#2-aqui-tienes-las-soluciones-de-la-practica-12-con-explicaciones-detalladas","title":"2. Aqu\u00ed tienes las soluciones de la pr\u00e1ctica 1.2 con explicaciones detalladas.","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-121-escribe-un-programa-que-pida-el-nombre-del-usuario-para-luego-darle-la-bienvenida","title":"Ejercicio 1.2.1: Escribe un programa que pida el nombre del usuario para luego darle la bienvenida.","text":"<p>Descripci\u00f3n: Este programa solicita al usuario que introduzca su nombre y luego le da la bienvenida mostrando un mensaje en pantalla.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Escribe tu nombre: \"\n    Lee nombre\n    Escribe \"Hola, \" + nombre + \".\"\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa comienza pidiendo el nombre del usuario con la instrucci\u00f3n <code>Escribe</code>. 2. Se lee el nombre del usuario y se almacena en la variable <code>nombre</code>. 3. Finalmente, se imprime un mensaje de bienvenida concatenando el texto \"Hola, \" con el valor de la variable <code>nombre</code>, seguido de un punto.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-122-escribe-un-programa-para-pedirle-al-usuario-las-horas-de-trabajo-y-el-precio-por-hora-y-calcule-el-importe-total-del-servicio","title":"Ejercicio 1.2.2: Escribe un programa para pedirle al usuario las horas de trabajo y el precio por hora y calcule el importe total del servicio.","text":"<p>Descripci\u00f3n: Este programa solicita al usuario dos datos: las horas trabajadas y el precio por hora, y calcula el importe total multiplicando ambos valores.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce las horas de trabajo: \"\n    Lee horas\n    Escribe \"Introduce el coste por hora: \"\n    Lee coste_por_hora\n\n    total = horas * coste_por_hora\n\n    Escribe \"El importe total es: \" + total\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicitan al usuario las horas trabajadas y el coste por hora. 2. Se multiplican las horas por el coste por hora y se almacena el resultado en la variable <code>total</code>. 3. El programa muestra el importe total del servicio.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-123-adivina-el-resultado-de-las-siguientes-expresiones-y-su-tipo","title":"Ejercicio 1.2.3: Adivina el resultado de las siguientes expresiones y su tipo","text":"<p>Descripci\u00f3n: En este ejercicio, el alumno debe predecir el resultado de ciertas expresiones aritm\u00e9ticas y luego verificar si su predicci\u00f3n fue correcta.</p> <ol> <li><code>ancho / 2</code></li> <li><code>ancho // 2</code></li> <li><code>alto / 3</code></li> <li><code>1 + 2 * 5</code></li> </ol> <p>Resultados: 1. <code>ancho / 2</code> \u2192 Resultado: 8.5, tipo: float (porque es una divisi\u00f3n que genera decimales). 2. <code>ancho // 2</code> \u2192 Resultado: 8, tipo: entero (divisi\u00f3n entera). 3. <code>alto / 3</code> \u2192 Resultado: 4.0, tipo: float (ya que la variable <code>alto</code> es de tipo float). 4. <code>1 + 2 * 5</code> \u2192 Resultado: 11, tipo: entero (por la precedencia de los operadores: primero se multiplica 2 * 5 y luego se suma 1).</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-124-conversion-de-grados-celsius-a-fahrenheit","title":"Ejercicio 1.2.4: Conversi\u00f3n de grados Celsius a Fahrenheit","text":"<p>Descripci\u00f3n: Este programa convierte una temperatura dada en grados Celsius a grados Fahrenheit usando la f\u00f3rmula:</p> \\[ F = (C \\times 9/5) + 32 \\] <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce la temperatura en grados Celsius: \"\n    Lee celsius\n\n    fahrenheit = (celsius * 9/5) + 32\n\n    Escribe \"La temperatura en grados Fahrenheit es: \" + fahrenheit\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se pide la temperatura en grados Celsius al usuario. 2. Se utiliza la f\u00f3rmula de conversi\u00f3n de Celsius a Fahrenheit. 3. El programa muestra la temperatura en grados Fahrenheit.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-125-calculo-del-precio-final-de-un-articulo-con-iva","title":"Ejercicio 1.2.5: C\u00e1lculo del precio final de un art\u00edculo con IVA","text":"<p>Descripci\u00f3n: Este programa calcula el precio final de un art\u00edculo sum\u00e1ndole el IVA. El usuario introduce el precio sin IVA y el tipo de IVA a aplicar.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el importe sin IVA: \"\n    Lee precio_sin_iva\n    Escribe \"Introduce el tipo de IVA (en porcentaje): \"\n    Lee iva\n\n    precio_final = precio_sin_iva + (precio_sin_iva * iva / 100)\n\n    Escribe \"El precio final del art\u00edculo es: \" + precio_final\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El usuario introduce el precio del art\u00edculo sin IVA y el porcentaje del IVA. 2. El programa calcula el importe del IVA multiplicando el precio por el porcentaje de IVA y luego suma el resultado al precio original. 3. Finalmente, el programa muestra el precio final.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-126-calculo-del-iva-pagado-y-el-importe-sin-iva","title":"Ejercicio 1.2.6: C\u00e1lculo del IVA pagado y el importe sin IVA","text":"<p>Descripci\u00f3n: Este programa solicita el precio final de un art\u00edculo (incluyendo IVA) y calcula cu\u00e1nto se ha pagado de IVA y el importe sin IVA. Se asume un tipo de IVA del 10%.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el importe final: \"\n    Lee precio_final\n\n    precio_sin_iva = precio_final / 1.10\n    iva_pagado = precio_final - precio_sin_iva\n\n    Escribe \"El importe sin IVA es: \" + precio_sin_iva\n    Escribe \"El IVA pagado es: \" + iva_pagado\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El usuario introduce el precio final, que incluye el IVA. 2. Se divide el precio final entre 1.10 para obtener el precio sin IVA (dado que el 10% de IVA es equivalente a multiplicar por 1.10). 3. El IVA pagado se obtiene restando el precio sin IVA del precio final. 4. Se muestran ambos valores en pantalla.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-127-suma-de-tres-numeros","title":"Ejercicio 1.2.7: Suma de tres n\u00fameros","text":"<p>Descripci\u00f3n: Este programa pide al usuario que introduzca tres n\u00fameros y luego calcula su suma.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el primer n\u00famero: \"\n    Lee num1\n    Escribe \"Introduce el segundo n\u00famero: \"\n    Lee num2\n    Escribe \"Introduce el tercer n\u00famero: \"\n    Lee num3\n\n    suma = num1 + num2 + num3\n\n    Escribe \"La suma es: \" + suma\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita tres n\u00fameros al usuario. 2. Suma los tres n\u00fameros y almacena el resultado en la variable <code>suma</code>. 3. Muestra la suma de los n\u00fameros en pantalla.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-128-escribir-el-programa-del-ejercicio-17-usando-solamente-dos-variables-diferentes","title":"Ejercicio 1.2.8: Escribir el programa del ejercicio 1.7 usando solamente dos variables diferentes","text":"<p>Descripci\u00f3n: Este programa repite la suma de tres n\u00fameros pero usando solo dos variables, lo cual se puede hacer reutilizando las variables en el proceso de c\u00e1lculo.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el primer n\u00famero: \"\n    Lee num1\n    Escribe \"Introduce el segundo n\u00famero: \"\n    Lee num2\n\n    num1 = num1 + num2  // Reutilizamos la variable num1 para almacenar la suma de los dos primeros n\u00fameros\n\n    Escribe \"Introduce el tercer n\u00famero: \"\n    Lee num2  // Reutilizamos la variable num2 para el tercer n\u00famero\n\n    num1 = num1 + num2  // Sumamos el tercer n\u00famero a la variable num1 que ya contiene la suma de los dos primeros\n\n    Escribe \"La suma es: \" + num1\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicitan los dos primeros n\u00fameros y se suman en la variable <code>num1</code>. 2. Luego, se lee el tercer n\u00famero, reutilizando <code>num2</code> para almacenar este nuevo valor. 3. Se suma el valor de <code>num2</code> (el tercer n\u00famero) al <code>num1</code> (que ya contiene la suma de los dos primeros). 4. Finalmente, el resultado de la suma se imprime.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-129-es-posible-escribir-el-programa-del-ejercicio-17-sin-usar-variables","title":"Ejercicio 1.2.9: Es posible escribir el programa del ejercicio 1.7 sin usar variables","text":"<p>Descripci\u00f3n: El desaf\u00edo aqu\u00ed es realizar la suma de tres n\u00fameros sin usar ninguna variable. Aunque se puede hacer sin variables, en pseudoc\u00f3digo se deben usar variables para manejar los datos temporalmente, pero aqu\u00ed intentamos reducirlas al m\u00ednimo.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el primer n\u00famero: \"\n    Lee num1\n    Escribe \"Introduce el segundo n\u00famero: \"\n    Lee num2\n    Escribe \"Introduce el tercer n\u00famero: \"\n    Lee num3\n\n    Escribe \"La suma es: \" + (num1 + num2 + num3)\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Los tres n\u00fameros se leen y se suman directamente en la operaci\u00f3n <code>Escribe</code> sin la necesidad de variables adicionales para almacenar el resultado de la suma. 2. Se imprime directamente el resultado de la suma de los tres n\u00fameros.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1210-mostrar-el-resultado-de-una-operacion-aritmetica-compleja","title":"Ejercicio 1.2.10: Mostrar el resultado de una operaci\u00f3n aritm\u00e9tica compleja","text":"<p>Descripci\u00f3n: El ejercicio requiere escribir un programa que muestre una operaci\u00f3n aritm\u00e9tica dada. Por ejemplo, si se quiere calcular \\( (5 + 3) * 2 \\), el resultado deber\u00eda mostrarse directamente.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    resultado = (5 + 3) * 2\n    Escribe \"El resultado es: \" + resultado\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se realiza la operaci\u00f3n directamente en una l\u00ednea y se almacena el resultado en la variable <code>resultado</code>. 2. Luego, se muestra el valor de la variable <code>resultado</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1211-suma-de-los-n-primeros-numeros-enteros","title":"Ejercicio 1.2.11: Suma de los n primeros n\u00fameros enteros","text":"<p>Descripci\u00f3n: El programa solicita un n\u00famero entero positivo, n, y luego calcula la suma de todos los n\u00fameros enteros desde 1 hasta n.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce un entero positivo: \"\n    Lee n\n\n    suma = n * (n + 1) / 2  // F\u00f3rmula para la suma de los n primeros enteros\n\n    Escribe \"La suma de los primeros \" + n + \" enteros es: \" + suma\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se utiliza la f\u00f3rmula matem\u00e1tica \\( \\text{suma} = \\frac{n(n+1)}{2} \\), que permite calcular la suma de los n primeros n\u00fameros enteros. 2. La f\u00f3rmula se eval\u00faa directamente y se muestra el resultado en pantalla.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1212-calculo-del-indice-de-masa-corporal-imc","title":"Ejercicio 1.2.12: C\u00e1lculo del \u00edndice de masa corporal (IMC)","text":"<p>Descripci\u00f3n: Este programa calcula el \u00edndice de masa corporal (IMC) usando la f\u00f3rmula:</p> \\[ IMC = \\frac{peso}{altura^2} \\] <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce tu peso en kg: \"\n    Lee peso\n    Escribe \"Introduce tu estatura en metros: \"\n    Lee estatura\n\n    imc = peso / (estatura * estatura)  // C\u00e1lculo del IMC\n    Escribe \"Tu \u00edndice de masa corporal es: \" + imc\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicitan al usuario su peso y altura. 2. El IMC se calcula dividiendo el peso por el cuadrado de la altura. 3. El resultado se muestra al usuario.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1213-cociente-y-resto-de-una-division","title":"Ejercicio 1.2.13: Cociente y resto de una divisi\u00f3n","text":"<p>Descripci\u00f3n: Este programa pide al usuario dos n\u00fameros enteros y muestra el cociente y el resto de la divisi\u00f3n entera entre ambos n\u00fameros.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el primer n\u00famero: \"\n    Lee n\n    Escribe \"Introduce el segundo n\u00famero: \"\n    Lee m\n\n    cociente = n // m  // Divisi\u00f3n entera\n    resto = n % m  // Resto de la divisi\u00f3n\n\n    Escribe \"La divisi\u00f3n de \" + n + \" entre \" + m + \" da un cociente de \" + cociente + \" y un resto de \" + resto\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se leen dos n\u00fameros enteros. 2. Se realiza la divisi\u00f3n entera con el operador <code>//</code> para obtener el cociente. 3. El operador <code>%</code> se utiliza para calcular el resto de la divisi\u00f3n. 4. El cociente y el resto se imprimen en pantalla.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1214-calculo-del-peso-total-de-un-pedido-de-payasos-y-munecas","title":"Ejercicio 1.2.14: C\u00e1lculo del peso total de un pedido de payasos y mu\u00f1ecas","text":"<p>Descripci\u00f3n: Este programa calcula el peso total de un pedido de payasos y mu\u00f1ecas. Cada payaso pesa 112 g y cada mu\u00f1eca pesa 75 g.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el n\u00famero de payasos vendidos: \"\n    Lee payasos\n    Escribe \"Introduce el n\u00famero de mu\u00f1ecas vendidas: \"\n    Lee mu\u00f1ecas\n\n    peso_total = (payasos * 112) + (mu\u00f1ecas * 75)  // C\u00e1lculo del peso total\n\n    Escribe \"El peso total del paquete es: \" + peso_total + \" gramos\"\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicitan la cantidad de payasos y mu\u00f1ecas vendidas. 2. Se calcula el peso total multiplicando el n\u00famero de payasos por su peso y el n\u00famero de mu\u00f1ecas por su peso, y luego sumando ambos resultados. 3. El peso total del paquete se imprime en gramos.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1215-calculo-de-ahorros-con-interes-compuesto","title":"Ejercicio 1.2.15: C\u00e1lculo de ahorros con inter\u00e9s compuesto","text":"<p>Descripci\u00f3n: Este programa calcula el crecimiento de los ahorros de una cuenta bancaria durante tres a\u00f1os con un inter\u00e9s anual del 4%.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce la cantidad depositada en la cuenta de ahorros: \"\n    Lee capital\n\n    interes = 0.04\n    ahorro_ano1 = capital * (1 + interes)\n    ahorro_ano2 = ahorro_ano1 * (1 + interes)\n    ahorro_ano3 = ahorro_ano2 * (1 + interes)\n\n    Escribe \"Ahorros tras el primer a\u00f1o: \" + ahorro_ano1\n    Escribe \"Ahorros tras el segundo a\u00f1o: \" + ahorro_ano2\n    Escribe \"Ahorros tras el tercer a\u00f1o: \" + ahorro_ano3\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se introduce el capital inicial y se establece un inter\u00e9s del 4%. 2. Se calculan los ahorros al final de cada a\u00f1o sumando el inter\u00e9s al saldo del a\u00f1o anterior. 3. El saldo se muestra al final de cada a\u00f1o.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1216-panaderia-con-descuento-en-barras-de-pan-no-frescas","title":"Ejercicio 1.2.16: Panader\u00eda con descuento en barras de pan no frescas","text":"<p>Descripci\u00f3n: Este programa calcula el precio de barras de pan no frescas, que tienen un descuento del 60%. El precio normal de una barra es de 3.49\u20ac, y el programa calcula el precio final con descuento.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    precio_normal = 3.49  // Precio de una barra de pan\n    descuento = 0.60  // Descuento por no ser fresca\n\n    Escribe \"Introduce el n\u00famero de barras no frescas vendidas: \"\n    Lee barras_no_frescas\n\n    precio_descuento = precio_normal * (1 - descuento)\n    coste_total = precio_descuento * barras_no_frescas\n\n    Escribe \"Precio habitual de una barra de pan: \" + precio_normal + \"\u20ac\"\n    Escribe \"Descuento aplicado: \" + (descuento * 100) + \"%\"\n    Escribe \"Coste total por las barras no frescas: \" + coste_total + \"\u20ac\"\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se fija el precio normal de una barra de pan (3.49\u20ac) y el descuento (60%). 2. Se calcula el precio con descuento multiplicando el precio normal por (1 - descuento). 3. Se solicita al usuario el n\u00famero de barras no frescas y se multiplica por el precio con descuento para obtener el coste total. 4. Finalmente, se imprime el precio habitual, el descuento aplicado y el coste total.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1217-repetir-el-nombre-del-usuario","title":"Ejercicio 1.2.17: Repetir el nombre del usuario","text":"<p>Descripci\u00f3n: El programa solicita el nombre del usuario y un n\u00famero entero. Luego imprime el nombre tantas veces como el n\u00famero indicado, en l\u00edneas separadas.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce tu nombre: \"\n    Lee nombre\n    Escribe \"Introduce un n\u00famero entero: \"\n    Lee n\n\n    Para i en (1...n) hacer\n        Escribe nombre\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicita al usuario su nombre y un n\u00famero entero. 2. Se usa un bucle <code>Para</code> que itera desde 1 hasta <code>n</code>, imprimiendo el nombre del usuario en cada iteraci\u00f3n. 3. Esto asegura que el nombre se imprima tantas veces como se haya solicitado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1218-mostrar-el-nombre-en-minusculas-mayusculas-y-con-mayusculas-iniciales","title":"Ejercicio 1.2.18: Mostrar el nombre en min\u00fasculas, may\u00fasculas y con may\u00fasculas iniciales","text":"<p>Descripci\u00f3n: Este programa solicita el nombre completo del usuario y lo muestra de tres formas diferentes: todo en min\u00fasculas, todo en may\u00fasculas y con la primera letra de cada palabra en may\u00fascula.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce tu nombre completo: \"\n    Lee nombre_completo\n\n    Escribe \"En min\u00fasculas: \" + minusculas(nombre_completo)\n    Escribe \"En may\u00fasculas: \" + mayusculas(nombre_completo)\n    Escribe \"Con may\u00fasculas iniciales: \" + capitalizar(nombre_completo)\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se lee el nombre completo del usuario. 2. Se utilizan tres funciones diferentes:     - <code>minusculas()</code> convierte todas las letras a min\u00fasculas.     - <code>mayusculas()</code> convierte todas las letras a may\u00fasculas.     - <code>capitalizar()</code> convierte la primera letra de cada palabra a may\u00fascula y el resto a min\u00fasculas. 3. Cada versi\u00f3n del nombre se imprime en pantalla.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1219-mostrar-el-nombre-del-usuario-y-contar-las-letras","title":"Ejercicio 1.2.19: Mostrar el nombre del usuario y contar las letras","text":"<p>Descripci\u00f3n: El programa solicita el nombre del usuario, lo convierte a may\u00fasculas y luego cuenta cu\u00e1ntas letras tiene.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce tu nombre: \"\n    Lee nombre\n\n    nombre_mayusculas = mayusculas(nombre)\n    num_letras = longitud(nombre)\n\n    Escribe nombre_mayusculas + \" tiene \" + num_letras + \" letras.\"\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicita el nombre del usuario. 2. Se convierte el nombre a may\u00fasculas con <code>mayusculas()</code> y se almacena en <code>nombre_mayusculas</code>. 3. Se cuenta la longitud del nombre con <code>longitud()</code> y se almacena en <code>num_letras</code>. 4. El programa imprime el nombre en may\u00fasculas y el n\u00famero de letras.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1220-mostrar-el-numero-de-telefono-sin-prefijo-ni-extension","title":"Ejercicio 1.2.20: Mostrar el n\u00famero de tel\u00e9fono sin prefijo ni extensi\u00f3n","text":"<p>Descripci\u00f3n: El programa solicita un n\u00famero de tel\u00e9fono en formato <code>+34-n\u00famero-extensi\u00f3n</code> y luego muestra el n\u00famero de tel\u00e9fono sin el prefijo ni la extensi\u00f3n.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el n\u00famero de tel\u00e9fono (formato: +34-n\u00famero-extensi\u00f3n): \"\n    Lee telefono\n\n    partes = dividir(telefono, \"-\")  // Separa el prefijo, n\u00famero y extensi\u00f3n\n\n    Escribe \"El n\u00famero sin prefijo ni extensi\u00f3n es: \" + partes[1]  // Muestra solo la parte central\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita un n\u00famero de tel\u00e9fono en formato con prefijo y extensi\u00f3n. 2. Se usa la funci\u00f3n <code>dividir()</code> para separar el tel\u00e9fono en tres partes: prefijo, n\u00famero y extensi\u00f3n. 3. Se imprime la parte central (el n\u00famero sin el prefijo ni la extensi\u00f3n).</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1221-invertir-una-frase","title":"Ejercicio 1.2.21: Invertir una frase","text":"<p>Descripci\u00f3n: El programa solicita una frase y muestra la frase invertida.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce una frase: \"\n    Lee frase\n\n    frase_invertida = invertir(frase)  // Invierte la cadena de caracteres\n\n    Escribe \"La frase invertida es: \" + frase_invertida\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita una frase al usuario. 2. La funci\u00f3n <code>invertir()</code> invierte el orden de los caracteres de la frase. 3. Se imprime la frase invertida.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1222-reemplazar-una-vocal-en-una-frase-por-su-version-mayuscula","title":"Ejercicio 1.2.22: Reemplazar una vocal en una frase por su versi\u00f3n may\u00fascula","text":"<p>Descripci\u00f3n: Este programa solicita una frase y una vocal, luego reemplaza todas las ocurrencias de la vocal en la frase con su versi\u00f3n en may\u00fasculas.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce una frase: \"\n    Lee frase\n    Escribe \"Introduce una vocal: \"\n    Lee vocal\n\n    frase_modificada = reemplazar(frase, vocal, mayusculas(vocal))  // Reemplaza la vocal por may\u00fasculas\n\n    Escribe \"La frase modificada es: \" + frase_modificada\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita una frase y una vocal. 2. La funci\u00f3n <code>reemplazar()</code> busca todas las ocurrencias de la vocal en la frase y las reemplaza por la vocal en may\u00fasculas. 3. Se muestra la frase modificada.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1223-cambiar-el-dominio-de-un-correo-electronico","title":"Ejercicio 1.2.23: Cambiar el dominio de un correo electr\u00f3nico","text":"<p>Descripci\u00f3n: Este programa solicita un correo electr\u00f3nico y cambia su dominio por <code>ceu.es</code>.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce tu correo electr\u00f3nico: \"\n    Lee correo\n\n    partes = dividir(correo, \"@\")  // Separa el nombre y el dominio\n    nuevo_correo = partes[0] + \"@ceu.es\"\n\n    Escribe \"Tu nuevo correo es: \" + nuevo_correo\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita el correo electr\u00f3nico del usuario. 2. Se separa el nombre y el dominio usando <code>dividir()</code>. 3. Se reemplaza el dominio por <code>ceu.es</code> y se muestra el nuevo correo.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1224-separar-los-euros-y-centimos-de-un-precio","title":"Ejercicio 1.2.24: Separar los euros y c\u00e9ntimos de un precio","text":"<p>Descripci\u00f3n: El programa solicita el precio de un producto con dos decimales y separa la parte de los euros y los c\u00e9ntimos.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el precio del producto (con dos decimales): \"\n    Lee precio\n\n    euros = parte_entera(precio)\n    centimos = (precio * 100) % 100  // Extrae los c\u00e9ntimos\n\n    Escribe \"Euros: \" + euros + \", C\u00e9ntimos: \" + centimos\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicita el precio del producto. 2. <code>parte_entera()</code> extrae la parte de los euros. 3. Se calcula el valor de los c\u00e9ntimos multiplicando el precio por 100 y tomando el resto con 100. 4. Se muestran los euros y los c\u00e9ntimos.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1225-mostrar-el-dia-mes-y-ano-de-una-fecha-de-nacimiento","title":"Ejercicio 1.2.25: Mostrar el d\u00eda, mes y a\u00f1o de una fecha de nacimiento","text":"<p>Descripci\u00f3n: El programa solicita una fecha de nacimiento en formato <code>dd/mm/aaaa</code> y muestra el d\u00eda, mes y a\u00f1o por separado.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce tu fecha de nacimiento (dd/mm/aaaa): \"\n    Lee fecha\n\n    partes = dividir(fecha, \"/\")\n\n    Escribe \"D\u00eda: \" + partes[0]\n    Es\n\ncribe \"Mes: \" + partes[1]\n    Escribe \"A\u00f1o: \" + partes[2]\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita la fecha de nacimiento. 2. Se divide la fecha en tres partes (d\u00eda, mes, a\u00f1o) usando <code>dividir()</code>. 3. Se muestra cada parte por separado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1226-mostrar-productos-de-una-cesta-de-la-compra-en-lineas-separadas","title":"Ejercicio 1.2.26: Mostrar productos de una cesta de la compra en l\u00edneas separadas","text":"<p>Descripci\u00f3n: Este programa solicita al usuario una lista de productos separados por comas y luego muestra cada producto en una l\u00ednea distinta.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce los productos de la cesta de la compra separados por comas: \"\n    Lee productos\n\n    lista_productos = dividir(productos, \",\")  // Divide la cadena de productos en una lista\n\n    Para cada producto en lista_productos hacer\n        Escribe producto\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicita al usuario que introduzca una lista de productos separados por comas. 2. Se usa la funci\u00f3n <code>dividir()</code> para separar los productos en una lista. 3. Un bucle <code>Para cada</code> recorre la lista e imprime cada producto en una l\u00ednea separada.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1227-mostrar-el-nombre-de-un-producto-su-precio-y-el-numero-de-unidades","title":"Ejercicio 1.2.27: Mostrar el nombre de un producto, su precio y el n\u00famero de unidades","text":"<p>Descripci\u00f3n: El programa solicita el nombre de un producto, su precio unitario y el n\u00famero de unidades, y luego muestra un formato espec\u00edfico con estos datos.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el nombre del producto: \"\n    Lee nombre_producto\n    Escribe \"Introduce el precio unitario del producto: \"\n    Lee precio\n    Escribe \"Introduce el n\u00famero de unidades: \"\n    Lee unidades\n\n    coste_total = precio * unidades\n\n    // Mostrar el formato solicitado\n    Escribe \"Producto: \" + nombre_producto\n    Escribe \"Precio unitario: \" + formatear(precio, 6, 2)  // Formato de 6 d\u00edgitos enteros y 2 decimales\n    Escribe \"Unidades: \" + formatear(unidades, 3)  // Formato de 3 d\u00edgitos enteros\n    Escribe \"Coste total: \" + formatear(coste_total, 8, 2)  // Formato de 8 d\u00edgitos enteros y 2 decimales\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicitan el nombre del producto, su precio unitario y la cantidad de unidades. 2. Se calcula el coste total multiplicando el precio por el n\u00famero de unidades. 3. Se utiliza la funci\u00f3n <code>formatear()</code> para mostrar el precio unitario, el n\u00famero de unidades y el coste total con el formato solicitado:     - El precio se muestra con 6 d\u00edgitos enteros y 2 decimales.     - El n\u00famero de unidades se muestra con 3 d\u00edgitos enteros.     - El coste total se muestra con 8 d\u00edgitos enteros y 2 decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1228-calcular-el-area-de-un-triangulo-a-partir-de-tres-lados","title":"Ejercicio 1.2.28: Calcular el \u00e1rea de un tri\u00e1ngulo a partir de tres lados","text":"<p>Descripci\u00f3n: Este programa calcula el \u00e1rea de un tri\u00e1ngulo utilizando la f\u00f3rmula de Her\u00f3n, a partir de las longitudes de los tres lados del tri\u00e1ngulo.</p> <p>La f\u00f3rmula de Her\u00f3n es:</p> \\[ s = \\frac{a + b + c}{2} \\] \\[ \\text{\u00c1rea} = \\sqrt{s(s - a)(s - b)(s - c)} \\] <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce la longitud del primer lado: \"\n    Lee a\n    Escribe \"Introduce la longitud del segundo lado: \"\n    Lee b\n    Escribe \"Introduce la longitud del tercer lado: \"\n    Lee c\n\n    s = (a + b + c) / 2  // Semiper\u00edmetro\n\n    area = raiz(s * (s - a) * (s - b) * (s - c))  // C\u00e1lculo del \u00e1rea usando la f\u00f3rmula de Her\u00f3n\n\n    Escribe \"El \u00e1rea del tri\u00e1ngulo es: \" + area\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita las longitudes de los tres lados del tri\u00e1ngulo. 2. Se calcula el semiper\u00edmetro \\( s \\) sumando los tres lados y dividiendo entre 2. 3. Se calcula el \u00e1rea utilizando la f\u00f3rmula de Her\u00f3n, con la funci\u00f3n <code>raiz()</code> para obtener la ra\u00edz cuadrada. 4. Finalmente, se muestra el \u00e1rea del tri\u00e1ngulo.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1229-calculo-de-un-numero-aleatorio-entre-dos-valores","title":"Ejercicio 1.2.29: C\u00e1lculo de un n\u00famero aleatorio entre dos valores","text":"<p>Descripci\u00f3n: Este programa solicita dos n\u00fameros y genera un n\u00famero aleatorio entre esos dos valores.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el valor m\u00ednimo: \"\n    Lee min\n    Escribe \"Introduce el valor m\u00e1ximo: \"\n    Lee max\n\n    aleatorio = generar_aleatorio(min, max)  // Funci\u00f3n que genera un n\u00famero aleatorio entre min y max\n\n    Escribe \"El n\u00famero aleatorio generado es: \" + aleatorio\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicitan los valores m\u00ednimo y m\u00e1ximo. 2. Se usa la funci\u00f3n <code>generar_aleatorio()</code> para obtener un n\u00famero aleatorio entre el valor m\u00ednimo y el m\u00e1ximo introducido por el usuario. 3. El n\u00famero aleatorio se muestra en pantalla.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1230-escribir-un-programa-que-determine-si-un-numero-es-primo","title":"Ejercicio 1.2.30: Escribir un programa que determine si un n\u00famero es primo","text":"<p>Descripci\u00f3n: Este programa solicita un n\u00famero y determina si es primo o no. Un n\u00famero es primo si solo es divisible entre 1 y \u00e9l mismo.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce un n\u00famero entero: \"\n    Lee num\n\n    es_primo = verdadero  // Asumimos que el n\u00famero es primo al inicio\n\n    Si (num &lt;= 1) Entonces\n        es_primo = falso\n    Sino\n        Para i en (2 ... num-1) hacer\n            Si (num % i == 0) Entonces\n                es_primo = falso\n                Romper  // Salir del bucle si encontramos un divisor\n            FinSi\n        FinPara\n    FinSi\n\n    Si (es_primo) Entonces\n        Escribe num + \" es un n\u00famero primo.\"\n    Sino\n        Escribe num + \" no es un n\u00famero primo.\"\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicita un n\u00famero entero al usuario. 2. Inicialmente, se asume que el n\u00famero es primo. 3. Si el n\u00famero es menor o igual a 1, se marca como no primo. 4. Si no, se itera desde 2 hasta <code>num - 1</code> para verificar si el n\u00famero es divisible por alg\u00fan valor en ese rango. Si es divisible por alguno, no es primo. 5. El programa imprime si el n\u00famero es primo o no.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1231-mostrar-todos-los-divisores-de-un-numero","title":"Ejercicio 1.2.31: Mostrar todos los divisores de un n\u00famero","text":"<p>Descripci\u00f3n: El programa solicita un n\u00famero entero y muestra todos sus divisores.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce un n\u00famero entero: \"\n    Lee num\n\n    Escribe \"Los divisores de \" + num + \" son:\"\n\n    Para i en (1 ... num) hacer\n        Si (num % i == 0) Entonces\n            Escribe i  // Muestra el divisor\n        FinSi\n    FinPara\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. Se solicita un n\u00famero entero al usuario. 2. Se utiliza un bucle <code>Para</code> que itera desde 1 hasta el valor del n\u00famero. 3. En cada iteraci\u00f3n, se verifica si el n\u00famero es divisible por <code>i</code>. Si lo es, <code>i</code> es un divisor y se imprime. 4. El programa imprime todos los divisores del n\u00famero.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pseudocodigo/#ejercicio-1232-calcular-la-serie-de-fibonacci-hasta-un-numero-dado","title":"Ejercicio 1.2.32: Calcular la serie de Fibonacci hasta un n\u00famero dado","text":"<p>Descripci\u00f3n: El programa genera la serie de Fibonacci hasta un n\u00famero dado por el usuario. La serie de Fibonacci comienza con 0 y 1, y cada n\u00famero es la suma de los dos anteriores.</p> <p>Pseudoc\u00f3digo:</p> <pre><code>Inicio\n    Escribe \"Introduce el n\u00famero de t\u00e9rminos de la serie de Fibonacci: \"\n    Lee n\n\n    a = 0\n    b = 1\n\n    Si (n &gt;= 1) Entonces\n        Escribe a  // Muestra el primer t\u00e9rmino\n    FinSi\n\n    Si (n &gt;= 2) Entonces\n        Escribe b  // Muestra el segundo t\u00e9rmino\n    FinSi\n\n    Para i en (3 ... n) hacer\n        siguiente = a + b\n        Escribe siguiente\n        a = b  // Actualizamos los valores de a y b\n        b = siguiente\n    FinPara\nFin\n</code></pre> <p>Explicaci\u00f3n: 1. El programa solicita el n\u00famero de t\u00e9rminos de la serie de Fibonacci. 2. Los dos primeros t\u00e9rminos de la serie (0 y 1) se muestran si el n\u00famero de t\u00e9rminos es 1 o m\u00e1s. 3. Luego, se usa un bucle <code>Para</code> para calcular los t\u00e9rminos siguientes de la serie, actualizando los valores de <code>a</code> y <code>b</code> en cada iteraci\u00f3n. 4. El programa imprime cada t\u00e9rmino de la serie hasta llegar al n\u00famero de t\u00e9rminos solicitado.</p> <p>Con esto hemos completado las soluciones a los ejercicios solicitados. </p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/","title":"PROG U1. Practica002 solucion python","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-121","title":"Ejercicio 1.2.1","text":"<p>Escribe un programa que pida el nombre del usuario para luego darle la bienvenida.</p> <pre><code># Solicitamos el nombre del usuario\nnombre = input(\"Escribe tu nombre: \")\n\n# Mostramos el saludo de bienvenida\nprint(f\"Hola, {nombre}.\")\n</code></pre> <p>Explicaci\u00f3n: 1. Utilizamos la funci\u00f3n <code>input</code> para pedirle al usuario que escriba su nombre y lo almacenamos en la variable <code>nombre</code>. 2. Luego, mostramos un mensaje de bienvenida usando <code>print</code> y la funci\u00f3n de interpolaci\u00f3n de cadenas <code>f\"Hola, {nombre}.\"</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-122","title":"Ejercicio 1.2.2","text":"<p>Escribe un programa para pedirle al usuario las horas de trabajo y el precio por hora y calcule el importe total del servicio.</p> <pre><code># Pedimos al usuario las horas trabajadas y el coste por hora\nhoras_trabajadas = float(input(\"Horas de trabajo: \"))\ncoste_por_hora = float(input(\"Coste por hora: \"))\n\n# Calculamos el importe total\nimporte_total = horas_trabajadas * coste_por_hora\n\n# Mostramos el importe total\nprint(f\"Importe total: {importe_total}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Usamos <code>input</code> para pedir al usuario las horas trabajadas y el coste por hora. 2. Convertimos estas entradas a <code>float</code> para permitir n\u00fameros decimales. 3. Multiplicamos las horas por el coste para calcular el importe total. 4. Finalmente, imprimimos el importe total.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-123","title":"Ejercicio 1.2.3","text":"<p>Para cada una de las siguientes expresiones, adivina su valor y tipo. Luego compru\u00e9balo.</p> <pre><code># Definimos las variables\nancho = 17\nalto = 12.0\n\n# Expresiones\nexp1 = ancho / 2  # Divisi\u00f3n normal, resultado flotante\nexp2 = ancho // 2  # Divisi\u00f3n entera, resultado entero\nexp3 = alto / 3  # Divisi\u00f3n normal, resultado flotante\nexp4 = 1 + 2 * 5  # Operaci\u00f3n aritm\u00e9tica, siguiendo orden de operadores\n\n# Imprimimos los resultados\nprint(\"Expresi\u00f3n 1:\", exp1, type(exp1))\nprint(\"Expresi\u00f3n 2:\", exp2, type(exp2))\nprint(\"Expresi\u00f3n 3:\", exp3, type(exp3))\nprint(\"Expresi\u00f3n 4:\", exp4, type(exp4))\n</code></pre> <p>Explicaci\u00f3n: 1. Definimos <code>ancho</code> como entero y <code>alto</code> como flotante. 2. Realizamos las operaciones y mostramos los resultados junto con el tipo de dato (<code>type</code>).</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-124","title":"Ejercicio 1.2.4","text":"<p>Escribe un programa que convierta grados Celsius a Fahrenheit.</p> <pre><code># Pedimos la temperatura en grados Celsius\ncelsius = float(input(\"Introduce la temperatura en grados Celsius: \"))\n\n# Convertimos a Fahrenheit\nfahrenheit = celsius * 9/5 + 32\n\n# Mostramos el resultado\nprint(f\"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit.\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos la temperatura en Celsius y la convertimos a <code>float</code>. 2. Aplicamos la f\u00f3rmula de conversi\u00f3n a Fahrenheit: <code>fahrenheit = celsius * 9/5 + 32</code>. 3. Mostramos el resultado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-125","title":"Ejercicio 1.2.5","text":"<p>Calcula el precio final de un art\u00edculo a partir de su precio sin IVA y el tipo de IVA.</p> <pre><code># Pedimos el importe sin IVA y el tipo de IVA\nimporte_sin_iva = float(input(\"Introduce el importe sin IVA: \"))\ntipo_iva = float(input(\"Introduce el tipo de IVA (%): \"))\n\n# Calculamos el importe final con IVA\nprecio_final = importe_sin_iva * (1 + tipo_iva / 100)\n\n# Mostramos el resultado\nprint(f\"El precio final con IVA es: {precio_final:.2f}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el importe sin IVA y el tipo de IVA (en porcentaje). 2. Calculamos el precio final multiplicando por <code>(1 + tipo_iva / 100)</code>. 3. Mostramos el resultado con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-126","title":"Ejercicio 1.2.6","text":"<p>Calcula el IVA pagado y el importe sin IVA a partir del precio final.</p> <pre><code># Pedimos el importe final\nimporte_final = float(input(\"Introduce el importe final del art\u00edculo: \"))\n\n# Suponemos un IVA del 10%\niva = 10\n\n# Calculamos el importe sin IVA\nimporte_sin_iva = importe_final / (1 + iva / 100)\n\n# Calculamos el IVA pagado\niva_pagado = importe_final - importe_sin_iva\n\n# Mostramos el resultado\nprint(f\"Importe sin IVA: {importe_sin_iva:.2f}\")\nprint(f\"IVA pagado: {iva_pagado:.2f}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Pedimos el importe final del art\u00edculo. 2. Calculamos el importe sin IVA usando <code>importe_final / (1 + iva / 100)</code>. 3. Calculamos el IVA pagado como la diferencia entre el importe final y el importe sin IVA.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-127","title":"Ejercicio 1.2.7","text":"<p>Escribe un programa que solicite tres n\u00fameros al usuario y calcule e imprima por pantalla su suma.</p> <pre><code># Pedimos tres n\u00fameros al usuario\nnum1 = float(input(\"Introduce el primer n\u00famero: \"))\nnum2 = float(input(\"Introduce el segundo n\u00famero: \"))\nnum3 = float(input(\"Introduce el tercer n\u00famero: \"))\n\n# Calculamos la suma de los tres n\u00fameros\nsuma = num1 + num2 + num3\n\n# Mostramos el resultado\nprint(f\"La suma de {num1}, {num2} y {num3} es: {suma}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Usamos <code>input</code> para pedir al usuario tres n\u00fameros y los convertimos a <code>float</code> para permitir n\u00fameros decimales. 2. Sumamos los tres n\u00fameros y almacenamos el resultado en <code>suma</code>. 3. Mostramos la suma en pantalla.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-128","title":"Ejercicio 1.2.8","text":"<p>Escribe el programa del ejercicio 1.7 usando solamente dos variables diferentes.</p> <pre><code># Pedimos el primer n\u00famero\nnum1 = float(input(\"Introduce el primer n\u00famero: \"))\n\n# Pedimos el segundo n\u00famero y sumamos directamente\nnum1 += float(input(\"Introduce el segundo n\u00famero: \"))\n\n# Pedimos el tercer n\u00famero y sumamos directamente\nnum1 += float(input(\"Introduce el tercer n\u00famero: \"))\n\n# Mostramos el resultado\nprint(f\"La suma de los tres n\u00fameros es: {num1}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Almacenamos el primer n\u00famero en <code>num1</code>. 2. Vamos acumulando la suma de los siguientes n\u00fameros usando <code>+=</code>. 3. Finalmente, imprimimos el resultado acumulado en <code>num1</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-129","title":"Ejercicio 1.2.9","text":"<p>\u00bfEs posible escribir el programa del ejercicio 1.7 sin usar variables? Int\u00e9ntalo.</p> <pre><code># Realizamos la suma directamente dentro del print sin almacenar en variables\nprint(f\"La suma de los tres n\u00fameros es: {float(input('Introduce el primer n\u00famero: ')) + float(input('Introduce el segundo n\u00famero: ')) + float(input('Introduce el tercer n\u00famero: '))}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Realizamos la suma directamente dentro de <code>print</code> y usamos <code>float</code> para convertir las entradas. 2. No se almacenan variables intermedias; el resultado se calcula y se muestra de inmediato.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1210","title":"Ejercicio 1.2.10","text":"<p>Escribir un programa que muestre por pantalla el resultado de la siguiente operaci\u00f3n aritm\u00e9tica:</p> \\[ ((3 + 2) / (2 * 5)) ^ 2 \\] <pre><code># Calculamos la operaci\u00f3n aritm\u00e9tica\nresultado = ((3 + 2) / (2 * 5)) ** 2\n\n# Mostramos el resultado\nprint(f\"El resultado de la operaci\u00f3n es: {resultado}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Se siguen las reglas de prioridad de operadores: par\u00e9ntesis, multiplicaci\u00f3n y divisi\u00f3n, y luego exponenciaci\u00f3n. 2. Mostramos el resultado con <code>print</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1211","title":"Ejercicio 1.2.11","text":"<p>Escribir un programa que lea un entero positivo \\( n \\) y despu\u00e9s muestre en pantalla la suma de todos los enteros desde 1 hasta \\( n \\).</p> <pre><code># Pedimos un n\u00famero entero positivo\nn = int(input(\"Introduce un n\u00famero entero positivo: \"))\n\n# Calculamos la suma de los primeros n n\u00fameros usando la f\u00f3rmula\nsuma = n * (n + 1) // 2\n\n# Mostramos el resultado\nprint(f\"La suma de los primeros {n} n\u00fameros enteros es: {suma}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos un n\u00famero entero positivo. 2. Usamos la f\u00f3rmula de la suma de los primeros \\( n \\) n\u00fameros enteros: \\( n(n+1)/2 \\). 3. Mostramos el resultado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1212","title":"Ejercicio 1.2.12","text":"<p>Escribir un programa que calcule el \u00edndice de masa corporal (IMC).</p> <pre><code># Pedimos el peso y la altura del usuario\npeso = float(input(\"Introduce tu peso en kg: \"))\naltura = float(input(\"Introduce tu altura en metros: \"))\n\n# Calculamos el IMC\nimc = peso / altura**2\n\n# Mostramos el resultado redondeado a dos decimales\nprint(f\"Tu \u00edndice de masa corporal es {imc:.2f}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el peso y la altura del usuario. 2. Usamos la f\u00f3rmula del IMC: \\( \\text{IMC} = \\frac{\\text{peso}}{\\text{altura}^2} \\). 3. Mostramos el IMC redondeado a dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1213","title":"Ejercicio 1.2.13","text":"<p>Escribe un programa que pida dos n\u00fameros y muestre el cociente y el resto de la divisi\u00f3n entera.</p> <pre><code># Pedimos dos n\u00fameros enteros\nn = int(input(\"Introduce el primer n\u00famero: \"))\nm = int(input(\"Introduce el segundo n\u00famero: \"))\n\n# Calculamos el cociente y el resto\ncociente = n // m\nresto = n % m\n\n# Mostramos el resultado\nprint(f\"La divisi\u00f3n de {n} entre {m} da un cociente {cociente} y un resto {resto}.\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos dos n\u00fameros enteros. 2. Calculamos el cociente con <code>//</code> y el resto con <code>%</code>. 3. Mostramos ambos valores.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1214","title":"Ejercicio 1.2.14","text":"<p>Calcula el peso total de un pedido de payasos y mu\u00f1ecas.</p> <pre><code># Definimos los pesos de cada art\u00edculo\npeso_payaso = 112  # gramos\npeso_muneca = 75   # gramos\n\n# Pedimos el n\u00famero de payasos y mu\u00f1ecas vendidos\nnum_payasos = int(input(\"N\u00famero de payasos vendidos: \"))\nnum_munecas = int(input(\"N\u00famero de mu\u00f1ecas vendidas: \"))\n\n# Calculamos el peso total del paquete\npeso_total = num_payasos * peso_payaso + num_munecas * peso_muneca\n\n# Mostramos el peso total\nprint(f\"El peso total del paquete es: {peso_total} gramos.\")\n</code></pre> <p>Explicaci\u00f3n: 1. Definimos el peso de un payaso y una mu\u00f1eca. 2. Pedimos la cantidad vendida de cada uno. 3. Calculamos el peso total multiplicando las cantidades por sus respectivos pesos.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1215","title":"Ejercicio 1.2.15","text":"<p>Calcula la cantidad de dinero en una cuenta de ahorros con un 4% de inter\u00e9s al a\u00f1o durante tres a\u00f1os.</p> <pre><code># Pedimos el monto inicial\nmonto_inicial = float(input(\"Introduce la cantidad de dinero depositada en la cuenta de ahorros: \"))\n\n# Definimos el inter\u00e9s anual\ninteres = 0.04\n\n# Calculamos el saldo despu\u00e9s de cada a\u00f1o\nsaldo_ano_1 = monto_inicial * (1 + interes)\nsaldo_ano_2 = saldo_ano_1 * (1 + interes)\nsaldo_ano_3 = saldo_ano_2 * (1 + interes)\n\n# Mostramos los saldos\nprint(f\"Saldo despu\u00e9s del primer a\u00f1o: {saldo_ano_1:.2f}\")\nprint(f\"Saldo despu\u00e9s del segundo a\u00f1o: {saldo_ano_2:.2f}\")\nprint(f\"Saldo despu\u00e9s del tercer a\u00f1o: {saldo_ano_3:.2f}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el monto inicial y definimos el inter\u00e9s anual. 2. Calculamos el saldo para cada a\u00f1o acumulando el inter\u00e9s. 3. Mostramos los resultados de cada a\u00f1o.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1216","title":"Ejercicio 1.2.16","text":"<p>Calcula el precio total de las barras de pan no frescas con descuento.</p> <pre><code># Definimos el precio de una barra de pan y el descuento\nprecio_barra = 3.49\ndescuento = 0.60\n\n# Pedimos el n\u00famero de barras vendidas no frescas\nbarras_no_frescas = int(input(\"Introduce el n\u00famero de barras no frescas vendidas: \"))\n\n# Calculamos el precio con descuento\nprecio_con_descuento = precio_barra * (1 - descuento)\n\n# Calculamos el coste total\ncoste_total = barras_no_frescas * precio_con_descuento\n\n# Mostramos los precios y el coste total\nprint(f\"Precio habitual de una barra de pan: {precio_barra}\u20ac\")\nprint(f\"Descuento: {descuento * 100}%\")\nprint(f\"Coste total de las barras no frescas: {coste_total:.2f}\u20ac\")\n</code></pre> <p>Explicaci\u00f3n: 1. Definimos el precio de una barra de pan y el descuento como constantes. 2. Pedimos al usuario la cantidad de barras vendidas. 3. Calculamos el precio con descuento y el coste total. 4. Mostramos la informaci\u00f3n relevante al usuario.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1217","title":"Ejercicio 1.2.17","text":"<p>Imprimir el nombre del usuario en l\u00edneas distintas seg\u00fan el n\u00famero dado.</p> <pre><code># Pedimos el nombre del usuario y el n\u00famero de repeticiones\nnombre = input(\"Introduce tu nombre: \")\nrepeticiones = int(input(\"Introduce un n\u00famero entero: \"))\n\n# Imprimimos el nombre tantas veces como el n\u00famero de repeticiones\nfor _ in range(repeticiones):\n    print(nombre)\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el nombre y el n\u00famero de repeticiones. 2. Usamos un bucle <code>for</code> para imprimir el nombre tantas veces como el n\u00famero dado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1218","title":"Ejercicio 1.2.18","text":"<p>Mostrar el nombre del usuario en diferentes formatos.</p> <pre><code># Pedimos el nombre completo del usuario\nnombre_completo = input(\"Introduce tu nombre completo: \")\n\n# Mostramos el nombre en min\u00fasculas, may\u00fasculas y con cada palabra capitalizada\nprint(nombre_completo.lower())\nprint(nombre_completo.upper())\nprint(nombre_completo.title())\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el nombre completo del usuario. 2. Mostramos el nombre en min\u00fasculas (<code>lower()</code>), may\u00fasculas (<code>upper()</code>) y con la primera letra de cada palabra en may\u00fascula (<code>title()</code>).</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1219","title":"Ejercicio 1.2.19","text":"<p>Mostrar la cantidad de letras del nombre en may\u00fasculas.</p> <pre><code># Pedimos el nombre del usuario\nnombre = input(\"Introduce tu nombre: \")\n\n# Calculamos la longitud del nombre (sin contar espacios)\nlongitud = len(nombre.replace(\" \", \"\"))\n\n# Mostramos el nombre en may\u00fasculas y el n\u00famero de letras\nprint(f\"{nombre.upper()} tiene {longitud} letras.\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el nombre del usuario. 2. Usamos <code>replace</code> para eliminar espacios y <code>len</code> para contar las letras. 3. Mostramos el nombre en may\u00fasculas y la cantidad de letras.</p> <p>Para resolver el ejercicio 1.2.19 sin utilizar funciones de string (<code>upper</code>, <code>replace</code>, etc.), necesitamos iterar por cada car\u00e1cter del nombre del usuario y contar los caracteres alfab\u00e9ticos manualmente. Adem\u00e1s, podemos convertir cada letra a may\u00fascula sumando o restando una diferencia en el valor ASCII. Vamos a ver c\u00f3mo se puede hacer:</p> <pre><code># Pedimos el nombre del usuario\nnombre = input(\"Introduce tu nombre: \")\n\n# Inicializamos el contador de letras\ncontador = 0\n\n# Inicializamos una nueva cadena para almacenar el nombre en may\u00fasculas\nnombre_mayusculas = \"\"\n\n# Iteramos por cada car\u00e1cter del nombre\nfor caracter in nombre:\n    # Verificamos si el car\u00e1cter es una letra\n    if 'a' &lt;= caracter &lt;= 'z':  # Si es una letra min\u00fascula\n        # Convertimos a may\u00fascula usando la diferencia de valores ASCII\n        nombre_mayusculas += chr(ord(caracter) - 32)\n        contador += 1\n    elif 'A' &lt;= caracter &lt;= 'Z':  # Si ya es una letra may\u00fascula\n        nombre_mayusculas += caracter\n        contador += 1\n    else:\n        # Si no es una letra, lo agregamos tal como est\u00e1 (por ejemplo, espacios)\n        nombre_mayusculas += caracter\n\n# Mostramos el resultado con el nombre en may\u00fasculas y el n\u00famero de letras\nprint(f\"{nombre_mayusculas} tiene {contador} letras.\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li> <p>Entrada del Nombre: Solicitamos el nombre del usuario con <code>input()</code> y lo guardamos en la variable <code>nombre</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li><code>contador</code>: Lleva el recuento de las letras alfab\u00e9ticas (ignorando los espacios u otros caracteres).</li> <li> <p><code>nombre_mayusculas</code>: Almacena el nombre en may\u00fasculas generado manualmente, sin usar funciones de cadenas.</p> </li> <li> <p>Iteraci\u00f3n y Contabilizaci\u00f3n:</p> </li> <li>Recorremos cada car\u00e1cter de <code>nombre</code>.</li> <li>Si el car\u00e1cter est\u00e1 entre <code>'a'</code> y <code>'z'</code> (es decir, es una letra min\u00fascula), lo convertimos a may\u00fascula restando 32 a su valor ASCII (<code>ord(caracter) - 32</code>) y lo agregamos a <code>nombre_mayusculas</code>.</li> <li>Si el car\u00e1cter ya es una letra may\u00fascula (<code>'A'</code> a <code>'Z'</code>), lo agregamos directamente.</li> <li> <p>Para cualquier otro car\u00e1cter (como un espacio), lo agregamos tal cual a <code>nombre_mayusculas</code> sin contarlo como letra.</p> </li> <li> <p>Resultado:</p> </li> <li>Mostramos el nombre en may\u00fasculas y el n\u00famero total de letras alfab\u00e9ticas contando tanto min\u00fasculas como may\u00fasculas.</li> </ol> <p>Esta implementaci\u00f3n no usa ninguna funci\u00f3n de cadena como <code>upper()</code>, <code>replace()</code>, o <code>len()</code> para la conversi\u00f3n o manipulaci\u00f3n.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1220","title":"Ejercicio 1.2.20","text":"<p>Extraer el n\u00famero de tel\u00e9fono sin prefijo y extensi\u00f3n.</p> <pre><code># Pedimos el n\u00famero de tel\u00e9fono en el formato especificado\ntelefono = input(\"Introduce el n\u00famero de tel\u00e9fono (formato +34-xxxxxxxxx-xx): \")\n\n# Dividimos el n\u00famero en partes y extraemos la parte principal\npartes = telefono.split('-')\nnumero_sin_prefijo_extension = partes[1]\n\n# Mostramos el n\u00famero sin prefijo y extensi\u00f3n\nprint(f\"El n\u00famero sin prefijo y extensi\u00f3n es: {numero_sin_prefijo_extension}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el n\u00famero de tel\u00e9fono y lo dividimos en partes usando <code>split('-')</code>. 2. Extraemos la parte central del n\u00famero. 3. Mostramos la parte principal sin prefijo ni extensi\u00f3n.</p> <p>Para resolver el Ejercicio 1.2.20 sin utilizar funciones de string (<code>split</code>, <code>replace</code>, etc.), necesitamos procesar el n\u00famero de tel\u00e9fono manualmente. Utilizaremos un enfoque de iteraci\u00f3n para identificar y extraer la parte que necesitamos.</p> <pre><code># Pedimos el n\u00famero de tel\u00e9fono con el formato especificado\ntelefono = input(\"Introduce el n\u00famero de tel\u00e9fono (formato +34-xxxxxxxxx-xx): \")\n\n# Inicializamos variables para almacenar la parte que necesitamos\nnumero_sin_prefijo_extension = \"\"\nencontrar_guion = 0  # Para contar cu\u00e1ntos guiones hemos encontrado\n\n# Iteramos por cada car\u00e1cter del n\u00famero de tel\u00e9fono\nfor caracter in telefono:\n    if caracter == \"-\":\n        # Incrementamos el contador cada vez que encontramos un guion\n        encontrar_guion += 1\n    elif encontrar_guion == 1:\n        # Si estamos en la parte del n\u00famero entre los guiones, lo a\u00f1adimos\n        numero_sin_prefijo_extension += caracter\n    elif encontrar_guion &gt; 1:\n        # Si encontramos m\u00e1s de un guion, salimos del bucle (ya hemos capturado el n\u00famero)\n        break\n\n# Mostramos el n\u00famero sin prefijo y extensi\u00f3n\nprint(f\"El n\u00famero sin prefijo y extensi\u00f3n es: {numero_sin_prefijo_extension}\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada del N\u00famero de Tel\u00e9fono:</li> <li> <p>Solicitamos al usuario que ingrese el n\u00famero de tel\u00e9fono en el formato <code>+34-xxxxxxxxx-xx</code> y lo almacenamos en la variable <code>telefono</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li><code>numero_sin_prefijo_extension</code>: Es una cadena vac\u00eda donde almacenaremos la parte del n\u00famero sin prefijo ni extensi\u00f3n.</li> <li> <p><code>encontrar_guion</code>: Un contador para rastrear cu\u00e1ntos guiones <code>-</code> hemos encontrado. Esto nos ayudar\u00e1 a saber en qu\u00e9 secci\u00f3n del n\u00famero nos encontramos:</p> <ul> <li><code>encontrar_guion == 0</code>: Parte del prefijo (<code>+34</code>).</li> <li><code>encontrar_guion == 1</code>: Parte central (el n\u00famero que queremos extraer).</li> <li><code>encontrar_guion &gt;= 2</code>: Parte de la extensi\u00f3n.</li> </ul> </li> <li> <p>Iteraci\u00f3n y Extracci\u00f3n del N\u00famero:</p> </li> <li>Recorremos cada car\u00e1cter de <code>telefono</code>.</li> <li>Si encontramos un guion <code>-</code>, incrementamos <code>encontrar_guion</code>.</li> <li>Si <code>encontrar_guion</code> es 1, estamos en la parte central del n\u00famero y lo a\u00f1adimos a <code>numero_sin_prefijo_extension</code>.</li> <li> <p>Si <code>encontrar_guion</code> es mayor que 1, ya hemos pasado por la parte que necesitamos y salimos del bucle con <code>break</code>.</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Finalmente, mostramos <code>numero_sin_prefijo_extension</code>, que contiene la parte del n\u00famero de tel\u00e9fono sin prefijo y sin extensi\u00f3n.</li> </ol> <p>Esta implementaci\u00f3n no utiliza ninguna funci\u00f3n de cadenas (<code>split</code>, <code>replace</code>, <code>find</code>, etc.) y opera \u00fanicamente con un bucle y comparaciones directas.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1221","title":"Ejercicio 1.2.21","text":"<p>Mostrar una frase invertida.</p> <pre><code># Pedimos una frase al usuario\nfrase = input(\"Introduce una frase: \")\n\n# Invertimos la frase usando slicing\nfrase_invertida = frase[::-1]\n\n# Mostramos la frase invertida\nprint(f\"La frase invertida es: {frase_invertida}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos una frase del usuario. 2. Usamos <code>[::-1]</code> para invertir la frase. 3. Mostramos la frase invertida.</p> <p>Para resolver el Ejercicio 1.2.21 (invertir una frase) sin utilizar funciones de cadenas (<code>[::-1]</code>, <code>reversed</code>, etc.), necesitaremos utilizar un enfoque con bucles para construir la frase invertida manualmente.</p> <pre><code># Pedimos una frase al usuario\nfrase = input(\"Introduce una frase: \")\n\n# Inicializamos una variable para almacenar la frase invertida\nfrase_invertida = \"\"\n\n# Iteramos por la frase desde el \u00faltimo car\u00e1cter hasta el primero\nindice = len(frase) - 1  # Comenzamos desde el \u00faltimo \u00edndice de la frase\nwhile indice &gt;= 0:\n    # A\u00f1adimos el car\u00e1cter actual a la nueva frase invertida\n    frase_invertida += frase[indice]\n    # Disminuimos el \u00edndice para recorrer hacia atr\u00e1s\n    indice -= 1\n\n# Mostramos la frase invertida\nprint(f\"La frase invertida es: {frase_invertida}\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de la Frase:</li> <li> <p>Solicitamos la frase al usuario y la almacenamos en la variable <code>frase</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li><code>frase_invertida</code> es una cadena vac\u00eda que usaremos para almacenar la frase invertida.</li> <li> <p><code>indice</code> se inicializa como el \u00edndice del \u00faltimo car\u00e1cter de <code>frase</code> (<code>len(frase) - 1</code>).</p> </li> <li> <p>Bucle <code>while</code> para Inversi\u00f3n de la Frase:</p> </li> <li>Usamos un bucle <code>while</code> que recorre la frase desde el final hasta el principio.</li> <li>En cada iteraci\u00f3n, a\u00f1adimos el car\u00e1cter de <code>frase[indice]</code> a <code>frase_invertida</code>.</li> <li>Reducimos <code>indice</code> en cada iteraci\u00f3n (<code>indice -= 1</code>) para movernos hacia atr\u00e1s en la frase.</li> <li> <p>El bucle se detiene cuando <code>indice</code> llega a <code>-1</code>, lo que significa que hemos recorrido toda la frase desde el \u00faltimo hasta el primer car\u00e1cter.</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Finalmente, mostramos <code>frase_invertida</code> que contiene la frase en orden inverso.</li> </ol> <p>Con este enfoque, logramos invertir la frase sin utilizar ninguna funci\u00f3n de cadena (<code>[::-1]</code>, <code>reversed</code>, etc.), trabajando \u00fanicamente con un bucle y acceso directo a los \u00edndices de la cadena.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1222","title":"Ejercicio 1.2.22","text":"<p>Reemplazar una vocal en la frase con su versi\u00f3n may\u00fascula.</p> <pre><code># Pedimos una frase y una vocal al usuario\nfrase = input(\"Introduce una frase: \")\nvocal = input(\"Introduce una vocal: \")\n\n# Reemplazamos todas las ocurrencias de la vocal por su versi\u00f3n en may\u00fascula\nfrase_modificada = frase.replace(vocal, vocal.upper())\n\n# Mostramos la frase modificada\nprint(f\"La frase modificada es: {frase_modificada}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos la frase y la vocal. 2. Usamos <code>replace</code> para cambiar todas las apariciones de la vocal por su versi\u00f3n may\u00fascula. 3. Mostramos la frase modificada.</p> <p>Para resolver el Ejercicio 1.2.22 (reemplazar una vocal en la frase con su versi\u00f3n may\u00fascula) sin utilizar funciones de cadenas como <code>replace</code> o <code>upper</code>, necesitamos iterar por cada car\u00e1cter de la frase, verificar si coincide con la vocal y realizar la conversi\u00f3n a may\u00fascula manualmente.</p> <pre><code># Pedimos una frase y una vocal al usuario\nfrase = input(\"Introduce una frase: \")\nvocal = input(\"Introduce una vocal: \")\n\n# Inicializamos una nueva cadena para almacenar la frase modificada\nfrase_modificada = \"\"\n\n# Calculamos la diferencia de valor ASCII para convertir min\u00fascula a may\u00fascula\ndiferencia_ascii = ord('A') - ord('a')\n\n# Iteramos por cada car\u00e1cter de la frase\nfor caracter in frase:\n    if caracter == vocal:\n        # Si el car\u00e1cter coincide con la vocal (en min\u00fascula), lo convertimos a may\u00fascula\n        caracter_mayuscula = chr(ord(caracter) + diferencia_ascii)\n        frase_modificada += caracter_mayuscula\n    else:\n        # Si no coincide, lo agregamos tal como est\u00e1\n        frase_modificada += caracter\n\n# Mostramos la frase modificada\nprint(f\"La frase modificada es: {frase_modificada}\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li>Solicitamos la frase y la vocal al usuario.</li> <li> <p>Almacenamos la frase en la variable <code>frase</code> y la vocal en la variable <code>vocal</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li><code>frase_modificada</code> es una cadena vac\u00eda que usaremos para almacenar la nueva frase con las vocales en may\u00fascula.</li> <li> <p><code>diferencia_ascii</code> se calcula como la diferencia entre los c\u00f3digos ASCII de <code>'A'</code> y <code>'a'</code>. Esta diferencia es igual a 32 y se usar\u00e1 para convertir una letra min\u00fascula a su correspondiente letra may\u00fascula.</p> </li> <li> <p>Iteraci\u00f3n y Modificaci\u00f3n Manual:</p> </li> <li>Recorremos cada car\u00e1cter de <code>frase</code>.</li> <li>Si el car\u00e1cter coincide con <code>vocal</code> (se supone que es una vocal en min\u00fascula), la convertimos a may\u00fascula sumando <code>diferencia_ascii</code> a su c\u00f3digo ASCII (<code>ord(caracter) + diferencia_ascii</code>) y obtenemos la letra may\u00fascula con <code>chr()</code>.</li> <li> <p>Si no coincide con la vocal, simplemente agregamos el car\u00e1cter tal como est\u00e1 a <code>frase_modificada</code>.</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Mostramos <code>frase_modificada</code>, que contiene la frase original con las vocales convertidas a may\u00fasculas.</li> </ol> <p>Este enfoque no utiliza ninguna funci\u00f3n de cadenas como <code>replace</code> o <code>upper</code> y realiza las conversiones de caracteres manualmente utilizando los c\u00f3digos ASCII (<code>ord</code> y <code>chr</code>).</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1223","title":"Ejercicio 1.2.23","text":"<p>Mostrar un correo con un dominio diferente.</p> <pre><code># Pedimos el correo electr\u00f3nico del usuario\ncorreo = input(\"Introduce tu correo electr\u00f3nico: \")\n\n# Separamos el nombre de usuario del dominio y cambiamos el dominio\nnombre_usuario = correo.split('@')[0]\ncorreo_nuevo = nombre_usuario + '@ceu.es'\n\n# Mostramos el correo modificado\nprint(f\"Tu nuevo correo es: {correo_nuevo}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el correo y separamos la parte antes del <code>@</code>. 2. Formamos un nuevo correo con el dominio <code>ceu.es</code>. 3. Mostramos el nuevo correo.</p> <p>Para resolver el Ejercicio 1.2.23 (modificar un correo electr\u00f3nico cambiando el dominio a <code>ceu.es</code>) sin utilizar funciones de cadenas como <code>split</code>, <code>replace</code>, etc., necesitamos recorrer la cadena manualmente y encontrar la posici\u00f3n del <code>@</code>. Luego construiremos el nuevo correo.</p> <pre><code># Pedimos el correo electr\u00f3nico del usuario\ncorreo = input(\"Introduce tu correo electr\u00f3nico: \")\n\n# Inicializamos variables para almacenar el nombre de usuario y el nuevo correo\nnombre_usuario = \"\"\nnuevo_correo = \"\"\n\n# Recorremos la cadena del correo hasta encontrar el s\u00edmbolo '@'\nfor caracter in correo:\n    if caracter == \"@\":\n        # Una vez encontrado el '@', dejamos de agregar caracteres\n        break\n    else:\n        # Agregamos los caracteres antes del '@' al nombre de usuario\n        nombre_usuario += caracter\n\n# Construimos el nuevo correo electr\u00f3nico a\u00f1adiendo el dominio ceu.es\nnuevo_correo = nombre_usuario + \"@ceu.es\"\n\n# Mostramos el nuevo correo electr\u00f3nico\nprint(f\"Tu nuevo correo es: {nuevo_correo}\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li> <p>Solicitamos al usuario que introduzca su correo electr\u00f3nico y lo almacenamos en la variable <code>correo</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li><code>nombre_usuario</code>: Una cadena vac\u00eda que utilizaremos para almacenar los caracteres del correo antes del <code>@</code>.</li> <li> <p><code>nuevo_correo</code>: Se usar\u00e1 para construir el nuevo correo con el dominio <code>@ceu.es</code>.</p> </li> <li> <p>Iteraci\u00f3n Manual para Extraer el Nombre de Usuario:</p> </li> <li>Usamos un bucle <code>for</code> para recorrer cada car\u00e1cter del correo.</li> <li>Si encontramos el car\u00e1cter <code>@</code>, detenemos el bucle con <code>break</code> (no necesitamos m\u00e1s caracteres).</li> <li> <p>Si el car\u00e1cter no es <code>@</code>, lo agregamos a <code>nombre_usuario</code>.</p> </li> <li> <p>Construcci\u00f3n del Nuevo Correo:</p> </li> <li> <p>Concatenamos <code>nombre_usuario</code> con <code>@ceu.es</code> para formar <code>nuevo_correo</code>.</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Imprimimos <code>nuevo_correo</code>, que contiene el nombre de usuario original y el dominio <code>ceu.es</code>.</li> </ol> <p>Esta soluci\u00f3n evita el uso de funciones como <code>split</code> o <code>replace</code> y opera manualmente sobre la cadena con bucles y comparaciones de caracteres.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1224","title":"Ejercicio 1.2.24","text":"<p>Mostrar el n\u00famero de euros y c\u00e9ntimos de un precio.</p> <pre><code># Pedimos el precio del producto en euros con dos decimales\nprecio = input(\"Introduce el precio del producto en euros (ejemplo: 12.34): \")\n\n# Separamos el precio en euros y c\u00e9ntimos\neuros, centimos = precio.split('.')\n\n# Mostramos el resultado\nprint(f\"El n\u00famero de euros es: {euros} y el n\u00famero de c\u00e9ntimos es: {centimos}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos el precio en formato de cadena. 2. Dividimos la cadena usando <code>split('.')</code>. 3. Mostramos los euros y c\u00e9ntimos por separado.</p> <p>Para resolver el Ejercicio 1.2.24 (mostrar el n\u00famero de euros y c\u00e9ntimos de un precio) sin utilizar funciones de cadena como <code>split</code> o <code>replace</code>, necesitamos identificar manualmente el punto decimal en la cadena y separar los euros de los c\u00e9ntimos.</p> <pre><code># Pedimos el precio del producto con dos decimales al usuario\nprecio = input(\"Introduce el precio del producto en euros (ejemplo: 12.34): \")\n\n# Inicializamos variables para almacenar euros y c\u00e9ntimos\neuros = \"\"\ncentimos = \"\"\nes_decimal = False  # Bandera para saber si estamos en la parte de los c\u00e9ntimos\n\n# Iteramos por cada car\u00e1cter del precio ingresado\nfor caracter in precio:\n    if caracter == \".\":\n        # Cuando encontramos el punto decimal, cambiamos la bandera\n        es_decimal = True\n    elif es_decimal:\n        # Si estamos en la parte decimal, agregamos el car\u00e1cter a c\u00e9ntimos\n        centimos += caracter\n    else:\n        # Si no estamos en la parte decimal, agregamos el car\u00e1cter a euros\n        euros += caracter\n\n# Mostramos el resultado de euros y c\u00e9ntimos\nprint(f\"El n\u00famero de euros es: {euros} y el n\u00famero de c\u00e9ntimos es: {centimos}\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada del Precio:</li> <li> <p>Solicitamos al usuario que introduzca el precio del producto con dos decimales, y lo almacenamos en la variable <code>precio</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li><code>euros</code> y <code>centimos</code> son cadenas vac\u00edas que se usar\u00e1n para almacenar la parte entera (euros) y la parte decimal (c\u00e9ntimos).</li> <li> <p><code>es_decimal</code> es una bandera booleana que se utiliza para rastrear si hemos encontrado el punto decimal en la cadena. Se inicializa en <code>False</code>.</p> </li> <li> <p>Iteraci\u00f3n Manual para Separar Euros y C\u00e9ntimos:</p> </li> <li>Usamos un bucle <code>for</code> para recorrer cada car\u00e1cter de <code>precio</code>.</li> <li>Si encontramos el car\u00e1cter <code>.</code> (punto decimal), activamos la bandera <code>es_decimal</code> para indicar que los siguientes caracteres pertenecen a los c\u00e9ntimos.</li> <li>Si <code>es_decimal</code> es <code>True</code>, agregamos el car\u00e1cter a <code>centimos</code>.</li> <li> <p>Si <code>es_decimal</code> es <code>False</code>, agregamos el car\u00e1cter a <code>euros</code> (lo que significa que a\u00fan estamos en la parte de euros).</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Finalmente, imprimimos <code>euros</code> y <code>centimos</code> por separado.</li> </ol> <p>Este enfoque permite separar manualmente la parte entera y la parte decimal del precio sin usar funciones de cadena (<code>split</code>, <code>partition</code>, <code>find</code>, etc.).</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1225","title":"Ejercicio 1.2.25","text":"<p>Mostrar d\u00eda, mes y a\u00f1o de una fecha introducida.</p> <pre><code># Pedimos la fecha de nacimiento en formato dd/mm/aaaa\nfecha = input(\"Introduce tu fecha de nacimiento (dd/mm/aaaa): \")\n\n# Separamos la fecha en d\u00eda, mes y a\u00f1o\ndia, mes, anio = fecha.split('/')\n\n# Mostramos cada componente por separado\nprint(f\"D\u00eda: {dia}\")\nprint(f\"Mes: {mes}\")\nprint(f\"A\u00f1o: {anio}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos la fecha en formato <code>dd/mm/aaaa</code>. 2. Separamos la fecha en d\u00eda, mes y a\u00f1o usando <code>split('/')</code>. 3. Mostramos cada componente por separado.</p> <p>Para resolver el Ejercicio 1.2.25 (mostrar el d\u00eda, mes y a\u00f1o de una fecha) sin utilizar funciones de cadena como <code>split</code>, <code>replace</code>, etc., necesitamos procesar manualmente la cadena, identificar las posiciones de los caracteres <code>/</code> (separadores) y extraer las partes correspondientes.</p> <pre><code># Pedimos la fecha de nacimiento en formato dd/mm/aaaa\nfecha = input(\"Introduce tu fecha de nacimiento (dd/mm/aaaa): \")\n\n# Inicializamos variables para almacenar el d\u00eda, mes y a\u00f1o\ndia = \"\"\nmes = \"\"\nanio = \"\"\n\n# Contadores para los \u00edndices y delimitadores\ncontador = 0  # Contador para saber en qu\u00e9 parte de la fecha estamos (0: d\u00eda, 1: mes, 2: a\u00f1o)\n\n# Recorremos la fecha manualmente\nfor caracter in fecha:\n    if caracter == \"/\":\n        # Si encontramos un '/', aumentamos el contador y pasamos a la siguiente parte\n        contador += 1\n    else:\n        # Si estamos en la parte del d\u00eda (contador == 0)\n        if contador == 0:\n            dia += caracter\n        # Si estamos en la parte del mes (contador == 1)\n        elif contador == 1:\n            mes += caracter\n        # Si estamos en la parte del a\u00f1o (contador == 2)\n        elif contador == 2:\n            anio += caracter\n\n# Mostramos cada componente de la fecha por separado\nprint(f\"D\u00eda: {dia}\")\nprint(f\"Mes: {mes}\")\nprint(f\"A\u00f1o: {anio}\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de la Fecha:</li> <li> <p>Solicitamos al usuario que introduzca la fecha en formato <code>dd/mm/aaaa</code> y almacenamos la cadena en la variable <code>fecha</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li><code>dia</code>, <code>mes</code>, <code>anio</code> se inicializan como cadenas vac\u00edas para almacenar las respectivas partes de la fecha.</li> <li> <p><code>contador</code> se utiliza para saber en qu\u00e9 parte de la fecha estamos:</p> <ul> <li><code>contador == 0</code>: Indica que estamos en la parte del d\u00eda.</li> <li><code>contador == 1</code>: Indica que estamos en la parte del mes.</li> <li><code>contador == 2</code>: Indica que estamos en la parte del a\u00f1o.</li> </ul> </li> <li> <p>Iteraci\u00f3n Manual para Separar D\u00eda, Mes y A\u00f1o:</p> </li> <li>Usamos un bucle <code>for</code> para recorrer cada car\u00e1cter de <code>fecha</code>.</li> <li>Cuando encontramos el car\u00e1cter <code>/</code>, incrementamos <code>contador</code> y pasamos a la siguiente parte de la fecha.</li> <li>Si <code>contador</code> es 0, agregamos el car\u00e1cter a <code>dia</code>.</li> <li>Si <code>contador</code> es 1, agregamos el car\u00e1cter a <code>mes</code>.</li> <li> <p>Si <code>contador</code> es 2, agregamos el car\u00e1cter a <code>anio</code>.</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Finalmente, imprimimos <code>dia</code>, <code>mes</code> y <code>anio</code> por separado.</li> </ol> <p>Este enfoque evita el uso de funciones de cadena como <code>split</code>, <code>partition</code>, <code>find</code>, etc., y realiza el procesamiento de la cadena de manera manual, utilizando iteraci\u00f3n y contadores para separar las partes de la fecha.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1226","title":"Ejercicio 1.2.26","text":"<p>Mostrar cada producto en una l\u00ednea distinta.</p> <pre><code># Pedimos la lista de productos separados por comas\nproductos = input(\"Introduce los productos de la cesta de la compra, separados por comas: \")\n\n# Separamos los productos usando `split` y mostramos cada uno en una l\u00ednea\nfor producto in productos.split(','):\n    print(producto.strip())  # Usamos strip() para eliminar espacios adicionales\n</code></pre> <p>Explicaci\u00f3n: 1. Leemos la lista de productos. 2. Separamos los productos usando <code>split(',')</code>. 3. Mostramos cada producto en una l\u00ednea diferente.</p> <p>Para resolver el Ejercicio 1.2.26 (mostrar cada producto de una lista separados por comas en l\u00edneas distintas) sin utilizar funciones de cadena como <code>split</code>, <code>replace</code>, etc., necesitamos recorrer manualmente la cadena y detectar los caracteres <code>,</code> para separar los productos.</p> <pre><code># Pedimos la lista de productos separados por comas al usuario\nproductos = input(\"Introduce los productos de la cesta de la compra, separados por comas: \")\n\n# Inicializamos una variable para almacenar el nombre de cada producto temporalmente\nproducto_actual = \"\"\n\n# Recorremos la cadena de productos manualmente\nfor caracter in productos:\n    if caracter == \",\":\n        # Cuando encontramos una coma, mostramos el producto acumulado y reiniciamos `producto_actual`\n        print(producto_actual.strip())  # Imprimimos el producto acumulado, quitando espacios adicionales\n        producto_actual = \"\"\n    else:\n        # Si no es una coma, agregamos el car\u00e1cter al `producto_actual`\n        producto_actual += caracter\n\n# Mostramos el \u00faltimo producto si no hay coma al final\nif producto_actual:\n    print(producto_actual.strip())\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de la Lista de Productos:</li> <li> <p>Solicitamos al usuario que introduzca la lista de productos separados por comas y lo almacenamos en la variable <code>productos</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li> <p><code>producto_actual</code> es una cadena vac\u00eda que utilizaremos para acumular cada producto individualmente a medida que recorremos la lista de productos.</p> </li> <li> <p>Iteraci\u00f3n Manual para Separar y Mostrar Productos:</p> </li> <li>Usamos un bucle <code>for</code> para recorrer cada car\u00e1cter en la cadena <code>productos</code>.</li> <li>Si encontramos una coma <code>,</code>, imprimimos <code>producto_actual</code> (que contiene el nombre de un producto) y luego lo reiniciamos a una cadena vac\u00eda para el pr\u00f3ximo producto.</li> <li> <p>Si el car\u00e1cter no es una coma, lo agregamos a <code>producto_actual</code>.</p> </li> <li> <p>Mostrar el \u00daltimo Producto:</p> </li> <li>Al final del bucle, si <code>producto_actual</code> no est\u00e1 vac\u00edo (es decir, si no terminamos en una coma), mostramos el \u00faltimo producto acumulado.</li> <li>Usamos <code>strip()</code> en <code>print</code> solo para eliminar posibles espacios adicionales alrededor de los nombres, pero esto no afecta la cadena <code>producto_actual</code> internamente.</li> </ol> <p>Este enfoque nos permite separar y mostrar los productos de la lista manualmente, sin usar funciones como <code>split</code> o <code>replace</code>, y trabajando \u00fanicamente con bucles y comparaciones de caracteres.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1227","title":"Ejercicio 1.2.27","text":"<p>En este ejercicio, pedimos al usuario que introduzca el nombre de un producto, su precio y el n\u00famero de unidades. Luego mostramos el nombre seguido del precio con 6 d\u00edgitos enteros y 2 decimales, el n\u00famero de unidades con 3 d\u00edgitos y el coste total con 8 d\u00edgitos enteros y 2 decimales.</p> <pre><code># Pedimos al usuario los datos del producto\nnombre_producto = input(\"Introduce el nombre del producto: \")\nprecio = float(input(\"Introduce el precio del producto: \"))\nunidades = int(input(\"Introduce el n\u00famero de unidades: \"))\n\n# Calculamos el coste total\ncoste_total = precio * unidades\n\n# Mostramos el resultado formateado\n# {:6.2f} -&gt; 6 d\u00edgitos enteros y 2 decimales para el precio\n# {:3d} -&gt; 3 d\u00edgitos para las unidades\n# {:8.2f} -&gt; 8 d\u00edgitos enteros y 2 decimales para el coste total\nprint(f\"{nombre_producto}: {precio:6.2f}\u20ac {unidades:3d} unidades, Coste total: {coste_total:8.2f}\u20ac\")\n</code></pre> <p>Explicaci\u00f3n: 1. Pedimos al usuario el nombre del producto, el precio y el n\u00famero de unidades. 2. Calculamos el coste total multiplicando el precio por las unidades. 3. Usamos la sintaxis de formato <code>{precio:6.2f}</code>, <code>{unidades:3d}</code>, <code>{coste_total:8.2f}</code> para mostrar el precio con 6 d\u00edgitos enteros y 2 decimales, las unidades con 3 d\u00edgitos y el coste total con 8 d\u00edgitos enteros y 2 decimales.</p> <p>Para hacer este ejercicio sin usar funciones de cadena (<code>format</code>, <code>f-strings</code>, etc.), necesitaremos construir manualmente la salida usando bucles y concatenaci\u00f3n. Vamos a realizar esto respetando el formato solicitado.</p> <pre><code># Pedimos al usuario los datos del producto\nnombre_producto = input(\"Introduce el nombre del producto: \")\nprecio = float(input(\"Introduce el precio del producto: \"))\nunidades = int(input(\"Introduce el n\u00famero de unidades: \"))\n\n# Calculamos el coste total\ncoste_total = precio * unidades\n\n# Convertimos el precio y el coste total a cadena con dos decimales manualmente\nprecio_str = str(int(precio)).rjust(4, ' ') + \".\" + str(int((precio * 100) % 100)).zfill(2)\ncoste_total_str = str(int(coste_total)).rjust(6, ' ') + \".\" + str(int((coste_total * 100) % 100)).zfill(2)\n\n# Convertimos el n\u00famero de unidades a cadena con 3 d\u00edgitos manualmente\nunidades_str = str(unidades).rjust(3, ' ')\n\n# Construimos la cadena final de salida\nsalida = nombre_producto + \": \" + precio_str + \"\u20ac \" + unidades_str + \" unidades, Coste total: \" + coste_total_str + \"\u20ac\"\n\n# Mostramos la cadena final\nprint(salida)\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li> <p>Pedimos el nombre del producto, el precio y el n\u00famero de unidades, como en la versi\u00f3n normal.</p> </li> <li> <p>C\u00e1lculos:</p> </li> <li> <p>Calculamos el coste total del producto multiplicando <code>precio</code> por <code>unidades</code>.</p> </li> <li> <p>Conversi\u00f3n y Formateo Manual:</p> </li> <li> <p>Para convertir el precio y el coste total a cadenas con dos decimales sin usar <code>format</code> o <code>f-strings</code>, realizamos lo siguiente:</p> <ul> <li><code>str(int(precio))</code> obtiene la parte entera del precio.</li> <li><code>str(int((precio * 100) % 100)).zfill(2)</code> obtiene la parte decimal multiplicando por 100 y luego extrayendo el resto (% 100). La usamos para tener siempre dos d\u00edgitos, incluso si es 0.</li> <li><code>rjust(n, ' ')</code> y <code>zfill(n)</code> nos permiten rellenar con espacios o ceros a la izquierda para asegurar el tama\u00f1o correcto.</li> </ul> </li> <li> <p>Formateo de Unidades:</p> </li> <li> <p>Convertimos <code>unidades</code> a una cadena con un tama\u00f1o m\u00ednimo de 3 caracteres usando <code>rjust(3, ' ')</code>, para a\u00f1adir espacios a la izquierda si el n\u00famero tiene menos de 3 d\u00edgitos.</p> </li> <li> <p>Construcci\u00f3n de la Salida:</p> </li> <li> <p>Concatenamos todas las cadenas con los espacios y s\u00edmbolos requeridos para construir la cadena final, <code>salida</code>.</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Imprimimos la cadena <code>salida</code>, que cumple con el formato especificado.</li> </ol> <p>Este enfoque evita el uso de cualquier funci\u00f3n de formateo o manipulaci\u00f3n avanzada de cadenas y se basa \u00fanicamente en operaciones aritm\u00e9ticas, conversi\u00f3n b\u00e1sica de tipos (<code>str</code>), y alineaci\u00f3n manual (<code>rjust</code>, <code>zfill</code>).</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1228","title":"Ejercicio 1.2.28","text":"<p>En este ejercicio, vamos a calcular el \u00e1rea de un tri\u00e1ngulo a partir de sus tres lados usando la f\u00f3rmula de Her\u00f3n. La f\u00f3rmula es la siguiente:</p> \\[ A = \\sqrt{s \\times (s - a) \\times (s - b) \\times (s - c)} \\] <p>donde \\( s \\) es el semiper\u00edmetro del tri\u00e1ngulo y se calcula como:</p> \\[ s = \\frac{a + b + c}{2} \\] <pre><code>import math\n\n# Pedimos al usuario los tres lados del tri\u00e1ngulo\na = float(input(\"Introduce el primer lado del tri\u00e1ngulo: \"))\nb = float(input(\"Introduce el segundo lado del tri\u00e1ngulo: \"))\nc = float(input(\"Introduce el tercer lado del tri\u00e1ngulo: \"))\n\n# Calculamos el semiper\u00edmetro\ns = (a + b + c) / 2\n\n# Aplicamos la f\u00f3rmula de Her\u00f3n para calcular el \u00e1rea\narea = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n# Mostramos el resultado del \u00e1rea con dos decimales\nprint(f\"El \u00e1rea del tri\u00e1ngulo es: {area:.2f}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Pedimos al usuario que introduzca los tres lados del tri\u00e1ngulo. 2. Calculamos el semiper\u00edmetro \\( s \\) como la mitad de la suma de los lados. 3. Usamos la f\u00f3rmula de Her\u00f3n para calcular el \u00e1rea. 4. Mostramos el \u00e1rea con dos decimales usando <code>print</code> con formato.</p> <p>Para realizar el c\u00e1lculo sin utilizar funciones de cadenas, ni m\u00f3dulos como <code>math</code>, necesitamos implementar manualmente la ra\u00edz cuadrada usando el m\u00e9todo de aproximaci\u00f3n de Newton-Raphson.</p> <pre><code># Pedimos al usuario los tres lados del tri\u00e1ngulo\na = float(input(\"Introduce el primer lado del tri\u00e1ngulo: \"))\nb = float(input(\"Introduce el segundo lado del tri\u00e1ngulo: \"))\nc = float(input(\"Introduce el tercer lado del tri\u00e1ngulo: \"))\n\n# Calculamos el semiper\u00edmetro\ns = (a + b + c) / 2\n\n# Calculamos el \u00e1rea usando la f\u00f3rmula de Her\u00f3n, sin usar math.sqrt\n# Implementamos la ra\u00edz cuadrada manualmente usando el m\u00e9todo de Newton-Raphson\n\n# Valor inicial para la ra\u00edz cuadrada (semilla)\ndef raiz_cuadrada(valor, precision=0.00001):\n    # Aseguramos que valor sea positivo para evitar errores\n    if valor &lt; 0:\n        return -1\n    x = valor  # Valor inicial\n    while True:\n        raiz = 0.5 * (x + valor / x)\n        if abs(raiz - x) &lt; precision:  # Condici\u00f3n de precisi\u00f3n\n            return raiz\n        x = raiz\n\n# Aplicamos la f\u00f3rmula de Her\u00f3n manualmente\narea_sin_raiz = s * (s - a) * (s - b) * (s - c)\narea = raiz_cuadrada(area_sin_raiz)\n\n# Convertimos el \u00e1rea a una cadena con dos decimales manualmente\narea_entera = int(area)  # Parte entera del \u00e1rea\narea_decimal = int((area * 100) % 100)  # Parte decimal del \u00e1rea\n\n# Construcci\u00f3n de la cadena del \u00e1rea sin usar funciones de cadena\narea_str = str(area_entera) + \".\" + (str(area_decimal) if area_decimal &gt;= 10 else \"0\" + str(area_decimal))\n\n# Mostramos el resultado del \u00e1rea\nprint(f\"El \u00e1rea del tri\u00e1ngulo es: {area_str}\")\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li> <p>Solicitamos los tres lados del tri\u00e1ngulo y los convertimos a <code>float</code>.</p> </li> <li> <p>C\u00e1lculo del Semiper\u00edmetro:</p> </li> <li> <p>Calculamos el semiper\u00edmetro \\( s \\) usando la f\u00f3rmula \\( s = \\frac{a + b + c}{2} \\).</p> </li> <li> <p>Implementaci\u00f3n de la Ra\u00edz Cuadrada:</p> </li> <li> <p>Implementamos una funci\u00f3n <code>raiz_cuadrada</code> que calcula la ra\u00edz cuadrada manualmente usando el m\u00e9todo de aproximaci\u00f3n de Newton-Raphson:</p> <ul> <li>Dado un valor inicial \\( x \\), la f\u00f3rmula de iteraci\u00f3n es: \\( \\text{raiz} = 0.5 \\times (x + \\frac{\\text{valor}}{x}) \\).</li> <li>La iteraci\u00f3n contin\u00faa hasta que la diferencia entre \\( x \\) y <code>raiz</code> sea menor que la precisi\u00f3n deseada.</li> </ul> </li> <li> <p>Aplicaci\u00f3n de la F\u00f3rmula de Her\u00f3n:</p> </li> <li>Calculamos el valor de \\( s \\times (s - a) \\times (s - b) \\times (s - c) \\).</li> <li> <p>Usamos <code>raiz_cuadrada</code> para obtener la ra\u00edz cuadrada de este valor, obteniendo as\u00ed el \u00e1rea del tri\u00e1ngulo.</p> </li> <li> <p>Formateo Manual de Decimales:</p> </li> <li>Calculamos la parte entera y la parte decimal del \u00e1rea manualmente.</li> <li> <p>Concatenamos las partes para formar <code>area_str</code> con dos decimales.</p> </li> <li> <p>Mostrar el Resultado:</p> </li> <li>Mostramos el \u00e1rea del tri\u00e1ngulo en el formato deseado sin usar funciones como <code>format</code> o <code>f-strings</code>.</li> </ol> <p>Este enfoque implementa el c\u00e1lculo y formateo manualmente, evitando el uso de funciones de cadena o del m\u00f3dulo <code>math</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1229-generar-un-numero-aleatorio-entre-dos-valores","title":"Ejercicio 1.2.29 - Generar un N\u00famero Aleatorio entre dos Valores","text":"<p>En este ejercicio, vamos a generar un n\u00famero aleatorio entre dos valores introducidos por el usuario. La forma m\u00e1s com\u00fan de hacerlo en Python es usando la funci\u00f3n <code>randint</code> del m\u00f3dulo <code>random</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#version-normal","title":"Versi\u00f3n Normal","text":"<pre><code>import random\n\n# Pedimos al usuario los dos valores\nvalor_inferior = int(input(\"Introduce el valor inferior: \"))\nvalor_superior = int(input(\"Introduce el valor superior: \"))\n\n# Generamos un n\u00famero aleatorio entre valor_inferior y valor_superior\nnumero_aleatorio = random.randint(valor_inferior, valor_superior)\n\n# Mostramos el n\u00famero aleatorio generado\nprint(f\"El n\u00famero aleatorio generado entre {valor_inferior} y {valor_superior} es: {numero_aleatorio}\")\n</code></pre> <p>Explicaci\u00f3n: 1. Importamos el m\u00f3dulo <code>random</code>. 2. Pedimos al usuario que introduzca los valores inferior y superior. 3. Usamos <code>random.randint(valor_inferior, valor_superior)</code> para generar un n\u00famero aleatorio entre los dos valores. 4. Mostramos el n\u00famero aleatorio generado.</p> <p>Para realizar esto sin funciones de cadena (<code>print</code>, <code>format</code>, <code>f-string</code>, etc.) y sin usar <code>random.randint</code>, implementaremos nuestro propio generador de n\u00fameros aleatorios utilizando el algoritmo Linear Congruential Generator (LCG), que es una forma b\u00e1sica de generar n\u00fameros pseudoaleatorios.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#version-sin-funciones-de-string-y-sin-randomrandint","title":"Versi\u00f3n Sin Funciones de String y Sin <code>random.randint</code>","text":"<pre><code># Pedimos al usuario los dos valores\nvalor_inferior = int(input(\"Introduce el valor inferior: \"))\nvalor_superior = int(input(\"Introduce el valor superior: \"))\n\n# Funci\u00f3n para generar un n\u00famero aleatorio utilizando el m\u00e9todo LCG (Linear Congruential Generator)\ndef generar_numero_aleatorio(minimo, maximo):\n    # Par\u00e1metros del generador LCG (se pueden ajustar para diferentes distribuciones)\n    a = 1664525   # Multiplicador\n    c = 1013904223  # Incremento\n    m = 2**32  # M\u00f3dulo\n    # Generador de semillas basado en el tiempo (para variabilidad)\n    semilla = int(str(id(valor_inferior))[-1]) * int(str(id(valor_superior))[-1])\n    # Generamos un n\u00famero pseudoaleatorio\n    semilla = (a * semilla + c) % m\n    # Normalizamos a un rango entre [0, 1]\n    numero_normalizado = semilla / m\n    # Mapeamos el n\u00famero al rango deseado [minimo, maximo]\n    return minimo + int(numero_normalizado * (maximo - minimo + 1))\n\n# Generamos un n\u00famero aleatorio con nuestra funci\u00f3n\nnumero_aleatorio = generar_numero_aleatorio(valor_inferior, valor_superior)\n\n# Convertimos el n\u00famero a cadena para mostrarlo sin usar print\n# Creamos manualmente el mensaje: \"El n\u00famero aleatorio generado entre valor_inferior y valor_superior es: numero_aleatorio\"\nmensaje = \"El n\u00famero aleatorio generado entre \" + str(valor_inferior) + \" y \" + str(valor_superior) + \" es: \" + str(numero_aleatorio)\n\n# Imprimimos cada car\u00e1cter del mensaje manualmente (sin usar print)\nfor char in mensaje:\n    # Utilizamos end='' para imprimir sin saltos de l\u00ednea (simulando el comportamiento de print)\n    import sys\n    sys.stdout.write(char)\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li> <p>Pedimos al usuario que introduzca los valores inferior y superior, y los convertimos a enteros.</p> </li> <li> <p>Implementaci\u00f3n de un Generador Aleatorio:</p> </li> <li> <p>Implementamos una funci\u00f3n <code>generar_numero_aleatorio</code> basada en el m\u00e9todo Linear Congruential Generator (LCG):</p> <ul> <li><code>a</code>, <code>c</code> y <code>m</code> son constantes que definen la secuencia de n\u00fameros pseudoaleatorios.</li> <li>Utilizamos <code>id</code> de los valores como semilla para generar un n\u00famero basado en las posiciones de memoria de <code>valor_inferior</code> y <code>valor_superior</code>.</li> <li>El n\u00famero se normaliza a un valor entre 0 y 1 dividiendo por <code>m</code>.</li> <li>Luego se ajusta al rango deseado <code>[minimo, maximo]</code> con la f\u00f3rmula: <code>minimo + int(numero_normalizado * (maximo - minimo + 1))</code>.</li> </ul> </li> <li> <p>Generaci\u00f3n y Mapeo:</p> </li> <li> <p>Generamos un n\u00famero aleatorio entre los valores especificados por el usuario.</p> </li> <li> <p>Mostrar el Resultado Sin Funciones de Cadena:</p> </li> <li>Creamos el mensaje manualmente concatenando las partes (<code>str</code> se permite como una funci\u00f3n b\u00e1sica de tipo).</li> <li>Usamos <code>sys.stdout.write</code> para mostrar el mensaje car\u00e1cter a car\u00e1cter, simulando el comportamiento de <code>print</code> sin usar <code>print</code> directamente.</li> </ol> <p>Este enfoque permite generar un n\u00famero aleatorio y mostrar el resultado sin usar funciones de cadenas ni <code>random.randint</code>, utilizando un generador de n\u00fameros pseudoaleatorios b\u00e1sico y manipulando la salida de forma manual.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1230-determinar-si-un-numero-es-primo","title":"Ejercicio 1.2.30 - Determinar si un N\u00famero es Primo","text":"<p>En este ejercicio, vamos a implementar un programa que determine si un n\u00famero dado es primo. Un n\u00famero primo es aquel que solo es divisible por 1 y por s\u00ed mismo, es decir, no tiene divisores aparte de estos dos.</p> <pre><code># Pedimos al usuario que introduzca un n\u00famero entero\nnumero = int(input(\"Introduce un n\u00famero entero: \"))\n\n# Funci\u00f3n para determinar si un n\u00famero es primo\ndef es_primo(n):\n    # Si el n\u00famero es menor que 2, no es primo\n    if n &lt; 2:\n        return False\n    # Comprobamos si el n\u00famero tiene divisores\n    for i in range(2, int(n ** 0.5) + 1):  # Solo necesitamos comprobar hasta la ra\u00edz cuadrada de n\n        if n % i == 0:\n            return False\n    return True\n\n# Determinamos si el n\u00famero es primo\nif es_primo(numero):\n    print(f\"{numero} es un n\u00famero primo.\")\nelse:\n    print(f\"{numero} no es un n\u00famero primo.\")\n</code></pre> <p>Explicaci\u00f3n: 1. Entrada de Datos: Pedimos al usuario que introduzca un n\u00famero entero. 2. Funci\u00f3n <code>es_primo</code>:    - Si el n\u00famero es menor que 2, no es primo.    - Recorremos los n\u00fameros desde 2 hasta la ra\u00edz cuadrada del n\u00famero (usando <code>int(n ** 0.5) + 1</code>) para comprobar si el n\u00famero tiene divisores.    - Si encontramos un divisor, el n\u00famero no es primo.    - Si no encontramos divisores, el n\u00famero es primo. 3. Salida: Usamos <code>print</code> para mostrar si el n\u00famero es primo o no.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#version-sin-usar-funciones-de-string","title":"Versi\u00f3n Sin Usar Funciones de String","text":"<p>Para hacer esto sin usar funciones de cadena (<code>print</code>, <code>format</code>, <code>f-strings</code>, etc.), necesitamos calcular si el n\u00famero es primo de manera manual y luego construir la salida sin funciones de cadena.</p> <pre><code># Pedimos al usuario que introduzca un n\u00famero entero\nnumero = int(input(\"Introduce un n\u00famero entero: \"))\n\n# Funci\u00f3n para determinar si un n\u00famero es primo\ndef es_primo(n):\n    # Si el n\u00famero es menor que 2, no es primo\n    if n &lt; 2:\n        return False\n    # Comprobamos si el n\u00famero tiene divisores\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n# Determinamos si el n\u00famero es primo\nes_primo_resultado = es_primo(numero)\n\n# Construimos el mensaje manualmente, sin funciones de cadena\nif es_primo_resultado:\n    # Mensaje si el n\u00famero es primo\n    mensaje = str(numero) + \" es un n\u00famero primo.\"\nelse:\n    # Mensaje si el n\u00famero no es primo\n    mensaje = str(numero) + \" no es un n\u00famero primo.\"\n\n# Imprimimos cada car\u00e1cter del mensaje manualmente (sin usar print)\nfor caracter in mensaje:\n    # Utilizamos `sys.stdout.write` para imprimir sin saltos de l\u00ednea\n    import sys\n    sys.stdout.write(caracter)\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li> <p>Pedimos al usuario que introduzca un n\u00famero entero y lo almacenamos en la variable <code>numero</code>.</p> </li> <li> <p>Funci\u00f3n <code>es_primo</code> Sin Optimizaciones:</p> </li> <li>Definimos la funci\u00f3n <code>es_primo</code> de manera similar a la versi\u00f3n anterior, pero iteramos desde 2 hasta <code>n</code> para evitar usar la ra\u00edz cuadrada, que es una operaci\u00f3n que involucra <code>math.sqrt</code> o <code>**</code>.</li> <li>Si <code>n &lt; 2</code>, el n\u00famero no es primo.</li> <li> <p>Si encontramos un divisor en el rango <code>[2, n)</code>, el n\u00famero no es primo.</p> </li> <li> <p>Construcci\u00f3n del Mensaje:</p> </li> <li> <p>Creamos la cadena <code>mensaje</code> de forma manual usando <code>str()</code> para convertir el n\u00famero y luego concatenando las partes sin usar funciones avanzadas de cadenas (<code>format</code> o <code>f-strings</code>).</p> </li> <li> <p>Mostrar el Resultado Sin <code>print</code>:</p> </li> <li>Recorremos cada car\u00e1cter de <code>mensaje</code> y lo imprimimos manualmente usando <code>sys.stdout.write(caracter)</code> para simular <code>print</code>.</li> </ol> <p>Esta implementaci\u00f3n no utiliza <code>print</code> ni funciones avanzadas de cadena, y la funci\u00f3n <code>es_primo</code> se implementa de manera b\u00e1sica sin optimizaciones como la ra\u00edz cuadrada para determinar los divisores.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1231-mostrar-todos-los-divisores-de-un-numero","title":"Ejercicio 1.2.31 - Mostrar Todos los Divisores de un N\u00famero","text":"<p>En este ejercicio, vamos a escribir un programa que muestre todos los divisores de un n\u00famero entero introducido por el usuario. Un divisor de un n\u00famero \\( n \\) es cualquier n\u00famero \\( d \\) tal que \\( n \\% d == 0 \\).</p> <pre><code># Pedimos al usuario que introduzca un n\u00famero entero\nnumero = int(input(\"Introduce un n\u00famero entero: \"))\n\n# Mostramos todos los divisores del n\u00famero\nprint(f\"Los divisores de {numero} son:\")\nfor i in range(1, numero + 1):\n    if numero % i == 0:\n        print(i)\n</code></pre> <p>Explicaci\u00f3n: 1. Entrada de Datos:    - Pedimos al usuario que introduzca un n\u00famero entero. 2. Bucle para Encontrar Divisores:    - Recorremos los n\u00fameros desde 1 hasta el n\u00famero ingresado.    - Si el n\u00famero es divisible por \\( i \\) (es decir, \\( numero \\% i == 0 \\)), entonces \\( i \\) es un divisor. 3. Mostrar el Resultado:    - Usamos <code>print</code> para mostrar el n\u00famero en cada iteraci\u00f3n cuando encontramos un divisor.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#version-sin-usar-funciones-de-string_1","title":"Versi\u00f3n Sin Usar Funciones de String","text":"<p>Para hacer esto sin usar funciones de cadena (<code>print</code>, <code>format</code>, <code>f-strings</code>, etc.), necesitaremos construir manualmente el mensaje con todos los divisores y mostrarlo de manera manual.</p> <pre><code># Pedimos al usuario que introduzca un n\u00famero entero\nnumero = int(input(\"Introduce un n\u00famero entero: \"))\n\n# Inicializamos una variable para almacenar todos los divisores como cadena\ndivisores = \"\"  # Cadena vac\u00eda para acumular los divisores\n\n# Encontramos todos los divisores y los agregamos a la cadena\nfor i in range(1, numero + 1):\n    if numero % i == 0:\n        # Convertimos el n\u00famero a cadena y lo agregamos a la lista de divisores\n        divisores += str(i) + \" \"\n\n# Construimos el mensaje de salida manualmente\nmensaje = \"Los divisores de \" + str(numero) + \" son: \" + divisores.strip()\n\n# Mostramos el mensaje car\u00e1cter a car\u00e1cter sin usar print\nfor caracter in mensaje:\n    # Utilizamos `sys.stdout.write` para imprimir sin saltos de l\u00ednea ni espacios adicionales\n    import sys\n    sys.stdout.write(caracter)\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li> <p>Pedimos al usuario que introduzca un n\u00famero entero y lo almacenamos en la variable <code>numero</code>.</p> </li> <li> <p>Inicializaci\u00f3n de Variables:</p> </li> <li> <p><code>divisores</code> es una cadena vac\u00eda que usaremos para almacenar los divisores del n\u00famero, separados por espacios.</p> </li> <li> <p>Bucle para Encontrar Divisores:</p> </li> <li>Recorremos los n\u00fameros desde 1 hasta el n\u00famero ingresado (<code>range(1, numero + 1)</code>).</li> <li>Si \\( numero \\% i == 0 \\), entonces \\( i \\) es un divisor.</li> <li> <p>Convertimos \\( i \\) a cadena con <code>str(i)</code> y lo agregamos a <code>divisores</code> seguido de un espacio.</p> </li> <li> <p>Construcci\u00f3n del Mensaje:</p> </li> <li>Construimos manualmente el mensaje <code>mensaje</code> concatenando las partes (<code>\"Los divisores de \"</code>, <code>str(numero)</code>, y <code>divisores</code>).</li> <li> <p>Usamos <code>strip()</code> en <code>divisores</code> para eliminar el espacio extra al final antes de construir el mensaje completo.</p> </li> <li> <p>Mostrar el Resultado Sin <code>print</code>:</p> </li> <li>Iteramos por cada car\u00e1cter de <code>mensaje</code> y lo mostramos manualmente usando <code>sys.stdout.write(caracter)</code> para simular <code>print</code> sin usarlo.</li> </ol> <p>Este enfoque no utiliza <code>print</code> ni funciones avanzadas de cadenas como <code>format</code>, <code>f-strings</code> o <code>join</code>. La construcci\u00f3n y visualizaci\u00f3n del mensaje se hacen de forma manual, car\u00e1cter por car\u00e1cter.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#ejercicio-1232-calcular-la-serie-de-fibonacci-hasta-un-numero-dado","title":"Ejercicio 1.2.32 - Calcular la Serie de Fibonacci Hasta un N\u00famero Dado","text":"<p>En este ejercicio, vamos a implementar un programa que muestre la serie de Fibonacci hasta un n\u00famero l\u00edmite \\( n \\). La serie de Fibonacci comienza con 0 y 1, y cada n\u00famero subsiguiente es la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, ...</p> <pre><code># Pedimos al usuario que introduzca el n\u00famero l\u00edmite\nlimite = int(input(\"Introduce un n\u00famero l\u00edmite para la serie de Fibonacci: \"))\n\n# Inicializamos los dos primeros t\u00e9rminos de la serie\nfibonacci = [0, 1]\n\n# Generamos la serie de Fibonacci hasta que el siguiente n\u00famero sea mayor que el l\u00edmite\nwhile fibonacci[-1] + fibonacci[-2] &lt;= limite:\n    siguiente_fib = fibonacci[-1] + fibonacci[-2]\n    fibonacci.append(siguiente_fib)\n\n# Mostramos la serie de Fibonacci\nprint(\"La serie de Fibonacci hasta\", limite, \"es:\")\nfor numero in fibonacci:\n    print(numero)\n</code></pre> <p>Explicaci\u00f3n: 1. Entrada de Datos:    - Pedimos al usuario que introduzca un n\u00famero l\u00edmite hasta el cual generar la serie de Fibonacci. 2. Inicializaci\u00f3n de la Serie:    - Inicializamos la lista <code>fibonacci</code> con los primeros dos n\u00fameros de la serie: [0, 1]. 3. Generaci\u00f3n de la Serie:    - Mientras la suma de los dos \u00faltimos elementos de <code>fibonacci</code> sea menor o igual al l\u00edmite, seguimos generando n\u00fameros y agreg\u00e1ndolos a la lista. 4. Mostrar la Serie:    - Mostramos la serie usando <code>print</code> en un bucle <code>for</code> que recorre la lista <code>fibonacci</code>.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-python/#version-sin-usar-funciones-de-string_2","title":"Versi\u00f3n Sin Usar Funciones de String","text":"<p>Para hacer esto sin usar funciones de cadena (<code>print</code>, <code>format</code>, <code>f-strings</code>, etc.), vamos a construir la serie de Fibonacci manualmente y mostrar los resultados car\u00e1cter por car\u00e1cter usando <code>sys.stdout.write</code>.</p> <pre><code># Pedimos al usuario que introduzca el n\u00famero l\u00edmite\nlimite = int(input(\"Introduce un n\u00famero l\u00edmite para la serie de Fibonacci: \"))\n\n# Inicializamos los dos primeros t\u00e9rminos de la serie\nfibonacci = [0, 1]\n\n# Generamos la serie de Fibonacci hasta que el siguiente n\u00famero sea mayor que el l\u00edmite\nwhile fibonacci[-1] + fibonacci[-2] &lt;= limite:\n    siguiente_fib = fibonacci[-1] + fibonacci[-2]\n    fibonacci.append(siguiente_fib)\n\n# Construimos el mensaje de la serie manualmente\nmensaje = \"La serie de Fibonacci hasta \" + str(limite) + \" es: \"\n\n# A\u00f1adimos cada n\u00famero de la serie al mensaje\nfor numero in fibonacci:\n    mensaje += str(numero) + \" \"\n\n# Mostramos el mensaje car\u00e1cter a car\u00e1cter sin usar print\nfor caracter in mensaje:\n    # Utilizamos `sys.stdout.write` para imprimir sin saltos de l\u00ednea ni espacios adicionales\n    import sys\n    sys.stdout.write(caracter)\n</code></pre> <p>Explicaci\u00f3n detallada:</p> <ol> <li>Entrada de Datos:</li> <li> <p>Pedimos al usuario que introduzca el n\u00famero l\u00edmite hasta el cual generar la serie de Fibonacci y lo almacenamos en <code>limite</code>.</p> </li> <li> <p>Inicializaci\u00f3n de la Serie:</p> </li> <li> <p>Inicializamos la lista <code>fibonacci</code> con los dos primeros n\u00fameros: <code>[0, 1]</code>.</p> </li> <li> <p>Generaci\u00f3n de la Serie:</p> </li> <li>Usamos un bucle <code>while</code> para seguir generando n\u00fameros de la serie mientras la suma de los dos \u00faltimos elementos de <code>fibonacci</code> sea menor o igual al l\u00edmite.</li> <li> <p>Cada n\u00famero nuevo se agrega a <code>fibonacci</code>.</p> </li> <li> <p>Construcci\u00f3n del Mensaje de Salida:</p> </li> <li>Creamos el mensaje <code>mensaje</code> inicial con la frase <code>\"La serie de Fibonacci hasta \"</code> y el l\u00edmite.</li> <li> <p>Recorremos la lista <code>fibonacci</code> y vamos agregando cada n\u00famero a <code>mensaje</code> con un espacio despu\u00e9s.</p> </li> <li> <p>Mostrar el Resultado Sin <code>print</code>:</p> </li> <li>Recorremos cada car\u00e1cter de <code>mensaje</code> y lo imprimimos manualmente usando <code>sys.stdout.write</code> para mostrarlo sin usar <code>print</code>.</li> </ol> <p>Este enfoque no utiliza funciones de cadenas para mostrar el resultado y construye la serie de Fibonacci y el mensaje manualmente.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/","title":"PROG U1. Practica002 solucion pythonPorFases","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#p12-usando-python-solucion-por-fases-y-tests","title":"P1.2 Usando python Soluci\u00f3n Por Fases y tests","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-121-dar-la-bienvenida-al-usuario","title":"Ejercicio 1.2.1: Dar la bienvenida al usuario","text":"<p>Problema: Escribe un programa que pida el nombre del usuario para luego darle la bienvenida.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_nombre_usuario():\n    \"\"\"Solicita el nombre del usuario y lo devuelve como cadena.\"\"\"\n    return input(\"Escribe tu nombre: \")\n\n# Fase 2: Procesamiento (no se requiere procesamiento en este caso)\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_bienvenida(nombre):\n    \"\"\"Muestra un mensaje de bienvenida al usuario.\"\"\"\n    print(f\"Hola, {nombre}.\")\n\n# Funci\u00f3n principal\ndef main():\n    nombre_usuario = obtener_nombre_usuario()  # Fase 1: Entrada\n    mostrar_bienvenida(nombre_usuario)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_nombre_usuario()</code>: Se encarga de capturar el nombre del usuario. 2. <code>mostrar_bienvenida(nombre)</code>: Muestra el mensaje de bienvenida utilizando el nombre obtenido. 3. <code>main()</code>: Coordina las fases del programa.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-122-calcular-el-importe-total-del-servicio","title":"Ejercicio 1.2.2: Calcular el importe total del servicio","text":"<p>Problema: Escribe un programa para pedirle al usuario las horas de trabajo y el precio por hora y calcule el importe total del servicio.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_trabajo():\n    \"\"\"Solicita las horas trabajadas y el coste por hora y los devuelve como tupla.\"\"\"\n    horas_trabajadas = float(input(\"Horas de trabajo: \"))\n    coste_por_hora = float(input(\"Coste por hora: \"))\n    return horas_trabajadas, coste_por_hora\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_importe_total(horas, coste):\n    \"\"\"Calcula el importe total del servicio.\"\"\"\n    return horas * coste\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_importe_total(importe):\n    \"\"\"Muestra el importe total del servicio.\"\"\"\n    print(f\"Importe total: {importe:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    horas, coste = obtener_datos_trabajo()  # Fase 1: Entrada\n    importe_total = calcular_importe_total(horas, coste)  # Fase 2: Procesamiento\n    mostrar_importe_total(importe_total)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_trabajo()</code>: Captura las horas trabajadas y el coste por hora. 2. <code>calcular_importe_total(horas, coste)</code>: Realiza el c\u00e1lculo del importe total. 3. <code>mostrar_importe_total(importe)</code>: Muestra el importe total con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-124-convertir-grados-celsius-a-fahrenheit","title":"Ejercicio 1.2.4: Convertir grados Celsius a Fahrenheit","text":"<p>Problema: Escribe un programa que convierta grados Celsius a Fahrenheit.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_temperatura_celsius():\n    \"\"\"Solicita la temperatura en grados Celsius y la devuelve como float.\"\"\"\n    return float(input(\"Introduce la temperatura en grados Celsius: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef convertir_a_fahrenheit(celsius):\n    \"\"\"Convierte la temperatura de Celsius a Fahrenheit.\"\"\"\n    return celsius * 9/5 + 32\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_conversion(celsius, fahrenheit):\n    \"\"\"Muestra la temperatura en grados Fahrenheit.\"\"\"\n    print(f\"{celsius} grados Celsius son {fahrenheit:.2f} grados Fahrenheit.\")\n\n# Funci\u00f3n principal\ndef main():\n    celsius = obtener_temperatura_celsius()  # Fase 1: Entrada\n    fahrenheit = convertir_a_fahrenheit(celsius)  # Fase 2: Procesamiento\n    mostrar_conversion(celsius, fahrenheit)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_temperatura_celsius()</code>: Captura la temperatura en Celsius. 2. <code>convertir_a_fahrenheit(celsius)</code>: Realiza la conversi\u00f3n a Fahrenheit. 3. <code>mostrar_conversion(celsius, fahrenheit)</code>: Muestra la conversi\u00f3n en un formato legible.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-123-realizar-operaciones-matematicas-y-comprobar-sus-resultados","title":"Ejercicio 1.2.3: Realizar operaciones matem\u00e1ticas y comprobar sus resultados","text":"<p>Problema: Para cada una de las siguientes expresiones, adivina su valor y tipo. Luego compru\u00e9balo.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos (no se necesita en este caso)\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_expresiones(ancho, alto):\n    \"\"\"Calcula y devuelve el resultado de varias expresiones.\"\"\"\n    exp1 = ancho / 2\n    exp2 = ancho // 2\n    exp3 = alto / 3\n    exp4 = 1 + 2 * 5\n    return exp1, exp2, exp3, exp4\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_resultados(exp1, exp2, exp3, exp4):\n    \"\"\"Muestra el valor y tipo de cada expresi\u00f3n.\"\"\"\n    print(\"Expresi\u00f3n 1:\", exp1, type(exp1))\n    print(\"Expresi\u00f3n 2:\", exp2, type(exp2))\n    print(\"Expresi\u00f3n 3:\", exp3, type(exp3))\n    print(\"Expresi\u00f3n 4:\", exp4, type(exp4))\n\n# Funci\u00f3n principal\ndef main():\n    ancho = 17\n    alto = 12.0\n    exp1, exp2, exp3, exp4 = calcular_expresiones(ancho, alto)  # Fase 2: Procesamiento\n    mostrar_resultados(exp1, exp2, exp3, exp4)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>calcular_expresiones(ancho, alto)</code>: Realiza las operaciones y devuelve el resultado de cada una. 2. <code>mostrar_resultados(exp1, exp2, exp3, exp4)</code>: Muestra el valor y el tipo de cada expresi\u00f3n.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-125-calcular-el-precio-final-con-iva","title":"Ejercicio 1.2.5: Calcular el precio final con IVA","text":"<p>Problema: Calcula el precio final de un art\u00edculo a partir de su precio sin IVA y el tipo de IVA.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_precio_sin_iva():\n    \"\"\"Solicita el precio sin IVA y el tipo de IVA y los devuelve como tupla.\"\"\"\n    precio = float(input(\"Introduce el importe sin IVA: \"))\n    tipo_iva = float(input(\"Introduce el tipo de IVA (%): \"))\n    return precio, tipo_iva\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_precio_final(precio, tipo_iva):\n    \"\"\"Calcula el precio final con IVA.\"\"\"\n    return precio * (1 + tipo_iva / 100)\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_precio_final(precio_final):\n    \"\"\"Muestra el precio final con dos decimales.\"\"\"\n    print(f\"El precio final con IVA es: {precio_final:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    precio, tipo_iva = obtener_precio_sin_iva()  # Fase 1: Entrada\n    precio_final = calcular_precio_final(precio, tipo_iva)  # Fase 2: Procesamiento\n    mostrar_precio_final(precio_final)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_precio_sin_iva()</code>: Captura el precio sin IVA y el tipo de IVA. 2. <code>calcular_precio_final(precio, tipo_iva)</code>: Calcula el precio final con IVA. 3. <code>mostrar_precio_final(precio_final)</code>: Muestra el precio final con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-126-calcular-el-importe-sin-iva-y-el-iva-pagado","title":"Ejercicio 1.2.6: Calcular el importe sin IVA y el IVA pagado","text":"<p>Problema: Calcula el IVA pagado y el importe sin IVA a partir del precio final.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_importe_final():\n    \"\"\"Solicita el importe final y el tipo de IVA y los devuelve como tupla.\"\"\"\n    importe_final = float(input(\"Introduce el importe final del art\u00edculo: \"))\n    tipo_iva = float(input(\"Introduce el tipo de IVA (%): \"))\n    return importe_final, tipo_iva\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_importe_sin_iva(importe_final, tipo_iva):\n    \"\"\"Calcula el importe sin IVA a partir del importe final.\"\"\"\n    return importe_final / (1 + tipo_iva / 100)\n\ndef calcular_iva_pagado(importe_final, importe_sin_iva):\n    \"\"\"Calcula el IVA pagado.\"\"\"\n    return importe_final - importe_sin_iva\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_resultados_importe(importe_sin_iva, iva_pagado):\n    \"\"\"Muestra el importe sin IVA y el IVA pagado con dos decimales.\"\"\"\n    print(f\"Importe sin IVA: {importe_sin_iva:.2f}\")\n    print(f\"IVA pagado: {iva_pagado:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    importe_final, tipo_iva = obtener_importe_final()  # Fase 1: Entrada\n    importe_sin_iva = calcular_importe_sin_iva(importe_final, tipo_iva)  # Fase 2: Procesamiento\n    iva_pagado = calcular_iva_pagado(importe_final, importe_sin_iva)  # Fase 2: Procesamiento\n    mostrar_resultados_importe(importe_sin_iva, iva_pagado)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_importe_final()</code>: Captura el importe final y el tipo de IVA. 2. <code>calcular_importe_sin_iva(importe_final, tipo_iva)</code>: Calcula el importe sin IVA. 3. <code>calcular_iva_pagado(importe_final, importe_sin_iva)</code>: Calcula el IVA pagado. 4. <code>mostrar_resultados_importe(importe_sin_iva, iva_pagado)</code>: Muestra ambos valores con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-127-calcular-la-suma-de-tres-numeros","title":"Ejercicio 1.2.7: Calcular la suma de tres n\u00fameros","text":"<p>Problema: Escribe un programa que solicite tres n\u00fameros al usuario y calcule e imprima por pantalla su suma.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_tres_numeros():\n    \"\"\"Solicita tres n\u00fameros al usuario y los devuelve como tupla.\"\"\"\n    num1 = float(input(\"Introduce el primer n\u00famero: \"))\n    num2 = float(input(\"Introduce el segundo n\u00famero: \"))\n    num3 = float(input(\"Introduce el tercer n\u00famero: \"))\n    return num1, num2, num3\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_suma(num1, num2, num3):\n    \"\"\"Calcula la suma de tres n\u00fameros.\"\"\"\n    return num1 + num2 + num3\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_suma(suma):\n    \"\"\"Muestra la suma de los tres n\u00fameros.\"\"\"\n    print(f\"La suma de los tres n\u00fameros es: {suma}\")\n\n# Funci\u00f3n principal\ndef main():\n    num1, num2, num3 = obtener_tres_numeros()  # Fase 1: Entrada\n    suma = calcular_suma(num1, num2, num3)  # Fase 2: Procesamiento\n    mostrar_suma(suma)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_tres_numeros()</code>: Captura tres n\u00fameros introducidos por el usuario. 2. <code>calcular_suma(num1, num2, num3)</code>: Calcula la suma de los tres n\u00fameros. 3. <code>mostrar_suma(suma)</code>: Muestra la suma en la consola.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-128-escribir-un-programa-para-calcular-el-area-de-un-triangulo","title":"Ejercicio 1.2.8: Escribir un programa para calcular el \u00e1rea de un tri\u00e1ngulo","text":"<p>Problema: Escribe un programa que calcule el \u00e1rea de un tri\u00e1ngulo a partir de su base y altura.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_triangulo():\n    \"\"\"Solicita la base y altura del tri\u00e1ngulo y las devuelve como tupla.\"\"\"\n    base = float(input(\"Introduce la base del tri\u00e1ngulo: \"))\n    altura = float(input(\"Introduce la altura del tri\u00e1ngulo: \"))\n    return base, altura\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_area_triangulo(base, altura):\n    \"\"\"Calcula el \u00e1rea de un tri\u00e1ngulo a partir de su base y altura.\"\"\"\n    return (base * altura) / 2\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_area_triangulo(area):\n    \"\"\"Muestra el \u00e1rea del tri\u00e1ngulo calculada.\"\"\"\n    print(f\"El \u00e1rea del tri\u00e1ngulo es: {area:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    base, altura = obtener_datos_triangulo()  # Fase 1: Entrada\n    area = calcular_area_triangulo(base, altura)  # Fase 2: Procesamiento\n    mostrar_area_triangulo(area)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_triangulo()</code>: Captura la base y la altura del tri\u00e1ngulo. 2. <code>calcular_area_triangulo(base, altura)</code>: Calcula el \u00e1rea usando la f\u00f3rmula \\(\\frac{\\text{base} \\times \\text{altura}}{2}\\). 3. <code>mostrar_area_triangulo(area)</code>: Muestra el \u00e1rea con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-129-calcular-el-indice-de-masa-corporal-imc","title":"Ejercicio 1.2.9: Calcular el \u00edndice de masa corporal (IMC)","text":"<p>Problema: Escribe un programa que calcule el \u00edndice de masa corporal (IMC) a partir del peso y la altura.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_imc():\n    \"\"\"Solicita el peso y la altura del usuario y los devuelve como tupla.\"\"\"\n    peso = float(input(\"Introduce tu peso en kg: \"))\n    altura = float(input(\"Introduce tu altura en metros: \"))\n    return peso, altura\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_imc(peso, altura):\n    \"\"\"Calcula el \u00edndice de masa corporal (IMC) a partir del peso y la altura.\"\"\"\n    return peso / (altura ** 2)\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_imc(imc):\n    \"\"\"Muestra el \u00edndice de masa corporal con dos decimales.\"\"\"\n    print(f\"Tu \u00edndice de masa corporal es {imc:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    peso, altura = obtener_datos_imc()  # Fase 1: Entrada\n    imc = calcular_imc(peso, altura)  # Fase 2: Procesamiento\n    mostrar_imc(imc)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_imc()</code>: Captura el peso y la altura del usuario. 2. <code>calcular_imc(peso, altura)</code>: Calcula el IMC usando la f\u00f3rmula \\(\\frac{\\text{peso}}{\\text{altura}^2}\\). 3. <code>mostrar_imc(imc)</code>: Muestra el IMC con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1210-convertir-euros-a-dolares","title":"Ejercicio 1.2.10: Convertir euros a d\u00f3lares","text":"<p>Problema: Escribe un programa que convierta una cantidad en euros a d\u00f3lares usando un tipo de cambio dado.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_conversion():\n    \"\"\"Solicita la cantidad en euros y el tipo de cambio y los devuelve como tupla.\"\"\"\n    euros = float(input(\"Introduce la cantidad en euros: \"))\n    tipo_cambio = float(input(\"Introduce el tipo de cambio (1 euro a d\u00f3lares): \"))\n    return euros, tipo_cambio\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef convertir_a_dolares(euros, tipo_cambio):\n    \"\"\"Convierte una cantidad en euros a d\u00f3lares usando el tipo de cambio.\"\"\"\n    return euros * tipo_cambio\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_conversion(euros, dolares):\n    \"\"\"Muestra la cantidad en euros y la conversi\u00f3n a d\u00f3lares.\"\"\"\n    print(f\"{euros} euros son {dolares:.2f} d\u00f3lares.\")\n\n# Funci\u00f3n principal\ndef main():\n    euros, tipo_cambio = obtener_datos_conversion()  # Fase 1: Entrada\n    dolares = convertir_a_dolares(euros, tipo_cambio)  # Fase 2: Procesamiento\n    mostrar_conversion(euros, dolares)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_conversion()</code>: Captura la cantidad en euros y el tipo de cambio. 2. <code>convertir_a_dolares(euros, tipo_cambio)</code>: Realiza la conversi\u00f3n de euros a d\u00f3lares. 3. <code>mostrar_conversion(euros, dolares)</code>: Muestra el resultado de la conversi\u00f3n.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1211-determinar-si-un-numero-es-par-o-impar","title":"Ejercicio 1.2.11: Determinar si un n\u00famero es par o impar","text":"<p>Problema: Escribe un programa que determine si un n\u00famero introducido es par o impar.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_numero():\n    \"\"\"Solicita un n\u00famero entero al usuario.\"\"\"\n    return int(input(\"Introduce un n\u00famero entero: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef es_par(numero):\n    \"\"\"Devuelve True si el n\u00famero es par, False si es impar.\"\"\"\n    return numero % 2 == 0\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_paridad(numero, par):\n    \"\"\"Muestra si el n\u00famero es par o impar.\"\"\"\n    tipo = \"par\" if par else \"impar\"\n    print(f\"El n\u00famero {numero} es {tipo}.\")\n\n# Funci\u00f3n principal\ndef main():\n    numero = obtener_numero()  # Fase 1: Entrada\n    par = es_par(numero)  # Fase 2: Procesamiento\n    mostrar_paridad(numero, par)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_numero()</code>: Captura un n\u00famero entero. 2. <code>es_par(numero)</code>: Devuelve <code>True</code> si el n\u00famero es par, <code>False</code> si es impar. 3. <code>mostrar_paridad(numero, par)</code>: Muestra si el n\u00famero es par o impar.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1212-convertir-de-celsius-a-kelvin","title":"Ejercicio 1.2.12: Convertir de Celsius a Kelvin","text":"<p>Problema: Escribe un programa que convierta una temperatura en grados Celsius a Kelvin.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_temperatura_celsius():\n    \"\"\"Solicita la temperatura en grados Celsius y la devuelve como float.\"\"\"\n    return float(input(\"Introduce la temperatura en grados Celsius: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef convertir_a_kelvin(celsius):\n    \"\"\"Convierte la temperatura de Celsius a Kelvin.\"\"\"\n    return celsius + 273.15\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_conversion(celsius, kelvin):\n    \"\"\"Muestra la temperatura en Celsius y su conversi\u00f3n a Kelvin.\"\"\"\n    print(f\"{celsius} grados Celsius son {kelvin:.2f} grados Kelvin.\")\n\n# Funci\u00f3n principal\ndef main():\n    celsius = obtener_temperatura_celsius()  # Fase 1: Entrada\n    kelvin = convertir_a_kelvin(celsius)  # Fase 2: Procesamiento\n    mostrar_conversion(celsius, kelvin)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_temperatura_celsius()</code>: Captura la temperatura en Celsius. 2. <code>convertir_a_kelvin(celsius)</code>: Realiza la conversi\u00f3n de Celsius a Kelvin. 3. <code>mostrar_conversion(celsius, kelvin)</code>: Muestra la conversi\u00f3n.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1213-calcular-la-hipotenusa-de-un-triangulo-rectangulo","title":"Ejercicio 1.2.13: Calcular la hipotenusa de un tri\u00e1ngulo rect\u00e1ngulo","text":"<p>Problema: Escribe un programa que calcule la hipotenusa de un tri\u00e1ngulo rect\u00e1ngulo a partir de sus dos catetos.</p> <pre><code>import math\n\n# Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_triangulo_rectangulo():\n    \"\"\"Solicita los dos catetos del tri\u00e1ngulo y los devuelve como tupla.\"\"\"\n    cateto_a = float(input(\"Introduce el valor del primer cateto: \"))\n    cateto_b = float(input(\"Introduce el valor del segundo cateto: \"))\n    return cateto_a, cateto_b\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_hipotenusa(cateto_a, cateto_b):\n    \"\"\"Calcula la hipotenusa\n\n de un tri\u00e1ngulo rect\u00e1ngulo usando la f\u00f3rmula de Pit\u00e1goras.\"\"\"\n    return math.sqrt(cateto_a**2 + cateto_b**2)\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_hipotenusa(hipotenusa):\n    \"\"\"Muestra la hipotenusa con dos decimales.\"\"\"\n    print(f\"La hipotenusa del tri\u00e1ngulo es: {hipotenusa:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    cateto_a, cateto_b = obtener_datos_triangulo_rectangulo()  # Fase 1: Entrada\n    hipotenusa = calcular_hipotenusa(cateto_a, cateto_b)  # Fase 2: Procesamiento\n    mostrar_hipotenusa(hipotenusa)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_triangulo_rectangulo()</code>: Captura los dos catetos del tri\u00e1ngulo. 2. <code>calcular_hipotenusa(cateto_a, cateto_b)</code>: Calcula la hipotenusa usando la f\u00f3rmula de Pit\u00e1goras. 3. <code>mostrar_hipotenusa(hipotenusa)</code>: Muestra la hipotenusa calculada.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1214-calcular-el-precio-total-de-un-pedido-de-payasos-y-munecas","title":"Ejercicio 1.2.14: Calcular el precio total de un pedido de payasos y mu\u00f1ecas","text":"<p>Problema: Calcula el peso total de un pedido de payasos y mu\u00f1ecas.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_pedido():\n    \"\"\"Solicita el n\u00famero de payasos y mu\u00f1ecas vendidos y los devuelve como tupla.\"\"\"\n    num_payasos = int(input(\"N\u00famero de payasos vendidos: \"))\n    num_munecas = int(input(\"N\u00famero de mu\u00f1ecas vendidas: \"))\n    return num_payasos, num_munecas\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_peso_total(num_payasos, num_munecas, peso_payaso=112, peso_muneca=75):\n    \"\"\"Calcula el peso total del pedido de payasos y mu\u00f1ecas.\"\"\"\n    return num_payasos * peso_payaso + num_munecas * peso_muneca\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_peso_total(peso_total):\n    \"\"\"Muestra el peso total del pedido.\"\"\"\n    print(f\"El peso total del paquete es: {peso_total} gramos.\")\n\n# Funci\u00f3n principal\ndef main():\n    num_payasos, num_munecas = obtener_datos_pedido()  # Fase 1: Entrada\n    peso_total = calcular_peso_total(num_payasos, num_munecas)  # Fase 2: Procesamiento\n    mostrar_peso_total(peso_total)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_pedido()</code>: Captura el n\u00famero de payasos y mu\u00f1ecas vendidos. 2. <code>calcular_peso_total(num_payasos, num_munecas)</code>: Calcula el peso total del pedido basado en el peso de cada art\u00edculo. 3. <code>mostrar_peso_total(peso_total)</code>: Muestra el peso total.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1215-calcular-el-saldo-de-una-cuenta-con-un-4-de-interes-anual","title":"Ejercicio 1.2.15: Calcular el saldo de una cuenta con un 4% de inter\u00e9s anual","text":"<p>Problema: Calcula la cantidad de dinero en una cuenta de ahorros con un 4% de inter\u00e9s anual durante tres a\u00f1os.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_monto_inicial():\n    \"\"\"Solicita el monto inicial en la cuenta de ahorros.\"\"\"\n    return float(input(\"Introduce la cantidad de dinero depositada en la cuenta de ahorros: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_saldo_final(monto_inicial, interes=0.04, a\u00f1os=3):\n    \"\"\"Calcula el saldo final en la cuenta de ahorros despu\u00e9s de un n\u00famero de a\u00f1os.\"\"\"\n    saldo = monto_inicial\n    for _ in range(a\u00f1os):\n        saldo += saldo * interes\n    return saldo\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_saldo_final(saldo, a\u00f1os):\n    \"\"\"Muestra el saldo final despu\u00e9s de un n\u00famero de a\u00f1os.\"\"\"\n    print(f\"El saldo despu\u00e9s de {a\u00f1os} a\u00f1os es: {saldo:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    monto_inicial = obtener_monto_inicial()  # Fase 1: Entrada\n    saldo_final = calcular_saldo_final(monto_inicial)  # Fase 2: Procesamiento\n    mostrar_saldo_final(saldo_final, 3)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_monto_inicial()</code>: Captura el monto inicial en la cuenta. 2. <code>calcular_saldo_final(monto_inicial, interes, a\u00f1os)</code>: Calcula el saldo final despu\u00e9s de un n\u00famero de a\u00f1os aplicando el inter\u00e9s anual. 3. <code>mostrar_saldo_final(saldo, a\u00f1os)</code>: Muestra el saldo final con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1216-calcular-el-precio-con-descuento-de-barras-de-pan-no-frescas","title":"Ejercicio 1.2.16: Calcular el precio con descuento de barras de pan no frescas","text":"<p>Problema: Calcula el precio total de las barras de pan no frescas con descuento.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_barras():\n    \"\"\"Solicita el n\u00famero de barras de pan no frescas vendidas.\"\"\"\n    return int(input(\"Introduce el n\u00famero de barras no frescas vendidas: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_precio_total_barras(barras_no_frescas, precio_barra=3.49, descuento=0.60):\n    \"\"\"Calcula el precio total con descuento de las barras no frescas.\"\"\"\n    precio_con_descuento = precio_barra * (1 - descuento)\n    return barras_no_frescas * precio_con_descuento\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_precio_total(coste_total):\n    \"\"\"Muestra el precio total con descuento.\"\"\"\n    print(f\"Coste total de las barras no frescas: {coste_total:.2f}\u20ac\")\n\n# Funci\u00f3n principal\ndef main():\n    barras_no_frescas = obtener_datos_barras()  # Fase 1: Entrada\n    coste_total = calcular_precio_total_barras(barras_no_frescas)  # Fase 2: Procesamiento\n    mostrar_precio_total(coste_total)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_barras()</code>: Captura el n\u00famero de barras no frescas vendidas. 2. <code>calcular_precio_total_barras(barras_no_frescas)</code>: Calcula el precio total aplicando el descuento a las barras no frescas. 3. <code>mostrar_precio_total(coste_total)</code>: Muestra el precio total con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1217-repetir-el-nombre-del-usuario","title":"Ejercicio 1.2.17: Repetir el nombre del usuario","text":"<p>Problema: Escribe un programa que repita el nombre del usuario una cantidad de veces especificada.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_nombre_y_repeticiones():\n    \"\"\"Solicita el nombre del usuario y el n\u00famero de repeticiones.\"\"\"\n    nombre = input(\"Introduce tu nombre: \")\n    repeticiones = int(input(\"Introduce el n\u00famero de repeticiones: \"))\n    return nombre, repeticiones\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef repetir_nombre(nombre, repeticiones):\n    \"\"\"Genera una lista con el nombre repetido la cantidad de veces especificada.\"\"\"\n    return [nombre] * repeticiones\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_repeticiones(lista_nombres):\n    \"\"\"Muestra el nombre repetido.\"\"\"\n    for nombre in lista_nombres:\n        print(nombre)\n\n# Funci\u00f3n principal\ndef main():\n    nombre, repeticiones = obtener_nombre_y_repeticiones()  # Fase 1: Entrada\n    lista_nombres = repetir_nombre(nombre, repeticiones)  # Fase 2: Procesamiento\n    mostrar_repeticiones(lista_nombres)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_nombre_y_repeticiones()</code>: Captura el nombre del usuario y la cantidad de repeticiones. 2. <code>repetir_nombre(nombre, repeticiones)</code>: Genera una lista con el nombre repetido. 3. <code>mostrar_repeticiones(lista_nombres)</code>: Muestra el nombre repetido en l\u00edneas separadas.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1218-formatear-el-nombre-del-usuario-en-distintos-formatos","title":"Ejercicio 1.2.18: Formatear el nombre del usuario en distintos formatos","text":"<p>Problema: Mostrar el nombre del usuario en min\u00fasculas, may\u00fasculas y con cada palabra capitalizada.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_nombre():\n    \"\"\"Solicita el nombre completo del usuario.\"\"\"\n    return input(\"Introduce tu nombre completo: \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef formatear_nombre(nombre):\n    \"\"\"Devuelve el nombre en min\u00fasculas, may\u00fasculas y con capitalizaci\u00f3n de cada palabra.\"\"\"\n    return nombre.lower(), nombre.upper(), nombre.title()\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_formatos_nombre(minusculas, mayusculas, capitalizado):\n    \"\"\"Muestra el nombre en min\u00fasculas, may\u00fasculas y con capitalizaci\u00f3n.\"\"\"\n    print(minusculas)\n    print(mayusculas)\n    print(capitalizado)\n\n# Funci\u00f3n principal\ndef main():\n    nombre = obtener_nombre()  # Fase 1: Entrada\n    minusculas, mayusculas, capitalizado = formatear_nombre(nombre)  # Fase 2: Procesamiento\n    mostrar_formatos_nombre(minusculas, mayusculas, capitalizado)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_nombre()</code>: Captura el nombre completo del usuario. 2. <code>formatear_nombre(nombre)</code>: Devuelve el nombre en min\u00fasculas, may\u00fasculas y capitalizado. 3. <code>mostrar_formatos_nombre(minusculas, mayusculas, capitalizado)</code>: Muestra el nombre en cada formato.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1219-contar-las-letras-de-un-nombre","title":"Ejercicio 1.2.19: Contar las letras de un nombre","text":"<p>Problema: Escribe un programa que muestre la cantidad de letras del nombre en may\u00fasculas.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_nombre_usuario():\n    \"\"\"Solicita el nombre del usuario.\"\"\"\n    return input(\"Introduce tu nombre: \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef contar_letras(nombre):\n    \"\"\"Cuenta las letras de un nombre, ignorando los espacios.\"\"\"\n    nombre_sin_espacios = nombre.replace(\" \", \"\")\n    return len(nombre_sin_espacios), nombre.upper()\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_contador(nombre_mayusculas, cantidad_letras):\n    \"\"\"Muestra el nombre en may\u00fasculas y la cantidad de letras.\"\"\"\n    print(f\"{nombre_mayusculas} tiene {cantidad_letras} letras.\")\n\n# Funci\u00f3n principal\ndef main():\n    nombre = obtener_nombre_usuario()  # Fase 1: Entrada\n    cantidad_letras, nombre_mayusculas = contar_letras(nombre)  # Fase 2: Procesamiento\n    mostrar_contador(nombre_mayusculas, cantidad_letras)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_nombre_usuario()</code>: Captura el nombre del usuario. 2. <code>contar_letras(nombre)</code>: Cuenta las letras del nombre ignorando espacios y convierte el nombre a may\u00fasculas. 3. <code>mostrar_contador(nombre_mayusculas, cantidad_letras)</code>: Muestra el nombre en may\u00fasculas y el n\u00famero de letras.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1220-extraer-el-numero-de-telefono-sin-prefijo-y-extension","title":"Ejercicio 1.2.20: Extraer el n\u00famero de tel\u00e9fono sin prefijo y extensi\u00f3n","text":"<p>Problema: Escribe un programa que muestre el n\u00famero de tel\u00e9fono sin el prefijo y la extensi\u00f3n en un formato espec\u00edfico.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_telefono():\n    \"\"\"Solicita el n\u00famero de tel\u00e9fono en el formato +34-xxxxxxxxx-xx y lo devuelve como cadena.\"\"\"\n    return input(\"Introduce el n\u00famero de tel\u00e9fono (formato +34-xxxxxxxxx-xx): \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef extraer_numero_sin_prefijo_extension(telefono):\n    \"\"\"Extrae la parte central del n\u00famero de tel\u00e9fono, sin el prefijo y la extensi\u00f3n.\"\"\"\n    partes = telefono.split('-')\n    return partes[1] if len(partes) == 3 else \"\"\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_numero_sin_prefijo_extension(numero):\n    \"\"\"Muestra el n\u00famero sin prefijo ni extensi\u00f3n.\"\"\"\n    print(f\"El n\u00famero sin prefijo y extensi\u00f3n es: {numero}\")\n\n# Funci\u00f3n principal\ndef main():\n    telefono = obtener_telefono()  # Fase 1: Entrada\n    numero_sin_prefijo_extension = extraer_numero_sin_prefijo_extension(telefono)  # Fase 2: Procesamiento\n    mostrar_numero_sin_prefijo_extension(numero_sin_prefijo_extension)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_telefono()</code>: Captura el n\u00famero de tel\u00e9fono en el formato especificado. 2. <code>extraer_numero_sin_prefijo_extension(telefono)</code>: Extrae la parte central del n\u00famero, sin prefijo y sin extensi\u00f3n. 3. <code>mostrar_numero_sin_prefijo_extension(numero)</code>: Muestra el n\u00famero sin prefijo ni extensi\u00f3n.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1221-invertir-una-frase","title":"Ejercicio 1.2.21: Invertir una frase","text":"<p>Problema: Escribe un programa que invierta una frase introducida por el usuario.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_frase():\n    \"\"\"Solicita una frase al usuario.\"\"\"\n    return input(\"Introduce una frase: \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef invertir_frase(frase):\n    \"\"\"Invierte la frase.\"\"\"\n    return frase[::-1]\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_frase_invertida(frase_invertida):\n    \"\"\"Muestra la frase invertida.\"\"\"\n    print(f\"La frase invertida es: {frase_invertida}\")\n\n# Funci\u00f3n principal\ndef main():\n    frase = obtener_frase()  # Fase 1: Entrada\n    frase_invertida = invertir_frase(frase)  # Fase 2: Procesamiento\n    mostrar_frase_invertida(frase_invertida)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_frase()</code>: Captura la frase introducida por el usuario. 2. <code>invertir_frase(frase)</code>: Invierte la frase. 3. <code>mostrar_frase_invertida(frase_invertida)</code>: Muestra la frase invertida.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1222-reemplazar-una-vocal-en-la-frase-con-su-version-mayuscula","title":"Ejercicio 1.2.22: Reemplazar una vocal en la frase con su versi\u00f3n may\u00fascula","text":"<p>Problema: Escribe un programa que reemplace todas las ocurrencias de una vocal espec\u00edfica en una frase por su versi\u00f3n en may\u00fascula.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_frase_y_vocal():\n    \"\"\"Solicita una frase y una vocal para reemplazarla.\"\"\"\n    frase = input(\"Introduce una frase: \")\n    vocal = input(\"Introduce una vocal: \")\n    return frase, vocal\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef reemplazar_vocal(frase, vocal):\n    \"\"\"Reemplaza todas las ocurrencias de la vocal por su versi\u00f3n en may\u00fascula.\"\"\"\n    return frase.replace(vocal, vocal.upper())\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_frase_modificada(frase_modificada):\n    \"\"\"Muestra la frase con la vocal reemplazada por su versi\u00f3n en may\u00fascula.\"\"\"\n    print(f\"La frase modificada es: {frase_modificada}\")\n\n# Funci\u00f3n principal\ndef main():\n    frase, vocal = obtener_frase_y_vocal()  # Fase 1: Entrada\n    frase_modificada = reemplazar_vocal(frase, vocal)  # Fase 2: Procesamiento\n    mostrar_frase_modificada(frase_modificada)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_frase_y_vocal()</code>: Captura la frase y la vocal que se desea reemplazar. 2. <code>reemplazar_vocal(frase, vocal)</code>: Reemplaza todas las ocurrencias de la vocal por su versi\u00f3n en may\u00fascula. 3. <code>mostrar_frase_modificada(frase_modificada)</code>: Muestra la frase modificada.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1223-mostrar-un-correo-con-un-dominio-diferente","title":"Ejercicio 1.2.23: Mostrar un correo con un dominio diferente","text":"<p>Problema: Escribe un programa que reciba un correo y lo modifique para mostrarlo con un dominio diferente.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_correo():\n    \"\"\"Solicita el correo electr\u00f3nico del usuario.\"\"\"\n    return input(\"Introduce tu correo electr\u00f3nico: \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef cambiar_dominio(correo, nuevo_dominio=\"ceu.es\"):\n    \"\"\"Cambia el dominio de un correo electr\u00f3nico al nuevo dominio.\"\"\"\n    nombre_usuario = correo.split('@')[0]\n    return f\"{nombre_usuario}@{nuevo_dominio}\"\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_correo_modificado(correo_modificado):\n    \"\"\"Muestra el correo con el nuevo dominio.\"\"\"\n    print(f\"Tu nuevo correo es: {correo_modificado}\")\n\n# Funci\u00f3n principal\ndef main():\n    correo = obtener_correo()  # Fase 1: Entrada\n    correo_modificado = cambiar_dominio(correo)  # Fase 2: Procesamiento\n    mostrar_correo_modificado(correo_modificado)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_correo()</code>: Captura el correo electr\u00f3nico del usuario. 2. <code>cambiar_dominio(correo, nuevo_dominio)</code>: Cambia el dominio del correo al nuevo dominio. 3. <code>mostrar_correo_modificado(correo_modificado)</code>: Muestra el correo con el nuevo dominio.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1224-mostrar-el-numero-de-euros-y-centimos-de-un-precio","title":"Ejercicio 1.2.24: Mostrar el n\u00famero de euros y c\u00e9ntimos de un precio","text":"<p>Problema: Escribe un programa que muestre la parte entera y la parte decimal de un precio en euros.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_precio():\n    \"\"\"Solicita el precio del producto en euros con dos decimales.\"\"\"\n    return input(\"Introduce el precio del producto en euros (ejemplo: 12.34): \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef separar_euros_y_centimos(precio):\n    \"\"\"Separa el n\u00famero de euros y c\u00e9ntimos de un precio.\"\"\"\n    euros, centimos = precio.split('.')\n    return euros, centimos\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_euros_y_centimos(euros, centimos):\n    \"\"\"Muestra los euros y c\u00e9ntimos del precio.\"\"\"\n    print(f\"El n\u00famero de euros es: {euros} y el n\u00famero de c\u00e9ntimos es: {centimos}\")\n\n# Funci\u00f3n principal\ndef main():\n    precio = obtener_precio()  # Fase 1: Entrada\n    euros, centimos = separar_euros_y_centimos(precio)  # Fase 2: Procesamiento\n    mostrar_euros_y_centimos(euros, centimos)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_precio()</code>: Captura el precio del producto en euros. 2. <code>separar_euros_y_centimos(precio)</code>: Separa la parte entera y la parte decimal del precio. 3. <code>mostrar_euros_y_centimos(euros, centimos)</code>: Muestra los euros y c\u00e9ntimos por separado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1225-mostrar-dia-mes-y-ano-de-una-fecha-introducida","title":"Ejercicio 1.2.25: Mostrar d\u00eda, mes y a\u00f1o de una fecha introducida","text":"<p>Problema: Escribe un programa que muestre el d\u00eda, mes y a\u00f1o de una fecha introducida en formato <code>dd/mm/aaaa</code>.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_fecha():\n    \"\"\"Solicita la fecha de nacimiento en formato dd/mm/aaaa.\"\"\"\n    return input(\"Introduce tu fecha de nacimiento (dd/mm/aaaa): \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef separar_dia_mes_a\u00f1o(fecha):\n    \"\"\"Separa el d\u00eda, mes y a\u00f1o de una fecha en formato dd/mm/aaaa.\"\"\"\n    dia, mes, anio = fecha.split('/')\n    return dia, mes, anio\n\n# Fase 3: Salida o\n\n presentaci\u00f3n de resultados\ndef mostrar_dia_mes_a\u00f1o(dia, mes, anio):\n    \"\"\"Muestra el d\u00eda, mes y a\u00f1o de la fecha.\"\"\"\n    print(f\"D\u00eda: {dia}\")\n    print(f\"Mes: {mes}\")\n    print(f\"A\u00f1o: {anio}\")\n\n# Funci\u00f3n principal\ndef main():\n    fecha = obtener_fecha()  # Fase 1: Entrada\n    dia, mes, anio = separar_dia_mes_a\u00f1o(fecha)  # Fase 2: Procesamiento\n    mostrar_dia_mes_a\u00f1o(dia, mes, anio)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_fecha()</code>: Captura la fecha en formato <code>dd/mm/aaaa</code>. 2. <code>separar_dia_mes_a\u00f1o(fecha)</code>: Separa el d\u00eda, mes y a\u00f1o de la fecha. 3. <code>mostrar_dia_mes_a\u00f1o(dia, mes, anio)</code>: Muestra el d\u00eda, mes y a\u00f1o de la fecha por separado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1226-mostrar-cada-producto-en-una-linea-distinta","title":"Ejercicio 1.2.26: Mostrar cada producto en una l\u00ednea distinta","text":"<p>Problema: Escribe un programa que muestre cada producto de una lista separados por comas en l\u00edneas distintas.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_productos():\n    \"\"\"Solicita una lista de productos separados por comas.\"\"\"\n    return input(\"Introduce los productos de la cesta de la compra, separados por comas: \")\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef separar_productos(productos):\n    \"\"\"Separa los productos en una lista usando la coma como delimitador.\"\"\"\n    return productos.split(',')\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_productos(productos):\n    \"\"\"Muestra cada producto en una l\u00ednea distinta.\"\"\"\n    for producto in productos:\n        print(producto.strip())\n\n# Funci\u00f3n principal\ndef main():\n    productos = obtener_productos()  # Fase 1: Entrada\n    lista_productos = separar_productos(productos)  # Fase 2: Procesamiento\n    mostrar_productos(lista_productos)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_productos()</code>: Captura la lista de productos introducidos por el usuario. 2. <code>separar_productos(productos)</code>: Separa los productos en una lista utilizando la coma como delimitador. 3. <code>mostrar_productos(productos)</code>: Muestra cada producto en una l\u00ednea separada.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1227-mostrar-formato-de-un-producto","title":"Ejercicio 1.2.27: Mostrar formato de un producto","text":"<p>Problema: Escribe un programa que pida el nombre de un producto, su precio y el n\u00famero de unidades, y luego muestre estos valores en un formato espec\u00edfico.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_datos_producto():\n    \"\"\"Solicita el nombre, precio y n\u00famero de unidades de un producto.\"\"\"\n    nombre_producto = input(\"Introduce el nombre del producto: \")\n    precio = float(input(\"Introduce el precio del producto: \"))\n    unidades = int(input(\"Introduce el n\u00famero de unidades: \"))\n    return nombre_producto, precio, unidades\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_coste_total(precio, unidades):\n    \"\"\"Calcula el coste total de un producto.\"\"\"\n    return precio * unidades\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_producto(nombre_producto, precio, unidades, coste_total):\n    \"\"\"Muestra el nombre del producto, su precio, n\u00famero de unidades y coste total.\"\"\"\n    print(f\"{nombre_producto}: {precio:6.2f}\u20ac {unidades:3d} unidades, Coste total: {coste_total:8.2f}\u20ac\")\n\n# Funci\u00f3n principal\ndef main():\n    nombre_producto, precio, unidades = obtener_datos_producto()  # Fase 1: Entrada\n    coste_total = calcular_coste_total(precio, unidades)  # Fase 2: Procesamiento\n    mostrar_producto(nombre_producto, precio, unidades, coste_total)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_datos_producto()</code>: Captura el nombre, precio y n\u00famero de unidades del producto. 2. <code>calcular_coste_total(precio, unidades)</code>: Calcula el coste total del producto. 3. <code>mostrar_producto(nombre_producto, precio, unidades, coste_total)</code>: Muestra el nombre, precio, unidades y coste total en el formato deseado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1228-calcular-el-area-de-un-triangulo-con-la-formula-de-heron","title":"Ejercicio 1.2.28: Calcular el \u00e1rea de un tri\u00e1ngulo con la f\u00f3rmula de Her\u00f3n","text":"<p>Problema: Escribe un programa que calcule el \u00e1rea de un tri\u00e1ngulo a partir de sus tres lados usando la f\u00f3rmula de Her\u00f3n.</p> \\[ A = \\sqrt{s \\times (s - a) \\times (s - b) \\times (s - c)} \\] <p>donde \\( s \\) es el semiper\u00edmetro del tri\u00e1ngulo y se calcula como:</p> \\[ s = \\frac{a + b + c}{2} \\] <pre><code>import math\n\n# Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_lados_triangulo():\n    \"\"\"Solicita los tres lados del tri\u00e1ngulo y los devuelve como tupla.\"\"\"\n    a = float(input(\"Introduce el primer lado del tri\u00e1ngulo: \"))\n    b = float(input(\"Introduce el segundo lado del tri\u00e1ngulo: \"))\n    c = float(input(\"Introduce el tercer lado del tri\u00e1ngulo: \"))\n    return a, b, c\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_area_triangulo_heron(a, b, c):\n    \"\"\"Calcula el \u00e1rea de un tri\u00e1ngulo usando la f\u00f3rmula de Her\u00f3n.\"\"\"\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_area_triangulo(area):\n    \"\"\"Muestra el \u00e1rea del tri\u00e1ngulo calculada.\"\"\"\n    print(f\"El \u00e1rea del tri\u00e1ngulo es: {area:.2f}\")\n\n# Funci\u00f3n principal\ndef main():\n    a, b, c = obtener_lados_triangulo()  # Fase 1: Entrada\n    area = calcular_area_triangulo_heron(a, b, c)  # Fase 2: Procesamiento\n    mostrar_area_triangulo(area)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_lados_triangulo()</code>: Captura los tres lados del tri\u00e1ngulo. 2. <code>calcular_area_triangulo_heron(a, b, c)</code>: Calcula el \u00e1rea usando la f\u00f3rmula de Her\u00f3n. 3. <code>mostrar_area_triangulo(area)</code>: Muestra el \u00e1rea con dos decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1229-generar-un-numero-aleatorio-entre-dos-valores","title":"Ejercicio 1.2.29: Generar un n\u00famero aleatorio entre dos valores","text":"<p>Problema: Escribe un programa que genere un n\u00famero aleatorio entre dos valores introducidos por el usuario.</p> <pre><code>import random\n\n# Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_limites():\n    \"\"\"Solicita el valor inferior y superior para generar un n\u00famero aleatorio.\"\"\"\n    valor_inferior = int(input(\"Introduce el valor inferior: \"))\n    valor_superior = int(input(\"Introduce el valor superior: \"))\n    return valor_inferior, valor_superior\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef generar_numero_aleatorio(valor_inferior, valor_superior):\n    \"\"\"Genera un n\u00famero aleatorio entre valor_inferior y valor_superior.\"\"\"\n    return random.randint(valor_inferior, valor_superior)\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_numero_aleatorio(numero_aleatorio, valor_inferior, valor_superior):\n    \"\"\"Muestra el n\u00famero aleatorio generado.\"\"\"\n    print(f\"El n\u00famero aleatorio generado entre {valor_inferior} y {valor_superior} es: {numero_aleatorio}\")\n\n# Funci\u00f3n principal\ndef main():\n    valor_inferior, valor_superior = obtener_limites()  # Fase 1: Entrada\n    numero_aleatorio = generar_numero_aleatorio(valor_inferior, valor_superior)  # Fase 2: Procesamiento\n    mostrar_numero_aleatorio(numero_aleatorio, valor_inferior, valor_superior)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_limites()</code>: Captura el valor inferior y superior. 2. <code>generar_numero_aleatorio(valor_inferior, valor_superior)</code>: Genera un n\u00famero aleatorio entre los valores introducidos. 3. <code>mostrar_numero_aleatorio(numero_aleatorio, valor_inferior, valor_superior)</code>: Muestra el n\u00famero aleatorio generado.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1230-determinar-si-un-numero-es-primo","title":"Ejercicio 1.2.30: Determinar si un n\u00famero es primo","text":"<p>Problema: Escribe un programa que determine si un n\u00famero dado es primo.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_numero():\n    \"\"\"Solicita un n\u00famero entero al usuario.\"\"\"\n    return int(input(\"Introduce un n\u00famero entero: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef es_primo(n):\n    \"\"\"Devuelve True si el n\u00famero es primo, False en caso contrario.\"\"\"\n    if n &lt; 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_resultado_primo(n, primo):\n    \"\"\"Muestra si el n\u00famero es primo o no.\"\"\"\n    if primo:\n        print(f\"{n} es un n\u00famero primo.\")\n    else:\n        print(f\"{n} no es un n\u00famero primo.\")\n\n# Funci\u00f3n principal\ndef main():\n    numero = obtener_numero()  # Fase 1: Entrada\n    primo = es_primo(numero)  # Fase 2: Procesamiento\n    mostrar_resultado_primo(numero, primo)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_numero()</code>: Captura un n\u00famero entero introducido por el usuario. 2. <code>es_primo(n)</code>: Determina si el n\u00famero es primo. 3. <code>mostrar_resultado_primo(n, primo)</code>: Muestra si el n\u00famero es primo o no.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1231-mostrar-todos-los-divisores-de-un-numero","title":"Ejercicio 1.2.31: Mostrar todos los divisores de un n\u00famero","text":"<p>Problema: Escribe un programa que muestre todos los divisores de un n\u00famero entero introducido por el usuario.</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_numero():\n    \"\"\"Solicita un n\u00famero entero al usuario.\"\"\"\n    return int(input(\"Introduce un n\u00famero entero: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_divisores(numero):\n    \"\"\"Calcula y devuelve una lista con todos los divisores del n\u00famero.\"\"\"\n    divisores = [i for i in range(1, numero + 1) if numero % i == 0]\n    return divisores\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_divisores(divisores):\n    \"\"\"Muestra todos los divisores del n\u00famero.\"\"\"\n    print(f\"Los divisores del n\u00famero son: {', '.join(map(str, divisores))}\")\n\n# Funci\u00f3n principal\ndef main():\n    numero = obtener_numero()  # Fase 1: Entrada\n    divisores = calcular_divisores(numero)  # Fase 2: Procesamiento\n    mostrar_divisores(divisores)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_numero()</code>: Captura un n\u00famero entero introducido por el usuario. 2. <code>calcular_divisores(numero)</code>: Calcula todos los divisores del n\u00famero. 3. <code>mostrar_divisores(divisores)</code>: Muestra los divisores separados por comas.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejercicio-1232-calcular-la-serie-de-fibonacci-hasta-un-numero-dado","title":"Ejercicio 1.2.32: Calcular la serie de Fibonacci hasta un n\u00famero dado","text":"<p>Problema: Escribe un programa que muestre la serie de Fibonacci hasta un n\u00famero l\u00edmite \\( n \\).</p> <pre><code># Fase 1: Entrada y validaci\u00f3n de datos\ndef obtener_limite_fibonacci():\n    \"\"\"Solicita el n\u00famero l\u00edmite para la serie de Fibonacci.\"\"\"\n    return int(input(\"Introduce un n\u00famero l\u00edmite para la serie de Fibonacci: \"))\n\n# Fase 2: Procesamiento (l\u00f3gica de negocio)\ndef calcular_serie_fibonacci(limite):\n    \"\"\"Calcula la serie de Fibonacci hasta el n\u00famero l\u00edmite dado.\"\"\"\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] &lt;= limite:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\n\n# Fase 3: Salida o presentaci\u00f3n de resultados\ndef mostrar_serie_fibonacci(serie_fibonacci):\n    \"\"\"Muestra la serie de Fibonacci.\"\"\"\n    print(f\"La serie de Fibonacci es: {', '.join(map(str, serie_fibonacci))}\")\n\n# Funci\u00f3n principal\ndef main():\n    limite = obtener_limite_fibonacci()  # Fase 1: Entrada\n    serie_fibonacci = calcular_serie_fibonacci(limite)  # Fase 2: Procesamiento\n    mostrar_serie_fibonacci(serie_fibonacci)  # Fase 3: Salida\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Explicaci\u00f3n: 1. <code>obtener_limite_fibonacci()</code>: Captura el n\u00famero l\u00edmite para la serie de Fibonacci. 2. <code>calcular_serie_fibonacci(limite)</code>: Calcula la serie de Fibonacci hasta el n\u00famero l\u00edmite. 3. <code>mostrar_serie_fibonacci(serie_fibonacci)</code>: Muestra la serie de Fibonacci hasta el l\u00edmite.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#p12-test-de-los-ejercicios-en-python","title":"P1.2 Test de los ejercicios en python","text":""},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#creacion-de-pruebas-unitarias-para-las-funciones-de-procesamiento-de-los-ejercicios","title":"Creaci\u00f3n de Pruebas Unitarias para las Funciones de Procesamiento de los Ejercicios","text":"<p>Este fichero deber\u00eda llamarse <code>test_ejercicios.py</code> y contendr\u00eda las pruebas unitarias para las funciones de procesamiento de los ejercicios, usando el framework <code>pytest</code>. Cada test verificar\u00e1 la funcionalidad central de cada ejercicio, y en los casos donde se necesiten datos de entrada/salida espec\u00edficos, se usar\u00e1n ejemplos simples para validar las funciones de l\u00f3gica de negocio.</p>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#archivo-test_ejerciciospy","title":"Archivo <code>test_ejercicios.py</code>","text":"<pre><code>import pytest\nfrom math import isclose\n\n# Importar las funciones de cada ejercicio. Aseg\u00farate de que las funciones est\u00e9n en un archivo llamado `main.py` o el nombre que desees.\nfrom main import (\n    calcular_area_triangulo,\n    calcular_imc,\n    convertir_a_dolares,\n    es_par,\n    convertir_a_kelvin,\n    calcular_hipotenusa,\n    calcular_peso_total,\n    calcular_saldo_final,\n    calcular_precio_total_barras,\n    repetir_nombre,\n    formatear_nombre,\n    contar_letras,\n    extraer_numero_sin_prefijo_extension,\n    invertir_frase,\n    reemplazar_vocal,\n    cambiar_dominio,\n    separar_euros_y_centimos,\n    separar_dia_mes_a\u00f1o,\n    separar_productos,\n    calcular_coste_total,\n    calcular_area_triangulo_heron,\n    generar_numero_aleatorio,\n    es_primo,\n    calcular_divisores,\n    calcular_serie_fibonacci,\n)\n\n# Pruebas para cada ejercicio\ndef test_calcular_area_triangulo():\n    assert calcular_area_triangulo(5, 10) == 25.0\n    assert calcular_area_triangulo(0, 10) == 0.0\n\ndef test_calcular_imc():\n    assert isclose(calcular_imc(70, 1.75), 22.86, rel_tol=1e-2)\n    assert isclose(calcular_imc(80, 1.80), 24.69, rel_tol=1e-2)\n\ndef test_convertir_a_dolares():\n    assert convertir_a_dolares(100, 1.1) == 110.0\n    assert convertir_a_dolares(50, 1.5) == 75.0\n\ndef test_es_par():\n    assert es_par(4) == True\n    assert es_par(7) == False\n\ndef test_convertir_a_kelvin():\n    assert convertir_a_kelvin(0) == 273.15\n    assert convertir_a_kelvin(-273.15) == 0.0\n\ndef test_calcular_hipotenusa():\n    assert isclose(calcular_hipotenusa(3, 4), 5.0, rel_tol=1e-9)\n    assert isclose(calcular_hipotenusa(6, 8), 10.0, rel_tol=1e-9)\n\ndef test_calcular_peso_total():\n    assert calcular_peso_total(10, 5) == 10 * 112 + 5 * 75\n    assert calcular_peso_total(0, 10) == 10 * 75\n\ndef test_calcular_saldo_final():\n    assert isclose(calcular_saldo_final(1000), 1124.864, rel_tol=1e-3)\n    assert isclose(calcular_saldo_final(500), 562.432, rel_tol=1e-3)\n\ndef test_calcular_precio_total_barras():\n    assert isclose(calcular_precio_total_barras(10), 13.96, rel_tol=1e-2)\n    assert isclose(calcular_precio_total_barras(0), 0.0)\n\ndef test_repetir_nombre():\n    assert repetir_nombre(\"Juan\", 3) == [\"Juan\", \"Juan\", \"Juan\"]\n    assert repetir_nombre(\"Ana\", 0) == []\n\ndef test_formatear_nombre():\n    assert formatear_nombre(\"Juan P\u00e9rez\") == (\"juan p\u00e9rez\", \"JUAN P\u00c9REZ\", \"Juan P\u00e9rez\")\n    assert formatear_nombre(\"ANA\") == (\"ana\", \"ANA\", \"Ana\")\n\ndef test_contar_letras():\n    assert contar_letras(\"Ana Mar\u00eda\") == (7, \"ANA MAR\u00cdA\")\n    assert contar_letras(\"Juan\") == (4, \"JUAN\")\n\ndef test_extraer_numero_sin_prefijo_extension():\n    assert extraer_numero_sin_prefijo_extension(\"+34-123456789-01\") == \"123456789\"\n    assert extraer_numero_sin_prefijo_extension(\"123-456-789\") == \"\"\n\ndef test_invertir_frase():\n    assert invertir_frase(\"Hola Mundo\") == \"odnuM aloH\"\n    assert invertir_frase(\"Python\") == \"nohtyP\"\n\ndef test_reemplazar_vocal():\n    assert reemplazar_vocal(\"hola mundo\", \"o\") == \"hOla mundO\"\n    assert reemplazar_vocal(\"banana\", \"a\") == \"bAnAnA\"\n\ndef test_cambiar_dominio():\n    assert cambiar_dominio(\"usuario@dominio.com\") == \"usuario@ceu.es\"\n    assert cambiar_dominio(\"test@prueba.org\") == \"test@ceu.es\"\n\ndef test_separar_euros_y_centimos():\n    assert separar_euros_y_centimos(\"12.34\") == (\"12\", \"34\")\n    assert separar_euros_y_centimos(\"100.00\") == (\"100\", \"00\")\n\ndef test_separar_dia_mes_a\u00f1o():\n    assert separar_dia_mes_a\u00f1o(\"01/12/2021\") == (\"01\", \"12\", \"2021\")\n    assert separar_dia_mes_a\u00f1o(\"15/07/1995\") == (\"15\", \"07\", \"1995\")\n\ndef test_separar_productos():\n    assert separar_productos(\"pan, leche, huevos\") == [\"pan\", \"leche\", \"huevos\"]\n    assert separar_productos(\"manzana, pl\u00e1tano\") == [\"manzana\", \"pl\u00e1tano\"]\n\ndef test_calcular_coste_total():\n    assert calcular_coste_total(10, 5) == 50.0\n    assert calcular_coste_total(3.49, 10) == 34.9\n\ndef test_calcular_area_triangulo_heron():\n    assert isclose(calcular_area_triangulo_heron(3, 4, 5), 6.0, rel_tol=1e-9)\n    assert isclose(calcular_area_triangulo_heron(7, 10, 5), 16.25, rel_tol=1e-9)\n\ndef test_generar_numero_aleatorio():\n    valor_inferior = 1\n    valor_superior = 10\n    numero_aleatorio = generar_numero_aleatorio(valor_inferior, valor_superior)\n    assert valor_inferior &lt;= numero_aleatorio &lt;= valor_superior\n\ndef test_es_primo():\n    assert es_primo(7) == True\n    assert es_primo(9) == False\n\ndef test_calcular_divisores():\n    assert calcular_divisores(6) == [1, 2, 3, 6]\n    assert calcular_divisores(13) == [1, 13]\n\ndef test_calcular_serie_fibonacci():\n    assert calcular_serie_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]\n    assert calcular_serie_fibonacci(1) == [0, 1, 1]\n</code></pre>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#explicacion-de-las-pruebas","title":"Explicaci\u00f3n de las pruebas","text":"<p>Cada funci\u00f3n de procesamiento tiene su correspondiente prueba en <code>pytest</code>. Vamos a explicar algunas de ellas:</p> <ol> <li>Pruebas con <code>assert</code>: Utilizamos <code>assert</code> para comparar los resultados de las funciones con los resultados esperados.</li> <li>Tolerancia (<code>rel_tol</code>): Para pruebas con n\u00fameros decimales (por ejemplo, <code>calcular_area_triangulo</code>), utilizamos <code>isclose</code> con una tolerancia relativa (<code>rel_tol</code>) para evitar problemas de precisi\u00f3n.</li> <li>Verificaci\u00f3n de listas y cadenas: Para funciones que devuelven listas (<code>calcular_divisores</code>, <code>calcular_serie_fibonacci</code>) o cadenas (<code>reemplazar_vocal</code>), comparamos las listas completas o las cadenas resultantes.</li> </ol>"},{"location":"section1/u01/practica/OtrosRecursos/ejercicios/PROG-U1.-Practica002-solucion-pythonPorFases/#ejecucion-de-pruebas","title":"Ejecuci\u00f3n de pruebas","text":"<p>Para ejecutar las pruebas, aseg\u00farate de tener <code>pytest</code> instalado y ejecuta el siguiente comando en la terminal:</p> <pre><code>&gt; pytest -v test_ejercicios.py\n</code></pre> <p>Si tienes las funciones en un archivo llamado <code>main.py</code>, verifica que las rutas de importaci\u00f3n en el archivo de pruebas sean correctas (por ejemplo, <code>from main import calcular_area_triangulo</code>).</p>"},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/","title":"UD 1 - 1.1 Un programa inform\u00e1tico","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#11-un-programa-informatico","title":"1.1. Un programa inform\u00e1tico","text":"<p>Un programa inform\u00e1tico es un conjunto de instrucciones que permiten a un dispositivo, como un ordenador, realizar tareas espec\u00edficas. Estas instrucciones est\u00e1n escritas en un lenguaje de programaci\u00f3n y traducidas a lenguaje de m\u00e1quina para que el hardware pueda ejecutarlas. Los programas se desarrollan para resolver problemas o automatizar procesos, siguiendo un ciclo que incluye la planificaci\u00f3n, codificaci\u00f3n, prueba y mantenimiento. A lo largo del proceso de programaci\u00f3n, se utilizan herramientas y entornos que facilitan la creaci\u00f3n y gesti\u00f3n del software</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#1-la-programacion","title":"1. La programaci\u00f3n","text":"<ul> <li>Definici\u00f3n: Es el proceso por el cual se desarrolla un programa, haciendo uso de herramientas, entre otras: un lenguajes de programaci\u00f3n mediante el que se indican las instrucciones al dispositivo y un traductor que sea capaz de traducirlo al lenguaje m\u00e1quina. Este lenguaje m\u00e1quina lo entiende el microprocesador del dispositivo (ordenador, m\u00f3vil, tablet,...)</li> <li>El Ciclo de vida para el desarrollo de un programa es: Entender el problema, Recopilar requisitos, Planificar, Dise\u00f1ar, Programar, Probar, Desplegar, Mantener.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#2-ordenador-o-cualquier-otro-dispositivo","title":"2. Ordenador (o cualquier otro dispositivo)","text":"<ul> <li>M\u00e1quina electr\u00f3nica, anal\u00f3gica o digital, dotada de una memoria y de m\u00e9todos de tratamiento de la informaci\u00f3n, capaz de resolver problemas matem\u00e1ticos y l\u00f3gicos mediante la utilizaci\u00f3n de programas inform\u00e1ticos.</li> <li>Un ordenador ejecuta programas, que son un conjunto de instrucciones representadas mediante un lenguaje de programaci\u00f3n y datos que se ejecutan de forma secuencial y que a partir de unos datos de entrada producen una salida. Para ejecutar esos programas el ordenador sigue esta estructura b\u00e1sica:</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#3-que-es-un-programa-o-software","title":"3. \u00bfQu\u00e9 es un programa o software?","text":"<p>El software, de acuerdo con el IEEE: \u201ces el conjunto de los programas de c\u00f3mputo, procedimientos, reglas, documentaci\u00f3n y datos asociados, que forman parte de las operaciones de un sistema de computaci\u00f3n\u201d.</p> <p>Dicho en otras palabras, son todos los programas o aplicaciones incluidas en un dispositivo y que le permiten realizar tareas espec\u00edficas.</p> <p>El software le da instrucciones al hardware de la forma como debe realizar una tarea, por esta raz\u00f3n, todos los programas que usamos en un dispositivo son software, por ejemplo:</p> <ul> <li>Navegador web como Google Chrome o Mozilla Firefox.</li> <li>Sistemas operativos como Windows, Mac OS, Linux, Android, entre otros.</li> <li>Antivirus.</li> <li>Aplicaciones de ofim\u00e1tica como Microsoft Word.</li> <li>Sistemas empresariales como un BPMS, ERP, CRM, entre otros.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#31-tipos-de-software","title":"3.1. Tipos de software","text":"<ul> <li>De sistema (Sistema operativo, drivers -controladores-)</li> <li>De aplicaci\u00f3n (Suite ofim\u00e1tica, Navegador, Edici\u00f3n de imagen, ...)</li> <li>De desarrollo (Editores, compiladores, interpretes, ...)</li> </ul> <p>Los drivers son los controladores de dispositivos.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#4-relacion-hardware-software","title":"4. Relaci\u00f3n Hardware-Software","text":"<p>La relaci\u00f3n entre el software y el hardware se pueden describir de la siguiente forma:  </p> <ul> <li>Disco duro: almacena de forma permanente los archivos ejecutables y los archivos de datos.  </li> <li>Memoria RAM: almacena de forma temporal el c\u00f3digo binario de los archivos ejecutables y los archivos de datos necesarios.  </li> <li>CPU: lee y ejecuta instrucciones almacenadas en memoria RAM, as\u00ed como los datos necesarios.  </li> <li>E/S: estos dispositivos recogen nuevos datos desde la entrada, muestran los resultados, leen/guardan a disco, etc.  </li> </ul> <p>El disco duro se considera un perif\u00e9rico de E/S (Entrada/Salida).</p> <p>La CPU se llama tambi\u00e9n UCP (en ingl\u00e9s), procesador o microprocesador.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#5-algoritmos","title":"5. Algoritmos","text":"<p>Como dec\u00edamos, la programaci\u00f3n es el proceso que se utiliza para la creaci\u00f3n de programas que se ejecutan en dispositivos con capacidad de c\u00f3mputo. Estos programas son creados para satisfacer unas necesidades o resolver problemas.</p> <p>Para que este proceso tenga \u00e9xito, se ha de analizar el problema que se quiere satisfacer y describir cada paso que se va a realizar, es decir, se ha de dise\u00f1ar el algoritmo (secuencia de pasos) que se va a seguir para llegar a la soluci\u00f3n.</p> <p>Algoritmo: En t\u00e9rminos de programaci\u00f3n, un algoritmo es una secuencia de pasos l\u00f3gicos que permiten solucionar un problema.</p> <p>Una vez se tenga el algoritmo, se podr\u00e1 pasar a su codificaci\u00f3n, es decir, escribir ese algoritmo a c\u00f3digo fuente mediante un lenguaje de programaci\u00f3n y por \u00faltimo se generar\u00e1 el programa que se ejecutar\u00e1 en el ordenador para poder depurarse antes de darlo por finalizado.</p> <p> </p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#51-caracteristicas-de-los-algoritmos","title":"5.1 Caracter\u00edsticas de los algoritmos","text":"<p>Seg\u00fan Joyanes en su libro \u201cFundamentos de la programaci\u00f3n\u201d, las caracter\u00edsticas que debe tener cualquier algoritmo son:   </p> <ul> <li>Preciso: se debe indicar el orden de realizaci\u00f3n de cada paso.   </li> <li>Definido: si se sigue un algoritmo dos veces con las mismas entradas, se debe obtener el mismo resultado.   </li> <li>Finito: todo algoritmo debe terminar en alg\u00fan momento.   </li> </ul> <p>Las algoritmos son independientes del lenguaje en el que se implementan y del dispositivo en el que se ejecutan.  Aprender a programar, no es aprender un lenguaje de programaci\u00f3n, si no realizar algoritmos correctos que resuelvan un problema.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#52-pseudocodigo-y-diagramas-de-flujo","title":"5.2 Pseudocodigo y diagramas de flujo","text":"<p>El pseudoc\u00f3digo se puede considerar como un lenguaje intermedio entre el lenguaje humano y el lenguaje de programaci\u00f3n y las palabras reservadas de este. Tambi\u00e9n permite la representaci\u00f3n de las estructuras de control y la asignaci\u00f3n de manera muy f\u00e1cil.</p> <p>Supongamos que queremos resolver un problema, sobre \"como realizar el mantenimiento de una l\u00e1mpara\".</p> <pre><code>Si la lampara funciona entonces\n    fin. # (1)\nSi no\n    Si la lampara NO est\u00e1 enchufada entonces\n        Enchufarla.\n    Si el foco est\u00e1 quemado entonces\n        Reemplazar el foco.\n    Si sigue sin funcionar entonces\n        Comprar nueva l\u00e1mpara.\nfin. # (1)      \n</code></pre> <ol> <li>:man_raising_hand: Con la palabra <code>fin</code>, finaliza el programa.</li> </ol> <p>Los diagramas de flujo son representaciones gr\u00e1ficas de la secuencia de operaciones que se realizan dentro de un algoritmo. Se representan mediante un conjunto de formas unidas por flechas. Para indicar el inicio del diagrama, se representa en un \u00f3valo la palabra \u201cinicio\u201d. Una secuencia de operaciones se representan mediante una secuencia (lo m\u00e1s detallada posible) de rect\u00e1ngulos de arriba-abajo o derecha-izquierda. Un rombo representa una operaci\u00f3n condicional con dos posibles caminos a seguir.</p> <p></p> <p>\u00bfPodr\u00edas mejorar el algoritmo anterior?</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#6-lenguajes-de-programacion","title":"6. Lenguajes de programaci\u00f3n","text":"<p>Un lenguaje de programaci\u00f3n es un lenguaje formal que especifica una serie de instrucciones que pueden ser usadas para generar diversos tipos de datos, controlar el flujo de ejecuci\u00f3n y representar datos. Los lenguajes de programaci\u00f3n permiten a los programadores especificar de manera precisa las instrucciones que un ordenador debe seguir para llevar a cabo una tarea.</p> <p>Este punto se estudiar\u00e1 de forma general en el m\u00f3dulo de entornos de desarrollo y particularmente (kotlin y python) en en las siguientes unidades.</p> <ul> <li>TIOBE</li> <li>Encuesta stackoverflow</li> <li>\u00bfQue lenguajes de programaci\u00f3n conoces?</li> <li>\u00bfTienes alguna preferencia?</li> <li>\u00bfCu\u00e1l crees que se adapta mejor a:<ul> <li>multiplataforma?</li> <li>desarrollo web?</li> </ul> </li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/","title":"UD 1 - 1.1.1 Pseudoc\u00f3digo","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#111-el-pseudocodigo","title":"1.1.1. El pseudoc\u00f3digo","text":"<p>El pseudoc\u00f3digo es una forma de representar algoritmos de forma que sean f\u00e1cilmente entendibles por cualquier persona, independientemente de su formaci\u00f3n en programaci\u00f3n. Se trata de un lenguaje de programaci\u00f3n simplificado que utiliza expresiones y estructuras de control propias de la programaci\u00f3n estructurada.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#1-pseudocodigo-caracteristicas","title":"1. Pseudoc\u00f3digo. Caracter\u00edsticas","text":"<ul> <li>Lenguaje cercano a un lenguaje de programaci\u00f3n cuyo objetivo es el desarrollo de algoritmos f\u00e1cilmente interpretables por un programador.</li> <li>Es independiente del lenguaje de programaci\u00f3n en el que vayamos a realizar posteriormente nuestra aplicaci\u00f3n.</li> <li>Debe utilizar un conjunto limitado de expresiones, pero no existe una sintaxis estandarizada.</li> <li>Pueden escribir algoritmos que tengan una soluci\u00f3n finita y que comiencen desde un \u00fanico punto de partida.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#2-elementos-de-un-programa-en-pseudocodigo","title":"2. Elementos de un programa en pseudoc\u00f3digo","text":"<p>A pesar de que no existe una norma r\u00edgida que establezca c\u00f3mo realizar la escritura de programas en pseudoc\u00f3digo, es recomendable seguir una serie de recomendaciones que permitan transcribir el programa al lenguaje de programaci\u00f3n que va a usarse con la mayor facilidad.</p> <p>A la hora de realizar programas en pseudoc\u00f3digo, podemos utilizar los siguientes elementos:</p> <ul> <li>Inicio</li> <li>Fin</li> <li>Escribe \"un texto a escribir\"</li> <li>Lee X</li> <li>Si (condici\u00f3n) entonces</li> <li>Si (condici\u00f3n) entonces ... Sino ....</li> <li>Seg\u00fan (valor) entonces ... opcion1: ... opcion2: ...</li> <li>Mientras (condici\u00f3n) hacer ....</li> <li>Para X en (1...N) hacer ....</li> <li>Operadores matem\u00e1ticos b\u00e1sicos: +, -, *, /, // y % (m\u00f3dulo).</li> <li>Operadores relacionales: == (igual), &gt;, &lt;, &gt;=, &lt;= y != (distinto).</li> <li>Operadores l\u00f3gicos: and, or y not (negaci\u00f3n).</li> <li>La asignaci\u00f3n de valores a una variable la realizaremos con el s\u00edmbolo =</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#21-inicio-y-fin","title":"2.1. Inicio y Fin","text":"<p>Todo algoritmo va a empezar por un paso o instrucci\u00f3n  <code>Inicio</code> y va a terminar con la palabra reservada <code>Fin</code>.</p> <p>Ejemplo:</p> <pre><code>Inicio\n    Escribe \u201c\u00bfC\u00f3mo te llamas?\u201d\n    Lee nombre\n    Escribe \u201cHola, \u201d + nombre\nFin\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#22-variables","title":"2.2. Variables","text":"<ul> <li>Una variable va a ser b\u00e1sicamente un contenedor de informaci\u00f3n al que le vamos a asignar un nombre en min\u00fasculas.</li> <li>Podr\u00e1 contener los siguientes tipos de datos: Cadena de caracteres (se representa con comillas dobles <code>\"Una cadena\"</code>), n\u00fameros (enteros <code>5</code>y decimales <code>5.4</code>) y valores l\u00f3gicos (<code>verdadero</code>/<code>falso</code>).</li> <li>Su valor podr\u00e1 ser modificado a lo largo del algoritmo.</li> <li>El tipo de datos que contiene no vamos a especificarlo expl\u00edcitamente simplemente al asignar un valor, estaremos definiendo de forma impl\u00edcita su tipo de datos.</li> <li>Podemos concatenar el valor de una variable a una cadena de caracteres con el s\u00edmbolo <code>+</code>.</li> <li>No ser\u00e1 necesario realizar conversiones de tipos de datos para trabajar (ya ver\u00e9is posteriormente lo necesario que esto es en la programaci\u00f3n). Se trata de simplificar al m\u00e1ximo la construcci\u00f3n y manejo de las variables en un algoritmo.</li> </ul> <p>Ejemplo:</p> <pre><code>Inicio\n    num1 = 10\n    Escribe \u201cIntroduce un n\u00famero: \u201d\n    Lee num2\n\n    suma = num1 + num2\n    Escribe \u201cLa suma de \u201d + num1 + \u201c + \u201c + num2 + \u201c es \u201d + suma\n\n    iva = 0.21\n    Escribe \u201cIntroduce un precio: \u201d\n    Lee precio\n\n    Escribe \u201cEl precio con IVA es \u201d + (precio * iva)\nFin\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#23-estructuras-de-control","title":"2.3. Estructuras de control","text":"<p>El pseudoc\u00f3digo utiliza las estructuras de control propias de la programaci\u00f3n estructurada.   * Estructuras de control secuencial.   * Estructuras de control condicional.   * Estructuras de control iterativa.  </p> <p>Para la construcci\u00f3n de un algoritmo vamos a simplificar estas estructuras lo m\u00e1ximo posible para su mejor entendimiento, ya posteriormente seg\u00fan el lenguaje de programaci\u00f3n, veremos todas las opciones que nos proporciona.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#231-estructuras-de-control-secuencial","title":"2.3.1. Estructuras de control secuencial.","text":"<p>Describen bloques de instrucciones que son ejecutadas en orden de aparici\u00f3n (secuencialmente). Los bloques pueden estar delimitados por las expresiones <code>Inicio</code>-<code>Fin</code> o bien estar contenidos en otras estructuras.</p> <pre><code>Inicio\n    Instrucci\u00f3n1\n    \u2026\n    Instrucci\u00f3nN\nFin\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#232-estructuras-de-control-condicional","title":"2.3.2. Estructuras de control condicional.","text":"<p>La estructura de control condicional,  nos permite ejecutar instrucciones de forma alternativa o selectiva, es decir encauza el flujo de ejecuci\u00f3n hacia un bloque de instrucciones u otro en funci\u00f3n de la evaluaci\u00f3n que se realiza sobre una condici\u00f3n determinada.</p> <p>El bloque o secuencia de instrucciones que ejecutar\u00e1 debe estar tabulado y acabar\u00e1 cuando esa indentaci\u00f3n finalice, es decir, vuelva a encontrar una instrucci\u00f3n a la misma altura de la expresi\u00f3n <code>Si (condici\u00f3n) entonces</code>.</p> <p>Vamos a utilizar: simple, doble, m\u00faltiple, anidados.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#2321-condicional-simple","title":"2.3.2.1 Condicional simple:","text":"<p>Establece un conjunto de instrucciones que se ejecutar\u00e1n si se cumple una condici\u00f3n que retornar\u00e1 un valor l\u00f3gico.</p> <p>Ejemplo:</p> <pre><code>Si (condici\u00f3n) entonces\n    Instrucci\u00f3n1\n    \u2026\n    Instrucci\u00f3nN\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#2322-condicional-doble","title":"2.3.2.2 Condicional doble:","text":"<p>A\u00f1ade otro bloque de instrucciones que se ejecuta en caso de que no se cumpla la condici\u00f3n.</p> <p>Ejemplo:</p> <pre><code>Si (condici\u00f3n) entonces\n    Instrucci\u00f3n1\n    \u2026\n    Instrucci\u00f3nN\nSino\n    Instrucci\u00f3n1\n    \u2026\n    Instrucci\u00f3nN\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#2323-condicional-multiple","title":"2.3.2.3 Condicional m\u00faltiple:","text":"<p>Permite definir multiple bloques de instrucciones que se ejecutar\u00e1n en funci\u00f3n de la opci\u00f3n que sea verdadera:</p> <pre><code>Seg\u00fan valor_selector entonces \n    opcion1:\n        Instrucci\u00f3n1\n        \u2026\n        Instrucci\u00f3nI  \n    opcion2:\n        Instrucci\u00f3nJ\n        \u2026\n        Instrucci\u00f3nN\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#2323-estructuras-anidados","title":"2.3.2.3 Estructuras anidados:","text":"<p>Permite ejecutar diferentes bloques de instrucciones mediante el anidamiento de diferentes estructuras de control, cuyas condiciones son excluyentes.</p> <p>Ejemplo:</p> <pre><code>Si (condici\u00f3n) entonces\n    Instrucciones1\nSino\n    Si (condici\u00f3n) entonces\n        InstruccionesI\n    Sino\n        Si (condici\u00f3n) entonces\n            InstruccionesJ\n        Sino\n            InstruccionesN\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#233-estructuras-de-control-iterativa","title":"2.3.3. Estructuras de control iterativa.","text":"<p>La estructura de control iterativa permite que un bloque de instrucciones sea ejecutado mientras se cumpla una condici\u00f3n.</p> <p>Solo vamos a contemplar dos tipos de bucles: <code>Mientras</code> y <code>Para</code>.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#2331-estructura-iterativa-mientras","title":"2.3.3.1. Estructura iterativa <code>Mientras</code>.","text":"<p>Iteraci\u00f3n con salida al principio (Mientras): primero se eval\u00faa la condici\u00f3n y en caso de cumplirse ejecuta el bloque de instrucciones. Las instrucciones contenidas deben actuar sobre los valores usados en la condici\u00f3n para evitar bucles infinitos.</p> <p> En algunos lenguajes suele existir otra estructura similar que podr\u00edas asemejarse a <code>Hacer ... Hasta (condici\u00f3n)</code> en donde primero se ejecutan las instrucciones y antes de proseguir se eval\u00faa la condici\u00f3n, por tanto, siempre se ejecutar\u00e1 el bloque de instrucciones una vez.</p> <p>Ejemplos:</p> <pre><code>Mientras (condici\u00f3n) hacer\n    Instrucci\u00f3n1\n    \u2026\n    Instrucci\u00f3nN\n</code></pre> <pre><code>Mientras (cont &gt; 0) hacer\n    Escribe cont\n    cont = cont - 1\n</code></pre> <p> Actividad: \u00bfCu\u00e1l es el resultado del algoritmo anterior?</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.1-Pseudocodigo/#2332-estructura-iterativa-para","title":"2.3.3.2. Estructura iterativa <code>Para</code>.","text":"<p>Ejecutar\u00e1 el bloque de instrucciones un n\u00famero determinado de veces. Hace uso de una variable que ir\u00e1 incrementando o decrementando su valor de uno en uno en funci\u00f3n de un rango de valores.</p> <p>Ejemplos:</p> <p><pre><code>Para i en (1\u2026N) hacer\n    Instrucci\u00f3n1\n    \u2026\n    Instrucci\u00f3nN\n</code></pre> <pre><code>Para i en (N\u20260) hacer\n    Instrucci\u00f3n1\n    \u2026\n    Instrucci\u00f3nN\n</code></pre></p> <pre><code>Inicio\n    suma = 0 \n    Para i en (1\u202610) hacer\n        suma = suma + 1\n    Escribe \u201cLa suma de los primeros 10 n\u00fameros enteros es \u201d + suma\nFin\n</code></pre> <p> Actividad: \u00bfCu\u00e1l es el resultado del algoritmo anterior?</p> <p> Actividad: Realiza un algoritmo que lea dos n\u00fameros y muestre cu\u00e1l es el mayor.</p> <pre><code>Inicio\n    Lee num1\n    Lee num2\n\n    Si (num1 &gt; num2) Entonces\n        Escribe num1 + \u201c es mayor que \u201d + num2\n    Sino\n        Escribe num2 + \u201c es mayor que \u201d + num1\n\nFin\n</code></pre> <p> Actividad: Muestra la relaci\u00f3n entre dos numeros que introduce el usuario.</p> <pre><code>Inicio\n    Lee num1\n    Lee num2\n\n    Si (num1 == num2) entonces\n        Escribe num1 + \u201c es igual que \u201d + num2\n    Sino    \n        Si (num1 &gt; num2) entonces\n            Escribe num1 + \u201c es mayor que \u201d + num2\n        Sino\n            Escribe num2 + \u201c es mayor que \u201d + num1\n\nFin\n</code></pre> <p> Actividad: Lee un n\u00famero, si es mayor que 0 muestra la serie decrementando su valor hasta 0. Por ej:  <code>7 =&gt; 7 6 5 4 3 2 1 0</code></p> <p><pre><code>Inicio\n    Lee num\n\n    Si (num &gt; 0) entonces\n        Escribe num + \u201c =&gt; \u201d\n        Mientras (num &gt;= 0) hacer\n            Escribe num + \u201c \u201d\n            num = num - 1\nFin\n</code></pre> <pre><code>Inicio\n    Lee num\n\n    Si (num &gt; 0) entonces\n        Escribe num + \u201c =&gt; \u201d\n        Para i en (num...0) hacer\n            Escribe i + \u201c \u201d\nFin\n</code></pre></p> <p> Actividad: Lee un n\u00famero, si es mayor que 0 muestra la serie decrementando su valor hasta 0. Por ej: <code>7 =&gt; 7, 6, 5, 4, 3, 2, 1, 0</code></p> <pre><code>Inicio\n    Lee num\n\n    Si (num &gt; 0) entonces\n        Escribe num + \u201c =&gt; \u201d\n\n        Mientras (num &gt;= 0) hacer\n            Escribe num\n            Si (num != 0) entonces\n                Escribe \u201c, \u201d\n            num = num - 1\nFin\n</code></pre> <p> Actividad: Lee un n\u00famero, si es mayor que 0 muestra la serie decrementando su valor hasta 0 (usa el bucle Para). Por ej: <code>7 =&gt; 7, 6, 5, 4, 3, 2, 1, 0</code></p> <pre><code>Inicio\n    Lee num\n\n    Si (num &gt; 0) entonces\n        Escribe num + \u201c =&gt; \u201d\n\n        Para i en (num...0) hacer\n            Escribe i\n            Si (i != 0) entonces\n                Escribe \u201c, \u201d\nFin\n</code></pre> <p> Ejercicio 1: Lee un n\u00famero hasta que el n\u00famero est\u00e9 en el rango 1-10 <pre><code>Introduce un n\u00famero: 15\nInt\u00e9ntalo otra vez! (1-10): 0\nInt\u00e9ntalo otra vez! (1-10): 5\nCorrecto!\n</code></pre></p> <p> Ejercicio 2: Lee dos n\u00fameros y crea la serie que los une de 1 en 1... <pre><code>Introduce un n\u00famero: 4\nIntroduce otro: 8\n4-5-6-7-8\n\nIntroduce un n\u00famero: 12\nIntroduce otro: 3\n3-4-5-6-7-8-9-10-11-12\n</code></pre></p> <p> Ejercicio 3: Lee 3 n\u00fameros y dame los n\u00fameros ordenados de menor a mayor. <pre><code>Dame 3 n\u00fameros:\n14\n7\n10\nTus n\u00fameros son 7 10 14\n</code></pre></p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/","title":"UD 1 - 1.2 Practica con un lenguaje","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#12-practica-con-un-lenguaje","title":"1.2. Practica con un lenguaje","text":"<p>Vamos a iniciar con la pr\u00e1ctica de un lenguaje de programaci\u00f3n, en este caso, Python. Vemos los bloques de un programa y las estructuras b\u00e1sicas de un programa en Python.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#1-bloques-de-un-programa","title":"1. Bloques de un programa","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#11-en-kotlin","title":"1.1. En Kotlin","text":"<p>Los programas est\u00e1n compuestos por un conjunto de bloques  </p> <ul> <li>Main, punto de entrada: Inicio del flujo de ejecuci\u00f3n de un programa</li> <li>Paquetes e import: Agrupa clases, e incorpora clases para su uso, respectivamente</li> <li>Funciones: Bloques de c\u00f3digo con nombre que pueden ser reutilizados</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#12-en-python","title":"1.2. En python","text":"<p>En Python, un programa es un conjunto de m\u00f3dulos. Un m\u00f3dulo es un archivo que contiene c\u00f3digo Python. Puede contener definiciones de funciones, clases y variables, as\u00ed como ejecutar c\u00f3digo. A continuaci\u00f3n, se muestra un ejemplo de un m\u00f3dulo simple y los bloques que lo componen.</p> <pre><code># Importaci\u00f3n de m\u00f3dulos\n\nfrom file_two import function_three\n\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n\n\n# Definici\u00f3n de funciones\n\ndef main():\n    print(\"Function main is executed\")\n    print(\"Cuerpo principal\")\n\n\nif __name__ == \"__main__\":\n    # Por aqui pasa cuando es ejecutado\n    main()\nelse:\n    # Por aqui pasa cuando es importado\n    print(\"File one executed when imported\")\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#2-comenzando-con-python","title":"2.  Comenzando con Python","text":"<p>A continuaci\u00f3n, se presenta una introducci\u00f3n a Python, un lenguaje de programaci\u00f3n de alto nivel. Python es un lenguaje de programaci\u00f3n interpretado, lo que significa que el c\u00f3digo se ejecuta l\u00ednea por l\u00ednea. Python es un lenguaje de programaci\u00f3n vers\u00e1til y f\u00e1cil de aprender, que se utiliza en una amplia variedad de aplicaciones, desde el desarrollo web hasta la ciencia de datos.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#21-introduccion-a-python-caracteristicas-del-lenguaje","title":"2.1. Introducci\u00f3n a Python: Caracter\u00edsticas del lenguaje","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel. Las principales caracter\u00edsticas de Python son las siguientes:</p> <ul> <li>Es multiparadigma, ya que soporta la programaci\u00f3n imperativa, programaci\u00f3n orientada a objetos y funcional.</li> <li>Es multiplataforma: Se puede encontrar un int\u00e9rprete de Python para los principales sistemas operativos como Windows, Linux y Mac OS. Adem\u00e1s, se puede reutilizar el mismo c\u00f3digo en cada una de las plataformas.</li> <li>Es din\u00e1micamente tipado: Es decir, el tipo de las variables se decide en tiempo de ejecuci\u00f3n.</li> <li>Es fuertemente tipado: No se puede usar una variable en un contexto fuera de su tipo. Si se quisiera, habr\u00eda que hacer una conversi\u00f3n de tipos.</li> <li>Es interpretado: El c\u00f3digo no se compila a lenguaje m\u00e1quina.</li> </ul> <p>El hecho de que Python sea interpretado quiere decir que hace falta un int\u00e9rprete que permita ejecutar un programa o script escrito en Python sin necesidad de compilarlo.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#22-el-interprete-de-python","title":"2.2. El int\u00e9rprete de Python","text":"<p>Cuando instalas Python correctamente (en cualquier sistema operativo) ocurren, entre otras, dos cosas: se a\u00f1ade el comando <code>python</code> (o <code>python3</code>, en caso de que instales la versi\u00f3n 3.x de Python) al path y se instala el int\u00e9rprete de Python correspondiente.</p> <p>En el int\u00e9rprete de Python podemos escribir expresiones e instrucciones que este interpretar\u00e1 y ejecutar\u00e1.</p> <p>Puedes probar, por ejemplo, a escribir <code>2 + 3</code>. El resultado debe ser el siguiente:</p> <pre><code>&gt;&gt;&gt;2 + 3\n5\n</code></pre> <p>O ejecutar la instrucci\u00f3n <code>print('\u00a1Hola mundo!')</code>:</p> <pre><code>&gt;&gt;&gt;print('\u00a1Hola mundo!')\n\n\u00a1Hola mundo!\n</code></pre> <p>Para salir del int\u00e9rprete basta con ejecutar la instrucci\u00f3n <code>quit()</code>.</p> <p>No obstante, aunque esta forma de escribir c\u00f3digo puede ser \u00fatil para aprender y en casos muy puntuales, no es la habitual a la hora de escribir un programa o script en Python.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#23-primer-programa-en-python","title":"2.3. Primer programa en Python","text":"<p>Normalmente, los programas en Python se escriben en archivos con la extensi\u00f3n <code>.py</code>. Estos archivos se pasan al int\u00e9rprete de Python para que los interprete y ejecute.</p> <p>Vamos a verlo con un ejemplo. Crea con un editor de texto un fichero llamado <code>suma.py</code> con el siguiente contenido:</p> <pre><code>suma = 2 + 3\nprint(suma)\n</code></pre> <p>A continuaci\u00f3n abre un terminal, sit\u00faate en el directorio en el que creaste el archivo <code>suma.py</code> y ejecuta lo siguiente:</p> <p><code>$ python3 suma.py</code></p> <p>En el terminal ver\u00e1s que aparece el n\u00famero <code>5</code> como resultado de ejecutar el programa anterior. \u00bfQu\u00e9 ha ocurrido aqu\u00ed? B\u00e1sicamente que el int\u00e9rprete de Python ha le\u00eddo y ejecutado las l\u00edneas de c\u00f3digo que hemos escrito en el fichero <code>suma.py</code>.</p> <p>Esta es la manera m\u00e1s com\u00fan de crear y ejecutar programas en Python.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#3-variables-literales-y-constantes","title":"3. Variables, literales y constantes","text":"<p>En esta secci\u00f3n vamos a ver c\u00f3mo se definen las variables en Python, qu\u00e9 son los literales y c\u00f3mo se definen las constantes.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#31-valores-literales-y-tipos","title":"3.1. Valores (literales) y tipos","text":"<p>Un valor o literal es una de las cosas b\u00e1sicas que utiliza un programa, como una letra o un n\u00famero. Hasta ahora hemos visto valores o literales como <code>1</code>, <code>2</code>, y <code>'\u00a1Hola, mundo!'</code></p> <p>Esos valores pertenecen a tipos diferentes: <code>2</code> es un entero (int), y <code>'\u00a1Hola, mundo!'</code> es una cadena (string), que recibe ese nombre porque contiene una \u201ccadena\u201d de letras. T\u00fa (y el int\u00e9rprete) pod\u00e9is identificar las cadenas porque van encerradas entre comillas.</p> <p>En python existen los siguientes tipos b\u00e1sicos de datos:   * int: N\u00fameros enteros. Por ejemplo, 2, 4, 20.  Los n\u00fameros enteros son aquellos que no tienen parte decimal. Por ejemplo, 2, 4, 20. Aunque en Python no hay un l\u00edmite en el tama\u00f1o de los enteros, en la pr\u00e1ctica, el tama\u00f1o de un entero est\u00e1 limitado por la memoria de la computadora.      * * float: N\u00fameros decimales. Por ejemplo, 5.0, 1.6, 3.14159. Los n\u00fameros decimales son aquellos que tienen parte decimal. Por ejemplo, 5.0, 1.6, 3.14159. Los n\u00fameros decimales en Python se representan con un punto decimal.  * str: Cadenas de texto. Por ejemplo, 'Hola', 'Python', '3.14159'. Las cadenas de texto son secuencias de caracteres. Por ejemplo, 'Hola', 'Python', '3.14159'. Las cadenas de texto en Python se pueden definir con comillas simples ('...') o dobles (\"...\").   * bool: Valores booleanos. Por ejemplo, True, False. Los valores booleanos son aquellos que representan la verdad o la falsedad. En Python, los valores booleanos son True y False. Los valores booleanos se utilizan en expresiones l\u00f3gicas y de comparaci\u00f3n.  * None: Representa la ausencia de valor. None es un valor especial en Python que se utiliza para representar la ausencia de valor.    </p> <p>Vamos a usar el comando <code>python</code> para iniciar el int\u00e9rprete.</p> <p><pre><code>$python\n&gt;&gt;&gt;print(4)\n4\n</code></pre> La sentencia <code>print</code> ademas de funcionar con cadenas, tambi\u00e9n funciona con enteros.</p> <p>Si no est\u00e1s seguro de qu\u00e9 tipo de valor est\u00e1s manejando, el int\u00e9rprete te lo puede decir.</p> <pre><code>&gt;&gt;&gt;type('\u00a1Hola, mundo!')\n&lt;class 'str'&gt;\n&gt;&gt;&gt;type(17)\n&lt;class 'int'&gt;\n</code></pre> <p>No es sorprendente que las cadenas pertenezcan al tipo <code>str</code> y los enteros pertenezcan al tipo <code>int</code>. De manera menos obvia, los n\u00fameros con un punto decimal pertenecen a un tipo llamado <code>float</code>, porque estos n\u00fameros se representan en un formato llamado punto flotante.</p> <pre><code>&gt;&gt;&gt;type(3.2)\n&gt;&gt;&gt;&lt;class 'float'&gt;\n</code></pre> <p>\u00bfQu\u00e9 ocurre con valores como <code>17</code> y <code>3.2</code>? Parecen n\u00fameros, pero van entre comillas como las cadenas.</p> <pre><code>&gt;&gt;&gt;type('17')\n&lt;class 'str'&gt;\n&gt;&gt;&gt;type('3.2')\n&lt;class 'str'&gt;\n</code></pre> <p>Pues son cadenas.</p> <p>Cuando escribes un entero grande, puede que te sientas tentado a usar comas o puntos para separarlo en grupos de tres d\u00edgitos, como en <code>1,000,000</code>. Eso no es un entero v\u00e1lido en Python, pero en cambio s\u00ed que resulta v\u00e1lido algo como:</p> <pre><code>&gt;&gt;&gt; print(1,000,000)\n1 0 0 # Imprime 3 numeros\n</code></pre> <p>Bien, ha funcionado. \u00a1Pero eso no era lo que esper\u00e1bamos!. Python interpreta <code>1,000,000</code> como una secuencia de enteros separados por comas, as\u00ed que lo imprime con espacios en medio.</p> <p>\u00c9ste es el primer ejemplo que hemos visto de un error sem\u00e1ntico: el c\u00f3digo funciona sin producir ning\u00fan mensaje de error, pero no hace su trabajo \u201ccorrectamente\u201d.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#32-variables","title":"3.2. Variables","text":"<p>Una de las caracter\u00edsticas m\u00e1s potentes de un lenguaje de programaci\u00f3n es la capacidad de manipular variables. Una variable es un nombre que se refiere a un valor, un literal. </p> <p>Una sentencia de asignaci\u00f3n crea variables nuevas y las da valores:</p> <pre><code>&gt;&gt;&gt; mensaje = 'Y ahora algo completamente diferente'\n&gt;&gt;&gt; n = 17\n&gt;&gt;&gt; pi = 3.1415926535897931\n</code></pre> <p>Este ejemplo hace tres asignaciones. La primera asigna una cadena a una variable nueva llamada <code>mensaje</code>; la segunda asigna el entero <code>17</code> a <code>n</code>; la tercera asigna el valor (aproximado) de \u03c0 a <code>pi</code>.</p> <p>Para mostrar el valor de una variable, se puede usar la sentencia print:</p> <pre><code>&gt;&gt;&gt; print(n)\n17\n&gt;&gt;&gt; print(pi)\n3.141592653589793\n</code></pre> <p>El tipo de una variable es el tipo del valor al que se refiere.</p> <pre><code>&gt;&gt;&gt; type(mensaje)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; type(n)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(pi)\n&lt;class 'float'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#33-constantes-en-python","title":"3.3. Constantes en Python","text":"<p>A diferencia de otros lenguajes,  en Python no existen las constantes .</p> <p>Entendemos como constante una variable que una vez asignado un valor, este no se puede modificar. Es decir, que a la variable no se le puede asignar ning\u00fan otro valor una vez asignado el primero.</p> <p>Se puede simular este comportamiento, siempre desde el punto de vista del programador y atendiendo a convenciones propias, pero no podemos cambiar la naturaleza mutable de las variables.</p> <p>No obstante, s\u00ed que es cierto que el propio Python define una serie de valores constantes en su propio namespace. Los m\u00e1s importantes son:</p> <ul> <li>False: El valor false del tipo <code>bool</code>.</li> <li>True: El valor true del tipo <code>bool</code>.</li> <li>None: El valor del tipo <code>NoneType</code>. Generalmente <code>None</code> se utiliza para representar la ausencia de valor de una variable.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#4-operadores-expresiones-y-sentencias-en-python","title":"4. Operadores, expresiones y sentencias en Python","text":"<p>Para introducirse en cualquier lenguajes es importante saber la diferencia entre operador, expresi\u00f3n y sentencia, ya que son las formas b\u00e1sicas que componen la estructura de cualquier programa.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#41-operador","title":"4.1. Operador","text":"<p>Un operador es un car\u00e1cter o conjunto de caracteres que act\u00faa sobre una, dos o m\u00e1s variables y/o literales para llevar a cabo una operaci\u00f3n con un resultado determinado. Veremos la definici\u00f3n de variable y literales en los siguientes puntos.</p> <p>Ejemplos de operadores comunes son los operadores aritm\u00e9ticos <code>+</code> (suma), <code>-</code> (resta) o <code>*</code> (producto), aunque en Python existen otros operadores.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#411-orden-de-las-operaciones","title":"4.1.1 Orden de las operaciones","text":"<p>Cuando en una expresi\u00f3n aparece m\u00e1s de un operador, el orden de evaluaci\u00f3n depende de las  reglas de precedencia. Para los operadores matem\u00e1ticos, Python sigue las convenciones matem\u00e1ticas. El acr\u00f3nimo PEMDSR resulta \u00fatil para recordar esas reglas:</p> <ul> <li>Los Par\u00e9ntesis tienen el nivel superior de precedencia, y pueden usarse para forzar a que una expresi\u00f3n sea evaluada en el orden que se quiera. Dado que las expresiones entre par\u00e9ntesis son evaluadas primero, <code>2 * (3-1)</code> es 4, y <code>(1+1)**(5-2)</code> es 8. Se pueden usar tambi\u00e9n par\u00e9ntesis para hacer una expresi\u00f3n m\u00e1s sencilla de leer, incluso si el resultado de la misma no var\u00eda por ello, como en <code>(minuto * 100) / 60</code>.</li> <li>La Exponenciaci\u00f3n (elevar un n\u00famero a una potencia) tiene el siguiente nivel m\u00e1s alto de precedencia, de modo que <code>2**1+1</code> es 3, no 4, y <code>3*1**3</code> es 3, no 27.</li> <li>La Multiplicaci\u00f3n y la Divisi\u00f3n tienen la misma precedencia, que es superior a la de la *S*uma y la *R*esta, que tambi\u00e9n tienen entre si el mismo nivel de precedencia. As\u00ed que <code>2*3-1</code> es 5, no 4, y <code>6+4/2</code> es 8, no 5.</li> <li>Los operadores con igual precedencia son evaluados de izquierda a derecha. As\u00ed que la expresi\u00f3n <code>5-3-1</code> es 1 y no 3, ya que <code>5-3</code> se eval\u00faa antes, y despu\u00e9s se resta <code>1</code> de <code>2</code>.</li> </ul> <p>En caso de duda, a\u00f1ade siempre par\u00e9ntesis a tus expresiones para asegurarte de que las operaciones se realizan en el orden que t\u00fa quieres.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#412-operaciones-con-cadenas","title":"4.1.2. Operaciones con cadenas","text":"<p>El operador <code>+</code> funciona con las cadenas, pero no realiza una suma en el sentido matem\u00e1tico. En vez de eso, realiza una  concatenaci\u00f3n , que quiere decir que une ambas cadenas, enlazando el final de la primera con el principio de la segunda. Por ejemplo:</p> <pre><code>&gt;&gt;&gt; primero = 10\n&gt;&gt;&gt; segundo = 15\n&gt;&gt;&gt; print(primero+segundo)\n25\n&gt;&gt;&gt; primero = '100'\n&gt;&gt;&gt; segundo = '150'\n&gt;&gt;&gt; print(primero + segundo)\n100150\n</code></pre> <p>La salida de este programa es <code>100150</code>.</p> <p>El operador <code>*</code> tambi\u00e9n trabaja con cadenas multiplicando el contenido de una cadena por un entero. Por ejemplo:</p> <pre><code>&gt;&gt;&gt; primero = 'Test '\n&gt;&gt;&gt; second = 3\n&gt;&gt;&gt; print(primero * second)\nTest Test Test\n</code></pre> <p>Veremos m\u00e1s sobre los operadores en los siguientes puntos.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#42-expresion","title":"4.2. Expresi\u00f3n","text":"<p>Una expresi\u00f3n es una unidad de c\u00f3digo que devuelve un valor y est\u00e1 formada por una combinaci\u00f3n de operandos (variables y literales) y operadores. Los siguientes son ejemplos de expresiones (cada l\u00ednea es una expresi\u00f3n diferente):</p> <pre><code>5 + 2           # Suma del n\u00famero 5 y el n\u00famero 2\na &lt; 10            # Compara si el valor de la variable a es menor que 10\nb is None       # Compara si la identidad de la variable b es None\n3 * (200 - c)   # Resta a 200 el valor de c y lo multiplica por 3\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#43-sentencia","title":"4.3. Sentencia","text":"<p>Por su parte, una sentencia o declaraci\u00f3n es una instrucci\u00f3n que define una acci\u00f3n. Una sentencia puede estar formada por una o varias expresiones, aunque no siempre es as\u00ed.</p> <p>En definitiva, las sentencias son las instrucciones que componen nuestro programa y determinan su comportamiento.</p> <p>Ejemplos de sentencias son la asignaci\u00f3n <code>=</code> o las instrucciones <code>if</code>, <code>if ... else ...</code>, <code>for</code> o <code>while</code> entre otras.</p> <p>Una sentencia est\u00e1 delimitada por el car\u00e1cter <code>Enter (\\n)</code>.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#431-sentencias-de-mas-de-una-linea","title":"4.3.1. Sentencias de m\u00e1s de una l\u00ednea","text":"<p>Normalmente, las sentencias ocupan una sola l\u00ednea. Por ejemplo:</p> <pre><code>a = 2 + 3 #Asigna a la variable &lt;a&gt; el resultado de 2 + 3\n</code></pre> <p>Sin embargo, aquellas sentencias que son muy largas pueden ocupar m\u00e1s de una l\u00ednea (la gu\u00eda de estilo PEP 8, recomienda una longitud de l\u00ednea m\u00e1xima de 72 caracteres).</p> <p>Para dividir una sentencia en varias l\u00edneas se utiliza el car\u00e1cter <code>\\</code>. Por ejemplo:</p> <pre><code>a = 2 + 3 + 5 + \\\n7 + 9 + 4 + \\\n6\n</code></pre> <p>Adem\u00e1s de la separaci\u00f3n expl\u00edcita (la que se realiza con el car\u00e1cter <code>\\</code>), en Python la continuaci\u00f3n de l\u00ednea es impl\u00edcita siempre y cuando la expresi\u00f3n vaya dentro de los caracteres <code>()</code>, <code>[]</code> y <code>{}</code>.</p> <p>Por ejemplo, podemos inicializar una lista del siguiente modo:</p> <pre><code>a = [1, 2, 7,\n3, 8, 4,\n9]\n</code></pre> <p>No te preocupes si no sabes lo que es una lista o no entiendes lo que hace el ejemplo anterior. Lo importante es que comprendas que lo anterior es una sentencia multi-l\u00ednea ya que est\u00e1 comprendida entre los caracteres <code>[]</code>.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#432-bloques-de-codigo-indentacion","title":"4.3.2. Bloques de c\u00f3digo (Indentaci\u00f3n)","text":"<p>Lo \u00faltimo que veremos sobre sentencias en esta introducci\u00f3n a Python es c\u00f3mo se pueden agrupar en bloques de c\u00f3digo.</p> <p>Un bloque de c\u00f3digo es un grupo de sentencias relacionadas bien delimitadas. A diferencia de otros lenguajes como JAVA o C, en los que se usan los caracteres <code>{}</code> para definir un bloque de c\u00f3digo, en Python se usa la indentaci\u00f3n o sangrado.</p> <p>El sangrado o indentaci\u00f3n consiste en mover un bloque de texto hacia la derecha insertando espacios o tabuladores al principio de la l\u00ednea, dejando un margen a la izquierda.</p> <p>Esta es una de las principales caracter\u00edsticas de Python.</p> <p>Un bloque comienza con un nuevo sangrado y acaba con la primera l\u00ednea cuyo sangrado sea menor. De nuevo, la gu\u00eda de estilo de Python recomienda usar los espacios en lugar de las tabulaciones para realizar el sangrado. Yo suelo utilizar 4 espacios.</p> <p>Configura tu IDE de desarrollo para que use los espacios en lugar de los tabuladores para el sangrado. Establece el n\u00famero de espacios a 4 \u00f3 2.</p> <p>Veamos todo esto con un ejemplo:</p> <pre><code>def suma_numeros(numeros):     # Bloque 1\n    suma = 0                   # Bloque 2\n    for n in numeros:          # Bloque 2\n      suma += n                # Bloque 3\n      print(suma)              # Bloque 3\n    return suma                # Bloque 2\n</code></pre> <p>Como te dec\u00eda en la secci\u00f3n anterior, no hace falta todav\u00eda que entiendas lo que hace el ejemplo. Simplemente debes comprender que en la l\u00ednea 1 se define la funci\u00f3n <code>suma_numeros</code>. El cuerpo de esta funci\u00f3n est\u00e1 definido por el grupo de sentencias que pertenecen al bloque 2 y 3. A su vez, la sentencia <code>for</code> define las acciones a realizar dentro de la misma en el conjunto de sentencias que pertenecen al bloque 3.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#5-peticion-de-informacion-al-usuario","title":"5. Petici\u00f3n de informaci\u00f3n al usuario","text":"<p>A veces necesitaremos que sea el usuario quien nos proporcione el valor para una variable, a trav\u00e9s del teclado. Python proporciona una funci\u00f3n interna llamada <code>input</code> que recibe la entrada desde el teclado. Cuando se llama a esa funci\u00f3n, el programa se detiene y espera a que el usuario escriba algo. Cuando el usuario pulsa <code>Retorno</code> o <code>Intro</code>, el programa contin\u00faa y <code>input</code> devuelve como una cadena aquello que el usuario escribi\u00f3.</p> <pre><code>&gt;&gt;&gt;entrada = input()\nCualquier cosa rid\u00edcula\n&gt;&gt;&gt;print(entrada)\nCualquier cosa rid\u00edcula\n</code></pre> <p>Antes de recibir cualquier dato desde el usuario, es buena idea escribir un mensaje explic\u00e1ndole qu\u00e9 debe introducir. Se puede pasar una cadena a <code>input</code>, que ser\u00e1 mostrada al usuario antes de que el programa se detenga para recibir su entrada:</p> <pre><code>&gt;&gt;&gt;nombre = input('\u00bfC\u00f3mo te llamas?\\n')\n\u00bfC\u00f3mo te llamas?\nChuck\n&gt;&gt;&gt;print(nombre)\nChuck\n</code></pre> <p>La secuencia <code>\\n</code> al final del mensaje representa un  newline , que es un car\u00e1cter especial que provoca un salto de l\u00ednea. Por eso la entrada del usuario aparece debajo de nuestro mensaje.</p> <p>Si esperas que el usuario escriba un entero, puedes intentar convertir el valor de retorno a <code>int</code> usando la funci\u00f3n <code>int()</code>:</p> <pre><code>&gt;&gt;&gt; prompt = '\u00bfCual es la velocidad de vuelo de una golondrina sin carga?\\n'\n&gt;&gt;&gt; velocidad = input(prompt)\n\u00bfCual es la velocidad de vuelo de una golondrina sin carga?\n17\n&gt;&gt;&gt; int(velocidad)\n17\n&gt;&gt;&gt; int(velocidad) + 5\n22\n</code></pre> <p>Pero si el usuario escribe algo que no sea una cadena de d\u00edgitos, obtendr\u00e1s un error:</p> <pre><code>&gt;&gt;&gt;velocidad = input(prompt)\n\u00bfCual es la velocidad de vuelo de una golondrina sin carga?\n\u00bfTe refieres a una golondrina africana o a una europea?\n&gt;&gt;&gt;int(velocidad)\nValueError: invalid literal for int()\n</code></pre> <p>Veremos c\u00f3mo controlar este tipo de errores m\u00e1s adelante.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#6-comentarios-en-python","title":"6. Comentarios en Python","text":"<p>Como cualquier otro lenguaje de programaci\u00f3n, Python permite escribir comentarios en el c\u00f3digo. Para a\u00f1adir un comentario a tu c\u00f3digo simplemente comienza una l\u00ednea con el car\u00e1cter <code>#</code>:</p> <pre><code># Esta l\u00ednea es un comentario**\na = 5\n# Resultado de multiplicar a por 2\nprint(a * 2)\n</code></pre> <p>Los comentarios son ignorados por el int\u00e9rprete de Python. Solo tienen sentido para los programadores.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#61-comentarios-de-varias-lineas","title":"6.1. Comentarios de varias l\u00edneas","text":"<p>Para escribir comentarios que ocupan varias l\u00edneas, simplemente escribe cada una de las l\u00edneas anteponiendo el car\u00e1cter <code>#</code>:</p> <pre><code># Este comentario ocupa\n# 2 l\u00edneas\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#62-docstrings","title":"6.2. Docstrings","text":"<p>Los docstrings son un tipo de comentarios especiales que se usan para documentar un m\u00f3dulo, funci\u00f3n, clase o m\u00e9todo. En realidad son la primera sentencia de cada uno de ellos y se encierran entre tres comillas simples o dobles.</p> <p>Los docstrings son utilizados para generar la documentaci\u00f3n de un programa. Adem\u00e1s, suelen utilizarlos los entornos de desarrollo para mostrar la documentaci\u00f3n al programador de forma f\u00e1cil e intuitiva.</p> <pre><code>def suma(a, b):\n  \"\"\"Esta funci\u00f3n devuelve la suma de los par\u00e1metros a y b\"\"\"\n  return a + b\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#7-palabras-reservadas-de-python","title":"7. Palabras reservadas de Python","text":"<p>Python tiene una serie de palabras clave  reservadas , por tanto, no pueden usarse como nombres de variables, funciones, etc.</p> <p>Estas palabras clave se utilizan para definir la sintaxis y estructura del lenguaje Python.</p> <p>La lista de palabras reservadas es la siguiente:</p> <p><code>and</code>, <code>as</code>, <code>assert</code>, <code>break</code>, <code>class</code>, <code>continue</code>, <code>def</code>, <code>del</code>, <code>elif</code>, <code>else</code>, <code>except</code>, <code>False</code>, <code>finally</code>, <code>for</code>, <code>from</code>, <code>global</code>, <code>if</code>, <code>import</code>, <code>in</code>, <code>is</code>, <code>lambda</code>, <code>None</code>, <code>nonlocal</code>, <code>not</code>, <code>or</code>, <code>pass</code>, <code>raise</code>, <code>return</code>, <code>True</code>, <code>try</code>, <code>yield</code>, <code>while</code> y <code>with</code></p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#8-convenciones-de-nombres-en-python","title":"8. Convenciones de nombres en Python","text":"<p>A la hora de nombrar una variable, una funci\u00f3n, un m\u00f3dulo, una clase, etc. en Python, siempre se siguen las siguientes reglas y recomendaciones:</p> <ul> <li>Un identificador puede ser cualquier combinaci\u00f3n de letras (may\u00fasculas y min\u00fasculas), n\u00fameros y el car\u00e1cter gui\u00f3n bajo (<code>_</code>).</li> <li>Un identificador no puede comenzar por un n\u00famero.</li> <li>A excepci\u00f3n de los nombres de clases, es una convenci\u00f3n que todos los identificadores se escriban en min\u00fasculas, separando las palabras con el gui\u00f3n bajo. Ejemplos: <code>contador</code>, <code>suma_enteros</code>.</li> <li>Es una convenci\u00f3n que los nombres de clases sigan la notaci\u00f3n  Camel Case, es decir, todas las letras en min\u00fascula a excepci\u00f3n del primer car\u00e1cter de cada palabra, que se escribe en may\u00fascula. Ejemplos: <code>Coche</code>, <code>VehiculoMotorizado</code>.</li> <li>No se pueden usar como identificadores las palabras reservadas.</li> <li>Como recomendaci\u00f3n, usa identificadores que sean expresivos. Por ejemplo, <code>contador</code> es mejor que simplemente <code>c</code>.</li> <li>Python diferencia entre may\u00fasculas y min\u00fasculas, de manera que <code>variable_1</code> y <code>Variable_1</code> son dos identificadores totalmente diferentes.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#9-depuracion","title":"9. Depuraci\u00f3n","text":"<p>En este punto, el error de sintaxis que es m\u00e1s probable que cometas ser\u00e1 intentar utilizar nombres de variables no v\u00e1lidos, como <code>class</code> y <code>yield</code>, que son palabras clave, o <code>odd~job</code> y <code>US$</code>, que contienen caracteres no v\u00e1lidos.</p> <p>Si pones un espacio en un nombre de variable, Python cree que se trata de dos operandos sin ning\u00fan operador:</p> <pre><code>&gt;&gt;&gt; bad name = 5\nSyntaxError: invalid syntax\n</code></pre> <pre><code>&gt;&gt;&gt; month = 09\n  File \"&lt;stdin&gt;\", line 1\n    month = 09\n             ^\nSyntaxError: invalid token\n</code></pre> <p>Para la mayor\u00eda de errores de sintaxis, los mensajes de error no ayudan mucho. Los mensajes m\u00e1s comunes son <code>SyntaxError: invalid syntax</code> y <code>SyntaxError: invalid token</code>, ninguno de los cuales resulta muy informativo.</p> <p>El runtime error (error en tiempo de ejecuci\u00f3n) que es m\u00e1s probable que obtengas es un \u201cuse before def\u201d (uso antes de definir); que significa que est\u00e1s intentando usar una variable antes de que le hayas asignado un valor. Eso puede ocurrir si escribes mal el nombre de la variable:</p> <pre><code>&gt;&gt;&gt; principal = 327.68\n&gt;&gt;&gt; interest = principle * rate\nNameError: name 'principle' is not defined\n</code></pre> <p>Los nombres de las variables son sensibles a may\u00fasculas, as\u00ed que <code>LaTeX</code> no es lo mismo que <code>latex</code>.</p> <p>En este punto, la causa m\u00e1s probable de un error sem\u00e1ntico es el orden de las operaciones. Por ejemplo, para evaluar \\(\\frac{1}{2 \\pi}\\), puedes sentirte tentado a escribir</p> <pre><code>&gt;&gt;&gt; 1.0 / 2.0 * pi\n</code></pre> <p>Pero la divisi\u00f3n se eval\u00faa antes, \u00a1as\u00ed que obtendr\u00e1s  \u03c0 /2, que no es lo mismo! No hay forma de que Python sepa qu\u00e9 es lo que quer\u00edas escribir exactamente, as\u00ed que en este caso no obtienes un mensaje de error; simplemente obtienes una respuesta incorrecta.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#10-mas-sobre-operadores","title":"10. Mas sobre Operadores","text":"<p>Ya hablamos sobre los operadores, los operadores son s\u00edmbolos reservados por el propio lenguaje que se utilizan para llevar a cabo operaciones sobre uno, dos o m\u00e1s elementos llamados operandos. Los operandos pueden ser variables, literales, el valor devuelto por una expresi\u00f3n o el valor devuelto por una funci\u00f3n.</p> <p>El ejemplo m\u00e1s t\u00edpico que siempre viene a la mente es el operador suma, <code>+</code>, que se utiliza para obtener la suma aritm\u00e9tica de dos valores:</p> <pre><code>&gt;&gt;&gt;9 + 1 # 9 y 1 son los operandos\n10 # 10 es el resultado\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#101-operador-de-concatenacion-de-cadenas-de-caracteres","title":"10.1. Operador de concatenaci\u00f3n de cadenas de caracteres","text":"<p>Una de las operaciones m\u00e1s b\u00e1sicas cuando se trabaja con cadenas de caracteres es la concatenaci\u00f3n. Esto consiste en unir dos cadenas en una sola, siendo el resultado un nuevo  string .</p> <p>La forma m\u00e1s simple de concatenar dos cadenas en Python es utilizando el operador de concatenaci\u00f3n <code>+</code>:</p> <pre><code>&gt;&gt;&gt; hola = 'Hola'\n&gt;&gt;&gt; python = 'Pythonista'\n&gt;&gt;&gt; hola_python = hola + ' ' + python  # concatenamos 3 strings\n&gt;&gt;&gt; print(hola_python)\nHola Pythonista\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#102-operadores-logicos-o-booleanos","title":"10.2. Operadores l\u00f3gicos o booleanos","text":"<p>A la hora de operar con valores booleanos, tenemos a nuestra disposici\u00f3n los operadores <code>and</code>, <code>or</code> y <code>not</code>.</p> <p>\ufe0f IMPORTANTE: Las operaciones <code>and</code>, <code>or</code> y <code>not</code> realmente no devuelven <code>True</code> o <code>False</code>, sino que devuelven uno de los operandos como veremos en el cuadro de abajo.</p> <p>A continuaci\u00f3n te muestro c\u00f3mo funcionan los operadores booleanos (en orden de preferencia ascendente):</p> Operaci\u00f3n Resultado Descripci\u00f3n <code>a or b</code> Si<code>a</code> se eval\u00faa a falso, entonces devuelve <code>b</code>, si no devuelve <code>a</code> Solo se eval\u00faa el segundo operando si el primero es falso <code>a and b</code> Si<code>a</code> se eval\u00faa a falso, entonces devuelve <code>a</code>, si no devuelve <code>b</code> Solo se eval\u00faa el segundo operando si el primero es verdadero <code>not a</code> Si<code>a</code> se eval\u00faa a falso, entonces devuelve <code>True</code>, si no devuelve <code>False</code> Tiene menos prioridad que otros operadores no booleanos <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = True\n&gt;&gt;&gt; y = False\n&gt;&gt;&gt; x or y\nTrue\n&gt;&gt;&gt; x and y\nFalse\n&gt;&gt;&gt; not x\nFalse\n&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; y = 10\n&gt;&gt;&gt; x or y\n10\n&gt;&gt;&gt; x and y\n0\n&gt;&gt;&gt; not x\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#103-operadores-de-comparacion","title":"10.3. Operadores de comparaci\u00f3n","text":"<p>Los operadores de comparaci\u00f3n se utilizan, como su nombre indica, para comparar dos o m\u00e1s valores. El resultado de estos operadores siempre es <code>True</code> o <code>False</code>.</p> Operador Descripci\u00f3n &gt; Mayor que.<code>True</code> si el operando de la izquierda es estrictamente mayor que el de la derecha; <code>False</code> en caso contrario. &gt;= Mayor o igual que.<code>True</code> si el operando de la izquierda es mayor o igual que el de la derecha; <code>False</code> en caso contrario. &lt; Menor que.<code>True</code> si el operando de la izquierda es estrictamente menor que el de la derecha; <code>False</code> en caso contrario. &lt;= Menor o igual que.<code>True</code> si el operando de la izquierda es menor o igual que el de la derecha; <code>False</code> en caso contrario. == Igual.<code>True</code> si el operando de la izquierda es igual que el de la derecha; <code>False</code> en caso contrario. != Distinto.<code>True</code> si los operandos son distintos; <code>False</code> en caso contrario. <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = 9\n&gt;&gt;&gt; y = 1\n&gt;&gt;&gt; x &lt; y\nFalse\n&gt;&gt;&gt; x &gt; y\nTrue\n&gt;&gt;&gt; x == y\nFalse\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#1031-consideraciones-sobre-los-operadores-de-comparacion","title":"10.3.1. Consideraciones sobre los operadores de comparaci\u00f3n","text":"<p>Los objetos de diferentes tipos, excepto los tipos num\u00e9ricos, nunca se comparan igual. El operador <code>==</code> siempre est\u00e1 definido, pero para algunos tipos de objetos (por ejemplo, objetos de clase) es equivalente a is.</p> <p>Las instancias no id\u00e9nticas de una clase normalmente se comparan como no iguales a menos que la clase defina el m\u00e9todo <code>__eq__()</code>.</p> <p>Las instancias de una clase no se pueden ordenar con respecto a otras instancias de la misma clase u otros tipos de objeto, a menos que la clase defina los m\u00e9todos <code>__lt__()</code>, <code>__gt__()</code>.</p> <p>Los operadores de comparaci\u00f3n se pueden concatenar. Ejemplo:</p> <pre><code># Las comparaciones siguientes son id\u00e9nticas\n&gt;&gt;&gt; x = 9\n&gt;&gt;&gt; 1 &lt; x and x &lt; 20\nTrue\n&gt;&gt;&gt; 1 &lt; x &lt; 20\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#104-operadores-aritmeticos-en-python","title":"10.4.  Operadores aritm\u00e9ticos en Python","text":"<p>En cuanto a los operadores aritm\u00e9ticos, estos permiten realizar las diferentes operaciones aritm\u00e9ticas del \u00e1lgebra: suma, resta, producto, divisi\u00f3n, \u2026 Estos operadores Python son de los m\u00e1s utilizados. El listado completo es el siguiente:</p> Operador Descripci\u00f3n + Suma dos operandos. \u2013 Resta al operando de la izquierda el valor del operando de la derecha. Utilizado sobre un \u00fanico operando, le cambia el signo. * Producto/Multiplicaci\u00f3n de dos operandos. / Divide el operando de la izquierda por el de la derecha (el resultado siempre es un<code>float</code>). % Operador m\u00f3dulo. Obtiene el resto de dividir el operando de la izquierda por el de la derecha. // Obtiene el cociente entero de dividir el operando de la izquierda por el de la derecha. ** Potencia. El resultado es el operando de la izquierda elevado a la potencia del operando de la derecha. <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = 7\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; x + y  # Suma\n9\n&gt;&gt;&gt; x - y  # Resta\n5\n&gt;&gt;&gt; x * y  # Producto\n14\n&gt;&gt;&gt; x / y  # Divisi\u00f3n\n3.5\n&gt;&gt;&gt; x % y  # Resto\n1\n&gt;&gt;&gt; x // y  # Cociente\n3\n&gt;&gt;&gt; x ** y  # Potencia\n49\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#105-operadores-a-nivel-de-bits","title":"10.5.  Operadores a nivel de bits","text":"<p>Los operadores a nivel de bits act\u00faan sobre los operandos como si fueran una cadena de d\u00edgitos binarios. Como su nombre indica, act\u00faan sobre los operandos bit a bit. Son los siguientes:</p> Operaci\u00f3n Descripci\u00f3n x | y or bit a bit de x e y. x ^ y or exclusivo bit a bit de x e y. x &amp; y and bit a bit de x e y. x &lt;&lt; n Desplaza x n bits a la izquierda. x &gt;&gt; n Desplaza x n bits a la derecha. ~x not x. Obtiene los bits de x invertidos. <p>Supongamos que tenemos el entero 2 (en bits es 00010) y el entero 7 (00111). El resultado de aplicar las operaciones anteriores es:</p> <pre><code>&gt;&gt;&gt; x = 2\n&gt;&gt;&gt; y = 7\n&gt;&gt;&gt; x | y\n7\n&gt;&gt;&gt; x ^ y\n5\n&gt;&gt;&gt; x &amp; y\n2\n&gt;&gt;&gt; x &lt;&lt; 1\n4\n&gt;&gt;&gt; x &gt;&gt; 1\n1\n&gt;&gt;&gt; ~x\n-3\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#106-operadores-de-asignacion","title":"10.6.  Operadores de asignaci\u00f3n","text":"<p>El operador de asignaci\u00f3n se utiliza para asignar un valor a una variable. Como te he mencionado en otras secciones, este operador es el signo <code>=</code>.</p> <p>Adem\u00e1s del operador de asignaci\u00f3n, existen otros operadores de asignaci\u00f3n compuestos que realizan una operaci\u00f3n b\u00e1sica sobre la variable a la que se le asigna el valor.</p> <p>Por ejemplo, <code>x += 1</code> es lo mismo que <code>x = x + 1</code>. Los operadores compuestos realizan la operaci\u00f3n que hay antes del signo igual, tomando como operandos la propia variable y el valor a la derecha del signo igual.</p> <p>A continuaci\u00f3n, aparece la lista de todos los operadores de asignaci\u00f3n compuestos:</p> Operador Ejemplo Equivalencia += x += 2 x = x + 2 -= x -= 2 x = x \u2013 2 *= x *= 2 x = x * 2 /= x /= 2 x = x / 2 %= x %= 2 x = x % 2 //= x //= 2 x = x // 2 **= x **= 2 x = x ** 2 &amp;= x &amp;= 2 x = x &amp; 2 |= x |= 2 x = x | 2 ^= x ^= 2 x = x ^ 2 &gt;&gt;= x &gt;&gt;= 2 x = x &gt;&gt; 2 &lt;&lt;= x &lt;&lt;= 2 x = x &lt;&lt; 2","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#107-operadores-de-pertenencia","title":"10.7.  Operadores de pertenencia","text":"<p>Los operadores de pertenencia se utilizan para comprobar si un valor o variable se encuentran en una secuencia (<code>list</code>, <code>tuple</code>, <code>dict</code>, <code>set</code> o <code>str</code>).</p> <p>Todav\u00eda no hemos visto estos tipos, pero son operadores muy utilizados.</p> Operador Descripci\u00f3n in Devuelve True si el valor se encuentra en una secuencia; False en caso contrario. not in Devuelve True si el valor no se encuentra en una secuencia; False en caso contrario. <p>A continuaci\u00f3n vemos unos ejemplos que son muy intuitivos:</p> <pre><code>&gt;&gt;&gt; lista = [1, 3, 2, 7, 9, 8, 6]\n&gt;&gt;&gt; 4 in lista\nFalse\n&gt;&gt;&gt; 3 in lista\nTrue\n&gt;&gt;&gt; 4 not in lista\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#108-operadores-de-identidad","title":"10.8. Operadores de identidad","text":"<p>Por \u00faltimo, los operadores de identidad se utilizan para comprobar si dos variables son, o no, el mismo objeto.</p> Operador Descripci\u00f3n is Devuelve True si ambos operandos hacen referencia al mismo objeto; False en caso contrario. is not Devuelve True si ambos operandos no hacen referencia al mismo objeto; False en caso contrario. <p>\ufe0f Recuerda: Para conocer la identidad de un objeto se usa la funci\u00f3n <code>id()</code>.</p> <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = 4\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; lista = [1, 5]\n&gt;&gt;&gt; x is lista\nFalse\n&gt;&gt;&gt; x is y\nFalse\n&gt;&gt;&gt; x is 4\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#109-prioridad-de-los-operadores-en-python","title":"10.9.  Prioridad de los operadores en Python","text":"<p>Como ya dijimos, al igual que ocurre en las matem\u00e1ticas, los operadores en Python tienen un orden de prioridad. Este orden es el siguiente, de menos prioritario a m\u00e1s prioritario: asignaci\u00f3n; operadores booleanos; operadores de comparaci\u00f3n, identidad y pertenencia; a nivel de bits y finalmente los aritm\u00e9ticos (con el mismo orden de prioridad que en las matem\u00e1ticas).</p> <p>Este orden de prioridad se puede alterar con el uso de los par\u00e9ntesis <code>()</code>:</p> <pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; z = x + 3 * y  # El producto tiene prioridad sobre la suma\n&gt;&gt;&gt; z\n11\n&gt;&gt;&gt; z = (x + 3) * y  # Los par\u00e9ntesis tienen prioridad\n&gt;&gt;&gt; z\n16\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python </li> <li>Python for Everybody </li> <li>Elementos de un programa de Python </li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/","title":"UD 1 - 1.3 Tipos de datos","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#13-tipos-de-datos","title":"1.3. Tipos de datos","text":"<p>En Python, como en otros lenguajes de programaci\u00f3n, los datos se clasifican en distintos tipos seg\u00fan su naturaleza y el tipo de operaciones que se pueden realizar con ellos. Los tipos de datos primitivos simples son aquellos que no se pueden descomponer en partes m\u00e1s peque\u00f1as y son los que se utilizan para representar los valores m\u00e1s b\u00e1sicos. Los tipos de datos primitivos compuestos son aquellos que se pueden descomponer en partes m\u00e1s peque\u00f1as y son los que se utilizan para representar estructuras m\u00e1s complejas.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#1-tipos-de-datos-primitivos-simples","title":"1. Tipos de datos primitivos simples","text":"<p>Los tipos de datos primitivos simples son aquellos que NO se pueden descomponer en partes m\u00e1s peque\u00f1as y son los que se utilizan para representar los valores m\u00e1s b\u00e1sicos. Los tipos de datos primitivos simples en Python son:</p> <ul> <li>N\u00fameros (numbers): Secuencia de d\u00edgitos (pueden incluir el - para negativos y el . para decimales) que representan n\u00fameros.   Ejemplo . 0, -1, 3.1415.</li> <li>Cadenas (strings): Secuencia de caracteres alfanum\u00e9ricos que representan texto. Se escriben entre comillas simples o dobles.   Ejemplo . \u2018Hola\u2019, \u201cAdi\u00f3s\u201d.</li> <li>Booleanos (boolean): Contiene \u00fanicamente dos elementos <code>True</code> y <code>False</code> que representan los valores l\u00f3gicos verdadero y falso respectivamente.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#2-tipos-de-datos-primitivos-compuestos-contenedores","title":"2. Tipos de datos primitivos compuestos (contenedores)","text":"<p>Los tipos de datos primitivos compuestos son aquellos que se pueden descomponer en partes m\u00e1s peque\u00f1as y son los que se utilizan para representar estructuras m\u00e1s complejas. Profundizaremos m\u00e1s adelante en ellos. Los tipos de datos primitivos compuestos en Python son:</p> <ul> <li>Listas (lists): Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. Se representan con corchetes y los elementos se separan por comas.   Ejemplo . [1, \u201cdos\u201d, [3, 4], True].</li> <li>Tuplas (tuples). Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. A diferencia de las listas son inmutables, es decir, que no cambian durante la ejecuci\u00f3n. Se representan mediante par\u00e9ntesis y los elementos se separan por comas.   Ejemplo . (1, \u2018dos\u2019, 3)</li> <li>Diccionarios (dictionaries): Colecciones de objetos con una clave asociada. Se representan con llaves, los pares separados por comas y cada par contiene una clave y un objeto asociado separados por dos puntos.   Ejemplo . {\u2018pi\u2019:3.1416, \u2019e\u2019:2.718}.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#3-clase-de-un-dato-type","title":"3. Clase de un dato (<code>type()</code>)","text":"<p>La clase a la que pertenece un dato se obtiene con el comando <code>type()</code></p> <pre><code>&gt;&gt;&gt; type(1)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(\"Hola\")\n&lt;class 'str'&gt;\n&gt;&gt;&gt; type([1, \"dos\", [3, 4], True])\n&lt;class 'list'&gt;\n&gt;&gt;&gt;type({'pi':3.1416, 'e':2.718})\n&lt;class 'dict'&gt;\n&gt;&gt;&gt;type((1, 'dos', 3))\n&lt;class 'tuple'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#4-numeros-clases-int-y-float","title":"4. N\u00fameros (clases <code>int</code> y <code>float</code>)","text":"<p>Secuencia de d\u00edgitos (pueden incluir el - para negativos y el . para decimales) que representan n\u00fameros. Pueden ser enteros (<code>int</code>) o reales (<code>float</code>).</p> <pre><code>&gt;&gt;&gt; type(1)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(-2)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(2.3)\n&lt;class 'float'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#41-operadores-aritmeticos","title":"4.1. Operadores aritm\u00e9ticos","text":"<ul> <li>Operadores aritm\u00e9ticos: <code>+</code> (suma), <code>-</code> (resta), <code>*</code> (producto), <code>/</code> (cociente), <code>//</code> (cociente divisi\u00f3n entera), <code>%</code> (resto divisi\u00f3n entera), <code>**</code> (potencia).</li> </ul> <p>Orden de prioridad de evaluaci\u00f3n:</p> 1 Funciones predefinidas 2 Potencias 3 Productos y cocientes 4 Sumas y restas <p>Se puede saltar el orden de evaluaci\u00f3n utilizando par\u00e9ntesis <code>( )</code>.</p> <pre><code>&gt;&gt;&gt; 2+3\n5\n&gt;&gt;&gt; 5*-2\n-10\n&gt;&gt;&gt; 5/2\n2.5\n&gt;&gt;&gt; 5//2\n2\n&gt;&gt;&gt; (2+3)**2\n25\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#42-operadores-logicos-con-numeros","title":"4.2. Operadores l\u00f3gicos con n\u00fameros","text":"<p>Devuelven un valor l\u00f3gico o booleano.</p> <ul> <li>Operadores l\u00f3gicos: <code>==</code> (igual que), <code>&gt;</code> (mayor que), <code>&lt;</code> (menor que), <code>&gt;=</code> (mayor o igual que), <code>&lt;=</code> (menor o igual que), <code>!=</code> (distinto de).</li> </ul> <pre><code>&gt;&gt;&gt; 3==3\nTrue\n&gt;&gt;&gt; 3.1&lt;=3\nFalse\n&gt;&gt;&gt; -1!=1\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#5-cadenas-clase-str","title":"5. Cadenas (clase <code>str</code>)","text":"<p>Secuencia de caracteres alfanum\u00e9ricos que representan texto. Se escriben entre comillas sencillas \u2019 o dobles \u201c.</p> <pre><code>'Python'\n\"123\"\n'True'\n# Cadena vac\u00eda\n''\n# Cadena con un espacio en blanco\n' '\n# Cambio de l\u00ednea\n'\\n'\n# Tabulador\n'\\t'\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#51-acceso-a-los-elementos-de-una-cadena","title":"5.1. Acceso a los elementos de una cadena","text":"<p>Cada car\u00e1cter tiene asociado un \u00edndice que permite acceder a \u00e9l.</p> Cadena <code>P</code> <code>y</code> <code>t</code> <code>h</code> <code>o</code> <code>n</code> \u00cdndice positivo 0 1 2 3 4 5 \u00cdndice negativo -6 -5 -4 -3 -2 -1 <ul> <li><code>c[i]</code> devuelve el car\u00e1cter de la cadena <code>c</code> con el \u00edndice <code>i</code>.</li> </ul> <p>El \u00edndice del primer car\u00e1cter de la cadena es 0.</p> <p>Tambi\u00e9n se pueden utilizar \u00edndices negativos para recorrer la cadena del final al principio.</p> <p>El \u00edndice del \u00faltimo car\u00e1cter de la cadena es -1.</p> <pre><code>&gt;&gt;&gt; 'Python'[0]\n'P'\n&gt;&gt;&gt; 'Python'[1]\n'y'\n&gt;&gt;&gt; 'Python'[-1]\n'n'\n&gt;&gt;&gt; 'Python'[6]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: string index out of range\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#52-subcadenas","title":"5.2. Subcadenas","text":"<ul> <li><code>c[i:j:k]</code> : Devuelve la subcadena de <code>c</code> desde el car\u00e1cter con el \u00edndice <code>i</code> hasta el car\u00e1cter anterior al \u00edndice <code>j</code>, tomando caracteres cada <code>k</code>.</li> </ul> <pre><code>&gt;&gt;&gt; 'Python'[1:4]\n'yth'\n&gt;&gt;&gt; 'Python'[1:1]\n''\n&gt;&gt;&gt; 'Python'[2:]\n'thon'\n&gt;&gt;&gt; 'Python'[:-2]\n'Pyth'\n&gt;&gt;&gt; 'Python'[:]\n'Python'\n&gt;&gt;&gt; 'Python'[0:6:2]\n'Pto'\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#53-operaciones-con-cadenas","title":"5.3. Operaciones con cadenas","text":"<ul> <li><code>c1 + c2</code> : Devuelve la cadena resultado de concatenar las cadenas <code>c1</code> y <code>c2</code>.</li> <li><code>c * n</code> : Devuelve la cadena resultado de concatenar <code>n</code> copias de la cadena <code>c</code>.</li> <li><code>c1 in c2</code> : Devuelve <code>True</code> si <code>c1</code> es una cadena concenida en <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 not in c2</code> : Devuelve <code>True</code> si <code>c1</code> es una cadena no concenida en <code>c2</code> y <code>False</code> en caso contrario.</li> </ul> <pre><code>&gt;&gt;&gt; 'Me gusta ' + 'Python'\n'Me gusta Python'\n&gt;&gt;&gt; 'Python' * 3\n'PythonPythonPython'\n&gt;&gt;&gt; 'y' in 'Python'\nTrue\n&gt;&gt;&gt; 'tho' in 'Python'\nTrue\n&gt;&gt;&gt; 'to' not in 'Python'\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#54-operaciones-de-comparacion-de-cadenas","title":"5.4. Operaciones de comparaci\u00f3n de cadenas","text":"<ul> <li><code>c1 == c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> es igual que la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &gt; c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> sucede a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &lt; c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> antecede a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &gt;= c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> sucede o es igual a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &lt;= c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> antecede o es igual a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 != c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> es distinta de la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> </ul> <p>Utilizan el orden establecido en el c\u00f3digo ASCII .</p> <pre><code>&gt;&gt;&gt; 'Python' == 'python'\nFalse\n&gt;&gt;&gt; 'Python' &lt; 'python'\nTrue\n&gt;&gt;&gt; 'a' &gt; 'Z'\nTrue\n&gt;&gt;&gt; 'A' &gt;= 'Z'\nFalse\n&gt;&gt;&gt; '' &lt; 'Python'\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#55-funciones-de-cadenas","title":"5.5. Funciones de cadenas","text":"<ul> <li><code>len(c)</code> : Devuelve el n\u00famero de caracteres de la cadena <code>c</code>.</li> <li><code>min(c)</code> : Devuelve el car\u00e1cter menor de la cadena <code>c</code>.</li> <li><code>max(c)</code> : Devuelve el car\u00e1cter mayor de la cadena <code>c</code>.</li> <li><code>c.upper()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> pero en may\u00fasculas.</li> <li><code>c.lower()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> pero en min\u00fasculas.</li> <li><code>c.title()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> con el primer car\u00e1cter en may\u00fasculas y el resto en min\u00fasculas.</li> <li><code>c.split(delimitador)</code> : Devuelve la lista formada por las subcadenas que resultan de partir la cadena <code>c</code> usando como delimitador la cadena <code>delimitador</code>. Si no se especifica el delimitador utiliza por defecto el espacio en blanco.</li> </ul> <pre><code>&gt;&gt;&gt; len('Python')\n6\n&gt;&gt;&gt; min('Python')\n'P'\n&gt;&gt;&gt; max('Python')\n'y'\n&gt;&gt;&gt; 'Python'.upper()\n'PYTHON'\n&gt;&gt;&gt; 'A,B,C'.split(',')\n['A', 'B', 'C']\n&gt;&gt;&gt; 'I love Python'.split()\n['I', 'love', 'Python']\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#56-cadenas-formateadas-format","title":"5.6. Cadenas formateadas (<code>format()</code>)","text":"<ul> <li><code>c.format(valores)</code>: Devuelve la cadena <code>c</code> tras sustituir los valores de la secuencia <code>valores</code> en los marcadores de posici\u00f3n de <code>c</code>. Los marcadores de posici\u00f3n se indican mediante llaves <code>{}</code> en la cadena <code>c</code>, y el reemplazo de los valores se puede realizar por posici\u00f3n, indicando en n\u00famero de orden del valor dentro de las llaves, o por nombre, indicando el nombre del valor, siempre y cuando los valores se pasen con el formato <code>nombre = valor</code>.</li> </ul> <pre><code>&gt;&gt;&gt; 'Un {} vale {} {}'.format('\u20ac', 1.12, '$')\n'Un \u20ac vale 1.12 $'\n&gt;&gt;&gt; 'Un {2} vale {1} {0}'.format('\u20ac', 1.12, '$')\n'Un $ vale 1.12 \u20ac'\n&gt;&gt;&gt; 'Un {moneda1} vale {cambio} {moneda2}'.format(moneda1 = '\u20ac', cambio = 1.12, moneda2 = '$')\n'Un \u20ac vale 1.12 $'\n</code></pre> <p>Los marcadores de posici\u00f3n, a parte de indicar la posici\u00f3n de los valores de reemplazo, pueden indicar tambi\u00e9n el formato de estos. Para ello se utiliza la siguiente sintaxis:</p> <ul> <li><code>{:n}</code> : Alinea el valor a la izquierda rellenando con espacios por la derecha hasta los <code>n</code> caracteres.</li> <li><code>{:&gt;n}</code> : Alinea el valor a la derecha rellenando con espacios por la izquierda hasta los <code>n</code> caracteres.</li> <li><code>{:^n}</code> : Alinea el valor en el centro rellenando con espacios por la izquierda y por la derecha hasta los <code>n</code> caracteres.</li> <li><code>{:nd}</code> : Formatea el valor como un n\u00famero entero con <code>n</code> caracteres rellenando con espacios blancos por la izquierda.</li> <li><code>{:n.mf}</code> : Formatea el valor como un n\u00famero real con un tama\u00f1o de <code>n</code> caracteres (inclu\u00eddo el separador de decimales) y <code>m</code> cifras decimales, rellenando con espacios blancos por la izquierda.</li> </ul> <pre><code>&gt;&gt;&gt; 'Hoy es {:^10}, ma\u00f1ana {:10} y pasado {:&gt;10}'.format('lunes', 'martes', 'mi\u00e9rcoles')\n'Hoy es   lunes   , ma\u00f1ana martes     y pasado  mi\u00e9rcoles'\n&gt;&gt;&gt; 'Cantidad {:5d}'.format(12)'\n'Cantidad    12'\n&gt;&gt;&gt; 'Pi vale {:8.4f}'.format(3.141592)\n'Pi vale   3.1416'\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#6-datos-logicos-o-booleanos-clase-bool","title":"6. Datos l\u00f3gicos o booleanos (clase <code>bool</code>)","text":"<p>Contiene \u00fanicamente dos elementos <code>True</code> y <code>False</code> que representan los valores l\u00f3gicos verdadero y falso respectivamente.</p> <p><code>False</code> tiene asociado el valor 0 y <code>True</code> tiene asociado el valor 1.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#61-operaciones-con-valores-logicos","title":"6.1. Operaciones con valores l\u00f3gicos","text":"<ul> <li>Operadores l\u00f3gicos: <code>==</code> (igual que), <code>&gt;</code> (mayor), <code>&lt;</code> (menor), <code>&gt;=</code> (mayor o igual que), <code>&lt;=</code> (menor o igual que), <code>!=</code> (distinto de).</li> <li><code>not b</code> (negaci\u00f3n) : Devuelve <code>True</code> si el dato booleano <code>b</code> es <code>False</code> , y <code>False</code> en caso contrario.</li> <li><code>b1 and b2</code> : Devuelve <code>True</code> si los datos booleanos <code>b1</code> y <code>b2</code> son <code>True</code>, y <code>False</code> en caso contrario.</li> <li><code>b1 or b2</code> : Devuelve <code>True</code> si alguno de los datos booleanos <code>b1</code> o <code>b2</code> son <code>True</code>, y <code>False</code> en caso contrario.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#62-tabla-de-verdad","title":"6.2. Tabla de verdad","text":"<code>x</code> <code>y</code> <code>not x</code> <code>x and y</code> <code>x or y</code> <code>False</code> <code>False</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <pre><code>&gt;&gt;&gt; not True\nFalse\n&gt;&gt;&gt; False or True\nTrue\n&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; True and True\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#63-conversion-de-datos-primitivos-simples","title":"6.3. Conversi\u00f3n de datos primitivos simples","text":"<p>En algunos casos, es necesario convertir un dato de un tipo a otro. Las conversiones de datos en Python se pueden clasificar en dos tipos:</p> <ol> <li>Conversiones expl\u00edcitas: Son aquellas en las que se especifica manualmente el tipo al que se quiere convertir el dato.</li> <li>Conversiones impl\u00edcitas: Son aquellas en las que Python realiza la conversi\u00f3n de forma autom\u00e1tica durante la ejecuci\u00f3n del programa.</li> </ol>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#631-conversiones-explicitas","title":"6.3.1. Conversiones expl\u00edcitas","text":"<p>Las siguientes funciones permiten convertir un dato de un tipo a otro, siempre y cuando la conversi\u00f3n sea v\u00e1lida:</p> <ul> <li><code>int()</code> convierte a entero.</li> <li> <p>Ejemplo:     <pre><code>int('12')  # 12\nint(True)  # 1\nint('c')   # Error\n</code></pre></p> </li> <li> <p><code>float()</code> convierte a n\u00famero real (flotante).</p> </li> <li> <p>Ejemplo:     <pre><code>float('3.14')  # 3.14\nfloat(True)    # 1.0\nfloat('III')   # Error\n</code></pre></p> </li> <li> <p><code>str()</code> convierte a cadena.</p> </li> <li> <p>Ejemplo:     <pre><code>str(3.14)   # '3.14'\nstr(True)   # 'True'\n</code></pre></p> </li> <li> <p><code>bool()</code> convierte a booleano.</p> </li> <li>Ejemplo:     <pre><code>bool('0')     # False\nbool('3.14')  # True\nbool('')      # False\nbool('Hola')  # True\n</code></pre></li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#632-conversiones-implicitas","title":"6.3.2. Conversiones impl\u00edcitas","text":"<p>Python realiza ciertas conversiones de tipos de datos de manera impl\u00edcita durante las operaciones. Las conversiones impl\u00edcitas que Python efect\u00faa son las siguientes:</p> <ul> <li>De <code>int</code> a <code>float</code>: Si se realiza una operaci\u00f3n aritm\u00e9tica entre un n\u00famero entero y un n\u00famero real, el entero se convierte autom\u00e1ticamente en un n\u00famero real.</li> </ul> <p>Ejemplo:   <pre><code>2 + 3.0  # 5.0 (int convertido a float)\n</code></pre></p> <ul> <li> <p>De <code>float</code> a <code>int</code>: Python no convierte autom\u00e1ticamente un <code>float</code> a <code>int</code> en una operaci\u00f3n aritm\u00e9tica, ya que esto implicar\u00eda p\u00e9rdida de precisi\u00f3n. Para convertir un <code>float</code> a <code>int</code>, se debe realizar una conversi\u00f3n expl\u00edcita utilizando <code>int()</code>.</p> </li> <li> <p>No hay conversi\u00f3n impl\u00edcita de <code>int</code> a <code>str</code> ni de <code>float</code> a <code>str</code>: Para concatenar un n\u00famero con una cadena, se debe convertir expl\u00edcitamente el n\u00famero a cadena utilizando <code>str()</code>. Python no realiza esta conversi\u00f3n de manera impl\u00edcita.</p> </li> </ul> <p>Ejemplo:   <pre><code>'Hola' + str(3)  # 'Hola3'\n</code></pre></p> <ul> <li>No hay conversi\u00f3n impl\u00edcita de <code>str</code> a <code>int</code> o <code>float</code>: Si se necesita realizar operaciones aritm\u00e9ticas con una cadena que contiene un n\u00famero, es necesario convertir la cadena expl\u00edcitamente a <code>int</code> o <code>float</code> utilizando las funciones <code>int()</code> o <code>float()</code>.</li> </ul> <p>Ejemplo:   <pre><code>2 + int('3')    # 5 (conversi\u00f3n expl\u00edcita de str a int)\n2 + float('3.0')  # 5.0 (conversi\u00f3n expl\u00edcita de str a float)\n</code></pre></p> <p>En resumen:</p> <ul> <li>Las conversiones impl\u00edcitas en Python ocurren principalmente en operaciones num\u00e9ricas entre <code>int</code> y <code>float</code>.</li> <li>Para realizar operaciones con cadenas y n\u00fameros, es necesario realizar conversiones expl\u00edcitas utilizando funciones como <code>str()</code>, <code>int()</code>, o <code>float()</code>.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#fuente","title":"Fuente","text":"<ul> <li>Aprende con Alf</li> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Documentaci\u00f3n de Python</li> <li>Tipos de datos)</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.4.-Pytest/","title":"1.4.-Pruebas con pytest","text":""},{"location":"section1/u01/teoria/PROG-U1.4.-Pytest/#14-realizacion-de-pruebas-con-pytest","title":"1.4 Realizaci\u00f3n de pruebas con Pytest","text":"<p>En este apartado vamos a ver como realizar pruebas con pytest. Para ello, vamos a crear un entorno virtual y vamos a instalar pytest.</p>"},{"location":"section1/u01/teoria/PROG-U1.4.-Pytest/#1-instalacionactualizacion-de-pip","title":"1. Instalaci\u00f3n/Actualizaci\u00f3n de pip","text":"<p>Antes de realizar, nada, vamos a actualizar la herramienta que nos va a permitir instalar los comandos que necesitamos. Como no viene por defecto, hay que instalarlo. Antes de instalarlo, actualizamos pip.</p> <p>pip es un sistema de gesti\u00f3n de paquetes utilizado para instalar y administrar paquetes de software escritos en Python. Muchos paquetes pueden ser encontrados en el Python Package Index (PyPI). Python 2.7.9 y posteriores (en la serie Python2), Python 3.4 y posteriores incluyen pip (pip3 para Python3) por defecto. </p> <p>El comando para instalar <code>pip</code></p> <pre><code>&gt; sudo apt-get install pip\n</code></pre> <p>El comando para actualizar <code>pip</code></p> <pre><code>&gt; sudo python3 -m pip install --upgrade pip\n</code></pre>"},{"location":"section1/u01/teoria/PROG-U1.4.-Pytest/#2-crear-un-entorno-virtual","title":"2. Crear un entorno virtual","text":"<p>Las aplicaciones en Python usualmente hacen uso de paquetes y m\u00f3dulos que no forman parte de la librer\u00eda est\u00e1ndar. Las aplicaciones a veces necesitan una versi\u00f3n espec\u00edfica de una librer\u00eda, debido a que dicha aplicaci\u00f3n requiere que un bug particular haya sido solucionado o bien la aplicaci\u00f3n ha sido escrita usando una versi\u00f3n obsoleta de la interfaz de la librer\u00eda.</p> <p>Esto significa que tal vez no sea posible para una instalaci\u00f3n de Python cumplir los requerimientos de todas las aplicaciones. Si la aplicaci\u00f3n A necesita la versi\u00f3n 1.0 de un m\u00f3dulo particular y la aplicaci\u00f3n B necesita la versi\u00f3n 2.0, entonces los requerimientos entran en conflicto e instalar la versi\u00f3n 1.0 o 2.0 dejar\u00e1 una de las aplicaciones sin funcionar.</p> <p>La soluci\u00f3n a este problema es crear un entorno virtual, un directorio que contiene una instalaci\u00f3n de Python de una versi\u00f3n en particular, adem\u00e1s de unos cuantos paquetes adicionales.</p> <p>Virtualenv es una herramienta usada para crear un entorno Python aislado. Este entorno tiene sus propios directorios de instalaci\u00f3n que no comparten bibliotecas con otros entornos virtualenv o las bibliotecas instaladas globalmente en el servidor. Virtualenv es la manera m\u00e1s f\u00e1cil recomendada para configurar un ambiente personalizado Python. </p> <p>A contiuaci\u00f3n instalamos el modulo virtualenv, haciendo uso de pip.</p> <pre><code>&gt; sudo pip install virtualenv\n</code></pre> <p>Si tienes problemas con la instalaci\u00f3n, puedes forzar la instalaci\u00f3n con el siguiente comando:</p> <pre><code>&gt; sudo pip install virtualenv --break-system-packages \n</code></pre> <p>Una vez instalado el m\u00f3dulo, podemos usarlo para crear un entorno llamado env en la carpeta base de nuestro proyecto. </p> <p>Accedemos a la carpeta de nuestro proyecto</p> <pre><code>&gt; cd /ruta/a/mi/proyecto\n</code></pre> <p>ejecutamos el comando para crear el entorno virtual env:</p> <pre><code>&gt; python -m virtualenv env\n</code></pre> <p>La creaci\u00f3n del entorno, crear\u00e1 una carpeta con el mismo nombre: <code>./env</code></p> <p>Una vez creado, pasamos a activar el entorno recien creado: env</p> <pre><code>&gt; . ./env/bin/activate\n</code></pre> <p>Eliminando la carpeta <code>env</code> eliminaremos el entorno. Adem\u00e1s, si queremos desactivar el entorno, podemos hacerlo con el comando:</p> <pre><code>&gt; deactivate\n</code></pre> <p>Una vez hemos creado el entorno, y tenemos lo hemos activado, podemos listar los m\u00f3dulos que tenemos disponibles en el entorno:</p> <pre><code>&gt; pip list\n</code></pre> <p>Adicionalmente, si en un momento determinado necesitamos recoger los m\u00f3dulos instalados, podemos captura los requerimientos a un archivo.</p> <pre><code>&gt; pip freeze &gt; requirements.txt\n</code></pre> <p>Y posteriormente, reinstalar esos mismos m\u00f3dulos:</p> <pre><code>&gt; pip install -r requirements.txt\n</code></pre> <p>La estructura creada en el nuevo entorno, tiene por defecto los directorios <code>bin</code> (ejecutables) y <code>lib</code> (paquetes instalados).</p> <pre><code>&gt; ls env\n\nenv/\n\u2502\n\u251c\u2500\u2500/bin\n\u2514\u2500\u2500/lib\n</code></pre> <p>Para continuar creando la estructura de nuestro proyecto, vamos a crear los directorios necesarios para almacenar el c\u00f3digo fuente y los tests.</p> <p>En el raiz de nuestro proyecto <code>/ruta/a/mi/proyecto</code>, crearemos los directorios src para almacenar el c\u00f3digo fuente y test para almacenar los tests. Adem\u00e1s, crearemos un archivo <code>__init__.py</code> vac\u00edo en cada uno de estos dos directorios.</p> <p>El archivo init.py es utilizado para inicializar paquetes de Python, es decir, le indica al int\u00e9rprete de Python que el directorio package contiene un m\u00f3dulo, y que debe tratarlo como tal (es decir, hacer que sea posible importar los archivos como parte del m\u00f3dulo). En general no es necesario poner nada en el archivo <code>__init__.py</code>, pero es muy com\u00fan usarlo para realizar configuraciones e importar cualquier objeto necesario de nuestra librer\u00eda. </p> <p>La estructura final que tiene que tener es la siguiente:</p> <pre><code>proyecto/              # Carpeta ra\u00edz del proyecto\n\u2502\n\u251c\u2500\u2500 env/           # Carpeta del entorno virtual (no incluida en Git)\n\u251c\u2500\u2500 src/               # C\u00f3digo fuente del proyecto\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/             # Pruebas unitarias\n\u2502   \u2514\u2500\u2500 test_suma.py\n\u251c\u2500\u2500 .gitignore         # Archivo para excluir el entorno virtual y otros archivos innecesarios\n\u251c\u2500\u2500 requirements.txt   # Dependencias del proyecto\n\u2514\u2500\u2500 README.md          # Informaci\u00f3n del proyecto\n</code></pre> <p>Agrega las siguientes l\u00edneas a <code>.gitignore</code> para ignorar la carpeta del entorno virtual y otros archivos temporales:</p> <pre><code># Ignorar entornos virtuales\nenv/\n\n# Archivos de configuraci\u00f3n de Python\n*.pyc\n__pycache__/\n\n# Archivos de configuraci\u00f3n de IDEs y sistemas operativos\n.vscode/\n.idea/\n.DS_Store\n</code></pre>"},{"location":"section1/u01/teoria/PROG-U1.4.-Pytest/#3-pruebas-con-pytest","title":"3. Pruebas con pytest","text":"<p>Pytest es un marco de pruebas en Python que se utiliza para escribir y ejecutar pruebas de manera sencilla y eficiente. Proporciona una forma f\u00e1cil de definir casos de prueba y realizar aserciones sobre el comportamiento esperado de las funciones o m\u00f3dulos que se est\u00e1n probando. </p> <p>Para realizar un test sencillo con pytest, sigue los siguientes pasos:</p> <ol> <li> <p>Aseg\u00farate de tener pytest instalado en tu entorno virtual. Puedes instalarlo utilizando el siguiente comando.    Despues de instalar pytest, si listamos de nuevo los m\u00f3dulos del entorno, veremos que los modulos instalados se hab\u0155an incrementado.</p> <pre><code>&gt; pip install pytest\n</code></pre> </li> <li> <p>Suponiendo que tienes una funci\u00f3n llamada suma en el archivo <code>main.py</code> en el directorio src de tu proyecto. Aqu\u00ed tienes un ejemplo de una funci\u00f3n <code>suma</code> en Python, que toma dos argumentos <code>a</code> y <code>b</code> y devuelve la suma de los dos n\u00fameros.</p> <pre><code>def suma(a, b):\n    return a + b\n</code></pre> </li> <li> <p>Crea un archivo de prueba en el directorio \"test\" de tu proyecto. Por ejemplo, podr\u00edas llamarlo <code>test_suma.py</code>.</p> </li> <li> <p>En este archivo de prueba, importa pytest y la funci\u00f3n que deseas probar desde tu c\u00f3digo fuente. Por ejemplo, podr\u00edas importar la funci\u00f3n <code>suma</code> desde el m\u00f3dulo <code>main.py</code> en el directorio <code>src</code>.</p> <pre><code>import pytest\nfrom src.main import suma\n</code></pre> </li> <li> <p>Define una funci\u00f3n de prueba utilizando el decorador <code>@pytest.mark.parametrize</code>. Esta funci\u00f3n de prueba <code>test_suma_params</code> debe tomar los par\u00e1metros de entrada que deseas probar y el resultado esperado. Por ejemplo:</p> <pre><code>@pytest.mark.parametrize(\n    \"input_x, input_y, expected\",\n    [\n        (0, 0, 0),\n        (-1, 1, 0),\n        (5, 5, 10)\n    ]\n)\n\ndef test_suma_params(input_x, input_y, expected):\n    assert suma(input_x, input_y) == expected\n</code></pre> <p>En este ejemplo, estamos probando la funci\u00f3n \"suma\" con diferentes valores de entrada y comprobando si el resultado es igual al valor esperado.</p> </li> <li> <p>Desde el directorio base de tu proyecto, ejecuta los tests utilizando el siguiente comando en la terminal:</p> <pre><code>&gt; pytest ./test\n</code></pre> <p>Esto ejecutar\u00e1 todos los archivos de prueba con el prefijo \"test_\" en el nombre y mostrar\u00e1 los resultados de las pruebas.</p> </li> </ol>"},{"location":"section1/u01/teoria/PROG-U1.4.-Pytest/#fuentes","title":"Fuentes:","text":"<ul> <li>Entornos virutales y paquetes.</li> <li>Instalar y usar virtualenv con Python 3</li> <li>M\u00f3dulos en python</li> <li>Tutorial de pytest</li> </ul>"},{"location":"section1/u01/teoria/OtrosRecursos/readme/","title":"Readme","text":"<p>Nuevo material. </p>"},{"location":"section1/u02/","title":"UD 2 - Sentencias condicionales y repetitivas","text":"","tags":["Software"]},{"location":"section1/u02/#unidad-2-estructuras-de-control-en-la-programacion","title":"Unidad 2: Estructuras de control en la programaci\u00f3n","text":"","tags":["Software"]},{"location":"section1/u02/#1-normativa-de-respaldo","title":"1. Normativa de respaldo","text":"<p>La unidad est\u00e1 respaldada por la normativa oficial del curso.</p>","tags":["Software"]},{"location":"section1/u02/#2-resultados-de-aprendizaje-ra","title":"2. Resultados de aprendizaje (RA)","text":"<p>RA 3: Escribir y depurar c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje.</p>","tags":["Software"]},{"location":"section1/u02/#3-criterios-de-evaluacion","title":"3. Criterios de evaluaci\u00f3n","text":"<p>Los criterios de evaluaci\u00f3n para la unidad 2 son los siguientes:  - a) Escribir y probar c\u00f3digo que haga uso de estructuras de selecci\u00f3n.  - b) Utilizar estructuras de repetici\u00f3n.   - c) Reconocer las posibilidades de las sentencias de salto.  - d) Escribir c\u00f3digo utilizando control de excepciones.  - e) Crear programas ejecutables utilizando diferentes estructuras de control.   - f) Probar y depurar los programas.  - g) Comentar y documentar el c\u00f3digo.   </p>","tags":["Software"]},{"location":"section1/u02/#4-contenidos","title":"4. Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 1 e incluye los siguientes temas:  - U1: Mi primer programa.  - U2: Estructuras de control en la programaci\u00f3n.    </p>","tags":["Software"]},{"location":"section1/u02/#5-detalles-de-los-contenidos","title":"5. Detalles de los contenidos","text":"<p>Durante la unidad, los estudiantes aprender\u00e1n:    - 2.1. Estructuras de selecci\u00f3n.   - 2.2. Estructuras de repetici\u00f3n.   - 2.3. Estructuras de salto.   - 2.4. Control de excepciones.    - 2.5. Depuraci\u00f3n de programas, utilizando el depurador como herramienta de control de errores.    - 2.6. Documentaci\u00f3n de programas.     </p>","tags":["Software"]},{"location":"section1/u02/#6-evaluacion","title":"6. Evaluaci\u00f3n","text":"<p>Para evaluar la unidad se realizar\u00e1n:    - Pr\u00e1ctica: Creaci\u00f3n de programas que utilicen estructuras de control, implementaci\u00f3n de control de excepciones y uso del depurador.           - Prueba espec\u00edfica: Evaluaci\u00f3n de las competencias relacionadas con el uso y depuraci\u00f3n de estructuras de control en los programas.      </p>","tags":["Software"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/","title":"UD 2 - P1: Condicionales","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#p21-ejercicios","title":"P2.1 - Ejercicios","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-211","title":"Ejercicio 2.1.1","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla si es mayor de edad o no.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-212","title":"Ejercicio 2.1.2","text":"<p>Escribir un programa que almacene la cadena de caracteres <code>contrase\u00f1a</code> en una variable, pregunte al usuario por la contrase\u00f1a e imprima por pantalla si la contrase\u00f1a introducida por el usuario coincide con la guardada en la variable sin tener en cuenta may\u00fasculas y min\u00fasculas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-213","title":"Ejercicio 2.1.3","text":"<p>Escribir un programa que pida al usuario dos n\u00fameros y muestre por pantalla su divisi\u00f3n. Si el divisor es cero el programa debe mostrar un error.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-214","title":"Ejercicio 2.1.4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es par o impar.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-215","title":"Ejercicio 2.1.5","text":"<p>Para tributar un determinado impuesto se debe ser mayor de 16 a\u00f1os y tener unos ingresos iguales o superiores a 1000 \u20ac mensuales. Escribir un programa que pregunte al usuario su edad y sus ingresos mensuales y muestre por pantalla si el usuario tiene que tributar o no.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-216","title":"Ejercicio 2.1.6","text":"<p>Los alumnos de un curso se han dividido en dos grupos A y B de acuerdo al sexo y el nombre. El grupo A esta formado por las mujeres con un nombre anterior a la M y los hombres con un nombre posterior a la N y el grupo B por el resto. Escribir un programa que pregunte al usuario su nombre y sexo, y muestre por pantalla el grupo que le corresponde.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-217","title":"Ejercicio 2.1.7","text":"<p>Los tramos impositivos para la declaraci\u00f3n de la renta en un determinado pa\u00eds son los siguientes:</p> Renta Tipo impositivo Menos de 10000\u20ac 5% Entre 10000\u20ac y 20000\u20ac 15% Entre 20000\u20ac y 35000\u20ac 20% Entre 35000\u20ac y 60000\u20ac 30% M\u00e1s de 60000\u20ac 45% <p>Escribir un programa que pregunte al usuario su renta anual y muestre por pantalla el tipo impositivo que le corresponde.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-218","title":"Ejercicio 2.1.8","text":"<p>En una determinada empresa, sus empleados son evaluados al final de cada a\u00f1o. Los puntos que pueden obtener en la evaluaci\u00f3n comienzan en 0.0 y pueden ir aumentando, traduci\u00e9ndose en mejores beneficios. Los puntos que pueden conseguir los empleados pueden ser 0.0, 0.4, 0.6 o m\u00e1s, pero no valores intermedios entre las cifras mencionadas. A continuaci\u00f3n se muestra una tabla con los niveles correspondientes a cada puntuaci\u00f3n. La cantidad de dinero conseguida en cada nivel es de 2.400\u20ac multiplicada por la puntuaci\u00f3n del nivel.</p> Nivel Puntuaci\u00f3n Inaceptable 0.0 Aceptable 0.4 Meritorio 0.6 o m\u00e1s <p>Escribir un programa que lea la puntuaci\u00f3n del usuario e indique su nivel de rendimiento, as\u00ed como la cantidad de dinero que recibir\u00e1 el usuario.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-219","title":"Ejercicio 2.1.9","text":"<p>Escribir un programa para una empresa que tiene salas de juegos para todas las edades y quiere calcular de forma autom\u00e1tica el precio que debe cobrar a sus clientes por entrar. El programa debe preguntar al usuario la edad del cliente y mostrar el precio de la entrada. Si el cliente es menor de 4 a\u00f1os puede entrar gratis, si tiene entre 4 y 18 a\u00f1os debe pagar 5\u20ac y si es mayor de 18 a\u00f1os, 10\u20ac.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-2110","title":"Ejercicio 2.1.10","text":"<p>La pizzer\u00eda Bella Napoli ofrece pizzas vegetarianas y no vegetarianas a sus clientes. Los ingredientes para cada tipo de pizza aparecen a continuaci\u00f3n.</p> <ul> <li>Ingredientes vegetarianos: Pimiento y tofu.</li> <li>Ingredientes no vegetarianos: Peperoni, Jam\u00f3n y Salm\u00f3n.</li> </ul> <p>Escribir un programa que pregunte al usuario si quiere una pizza vegetariana o no, y en funci\u00f3n de su respuesta le muestre un men\u00fa con los ingredientes disponibles para que elija. Solo se puede eligir un ingrediente adem\u00e1s de la mozzarella y el tomate que est\u00e1n en todas la pizzas. Al final se debe mostrar por pantalla si la pizza elegida es vegetariana o no y todos los ingredientes que lleva.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/","title":"UD 2 - P2: Iterativas","text":"<p>Durante la realizaci\u00f3n de estos ejercicios, no debes usar ninguna funci\u00f3n (m\u00e9todo) de las clases para ayudarte a realizarlo. Es decir, evita hacer uso de las funciones <code>len</code>, <code>count</code> de <code>str</code>, etc. La reaizaci\u00f3n de estas funciones forman parte de la realizaci\u00f3n del ejercicio.  </p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#p22-ejercicios","title":"P2.2 - Ejercicios","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-221","title":"Ejercicio 2.2.1","text":"<p>Escribir un programa que pida al usuario una palabra y la muestre por pantalla 10 veces.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-222","title":"Ejercicio 2.2.2","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los a\u00f1os que ha cumplido (desde 1 hasta su edad).</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-223","title":"Ejercicio 2.2.3","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla todos los n\u00fameros impares desde 1 hasta ese n\u00famero separados por comas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-224","title":"Ejercicio 2.2.4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla la cuenta atr\u00e1s desde ese n\u00famero hasta cero separados por comas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-225","title":"Ejercicio 2.2.5","text":"<p>Escribir un programa que pregunte al usuario una cantidad a invertir, el inter\u00e9s anual y el n\u00famero de a\u00f1os, y muestre por pantalla el capital obtenido en la inversi\u00f3n cada a\u00f1o que dura la inversi\u00f3n.</p> <pre><code># Formula para calcular El capital tras un a\u00f1o.\namount *= 1 + interest / 100\n# En donde:\n# - amount: Cantidad a invertir\n# - interest: Interes porcentual anual \n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-226","title":"Ejercicio 2.2.6","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla un tri\u00e1ngulo rect\u00e1ngulo como el de m\u00e1s abajo, de altura el n\u00famero introducido. <pre><code>*\n**\n***\n****\n*****\n</code></pre></p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-227","title":"Ejercicio 2.2.7","text":"<p>Escribir un programa que muestre por pantalla la tabla de multiplicar del 1 al 10.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-228","title":"Ejercicio 2.2.8","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla un tri\u00e1ngulo rect\u00e1ngulo como el de m\u00e1s abajo. <pre><code>1\n3 1\n5 3 1\n7 5 3 1\n9 7 5 3 1\n</code></pre></p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-229","title":"Ejercicio 2.2.9","text":"<p>Escribir un programa que almacene la cadena de caracteres contrase\u00f1a en una variable, pregunte al usuario por la contrase\u00f1a hasta que introduzca la contrase\u00f1a correcta.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2210","title":"Ejercicio 2.2.10","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es un n\u00famero primo o no.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2211","title":"Ejercicio 2.2.11","text":"<p>Escribir un programa que pida al usuario una palabra y luego muestre por pantalla una a una las letras de la palabra introducida empezando por la \u00faltima.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2212","title":"Ejercicio 2.2.12","text":"<p>Escribir un programa en el que se pregunte al usuario por una frase y una letra, y muestre por pantalla el n\u00famero de veces que aparece la letra en la frase.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2213","title":"Ejercicio 2.2.13","text":"<p>Escribir un programa que muestre el eco de todo lo que el usuario introduzca hasta que el usuario escriba \u201csalir\u201d que terminar\u00e1.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2214","title":"Ejercicio 2.2.14","text":"<p>Leer n\u00fameros enteros de teclado, hasta que el usuario ingrese el 0. Finalmente, mostrar la sumatoria de todos los n\u00fameros ingresados.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2215","title":"Ejercicio 2.2.15","text":"<p>Leer n\u00fameros enteros de teclado, hasta que el usuario ingrese el 0. Finalmente, mostrar la sumatoria de todos los n\u00fameros positivos ingresados.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2216","title":"Ejercicio 2.2.16","text":"<p>Leer n\u00fameros enteros positivos de teclado, hasta que el usuario ingrese el 0. Informar cu\u00e1l fue el mayor n\u00famero ingresado.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2217","title":"Ejercicio 2.2.17","text":"<p>Leer un n\u00famero entero positivo desde teclado e imprimir la suma de los d\u00edgitos que lo componen.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2218","title":"Ejercicio 2.2.18","text":"<p>Solicitar al usuario que ingrese n\u00fameros enteros positivos y, por cada uno, imprimir la suma de los d\u00edgitos que lo componen. La condici\u00f3n de corte es que se ingrese el n\u00famero -1. Al finalizar, mostrar cu\u00e1ntos de los n\u00fameros ingresados por el usuario fueron n\u00fameros pares.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2219","title":"Ejercicio 2.2.19","text":"<p>Mostrar un men\u00fa con tres opciones: 1- comenzar programa, 2- imprimir listado, 3-finalizar programa. A continuaci\u00f3n, el usuario debe poder seleccionar una opci\u00f3n (1, 2 \u00f3 3). Si elige una opci\u00f3n incorrecta, informarle del error. El men\u00fa se debe volver a mostrar luego de ejecutada cada opci\u00f3n, permitiendo volver a elegir. Si elige las opciones 1 \u00f3 2 se imprimir\u00e1 un texto. Si elige la opci\u00f3n 3, se interrumpir\u00e1 la impresi\u00f3n del men\u00fa y el programa finalizar\u00e1.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2220","title":"Ejercicio 2.2.20","text":"<p>Solicitar al usuario el ingreso de una frase y de una letra (que puede o no estar en la frase). Recorrer la frase, car\u00e1cter a car\u00e1cter, comparando con la letra buscada. Si el car\u00e1cter no coincide, indicar que no hay coincidencia en esa posici\u00f3n (imprimiendo la posici\u00f3n) y continuar. Si se encuentra una coincidencia, indicar en qu\u00e9 posici\u00f3n se encontr\u00f3 y finalizar la ejecuci\u00f3n.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2221","title":"Ejercicio 2.2.21","text":"<p>Crear un programa que permita al usuario ingresar los montos de las compras de un cliente (se desconoce la cantidad de datos que cargar\u00e1, la cual puede cambiar en cada ejecuci\u00f3n), cortando el ingreso de datos cuando el usuario ingrese el monto 0. Si ingresa un monto negativo, no se debe procesar y se debe pedir que ingrese un nuevo monto. Al finalizar, informar el total a pagar teniendo que cuenta que, si las ventas superan el total de $1000, se le debe aplicar un 10% de descuento.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2222","title":"Ejercicio 2.2.22","text":"<p>Crear un programa que solicite el ingreso de n\u00fameros enteros positivos, hasta que el usuario ingrese el 0. Por cada n\u00famero, informar cu\u00e1ntos d\u00edgitos pares y cu\u00e1ntos impares tiene. Al finalizar, informar la cantidad de d\u00edgitos pares y de d\u00edgitos impares le\u00eddos en total.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2223","title":"Ejercicio 2.2.23","text":"<p>Crear un programa que permita al usuario ingresar t\u00edtulos de libros por teclado, finalizando el ingreso al leerse el string \u201c*\u201d (asterisco). Cada vez que el usuario ingrese un string de longitud 1 que contenga s\u00f3lo una barra (\u201c/\u201d) se considera que termina una l\u00ednea. Por cada l\u00ednea completa, informar cu\u00e1ntos d\u00edgitos num\u00e9ricos (del 0 al 9) aparecieron en total (en todos los t\u00edtulos de libros que componen en esa l\u00ednea). Finalmente, informar cu\u00e1ntas l\u00edneas completas se ingresaron. <pre><code>Ejemplo de ejecuci\u00f3n:\nLibro: Los 3 mosqueteros\nLibro: Historia de 2 ciudades\nLibro: /\nL\u00ednea completa. Aparecen 2 d\u00edgitos num\u00e9ricos.\nLibro: 20000 leguas de viaje submarino\nLibro: El se\u00f1or de los anillos\nLibro: /\nL\u00ednea completa. Aparecen 5 d\u00edgitos num\u00e9ricos.\nLibro: 20 a\u00f1os despu\u00e9s\nLibro: *\nFin. Se leyeron 2 l\u00edneas completas.\n</code></pre></p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2224","title":"Ejercicio 2.2.24","text":"<p>Escribir un programa que solicite el ingreso de una cantidad indeterminada de n\u00fameros mayores que 1, finalizando cuando se reciba un cero. Imprimir la cantidad de n\u00fameros primos ingresados.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2225","title":"Ejercicio 2.2.25","text":"<p>Solicitar al usuario que ingrese una frase y luego informar cu\u00e1l fue la palabra m\u00e1s larga (en caso de haber m\u00e1s de una, mostrar la primera) y cu\u00e1ntas palabras hab\u00eda. Precondici\u00f3n: se tomar\u00e1 como separador de palabras al car\u00e1cter \u201c \u201c (espacio), ya sea uno o m\u00e1s.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/","title":"UD 2 - P2: Iterativas","text":"<p>Salvo que se indique lo contrario, el objetivo de los ejercicios es evitar que una excepci\u00f3n llegue al programa principal y se aborte. Es decir, debes controlar cualquier evento que se pueda dar en tu progrmama. Ante cualquier duda, preg\u00fantala.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#p23-ejercicios","title":"P2.3 - Ejercicios.","text":"<p>Controla la excepciones en los programas, para que los datos introducidos sean correctos. </p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-231","title":"Ejercicio 2.3.1","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los a\u00f1os que ha cumplido (desde 1 hasta su edad).</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-232","title":"Ejercicio 2.3.2","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla todos los n\u00fameros impares desde 1 hasta ese n\u00famero separados por comas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-233","title":"Ejercicio 2.3.3","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla la cuenta atr\u00e1s desde ese n\u00famero hasta cero separados por comas. Deber\u00e1 solicitar el n\u00famero hasta introducir uno correcto. </p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-234","title":"Ejercicio 2.3.4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero, si la entrada no es correcta, mostrar\u00e1 el mensaje \"La entrada no es correcta\" y lanzar\u00e1 la excepci\u00f3n capturada.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-235","title":"Ejercicio 2.3.5","text":"<p>Escribir que solicite una contrase\u00f1a, y si no coincide con la que se tiene, lance la excepci\u00f3n <code>NameError</code> con el mensaje, \"Incorrect Password!!\" </p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/","title":"UD 2 - P2: Iterativas","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#p24-ejercicio","title":"P2.4 - Ejercicio.","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#el-algoritmo-burbuja","title":"El algoritmo burbuja","text":"<p>El algoritmo burbuja te permite ordenar valores de un array. Funciona revisando cada elemento con el elemanto adyacente. Si ambos elementos no est\u00e1n ordenados, se procede a intercambiarlos, si por el contrario los elementos ya estaban ordenados se dejan tal como estaban. Este proceso sigue para cada elemento del arreglo hasta que quede completamente ordenado.</p> <p></p> <p>Ahora, vamos a entender como podemos programar este algoritmo.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#entendiendo-el-proceso","title":"Entendiendo el proceso","text":"<p>Vamos a ordenar la lista <code>a</code> de longitud <code>n=5</code>:</p> <pre><code>a = [8, 3, 1, 19, 14]\n</code></pre> <p>El algoritmo burbuja se compone de 2 bucles, uno dentro del otro. Llamaremos \u201cbucle hijo\u201d al que se encuentra dentro del otro bucle, es decir del \u201cbucle padre\u201d. Estos nombres son solo para que entiendas.</p> <p>El \u201cbucle padre\u201d realizar\u00e1 el n\u00famero de iteraciones necesarias para ordenar la lista (las iteraciones necesarias son n-1 veces) y el \u201cbucle hijo\u201d se encargar\u00e1 de comparar cada elemento con su adyacente y ordenarlos.</p> <p>Si deseamos ordenar la lista <code>a</code>, el padre y el hijo comenzar\u00e1n recorriendo n-1 veces (es decir, 4 veces), teniendo en cuenta, que cuando el padre realice una iteraci\u00f3n, el n\u00famero de iteraciones del hijo se ir\u00e1 reduciendo: comienza con n-1-0 iteraciones, luego n-1-1 iteraciones, luego n-1-2 iteraciones\u2026</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#un-ejemplo-grafico","title":"Un ejemplo gr\u00e1fico","text":"<p>Parece muy complicado, \u00bfcierto? Analicemos esto gr\u00e1ficamente.</p> <p>En los siguientes gr\u00e1ficos, el bucle padre tiene \u00edndice \"i\" y el bucle hijo tiene el \u00edndice \"j\", y recuerda, iniciaremos ambos bucles desde la posici\u00f3n 0 hasta el 3 (casi siempre los bucles inician desde el cero). Si te das cuenta 0, 1, 2 y 3 son igualmente los 4 recorridos que buscamos.</p> <p>Pasemos al primer recorrido: </p> <p>Primer recorrido del bucle padre <code>i=0</code>: el bucle hijo con \u00edndice <code>j</code> recorre desde 0 a 3 <code>(n-1)</code>. Como se puede apreciar, cada elemento es comparado con su adyacente. Si est\u00e1n ordenados correctamente se pasa a comparar con el siguiente elemento, y si no est\u00e1n ordenados se realiza un intercambio.</p> <p></p> <p>Segundo recorrido del bucle padre <code>i=1</code>: El bucle hijo con \u00edndice <code>j</code> reduce su rango, ahora va desde 0 a 2 <code>(n-1-1)</code> y ya no se eval\u00faa el \u00faltimo elemento (el 19, de color verde) porque ya esta ordenado. Adem\u00e1s, en este recorrido se realiza solamente un intercambio y la lista queda completamente ordenada. Luego agregamos al 14 a la lista de elementos ordenados.</p> <p></p> <p>Tercer recorrido del bucle padre <code>i=2</code>: El bucle hijo con \u00edndice <code>j</code> sigue reduciendo su rango, con valores desde 0 a 1 <code>(n-1-2)</code>, porque los \u00faltimos elementos ya no se eval\u00faan (porque est\u00e1n ordenados) y se van acumulando.</p> <p>En este punto ya no existen intercambios, pero el algoritmo va a recorrer hasta i=n-1. No importa si la lista esta ordenada o no. En nuestro caso realizar\u00e1 un \u201cCuarto Recorrido\u201d, el cual es innecesario. Por este motivo existe una variaci\u00f3n de este algoritmo que evita que se hagan recorridos extra una vez que la lista ya este ordenada (en este art\u00edculo te ense\u00f1ar\u00e9 a implementar el original y la variaci\u00f3n).</p> <p> Cuarto recorrido del bucle padre <code>i=3</code>: El bucle hijo con \u00edndice <code>j</code> solo toma el valor de 0 <code>(n-1-3)</code>. Verifica que est\u00e9n ordenados correctamente y el bucle padre llega al final de su recorrido.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#practica","title":"Pr\u00e1ctica","text":"<p>Ahora que ya sabemos como funciona el algoritmo de burbuja, pasemos a la pr\u00e1ctica. Implementaci\u00f3n en Python y utiliza el debugger para asegurarte que funciona adecuadamente y entiendes su funcionamiento.</p> <p>Entrega: 1. El algoritmo implementado en src/main.py 2. Evidencia de haberlo debugueado: Capturas de pantallas con un (a) punto de ruptura establecido y el (b) valor que toman alguna variable mientras se est\u00e1 ejecutando. 3. Una evidencia de haberlo ejecutado y haber funcionado: Copia la salida por consola tras ejecutar tu programa.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/","title":"Actividad: Pr\u00e1ctica Calculadora B\u00e1sica en Python","text":"<p>ID actividad: PROG-2425-PRUEBA-U1-U2</p> <p>Agrupamiento de la actividad: Individual</p>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#descripcion","title":"Descripci\u00f3n:","text":"<p>La actividad consiste en completar y corregir el desarrollo de una calculadora \"algo especial\" en Python, aplicando los conceptos estudiados en las Unidades 1 y 2. El c\u00f3digo que deb\u00e9is analizar y modificar est\u00e1 en \"src/calculadora_alumnos.py\". Tambi\u00e9n existe una copia que no deb\u00e9is modificar, \"src/calculadora_alumnos_original.py\", es un backup del programa, por si realiz\u00e1is muchos cambios y necesit\u00e1is consultar el problema que se os propuso originalmente.</p> <p>La calculadora permitir\u00e1 realizar operaciones aritm\u00e9ticas b\u00e1sicas y deber\u00e1 cumplir con el principio de \"Separaci\u00f3n de Responsabilidades\" (SRP). Deb\u00e9is leer y analizar el c\u00f3digo provisto, corregir errores y desarrollar las partes incompletas, asegurando la gesti\u00f3n de excepciones.</p>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#objetivo","title":"Objetivo:","text":"<ul> <li>Leer y analizar la documentaci\u00f3n del c\u00f3digo para comprender su funcionamiento y aplicar correcciones o completar las partes faltantes de la aplicaci\u00f3n.</li> <li>Planificar y desarrollar un programa interactivo en Python, estructurando las funciones de manera que cada una tenga una \u00fanica responsabilidad.</li> <li>Aplicar estructuras de control condicional y bucles para resolver problemas de forma eficiente.</li> <li>Implementar el manejo de excepciones para asegurar el correcto funcionamiento del programa y prevenir errores en su ejecuci\u00f3n.</li> <li>Ejecutar pruebas unitarias para validar el comportamiento de las funciones, comprobando que cumplen con los requerimientos establecidos.</li> <li>Depurar y revisar el c\u00f3digo para mejorar su claridad, consistencia y funcionalidad, y asegurar una documentaci\u00f3n adecuada.</li> </ul>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#trabajo-a-realizar","title":"Trabajo a realizar:","text":"<ol> <li>Completar las funciones siguientes, aplicando la documentaci\u00f3n y estructura indicadas en el c\u00f3digo inicial:</li> <li>limpiar_pantalla(): Debe limpiar la pantalla seg\u00fan el sistema operativo.</li> <li>pausa(): Pausar la ejecuci\u00f3n con un mensaje.</li> <li>mostrar_error(): Muestra errores espec\u00edficos gestionando <code>IndexError</code> y otras excepciones.</li> <li>es_resultado_negativo(): Verifica si el resultado de la operaci\u00f3n debe ser negativo.</li> <li>multiplicar() y dividir(): Realizan operaciones usando solo sumas y restas.</li> <li>potencia(): Calcula el exponente de un n\u00famero usando multiplicaciones sucesivas. Soporta los operadores <code>**</code> y <code>exp</code>.</li> <li>calcular_operacion(): Llama a las funciones espec\u00edficas para realizar las operaciones aritm\u00e9ticas.</li> <li>realizar_calculo(): Permite realizar operaciones en secuencia, capturando n\u00fameros y operadores del usuario.</li> <li>sumar() y restar(): Desarrollo completo con documentaci\u00f3n para funciones que reciben dos n\u00fameros <code>float</code> y devuelven el resultado de la suma o resta de estos.</li> <li> <p>test para la funci\u00f3n es_resultado_negativo(): Crear las pruebas unitarias para comprobar el buen funcionamiento de la funci\u00f3n <code>es_resultado_negativo()</code>.</p> </li> <li> <p>Organizaci\u00f3n del C\u00f3digo y Documentaci\u00f3n:</p> </li> <li>Todos los programas deben tener la funci\u00f3n <code>main()</code> para organizar el flujo del programa.</li> <li> <p>Utilizar <code>DocStrings</code> para documentar cada funci\u00f3n. Puedes usar el formato que prefieras (Google, reStructuredText, NumPy, o Epytext).</p> </li> <li> <p>Organizaci\u00f3n del Repositorio en GitHub:</p> </li> <li>Los archivos de c\u00f3digo se encuentran ubicados en la carpeta <code>src</code>.</li> <li> <p>Las pruebas unitarias est\u00e1n en la carpeta <code>tests</code>.</p> </li> <li> <p>Pruebas Unitarias:</p> </li> <li> <p>Ejecutar pruebas unitarias para verificar el correcto funcionamiento de las funciones realizar_calculo(), multiplicar(), dividir(), potencia(), y es_resultado_negativo().</p> </li> <li> <p>IMPORTANTE: Aclaraciones sobre las operaciones de Multiplicar, Dividir y Potencia:</p> </li> <li> <p>No ser\u00e1 posible la utilizaci\u00f3n de los operadores de Python para multiplicar, dividir o realizar la exponenciaci\u00f3n de un n\u00famero. Deben ser c\u00e1lculos realizados con sumas y restas EXCLUSIVAMENTE.</p> </li> <li> <p>Habr\u00e1 que tener en cuenta el signo de los n\u00fameros con los que se realiza el c\u00e1lculo para proporcionar un resultado final correcto.</p> </li> <li> <p>Las funciones recibir\u00e1n argumentos de tipo float, pero trabajar\u00e1n internamente con los n\u00fameros convertidos a enteros, previamente realizando un redondeo:</p> <ul> <li>Si recibe un n\u00famero de 6.78, pasar\u00e1 a ser 7 para realizar los c\u00e1lculos.</li> <li>Si recibe un n\u00famero de 1.48, pasar\u00e1 a ser 1 para realizar los c\u00e1lculos.</li> </ul> </li> <li> <p>Tras lo comentado anteriormente, remarcar que las 3 funciones reciben argumentos tipo <code>float</code>, trabajan internamente solo con tipos <code>int</code> y retornan un n\u00famero tipo <code>int</code>.</p> </li> <li> <p>Para la potencia, como premisa de funcionamiento para simplificar la programaci\u00f3n, aunque lejos de la realidad matem\u00e1tica, si recibe un exponente negativo, el resultado ser\u00e1 0.</p> </li> <li> <p>Tambi\u00e9n cabe destacar que cualquier n\u00famero elevado a 0 dar\u00e1 como resultado 1.</p> </li> <li> <p>Ejemplo de c\u00e1lculo de multiplicaciones:</p> <ul> <li>17.88 x 3.44 =&gt; 18 x 3 =&gt; 18 + 18 + 18 = 54</li> <li>4.77 x -125.09 =&gt; 5 x -125 =&gt; - (125 + 125 + 125 + 125 + 125) = -625 (cuidado con el signo que previamente deb\u00e9is gestionarlo)</li> <li> <p>Para realizar las divisiones, debemos ir restando el dividendo por el divisor, mientras el resultado sea mayor que el dividendo:</p> </li> <li> <p>25.77 : 6.02 =&gt; 26 : 6 =&gt; 26 - 6 = 20; 20 - 6 = 14; 14 - 6 = 8; 8 - 6 = 2 =&gt; el resultado de la divisi\u00f3n es 4.</p> </li> <li>25.77 : -6.02 =&gt; 26 : 6 =&gt; 26 - 6 = 20; 20 - 6 = 14; 14 - 6 = 8; 8 - 6 = 2 =&gt; el resultado de la divisi\u00f3n es -4 (cuidado con el signo que previamente deb\u00e9is gestionarlo).</li> </ul> </li> <li> <p>Para realizar las potencias ser\u00e1 OBLIGATORIO el uso de la funci\u00f3n multiplicar(), que previamente habr\u00e9is desarrollado.</p> <ul> <li>2.33 ** 3.9996 =&gt; 2 ** 4 =&gt; 2 * 2 * 2 * 2 = 16.</li> <li>-2.33 ** 3.9996 =&gt; 2 ** 4 =&gt; 2 * 2 * 2 * 2 = -16 (cuidado con el signo que previamente deb\u00e9is gestionarlo).</li> <li>-2.33 ** 0 =&gt; 1.</li> <li>-2.33 ** -6 =&gt; 0.</li> </ul> </li> <li> <p>BONUS extra (opcional):</p> </li> <li>IMPORTANTE: Este cambio deb\u00e9is realizarlo en un archivo nuevo que deb\u00e9is llamar <code>calculadora_alumnos_bonus.py</code>.</li> <li> <p>De manera opcional, si termin\u00e1is todo, pod\u00e9is modificar el programa para que se muestre un men\u00fa, en vez de usar comandos en l\u00ednea. Por ejemplo:</p> <pre><code>Men\u00fa\n1. Realizar un c\u00e1lculo secuencial.\n2. Lista de operaciones disponibles para el c\u00e1lculo.\n3. Reiniciar resultado (CE).\n4. Configurar n\u00famero de decimales.\n5. Salir.\n</code></pre> <p>La opci\u00f3n 1, entrar\u00eda en el c\u00e1lculo secuencial directamente (lo que antes hac\u00edamos mediante el comando <code>calculo</code>):</p> <pre><code>## Ingrese n\u00famero, operador, 'resultado', 'cancelar' o &lt;ENTER&gt; para finalizar el c\u00e1lculo ##\n\n       (C\u00e1lculo = 0.00) &gt;&gt;\n</code></pre> <p>La opci\u00f3n 2 mostrar\u00eda las operaciones disponibles (lo que antes ejecutaba el comando <code>lista</code>). Pero solo deber\u00e1 mostrar las operaciones y comandos disponibles dentro del c\u00e1lculo secuencial (ya que los comandos <code>calculo</code>, <code>ce</code>, <code>decimales &lt;N&gt;</code> y <code>cadena vac\u00eda + &lt;ENTER&gt;</code> ya estar\u00edan integrados en el men\u00fa al realizar la modificaci\u00f3n que os solicitamos en el BONUS y su l\u00f3gica anterior debe ser eliminada):</p> <pre><code>Operaciones disponibles:\n    + =&gt; Suma\n    - =&gt; Resta\n    x o * =&gt; Multiplicaci\u00f3n\n    / o : =&gt; Divisi\u00f3n\n    ** exp =&gt; Potencia\n    cancelar =&gt; vovler sin actualizar el resultado de la calculadora\n    cadena vac\u00eda + &lt;ENTER&gt; =&gt; volver al men\u00fa actualizando el resultado de la calculadora\n</code></pre> <p>La opci\u00f3n 3 reinicia a 0 el resultado de la calculadora (lo que hac\u00eda anteriormente el comando <code>ce</code>).</p> <p>La opci\u00f3n 4 configura el n\u00famero de decimales con el que se muestra el RESULTADO almacenado de la calculadora y los c\u00e1lculos intermedios (lo que hac\u00eda anteriormente el comando <code>decimales &lt;N&gt;</code>).</p> </li> </ol>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#la-opcion-5-sale-de-la-aplicacion-lo-que-haciamos-previamente-con-cadena-vacia-enter","title":"La opci\u00f3n 5 sale de la aplicaci\u00f3n (lo que hac\u00edamos previamente con <code>cadena vac\u00eda + &lt;ENTER&gt;</code>).","text":""},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#manual-de-uso-de-la-aplicacion-explicado-con-ejemplos","title":"Manual de uso de la aplicaci\u00f3n explicado con ejemplos","text":"<ul> <li>Manual de uso de la calculadora</li> </ul>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#recursos","title":"Recursos","text":"<ul> <li>U1: Introducci\u00f3n a la programaci\u00f3n en Python.</li> <li>U2: Sentencias condicionales y repetitivas.</li> </ul>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#evaluacion-y-calificacion","title":"Evaluaci\u00f3n y calificaci\u00f3n","text":"<p>Conlleva presentaci\u00f3n: SI</p>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#rubrica-de-evaluacion","title":"R\u00fabrica de Evaluaci\u00f3n:","text":"Funci\u00f3n Dificultad (1-5) Descripci\u00f3n de la Dificultad 0 1 2 3 4 5 Criterios de Evaluaci\u00f3n Aplicables <code>limpiar_pantalla</code> 1 Desarrollo parcial. Corregir implementaci\u00f3n y gestionar las excepciones. <code>pausa</code> 1 Desarrollo completo para pausar el programa con el mensaje <code>Presione ENTER para continuar...</code> <code>mostrar_error</code> 3 Corregir errores y completar el c\u00f3digo gestionando las excepciones <code>IndexError</code> y <code>Exception</code>. RA3.d, RA3.h <code>sumar</code> 2 Desarrollo completo, incluida la documentaci\u00f3n; recibe dos n\u00fameros <code>float</code> y retorna la suma de ambos. RA3.g <code>restar</code> 2 Desarrollo completo, incluida la documentaci\u00f3n; recibe dos n\u00fameros <code>float</code> y retorna la resta de ambos. RA3.g <code>es_resultado_negativo</code> 1 Desarrollo completo. Verifica si el resultado de una operaci\u00f3n debe ser negativo. RA3.g <code>multiplicar</code> 5 Desarrollo completo. Realiza multiplicaci\u00f3n usando sumas sucesivas y ajusta el signo para el resultado. RA1.d, RA1.e, RA1.g, RA1.i, RA3.a, RA3.b, RA3.e <code>dividir</code> 5 Desarrollo completo. Realiza divisi\u00f3n usando restas sucesivas, maneja excepci\u00f3n divisi\u00f3n entre cero. RA1.d, RA1.e, RA1.g, RA1.i, RA3.a, RA3.b, RA3.e, RA3.h <code>potencia</code> 5 Desarrollo completo y documentaci\u00f3n. Calcula potencias usando multiplicaciones. RA1.d, RA1.e, RA1.g, RA1.i, RA3.a, RA3.b, RA3.e, RA3.g <code>pedir_entrada</code> 1 Desarrollo parcial para eliminar espacios por delante y por detr\u00e1s y conversi\u00f3n a min\u00fasculas. <code>calcular_operacion</code> 3 Desarrollo parcial. Realiza operaciones llamando a funciones espec\u00edficas seg\u00fan el operador. RA1.g, RA3.a <code>obtener_operaciones</code> 1 Desarrollo parcial. Devuelve una cadena con la lista de operaciones disponibles en la calculadora. <code>realizar_calculo</code> 5 Corregir errores y desarrollo parcial. Realiza el c\u00e1lculo secuencial. RA1.d, RA1.e, RA1.g, RA3.a, RA3.b, RA3.d, RA3.e <code>main</code> 5 Corrige los errores y desarrollo parcial. Organiza el flujo principal del programa. RA1.d, RA1.e, RA1.g, RA3.a, RA3.b, RA3.d, RA3.e Uso de <code>mostrar_error</code> 2 Corrige los errores y desarrollo parcial. Organiza el flujo principal del programa. Uso de <code>return</code> \u00fanico 3 Controla que cada funci\u00f3n tenga un \u00fanico <code>return</code> para simplificar el flujo y la legibilidad. RA3.c Uso de <code>constantes</code> 1 Usar adecuadamente las constantes dentro del c\u00f3digo. RA1.f C\u00e1lculo de <code>decimales</code> 2 Implementar la l\u00f3gica de actualizaci\u00f3n de las posiciones decimales del resultado y el c\u00e1lculo intermedio. <code>Pruebas unitarias</code> 5 Comprobaci\u00f3n del cumplimiento correcto de las pruebas unitarias. RA3.i Creaci\u00f3n de un <code>test</code> 2 Controla el uso de constantes predefinidas (<code>MENSAJES_ERROR</code>, <code>OPERADORES</code>) en toda la aplicaci\u00f3n. RA3.i"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>La entrega tiene que cumplir las condiciones de entrega para poder ser calificada. En caso de no cumplirlas podr\u00eda calificarse como no entregada.</p> <ul> <li>Cumple la fecha y hora de entrega.</li> <li>Entrega en GitHub Classroom: La actividad se debe entregar utilizando el assignment creado en GitHub Classroom, que est\u00e1 basado en el siguiente repositorio de plantilla: DAM-DAWB-PROG-2425_Prueba_U1-U2_Calculadora.</li> <li>El repositorio ya incluye la estructura base con carpetas como <code>src</code> y <code>tests</code>. Los estudiantes deben a\u00f1adir sus soluciones en la carpeta correspondiente.</li> <li>Aseg\u00farate de que el profesor tiene permisos para acceder a tu repositorio. Si no se puede acceder, es equivalente a no haber entregado la actividad.</li> <li>Estructura del repositorio:<ul> <li>Carpeta <code>src</code>: Contendr\u00e1 los programas correspondientes a los ejercicios solicitados.</li> <li>Carpeta <code>tests</code>: Contendr\u00e1 las pruebas unitarias para verificar el correcto funcionamiento de las soluciones.</li> <li>Carpeta <code>.github/workflows</code>: No debe eliminarse ni modificarse su contenido.</li> <li>Fichero <code>requirements.txt</code>: No debe eliminarse ni modificarse su contenido.</li> </ul> </li> <li>Id del documento a entregar: El nombre del repositorio ser\u00e1 generado autom\u00e1ticamente por GitHub Classroom, por lo que no es necesario que los estudiantes lo modifiquen.</li> </ul>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/#ten-en-cuenta","title":"Ten en cuenta","text":"<p>Custodia de tu documentaci\u00f3n:</p> <ul> <li>Es responsabilidad del alumnado la custodia y guarda de los trabajos, documentos, y cualquier otro material que realice durante las pr\u00e1cticas o en clase, por tanto, tendr\u00e1n que asegurarse que quedan a salvo siempre que abandonen el aula, no siendo responsabilidad del profesorado la perdida de este material.</li> <li>Aseg\u00farate de mantener copias seguras en servicios como Google Drive, GitHub, GitLab, Bitbucket, etc.</li> </ul> <p>Fecha y defensa de las entregas de pr\u00e1cticas/trabajos/ejercicios:</p> <ul> <li>Las pr\u00e1cticas tendr\u00e1n una fecha de entrega clara, que no se podr\u00e1 cambiar bajo ninguna circunstancia. Quedando a elecci\u00f3n del profesor posibles excepciones justificadas.</li> <li>Como norma general, la entrega consistir\u00e1 en:<ol> <li>Subida a la plataforma (por defecto) en fecha.</li> <li>Defensa en clase (si se solicita). Como regla general:<ul> <li>Los ejercicios individuales se corregir\u00e1n en clase delante del profesor, defendiendo el trabajo.</li> <li>Los ejercicios en grupo se podr\u00e1n presentar en grupo o un componente del grupo de forma aleatoria. El m\u00e9todo ser\u00e1 elegido por el profesor.Correcci\u00f3n de las actividades. Como regla general:</li> </ul> </li> </ol> </li> </ul> <p>Causas para no corregir una entrega (ejercicio, pr\u00e1ctica, examen):</p> <ul> <li>No se cumplen las condiciones de entrega.</li> <li>Se ha detectado la posibilidad de copiado de todo o parte de la prueba. Esto incluye textos (total o parcial) de internet y/o sin hacer referencia a la fuente.<ul> <li>Atenci\u00f3n OJO con Chat GPT, Copilot, etc. -&gt; Asegurate de saber que haces.</li> </ul> </li> <li>Se entrega fuera de plazo (aunque sean unos segundos).</li> <li>En caso de entrega a trav\u00e9s de GitHub:<ul> <li>A\u00f1adir en el archivo <code>README.md</code> instrucciones para compilar y ejecutar el c\u00f3digo, descripci\u00f3n de la aplicaci\u00f3n, autor\u00eda y referencias.</li> </ul> </li> <li>En caso de c\u00f3digo:<ul> <li>Si el c\u00f3digo no compila.</li> </ul> </li> </ul>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/manual_de_uso_con_ejemplos/","title":"Manual de uso - Calculadora Interactiva","text":""},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/manual_de_uso_con_ejemplos/#1-inicio-de-la-calculadora","title":"1. Inicio de la calculadora","text":"<p>Cuando se inicia el programa, se muestra el nombre de la aplicaci\u00f3n y se solicita una entrada o comando de operaci\u00f3n:</p> <pre><code>### CALCULADORA ###\n    -----------\n\nOperaci\u00f3n (RES =&gt; 0.00) &gt;&gt; \n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/manual_de_uso_con_ejemplos/#2-ver-la-lista-de-operaciones-disponibles","title":"2. Ver la lista de operaciones disponibles","text":"<p>Escribe <code>lista</code> para ver todas las operaciones que puedes realizar con esta calculadora. El sistema mostrar\u00e1 la siguiente informaci\u00f3n:</p> <pre><code>Operaci\u00f3n (RES =&gt; 0.00) &gt;&gt; lista\n\nOperaciones disponibles:\n    ce =&gt; Reiniciar resultado a 0\n    decimales &lt;n&gt; =&gt; Establecer decimales en resultado\n    cadena vac\u00eda + &lt;ENTER&gt; =&gt; Pregunta si desea salir\n    calculo =&gt; Iniciar c\u00e1lculo secuencial\n        + =&gt; Suma\n        - =&gt; Resta\n        x o * =&gt; Multiplicaci\u00f3n\n        / o : =&gt; Divisi\u00f3n\n        ** o exp =&gt; Potencia\n        cancelar =&gt; volver sin actualizar resultado de la calculadora\n        cadena vac\u00eda + &lt;ENTER&gt; =&gt; volver actualizando resultado de la calculadora\n\nPresione ENTER para continuar...\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/manual_de_uso_con_ejemplos/#3-cambiar-el-numero-de-decimales","title":"3. Cambiar el n\u00famero de decimales","text":"<p>Para configurar el n\u00famero de decimales que se mostrar\u00e1n en el resultado, ingresa <code>decimales</code> seguido del n\u00famero de decimales deseado. Ejemplo:</p> <pre><code>Operaci\u00f3n (RES =&gt; 0.00) &gt;&gt; decimales 3\nDecimales configurados a 3.\n\nPresione ENTER para continuar...\n</code></pre> <p>despu\u00e9s de pulsar ENTER, el resultado de formatear\u00e1 con tres decimales:</p> <pre><code>Operaci\u00f3n (RES =&gt; 0.000) &gt;&gt;\n</code></pre> <p>Esta configuraci\u00f3n de decimales tambi\u00e9n afectar\u00e1 a los resultados intermedios que se produzcan en los c\u00e1lculos secuenciales (dentro de la opci\u00f3n <code>calculo</code>)</p>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/manual_de_uso_con_ejemplos/#4-reiniciar-el-resultado-a-cero","title":"4. Reiniciar el resultado a cero","text":"<p>Para restablecer el valor almacenado a 0, usa el comando <code>ce</code>:</p> <pre><code>Operaci\u00f3n (RES =&gt; 18.24) &gt;&gt; ce\nResultado reiniciado a 0.\n\nPresione ENTER para continuar...\n</code></pre> <p>Despu\u00e9s de pulsar ENTER, el resultado almacenado de la calculadora ser\u00e1 0:</p> <pre><code>Operaci\u00f3n (RES =&gt; 0.00) &gt;&gt;\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/manual_de_uso_con_ejemplos/#5-secuencia-de-calculos-con-el-comando-calculo","title":"5. Secuencia de c\u00e1lculos con el comando <code>calculo</code>","text":"<p>Para iniciar una secuencia de c\u00e1lculos, escribe <code>calculo</code>:</p> <pre><code>Operaci\u00f3n (RES =&gt; 1.00) &gt;&gt; calculo\n\n## Ingrese n\u00famero, operador, 'resultado', 'cancelar' o &lt;ENTER&gt; para finalizar el c\u00e1lculo ##\n\n    (C\u00e1lculo = 0.00) &gt;&gt; 5\n    (C\u00e1lculo = 5.00) &gt;&gt; +\n    (C\u00e1lculo = 5.00) &gt;&gt; 3\n    (C\u00e1lculo = 8.00) &gt;&gt; *\n    (C\u00e1lculo = 8.00) &gt;&gt; resultado\n    (C\u00e1lculo = 8.00) &gt;&gt; ** 2\n    (C\u00e1lculo = 64.00) &gt;&gt; \n</code></pre> <p>5.1. Realizar operaciones secuenciales:     - La calculadora permite realizar c\u00e1lculos secuenciales con los operadores disponibles, como <code>+</code>, <code>-</code>, <code>x</code>, <code>*</code>, <code>/</code>, <code>:</code>, <code>**</code> o <code>exp</code>.    - En el ejemplo anterior, se ingresan 5 y se suma 3, luego se multiplica el c\u00e1lculo realizado por el valor almacenado en la calculadora (con <code>resultado</code>... observad que es 1... Operaci\u00f3n (RES =&gt; 1.00)), y finalmente se eleva al cuadrado con <code>** 2</code>.</p> <p>5.2. Opciones para terminar o cancelar la secuencia:    - Cancelar: Para salir sin actualizar el resultado final, escribe <code>cancelar</code> y presiona .    - Actualizar resultado: Deja la entrada en blanco y presiona  para finalizar y actualizar el resultado en la calculadora. <p>5.3. Ejemplo de salida al cancelar:</p> <p>Si escribimas <code>cancelar</code>:</p> <pre><code>Operaci\u00f3n (RES =&gt; 1.00) &gt;&gt; calculo\n\n## Ingrese n\u00famero, operador, 'resultado', 'cancelar' o &lt;ENTER&gt; para finalizar el c\u00e1lculo ##\n\n    (C\u00e1lculo = 0.00) &gt;&gt; 5\n    (C\u00e1lculo = 5.00) &gt;&gt; +\n    (C\u00e1lculo = 5.00) &gt;&gt; 3\n    (C\u00e1lculo = 8.00) &gt;&gt; *\n    (C\u00e1lculo = 8.00) &gt;&gt; resultado\n    (C\u00e1lculo = 8.00) &gt;&gt; ** 2\n    (C\u00e1lculo = 64.00) &gt;&gt; cancelar\nSecuencia cancelada. Resultado almacenado sin cambios.\n\nPresione ENTER para continuar...\n</code></pre> <p>Al pulsar ENTER y volver, el resultado de la calculadora no se debe haber actualizado:</p> <pre><code>Operaci\u00f3n (RES =&gt; 1.00) &gt;&gt;\n</code></pre> <p>5.3. Ejemplo de salida al terminar para actualizar el resultado:</p> <p>Si solo dejamos la entrada vac\u00eda y pulsamos ENTER:</p> <pre><code>Operaci\u00f3n (RES =&gt; 1.00) &gt;&gt; calculo\n\n## Ingrese n\u00famero, operador, 'resultado', 'cancelar' o &lt;ENTER&gt; para finalizar el c\u00e1lculo ##\n\n    (C\u00e1lculo = 0.00) &gt;&gt; 5\n    (C\u00e1lculo = 5.00) &gt;&gt; +\n    (C\u00e1lculo = 5.00) &gt;&gt; 3\n    (C\u00e1lculo = 8.00) &gt;&gt; *\n    (C\u00e1lculo = 8.00) &gt;&gt; resultado\n    (C\u00e1lculo = 8.00) &gt;&gt; ** 2\n    (C\u00e1lculo = 64.00) &gt;&gt; \n\nPresione ENTER para continuar...\n</code></pre> <p>Al pulsar ENTER y volver, el resultado de la calculadora se debe haber actualizado:</p> <pre><code>Operaci\u00f3n (RES =&gt; 64.00) &gt;&gt;\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-calculadora/alumnos/manual_de_uso_con_ejemplos/#6-salir-de-la-calculadora","title":"6. Salir de la calculadora","text":"<p>Para cerrar la aplicaci\u00f3n, ingresa una entrada vac\u00eda y presiona <code>ENTER</code>. La calculadora preguntar\u00e1 si deseas salir:</p> <pre><code>Operaci\u00f3n (RES =&gt; 64.00) &gt;&gt; \n\u00bfDesea salir de la calculadora? (s/n) s\n</code></pre> <p>Despu\u00e9s de contestar 's' y pulsar <code>ENTER</code>, se debe limpiar la consola y mostrar un mensaje de despedida, finalizando la aplicaci\u00f3n:</p> <pre><code>Bye, bye...\n</code></pre> <p>Si contesta cualquier otra cosa, limpia la pregunta y vuelve al prompt a la espera de un comando:</p> <pre><code>Operaci\u00f3n (RES =&gt; 64.00) &gt;&gt; \n\u00bfDesea salir de la calculadora? (s/n) noooo\n</code></pre> <p>Despu\u00e9s de contestar 'noooo' y pulsar <code>ENTER</code> vuelve al prompt:</p> <pre><code>Operaci\u00f3n (RES =&gt; 64.00) &gt;&gt; \n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-conversionesNumericas/alumnos/","title":"BORRADOR","text":""},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-conversionesNumericas/alumnos/#ideas-para-que-realicen-los-alumnos","title":"Ideas para que realicen los alumnos:","text":""},{"location":"section1/u02/practica/otrosRecursos/examenU1U2-conversionesNumericas/alumnos/#falta-relacionar-con-los-ra-y-ce","title":"Falta relacionar con los RA y CE...","text":"<ol> <li> <p>Unifica las funciones es_binario, es_octal, es_decimal, y es_hexadecimal, que verifican si un n\u00famero es v\u00e1lido en una base particular, en una \u00fanica funci\u00f3n m\u00e1s gen\u00e9rica que acepte la base y realice la validaci\u00f3n basada en esa entrada. </p> </li> <li> <p>Permite la conversi\u00f3n de n\u00fameros negativos. Muy simple, permitiendo n\u00fameros negativos y la conversi\u00f3n debe llevar el mismo signo negativo. Si realizas este cambio los tests unitarios funcionar\u00e1n y podr\u00e1s ver su resultado.</p> </li> <li> <p>Una vez eliminadas las funciones es_binario, es_octal, es_decimal y es_hexadecimal refactoriza la funci\u00f3n comprobar_valor_base. </p> </li> <li> <p>Corrige otros posibles errores sint\u00e1cticos que puedas observar.</p> </li> <li> <p>Ejecuta los tests unitarios y corrije los posibles errores que se produzcan.</p> </li> <li> <p>Desarrolla la funci\u00f3n dame_simbolo para que todo sea correcto.</p> </li> <li> <p>Haz que el programa solo termine cuando se introduzca ENTER en la primera pregunta, cuando se introduce la base original del n\u00famero. </p> <p>7.1. Si se introduce una cadena vac\u00eda o solo con espacios, debe realizar la pregunta \"\u00bfDesea salir del programa? (S/N) \"... si contesta \"S\", \"s\", \"  s \", \"  S  \", \"si\", \" Si\", \" S I \", \"sI\", \"s  i\" (tanto en espa\u00f1ol con \"s\" y \"si\", como en ingl\u00e9s con \"y\" y \"yes\" con cualquier combinaci\u00f3n de may\u00fasculas, min\u00fasculas y espacios entre las letras, por delante y por detr\u00e1s) terminar\u00e1 el programa, pero si contesta cualquier otra cosa continuar\u00e1.</p> <p>7.2. Cuando el programa realice una conversi\u00f3n debe mostrar el mensaje de salida o el error si se ha producido, limpiar pantalla y volver a preguntar.</p> </li> <li> <p>Cuando acabe el programa, justo antes debe mostrar un mensaje con el n\u00famero de conversiones realizadas.</p> </li> <li> <p>Cambia el c\u00f3digo para evitar que se pueda convertir un n\u00famero a la misma base num\u00e9rica de origen, es decir, no se puede convertir un n\u00famero en base decimal a la misma base decimal.</p> </li> <li> <p>Utiliza DocStrings para documentar las funciones que no est\u00e1n documentadas, las que hayas modificado si lo necesitan y las nuevas funciones desarrolladas en el c\u00f3digo explicando brevemente que hace cada una.</p> </li> <li> <p>Refactoriza el c\u00f3digo y elimina las funciones que ya no se utilizan si existe alguna que ya no se llame desde ning\u00fan luigar del c\u00f3digo, es decir, si no se utiliza.</p> </li> </ol>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/adivina_numero_oculto/","title":"Prueba de Programaci\u00f3n - Juego de \"Adivina el N\u00famero Oculto\"","text":"<p>Este repositorio contiene una prueba pr\u00e1ctica para evaluar tus habilidades de programaci\u00f3n. Debes completar un programa de consola que permite a un usuario adivinar un n\u00famero oculto mediante varias pistas. Para realizar esta tarea, utiliza la documentaci\u00f3n interna y los comentarios que se encuentran en cada funci\u00f3n.</p>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/adivina_numero_oculto/#objetivo","title":"Objetivo","text":"<p>El objetivo de la prueba es que completes las funciones del programa seg\u00fan las especificaciones y la documentaci\u00f3n interna que se te proporciona. Esto incluye manejar errores y seguir las instrucciones precisas para cada secci\u00f3n.</p>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/adivina_numero_oculto/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<p>El proyecto contiene las siguientes funciones clave, algunas de las cuales ya est\u00e1n parcialmente desarrolladas o documentadas:</p> <ul> <li><code>limpiar_pantalla()</code>: Limpia la consola seg\u00fan el sistema operativo.</li> <li><code>pausa()</code>: Realiza una pausa en el programa, ya sea por tiempo o esperando a que el usuario presione ENTER.</li> <li><code>mostrar_titulo(seccion, intentos=0)</code>: Muestra el t\u00edtulo correspondiente a una secci\u00f3n del juego.</li> <li><code>mostrar_error(msjError)</code>: Muestra un mensaje de error y pausa la ejecuci\u00f3n.</li> <li><code>evaluar_diferencia(numero, numero_oculto, frio, caliente)</code>: Eval\u00faa la distancia entre el n\u00famero ingresado y el oculto y retorna un c\u00f3digo num\u00e9rico.</li> <li><code>obtener_pista(numero, numero_oculto, intentos, frio, caliente)</code>: Proporciona una pista sobre si el n\u00famero est\u00e1 \"Fr\u00edo\", \"Caliente\" o \"Te Quemas\" y si el n\u00famero oculto es mayor o menor.</li> <li><code>pedir_numero_usuario(mensaje, minimo=None, maximo=None)</code>: Solicita al usuario un n\u00famero entero v\u00e1lido.</li> <li><code>adivina_el_numero(numero_oculto, total_intentos, minimo, maximo, frio, caliente)</code>: Gestiona el proceso de adivinaci\u00f3n permitiendo al usuario ingresar n\u00fameros.</li> <li><code>configurar_rangos_numeros()</code>, <code>configurar_pistas(minimo, maximo)</code>, <code>configurar_intentos(rango_numero_oculto)</code>: Configuran los par\u00e1metros del juego.</li> <li><code>configurar_juego()</code>: Configura todos los par\u00e1metros del juego de una vez.</li> <li><code>mostrar_configuracion()</code>, <code>mostrar_menu()</code>, <code>comprobar_opcion()</code>, <code>elegir_opcion_menu()</code>: Funciones para mostrar y gestionar el men\u00fa del juego.</li> <li><code>jugar(numero_oculto, intentos, frio, caliente)</code>: Ejecuta el proceso completo del juego y muestra los resultados al finalizar.</li> <li><code>genera_numero_oculto()</code>: Genera el n\u00famero oculto a adivinar.</li> <li><code>main()</code>: Funci\u00f3n principal que organiza el flujo completo del programa.</li> </ul>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/adivina_numero_oculto/#instrucciones-para-completar-la-prueba","title":"Instrucciones para Completar la Prueba","text":"<ol> <li>Documentaci\u00f3n y Comentarios:</li> <li>Cada funci\u00f3n incluye documentaci\u00f3n interna (<code>docstrings</code>) que describe los par\u00e1metros, el valor de retorno y notas adicionales sobre su funcionamiento.</li> <li>Lee los <code>docstrings</code> cuidadosamente para entender qu\u00e9 debe hacer cada funci\u00f3n.</li> <li> <p>Algunos comentarios indican l\u00edneas espec\u00edficas o pasos que debes completar.</p> </li> <li> <p>Uso de la Funci\u00f3n <code>mostrar_error()</code>:</p> </li> <li> <p>No uses <code>print()</code> directamente para mostrar errores. En su lugar, usa la funci\u00f3n <code>mostrar_error()</code> que ya est\u00e1 definida para este prop\u00f3sito.</p> </li> <li> <p>Funciones Clave para Completar:</p> </li> <li>Las funciones <code>limpiar_pantalla()</code>, <code>pausa()</code>, <code>mostrar_titulo()</code>, <code>evaluar_diferencia()</code>, <code>obtener_pista()</code>, <code>adivina_el_numero()</code>, y <code>configurar_*()</code> tienen tareas espec\u00edficas que debes desarrollar.</li> <li> <p>Sigue las instrucciones en los comentarios y ajusta cada funci\u00f3n seg\u00fan las especificaciones.</p> </li> <li> <p>Pruebas y Validaciones:</p> </li> <li>Aseg\u00farate de que cada funci\u00f3n cumple con su prop\u00f3sito y realiza pruebas para verificar que funcionan correctamente.</li> <li> <p>Las funciones deben manejar errores y restricciones tal como se indica en sus descripciones (por ejemplo, valores fuera del rango permitido).</p> </li> <li> <p>Sigue las Convenciones:</p> </li> <li>Mant\u00e9n el estilo y la estructura del c\u00f3digo de acuerdo a lo ya proporcionado.</li> <li>Usa variables y estructuras de control claras para facilitar la lectura y el mantenimiento del c\u00f3digo.</li> </ol>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/adivina_numero_oculto/#recomendaciones","title":"Recomendaciones","text":"<ul> <li>Prueba paso a paso: Ejecuta el programa despu\u00e9s de completar cada funci\u00f3n para verificar que el flujo general es correcto.</li> <li>Observa los detalles: Los mensajes de salida deben coincidir exactamente con lo que se pide en la documentaci\u00f3n.</li> <li>Evita modificar las funciones terminadas: Algunas funciones, como <code>pedir_numero_usuario</code>, ya est\u00e1n completas y no deben cambiarse.</li> </ul>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/adivina_numero_oculto/#ejecucion-del-programa","title":"Ejecuci\u00f3n del Programa","text":"<p>Para ejecutar el programa en tu terminal, aseg\u00farate de tener Python instalado y luego ejecuta:</p> <p>```bash python main.py</p>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/","title":"Pr\u00e1ctica: Gesti\u00f3n de operaciones financieras","text":""},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#descripcion","title":"Descripci\u00f3n:","text":"<p>En esta pr\u00e1ctica, desarrollar\u00e1s un programa que permita gestionar una serie de operaciones financieras como compras y ventas, llevar el saldo actualizado, y consultar o restablecer las transacciones realizadas. El programa se ejecutar\u00e1 en un bucle donde el usuario puede ingresar comandos para realizar las distintas operaciones y recibir retroalimentaci\u00f3n sobre el saldo actual.</p>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#objetivo-del-ejercicio","title":"Objetivo del ejercicio:","text":"<p>Implementar un programa que gestione un conjunto de comandos b\u00e1sicos de compra, venta, consulta de saldo, restablecimiento de datos y finalizaci\u00f3n del programa. El objetivo es que los estudiantes desarrollen habilidades de gesti\u00f3n de entradas de usuario, validaci\u00f3n de datos y manejo de flujos de control en Python.</p>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#estructura-del-programa","title":"Estructura del programa:","text":"<p>Debes implementar las siguientes funciones y completar la l\u00f3gica para que el programa funcione correctamente. Se proporciona la documentaci\u00f3n inicial de cada funci\u00f3n, y deber\u00e1s implementar el c\u00f3digo dentro de cada una para que el programa funcione seg\u00fan lo especificado.</p>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#funciones-a-desarrollar","title":"Funciones a desarrollar:","text":""},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#1-comprobar_importe","title":"1. <code>comprobar_importe</code>","text":"<pre><code>def comprobar_importe(valor: str) -&gt; bool:\n    \"\"\"\n    Verifica si el importe proporcionado es un n\u00famero v\u00e1lido.\n\n    Args:\n        valor (str): Cadena que representa el importe a verificar.\n\n    Returns:\n        bool: True si el valor es un n\u00famero v\u00e1lido (positivo, negativo o con punto decimal), False en caso contrario.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#2-comprobar_comando","title":"2. <code>comprobar_comando</code>","text":"<pre><code>def comprobar_comando(comando: str) -&gt; bool:\n    \"\"\"\n    Verifica si el comando est\u00e1 dentro de la lista de comandos v\u00e1lidos.\n\n    Args:\n        comando (str): Cadena que representa el comando ingresado por el usuario.\n\n    Returns:\n        bool: True si el comando est\u00e1 en la lista de comandos v\u00e1lidos, False en caso contrario.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#3-mostrar_mensaje_error","title":"3. <code>mostrar_mensaje_error</code>","text":"<pre><code>def mostrar_mensaje_error():\n    \"\"\"\n    Muestra el mensaje de error por entrada inv\u00e1lida.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#4-procesar_compra","title":"4. <code>procesar_compra</code>","text":"<pre><code>def procesar_compra(saldo: float, importe: float) -&gt; float:\n    \"\"\"\n    Procesa una operaci\u00f3n de compra y actualiza el saldo restando el importe.\n\n    Args:\n        saldo (float): El saldo actual.\n        importe (float): El importe a restar por la compra.\n\n    Returns:\n        float: El saldo actualizado despu\u00e9s de realizar la compra.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#5-procesar_venta","title":"5. <code>procesar_venta</code>","text":"<pre><code>def procesar_venta(saldo: float, importe: float) -&gt; float:\n    \"\"\"\n    Procesa una operaci\u00f3n de venta y actualiza el saldo sumando el importe.\n\n    Args:\n        saldo (float): El saldo actual.\n        importe (float): El importe a sumar por la venta.\n\n    Returns:\n        float: El saldo actualizado despu\u00e9s de realizar la venta.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#6-mostrar_saldo","title":"6. <code>mostrar_saldo</code>","text":"<pre><code>def mostrar_saldo(saldo: float, cont_compras: int, cont_ventas: int):\n    \"\"\"\n    Muestra el saldo actual junto con el n\u00famero de compras y ventas.\n\n    Args:\n        saldo (float): El saldo actual.\n        cont_compras (int): N\u00famero total de compras realizadas.\n        cont_ventas (int): N\u00famero total de ventas realizadas.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#7-resetear_saldo","title":"7. <code>resetear_saldo</code>","text":"<pre><code>def resetear_saldo(saldo: float, cont_compras: int, cont_ventas: int) -&gt; tuple[float, int, int]:\n    \"\"\"\n    Resetea el saldo y las operaciones realizadas, mostrando antes el saldo anterior.\n\n    Args:\n        saldo (float): El saldo actual.\n        cont_compras (int): N\u00famero total de compras realizadas.\n        cont_ventas (int): N\u00famero total de ventas realizadas.\n\n    Returns:\n        tuple[float, int, int]: El nuevo saldo (0), n\u00famero de compras (0) y n\u00famero de ventas (0) despu\u00e9s del reinicio.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#8-recuperar_comando_e_importe","title":"8. <code>recuperar_comando_e_importe</code>","text":"<pre><code>def recuperar_comando_e_importe(linea: str) -&gt; tuple[str, str]:\n    \"\"\"\n    Recupera el comando y, si lo hay, el importe de una l\u00ednea de entrada.\n\n    Args:\n        linea (str): L\u00ednea de texto introducida por el usuario.\n\n    Returns:\n        tuple: El comando (str o  None) y el importe (str o None).\n\n    Ejemplos:\n        &gt;&gt;&gt; recuperar_comando_e_importe(\"compra 100\")\n        ('compra', '100')\n\n        &gt;&gt;&gt; recuperar_comando_e_importe(\"saldo\")\n        ('saldo', None)\n\n        &gt;&gt;&gt; recuperar_comando_e_importe(\"\")\n        (None, None)        \n    \"\"\"\n    pass\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#detalles-del-ejercicio","title":"Detalles del ejercicio:","text":"<ol> <li>Operaciones v\u00e1lidas: Los comandos v\u00e1lidos para el programa son:</li> <li>compra [importe]: Resta el importe del saldo.</li> <li>venta [importe]: Suma el importe al saldo.</li> <li>saldo: Muestra el saldo actual junto con el n\u00famero de compras y ventas realizadas.</li> <li>reset: Restablece el saldo a cero y reinicia los contadores de compras y ventas.</li> <li> <p>fin: Finaliza el programa.</p> </li> <li> <p>Validaci\u00f3n: El programa debe validar tanto el comando como el importe proporcionado. Si no se ingresa un comando v\u00e1lido o si el importe es incorrecto, el programa debe mostrar el mensaje \"ERROR Entrada inv\u00e1lida\".</p> </li> <li> <p>Pistas para validar el importe: El importe debe ser un n\u00famero entero o decimal positivo o negativo. Utiliza la funci\u00f3n <code>comprobar_importe()</code> para realizar la validaci\u00f3n.</p> </li> <li> <p>Control del flujo: El programa debe permitir al usuario introducir tantos comandos como quiera, hasta que introduzca el comando \"fin\" para finalizar el programa.</p> </li> <li> <p>Control de compras y ventas: Cada vez que se realiza una operaci\u00f3n de compra o venta, el saldo debe actualizarse correctamente, y los contadores de compras y ventas deben incrementarse.</p> </li> </ol>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#flujo-del-programa","title":"Flujo del programa:","text":"<ol> <li>El programa comienza mostrando un prompt <code>&gt;</code> para que el usuario ingrese un comando.</li> <li>Tras introducir un comando, el programa valida si es correcto. Si el comando no es v\u00e1lido, muestra el mensaje \"ERROR Entrada inv\u00e1lida\".</li> <li>Si el comando es \"compra\" o \"venta\", valida si el importe es correcto y ajusta el saldo.</li> <li>Si el comando es \"saldo\", muestra el saldo actual junto con el n\u00famero de compras y ventas realizadas.</li> <li>Si el comando es \"reset\", muestra el saldo anterior y restablece el saldo y los contadores de compras y ventas a cero.</li> <li>El comando \"fin\" termina el programa.</li> <li>El programa debe seguir ejecut\u00e1ndose hasta que el usuario introduzca el comando \"fin\".</li> </ol>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#ejemplo-de-salida-del-programa","title":"Ejemplo de salida del programa:","text":"<pre><code>&gt; compra 100\n&gt; venta 50\n&gt; saldo\nSaldo actual = -50.00 (1 compras y 1 ventas)\n&gt; venta 200\n&gt; reset\nSaldo anterior = 150.00 (1 compras y 2 ventas)\n&gt; saldo\nSaldo actual = 0.00 (0 compras y 0 ventas)\n&gt; fin\n</code></pre>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#pistas","title":"Pistas:","text":"<ol> <li>Utiliza tipos de datos apropiados para manejar los valores de saldo e importe.</li> <li>Aseg\u00farate de validar entradas adecuadamente. Por ejemplo, si el usuario introduce un importe no num\u00e9rico, debes manejar ese caso.</li> <li>Utiliza bucles y estructuras de control para gestionar el flujo del programa.</li> </ol>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#bonus","title":"Bonus:","text":"<p>Si tienes tiempo adicional, intenta mejorar el programa a\u00f1adiendo la opci\u00f3n de \"deshacer\" la \u00faltima operaci\u00f3n realizada, devolviendo el saldo y los contadores a su estado anterior.</p>"},{"location":"section1/u02/practica/otrosRecursos/soluciones/operaciones/#ejemplo-de-salida-para-bonus-extra","title":"** Ejemplo de salida para Bonus extra:**","text":"<pre><code>&gt; compra 21000\n&gt; saldo\nSaldo actual = -21000.00 (1 compras y 0 ventas)\n&gt; deshacer\n\u00daltima operaci\u00f3n deshecha.\n&gt; saldo\nSaldo actual = 0.00 (0 compras y 0 ventas)\n&gt; \n</code></pre>"},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/","title":"UD 2 - 2.1 Sentencias Condicionales","text":"","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#21-sentencias-condicionales","title":"2.1. Sentencias Condicionales","text":"<p>Las sentencias condicionales nos permiten comprobar si una o m\u00e1s condiciones son verdaderas o falsas, y ejecutar diferentes bloques de c\u00f3digo en funci\u00f3n de los resultados. En Python, las sentencias condicionales se realizan con las palabras clave <code>if</code>, <code>elif</code> y <code>else</code>. </p> <p>Estas sentencias se repiten en muchos lenguajes de programaci\u00f3n, pero la sintaxis puede variar ligeramente. A lo largo de esta unidad, veremos c\u00f3mo funcionan las sentencias condicionales en Python y c\u00f3mo podemos utilizarlas para controlar el flujo de ejecuci\u00f3n de nuestros programas.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#1-expresiones-booleanas","title":"1. Expresiones booleanas","text":"<p>Una expresi\u00f3n booleana es aquella que puede ser verdadera (<code>True</code>) o falsa (<code>False</code>). Los ejemplos siguientes usan el operador <code>==</code>, que compara dos operandos y devuelve <code>True</code> si son iguales y <code>False</code> en caso contrario:</p> <pre><code>&gt;&gt;&gt; 5 == 5\nTrue\n&gt;&gt;&gt; 5 == 6\nFalse\n</code></pre> <p><code>True</code> y <code>False</code> son valores especiales que pertenecen al tipo <code>bool (booleano)</code>; no son cadenas:</p> <pre><code>&gt;&gt;&gt; type(True)\n&lt;class 'bool'&gt;\n&gt;&gt;&gt; type(False)\n&lt;class 'bool'&gt;\n</code></pre> <p>El operador <code>==</code> es uno de los  operadores de comparaci\u00f3n ; los dem\u00e1s son:</p> <pre><code>x != y               # x es distinto de y\nx &gt; y                # x es mayor que y\nx &lt; y                # x es menor que y\nx &gt;= y               # x es mayor o igual que y\nx &lt;= y               # x es menor o igual que y\nx is y               # x es lo mismo que y\nx is not y           # x no es lo mismo que y\n</code></pre> <p>A pesar de que estas operaciones probablemente te resulten familiares, los s\u00edmbolos en Python son diferentes de los s\u00edmbolos matem\u00e1ticos que se usan para realizar las mismas operaciones. Un error muy com\u00fan es usar s\u00f3lo un s\u00edmbolo igual (<code>=</code>) en vez del s\u00edmbolo de doble igualdad (<code>==</code>). Recuerda que <code>=</code> es un operador de asignaci\u00f3n, y <code>==</code> es un operador de comparaci\u00f3n. No existe algo como <code>=&lt;</code> o <code>=&gt;</code>.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#2-operadores-logicos","title":"2. Operadores l\u00f3gicos","text":"<p>Existen tres  operadores l\u00f3gicos : <code>and (y)</code>, <code>or (o)</code>, y <code>not (no)</code>. El significado sem\u00e1ntico de estas operaciones es similar a su significado en ingl\u00e9s. Por ejemplo,</p> <ul> <li> <p><code>x &gt; 0 and x &lt; 10</code> es verdadero s\u00f3lo cuando <code>x</code> es mayor que 0 y menor que 10.</p> </li> <li> <p><code>n%2 == 0 or n%3 == 0</code> es verdadero si cualquiera de las condiciones es verdadera, es decir, si el n\u00famero es divisible por 2 o por 3.</p> </li> </ul> <p>Finalmente, el operador <code>not</code> niega una expresi\u00f3n booleana, de modo que <code>not (x &gt; y)</code> es verdadero si <code>x &gt; y</code> es falso; es decir, si <code>x</code> es menor o igual que <code>y</code>.</p> <p>Estrictamente hablando, los operandos de los operadores l\u00f3gicos deber\u00edan ser expresiones booleanas, pero Python no es muy estricto. Cualquier n\u00famero distinto de cero se interpreta como \u201cverdadero.\u201d</p> <pre><code>&gt;&gt;&gt; 17 and True\nTrue\n</code></pre> <p>Esta flexibilidad puede ser \u00fatil, pero existen ciertas sutilezas en ese tipo de uso que pueden resultar confusas. Es posible que prefieras evitar usarlo de este modo hasta que est\u00e9s bien seguro de lo que est\u00e1s haciendo.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#3-ejecucion-condicional","title":"3. Ejecuci\u00f3n condicional","text":"<p>Para poder escribir programas \u00fatiles, casi siempre vamos a necesitar la capacidad de comprobar condiciones y cambiar el comportamiento del programa de acuerdo a ellas. Las <code>sentencias condicionales</code> nos proporcionan esa capacidad. La forma m\u00e1s sencilla es la sentencia <code>if</code>:</p> <pre><code>if x &gt; 0 :\n    print('x es positivo')\n</code></pre> <p>La expresi\u00f3n booleana despu\u00e9s de la sentencia <code>if</code> recibe el nombre de  condici\u00f3n . La sentencia <code>if</code> se finaliza con un car\u00e1cter de dos-puntos (:) y la(s) l\u00ednea(s) que van detr\u00e1s de la sentencia if van indentadas<sup>1</sup> (es decir, llevan una tabulaci\u00f3n o varios espacios en blanco al principio).</p> <p> </p> L\u00f3gica del IF <p>Si la condici\u00f3n l\u00f3gica es verdadera, la sentencia indentada ser\u00e1 ejecutada. Si la condici\u00f3n es falsa, la sentencia indentada ser\u00e1 omitida.</p> <p>La sentencia <code>if</code> tiene la misma estructura que la definici\u00f3n de funciones o los bucles <code>for</code><sup>2</sup>. La sentencia consiste en una l\u00ednea de encabezado que termina con el car\u00e1cter dos-puntos (:) seguido por un bloque indentado. Las sentencias de este tipo reciben el nombre de  sentencias compuestas , porque se extienden a lo largo de varias l\u00edneas.</p> <p>No hay l\u00edmite en el n\u00famero de sentencias que pueden aparecer en el cuerpo, pero debe haber al menos una. Ocasionalmente, puede resultar \u00fatil tener un cuerpo sin sentencias (normalmente como emplazamiento reservado para c\u00f3digo que no se ha escrito a\u00fan). En ese caso, se puede usar la sentencia <code>pass</code>, que no hace nada.</p> <pre><code>if x &lt; 0 :\n    pass          # \u00a1necesito gestionar los valores negativos!\n</code></pre> <p>Si introduces una sentencia <code>if</code> en el int\u00e9rprete de Python, el prompt cambiar\u00e1 su aspecto habitual por puntos suspensivos, para indicar que est\u00e1s en medio de un bloque de sentencias, como se muestra a continuaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; x = 3\n&gt;&gt;&gt; if x &lt; 10:\n...    print('Peque\u00f1o')\n...\nPeque\u00f1o\n&gt;&gt;&gt;\n</code></pre> <p>Al usar el int\u00e9rprete de Python, debe dejar una l\u00ednea en blanco al final de un bloque, de lo contrario Python devolver\u00e1 un error:</p> <pre><code>&gt;&gt;&gt; x = 3\n&gt;&gt;&gt; if x &lt; 10:\n...    print('Peque\u00f1o')\n... print('Hecho')\n  File \"&lt;stdin&gt;\", line 3\n    print('Hecho')\n        ^\nSyntaxError: invalid syntax\n</code></pre> <p>No es necesaria una l\u00ednea en blanco al final de un bloque de instrucciones al escribir y ejecutar un script, pero puede mejorar la legibilidad de su c\u00f3digo.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#4-ejecucion-alternativa","title":"4. Ejecuci\u00f3n alternativa","text":"<p>La segunda forma de la sentencia <code>if</code> es la  ejecuci\u00f3n alternativa , en la cual existen dos posibilidades y la condici\u00f3n determina cual de ellas ser\u00e1 ejecutada. La sintaxis es similar a \u00e9sta:</p> <pre><code>if x%2 == 0 :\n    print('x es par')\nelse :\n    print('x es impar')\n</code></pre> <p>Si al dividir <code>x</code> por 2 obtenemos como resto 0, entonces sabemos que <code>x</code> es par, y el programa muestra un mensaje a tal efecto. Si esa condici\u00f3n es falsa, se ejecuta el segundo conjunto de sentencias.</p> <p> </p> L\u00f3gica del IF-then-Else <p>Dado que la condici\u00f3n debe ser obligatoriamente verdadera o falsa, solamente una de las alternativas ser\u00e1 ejecutada. Las alternativas reciben el nombre de  ramas , dado que se trata de ramificaciones en el flujo de la ejecuci\u00f3n.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#5-condicionales-encadenados","title":"5. Condicionales encadenados","text":"<p>Algunas veces hay m\u00e1s de dos posibilidades, de modo que necesitamos m\u00e1s de dos ramas. Una forma de expresar una operaci\u00f3n como \u00e9sa es usar un  condicional encadenado :</p> <pre><code>if x &lt; y:\n    print('x es menor que y')\nelif x &gt; y:\n    print('x es mayor que y')\nelse:\n    print('x e y son iguales')\n</code></pre> <p><code>elif</code> es una abreviatura para \u201celse if\u201d. En este caso tambi\u00e9n ser\u00e1 ejecutada \u00fanicamente una de las ramas.</p> <p> </p> L\u00f3gica del IF-then-Elif <p>No hay un l\u00edmite para el n\u00famero de sentencias <code>elif</code>. Si hay una clausula <code>else</code>, debe ir al final, pero tampoco es obligatorio que \u00e9sta exista.</p> <pre><code>if choice == 'a':\n    print('Respuesta incorrecta')\nelif choice == 'b':\n    print('Respuesta correcta')\nelif choice == 'c':\n    print('Casi, pero no es correcto')\n</code></pre> <p>Cada condici\u00f3n es comprobada en orden. Si la primera es falsa, se comprueba la siguiente y as\u00ed con las dem\u00e1s. Si una de ellas es verdadera, se ejecuta la rama correspondiente, y la sentencia termina. Incluso si hay m\u00e1s de una condici\u00f3n que sea verdadera, s\u00f3lo se ejecuta la primera que se encuentra.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#6-condicionales-anidados","title":"6. Condicionales anidados","text":"<p>Un condicional puede tambi\u00e9n estar anidado dentro de otro. Podr\u00edamos haber escrito el ejemplo anterior de las tres ramas de este modo:</p> <pre><code>if x == y:\n    print('x e y son iguales')\nelse:\n    if x &lt; y:\n        print('x es menor que y')\n    else:\n        print('x es mayor que y')\n</code></pre> <p>El condicional exterior contiene dos ramas. La primera rama ejecuta una sentencia simple. La segunda contiene otra sentencia <code>if</code>, que tiene a su vez sus propias dos ramas. Esas dos ramas son ambas sentencias simples, pero podr\u00edan haber sido sentencias condicionales tambi\u00e9n.</p> <p> </p> L\u00f3gica del IF anidados <p>A pesar de que el indentado de las sentencias hace que la estructura est\u00e9 clara, los condicionales anidados pueden volverse dif\u00edciles de leer r\u00e1pidamente. En general, es buena idea evitarlos si se puede.</p> <p>Los operadores l\u00f3gicos a menudo proporcionan un modo de simplificar las sentencias condicionales anidadas. Por ejemplo, el c\u00f3digo siguiente puede ser reescrito usando un \u00fanico condicional:</p> <pre><code>if 0 &lt; x:\n    if x &lt; 10:\n        print('x es un n\u00famero positivo con un s\u00f3lo d\u00edgito')\n</code></pre> <p>La sentencia <code>print</code> se ejecuta solamente si se cumplen las dos condiciones anteriores, as\u00ed que en realidad podemos conseguir el mismo efecto con el operador <code>and</code>:</p> <pre><code>if 0 &lt; x and x &lt; 10:\n    print('x es un n\u00famero positivo con un s\u00f3lo d\u00edgito.')\n</code></pre>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#7-evaluacion-en-cortocircuito-de-expresiones-logicas","title":"7. Evaluaci\u00f3n en cortocircuito de expresiones l\u00f3gicas","text":"<p>Cuando Python est\u00e1 procesando una expresi\u00f3n l\u00f3gica, como <code>x &gt;= 2 and (x/y) &gt; 2</code>, eval\u00faa la expresi\u00f3n de izquierda a derecha. Debido a la definici\u00f3n de <code>and</code>, si <code>x</code> es menor de 2, la expresi\u00f3n <code>x &gt;= 2</code> resulta ser <code>falsa</code>, de modo que la expresi\u00f3n completa ya va a resultar <code>falsa</code>, independientemente de si <code>(x/y) &gt; 2</code> se eval\u00faa como <code>verdadera</code> o <code>falsa</code>.</p> <p>Cuando Python detecta que no se gana nada evaluando el resto de una expresi\u00f3n l\u00f3gica, detiene su evaluaci\u00f3n y no realiza el c\u00e1lculo del resto de la expresi\u00f3n. Cuando la evaluaci\u00f3n de una expresi\u00f3n l\u00f3gica se detiene debido a que ya se conoce el valor final, eso es conocido como cortocircuitar la evaluaci\u00f3n.</p> <p>A pesar de que esto pueda parecer hilar demasiado fino, el funcionamiento en cortocircuito nos descubre una ingeniosa t\u00e9cnica conocida como  patr\u00f3n guardi\u00e1n . Examina la siguiente secuencia de c\u00f3digo en el int\u00e9rprete de Python:</p> <pre><code>&gt;&gt;&gt; x = 6\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2\nTrue\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2\nFalse\n&gt;&gt;&gt; x = 6\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n&gt;&gt;&gt;\n</code></pre> <p>La tercera operaci\u00f3n ha fallado porque Python intent\u00f3 evaluar <code>(x/y)</code> e <code>y</code> era cero, lo cual provoca un runtime error (error en tiempo de ejecuci\u00f3n). Pero el segundo ejemplo no fall\u00f3, porque la primera parte de la expresi\u00f3n <code>x &gt;= 2</code> fue evaluada como <code>falsa</code>, as\u00ed que <code>(x/y)</code> no lleg\u00f3 a ejecutarse debido a la regla del  cortocircuito , y no se produjo ning\u00fan error.</p> <p>Es posible construir las expresiones l\u00f3gicas colocando estrat\u00e9gicamente una evaluaci\u00f3n como guardi\u00e1n justo antes de la evaluaci\u00f3n que podr\u00eda causar un error, como se muestra a continuaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and y != 0 and (x/y) &gt; 2\nFalse\n&gt;&gt;&gt; x = 6\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and y != 0 and (x/y) &gt; 2\nFalse\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2 and y != 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n&gt;&gt;&gt;\n</code></pre> <p>En la primera expresi\u00f3n l\u00f3gica, <code>x &gt;= 2</code> es <code>falsa</code>, as\u00ed que la evaluaci\u00f3n se detiene en el <code>and</code>. En la segunda expresi\u00f3n l\u00f3gica, <code>x &gt;= 2</code> es <code>verdadera</code>, pero <code>y != 0</code> es <code>falsa</code>, de modo que nunca se alcanza <code>(x/y)</code>.</p> <p>En la tercera expresi\u00f3n l\u00f3gica, el <code>y != 0</code> va despu\u00e9s del c\u00e1lculo de <code>(x/y)</code>, de modo que la expresi\u00f3n falla con un error.</p> <p>En la segunda expresi\u00f3n, se dice que <code>y != 0</code> act\u00faa como guardi\u00e1n para garantizar que s\u00f3lo se ejecute <code>(x/y)</code> en el caso de que <code>y</code> no sea cero.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#8-depuracion","title":"8. Depuraci\u00f3n","text":"<p>Los \u201ctraceback\u201d que Python muestra cuando se produce un error contienen un mont\u00f3n de informaci\u00f3n, pero pueden resultar abrumadores. Las partes m\u00e1s \u00fatiles normalmente son:</p> <ul> <li>Qu\u00e9 tipo de error se ha producido, y    </li> <li>D\u00f3nde ha ocurrido.</li> </ul> <p>Los errores de sintaxis (syntax errors), normalmente son f\u00e1ciles de localizar, pero a veces tienen trampa. Los errores debido a espacios en blanco pueden ser complicados, ya que los espacios y las tabulaciones son invisibles, y solemos ignorarlos.</p> <pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt;  y = 6\n  File \"&lt;stdin&gt;\", line 1\n    y = 6\n    ^\nIndentationError: unexpected indent\n</code></pre> <p>En este ejemplo, el problema es que la segunda l\u00ednea est\u00e1 indentada por un espacio. Pero el mensaje de error apunta a <code>y</code>, lo cual resulta enga\u00f1oso. En general, los mensajes de error indican d\u00f3nde se ha descubierto el problema, pero el error real podr\u00eda estar en el c\u00f3digo previo, a veces en alguna l\u00ednea anterior.</p> <p>Ocurre lo mismo con los errores en tiempo de ejecuci\u00f3n (runtime errors). Sup\u00f3n que est\u00e1s tratando de calcular una relaci\u00f3n se\u00f1al-ruido en decibelios. La f\u00f3rmula es SNR*<sub>db</sub>=10log <sub>10</sub> ( P<sub>senal</sub> / P <sub>ruido</sub> ). En Python, podr\u00edas escribir algo como esto:</p> <pre><code>import math\nint_senal = 9\nint_ruido = 10\nrelacion = int_senal / int_ruido\ndecibelios = 10 * math.log10(relacion)\nprint(decibelios)\n\n# C\u00f3digo: https://es.py4e.com/code3/snr.py\n</code></pre> <p>Pero cuando lo haces funcionar, obtienes un mensaje de error<sup>3</sup>:</p> <pre><code>    Traceback (most recent call last):\n      File \"snr.py\", line 5, in ?\n        decibelios = 10 * math.log10(relacion)\n    OverflowError: math range error\n</code></pre> <p>El mensaje de error apunta a la l\u00ednea 5, pero no hay nada incorrecto en ese l\u00ednea. Para encontrar el error real, puede resultar \u00fatil mostrar en pantalla el valor de <code>relacion</code>, que resulta ser 0. El problema est\u00e1 en la l\u00ednea 4, ya que al dividir dos enteros se realiza una divisi\u00f3n entera. La soluci\u00f3n es representar la intensidad de la se\u00f1al y la intensidad del ruido con valores en punto flotante.</p> <p>En general, los mensajes de error te dicen d\u00f3nde se ha descubierto el problema, pero a menudo no es ah\u00ed exactamente donde se ha producido.</p>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Aprende con Alf</li> <li>Python para todos</li> </ul>","tags":["Software","Sentencias condicionales"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/","title":"UD 2 - 2.2 Sentencias Iterativas y salto","text":"","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#22-sentencias-iterativas","title":"2.2. Sentencias Iterativas","text":"<p>Las sentencias iterativas o bucles permiten ejecutar un bloque de c\u00f3digo varias veces. En Python, existen dos tipos de bucles: <code>for</code> y <code>while</code>. Estas setencias nos las encontramos en la mayor\u00eda de los lenguajes de programaci\u00f3n y son fundamentales para la programaci\u00f3n. Por ejemplo, en otros lenguajes de programaci\u00f3n, como C, C++, Java, kotlin ,etc., nos las encontramos, y ademas tambi\u00e9n se utilizan las sentencias <code>do-while</code>, pero en Python no existe esta sentencia.</p> <p>A lo largo de esta unidad, veremos c\u00f3mo se utilizan estas sentencias en Python, y c\u00f3mo se pueden combinar con otras sentencias de control de flujo, como <code>break</code>, <code>continue</code>, <code>pass</code>, etc.</p> <p>Antes de comenzar con las sentencias iterativas, vamos a recordar conceptos b\u00e1sicos de programaci\u00f3n como son las sentencias de asignaci\u00f3n de valores a las variables. Ya que en muchos casos, los bucles se utilizan para realizar operaciones repetitivas sobre variables, y es importante la inicializaci\u00f3n y actualizaci\u00f3n de las mismas.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#1-actualizacion-de-variables","title":"1. Actualizaci\u00f3n de variables","text":"<p>Uno de los usos habituales de las sentencias de asignaci\u00f3n consiste en realizar una actualizaci\u00f3n sobre una variable \u2013 en la cual el valor nuevo de esa variable depende del antiguo.</p> <pre><code>x = x + 1\n</code></pre> <p>Esto quiere decir \u201ctoma el valor actual de <code>x</code>, a\u00f1\u00e1dele 1, y luego actualiza <code>x</code> con el nuevo valor\u201d.</p> <p>Si intentas actualizar una variable que no existe, obtendr\u00e1s un error, ya que Python eval\u00faa el lado derecho antes de asignar el valor a <code>x</code>:</p> <pre><code>&gt;&gt;&gt; x = x + 1\nNameError: name 'x' is not defined\n</code></pre> <p>Antes de que puedas actualizar una variable, debes inicializarla, normalmente mediante una simple asignaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; x = x + 1\n</code></pre> <p>Actualizar una variable a\u00f1adi\u00e9ndole 1 se denomina incrementar; restarle 1 recibe el nombre de decrementar (o disminuir).</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#2-bucles-mediante-la-sentencia-while","title":"2. Bucles mediante la sentencia <code>while</code>","text":"<p>Los ordenadores, m\u00f3viles, tables, etc se suelen utilizar a menudo para automatizar tareas repetitivas. Repetir tareas id\u00e9nticas o muy similares sin cometer errores es algo que a las m\u00e1quinas se les da bien y en cambio a las personas no. Como las iteraciones resultan tan habituales, Python y la mayor\u00eda de los lenguajes de programaci\u00f3n proporcionan varias caracter\u00edsticas para hacer m\u00e1s sencillas programar estas tareas..</p> <p>Una forma de iteraci\u00f3n en Python es la sentencia <code>while</code>. He aqu\u00ed un programa sencillo que cuenta hacia atr\u00e1s desde cinco y luego dice \u201c\u00a1Despegue!\u201d.</p> <pre><code>n = 5\nwhile n &gt; 0:\n    print(n)\n    n = n - 1\nprint('\u00a1Despegue!')\n</code></pre> <p>Casi se puede leer la sentencia <code>while</code> como si estuviera escrita en ingl\u00e9s. Significa, \u201cMientras <code>n</code> sea mayor que 0, muestra el valor de <code>n</code> y luego reduce el valor de <code>n</code> en 1 unidad. Cuando llegues a 0, sal de la sentencia <code>while</code> y muestra la palabra <code>\u00a1Despegue!</code>\u201d</p> <p>\u00c9ste es el flujo de ejecuci\u00f3n de la sentencia <code>while</code>, explicado de un modo m\u00e1s formal:</p> <ol> <li>Se eval\u00faa la condici\u00f3n, obteniendo <code>Verdadero</code> or <code>Falso</code>.    </li> <li>Si la condici\u00f3n es falsa, se sale de la sentencia <code>while</code> y se contin\u00faa la ejecuci\u00f3n en la siguiente sentencia.     </li> <li>Si la condici\u00f3n es verdadera, se ejecuta el cuerpo del <code>while</code> y luego se vuelve al paso 1.     </li> </ol> <p>Este tipo de flujo recibe el nombre de bucle, ya que el tercer paso enlaza de nuevo con el primero. Cada vez que se ejecuta el cuerpo del bucle se dice que realizamos una iteraci\u00f3n. Para el bucle anterior, podr\u00edamos decir que \u201cha tenido cinco iteraciones\u201d, lo que significa que el cuerpo del bucle se ha ejecutado cinco veces.</p> <p>El cuerpo del bucle debe cambiar el valor de una o m\u00e1s variables, de modo que la condici\u00f3n pueda en alg\u00fan momento evaluarse como falsa y el bucle termine. La variable que cambia cada vez que el bucle se ejecuta y controla cu\u00e1ndo termina \u00e9ste, recibe el nombre de variable de iteraci\u00f3n. Si no hay variable de iteraci\u00f3n, el bucle se repetir\u00e1 para siempre, resultando as\u00ed un bucle infinito.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#21-bucles-infinitos","title":"2.1. Bucles infinitos","text":"<p>Una fuente de diversi\u00f3n sin fin para los programadores es la constataci\u00f3n de que las instrucciones del champ\u00fa: \u201cEnjabone, aclare, repita\u201d, son un bucle infinito, ya que no hay una variable de iteraci\u00f3n que diga cu\u00e1ntas veces debe ejecutarse el proceso.</p> <p>En el caso de una <code>cuenta atr\u00e1s</code>, podemos verificar que el bucle termina, ya que sabemos que el valor de <code>n</code> es finito, y podemos ver que ese valor se va haciendo m\u00e1s peque\u00f1o cada vez que se repite el bucle, de modo que en alg\u00fan momento llegar\u00e1 a 0. Otras veces un bucle es obviamente infinito, porque no tiene ninguna variable de iteraci\u00f3n.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#221-bucles-infinitos-y-break","title":"2.2.1. \u201cBucles infinitos\u201d y <code>break</code>","text":"<p>A veces no se sabe si hay que terminar un bucle hasta que se ha recorrido la mitad del cuerpo del mismo. En ese caso se puede crear un bucle infinito a prop\u00f3sito y usar la sentencia <code>break</code> para salir fuera de \u00e9l cuando se desee, aunque no es aconsejable puesto que podemos poner la condici\u00f3n de salida en la evaluaci\u00f3n del <code>while</code>.</p> <p>El bucle siguiente es, obviamente, un bucle infinito, porque la expresi\u00f3n l\u00f3gica de la sentencia <code>while</code> es simplemente la constante l\u00f3gica <code>True (verdadero)</code>;</p> <pre><code>n = 10\nwhile True:\n    print(n, end=' ')\n    n = n - 1\nprint('\u00a1Terminado!')\n</code></pre> <p>Si cometes el error de ejecutar este c\u00f3digo, aprender\u00e1s r\u00e1pidamente c\u00f3mo detener un proceso de Python bloqueado en el sistema, o tendr\u00e1s que localizar d\u00f3nde se encuentra el bot\u00f3n de apagado de tu equipo. Este programa funcionar\u00e1 para siempre, o hasta que la bater\u00eda del equipo se termine, ya que la expresi\u00f3n l\u00f3gica al principio del bucle es siempre cierta, en virtud del hecho de que esa expresi\u00f3n es precisamente el valor constante <code>True</code>.</p> <p>A pesar de que en este caso se trata de un bucle infinito in\u00fatil, se puede usar ese dise\u00f1o para construir bucles \u00fatiles, siempre que se tenga la precauci\u00f3n de a\u00f1adir c\u00f3digo en el cuerpo del bucle para salir expl\u00edcitamente, usando <code>break</code> cuando se haya alcanzado la condici\u00f3n de salida.</p> <p>Por ejemplo, sup\u00f3n que quieres recoger entradas de texto del usuario hasta que \u00e9ste escriba <code>fin</code>. Podr\u00edas escribir:</p> <pre><code>while True:\n    linea = input('&gt; ')\n    if linea == 'fin':\n        break\n    print(linea)\nprint('\u00a1Terminado!')\n\n# C\u00f3digo: https://es.py4e.com/code3/copytildone1.py\n</code></pre> <p>La condici\u00f3n del bucle es <code>True</code>, lo cual es verdadero siempre, as\u00ed que el bucle se repetir\u00e1 hasta que se ejecute la sentencia break.</p> <p>Cada vez que se entre en el bucle, se pedir\u00e1 una entrada al usuario. Si el usuario escribe <code>fin</code>, la sentencia <code>break</code> har\u00e1 que se salga del bucle. En cualquier otro caso, el programa repetir\u00e1 cualquier cosa que el usuario escriba y volver\u00e1 al principio del bucle. \u00c9ste es un ejemplo de su funcionamiento:</p> <p><pre><code>&gt; hola a todos\nhola a todos\n&gt; he terminado\nhe terminado\n&gt; fin\n\u00a1Terminado!\n</code></pre> Es importante tener en cuenta que la sentencia <code>break</code> s\u00f3lo afecta al bucle m\u00e1s interno en el que se encuentra. Si se utiliza en un bucle anidado, s\u00f3lo se saldr\u00e1 del bucle en el que se encuentra. El bucle exterior continuar\u00e1 ejecut\u00e1ndose.</p> <p>En este ciclo vamos a evitar el uso del break, ya que no es una buena pr\u00e1ctica, y vamos a utilizar una condici\u00f3n en la evaluaci\u00f3n del <code>while</code> para salir del bucle. De esta forma nos acostumbramos a utilizar la estructura de control de flujo de forma correcta. En un futuro, cuando tu crezcas como programador, tendr\u00e1s tu propio criterio para utilizar o no utilizar el <code>break</code>. </p> <p>\u00bfC\u00f3mo lo har\u00edas sin usar <code>while True:</code> y <code>break</code>?</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#22-finalizar-iteraciones-con-continue","title":"2.2. Finalizar iteraciones con <code>continue</code>","text":"<p>Algunas veces, estando dentro de un bucle se necesita terminar con la iteraci\u00f3n actual y saltar a la siguiente de forma inmediata. En ese caso se puede utilizar la sentencia <code>continue</code> para pasar a la siguiente iteraci\u00f3n sin terminar la ejecuci\u00f3n del cuerpo del bucle para la actual.</p> <p>A continuaci\u00f3n se muestra un ejemplo de un bucle que repite lo que recibe como entrada hasta que el usuario escribe \u201cfin\u201d, pero trata las l\u00edneas que empiezan por el car\u00e1cter almohadilla como l\u00edneas que no deben mostrarse en pantalla (algo parecido a lo que hace Python con los comentarios).</p> <pre><code>while True:\n    linea = input('&gt; ')\n    if linea[0] == '#' :\n        continue\n    if linea == 'fin':\n        break\n    print(linea)\nprint('\u00a1Terminado!')\n\n# C\u00f3digo: https://es.py4e.com/code3/copytildone2.py\n</code></pre> <p>He aqu\u00ed una ejecuci\u00f3n de ejemplo de ese nuevo programa con la sentencia <code>continue</code> a\u00f1adida.</p> <pre><code>&gt; hola a todos\nhola a todos\n&gt; # no imprimas esto\n&gt; \u00a1imprime esto!\n\u00a1imprime esto!\n&gt; fin\n\u00a1Terminado!\n</code></pre> <p>Todas las l\u00edneas se imprimen en pantalla, excepto la que comienza con el s\u00edmbolo de almohadilla, ya que en ese caso se ejecuta <code>continue</code>, finaliza la iteraci\u00f3n actual y salta de vuelta a la sentencia <code>while</code> para comenzar la siguiente iteraci\u00f3n, de modo que que se omite la sentencia <code>print</code>.</p> <p>Al igual que hemos dicho con el break, en este ciclo vamos a evitar el uso del <code>continue</code>, ya que no es una buena pr\u00e1ctica, y vamos a utilizar una condici\u00f3n en la evaluaci\u00f3n de que sentencias queremos ejecutar. De esta forma nos acostumbramos a utilizar la estructura de control de flujo de forma correcta. En un futuro, cuando tu crezcas como programador, tendr\u00e1s tu propio criterio para utilizar o no utilizar el <code>continue</code>.</p> <p>\u00bfC\u00f3mo lo har\u00edas sin usar <code>while True:</code>, <code>break</code>, <code>continue</code>?</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#3-bucles-definidos-usando-for","title":"3. Bucles definidos usando <code>for</code>","text":"<p>A veces se desea repetir un bucle a trav\u00e9s de un conjunto de cosas, como una lista de palabras, las l\u00edneas de un archivo, o una lista de n\u00fameros. Cuando se tiene una lista de cosas para recorrer, se puede construir un bucle definido usando una sentencia <code>for</code>. A la sentencia <code>while</code> se la llama un bucle  indefinido, porque simplemente se repite hasta que cierta condici\u00f3n se hace <code>Falsa</code>, mientras que el bucle <code>for</code> se repite a trav\u00e9s de un conjunto conocido de elementos, de modo que ejecuta tantas iteraciones como elementos hay en el conjunto.</p> <p>La sintaxis de un bucle <code>for</code> es similar a la del bucle <code>while</code>, en ella hay una sentencia <code>for</code> y un cuerpo que se repite:</p> <pre><code>amigos = ['Joseph', 'Glenn', 'Sally']\nfor amigo in amigos:\n    print('Feliz a\u00f1o nuevo:', amigo)\nprint('\u00a1Terminado!')\n</code></pre> <p>En t\u00e9rminos de Python, la variable <code>amigos</code> es una lista<sup>1</sup> de tres cadenas y el bucle <code>for</code> se mueve recorriendo la lista y ejecuta su cuerpo una vez para cada una de las tres cadenas en la lista, produciendo esta salida:</p> <pre><code>Feliz a\u00f1o nuevo: Joseph\nFeliz a\u00f1o nuevo: Glenn\nFeliz a\u00f1o nuevo: Sally\n\u00a1Terminado!\n</code></pre> <p>La traducci\u00f3n de este bucle <code>for</code> al espa\u00f1ol no es tan directa como en el caso del <code>while</code>, pero si piensas en los amigos como un conjunto, ser\u00eda algo as\u00ed como: \u201cEjecuta las sentencias en el cuerpo del bucle una vez para (for) cada amigo que est\u00e9 en (in) el conjunto llamado amigos.\u201d</p> <p>Revisando el bucle <code>for</code>, for e in son palabras reservadas de Python, mientras que <code>amigo</code> y <code>amigos</code> son variables.</p> <pre><code>for amigo in amigos:\n    print('Feliz a\u00f1o nuevo::', amigo)\n</code></pre> <p>En concreto, <code>amigo</code> es la variable de iteraci\u00f3n para el bucle <code>for</code>. La variable <code>amigo</code> cambia para cada iteraci\u00f3n del bucle y controla cu\u00e1ndo se termina el bucle <code>for</code>. La variable de iteracion se desplaza sucesivamente a trav\u00e9s de las tres cadenas almacenadas en la variable <code>amigos</code>.</p> <p>Otra forma de usar los bucles <code>for</code> es haciendo uso de la instrucci\u00f3n <code>range</code>:</p> <ul> <li><code>range(fin)</code> : Genera una secuencia de n\u00fameros enteros desde 0 hasta <code>fin-1</code>.</li> <li><code>range(inicio, fin, salto)</code> : Genera una secuencia de n\u00fameros enteros desde <code>inicio</code> hasta <code>fin-1</code> con un incremento de <code>salto</code>.</li> </ul> <pre><code>&gt;&gt;&gt; for i in range(1, 10, 2):\n...     print(i, end=\", \")\n...\n1, 3, 5, 7, 9, &gt;&gt;&gt;\n</code></pre>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#4-disenos-de-bucles","title":"4. Dise\u00f1os de bucles","text":"<p>A menudo se usa un bucle <code>for</code> o <code>while</code> para movernos a trav\u00e9s de una lista de elementos o el contenido de un archivo y se busca algo, como el valor m\u00e1s grande o el m\u00e1s peque\u00f1o de los datos que estamos revisando.</p> <p>Los bucles generalmente se construyen as\u00ed:</p> <ul> <li>Se inicializan una o m\u00e1s variables antes de que el bucle comience   </li> <li>Se realiza alguna operaci\u00f3n con cada elemento en el cuerpo del bucle, posiblemente cambiando las variables dentro de ese cuerpo.    </li> <li>Se revisan las variables resultantes cuando el bucle se completa    </li> </ul> <p>Usaremos ahora una lista de n\u00fameros para demostrar los conceptos y construcci\u00f3n de estos dise\u00f1os de bucles.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#41-bucles-de-recuento-y-suma","title":"4.1. Bucles de recuento y suma","text":"<p>Por ejemplo, para contar el n\u00famero de elementos en una lista, podemos escribir el siguiente bucle <code>for</code>:</p> <pre><code>contador = 0\nfor valor in [3, 41, 12, 9, 74, 15]:\n    contador = contador + 1\nprint('Num. elementos: ', contador)\n</code></pre> <p>Ajustamos la variable <code>contador</code> a cero antes de que el bucle comience, despu\u00e9s escribimos un bucle <code>for</code> para movernos a trav\u00e9s de la lista de n\u00fameros. Nuestra variable de iteraci\u00f3n se llama <code>valor</code>, y dado que no usamos <code>valor</code> dentro del bucle, lo \u00fanico que hace es controlar el bucle y hacer que el cuerpo del mismo sea ejecutado una vez para cada uno de los valores de la lista.</p> <p>En el cuerpo del bucle, a\u00f1adimos 1 al valor actual de <code>contador</code> para cada uno de los valores de la lista. Mientras el bucle se est\u00e1 ejecutando, el valor de <code>contador</code> es la cantidad de valores que se hayan visto \u201chasta ese momento\u201d.</p> <p>Una vez el bucle se completa, el valor de <code>contador</code> es el n\u00famero total de elementos. El n\u00famero total \u201ccae en nuestro poder\u201d al final del bucle. Se construye el bucle de modo que obtengamos lo que queremos cuando \u00e9ste termina.</p> <p>Otro bucle similar, que calcula el total de un conjunto de n\u00fameros, se muestra a continuaci\u00f3n:</p> <pre><code>total = 0\nfor valor in [3, 41, 12, 9, 74, 15]:\n    total = total + valor\nprint('Total: ', total)\n</code></pre> <p>En este bucle, s\u00ed utilizamos la variable de iteraci\u00f3n. En vez de a\u00f1adir simplemente uno a <code>contador</code> como en el bucle previo, ahora durante cada iteraci\u00f3n del bucle a\u00f1adimos el n\u00famero actual (3, 41, 12, etc.) al total en ese momento. Si piensas en la variable <code>total</code>, \u00e9sta contiene la \u201csuma parcial de valores hasta ese momento\u201d. As\u00ed que antes de que el bucle comience, <code>total</code> es cero, porque a\u00fan no se ha examinado ning\u00fan valor. Durante el bucle, <code>total</code> es la suma parcial, y al final del bucle, <code>total</code> es la suma total definitiva de todos los valores de la lista.</p> <p>Cuando el bucle se ejecuta, <code>total</code> acumula la suma de los elementos; una variable que se usa de este modo recibe a veces el nombre de acumulador.</p> <p>Ni el bucle que cuenta los elementos ni el que los suma resultan particularmente \u00fatiles en la pr\u00e1ctica, dado que existen las funciones internas <code>len()</code> y <code>sum()</code> que cuentan el n\u00famero de elementos de una lista y el total de elementos en la misma respectivamente.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#42-bucles-de-maximos-y-minimos","title":"4.2. Bucles de m\u00e1ximos y m\u00ednimos","text":"<p>Para encontrar el valor mayor de una lista o secuencia, construimos el bucle siguiente:</p> <pre><code>mayor = None\nprint('Antes:', mayor)\nfor valor in [3, 41, 12, 9, 74, 15]:\n    if mayor is None or valor &gt; mayor :\n        mayor = valor\n    print('Bucle:', valor, mayor)\nprint('Mayor:', mayor)\n</code></pre> <p>Cuando se ejecuta el programa, se obtiene la siguiente salida:</p> <pre><code>Antes: None\nBucle: 3 3\nBucle: 41 41\nBucle: 12 41\nBucle: 9 41\nBucle: 74 74\nBucle: 15 74\nMayor: 74\n</code></pre> <p>Debemos pensar en la variable <code>mayor</code> como el \u201cmayor valor visto hasta ese momento\u201d. Antes del bucle, asignamos a <code>mayor</code> el valor <code>None</code>. <code>None</code> es un valor constante especial que se puede almacenar en una variable para indicar que la variable est\u00e1 \u201cvac\u00eda\u201d.</p> <p>Antes de que el bucle comience, el mayor valor visto hasta entonces es <code>None</code>, dado que no se ha visto a\u00fan ning\u00fan valor. Durante la ejecuci\u00f3n del bucle, si <code>mayor</code> es <code>None</code>, entonces tomamos el primer valor que tenemos como el mayor hasta entonces. Se puede ver en la primera iteraci\u00f3n, cuando el valor de <code>valor</code> es 3, mientras que <code>mayor</code> es <code>None</code>, inmediatamente hacemos que <code>mayor</code> pase a ser 3.</p> <p>Tras la primera iteraci\u00f3n, <code>mayor</code> ya no es <code>None</code>, as\u00ed que la segunda parte de la expresi\u00f3n l\u00f3gica compuesta que comprueba si <code>valor &gt; mayor</code> se activar\u00e1 s\u00f3lo cuando encontremos un valor que sea mayor que el \u201cmayor hasta ese momento\u201d. Cuando encontramos un nuevo valor \u201cmayor a\u00fan\u201d, tomamos ese nuevo valor para <code>mayor</code>. Se puede ver en la salida del programa que <code>mayor</code> pasa desde 3 a 41 y luego a 74.</p> <p>Al final del bucle, se habr\u00e1n revisado todos los valores y la variable <code>mayor</code> contendr\u00e1 entonces el mayor valor de la lista.</p> <p>Para calcular el n\u00famero m\u00e1s peque\u00f1o, el c\u00f3digo es muy similar con un peque\u00f1o cambio:</p> <pre><code>print('Antes:', menor)\nfor valor in [3, 41, 12, 9, 74, 15]:\n    if menor is None or valor &lt; menor:\n        menor = valor\n    print('Bucle:', valor, menor)\nprint('Menor:', menor)\n</code></pre> <p>De nuevo, <code>menor</code> es el \u201cmenor hasta ese momento\u201d antes, durante y despu\u00e9s de que el bucle se ejecute. Cuando el bucle se ha completado, <code>menor</code> contendr\u00e1 el valor m\u00ednimo de la lista</p> <p>Tambi\u00e9n como en el caso del n\u00famero de elementos y de la suma, las funciones internas <code>max()</code> y <code>min()</code> convierten la escritura de este tipo de bucles en innecesaria.</p> <p>Lo siguiente es una versi\u00f3n simple de la funci\u00f3n interna de Python <code>min()</code>:</p> <pre><code>def min(valores):\n    menor = None\n    for valor in valores:\n        if menor is None or valor &lt; menor:\n            menor = valor\n    return menor\n</code></pre> <p>En esta versi\u00f3n de la funci\u00f3n para calcular el m\u00ednimo, hemos eliminado las sentencias <code>print</code>, de modo que sea equivalente a la funci\u00f3n <code>min</code>, que ya est\u00e1 incorporada dentro de Python.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#5-depuracion","title":"5. Depuraci\u00f3n","text":"<p>A medida que vayas escribiendo programas m\u00e1s grandes, puede que notes que vas necesitando emplear cada vez m\u00e1s tiempo en depurarlos. M\u00e1s c\u00f3digo significa m\u00e1s oportunidades de cometer un error y m\u00e1s lugares donde los bugs pueden esconderse.</p> <p>Un m\u00e9todo para acortar el tiempo de depuraci\u00f3n es \u201cdepurar por bisecci\u00f3n\u201d. Por ejemplo, si hay 100 l\u00edneas en tu programa y las compruebas de una en una, te llevar\u00e1 100 pasos.</p> <p>En lugar de eso, intenta partir el problema por la mitad. Busca en medio del programa, o cerca de ah\u00ed, un valor intermedio que puedas comprobar. A\u00f1ade una sentencia <code>print</code> (o alguna otra cosa que tenga un efecto verificable), y haz funcionar el programa.</p> <p>Si en el punto medio la verificaci\u00f3n es incorrecta, el problema deber\u00eda estar en la primera mitad del programa. Si \u00e9sta es correcta, el problema estar\u00e1 en la segunda mitad.</p> <p>Cada vez que realices una comprobaci\u00f3n como esta, reduces a la mitad el n\u00famero de l\u00edneas en las que buscar. Despu\u00e9s de seis pasos (que son muchos menos de 100), lo habr\u00e1s reducido a una o dos l\u00edneas de c\u00f3digo, al menos en teor\u00eda.</p> <p>En la pr\u00e1ctica no siempre est\u00e1 claro qu\u00e9 es \u201cen medio del programa\u201d, y no siempre es posible colocar ah\u00ed una verificaci\u00f3n. No tiene sentido contar las l\u00edneas y encontrar el punto medio exacto. En lugar de eso, piensa en lugares del programa en los cuales pueda haber errores y en lugares donde resulte f\u00e1cil colocar una comprobaci\u00f3n. Luego elige un sitio donde estimes que las oportunidades de que el bug est\u00e9 por delante y las de que est\u00e9 por detr\u00e1s de esa comprobaci\u00f3n son m\u00e1s o menos las mismas.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#actividades","title":"Actividades","text":"<p>Actividad 1: Escribe un programa que lea repetidamente n\u00fameros hasta que el usuario introduzca \u201cfin\u201d. Una vez se haya introducido \u201cfin\u201d, muestra por pantalla el total, la cantidad de n\u00fameros y la media de esos n\u00fameros. Si el usuario introduce cualquier otra cosa que no sea un n\u00famero, (mas adelante veremos como detectar los fallos usando <code>try</code> y <code>except</code>)</p> <pre><code>Introduzca un n\u00famero: 4\nIntroduzca un n\u00famero: 5\nIntroduzca un n\u00famero: dato err\u00f3neo\nEntrada inv\u00e1lida\nIntroduzca un n\u00famero: 7\nIntroduzca un n\u00famero: fin\n16 3 5.33333333333\n</code></pre> <p>Actividad 2: Escribe otro programa que pida una lista de n\u00fameros como la anterior y al final muestre por pantalla el m\u00e1ximo y m\u00ednimo de los n\u00fameros, en vez de la media.</p>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Aprende con Alf</li> <li>Python para todos</li> </ul>","tags":["Software","Sentencias iterativas"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/","title":"UD 2 - 2.3 Captura de excepciones","text":"","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#23-captura-de-excepciones","title":"2.3. Captura de excepciones","text":"<p>Las excepciones y los errores son dos conceptos fundamentales en programaci\u00f3n, pero tienen significados distintos.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#1-diferencia-entre-errores-y-excepciones","title":"1. Diferencia entre errores y excepciones","text":"<p>La principal diferencia entre errores y excepciones radica en su naturaleza y c\u00f3mo afectan el flujo de ejecuci\u00f3n del programa. Los errores indican problemas en el c\u00f3digo que deben ser corregidos, mientras que las excepciones son situaciones inesperadas que pueden ser manejadas para asegurar que el programa siga funcionando sin interrupciones.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#11-errores","title":"1.1. Errores","text":"<p>Los errores, tambi\u00e9n conocidos como bugs, son problemas en el c\u00f3digo que impiden que el programa funcione correctamente. Pueden ser de diferentes tipos, como errores de sintaxis, errores l\u00f3gicos (cuando el programa produce resultados incorrectos debido a un error en el algoritmo), o errores de tiempo de ejecuci\u00f3n (que ocurren mientras el programa se est\u00e1 ejecutando). Los errores pueden ser causados por una variedad de razones, incluyendo l\u00f3gica incorrecta, mal uso de funciones o librer\u00edas, o incluso problemas con la configuraci\u00f3n del entorno de desarrollo.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#12-excepciones","title":"1.2. Excepciones:","text":"<p>Las excepciones son eventos an\u00f3malos o inusuales que ocurren durante la ejecuci\u00f3n de un programa y que afectan el flujo normal del mismo. A diferencia de los errores, las excepciones no siempre indican un fallo en el c\u00f3digo. Por ejemplo, si un programa intenta abrir un archivo que no existe, esto generar\u00e1 una excepci\u00f3n <code>FileNotFoundError</code>. Sin embargo, esto no es un error en el c\u00f3digo en s\u00ed, sino una situaci\u00f3n inesperada que el programa debe saber c\u00f3mo manejar. Las excepciones en Python est\u00e1n dise\u00f1adas para gestionar este tipo de situaciones y permitir que el programa contin\u00fae su ejecuci\u00f3n en lugar de detenerse abruptamente.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#2-uso-de-try-y-except","title":"2. Uso de try y except","text":"<p>Hemos visto varios casos de c\u00f3digo en donde us\u00e1bamos las funciones <code>input</code> e <code>int</code> para leer y analizar un n\u00famero entero introducido por el usuario. Tambi\u00e9n vimos lo poco seguro que pod\u00eda llegar a resultar hacer algo as\u00ed:</p> <pre><code>&gt;&gt;&gt; velocidad = input(prompt)\n\u00bfCual.... es la velocidad de vuelo de una golondrina sin carga?\n\u00bfTe refieres a una golondrina africana o a una europea?\n&gt;&gt;&gt; int(velocidad)\nValueError: invalid literal for int() with base 10:\n&gt;&gt;&gt;\n</code></pre> <p>Cuando estamos trabajando con el int\u00e9rprete de Python, tras esta error/excepci\u00f3n simplemente nos aparece de nuevo el prompt, as\u00ed que pensamos \u201c\u00a1epa, me he equivocado!\u201d, y continuamos con la siguiente sentencia.</p> <p>Sin embargo, si se escribe ese c\u00f3digo en un script de Python y se produce el error/excepci\u00f3n, el script se detendr\u00e1 inmediatamente, y mostrar\u00e1 un \u201ctraceback\u201d. No ejecutar\u00e1 la siguiente sentencia.</p> <p>He aqu\u00ed un programa de ejemplo para convertir una temperatura desde grados Fahrenheit a grados Celsius:</p> <pre><code>ent = input('Introduzca la Temperatura Fahrenheit:')\nfahr = float(ent)\ncel = (fahr - 32.0) * 5.0 / 9.0\nprint(cel)\n\n# C\u00f3digo: https://es.py4e.com/code3/fahren.py\n</code></pre> <p>Si ejecutamos este c\u00f3digo y le damos una entrada no v\u00e1lida, simplemente fallar\u00e1 con un mensaje de error bastante antip\u00e1tico:</p> <pre><code>python fahren.py\nIntroduzca la Temperatura Fahrenheit:72\n22.2222222222\n</code></pre> <pre><code>python fahren.py\nIntroduzca la Temperatura Fahrenheit:fred\nTraceback (most recent call last):\n  File \"fahren.py\", line 2, in &lt;module&gt;\n    fahr = float(ent)\nValueError: invalid literal for float(): fred\n</code></pre> <p>Existen estructuras de ejecuci\u00f3n condicional dentro de Python para manejar este tipo de errores/excepciones esperados e inesperados, llamadas <code>try / except</code>. La idea de <code>try</code> y <code>except</code> es que si se sabe que cierta secuencia de instrucciones puede generar un problema, sea posible a\u00f1adir ciertas sentencias para que sean ejecutadas en caso de error. Estas sentencias extras (el bloque <code>except</code>) ser\u00e1n ignoradas si no se produce ning\u00fan error.</p> <p>Puedes pensar en la caracter\u00edstica <code>try</code> y <code>except</code> de Python como una \u201cp\u00f3liza de seguros\u201d en una secuencia de sentencias.</p> <p>Se puede reescribir nuestro conversor de temperaturas de esta forma:</p> <pre><code>ent = input('Introduzca la Temperatura Fahrenheit:')\ntry:\n    fahr = float(ent)\n    cel = (fahr - 3Python2.0) * 5.0 / 9.0\n    print(cel)\nexcept:\n    print('Por favor, introduzca un n\u00famero')\n\n# C\u00f3digo: https://es.py4e.com/code3/fahren2.py\n</code></pre> <p>Python comienza ejecutando la secuencia de sentencias del bloque <code>try</code>. Si todo va bien, se saltar\u00e1 todo el bloque <code>except</code> y terminar\u00e1. Si ocurre una excepci\u00f3n dentro del bloque <code>try</code>, Python saltar\u00e1 fuera de ese bloque y ejecutar\u00e1 la secuencia de sentencias del bloque <code>except</code>.</p> <pre><code>python fahren2.py\nIntroduzca la Temperatura Fahrenheit:72\n22.2222222222\n</code></pre> <pre><code>python fahren2.py\nIntroduzca la Temperatura Fahrenheit:fred\nPor favor, introduzca un n\u00famero\n</code></pre> <p>Gestionar una excepci\u00f3n con una sentencia <code>try</code> recibe el nombre de capturar una excepci\u00f3n. En este ejemplo, la cl\u00e1usula <code>except</code> muestra un mensaje de error. En general, capturar una excepci\u00f3n te da la oportunidad de corregir el problema, volverlo a intentar o, al menos, terminar el programa con elegancia.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#3-capturar-excepciones-concretas","title":"3. Capturar excepciones concretas","text":"<p>Es posible escribir programas que capturen y manejen determinadas excepciones. Durante el siguiente ejemplo, se le pide al usuario que ingrese un numero hasta que se haya ingresado un n\u00famero entero v\u00e1lido, aunque el usuario podr\u00e1 interrumpir el programa (puede variar las formas entre sistemas operativos); En linux/windows se utiliza Control-C y esta interrupci\u00f3n generar\u00e1 la excepci\u00f3n<code>KeyboardInterrupt</code></p> <pre><code>&gt;&gt;&gt;x = None\n...while x == None:\n...     try:\n...         x = int(input(\"Please enter a number: \"))\n...     except ValueError:\n...         print(\"Oops!  That was no valid number.  Try again...\")\n</code></pre> <p>Ten en cuenta que se a la cl\u00e1usula except le puedes indicar que gestione varias excepciones, a\u00f1adiendo el nombre de la excepci\u00f3n a continuaci\u00f3n de la otra. Adem\u00e1s, se pueden a\u00f1adir varias cl\u00e1usulas <code>except</code> cada diferenciar los bloques que gestionan la excepci\u00f3n en funci\u00f3n de la excepci\u00f3n que se ha producido.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#4-lanzar-excepciones","title":"4. Lanzar excepciones","text":"<p>La declaraci\u00f3n <code>raise</code> permite al programador forzar que ocurra una excepci\u00f3n espec\u00edfica.</p> <p>Por ejemplo:</p> <pre><code>&gt;&gt;&gt; raise NameError('HiThere')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: HiThere\n</code></pre> <p>El \u00fanico argumento para <code>raise</code> indica la excepci\u00f3n que se va a generar. Debe ser una instancia de excepci\u00f3n o una clase de excepci\u00f3n (una clase que se deriva de <code>Exception</code>. Si se pasa una clase de excepci\u00f3n, se instanciar\u00e1 impl\u00edcitamente llamando a su constructor sin argumentos:</p> <pre><code>raise ValueError  # shorthand for 'raise ValueError()'\n</code></pre> <p>Si quieres saber si se gener\u00f3 una excepci\u00f3n pero no tienes la intenci\u00f3n de manejarla, la siguiente forma de usar la declaraci\u00f3n <code>raise</code>, te permitir\u00e1 volver a generarla:</p> <pre><code>&gt;&gt;&gt; try:\n...     raise NameError('HiThere')\n... except NameError:\n...     print('An exception flew by!')\n...     raise\n...\nAn exception flew by!\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nNameError: HiThere\n</code></pre>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#5-testear","title":"5. Testear","text":"<p>Tambi\u00e9n podemos testear que se lanza una determinada excepci\u00f3n cuando esperamos que se lance. Supongamos que tienes una funci\u00f3n llamada dividir en un archivo <code>calculadora.py</code> que deber\u00eda lanzar una excepci\u00f3n <code>ZeroDivisionError</code> cuando se intenta dividir por cero. A continuaci\u00f3n puedes ver c\u00f3mo escribir\u00edas la prueba:</p> <pre><code># Archivo: test_calculadora.py\n\nfrom calculadora import dividir\n\ndef test_dividir_por_cero_deberia_lanzar_excepcion():\n    with pytest.raises(ZeroDivisionError):\n    dividir(10, 0)\n</code></pre> <p>la sentencia <code>with pytest.raises(ExcepcionEsperada)</code> es la sintaxis que se utiliza para probar si una excepci\u00f3n es lanzada durante la ejecuci\u00f3n del c\u00f3digo.</p> <p>En este ejemplo, estamos usando <code>pytest.raises(ZeroDivisionError)</code> para verificar que cuando llamamos a <code>dividir(10, 0)</code>, se lanza una excepci\u00f3n <code>ZeroDivisionError</code>.</p> <p>En este caso, si la funci\u00f3n <code>dividir</code> est\u00e1 correctamente implementada y lanza una excepci\u00f3n <code>ZeroDivisionError</code> cuando se divide por cero, la prueba pasar\u00e1 con \u00e9xito. Si no, la prueba fallar\u00e1 y te proporcionar\u00e1 informaci\u00f3n sobre el fallo.</p> <p>Este es un ejemplo simple, pero pytest es una herramienta muy vers\u00e1til que puede manejar una amplia gama de situaciones de prueba. Puedes escribir pruebas para casos normales, casos de borde, y muchas otras situaciones que desees probar en tu c\u00f3digo.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#6-ejemplo-completo","title":"6. Ejemplo completo","text":"<pre><code>import pytest\n\ndef fahr2cel(fahr:float) -&gt; float:\n    ''' Convertir grados Fahrenheit a grados Celsius'''\n    if fahr &lt; -459.67:\n        raise ValueError('Temperatura Fahrenheit incorrecta: ' + str(fahr))\n\n    cel = (fahr - 32.0) * 5.0 / 9.0\n    return cel\n\nif __name__ == '__main__':\n    numeroCorrecto = False\n    fahr = None\n    while not numeroCorrecto:\n        try:\n            ent = input('Introduzca la Temperatura Fahrenheit:')\n            fahr = float(ent)\n            cel = fahr2cel(fahr)\n            numeroCorrecto = True\n        except ValueError:   # Si no se puede convertir a float\n            if fahr == None:\n                print('Por favor introduzca un n\u00famero.')\n            else:\n                print('La temperatura Fahrenheit es incorrecta: ' + str(fahr))\n\n    print(cel)\n\n\n\ndef test_fahr2cel():\n    with pytest.raises(ValueError):\n        fahr2cel(-300)\n</code></pre>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#actividades","title":"Actividades","text":"<p>Actividad 1: Escribe un programa que capture la excepci\u00f3n divisi\u00f3n entre cero. Tendr\u00e1 que mostar el mensaje del error capturado.</p> <p>Actividad 2: Reescribe el programa conversor de temperaturas para que lea repetidamente la temperatura hasta que sea correcta, debe detectar los fallos usando <code>try</code> y <code>except</code>.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Aprende con Alf</li> <li>Python para todos</li> <li>Documentaci\u00f3n Python.org</li> <li>Testear Excepciones</li> </ul>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/","title":"UD 2 - 2.4 Depurar un programa","text":"","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#24-depurar-debug-un-programa","title":"2.4. Depurar (Debug) un programa","text":"","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#1-que-es-hacer-debug-o-depurar","title":"1. \u00bfQu\u00e9 es hacer debug o depurar?","text":"<p>En ocasiones, cuando realizamos un programa, el resultado obtenido no es el esperado, es decir, hemos cometido alg\u00fan error de c\u00e1lculo, el cual hace que el programa funcione pero no lo haga correctamente. En estas ocasiones es muy importante depurar el programa, encontrar el origen del error.</p> <p>En la depuraci\u00f3n lo que hacemos es ejecutar el programa paso a paso, as\u00ed podemos ver las instrucciones que se est\u00e1n ejecutando, adem\u00e1s de poder ver los valores que van tomando las variables. Esto nos sirve de ayuda para ver las variables, los valores que van tomando, las instrucciones que se est\u00e1n ejecutando y as\u00ed poder ver d\u00f3nde hemos cometido un error.</p> <p>Para depurar, podemos usar las herramientas que viene en los entornos de desarrollo integrados/editores, como Visual Code, o usar herramientas que vienen con el interprete de Python, como Pdb</p> <p>A continuaci\u00f3n veremos un ejemplo del uso de Visual Code </p>","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#2-ejemplo-de-uso-de-visual-code","title":"2. Ejemplo de uso de Visual Code","text":"<p>En Visual Code, el editor de texto que vamos a utilizar, para poder depurar un programa en Python se necesita instalar el plugin correspondiente. Para ello, vamos a la opci\u00f3n Extensions y buscamos Python. Nos aparecer\u00e1 una lista de plugins, y seleccionamos el que se llama Python.</p> <p>Una vez instalado este plugin, vamos a la opci\u00f3n Debug, que se encuentra en la columna izquierda de Visual Code, as\u00ed podemos empezar a depurar nuestro programa.</p> <p>Si el programa a depurar es muy grande, tal vez no nos interese realizar la traza desde el principio, por lo que podemos indicar en qu\u00e9 instrucci\u00f3n empezar la depuraci\u00f3n. De esta forma creamos un breakpoint o un punto de ruptura, con el que conseguimos que cuando la ejecuci\u00f3n llegue a esa instrucci\u00f3n, se pare y empiece a hacer la depuraci\u00f3n.</p> <p>Un breakpoint (o punto de ruptura o punto de parada) es el mecanismo que nos va a permitir detener el flujo de ejecuci\u00f3n de un programa en una instrucci\u00f3n en concreto.</p> <p>En este ejemplo vamos a depurar este programa:</p> <pre><code>    #!usr/bin/env python3\n    #Crea una funci\u00f3n \u201cCalcularMaxMin\u201d que recibe una lista con valores num\u00e9ricos y\n    #devuelve el valor m\u00e1ximo y el m\u00ednimo. Crea un programa que complete una lista de numeros\n    #aleatorios (entre 1 y 100) y muestre el m\u00e1ximo y el m\u00ednimo, utilizando la funci\u00f3n anterior.\n    #Por \u00faltimo, pide un n\u00famero (entre 1 y 100) y el programa debe decir si est\u00e1 en la lista anterior.\n    import random\n    def CalcularMaxMin(lista):\n        return (max(lista),min(lista))\n\n\n    numeros = []\n    #Inicializo la lista con valores aleatorios\n    for i in range(0..10):\n    numeros.append(random.randint(1,1000))\n    vmax,vmin = CalcularMaxMin (numeros)\n    print(\u201cEl valor m\u00e1ximo es \u201c,vmax)\n    print(\u201cEl valor m\u00ednimo es \u201c,vmin)\n\n    numero = int(input(\u201cDime un n\u00famero del 1 al 100:\u201d))\n    while numero &gt; 0 or numero &lt; 100:\n    print(\u201cEl n\u00famero debe estar entre 1 y 100\u201d)\n    numero = int(input(\u201cDime un n\u00famero del 1 al 100:\u201d))\n\n    if numero in numero:\n    print(\u201cEl n\u00famero est\u00e1 en la lista\u201d)\n    elsa:\n    print(\u201cEl n\u00famero no est\u00e1 en la lista\u201d)      \n</code></pre> <p>Nota: El programa no es correcto. Corrige los errores antes de hacerlo funcionar. Una vez funcione, tendr\u00e1s que depurarlo para que funcione de acuerdo a lo que se pide.</p> <p>Marcamos un breakpoint en la l\u00ednea n\u00famero 11 y pulsamos el bot\u00f3n Start debugging para comenzar la depuraci\u00f3n.</p> <p> </p> <p>Podemos ver que el programa resalta en color la pr\u00f3xima instrucci\u00f3n que se va a ejecutar. Al mismo tiempo observamos que en la parte superior izquierda nos muestra los valores de las variables con las que estamos trabajando. (En el apartado Variables: locals y globals)</p> <p></p> <p>A continuaci\u00f3n ejecutamos la siguiente instrucci\u00f3n, pulsando la opci\u00f3n Step Into o la tecla F11, observamos que se ha creado la variable <code>numeros</code> se ha creado y es una lista vac\u00eda.</p> <p>Step into: Ejecuta una sentencia y en el caso de ser la llamada a una funci\u00f3n, entra dentro de esta para depurarla paso a paso. </p> <p> Seguimos ejecutando la depuraci\u00f3n con la tecla F11 y vemos que el programa entra en un bucle y se van a\u00f1adiendo n\u00fameros aleatorios a la lista. En el apartado de Variables vemos que la variable <code>numeros</code> va cambiando, y tambi\u00e9n su longitud, lo que podemos tambi\u00e9n en el apartado Watch, si a\u00f1adimos una expresi\u00f3n, por ejemplo: <code>len(numeros)</code> o solo <code>numeros</code></p> <p></p> <p>Como podemos comprobar es una forma muy sencilla de ver qu\u00e9 instrucciones se est\u00e1n ejecutando, adem\u00e1s de poder ver en cualquier momento los valores de las variables.</p> <p>En cualquier momento podemos ir a la consola de depuraci\u00f3n, seleccionando en Debug Console. Esta consola se abre en la parte inferior de la pantalla, y en la que podemos ejecutar instrucciones Python en el entorno de nuestro programa, es decir, con el valor de las variables y tal como en ese momento est\u00e1 ejecutado. </p> <p></p> <p>Por ejemplo podemos lanzar las ejecuciones de las sentencias <code>len(numeros)</code> o solo <code>numeros</code>.</p> <p>Si en la consola de depuraci\u00f3n escribimos la variable numeros, nos muestra el valor actual de la misma.</p> <p>Tambi\u00e9n podemos hacer instrucciones m\u00e1s complicada, por ejemplo, podemos comprobar si el n\u00famero 1 est\u00e1 en la variable <code>numeros</code>, escribiendo <code>1 in numeros</code>.</p> <p>Si continuamos ejecutando el programa, la instrucci\u00f3n for va a tener diez iteraciones, y cuando termine pasamos a la ejecuci\u00f3n de una funci\u00f3n en la l\u00ednea 8.</p> <p>Si estamos seguros que dicha funci\u00f3n se ejecuta sin problemas y no necesitemos depurarla, podemos pulsar la opci\u00f3n Step Over o pulsar la tecla F10, y en ese caso se ejecuta la funci\u00f3n pero sin entrar dentro de esta para depurar paso a paso.</p> <p>Step over: Ejecuta una sentencia y en el caso de ser la llamada a una funci\u00f3n, no entra dentro de esta para depurarla.</p> <p>Si realmente queremos ver c\u00f3mo se ejecuta esa funci\u00f3n, pulsamos F11 y la ejecuci\u00f3n entrar\u00eda en la funci\u00f3n, calcular\u00eda el m\u00e1ximo y el m\u00ednimo de la lista y nos devolver\u00eda esos valores.</p> <p>Por \u00faltimo, en el apartado Calla Stack podremos ver la pila de llamadas que se ha hecho en nuestro programa, pudiendo hacer un seguimiento de qu\u00e9 funci\u00f3n ha llamado a qu\u00e9 otra funci\u00f3n.</p> <p>Esta pr\u00e1ctica es muy recomendable para todo el que est\u00e9 comenzando a programar, para localizar los posibles errores de programaci\u00f3n que se hayan cometido, y adem\u00e1s para aprender c\u00f3mo se ejecutan las instrucciones dentro de nuestro programa.</p>","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#fuente","title":"Fuente","text":"<ul> <li>Como depurar, Open Webinars</li> <li>Depurar con Pdb</li> </ul>","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/","title":"UD 2 - 2.5 Documentar el c\u00f3digo","text":"","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#25-documentar-el-codigo-en-python","title":"2.5. Documentar el c\u00f3digo en Python","text":"<p>Intentaremos explicar como documentar el c\u00f3digo de Python. Ya sea un script peque\u00f1o o un proyecto grande, ya sea un principiante o un Pythonista experimentado.</p> <p>La unidad se divide en cuatro secciones principales:</p> <ol> <li>Por qu\u00e9 es tan importante documentar su c\u00f3digo: una introducci\u00f3n a la documentaci\u00f3n y su importancia</li> <li>Comentar vs. Documentar c\u00f3digo: una descripci\u00f3n general de las principales diferencias entre comentar y documentar, as\u00ed como los momentos y formas apropiados para usar los comentarios.</li> <li>Documentaci\u00f3n de la base de c\u00f3digo de Python mediante Docstrings: una inmersi\u00f3n profunda en docstrings para clases, m\u00e9todos de clase, funciones, m\u00f3dulos, paquetes y scripts, as\u00ed como lo que se debe encontrar dentro de cada uno</li> <li>Documentaci\u00f3n de sus proyectos de Python: los elementos necesarios y lo que deben contener para sus proyectos de Python</li> </ol>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#1-por-que-es-tan-importante-documentar-su-codigo","title":"1. Por qu\u00e9 es tan importante documentar su c\u00f3digo","text":"<p>Es posible que ya te hayas dado cuenta de la importancia de documentar el c\u00f3digo. Pero si no, ten en cuenta esto que dijo Guido en una PyCon, creador del Python:</p> <p>\u201cCode is more often read than written.\u201d</p> <p>\u2014Guido van Rossum</p> <p>Cuando escribes c\u00f3digo, lo haces dirigido principalmente a dos audiencias: los usuarios y los desarrolladores (incluido tu mismo). Ambos p\u00fablicos son igualmente importantes. Con el tiempo, abrir\u00e1s el c\u00f3digo fuente que creaste en el pasado, y te te preguntar\u00e1s: \"\u00bfQue ... estaba intentando hacer aqu\u00ed?\" Si tiene problemas para tu propio c\u00f3digo, imag\u00ednate lo que pueden experimentar los usuarios u otros desarrolladores cuando intenten usar o contribuir a tu c\u00f3digo.</p> <p>Por otra parte, con el tiempo te encontrar\u00e1s en la siguiente situaci\u00f3n, quieres hacer algo en Python y encuentras lo que parece ser una gran biblioteca que puede hacer el trabajo. Sin embargo, cuando comienzas a usar la biblioteca, buscas ejemplos, art\u00edculos o incluso documentaci\u00f3n oficial sobre c\u00f3mo hacer algo espec\u00edfico y te resulta dif\u00edcil o imposible encontrarlo.</p> <p>Despu\u00e9s de buscar, te das cuenta de que falta algo de documentaci\u00f3n o, lo que es peor, no hay nada de documentaci\u00f3n. Esta situaci\u00f3n, posiblemente te lleve a no usar la biblioteca, sin importar el trabajo que te pod\u00eda haber quitado. Daniele Procida resumi\u00f3 mejor esta situaci\u00f3n:</p> <p>\u201cIt doesn\u2019t matter how good your software is, because if the documentation is not good enough, people will not use it \u201c</p> <p>\u2014Daniel Procida</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#2-comentar-vs-documentar-codigo","title":"2. Comentar vs Documentar C\u00f3digo","text":"<p>Antes de que podamos analizar c\u00f3mo documentar su c\u00f3digo Python, debemos distinguir la documentaci\u00f3n de los comentarios.</p> <p>En general, comentar c\u00f3digo es describirlo para los desarrolladores. La audiencia principal del c\u00f3digo fuente ser\u00e1n los desarrolladores que mantendr\u00e1n o usar\u00e1n ese c\u00f3digo. Junto con un c\u00f3digo bien escrito, los comentarios ayudar\u00e1n a comprender mejor el c\u00f3digo y su prop\u00f3sito y dise\u00f1o:</p> <p>\u201cCode tells you how; Comments tell you why.\u201d</p> <p>\u2014 Jeff Atwood (tambi\u00e9n conocido como Coding Horror)</p> <p>Por otra parte, documentar c\u00f3digo es describir su uso y funcionalidad a los usuarios que har\u00e1n uso de este. Si bien puede ser \u00fatil en el proceso de desarrollo, la principal audiencia prevista son los usuarios. Seguidamente veremos c\u00f3mo y cu\u00e1ndo comentar su c\u00f3digo.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#21-conceptos-basicos-durante-los-comentarios-en-el-codigo","title":"2.1. Conceptos b\u00e1sicos durante los comentarios en el c\u00f3digo","text":"<p>En python, los comentarios se crean haciendo uso del car\u00e1cter <code>#</code> al comienzo de la linea. Deben ser declaraciones breves de no m\u00e1s de unas pocas frases. Aqu\u00ed hay un ejemplo simple:</p> <pre><code>def hello_world():\n    # A simple comment preceding a simple print statement\n    print(\"Hello World\")\n</code></pre> <p>Seg\u00fan PEP 8 , los comentarios deben tener una longitud m\u00e1xima de 72 caracteres. Esto es cierto aunque tus lineas de c\u00f3digo sean mayores que los 80 caracteres recomendados. Si un comentario va a ser mayor que el l\u00edmite remendado, es apropiado usar varias l\u00edneas para el comentario:</p> <pre><code>def hello_long_world():\n    # A very long statement that just goes on and on and on and on and\n    # never ends until after it's reached the 80 char limit\n    print(\"Hellooooooooooooooooooooooooooooooooooooooooooooooooooooooo World\")\n</code></pre> <p>Los comentarios pueden tener m\u00faltiples prop\u00f3sitos, que incluyen :</p> <ul> <li>Planificaci\u00f3n y revisi\u00f3n: cuando est\u00e9 desarrollando nuevas partes de tu c\u00f3digo, puede ser apropiado usar primero los comentarios como una forma de planificar o delinear esa secci\u00f3n de c\u00f3digo. Recuerde eliminar estos comentarios una vez que se haya implementado y revisado/probado la funcionalidad real:</li> </ul> <pre><code># First step\n# Second step\n# Third step\n</code></pre> <ul> <li>Descripci\u00f3n del c\u00f3digo: los comentarios se pueden usar para explicar la intenci\u00f3n de secciones espec\u00edficas del c\u00f3digo:</li> </ul> <pre><code># Attempt a connection based on previous settings. If unsuccessful,\n# prompt user for new settings.\n</code></pre> <ul> <li>Descripci\u00f3n algor\u00edtmica: cuando se usan algoritmos, especialmente los complicados, puede ser \u00fatil explicar c\u00f3mo funciona el algoritmo o c\u00f3mo se implementa dentro de su c\u00f3digo. Tambi\u00e9n puede ser apropiado describir por qu\u00e9 se seleccion\u00f3 un algoritmo espec\u00edfico sobre otro.</li> </ul> <pre><code># Using quick sort for performance gains\n</code></pre> <ul> <li>Etiquetado: para etiquetar secciones espec\u00edficas de c\u00f3digo donde se encuentran problemas conocidos o \u00e1reas de mejora. Algunos ejemplos son: <code>BUG</code>, <code>FIXME</code>y <code>TODO</code>.</li> </ul> <pre><code># TODO: Add condition for when val is None\n</code></pre> <p>Los comentarios a su c\u00f3digo deben ser breves y clarificadores. Evite el uso de comentarios largos cuando sea posible. Adem\u00e1s, debe utilizar las siguientes cuatro reglas esenciales sugeridas por Jeff Atwood :</p> <ol> <li>Mantenga los comentarios lo m\u00e1s cerca posible del c\u00f3digo que se describe. Los comentarios que no est\u00e1n cerca del c\u00f3digo al que se refieren, son frustrantes para el lector y se pasan por alto f\u00e1cilmente cuando se realizan actualizaciones.</li> <li>No utilice formatos complejos (como tablas o cifras ASCII). ya que pueden distraer y pueden ser dif\u00edciles de mantener con el tiempo.</li> <li>No incluyas informaci\u00f3n redundante. Suponga que el lector del c\u00f3digo tiene una comprensi\u00f3n b\u00e1sica de los principios de programaci\u00f3n y la sintaxis del lenguaje.</li> <li>Dise\u00f1a el c\u00f3digo para que se comente a s\u00ed mismo. La forma m\u00e1s f\u00e1cil de entender el c\u00f3digo es ley\u00e9ndolo. Cuando dise\u00f1as el c\u00f3digo utilizando conceptos claros (variables y metodos con nombres clarificadores) y f\u00e1ciles de entender, el lector entender\u00e1 la intenci\u00f3n del c\u00f3digo que est\u00e1 leyendo, sin necesidad de comentarios.</li> </ol> <p>Recuerda que los comentarios est\u00e1n dise\u00f1ados para el lector, incluido tu mismo, para ayudarlo a comprender el prop\u00f3sito y el dise\u00f1o del software.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#22-comentarios-a-traves-de-las-sugerencias-de-tipo-python-35","title":"2.2. Comentarios a trav\u00e9s de las sugerencias de tipo (Python 3.5+)","text":"<p>La sugerencia de tipo se agreg\u00f3 a Python 3.5 y es una forma adicional para ayudar a los lectores. Aplica la cuarta sugerencia de Jeff, ya que permite al desarrollador dise\u00f1ar y explicar partes del c\u00f3digo sin comentar. He aqu\u00ed un ejemplo r\u00e1pido:</p> <pre><code>def hello_name(name: str) -&gt; str:\n    return(f\"Hello {name}\")\n</code></pre> <p>Al examinar la sugerencia de tipo, inmediatamente entiendes que la funci\u00f3n espera que la entrada <code>name</code>sea de tipo <code>str</code>. Tambi\u00e9n entienes que la salida esperada de la funci\u00f3n ser\u00e1 de tipo <code>str</code>. Si bien las sugerencias de tipo ayudan a reducir los comentarios, tenga en cuenta que hacerlo tambi\u00e9n puede generar trabajo adicional al crear o actualizar la documentaci\u00f3n de su proyecto.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#3-documentar-su-base-de-codigo-de-python-usando-docstrings","title":"3. Documentar su base de c\u00f3digo de Python usando Docstrings","text":"<p>Ahora que hemos aprendido a comentar, profundicemos en la documentaci\u00f3n del c\u00f3digo de Python. Veremos como usar las cadenas de documentaci\u00f3n <code>docstring</code> y c\u00f3mo usarlas para la documentaci\u00f3n:</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#31-cadenas-de-documentacion-docstring","title":"3.1. Cadenas de documentaci\u00f3n <code>docstring</code>","text":"<p>La documentaci\u00f3n de c\u00f3digo Python se centra en cadenas de documentaci\u00f3n. La propiedad <code>docstring</code> viene predefinida en los objetos y , cuando se configuran correctamente, pueden ayudar a los usuarios de este c\u00f3digo a entender los objetos, y al desarrollador a tener documentado el proyecto. Junto con las cadenas de documentaci\u00f3n, Python tambi\u00e9n tiene la funci\u00f3n <code>help()</code> que imprime la cadena de documentaci\u00f3n de los objetos en la consola. He aqu\u00ed un ejemplo r\u00e1pido:</p> <pre><code>&gt;&gt;&gt; help(str)\nHelp on class str in module builtins:\n\nclass str(object)\n |  str(object='') -&gt; str\n |  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n |\n |  Create a new string object from the given object. If encoding or\n |  errors are specified, then the object must expose a data buffer\n |  that will be decoded using the given encoding and error handler.\n |  Otherwise, returns the result of object.__str__() (if defined)\n |  or repr(object).\n |  encoding defaults to sys.getdefaultencoding().\n |  errors defaults to 'strict'.\n # Truncated for readability\n</code></pre> <p>\u00bfC\u00f3mo se genera esta salida? Como en Python todo es un objeto, puede examinar el directorio del objeto usando el comando <code>dir()</code>, es decir, listar los m\u00e9todos y propiedades del objeto indicado. Hagamos eso y veamos qu\u00e9 encontramos:</p> <pre><code>&gt;&gt;&gt; dir(str)\n['__add__', ..., '__doc__', ..., 'zfill'] # Truncated for readability\n</code></pre> <p>En ese volcado, hay una propiedad interesante, <code>__doc__</code>. Si profundizamos en esta propiedad, veremos lo siguiente:</p> <pre><code>&gt;&gt;&gt; print(str.__doc__)\nstr(object='') -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n\nCreate a new string object from the given object. If encoding or\nerrors are specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.\n</code></pre> <p>Como podemos observar, en la propiedad <code>__doc__</code> se almacena la documentaci\u00f3n del objeto. Esto significa que puedes manipular directamente esa propiedad. Sin embargo, existen restricciones que no nos permiten modificarlo los objetos predeterminados:</p> <pre><code>&gt;&gt;&gt; str.__doc__ = \"I'm a little string doc! Short and stout; here is my input and print me for my out\"\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't set attributes of built-in/extension type 'str'\n</code></pre> <p>Cualquier otro objeto personalizado puede ser manipulado:</p> <pre><code>def say_hello(name):\n    print(f\"Hello {name}, is it me you're looking for?\")\n\nsay_hello.__doc__ = \"A simple function that says hello... Richie style\"\n</code></pre> <pre><code>&gt;&gt;&gt; help(say_hello)\nHelp on function say_hello in module __main__:\n\nsay_hello(name)\n    A simple function that says hello... Richie style\n</code></pre> <p>Python tiene una caracter\u00edstica m\u00e1s que simplifica la asignaci\u00f3n de contenido a las docstrings. En lugar de manipular directamente la propiedad <code>__doc__</code>, la ubicaci\u00f3n estrat\u00e9gica del literal debajo de la definicion del objeto establecer\u00e1 autom\u00e1ticamente el valor de <code>__doc__</code>. Esto es lo que sucede con el mismo ejemplo que el anterior:</p> <pre><code>def say_hello(name):\n    \"\"\"A simple function that says hello... Richie style\"\"\"\n    print(f\"Hello {name}, is it me you're looking for?\")\n</code></pre> <pre><code>&gt;&gt;&gt; help(say_hello)\nHelp on function say_hello in module __main__:\n\nsay_hello(name)\n    A simple function that says hello... Richie style\n</code></pre> <p>Ya que conoces el trasfondo de las docstrings. Ahora es el momento de conocer los diferentes tipos de docstrings y qu\u00e9 informaci\u00f3n deben contener.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#32-tipos-de-cadenas-de-documentos","title":"3.2. Tipos de cadenas de documentos","text":"<p>Las convenciones de docstring se describen en PEP 257. Su prop\u00f3sito es proporcionar a sus usuarios una breve descripci\u00f3n general del objeto. Deben mantenerse lo suficientemente concisos para que sean f\u00e1ciles de mantener, pero a\u00fan as\u00ed ser lo suficientemente elaborados para que los nuevos usuarios entiendan su prop\u00f3sito y c\u00f3mo usar el objeto documentado.</p> <p>En todos los casos, las cadenas de documentaci\u00f3n deben usar el formato de cadena de triples comillas dobles <code>\"\"\"</code>, ya sea con Docstrings que tengan varias l\u00edneas o no. Como m\u00ednimo, una cadena de documentaci\u00f3n debe ser un resumen r\u00e1pido de lo que sea que est\u00e9s describiendo y debe estar contenida en una sola l\u00ednea:</p> <pre><code>\"\"\"This is a quick summary line used as a description of the object.\"\"\"\n</code></pre> <p>Las cadenas de documentos de varias l\u00edneas se utilizan para realizar una descripci\u00f3n mas elaborada del objeto m\u00e1s all\u00e1 de un mero resumen. Todas las Docstrings compuestas por varias l\u00edneas tendr\u00edan que tener las siguientes partes:</p> <ul> <li>Una l\u00ednea de resumen de una l\u00ednea</li> <li>Una l\u00ednea en blanco antes del resumen</li> <li>Cualquier elaboraci\u00f3n adicional para la cadena de documentaci\u00f3n</li> <li>Otra l\u00ednea en blanco</li> </ul> <pre><code>\"\"\"This is the summary line\n\nThis is the further elaboration of the docstring. Within this section,\nyou can elaborate further on details as appropriate for the situation.\nNotice that the summary and the elaboration is separated by a blank new\nline.\n\"\"\"\n\n# Notice the blank line above. Code should continue on this line.\n</code></pre> <p>Las Docstrings deben tener la misma longitud que la recomendad para los comentarios (72 caracteres). Adem\u00e1s, se pueden dividir en tres categor\u00edas principales:</p> <ul> <li>Class Docstrings: clase y m\u00e9todos de clase</li> <li>Docstrings de paquetes y m\u00f3dulos: paquetes, m\u00f3dulos y funciones</li> <li>Script Docstrings: Script y funciones</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#321-docstrings-de-clase","title":"3.2.1. Docstrings de clase","text":"<p>Las Docstrings de clase se crean para la clase en s\u00ed, as\u00ed como para cualquier m\u00e9todo de clase. Se colocan inmediatamente despu\u00e9s de la clase o el m\u00e9todo de clase con una sangr\u00eda de un nivel:</p> <pre><code>class SimpleClass:\n    \"\"\"Class docstrings go here.\"\"\"\n\n    def say_hello(self, name: str):\n        \"\"\"Class method docstrings go here.\"\"\"\n\n        print(f'Hello {name}')\n</code></pre> <p>Las Docstrings de clase deben contener la siguiente informaci\u00f3n:</p> <ul> <li>Un breve resumen de su prop\u00f3sito y comportamiento.</li> <li>Cualquier m\u00e9todo p\u00fablico, junto con una breve descripci\u00f3n.</li> <li>Cualquier propiedad de clase (atributos)</li> <li>Cualquier cosa relacionada con la interfaz para subclases.</li> </ul> <p>Los par\u00e1metros del constructor de clase deben documentarse dentro de la Docstring del m\u00e9todo de clase <code>__init__</code> . Los m\u00e9todos individuales deben documentarse utilizando sus Docstrings individuales, y deben contener lo siguiente:</p> <ul> <li>Una breve descripci\u00f3n de qu\u00e9 es el m\u00e9todo y para qu\u00e9 se utiliza.</li> <li>Todos los argumentos (tanto obligatorios como opcionales) que se pasan.</li> <li>Etiquete cualquier argumento que se considere opcional o que tenga un valor predeterminado</li> <li>Cualquier efecto secundario que ocurra al ejecutar el m\u00e9todo.</li> <li>Cualquier excepci\u00f3n que se plantee</li> <li>Cualquier restricci\u00f3n sobre cu\u00e1ndo se puede llamar al m\u00e9todo</li> </ul> <p>Tomemos un ejemplo simple de una clase de datos que representa un Animal. Esta clase contendr\u00e1 algunas propiedades de clase, propiedades de instancia, un m\u00e9todo <code>__init__</code>, y un m\u00e9todo de instancia:</p> <pre><code>class Animal:\n    \"\"\"\n    A class used to represent an Animal\n\n    ...\n\n    Attributes\n    ----------\n    says_str : str\n        a formatted string to print out what the animal says\n    name : str\n        the name of the animal\n    sound : str\n        the sound that the animal makes\n    num_legs : int\n        the number of legs the animal has (default 4)\n\n    Methods\n    -------\n    says(sound=None)\n        Prints the animals name and what sound it makes\n    \"\"\"\n\n    says_str = \"A {name} says {sound}\"\n\n    def __init__(self, name, sound, num_legs=4):\n        \"\"\"\n        Parameters\n        ----------\n        name : str\n            The name of the animal\n        sound : str\n            The sound the animal makes\n        num_legs : int, optional\n            The number of legs the animal (default is 4)\n        \"\"\"\n\n        self.name = name\n        self.sound = sound\n        self.num_legs = num_legs\n\n    def says(self, sound=None):\n        \"\"\"\n        Prints what the animals name is and what sound it makes.\n\n        If the argument `sound` isn't passed in, the default Animal\n        sound is used.\n\n        Parameters\n        ----------\n        sound : str, optional\n            The sound the animal makes (default is None)\n\n        Raises\n        ------\n        NotImplementedError\n            If no sound is set for the animal or passed in as a\n            parameter.\n        \"\"\"\n\n        if self.sound is None and sound is None:\n            raise NotImplementedError(\"Silent Animals are not supported!\")\n\n        out_sound = self.sound if sound is None else sound\n        print(self.says_str.format(name=self.name, sound=out_sound))\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#322-docstrings-de-paquetes-y-modulos","title":"3.2.2. Docstrings de paquetes y m\u00f3dulos","text":"<p>Las docstring del paquete deben colocarse en la parte superior del archivo <code>__init__.py</code> del paquete. Esta cadena de documentaci\u00f3n debe enumerar los m\u00f3dulos y subpaquetes que exporta el paquete.</p> <p>Las docstring del m\u00f3dulo son similares a las Docstrings de la clase, salvo que en lugar de que se documenten las clases y los m\u00e9todos de clase, ahora es el m\u00f3dulo y las funciones que se encuentran dentro. Las Docstrings del m\u00f3dulo se colocan en la parte superior del archivo incluso antes de cualquier importaci\u00f3n, y deben incluir lo siguiente:</p> <ul> <li>Una breve descripci\u00f3n del m\u00f3dulo y su prop\u00f3sito.</li> <li>Una lista de cualquier clase, excepci\u00f3n, funci\u00f3n y cualquier otro objeto exportado por el m\u00f3dulo</li> </ul> <p>La docstring para una funci\u00f3n de m\u00f3dulo debe incluir los mismos elementos que un m\u00e9todo de clase:</p> <ul> <li>Una breve descripci\u00f3n de qu\u00e9 es la funci\u00f3n y para qu\u00e9 se utiliza.</li> <li>Todos los argumentos (tanto obligatorios como opcionales) que se pasan.</li> <li>Etiquete cualquier argumento que se considere opcional</li> <li>Cualquier efecto secundario que ocurra al ejecutar la funci\u00f3n</li> <li>Cualquier excepci\u00f3n que se plantee</li> <li>Cualquier restricci\u00f3n sobre cu\u00e1ndo se puede llamar a la funci\u00f3n</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#323-docstrings-de-scripts","title":"3.2.3. Docstrings de scripts","text":"<p>Los scripts se consideran ejecutables de un solo archivo que se ejecutan desde la consola. Las docstrings para los scripts se colocan en la parte superior del archivo y deben documentarse lo suficientemente bien como para que los usuarios puedan tener una comprensi\u00f3n suficiente de c\u00f3mo usar el script. Deber\u00eda poder usarse para obtener un mensaje de como \"usar el script\", cuando el usuario pasa incorrectamente un par\u00e1metro o usa la opci\u00f3n <code>-h</code> al ejecutar el script.</p> <p>Si usa <code>argparse</code>, puede omitir la documentaci\u00f3n espec\u00edfica, suponiendo que se haya documentado correctamente dentro del par\u00e1metro <code>help</code> de la funci\u00f3n <code>argparser.parser.add_argument</code>. Se recomienda usar la propiedad <code>__doc__</code>para el par\u00e1metro <code>description</code> del constructor <code>argparse.ArgumentParser</code>. Consulte este tutorial sobre bibliotecas de an\u00e1lisis de l\u00ednea de comandos para obtener m\u00e1s detalles sobre c\u00f3mo usar <code>argparse</code>y otros analizadores de l\u00ednea de comandos comunes.</p> <p>Finalmente, cualquier importaci\u00f3n personalizada o de terceros debe incluirse en las docstring para permitir a los usuarios saber qu\u00e9 paquetes pueden ser necesarios para ejecutar el script. Aqu\u00ed hay un ejemplo de un script que se usa para imprimir los encabezados de las columnas de una hoja de c\u00e1lculo:</p> <pre><code>\"\"\"Spreadsheet Column Printer\n\nThis script allows the user to print to the console all columns in the\nspreadsheet. It is assumed that the first row of the spreadsheet is the\nlocation of the columns.\n\nThis tool accepts comma separated value files (.csv) as well as excel\n(.xls, .xlsx) files.\n\nThis script requires that `pandas` be installed within the Python\nenvironment you are running this script in.\n\nThis file can also be imported as a module and contains the following\nfunctions:\n\n    * get_spreadsheet_cols - returns the column headers of the file\n    * main - the main function of the script\n\"\"\"\n\nimport argparse\n\nimport pandas as pd\n\n\ndef get_spreadsheet_cols(file_loc, print_cols=False):\n    \"\"\"Gets and prints the spreadsheet's header columns\n\n    Parameters\n    ----------\n    file_loc : str\n        The file location of the spreadsheet\n    print_cols : bool, optional\n        A flag used to print the columns to the console (default is\n        False)\n\n    Returns\n    -------\n    list\n        a list of strings used that are the header columns\n    \"\"\"\n\n    file_data = pd.read_excel(file_loc)\n    col_headers = list(file_data.columns.values)\n\n    if print_cols:\n        print(\"\\n\".join(col_headers))\n\n    return col_headers\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=__doc__)\n    parser.add_argument(\n        'input_file',\n        type=str,\n        help=\"The spreadsheet file to pring the columns of\"\n    )\n    args = parser.parse_args()\n    get_spreadsheet_cols(args.input_file, print_cols=True)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#33-formatos-de-docstrings","title":"3.3. Formatos de docstrings","text":"<p>Es posible que haya notado en los ejemplos vistos hasta ahora de docstrings que exist\u00edan elementos comunes: <code>Arguments</code>, <code>Returns</code>y <code>Attributes</code>. Hay formatos espec\u00edficos de docstrings que se pueden usar para ayudar a los analizadores de docstrings y a los usuarios a tener un formato familiar y conocido. El formato utilizado para los docstrings sigue el estilo NumPy/SciPy. Algunos de los formatos m\u00e1s comunes son los siguientes:</p> Tipo de formato Descripci\u00f3n Con el apoyo de Sphynx especificaci\u00f3n formal docstrings de Google Forma de documentaci\u00f3n recomendada por Google S\u00ed No Texto reestructurado Est\u00e1ndar de documentaci\u00f3n oficial de Python; No es amigable para principiantes pero tiene muchas funciones S\u00ed S\u00ed docstrings NumPy/SciPy La combinaci\u00f3n de NumPy de reStructuredText y Google Docstrings S\u00ed S\u00ed epitexto Una adaptaci\u00f3n Python de Epydoc; Ideal para desarrolladores de Java no oficialmente S\u00ed <p>La selecci\u00f3n del formato a seguir en la creaci\u00f3n de las docstrings es decisi\u00f3n personal, pero una vez eligida una, hay que ce\u00f1irse al mismo formato en todo el documento/proyecto. Los siguientes son ejemplos de cada tipo para darle una idea de c\u00f3mo se ve cada formato de documentaci\u00f3n.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#331-ejemplo-de-docstrings-de-google","title":"3.3.1. Ejemplo de docstrings de Google","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\n\nArgs:\n    file_loc (str): The file location of the spreadsheet\n    print_cols (bool): A flag used to print the columns to the console\n        (default is False)\n\nReturns:\n    list: a list of strings representing the header columns\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#332-ejemplo-de-texto-reestructurado","title":"3.3.2. Ejemplo de texto reestructurado","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\n\n:param file_loc: The file location of the spreadsheet\n:type file_loc: str\n:param print_cols: A flag used to print the columns to the console\n    (default is False)\n:type print_cols: bool\n:returns: a list of strings representing the header columns\n:rtype: list\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#333-ejemplo-de-cadenas-de-documentacion-numpyscipy","title":"3.3.3. Ejemplo de cadenas de documentaci\u00f3n NumPy/SciPy","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\n\nParameters\n----------\nfile_loc : str\n    The file location of the spreadsheet\nprint_cols : bool, optional\n    A flag used to print the columns to the console (default is False)\n\nReturns\n-------\nlist\n    a list of strings representing the header columns\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#334-ejemplo-de-epitexto","title":"3.3.4. Ejemplo de epitexto","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\n\n@type file_loc: str\n@param file_loc: The file location of the spreadsheet\n@type print_cols: bool\n@param print_cols: A flag used to print the columns to the console\n    (default is False)\n@rtype: list\n@returns: a list of strings representing the header columns\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#4-documentacion-de-sus-proyectos-de-python","title":"4. Documentaci\u00f3n de sus proyectos de Python","text":"<p>Los proyectos de Python vienen en todo tipo de formas, tama\u00f1os y prop\u00f3sitos. La forma en que documente su proyecto debe adaptarse a su situaci\u00f3n espec\u00edfica. Ten en cuenta qui\u00e9nes van a ser los usuarios de tu proyecto y ad\u00e1ptate a sus necesidades. Dependiendo del tipo de proyecto, se recomiendan ciertos aspectos de la documentaci\u00f3n. El dise\u00f1o general del proyecto y su documentaci\u00f3n debe ser el siguiente:</p> <pre><code>project_root/\n\u2502\n\u251c\u2500\u2500 project/  # Project source code\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 HOW_TO_CONTRIBUTE\n\u251c\u2500\u2500 CODE_OF_CONDUCT\n\u251c\u2500\u2500 examples.py\n</code></pre> <p>Los proyectos se pueden subdividir generalmente en tres tipos principales: Privado, Compartido y P\u00fablico/C\u00f3digo Abierto.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#41-proyectos-privados","title":"4.1. Proyectos Privados","text":"<p>Los proyectos privados son proyectos destinados solo para uso personal y, por lo general, no se comparten con otros usuarios o desarrolladores. La documentaci\u00f3n puede ser bastante ligera en este tipo de proyectos. La documentaci\u00f3n recomendada para este tipo de proyectos, seg\u00fan sea necesario:</p> <ul> <li>Readme.md: un breve resumen del proyecto y su prop\u00f3sito. Incluya cualquier requisito especial para la instalaci\u00f3n u operaci\u00f3n del proyecto.</li> <li><code>examples.py</code>: un archivo de secuencia de comandos de Python que brinda ejemplos simples de c\u00f3mo usar el proyecto.</li> </ul> <p>Recuerda, aunque los proyectos privados est\u00e1n destinados a ti, tambi\u00e9n eres considerado un usuario. Piense en cualquier cosa que pueda resultarle confusa en el futuro y aseg\u00farese de capturarla en comentarios, docstring o el archivo Readme.md.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#42-proyectos-compartidos","title":"4.2. Proyectos Compartidos","text":"<p>Los proyectos compartidos son proyectos en los que colaboras con otras personas en el desarrollo y/o uso del proyecto. El \"cliente\" o usuario del proyecto sigue siendo usted mismo y otros desarrolladores que utilizan el proyecto.</p> <p>La documentaci\u00f3n debe ser un poco m\u00e1s rigurosa de lo que debe ser para un proyecto privado, principalmente para ayudar a incorporar nuevos miembros al proyecto o alertar a los contribuyentes/usuarios de nuevos cambios en el proyecto. La documentaci\u00f3n recomendada para estos proyectos es la siguiente:</p> <ul> <li>Readme.md: un breve resumen del proyecto y su prop\u00f3sito. Incluya cualquier requisito especial para instalar u operar el proyecto. Adem\u00e1s, agregue cualquier cambio importante desde la versi\u00f3n anterior.</li> <li><code>examples.py</code>: un archivo de secuencia de comandos de Python que brinda ejemplos simples de c\u00f3mo usar los proyectos.</li> <li>C\u00f3mo contribuir: esto debe incluir c\u00f3mo los nuevos contribuyentes al proyecto pueden comenzar a contribuir.</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#43-proyectos-publicos-y-de-codigo-abierto","title":"4.3. Proyectos p\u00fablicos y de c\u00f3digo abierto","text":"<p>Los proyectos p\u00fablicos y de c\u00f3digo abierto son proyectos que est\u00e1n destinados a compartirse con un gran grupo de usuarios y pueden involucrar a grandes equipos de desarrollo. Estos proyectos deben otorgar una prioridad tan alta a la documentaci\u00f3n del proyecto como al desarrollo real del proyecto en s\u00ed. La documentaci\u00f3n recomendada para estos proyectos es las siguiente:</p> <ul> <li>Readme.md: un breve resumen del proyecto y su prop\u00f3sito. Incluya cualquier requisito especial para instalar u operar los proyectos. Adem\u00e1s, agregue cualquier cambio importante desde la versi\u00f3n anterior. Finalmente, agregue enlaces a documentaci\u00f3n adicional, informes de errores y cualquier otra informaci\u00f3n importante para el proyecto. Dan Bader ha elaborado un excelente tutorial sobre todo lo que debe incluirse en su archivo L\u00e9ame.</li> <li>C\u00f3mo contribuir: esto debe incluir c\u00f3mo pueden ayudar los nuevos contribuyentes al proyecto. Esto incluye el desarrollo de nuevas funciones, la soluci\u00f3n de problemas conocidos, la adici\u00f3n de documentaci\u00f3n, la adici\u00f3n de nuevas pruebas o la notificaci\u00f3n de problemas.</li> <li>C\u00f3digo de conducta: define c\u00f3mo deben comportarse los dem\u00e1s colaboradores al desarrollar o utilizar su software. Esto tambi\u00e9n establece lo que suceder\u00e1 si este c\u00f3digo no es correcto. Si est\u00e1 utilizando Github, se puede generar una plantilla de C\u00f3digo de conducta con la redacci\u00f3n recomendada. Especialmente para proyectos de c\u00f3digo abierto, considere agregar esto.</li> <li>Licencia: un archivo de texto sin formato que describe la licencia que utiliza su proyecto. Especialmente para proyectos de c\u00f3digo abierto, considere agregar esto.</li> <li>docs: una carpeta que contiene m\u00e1s documentaci\u00f3n. La siguiente secci\u00f3n describe con m\u00e1s detalle qu\u00e9 debe incluirse y c\u00f3mo organizar el contenido de esta carpeta.</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#431-las-cuatro-secciones-principales-de-la-carpeta-docs","title":"4.3.1. Las cuatro secciones principales de la carpeta <code>docs</code>","text":"<p>Daniele Procida dio una maravillosa charla sobre PyCon 2017 y una publicaci\u00f3n de blog posterior sobre la documentaci\u00f3n de proyectos de Python. Menciona que todos los proyectos deben tener las siguientes cuatro secciones principales para ayudarlo a enfocar su trabajo:</p> <ul> <li>Tutoriales: Lecciones que llevan al lector de la mano a trav\u00e9s de una serie de pasos para completar un proyecto (o ejercicio significativo). Orientado al aprendizaje del usuario.</li> <li>Gu\u00edas pr\u00e1cticas: gu\u00edas que llevan al lector a trav\u00e9s de los pasos necesarios para resolver un problema com\u00fan (Recetas orientadas a resolver problemas).</li> <li>Referencias: Explicaciones que aclaran e iluminan un tema en particular. Orientado a la comprensi\u00f3n.</li> <li>Explicaciones: descripciones t\u00e9cnicas de la maquinaria y c\u00f3mo operarla (clases clave, funciones, API, etc.). Art\u00edculo de Think Encyclopedia.</li> </ul> <p>La siguiente tabla muestra c\u00f3mo todas estas secciones se relacionan entre s\u00ed, as\u00ed como su prop\u00f3sito general:</p> M\u00e1s \u00fatil cuando estamos estudiando M\u00e1s \u00fatil cuando estamos programando Paso pr\u00e1ctico Tutoriales Gu\u00edas pr\u00e1cticas Conocimientos te\u00f3ricos Explicaci\u00f3n Referencia <p>Al final, deseas asegurarte de que los usuarios tiene acceso a las respuestas a cualquier pregunta que puedan tener. Al organizar el proyecto de esta manera, podr\u00e1s responder esas preguntas f\u00e1cilmente y en un formato que podr\u00e1n navegar r\u00e1pidamente.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#44-herramientas-y-recursos-de-documentacion","title":"4.4. Herramientas y recursos de documentaci\u00f3n","text":"<p>Documentar su c\u00f3digo, especialmente proyectos grandes, puede ser desalentador. Afortunadamente, existen algunas herramientas y referencias para comenzar:</p> Herramienta Descripci\u00f3n Esfinge Una colecci\u00f3n de herramientas para autogenerar documentaci\u00f3n en m\u00faltiples formatos Epydoc Una herramienta para generar documentaci\u00f3n de API para m\u00f3dulos de Python basada en sus docstrings Leer los documentos Creaci\u00f3n, control de versiones y alojamiento autom\u00e1ticos de sus documentos. dox\u00edgeno Una herramienta para generar documentaci\u00f3n compatible con Python, as\u00ed como con muchos otros lenguajes. MkDocs Un generador de sitios est\u00e1ticos para ayudar a construir la documentaci\u00f3n del proyecto utilizando el lenguaje Markdown. Consulta Crea tu documentaci\u00f3n de proyecto de Python con MkDocs para obtener m\u00e1s informaci\u00f3n. pycco Un generador de documentaci\u00f3n \"r\u00e1pido y sucio\" que muestra el c\u00f3digo y la documentaci\u00f3n uno al lado del otro. Consulta Tutorial sobre c\u00f3mo usar pycco . pydoc El m\u00f3dulo pydoc genera autom\u00e1ticamente documentaci\u00f3n a partir de m\u00f3dulos de Python. La documentaci\u00f3n puede presentarse como p\u00e1ginas de texto en la consola, enviarse a un navegador web o guardarse en archivos HTML. . <p>Junto con estas herramientas, hay algunos tutoriales, videos y art\u00edculos adicionales que pueden ser \u00fatiles cuando est\u00e9 documentando su proyecto:</p> <ol> <li>Carol Willing - Pr\u00e1ctica Esfinge - PyCon 2018</li> <li>Daniele Procida - Desarrollo basado en documentaci\u00f3n - Lecciones del Proyecto Django - PyCon 2016</li> <li>Eric Holscher - Documentando su proyecto con Sphinx &amp; Read the Docs - PyCon 2016</li> <li>Titus Brown, Luiz Irber - Crear, construir, probar y documentar un proyecto de Python: un C\u00d3MO pr\u00e1ctico - PyCon 2016</li> <li>reStructuredText Documentaci\u00f3n Oficial</li> <li>Manual de texto reestructurado de Sphinx</li> <li>El generador de documentaci\u00f3n y sistema de ayuda en l\u00ednea pydoc</li> </ol> <p>A veces, la mejor forma de aprender es imitando a los dem\u00e1s. Aqu\u00ed hay algunos excelentes ejemplos de proyectos que usan bien la documentaci\u00f3n:</p> <ul> <li>Django: Documentos ( Fuente )</li> <li>Solicitudes: Documentos ( Fuente )</li> <li>Haga clic en: Documentos ( Fuente )</li> <li>Pandas: Documentos ( Fuente )</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#5-donde-empiezo","title":"5. \u00bfD\u00f3nde empiezo?","text":"<p>La documentaci\u00f3n de proyectos tiene una progresi\u00f3n sencilla:</p> <ol> <li>Sin documentaci\u00f3n</li> <li>Algo de documentaci\u00f3n</li> <li>Documentaci\u00f3n completa</li> <li>buena documentacion</li> <li>Gran documentaci\u00f3n</li> </ol> <p>Si no sabes por donde empezar con la documentaci\u00f3n, identifica d\u00f3nde se encuentra tu proyecto ahora en relaci\u00f3n con la progresi\u00f3n anterior. \u00bfTienes alguna documentaci\u00f3n? Si no, entonces comience all\u00ed. Si tiene alguna documentaci\u00f3n pero le faltan algunos de los archivos clave del proyecto, comience agreg\u00e1ndolos.</p> <p>Al final, no te desanimes ni te sientas abrumad@ por la cantidad de trabajo que se requiere para documentar el c\u00f3digo. Una vez que comienzas a documentar el c\u00f3digo, ser\u00e1 m\u00e1s f\u00e1cil continuar. </p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#fuente","title":"Fuente","text":"<ul> <li>Documentando c\u00f3digo python</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/","title":"UD 2 - 2.5.1 Deber\u00edas documentar tu c\u00f3digo","text":"","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#251-deberias-documentar-tu-codigo","title":"2.5.1. \u00bfDeber\u00edas documentar tu c\u00f3digo?","text":"<p>Hay programadores que dice que los comentarios son un mal que se deber\u00eda evitar al m\u00e1ximo. Sin embargo, aqu\u00ed proponemos lo contrario:  usa los comentarios correctamente para crear c\u00f3digo mantenible, basados en las ideas de \u2018A Philosophy of Software Design\u2019</p> <p>Cuando hablamos de los comentarios en el c\u00f3digo, hay dos escuelas. La primera dice que debes usar los comentarios para clarificar lo que quisiste expresar con tu c\u00f3digo, mientras que la segunda dice que deber\u00edas evitarlos al m\u00e1ximo y que comentar tu c\u00f3digo es un mal necesario que s\u00f3lo denota tu falta de habilidad para no hacer c\u00f3digo lo suficientemente claro.</p> <p>\u00bfA cu\u00e1l de los dos consejos deber\u00edas hacerle caso? pienso que deber\u00edas ver los comentarios como una herramienta necesaria, valiosa y muy \u00fatil, y c\u00f3mo usarlos para no caer en el extremo que ha llevado a algunas personas a tener una mala actitud hacia ellos.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#1-un-sistema-sin-documentacion-esta-incompleto","title":"1. Un sistema sin documentaci\u00f3n est\u00e1 incompleto","text":"<p>Como futuro desarrollador estar\u00e1s de acuerdo en que un sistema no tiene la calidad suficiente si no cuenta con documentaci\u00f3n, es decir, informaci\u00f3n acerca del sistema que comunique cosas como la raz\u00f3n de existir de ciertos m\u00f3dulos, valores y funciones y c\u00f3mo usarlos. </p> <p>Si, adem\u00e1s, tienes que modificar este sistema, ser\u00e1 una pesadilla entender todo lo que los programadores anteriores hicieron o intentaron hacer. Si tienes que usar algo sin documentaci\u00f3n, es el mismo caso: tienes estudiar el c\u00f3digo para saber como funciona.</p> <p>Por cosas como las anteriores, la documentaci\u00f3n es completamente necesaria para crear programas \u00fatiles. Ahora bien, \u00bfd\u00f3nde ponemos esa documentaci\u00f3n? Muchos desarrolladores y equipos no tienen idea de d\u00f3nde ponerla y crean documentos que dejan despu\u00e9s olvidados en una carpeta en la nube y que nadie encuentra despu\u00e9s. Pero, \u00bfno ser\u00eda m\u00e1s l\u00f3gico mantener la documentaci\u00f3n lo m\u00e1s cerca posible del c\u00f3digo? Eso es precisamente lo que los comentarios te permiten hacer.</p> <p>Puedes usar los comentarios documentar:</p> <ul> <li>Decisiones de dise\u00f1o</li> <li>Explicaciones sobre la existencia, funcionamiento o raz\u00f3n de ser de cierta parte del c\u00f3digo</li> <li>Las interfaces y su ejemplo de uso</li> <li>Efectos de usar cierto c\u00f3digo</li> <li>Partes inconclusas o que se pueden mejorar (TODO\u2019s)</li> </ul> <p>Tener esta informaci\u00f3n muy cerca del c\u00f3digo sobre el que est\u00e1 proporcionando informaci\u00f3n ayudar\u00e1 a que sea f\u00e1cil de encontrar y adem\u00e1s, si se establecen reglas como tratar los comentarios como ciudadanos de primer rango, se mantendr\u00e1 actualizado y \u00fatil.</p> <p>Tambi\u00e9n es buena idea tener un documento o sitio web especializado en documentaci\u00f3n que te ayude a encontrar r\u00e1pido lo que buscas como Docusaurus o un sitio generado por Sophinx. Puedes utilizar esta misma documentaci\u00f3n que escribiste junto al c\u00f3digo si usaste el estilo definido por el lenguaje de programaci\u00f3n o por las herramientas de generaci\u00f3n de documentos.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#11-los-comentarios-te-pueden-ayudar-en-el-futuro","title":"1.1. Los comentarios te pueden ayudar en el futuro","text":"<p>Incluso aunque no los uses formalmente como documentaci\u00f3n, los comentarios estar\u00e1n ah\u00ed para darte informaci\u00f3n y recordarte lo que hiciste, pero sobre todo por qu\u00e9 lo hiciste.</p> <p>Recuerda que la mente humana busca la eficiencia m\u00e1xima de recursos, por lo que es probable que elimine informaci\u00f3n que no ocupe inmediatamente y que no recuerdas a menudo, como por qu\u00e9 esa variable ten\u00eda el valor 730 y no otro.</p> <p>Tu yo futuro y tu equipo te agradecer\u00e1n haber escrito esos comentarios que te informan sobre lo que estabas pensando en el momento que escribiste ese c\u00f3digo.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#12-los-comentarios-son-una-buena-herramienta-de-diseno","title":"1.2. Los comentarios son una buena herramienta de dise\u00f1o","text":"<p>John Ousterhout, en \u201cA Philosophy of Software Design\u201d recomienda empezar con los comentarios antes de programar (de esto hablaremos m\u00e1s adelante). Pero, \u00bfpor qu\u00e9 lo recomienda?</p> <p>Escribir en un lenguaje humano c\u00f3mo funciona algo antes de implementarlo realmente, te da la capacidad de ver si es l\u00f3gico y suficiente, adem\u00e1s te permite ponerte en los zapatos del usuario para notar deficiencias sobre todo en la interfaz. Los comentarios de interfaz es lo primero que deber\u00edas crear porque te servir\u00e1n de gu\u00eda para avanzar con tu dise\u00f1o y, sobre todo, que sea l\u00f3gico y f\u00e1cil de usar.</p> <p>Una buena gu\u00eda: si no eres capaz de crear un comentario concreto y corto sobre c\u00f3mo funciona o por qu\u00e9 existe algo, lo m\u00e1s probable es que tengas que re-pensar tu dise\u00f1o.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#13-el-lenguaje-de-programacion-no-es-suficiente-para-expresar-todo-lo-necesario","title":"1.3. El lenguaje de programaci\u00f3n no es suficiente para expresar todo lo necesario","text":"<p>Todos los lenguajes de programaci\u00f3n est\u00e1n pensados para ser un subconjunto del lenguaje humano que elimine las ambig\u00fcedades, manteniendo el mayor poder expresivo posible. Esto nos lleva a sus limitantes: es imposible, o por lo menos impr\u00e1ctico, intentar expresar todas las ideas con el c\u00f3digo.</p> <p>En la pr\u00e1ctica, el tiempo y los recursos para lograr algo son limitados, por lo que a veces es m\u00e1s conveniente y f\u00e1cil para todos explicar lenguaje humano algo que intentar expresarlo con c\u00f3digo, como los puristas afirman.</p> <p>No te sientas mal si tienes que recurrir de vez en cuando a explicar la forma en que funciona algo, siempre y cuando no sea la pr\u00e1ctica com\u00fan.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#2-como-usar-los-comentarios-para-que-sean-valiosos","title":"2. \u00bfC\u00f3mo usar los comentarios para que sean valiosos?","text":"<p>No todos los comentarios son valiosos, hay algunos que pueden estorbar m\u00e1s de lo que ayudan, por ejemplo, los que no aportan informaci\u00f3n a lo que es obvio en el c\u00f3digo.</p> <p>Hablemos de algunas formas de aprovecharlos lo mejor posible para que contribuyan positivamente a aumentar la calidad del proyecto.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#21-escribe-los-comentarios-primero","title":"2.1. Escribe los comentarios primero","text":"<p>Una de las partes m\u00e1s importantes de los comentarios como documentaci\u00f3n es que deben ser concretos, cercanos a la realidad y que proporcionen la mayor cantidad de informaci\u00f3n \u00fatil posible.</p> <p>Para lograr esto, se tienen que crear lo m\u00e1s cerca que puedas a la creaci\u00f3n del c\u00f3digo. Pero como todos sabemos que despu\u00e9s de escribir y probar (b\u00e1sicamente) el c\u00f3digo vamos a sentir que ya est\u00e1 terminado, es buena pr\u00e1ctica obligarte a escribirlos antes, justo como propone TDD con las pruebas.</p> <p>De esta manera te asegurar\u00e1s que tu c\u00f3digo est\u00e9 documentado incluso antes de escribirlo y te servir\u00e1n como una herramienta de dise\u00f1o que te ayudar\u00e1 a pensar mejor en la usabilidad de tus m\u00f3dulos y piezas de software.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#22-crea-comentarios-acerca-de-la-interfaz","title":"2.2. Crea comentarios acerca de la interfaz","text":"<p>La interfaz es el medio de uso que tus m\u00f3dulos o funciones presentan para que las dem\u00e1s partes de tu sistema lo usen. Lo primero que deber\u00edas documentar y explicar es esta interfaz, para que m\u00e1s personas a parte de ti puedan usar este pedazo de c\u00f3digo.</p> <p>Debes escribir comentarios claros sobre:</p> <ul> <li>C\u00f3mo usar esa pieza de c\u00f3digo</li> <li>Por qu\u00e9 existe esa parte del sistema</li> <li>Qu\u00e9 efectos tiene usarla</li> </ul> <p>Este tipo de comentarios son los que aportan mayor valor al sistema y si est\u00e1n lo suficientemente completos, con ejemplos y explicaciones claras, son una documentaci\u00f3n v\u00e1lida que est\u00e1 en un muy buen lugar: es f\u00e1cil de encontrar y no se va a perder enterrada entre otros documentes que despu\u00e9s nadie va a consultar.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#evita-los-comentarios-sobre-la-implementacion","title":"Evita los comentarios sobre la implementaci\u00f3n","text":"<p>Los comentarios sobre la implementaci\u00f3n son aquello que describen qu\u00e9 estas haciendo, como por ejemplo, sumar n\u00famero, abrir un archivo, etc. Estos comentarios normalmente son innecesarios, ya que lo que se est\u00e1 haciendo es obvio si el c\u00f3digo es lo suficientemente expresivo y siempre deber\u00edamos buscar que sea as\u00ed.</p> <p>De hecho, estos son los comentarios que hacen que la gente odie a los comentarios en general, pues en vez de proporcionar informaci\u00f3n extra son una carga que hay que mantener y pueden confundir si no son actualizados.</p> <p>Si realmente sientes que tienes que explicar qu\u00e9 est\u00e1s haciendo con cierta pieza de c\u00f3digo, primero preg\u00fantate si no hay una manera de reescribirlo para que sea obvio. Si no existe o no es pr\u00e1ctica esta soluci\u00f3n, entonces escribe el comentario de la manera m\u00e1s concisa posible, incluyendo la raz\u00f3n de la existencia de ese c\u00f3digo.</p> <p>Para hacer esto debes tomar muy en cuenta los recursos del proyecto: no te puedes tardar el triple del tiempo implementando la pieza de c\u00f3digo perfecta porque no quieres escribir un comentario que explique c\u00f3mo funciona.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#3-conclusion","title":"3. Conclusi\u00f3n","text":"<p>Escribir comentarios es una de las grandes tareas que los programadores debemos dominar. Los lenguajes de programaci\u00f3n y los entornos de programaci\u00f3n cada vez le dan m\u00e1s poder a esta parte de los programas y permiten incluso escribir pruebas en ellos, generar documentaci\u00f3n autom\u00e1tica y listar tareas a partir de ellos.</p> <p>Si pones el suficiente esmero en aprender a escribir buenos comentarios y mantenerlos, ser\u00e1n una gran herramienta de dise\u00f1o y documentaci\u00f3n de tu software.</p> <p>Este art\u00edculo est\u00e1 basado en las ideas del \u201cA Philosophy of Software Design de John Ousterhout\u201d, en el que se le dedican 4 cap\u00edtulos al buen uso de los comentarios.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.1.-DeberiasDocumentar/#fuente","title":"Fuente","text":"<ul> <li>\u00bfDeber\u00edas documentar tu c\u00f3digo? - H\u00e9ctor Patricio</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u03/","title":"UD 3 - Estructuras de datos","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u03/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u03/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 6. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos.</p>","tags":["Software"]},{"location":"section1/u03/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han escrito programas que utilicen arrays</li> <li>b) Se han reconocido las librer\u00edas de clases relacionadas con tipos de datos avanzados.</li> <li>c) Se han utilizado listas para almacenar y procesar informaci\u00f3n.</li> <li>d) Se han utilizado iteradores para recorrer los elementos de las listas.</li> <li>e) Se han reconocido las caracter\u00edsticas y ventajas de cada una de la colecciones de datos disponibles.</li> <li>(NO) f) Se han creado clases y m\u00e9todos gen\u00e9ricos.</li> <li>g) Se han utilizado expresiones regulares en la b\u00fasqueda de patrones en cadenas de texto.</li> <li>(NO) h) Se han identificado las clases relacionadas con el tratamiento de documentos XML.</li> <li>(NO) i) Se han realizado programas que realicen manipulaciones sobre documentos XML.</li> </ul>","tags":["Software"]},{"location":"section1/u03/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 2</p> <ul> <li>U3: Estructuras de datos. </li> </ul> <p>En la Unidad 3, veremos:</p> <ul> <li>Listas y tuplas</li> <li>Diccionarios</li> <li>Conjuntos</li> <li>String</li> <li>Expresiones regulares</li> </ul>","tags":["Software"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/","title":"UD 3 - P0: Cadenas","text":"","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#p30-ejercicios","title":"P3.0 - Ejercicios","text":"","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-301","title":"Ejercicio 3.0.1","text":"<p>Escribe un bucle <code>while</code> que comience con el \u00faltimo car\u00e1cter en la cadena y haga un recorrido hacia atr\u00e1s hasta el primer car\u00e1cter en la cadena, imprimiendo cada letra en una l\u00ednea independiente.</p>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-302","title":"Ejercicio 3.0.2","text":"<p>Dado que <code>fruta</code> es una variable de tipo cadena, \u00bfqu\u00e9 significa <code>fruta[:]</code>?</p>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-303","title":"Ejercicio 3.0.3","text":"<p>Tienes este c\u00f3digo: <pre><code>palabra = 'banana'\ncontador = 0\nfor letra in palabra:\n    if letra == 'a':\n        contador = contador + 1\nprint(contador)\n</code></pre> Encaps\u00falalo en una funci\u00f3n llamada <code>cuenta</code>, y hazla gen\u00e9rica de tal modo que pueda aceptar una cadena y una letra como argumentos. De tal forma que pueda hacer la siguiente llamada:</p> <pre><code>numero_de_os = cuenta(\"consuelo\",\"o\") # Resultado debe ser 2\n</code></pre>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-304","title":"Ejercicio 3.0.4","text":"<p>Hay un m\u00e9todo de cadenas llamado <code>find</code>, que es similar a <code>count</code>. Lee la documentaci\u00f3n de este m\u00e9todo en:     </p> <ul> <li>M\u00e9todos en ingles</li> <li>M\u00e9todos en castellano</li> </ul> <p>Escribe el c\u00f3digo necesario para invocar a este m\u00e9todo <code>find</code> y contar el n\u00famero de veces que una letra aparece en \u201cbanana\u201d.</p>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-311","title":"Ejercicio 3.1.1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-312","title":"Ejercicio 3.1.2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-313","title":"Ejercicio 3.1.3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-314","title":"Ejercicio 3.1.4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-315","title":"Ejercicio 3.1.5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-316","title":"Ejercicio 3.1.6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-317","title":"Ejercicio 3.1.7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-318","title":"Ejercicio 3.1.8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-319","title":"Ejercicio 3.1.9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-3110","title":"Ejercicio 3.1.10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-3111","title":"Ejercicio 3.1.11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-3112","title":"Ejercicio 3.1.12","text":"<p>Escribir un programa que almacene las matrices </p> <p>matriz 2x3 <pre><code>A=  \n 1, 2, 3\n 4, 5, 6\n</code></pre></p> <p>matriz 3x2 <pre><code>B=  \n\u22121, 0    \n 0, 1\n 1, 1\n</code></pre></p> <p>en una lista y muestre por pantalla su producto. El resultado debe ser una matriz de 2x2.</p> <p>Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p> <p>Prueba ahora con estas matrices </p> <p>El resultado debe ser una matriz de 3x3.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-3113","title":"Ejercicio 3.1.13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/","title":"UD 3 - P2: Diccionarios","text":"","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#p32-ejercicios-diccionarios","title":"P3.2 - Ejercicios: Diccionarios","text":"","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-321","title":"Ejercicio 3.2.1","text":"<p>Escribir un programa que guarde en una variable el diccionario <code>{'Euro':'\u20ac', 'Dollar':'$', 'Yen':'\u00a5'}</code>, pregunte al usuario por una divisa y muestre su s\u00edmbolo o un mensaje de aviso si la divisa no est\u00e1 en el diccionario.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-322","title":"Ejercicio 3.2.2","text":"<p>Escribir un programa que pregunte al usuario su nombre, edad, direcci\u00f3n y tel\u00e9fono y lo guarde en un diccionario. Despu\u00e9s debe mostrar por pantalla el mensaje <code>&lt;nombre&gt; tiene &lt;edad&gt; a\u00f1os, vive en &lt;direcci\u00f3n&gt; y su n\u00famero de tel\u00e9fono es &lt;tel\u00e9fono&gt;</code>.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-323","title":"Ejercicio 3.2.3","text":"<p>Escribir un programa que guarde en un diccionario los precios de las frutas de la tabla, pregunte al usuario por una fruta, un n\u00famero de kilos y muestre por pantalla el precio de ese n\u00famero de kilos de fruta. Si la fruta no est\u00e1 en el diccionario debe mostrar un mensaje informando de ello.</p> Fruta Precio Pl\u00e1tano 1.35 Manzana 0.80 Pera 0.85 Naranja 0.70","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-324","title":"Ejercicio 3.2.4","text":"<p>Escribir un programa que pregunte una fecha en formato <code>dd/mm/aaaa</code> y muestre por pantalla la misma fecha en formato <code>dd de &lt;mes&gt; de aaaa</code> donde <code>&lt;mes&gt;</code> es el nombre del mes.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-325","title":"Ejercicio 3.2.5","text":"<p>Escribir un programa que almacene el diccionario con los cr\u00e9ditos de las asignaturas de un curso <code>{'Matem\u00e1ticas': 6, 'F\u00edsica': 4, 'Qu\u00edmica': 5}</code> y despu\u00e9s muestre por pantalla los cr\u00e9ditos de cada asignatura en el formato <code>&lt;asignatura&gt; tiene &lt;cr\u00e9ditos&gt; cr\u00e9ditos</code>, donde <code>&lt;asignatura&gt;</code> es cada una de las asignaturas del curso, y <code>&lt;cr\u00e9ditos&gt;</code> son sus cr\u00e9ditos. Al final debe mostrar tambi\u00e9n el n\u00famero total de cr\u00e9ditos del curso.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-326","title":"Ejercicio 3.2.6","text":"<p>Escribir un programa que cree un diccionario vac\u00edo y lo vaya llenado con informaci\u00f3n sobre una persona (por ejemplo nombre, edad, sexo, tel\u00e9fono, correo electr\u00f3nico, etc.) que se le pida al usuario. Cada vez que se a\u00f1ada un nuevo dato debe imprimirse el contenido del diccionario.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-327","title":"Ejercicio 3.2.7","text":"<p>Escribir un programa que cree un diccionario simulando una cesta de la compra. El programa debe preguntar el art\u00edculo y su precio y a\u00f1adir el par al diccionario, hasta que el usuario decida terminar. Despu\u00e9s se debe mostrar por pantalla la lista de la compra y el coste total, con el siguiente formato</p> Lista de la compra Art\u00edculo 1 Precio Art\u00edculo 2 Precio Art\u00edculo 3 Precio \u2026 \u2026 Total Coste","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-328","title":"Ejercicio 3.2.8","text":"<p>Escribir un programa que cree un diccionario de traducci\u00f3n espa\u00f1ol-ingl\u00e9s. El usuario introducir\u00e1 las palabras en espa\u00f1ol e ingl\u00e9s separadas por dos puntos, y cada par <code>&lt;palabra&gt;:&lt;traducci\u00f3n&gt;</code> separados por comas. El programa debe crear un diccionario con las palabras y sus traducciones. Despu\u00e9s pedir\u00e1 una frase en espa\u00f1ol y utilizar\u00e1 el diccionario para traducirla palabra a palabra. Si una palabra no est\u00e1 en el diccionario debe dejarla sin traducir.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-329","title":"Ejercicio 3.2.9","text":"<p>Escribir un programa que gestione las facturas pendientes de cobro de una empresa. Las facturas se almacenar\u00e1n en un diccionario donde la clave de cada factura ser\u00e1 el n\u00famero de factura y el valor el coste de la factura. El programa debe preguntar al usuario si quiere a\u00f1adir una nueva factura, pagar una existente o terminar. Si desea a\u00f1adir una nueva factura se preguntar\u00e1 por el n\u00famero de factura y su coste y se a\u00f1adir\u00e1 al diccionario. Si se desea pagar una factura se preguntar\u00e1 por el n\u00famero de factura y se eliminar\u00e1 del diccionario. Despu\u00e9s de cada operaci\u00f3n el programa debe mostrar por pantalla la cantidad cobrada hasta el momento y la cantidad pendiente de cobro.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-3210","title":"Ejercicio 3.2.10","text":"<p>Escribir un programa que permita gestionar la base de datos de clientes de una empresa. Los clientes se guardar\u00e1n en un diccionario en el que la clave de cada cliente ser\u00e1 su NIF, y el valor ser\u00e1 otro diccionario con los datos del cliente (nombre, direcci\u00f3n, tel\u00e9fono, correo, preferente), donde preferente tendr\u00e1 el valor <code>True</code> si se trata de un cliente preferente. El programa debe preguntar al usuario por una opci\u00f3n del siguiente men\u00fa: (1) A\u00f1adir cliente, (2) Eliminar cliente, (3) Mostrar cliente, (4) Listar todos los clientes, (5) Listar clientes preferentes, (6) Terminar. En funci\u00f3n de la opci\u00f3n elegida el programa tendr\u00e1 que hacer lo siguiente:</p> <ol> <li>Preguntar los datos del cliente, crear un diccionario con los datos y a\u00f1adirlo a la base de datos.</li> <li>Preguntar por el NIF del cliente y eliminar sus datos de la base de datos.</li> <li>Preguntar por el NIF del cliente y mostrar sus datos.</li> <li>Mostrar lista de todos los clientes de la base datos con su NIF y nombre.</li> <li>Mostrar la lista de clientes preferentes de la base de datos con su NIF y nombre.</li> <li>Terminar el programa.</li> </ol>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-3211","title":"Ejercicio 3.2.11","text":"<p>El directorio de los clientes de una empresa est\u00e1 organizado en una cadena de texto como la de m\u00e1s abajo, donde cada l\u00ednea contiene la informaci\u00f3n del nombre, email, tel\u00e9fono, nif, y el descuento que se le aplica. Las l\u00edneas se separan con el car\u00e1cter de cambio de l\u00ednea <code>\\n</code> y la primera l\u00ednea contiene los nombres de los campos con la informaci\u00f3n contenida en el directorio.</p> <pre><code>\"nif;nombre;email;tel\u00e9fono;descuento\\n01234567L;Luis Gonz\u00e1lez;luisgonzalez@mail.com;656343576;12.5\\n71476342J;Macarena Ram\u00edrez;macarena@mail.com;692839321;8\\n63823376M;Juan Jos\u00e9 Mart\u00ednez;juanjo@mail.com;664888233;5.2\\n98376547F;Carmen S\u00e1nchez;carmen@mail.com;667677855;15.7\"\n</code></pre> <p>Escribir un programa que genere un diccionario con la informaci\u00f3n del directorio, donde cada elemento corresponda a un cliente y tenga por clave su nif y por valor otro diccionario con el resto de la informaci\u00f3n del cliente. Los diccionarios con la informaci\u00f3n de cada cliente tendr\u00e1n como claves los nombres de los campos y como valores la informaci\u00f3n de cada cliente correspondientes a los campos. Es decir, un diccionario como el siguiente</p> <pre><code>{'01234567L': {'nombre': 'Luis Gonz\u00e1lez', 'email': 'luisgonzalez@mail.com', 'tel\u00e9fono': '656343576', 'descuento': 12.5}, '71476342J': {'nombre': 'Macarena Ram\u00edrez', 'email': 'macarena@mail.com', 'tel\u00e9fono': '692839321', 'descuento': 8.0}, '63823376M': {'nombre': 'Juan Jos\u00e9 Mart\u00ednez', 'email': 'juanjo@mail.com', 'tel\u00e9fono': '664888233', 'descuento': 5.2}, '98376547F': {'nombre': 'Carmen S\u00e1nchez', 'email': 'carmen@mail.com', 'tel\u00e9fono': '667677855', 'descuento': 15.7}}\n</code></pre>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/","title":"UD 3 - P3: Conjuntos","text":"","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#p33-ejercicios-conjuntos","title":"P3.3 - Ejercicios: Conjuntos","text":"","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-331","title":"Ejercicio 3.3.1","text":"<p>Suponer una lista con datos de las compras hechas por clientes de una empresa a lo largo de un mes, la cual contiene tuplas con informaci\u00f3n de cada venta: (cliente, d\u00eda del mes, monto, domicilio del cliente). Ejemplo:</p> <pre><code>[(\"Nuria Costa\", 5, 12780.78, \"Calle Las Flores 355\"), (\"Jorge Russo\", 7, 699, \"Mirasol 218\"), (\"Nuria Costa\", 7, 532.90, \"Calle Las Flores 355\"), (\"Juli\u00e1n Rodriguez\", 12, 5715.99, \"La Mancha 761\"), (\"Jorge Russo\", 15, 958, \"Mirasol 218\")]\n</code></pre> <p>Escribir una funci\u00f3n que reciba como par\u00e1metro una lista con el formato mencionado anteriormente y retorne los domicilios de cada cliente al cual se le debe enviar una factura de compra. Notar que cada cliente puede haber hecho m\u00e1s de una compra en el mes, por lo que la funci\u00f3n debe retornar una estructura que contenga cada domicilio una sola vez.</p>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-332","title":"Ejercicio 3.3.2","text":"<p>Solicitar al usuario que introduzca los nombres de pila de los alumnos de primaria de una escuela, finalizando cuando se introduzca \u201cx\u201d. A continuaci\u00f3n, solicitar que introduzca los nombres de los alumnos de secundaria, finalizando al introducir \u201cx\u201d.</p> <ul> <li>Mostrar los nombres de todos los alumnos de primaria y los de secundaria, sin repeticiones.</li> <li>Mostrar qu\u00e9 nombres se repiten entre los alumnos de primaria y secundaria.</li> <li>Mostrar qu\u00e9 nombres de primaria no se repiten en los de nivel secundaria.</li> <li>Mostrar si todos los nombres de primaria est\u00e1n incluidos en secundaria.</li> </ul>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-333","title":"Ejercicio 3.3.3","text":"<p>El conjunto potencia de un conjunto S es el conjunto de todos los subconjuntos de S.</p> <p>Por ejemplo, el conjunto potencia de <code>{1,2,3}</code> es:</p> <pre><code>{\u2205,{1},{2},{3},{1,2},{1,3},{2,3},{1,2,3}}\n</code></pre> <p>Escriba la funci\u00f3n <code>conjunto_potencia(s)</code> que reciba como par\u00e1metro un conjunto cualquiera <code>s</code> y retorne su \u00ablista potencia\u00bb (la lista de todos sus subconjuntos):</p> <pre><code>&gt;&gt;&gt; conjunto_potencia({6, 1, 4})\n[set(), set([6]), set([1]), set([4]), set([6, 1]), set([6, 4]), set([1, 4]), set([6, 1, 4])]\n</code></pre>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-334","title":"Ejercicio 3.3.4","text":"<p>Dadas las siguientes listas:</p> <pre><code>frutas1 = [\"manzana\", \"pera\", \"naranja\", \"pl\u00e1tano\", \"uva\"]\nfrutas2 = [\"manzana\", \"pera\", \"durazno\", \"sand\u00eda\", \"uva\"]\n</code></pre> <ol> <li>Crea conjuntos a partir de estas listas y n\u00f3mbralos <code>set_frutas1</code> y <code>set_frutas2</code>.</li> <li>Encuentra las frutas que est\u00e1n en ambas listas y gu\u00e1rdalas en un nuevo conjunto llamado <code>frutas_comunes</code>.</li> <li>Encuentra las frutas que est\u00e1n en <code>frutas1</code> pero no en <code>frutas2</code> y gu\u00e1rdalas en un conjunto llamado <code>frutas_solo_en_frutas1</code>.</li> <li>Encuentra las frutas que est\u00e1n en <code>frutas2</code> pero no en <code>frutas1</code> y gu\u00e1rdalas en un conjunto llamado <code>frutas_solo_en_frutas2</code>.</li> </ol>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-335","title":"Ejercicio 3.3.5","text":"<p>Dado el conjunto de n\u00fameros enteros:</p> <pre><code>numeros = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n</code></pre> <ol> <li>Crea un conjunto <code>pares</code> que contenga los n\u00fameros pares del conjunto <code>numeros</code>.</li> <li>Crea un conjunto <code>multiplos_de_tres</code> que contenga los n\u00fameros que son m\u00faltiplos de tres del conjunto <code>numeros</code>.</li> <li>Encuentra la intersecci\u00f3n entre los conjuntos <code>pares</code> y <code>multiplos_de_tres</code> y gu\u00e1rdala en un conjunto llamado <code>pares_y_multiplos_de_tres</code>.</li> </ol>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-336","title":"Ejercicio 3.3.6","text":"<p>Dado el conjunto de letras:</p> <pre><code>vocales = {'a', 'e', 'i', 'o', 'u'}\n</code></pre> <ol> <li>Crea un conjunto <code>consonantes</code> que contenga las letras del alfabeto que no son vocales.</li> <li>Crea un conjunto <code>letras_comunes</code> que contenga las letras que est\u00e1n tanto en el conjunto <code>vocales</code> como en el conjunto <code>consonantes</code>.</li> </ol> <p>Estos ejercicios te ayudar\u00e1n a practicar y comprender mejor c\u00f3mo trabajar con conjuntos en Python. \u00a1Espero que te sean \u00fatiles!  Si tienes alguna pregunta o necesitas m\u00e1s ejercicios, no dudes en dec\u00edrmelo.</p>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica004/","title":"UD 3 - P4: JSON","text":"","tags":["Software","Ejercicios","JSON"]},{"location":"section1/u03/practica/PROG-U3.-Practica004/#p34-practica-de-json","title":"P3.4 - Pr\u00e1ctica de JSON","text":"","tags":["Software","Ejercicios","JSON"]},{"location":"section1/u03/practica/PROG-U3.-Practica004/#1-manejo-de-archivos-json","title":"1. Manejo de Archivos JSON","text":"<p>Completa el c\u00f3digo del ejemplo \"Gesti\u00f3n de usuarios\" para ampliar la funcionalidad del programa implementando las siguientes funciones: </p> <ol> <li> <p><code>mostrar_datos</code>: que mostrar\u00e1 de forma organizada el contenido del archivo JSON.</p> </li> <li> <p><code>inicializar_datos</code>: que copiar\u00e1 el contenido del archivo origen (<code>datos_usuarios_orig.json</code>) a otro archivo destino (<code>datos_usuarios.json</code>).</p> </li> </ol> <p>Al finalizar la actividad, deber\u00e1s integrar estas funciones en el programa principal (<code>main</code>) y probarlas en diferentes escenarios.</p>","tags":["Software","Ejercicios","JSON"]},{"location":"section1/u03/practica/PROG-U3.-Practica004/#instrucciones","title":"Instrucciones","text":"<ol> <li> <p>Preparar el Entorno:</p> </li> <li> <p>Aseg\u00farate de tener los archivos <code>datos_usuarios_orig.json</code> y <code>datos_usuarios.json</code> en el mismo directorio que tu c\u00f3digo.</p> </li> <li> <p>Si no existe, crea el archivo <code>datos_usuarios_orig.json</code> con el siguiente contenido inicial:</p> </li> </ol> <pre><code>{\n    \"usuarios\": [\n        {\"id\": 1, \"nombre\": \"Juan\", \"edad\": 30},\n        {\"id\": 2, \"nombre\": \"Ana\", \"edad\": 25}\n    ]\n}\n</code></pre> <p>Con esta modificaci\u00f3n que vas a realizar en el programa, el archivo <code>datos_usuarios.json</code> puede estar vac\u00edo o no existir al comenzar.</p> <ol> <li> <p>Implementar la Funci\u00f3n <code>mostrar_datos</code>:</p> </li> <li> <p>Crea una funci\u00f3n llamada <code>mostrar_datos</code> que reciba un diccionario y muestre su contenido de forma organizada en consola.</p> </li> <li> <p>La funci\u00f3n debe:</p> <ul> <li> <p>Imprimir los datos de cada usuario con el formato: <code>ID: &lt;id&gt;, Nombre: &lt;nombre&gt;, Edad: &lt;edad&gt;</code>.</p> </li> <li> <p>Mostrar un mensaje si no hay usuarios en el archivo.</p> </li> </ul> </li> <li> <p>Ejemplo de salida si el archivo contiene datos:</p> <pre><code>--- Contenido Actual del JSON ---\nID: 1, Nombre: Juan, Edad: 30\nID: 2, Nombre: Ana, Edad: 25\n--- Fin del Contenido ---\n</code></pre> </li> <li> <p>Implementar la Funci\u00f3n <code>inicializar_datos</code>:</p> </li> <li> <p>Crea una funci\u00f3n llamada <code>inicializar_datos</code> que copie el contenido de <code>datos_orig.json</code> a <code>datos.json</code>.</p> </li> <li> <p>La funci\u00f3n debe manejar los siguientes errores:</p> <ul> <li> <p>El archivo origen no existe.</p> </li> <li> <p>El archivo origen tiene un formato JSON inv\u00e1lido.</p> </li> </ul> </li> <li> <p>Si la copia es exitosa, debe mostrar el mensaje:</p> <pre><code>Datos inicializados desde 'datos_usuarios_orig.json' a 'datos_usuarios.json'.\n</code></pre> </li> <li> <p>Modificar la Funci\u00f3n <code>main</code>:</p> </li> <li> <p>Aseg\u00farate de que <code>main</code> siga este flujo de ejecuci\u00f3n:</p> <ol> <li> <p>Limpiar la consola.</p> </li> <li> <p>Ejecutar la funci\u00f3n <code>inicializar_datos</code> para copiar el contenido inicial.</p> </li> <li> <p>Cargar los datos desde <code>datos_usuarios.json</code> utilizando la funci\u00f3n <code>cargar_json</code>.</p> </li> <li> <p>Mostrar el contenido inicial del archivo JSON utilizando <code>mostrar_datos</code>.</p> </li> <li> <p>Realizar una pausa hasta que se pulse una tecla.</p> </li> <li> <p>Realizar las siguientes operaciones, mostrando los datos al finalizar cada operaci\u00f3n y realizando una pausa:</p> <ul> <li> <p>Actualizar la edad de un usuario.</p> </li> <li> <p>Insertar un nuevo usuario.</p> </li> <li> <p>Eliminar un usuario.</p> </li> </ul> </li> <li> <p>Guardar los datos modificados nuevamente en <code>datos_usuarios.json</code>.</p> </li> <li> <p>A tener en cuenta a la hora de implementar el c\u00f3digo, siempre que se muestran los datos se realiza una pausa.</p> </li> </ol> </li> <li> <p>Prueba tu Programa:</p> </li> <li> <p>Aseg\u00farate de que las funciones cumplen con lo esperado en estos escenarios:</p> <ul> <li> <p><code>datos_usuarios_orig.json</code> no existe (\"ERROR El archivo origen '{archivo_origen}' no existe. No se realiz\u00f3 la copia.\")</p> </li> <li> <p><code>datos_usuarios_orig.json</code> tiene un formato inv\u00e1lido (\"ERROR El archivo origen '{archivo_origen}' tiene un formato JSON inv\u00e1lido.\")</p> </li> <li> <p><code>datos_usuarios.json</code> no contiene usuarios (\"ERROR El archivo JSON no contiene usuarios!\")</p> </li> </ul> </li> <li> <p>Salida esperada del programa:</p> </li> </ol> <pre><code>Datos inicializados desde 'src/otros/datos_usuarios_orig.json' a 'src/otros/datos_usuarios.json'.\n\n--- Contenido Actual del JSON ---\nID: 1, Nombre: Juan, Edad: 30\nID: 2, Nombre: Ana, Edad: 25\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . .\n\nUsuario con ID 1 actualizado.\n\n--- Contenido Actual del JSON ---\nID: 1, Nombre: Juan, Edad: 31\nID: 2, Nombre: Ana, Edad: 25\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . . \n\nUsuario Pedro a\u00f1adido con \u00e9xito.\n\n--- Contenido Actual del JSON ---\nID: 1, Nombre: Juan, Edad: 31\nID: 2, Nombre: Ana, Edad: 25\nID: 3, Nombre: Pedro, Edad: 40\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . . \n\nUsuario con ID 2 eliminado.\n\n--- Contenido Actual del JSON ---\nID: 1, Nombre: Juan, Edad: 31\nID: 3, Nombre: Pedro, Edad: 40\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . . \n\nOperaciones completadas. Archivo actualizado.\n</code></pre>","tags":["Software","Ejercicios","JSON"]},{"location":"section1/u03/practica/PROG-U3.-Practica004/#notas-adicionales","title":"Notas Adicionales","text":"<ul> <li>Utiliza las funciones auxiliares <code>limpiar_consola</code> y <code>pausar</code> para mejorar la legibilidad en consola.</li> <li>En caso de errores, imprime mensajes claros y espec\u00edficos.</li> <li>Aseg\u00farate de probar tu programa en diferentes escenarios para validarlo correctamente.</li> </ul>","tags":["Software","Ejercicios","JSON"]},{"location":"section1/u03/practica/PROG-U3.-Practica005/","title":"UD 3 - P5: XML","text":"","tags":["Software","Ejercicios","XML"]},{"location":"section1/u03/practica/PROG-U3.-Practica005/#p35-practica-de-xml","title":"P3.5 - Pr\u00e1ctica de XML","text":"","tags":["Software","Ejercicios","XML"]},{"location":"section1/u03/practica/PROG-U3.-Practica005/#1-manejo-de-archivos-xml","title":"1. Manejo de Archivos XML","text":"<p>Completa el c\u00f3digo del ejemplo \"Gesti\u00f3n de usuarios\" para ampliar la funcionalidad del programa implementando las siguientes funciones: </p> <ol> <li> <p><code>mostrar_datos</code>: que mostrar\u00e1 de forma organizada el contenido del archivo XML.</p> </li> <li> <p><code>inicializar_datos</code>: que copiar\u00e1 el contenido del archivo origen (<code>datos_usuarios_orig.xml</code>) a otro archivo destino (<code>datos_usuarios.xml</code>).</p> </li> <li> <p><code>crear_arbol</code>: que generar\u00e1 un nuevo \u00e1rbol XML vac\u00edo con un nodo ra\u00edz especificado, permitiendo inicializar un archivo XML en caso de que no exista o est\u00e9 corrupto.</p> </li> </ol> <p>Al finalizar la actividad, deber\u00e1s integrar estas funciones en el programa principal (<code>main</code>) y probarlas en diferentes escenarios.</p>","tags":["Software","Ejercicios","XML"]},{"location":"section1/u03/practica/PROG-U3.-Practica005/#instrucciones","title":"Instrucciones","text":"<ol> <li> <p>Preparar el Entorno:</p> </li> <li> <p>Aseg\u00farate de tener los archivos <code>datos_usuarios_orig.xml</code> y <code>datos_usuarios.xml</code> en el mismo directorio que tu c\u00f3digo.</p> </li> <li> <p>Si no existe, crea el archivo <code>datos_usuarios_orig.xml</code> con el siguiente contenido inicial:</p> </li> </ol> <pre><code>&lt;usuarios&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;nombre&gt;Juan&lt;/nombre&gt;\n        &lt;edad&gt;30&lt;/edad&gt;\n    &lt;/usuario&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;2&lt;/id&gt;\n        &lt;nombre&gt;Ana&lt;/nombre&gt;\n        &lt;edad&gt;25&lt;/edad&gt;\n    &lt;/usuario&gt;\n&lt;/usuarios&gt;\n</code></pre> <p>Con esta modificaci\u00f3n que vas a realizar en el programa, el archivo <code>datos_usuarios.xml</code> puede estar vac\u00edo o no existir al comenzar.</p> <ol> <li> <p>Implementar la Funci\u00f3n <code>mostrar_datos</code>:</p> </li> <li> <p>Crea una funci\u00f3n llamada <code>mostrar_datos</code> que reciba la ra\u00edz del \u00e1rbol XML y muestre su contenido de forma organizada en consola.</p> </li> <li> <p>La funci\u00f3n debe:</p> <ul> <li> <p>Imprimir los datos de cada usuario con el formato: <code>ID: &lt;id&gt;, Nombre: &lt;nombre&gt;, Edad: &lt;edad&gt;</code>.</p> </li> <li> <p>Mostrar un mensaje si no hay usuarios en el archivo.</p> </li> </ul> </li> <li> <p>Ejemplo de salida si el archivo contiene datos:</p> <pre><code>--- Contenido Actual del XML ---\nID: 1, Nombre: Juan, Edad: 30\nID: 2, Nombre: Ana, Edad: 25\n--- Fin del Contenido ---\n</code></pre> </li> <li> <p>Implementar la Funci\u00f3n <code>inicializar_datos</code>:</p> </li> <li> <p>Crea una funci\u00f3n llamada <code>inicializar_datos</code> que copie el contenido de <code>datos_usuarios_orig.xml</code> a <code>datos_usuarios.xml</code>.</p> </li> <li> <p>La funci\u00f3n debe manejar los siguientes errores:</p> <ul> <li> <p>El archivo origen no existe.</p> </li> <li> <p>El archivo origen tiene un formato XML inv\u00e1lido.</p> </li> </ul> </li> <li> <p>Si la copia es exitosa, debe mostrar el mensaje:</p> <pre><code>Datos inicializados desde 'datos_usuarios_orig.xml' a 'datos_usuarios.xml'.\n</code></pre> </li> <li> <p>Implementar la Funci\u00f3n <code>crear_arbol</code>:</p> </li> <li> <p>Crea una funci\u00f3n llamada <code>crear_arbol</code> que reciba el nombre del nodo ra\u00edz y genere un nuevo \u00e1rbol XML vac\u00edo.</p> </li> <li> <p>La funci\u00f3n debe retornar el \u00e1rbol inicializado.</p> </li> <li> <p>Ejemplo de uso:</p> <pre><code>arbol = crear_arbol(\"usuarios\")\n</code></pre> <p>Esto crear\u00e1 un \u00e1rbol XML vac\u00edo con un nodo ra\u00edz llamado <code>&lt;usuarios&gt;</code>.</p> </li> <li> <p>Modificar la Funci\u00f3n <code>main</code>:</p> </li> <li> <p>Aseg\u00farate de que <code>main</code> siga este flujo de ejecuci\u00f3n:</p> <ol> <li> <p>Limpiar la consola.</p> </li> <li> <p>Ejecutar la funci\u00f3n <code>inicializar_datos</code> para copiar el contenido inicial.</p> </li> <li> <p>Cargar los datos desde <code>datos_usuarios.xml</code> utilizando la funci\u00f3n <code>cargar_xml</code>.</p> </li> <li> <p>Si el archivo no se pudo cargar, utilizar <code>crear_arbol</code> para inicializar un nuevo archivo XML vac\u00edo.</p> </li> <li> <p>Mostrar el contenido inicial del archivo XML utilizando <code>mostrar_datos</code>.</p> </li> <li> <p>Realizar una pausa hasta que se pulse una tecla.</p> </li> <li> <p>Realizar las siguientes operaciones, mostrando los datos al finalizar cada operaci\u00f3n y realizando una pausa:</p> <ul> <li> <p>Actualizar la edad de un usuario.</p> </li> <li> <p>Insertar un nuevo usuario.</p> </li> <li> <p>Eliminar un usuario.</p> </li> </ul> </li> <li> <p>Guardar los datos modificados nuevamente en <code>datos_usuarios.xml</code>.</p> </li> <li> <p>A tener en cuenta a la hora de implementar el c\u00f3digo: siempre que se muestran los datos se realiza una pausa.</p> </li> </ol> </li> <li> <p>Prueba tu Programa:</p> </li> <li> <p>Aseg\u00farate de que las funciones cumplen con lo esperado en estos escenarios:</p> <ul> <li> <p><code>datos_usuarios_orig.xml</code> no existe (\"ERROR El archivo origen '{archivo_origen}' no existe. No se realiz\u00f3 la copia.\")</p> </li> <li> <p><code>datos_usuarios_orig.xml</code> tiene un formato inv\u00e1lido (\"ERROR El archivo origen '{archivo_origen}' tiene un formato XML inv\u00e1lido.\")</p> </li> <li> <p><code>datos_usuarios.xml</code> no contiene usuarios (\"ERROR No hay usuarios en el archivo XML.\")</p> </li> </ul> </li> </ol>","tags":["Software","Ejercicios","XML"]},{"location":"section1/u03/practica/PROG-U3.-Practica005/#salida-esperada-del-programa","title":"Salida esperada del programa","text":"<pre><code>Datos inicializados desde 'src/otros/datos_usuarios_orig.xml' a 'src/otros/datos_usuarios.xml'.\n\n--- Contenido Actual del XML ---\nID: 1, Nombre: Juan, Edad: 30\nID: 2, Nombre: Ana, Edad: 25\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . .\n\nUsuario con ID 1 actualizado.\n\n--- Contenido Actual del XML ---\nID: 1, Nombre: Juan, Edad: 31\nID: 2, Nombre: Ana, Edad: 25\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . . \n\nUsuario Pedro a\u00f1adido con \u00e9xito.\n\n--- Contenido Actual del XML ---\nID: 1, Nombre: Juan, Edad: 31\nID: 2, Nombre: Ana, Edad: 25\nID: 3, Nombre: Pedro, Edad: 40\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . . \n\nUsuario con ID 2 eliminado.\n\n--- Contenido Actual del XML ---\nID: 1, Nombre: Juan, Edad: 31\nID: 3, Nombre: Pedro, Edad: 40\n--- Fin del Contenido ---\n\nPresione una tecla para continuar . . . \n\nOperaciones completadas. Archivo actualizado.\n</code></pre>","tags":["Software","Ejercicios","XML"]},{"location":"section1/u03/practica/PROG-U3.-Practica005/#notas-adicionales","title":"Notas Adicionales","text":"<ul> <li>Utiliza las funciones auxiliares <code>limpiar_consola</code> y <code>pausar</code> para mejorar la legibilidad en consola.</li> <li>En caso de errores, imprime mensajes claros y espec\u00edficos.</li> <li>Aseg\u00farate de probar tu programa en diferentes escenarios para validarlo correctamente.</li> </ul>","tags":["Software","Ejercicios","XML"]},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/","title":"Actividad: Simulador del Euromill\u00f3n","text":""},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#objetivo","title":"Objetivo","text":"<p>Desarrollar un programa en Python que simule el sorteo del Euromill\u00f3n. El programa permitir\u00e1 a un jugador seleccionar sus n\u00fameros y estrellas, generar\u00e1 los n\u00fameros ganadores de manera aleatoria, y mostrar\u00e1 los resultados del sorteo junto con los aciertos del jugador.</p>"},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#requisitos-del-programa","title":"Requisitos del Programa","text":"<ol> <li> <p>Configuraci\u00f3n del Juego:</p> </li> <li> <p>El juego debe permitir elegir un rango de n\u00fameros y estrellas basado en los siguientes valores:</p> <ul> <li>N\u00fameros del 1 al 50 (se seleccionan 5 n\u00fameros).</li> <li>Estrellas del 1 al 12 (se seleccionan 2 estrellas).</li> </ul> </li> <li> <p>Flujo del Programa:</p> </li> <li> <p>Limpiar la pantalla antes de iniciar el juego.</p> </li> <li>Pedir al jugador cu\u00e1ntos n\u00fameros y estrellas quiere jugar (dentro de un rango razonable, por ejemplo podemos configurar un rango de un m\u00ednimo de 5 n\u00fameros y 2 estrellas, con un m\u00e1ximo del doble del valor m\u00ednimo).</li> <li>Solicitar al jugador que seleccione sus n\u00fameros y estrellas, garantizando que no pueda repetir n\u00fameros (utilizar un conjunto para esta tarea).</li> <li>Generar los n\u00fameros y estrellas premiadas de manera aleatoria (simular el sorteo).</li> <li>Comparar los n\u00fameros y estrellas del jugador con los n\u00fameros y estrellas premiados.</li> <li> <p>Mostrar los resultados del sorteo, incluyendo los n\u00fameros y estrellas jugados, los n\u00fameros premiados y la cantidad de aciertos en cada categor\u00eda.</p> </li> <li> <p>Restricciones:</p> </li> <li> <p>El programa debe impedir que el jugador seleccione un n\u00famero o estrella fuera del rango permitido.</p> </li> <li>No se puede repetir un n\u00famero o estrella ya seleccionada.</li> <li> <p>El programa debe manejar errores de entrada de datos (por ejemplo, si el jugador introduce un valor no num\u00e9rico).</p> </li> <li> <p>Resultado Final:</p> </li> <li> <p>Mostrar los n\u00fameros y estrellas jugados.</p> </li> <li>Mostrar los n\u00fameros y estrellas premiados.</li> <li>Indicar cu\u00e1ntos n\u00fameros y cu\u00e1ntas estrellas ha acertado el jugador.</li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#guia-paso-a-paso","title":"Gu\u00eda Paso a Paso","text":""},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#paso-1-definir-la-configuracion-del-juego","title":"Paso 1: Definir la Configuraci\u00f3n del Juego","text":"<ul> <li>Define un diccionario llamado <code>CONFIG</code> que almacene los valores m\u00ednimos, m\u00e1ximos y totales de los n\u00fameros y estrellas que se pueden seleccionar (ser\u00e1 un diccionario cuyo valor de las claves \"bombo\" y \"estrellas\" ser\u00e1 a su vez otro diccionario con pares claves-valor para configurar el min, max y total de bombo y estrellas).</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#paso-2-crear-las-funciones-principales","title":"Paso 2: Crear las Funciones Principales","text":"<ol> <li> <p>Limpieza de Pantalla y Pausa:</p> </li> <li> <p>Crea una funci\u00f3n <code>limpiar_pantalla</code> que limpie la consola.</p> </li> <li> <p>Crea una funci\u00f3n <code>pausa</code> que detenga el programa hasta que el jugador presione ENTER.</p> </li> <li> <p>Entrada de Datos:</p> </li> <li> <p>Dise\u00f1a una funci\u00f3n <code>preguntar_total</code> que pregunte al usuario cu\u00e1ntos elementos quiere jugar, dentro de un rango predefinido.</p> <p>La funci\u00f3n recibe dos argumentos, <code>desc</code>, con la descripci\u00f3n del tipo de elemento (\"n\u00fameros\", \"estrellas\") y <code>min</code>, con el valor m\u00ednimo permitido.</p> <p>C\u00f3mo se ha comentado previamente, el rango m\u00e1ximo no se pasa por par\u00e1metro a la funci\u00f3n, sino que se establece como el doble del valor m\u00ednimo que se pasa c\u00f3mo segundo argumento de la funci\u00f3n.</p> <p>Por \u00faltimo, la funci\u00f3n retornar\u00e1 la cantidad (n\u00famero entero v\u00e1lido y dentro del rango) seleccionada por el usuario.</p> <p>Un ejemplo de llamada de esta funci\u00f3n ser\u00e1 el siguiente:</p> <pre><code>total_numeros = preguntar_total(\"n\u00fameros\", CONFIG[\"bombo\"][\"total\"])\n</code></pre> <p>La ejecuci\u00f3n de este c\u00f3digo mostrar\u00e1 lo siguiente y esperar\u00e1 que el usuario introduzca un valor:</p> <pre><code>Total de n\u00fameros a jugar (5-10)? &gt;&gt;\n</code></pre> </li> <li> <p>Dise\u00f1a una funci\u00f3n <code>pedir_numero</code> que valide que el n\u00famero ingresado est\u00e9 dentro de un rango y no sea repetido.</p> <p>La funci\u00f3n recibe un <code>mensaje</code> que se mostrar\u00e1 al usuario, el valor <code>m\u00ednimo</code> permitido y el <code>m\u00e1ximo</code>.</p> <p>Retornar\u00e1 un n\u00famero entero v\u00e1lido ingresado por el usuario dentro del rango. Mientras que no sea as\u00ed, se mostrar\u00e1 el mensaje de error correspondiente y se volver\u00e1 a pedir el n\u00famero.</p> <p>Un ejemplo de llamada de esta funci\u00f3n ser\u00e1 el siguiente:</p> <pre><code>total = pedir_numero(f\"Total de {desc} a jugar ({min}-{max})? &gt;&gt; \", min, max)\n</code></pre> <p>La ejecuci\u00f3n de este c\u00f3digo mostrar\u00e1 lo siguiente y esperar\u00e1 que el usuario introduzca un n\u00famero entero v\u00e1lido dentro del rango: </p> <pre><code>Total de n\u00fameros a jugar (5-10)? &gt;&gt; rtyr\n*ERROR* N\u00famero no v\u00e1lido!\nTotal de n\u00fameros a jugar (5-10)? &gt;&gt; 66\n*ERROR* El n\u00famero debe estar entre el 5 y el 10!\nTotal de n\u00fameros a jugar (5-10)? &gt;&gt; \n</code></pre> </li> <li> <p>Dise\u00f1a una funci\u00f3n <code>solicitar_numeros</code> que permita al jugador seleccionar un conjunto de n\u00fameros \u00fanicos.</p> <p>Los argumentos que recibe esta funci\u00f3n son:  * <code>desc</code>: Descripci\u00f3n del tipo de n\u00famero (\"el n\u00famero\", \"la estrella\")  * <code>total</code>: Cantidad total de n\u00fameros que el usuario debe ingresar.  * <code>min</code>: Valor m\u00ednimo permitido.  * <code>max</code>: Valor m\u00e1ximo permitido.</p> <p>Esta funci\u00f3n debe crear un bucle con llamadas a la funci\u00f3n <code>pedir_numero</code>, donde ir\u00e1 agregando a un conjunto los n\u00fameros que va ingresando el usuario.  Si el usuario selecciona un n\u00famero que ya existe, no se insertar\u00e1 en el conjunto gracias a las propiedades de los mismos.</p> <p>Adem\u00e1s, dentro del bucle, despu\u00e9s de pedir el n\u00famero y agregarlo al conjunto, debe mostrar la lista de n\u00fameros ordenada (para esto pod\u00e9is utilizar la funci\u00f3n <code>sorted</code>)</p> <p>Un ejemplo de llamada de esta funci\u00f3n ser\u00e1 el siguiente:</p> <pre><code>print(f\"\\n### Seleccione {total_numeros} n\u00fameros del {CONFIG[\"bombo\"][\"min\"]} al {CONFIG[\"bombo\"][\"max\"]} ###\")\nnumeros = solicitar_numeros(\"el n\u00famero\", total_numeros, CONFIG[\"bombo\"][\"min\"], CONFIG[\"bombo\"][\"max\"])\n</code></pre> <p>La ejecuci\u00f3n de este c\u00f3digo mostrar\u00e1 lo siguiente y esperar\u00e1 que el usuario introduzca un n\u00famero entero v\u00e1lido dentro del rango: </p> <pre><code>### Seleccione 5 n\u00fameros del 1 al 50 ###\nDame el n\u00famero #1#&gt;&gt; 33\n[33]\nDame el n\u00famero #2#&gt;&gt; 12\n[12, 33]\nDame el n\u00famero #3#&gt;&gt; 47\n[12, 33, 47]\nDame el n\u00famero #4#&gt;&gt; 8\n[8, 12, 33, 47]\nDame el n\u00famero #5#&gt;&gt; 2\n[2, 8, 12, 33, 47]\n</code></pre> </li> <li> <p>Sorteo Aleatorio:</p> </li> <li> <p>Crea una funci\u00f3n <code>sacar_bolas</code> que genere un conjunto de n\u00fameros o estrellas al azar dentro del rango permitido.</p> <p>La funci\u00f3n debe seleccionar al azar una cantidad de elementos \u00fanicos dentro de un rango y retornar el conjunto que se ha generado.  Los par\u00e1metros de entrada de la funci\u00f3n son el <code>m\u00ednimo</code>, <code>m\u00e1ximo</code> y el <code>total</code> de elementos que se van a generar.</p> <p>Esta funci\u00f3n retorna un conjunto de n\u00fameros enteros seleccionados al azar dentro del rango m\u00ednimo-m\u00e1ximo.</p> <p>Pod\u00e9is hacerlo c\u00f3mo vosotros quer\u00e1is (os propongo que investigu\u00e9is y utilic\u00e9is la funci\u00f3n <code>random.sample()</code> con un <code>range()</code>, pero no es obligatorio con estas funciones)</p> <p>Un ejemplo de llamada de esta funci\u00f3n ser\u00e1 el siguiente (la funci\u00f3n <code>generar_euromillon</code> os la doy realizada y debe ser llamada desde el main, depu\u00e9s de preguntar al jugador los n\u00fameros y estrellas que va a jugar):</p> <pre><code>def generar_euromillon(premiados: set, estrellas: set):\n    \"\"\"\n    Genera los n\u00fameros y estrellas premiados para el sorteo del Euromill\u00f3n.\n\n    Args:\n        premiados (set): Conjunto donde se almacenar\u00e1n los n\u00fameros premiados.\n        estrellas (set): Conjunto donde se almacenar\u00e1n las estrellas premiadas.\n    \"\"\"\n    premiados.update(sacar_bolas(CONFIG[\"bombo\"][\"min\"], CONFIG[\"bombo\"][\"max\"], CONFIG[\"bombo\"][\"total\"]))\n    estrellas.update(sacar_bolas(CONFIG[\"estrellas\"][\"min\"], CONFIG[\"estrellas\"][\"max\"], CONFIG[\"estrellas\"][\"total\"]))     \n</code></pre> <p>La ejecuci\u00f3n de este c\u00f3digo actualizar\u00e1 los conjuntos vac\u00edos que se pasan c\u00f3mo argumentos a la funci\u00f3n.   </p> </li> <li> <p>Generaci\u00f3n de Resultados:</p> </li> <li> <p>Dise\u00f1a una funci\u00f3n <code>generar_euromillon</code> que actualice dos conjuntos: uno con los n\u00fameros premiados y otro con las estrellas premiadas.</p> </li> <li> <p>C\u00e1lculo de Aciertos:</p> </li> <li> <p>Implementa una funci\u00f3n <code>obtener_aciertos</code> que compare los n\u00fameros jugados con los n\u00fameros premiados y calcule la cantidad de aciertos.</p> <p>La funci\u00f3n recibir\u00e1 dos conjuntos: uno con los elementos seleccionados por el usuario y otro con los premiados y retornar\u00e1, mediante el  operador \"intersecci\u00f3n\" entre conjuntos, el n\u00famero de elementos comunes entre ambos conjuntos.</p> <p>Un ejemplo de llamada de esta funci\u00f3n ser\u00e1 el siguiente:</p> <pre><code>aciertos_numeros = obtener_aciertos(numeros, numeros_premiados)\n</code></pre> <p>La ejecuci\u00f3n de este c\u00f3digo retornar\u00e1 el n\u00famero de aciertos, es decir, la cantidad de n\u00fameros comunes entre los dos conjuntos.</p> </li> <li> <p>Visualizaci\u00f3n de Resultados:</p> </li> <li> <p>Dise\u00f1a una funci\u00f3n <code>mostrar_resultados</code> que limpie la pantalla y muestre:</p> <ul> <li>Los n\u00fameros premiados.</li> <li>Las estrellas premiadas.</li> <li>Los n\u00fameros jugados.</li> <li>Las estrellas jugadas.</li> <li>La cantidad de aciertos en n\u00fameros y estrellas.</li> </ul> <p>La ejecuci\u00f3n de esta funci\u00f3n mostrar\u00e1 los siguiente:</p> <pre><code>RESULTADOS DEL EUROMILL\u00d3N\n-------------------------\n\n\nN\u00fameros premiados = [19, 25, 37, 39, 40]\nEstrellas premiadas = [2, 3]\nN\u00fameros jugados = [5, 8, 11, 23, 41]\nEstrellas jugadas = [7, 9]\n\n\nTotal de n\u00fameros acertados = 0\nTotal de estrellas acertadas = 0\n</code></pre> </li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#paso-3-crear-la-funcion-main","title":"Paso 3: Crear la Funci\u00f3n <code>main</code>","text":"<ul> <li> <p>Llama a las funciones en el orden correcto para implementar el flujo del programa:</p> </li> <li> <p>Limpia la pantalla.</p> </li> <li>Pregunta al jugador cu\u00e1ntos n\u00fameros y estrellas quiere jugar.</li> <li>Solicita los n\u00fameros y estrellas al jugador.</li> <li>Genera los n\u00fameros y estrellas premiadas.</li> <li>Realiza una pausa con el mensaje \"Presiones ENTER para continuar...\".</li> <li>Muestra los resultados del sorteo.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#paso-4-prueba-el-programa","title":"Paso 4: Prueba el Programa","text":"<ul> <li>Ejecuta el programa y verifica que se cumplan los requisitos indicados.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/actividades/euromillon/#ejemplo-de-ejecucion","title":"Ejemplo de Ejecuci\u00f3n","text":"<ol> <li> <p>Inicio del Juego:    <pre><code>JUEGA AL EUROMILL\u00d3N\n-------------------\n\nTotal de n\u00fameros a jugar (5-10)? &gt;&gt; 6\nTotal de estrellas a jugar (2-4)? &gt;&gt; 3\n\n### Seleccione 6 n\u00fameros del 1 al 50 ###\nDame el n\u00famero #1#&gt;&gt; 10\nDame el n\u00famero #2#&gt;&gt; 25\nDame el n\u00famero #3#&gt;&gt; 50\nDame el n\u00famero #4#&gt;&gt; 12\nDame el n\u00famero #5#&gt;&gt; 8\nDame el n\u00famero #6#&gt;&gt; 30\n[8, 10, 12, 25, 30, 50]\n\n### Seleccione 3 estrellas del 1 al 12 ###\nDame la estrella #1#&gt;&gt; 2\nDame la estrella #2#&gt;&gt; 8\nDame la estrella #3#&gt;&gt; 12\n[2, 8, 12]\n\nPresione ENTER para continuar...\n</code></pre></p> </li> <li> <p>Resultados:    <pre><code>RESULTADOS DEL EUROMILL\u00d3N\n-------------------------\n\nN\u00fameros premiados = [3, 8, 10, 25, 40]\nEstrellas premiadas = [2, 11]\n\nN\u00fameros jugados = [8, 10, 12, 25, 30, 50]\nEstrellas jugadas = [2, 8, 12]\n\nTotal de n\u00fameros acertados = 3\nTotal de estrellas acertadas = 1\n</code></pre></p> </li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/","title":"Evaluacion","text":"<p>u1 RA1 a..i u2 RA3 a..h u3 RA6 a..i</p> <p>En el siguiente grupo, la rubrica tiene que versar sobre la creaci\u00f3n de constantes, literales y variables adecuados, asi como los tipos de datos adecuados para cada caso, la conversi\u00f3n de datos cuando sea necesario, y el uso de operadores adecuados para cada caso. Descripci\u00f3n de grupo: Trabajo con Variables, Constantes y Tipos de Datos y sus operadores. RA1.g: Clasificaci\u00f3n y uso de operadores del lenguaje. RA1.d: Identificaci\u00f3n de tipos de variables y su utilidad espec\u00edfica. RA1.e: Modificaci\u00f3n de c\u00f3digo para crear y utilizar variables. RA1.f: Creaci\u00f3n y uso de constantes y literales. RA1.h: Comprobaci\u00f3n del funcionamiento de conversiones de tipos.</p> <p>En el siguiente grupo, la rubrica tiene que versar sobre la creaci\u00f3n de los comentarios y documentaci\u00f3n necesario para entender el c\u00f3digo que se ha creado. Descripci\u00f3n de grupo: Comentarios y Documentaci\u00f3n en el C\u00f3digo RA1.i: Introducci\u00f3n de comentarios en el c\u00f3digo. RA3.h: Comentario y documentaci\u00f3n del c\u00f3digo.</p> <p>En el siguiente grupo, la rubrica tiene que versar sobre la creaci\u00f3n del proyecto, y uso de las herramientas para generar el c\u00f3digo, realizar el control de versiones del codigo y realizar los commits correctamente comentados sobre los cambios realizados. Descripci\u00f3n de grupo: Herramientas de Desarrollo y Entornos Integrados RA1.b: Creaci\u00f3n de proyectos de desarrollo de aplicaciones. RA1.c: Uso de entornos integrados de desarrollo.</p> <p>En el siguiente grupo, la rubrica tiene que versar sobre el uso de las estructuras de control (condicionales y repetitivas), de varias de ellas, adecuadas en el nuevo codigo creado. Descripci\u00f3n de grupo: Identificaci\u00f3n y uso de las Estructuras de Control y Flujo del Programa RA1.a: Identificaci\u00f3n de bloques en la estructura de un programa inform\u00e1tico. RA3.a: Escritura y prueba de c\u00f3digo usando estructuras de selecci\u00f3n. RA3.b: Uso de estructuras de repetici\u00f3n. RA3.c: Uso de estructuras de repetici\u00f3n (posiblemente duplicado en el documento). RA3.d: Reconocimiento de las posibilidades de las sentencias de salto. RA3.f: Creaci\u00f3n de programas ejecutables con diferentes estructuras de control.</p> <p>En el siguiente grupo, la rubrica tiene que versar sobre el control de excepciones, para que el programa no falle. Descripci\u00f3n de grupo: Manejo de Errores y Excepciones RA3.e: Uso de control de excepciones.</p> <p>En el siguiente grupo, la rubrica tiene que versar sobre el uso de las herramientas de depuraci\u00f3n y pruebas necesarias para que el programa funcione adecuadamente. Descripci\u00f3n de grupo: Desarrollo, Prueba y Depuraci\u00f3n de Programas RA3.g: Prueba y depuraci\u00f3n de programas.</p> <p>En el siguiente grupo, la rubrica tiene que versar sobre el uso de las estructuras de datos, listas, conjuntos diccionarios, tuplas, etc adecuadas durante el desarrollo de las mejoras. Hacer uso de los iteradores para recorrer las estructuras de datos. Descripci\u00f3n de grupo: Trabajo con Librer\u00edas y Estructuras de Datos Avanzadas RA6.a: Escritura de programas que utilicen arrays. RA6.b: Reconocimiento de librer\u00edas de clases para tipos de datos avanzados. RA6.c: Uso de listas para almacenar y procesar informaci\u00f3n. RA6.d: Uso de iteradores para recorrer listas. RA6.e: Reconocimiento de caracter\u00edsticas y ventajas de colecciones de datos.</p> En el siguiente grupo, la rubrica tiene que versar sobre la creaci\u00f3n de constantes, literales y variables adecuados, asi como los tipos de datos adecuados para cada caso, la conversi\u00f3n de datos cuando sea necesario, y el uso de operadores adecuados para cada caso. Descripci\u00f3n de grupo: Trabajo con Variables, Constantes y Tipos de Datos y sus operadores. RA1.g: Clasificaci\u00f3n y uso de operadores del lenguaje. RA1.d: Identificaci\u00f3n de tipos de variables y su utilidad espec\u00edfica. RA1.e: Modificaci\u00f3n de c\u00f3digo para crear y utilizar variables. RA1.f: Creaci\u00f3n y uso de constantes y literales. RA1.h: Comprobaci\u00f3n del funcionamiento de conversiones de tipos. Grupo: Trabajo con Variables, Constantes y Tipos de Datos y sus Operadores **Descripci\u00f3n:**Creaci\u00f3n y manejo de variables, constantes y operadores en el juego, incluyendo la correcta elecci\u00f3n de tipos de datos y su conversi\u00f3n cuando sea necesario. R\u00fabrica (1-5 Puntos): 1.  Bajo:  No hay definici\u00f3n o uso incorrecto de variables y operadores,  tipos de datos inadecuados sin conversiones correctas.1.  B\u00e1sico:  Definiciones b\u00e1sicas de variables y constantes, con errores en  tipos de datos y operadores.1.  Intermedio:  Definici\u00f3n adecuada de variables y constantes, con algunos  errores menores en tipos de datos y operadores.1.  Avanzado:  Uso avanzado y correcto de variables, constantes y operadores,  con buenas pr\u00e1cticas en tipos de datos y conversiones.1. Excelente:  Uso innovador y optimizado de variables, constantes y operadores,  mostrando soluciones creativas y eficientes. En el siguiente grupo, la rubrica tiene que versar sobre la creaci\u00f3n de los comentarios y documentaci\u00f3n necesario para entender el c\u00f3digo que se ha creado. Descripci\u00f3n de grupo: Comentarios y Documentaci\u00f3n en el C\u00f3digo RA1.i: Introducci\u00f3n de comentarios en el c\u00f3digo. RA3.h: Comentario y documentaci\u00f3n del c\u00f3digo. Grupo: Comentarios y Documentaci\u00f3n en el C\u00f3digo **Descripci\u00f3n:**Integraci\u00f3n de comentarios \u00fatiles y documentaci\u00f3n clara en el c\u00f3digo para facilitar su comprensi\u00f3n y mantenimiento. R\u00fabrica (1-5 Puntos): 1.  Bajo:  Falta total o casi total de comentarios y documentaci\u00f3n, o  incorrectamente implementados.1.  B\u00e1sico:  Comentarios m\u00ednimos y documentaci\u00f3n b\u00e1sica, pero con falta de  claridad o coherencia.1.  Intermedio:  Comentarios y documentaci\u00f3n claros y \u00fatiles, con algunas \u00e1reas  de mejora.1.  Avanzado:  Comentarios detallados y documentaci\u00f3n completa y bien  estructurada.1. Excelente:  Comentarios y documentaci\u00f3n excepcionales, mejorando  significativamente la comprensi\u00f3n y mantenimiento del c\u00f3digo. En el siguiente grupo, la rubrica tiene que versar sobre la creaci\u00f3n del proyecto, y uso de las herramientas para generar el c\u00f3digo, realizar el control de versiones del codigo y realizar los commits correctamente comentados sobre los cambios realizados. Descripci\u00f3n de grupo: Herramientas de Desarrollo y Entornos Integrados RA1.b: Creaci\u00f3n de proyectos de desarrollo de aplicaciones. RA1.c: Uso de entornos integrados de desarrollo. Grupo: Herramientas de Desarrollo y Entornos Integrados **Descripci\u00f3n:**Uso de herramientas de desarrollo y entornos integrados para la creaci\u00f3n y gesti\u00f3n eficiente del proyecto. R\u00fabrica (1-5 Puntos): 1.  Bajo:  Dificultades significativas en el uso de herramientas, con  errores en la configuraci\u00f3n del proyecto.1.  B\u00e1sico:  Uso b\u00e1sico de herramientas con algunas limitaciones, control de  versiones poco eficiente.1.  Intermedio:  Uso adecuado de herramientas, con configuraci\u00f3n correcta y  control de versiones efectivo.1.  Avanzado:  Uso avanzado de herramientas, optimizando la configuraci\u00f3n del  proyecto y control de versiones.1. Excelente:  Dominio en el uso de herramientas, innovaci\u00f3n en configuraci\u00f3n  y gesti\u00f3n avanzada de versiones. En el siguiente grupo, la rubrica tiene que versar sobre el uso de las estructuras de control (condicionales y repetitivas), de varias de ellas, adecuadas en el nuevo codigo creado. Descripci\u00f3n de grupo: Identificaci\u00f3n y uso de las Estructuras de Control y Flujo del Programa RA1.a: Identificaci\u00f3n de bloques en la estructura de un programa inform\u00e1tico. RA3.a: Escritura y prueba de c\u00f3digo usando estructuras de selecci\u00f3n. RA3.b: Uso de estructuras de repetici\u00f3n. RA3.c: Uso de estructuras de repetici\u00f3n (posiblemente duplicado en el documento). RA3.d: Reconocimiento de las posibilidades de las sentencias de salto. RA3.f: Creaci\u00f3n de programas ejecutables con diferentes estructuras de control. Grupo: Identificaci\u00f3n y Uso de las Estructuras de Control y Flujo del Programa **Descripci\u00f3n:**Uso efectivo de estructuras de control para manejar adecuadamente el flujo del programa en el juego. R\u00fabrica (1-5 Puntos): 1.  Bajo:  Uso incorrecto o inexistente de estructuras de control, con  fallos significativos en el flujo del programa.1.  B\u00e1sico:  Uso de estructuras de control b\u00e1sicas, con errores ocasionales  en la l\u00f3gica del flujo.1.  Intermedio:  Uso competente de estructuras de control, con un flujo de  programa mayormente correcto.1.  Avanzado:  Implementaci\u00f3n eficiente y avanzada de estructuras de control,  optimizando el flujo del programa.1. Excelente:  Excelente uso de estructuras de control complejas, con  innovaciones en la gesti\u00f3n del flujo del programa. En el siguiente grupo, la rubrica tiene que versar sobre el control de excepciones, para que el programa no falle. Descripci\u00f3n de grupo: Manejo de Errores y Excepciones RA3.e: Uso de control de excepciones. Grupo: Manejo de Errores y Excepciones **Descripci\u00f3n:**Habilidad para gestionar y controlar errores y excepciones, asegurando la estabilidad y robustez del juego. R\u00fabrica (1-5 Puntos): 1.  Bajo:  Fallo en el manejo de errores y excepciones, causando  inestabilidad en el juego.1.  B\u00e1sico:  Manejo b\u00e1sico de errores y excepciones comunes, con algunos  fallos.1.  Intermedio:  Gesti\u00f3n adecuada de errores y excepciones, evitando fallos  comunes.1.  Avanzado:  Habilidad avanzada para prevenir y resolver una variedad de  errores y excepciones.1. Excelente:  Gesti\u00f3n excepcional de errores y excepciones, mejorando  significativamente la fiabilidad del juego. En el siguiente grupo, la rubrica tiene que versar sobre el uso de las herramientas de depuraci\u00f3n y pruebas necesarias para que el programa funcione adecuadamente. Descripci\u00f3n de grupo: Desarrollo, Prueba y Depuraci\u00f3n de Programas RA3.g: Prueba y depuraci\u00f3n de programas. Grupo: Desarrollo, Prueba y Depuraci\u00f3n de Programas **Descripci\u00f3n:**Uso de t\u00e9cnicas y herramientas para desarrollar, probar y depurar el juego, asegurando su correcto funcionamiento. R\u00fabrica (1-5 Puntos): 1.  Bajo:  Desarrollo inadecuado con errores cr\u00edticos, falta de pruebas y  depuraci\u00f3n ineficaz.1.  B\u00e1sico:  Desarrollo b\u00e1sico con pruebas limitadas y depuraci\u00f3n parcial.1.  Intermedio:  Buen desarrollo, con pruebas adecuadas y depuraci\u00f3n efectiva.1.  Avanzado:  Desarrollo avanzado, pruebas rigurosas y depuraci\u00f3n eficiente.1. Excelente:  Desarrollo y depuraci\u00f3n excepcionales, con pruebas innovadoras y  mejoras significativas en el juego. En el siguiente grupo, la rubrica tiene que versar sobre el uso de las estructuras de datos, listas, conjuntos diccionarios, tuplas, etc adecuadas durante el desarrollo de las mejoras. Hacer uso de los iteradores para recorrer las estructuras de datos. Descripci\u00f3n de grupo: Trabajo con Librer\u00edas y Estructuras de Datos Avanzadas RA6.a: Escritura de programas que utilicen arrays. RA6.b: Reconocimiento de librer\u00edas de clases para tipos de datos avanzados. RA6.c: Uso de listas para almacenar y procesar informaci\u00f3n. RA6.d: Uso de iteradores para recorrer listas. RA6.e: Reconocimiento de caracter\u00edsticas y ventajas de colecciones de datos. Grupo: Trabajo con Librer\u00edas y Estructuras de Datos Avanzadas **Descripci\u00f3n:**Evaluaci\u00f3n del uso de estructuras de datos y librer\u00edas avanzadas para mejorar la eficiencia y funcionalidad del juego. R\u00fabrica (1-5 Puntos): 1.  Bajo:  Uso inadecuado de estructuras de datos y librer\u00edas, con errores  significativos.1.  B\u00e1sico:  Uso b\u00e1sico de estructuras de datos comunes y algunas librer\u00edas.1.  Intermedio:  Uso competente de estructuras de datos avanzadas y librer\u00edas  \u00fatiles.1.  Avanzado:  Manejo avanzado de estructuras de datos y librer\u00edas, optimizando  su uso.1. Excelente:  Excelente uso y dominio de estructuras de datos avanzadas y  librer\u00edas, con implementaciones innovadoras y optimizadas. <p>Descripci\u00f3n de grupo: Las siguientes CE quedan pendiente de evaluaci\u00f3n en futuras unidades Programaci\u00f3n Orientada a Objetos y XML RA6.f: Creaci\u00f3n de clases y m\u00e9todos gen\u00e9ricos. RA6.g: Uso de expresiones regulares en la b\u00fasqueda de patrones en textos. RA6.h: Identificaci\u00f3n de clases para el tratamiento de documentos XML. RA6.i: Programaci\u00f3n con manipulaci\u00f3n de documentos XML.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#otra-evaluacion","title":"Otra evaluacion","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#evaluacion-y-calificacion","title":"Evaluaci\u00f3n y calificaci\u00f3n","text":"<p>RA y CE evaluados:</p> <ul> <li>RA1: Estructuras de datos y control de flujo.</li> <li>RA3: Herramientas de desarrollo y entornos integrados.</li> <li>RA6: Manejo de errores y excepciones.</li> </ul> <p>Conlleva presentaci\u00f3n: NO</p> <p>Rubrica:</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#trabajo-con-variables-constantes-y-tipos-de-datos-y-sus-operadores","title":"Trabajo con Variables, Constantes y Tipos de Datos y sus operadores.","text":"<ul> <li>0: No se crea o utiliza variables, constantes, o tipos de datos de manera adecuada.</li> <li>1-2: Uso b\u00e1sico de variables y constantes, pero con errores en tipos de datos.</li> <li>3-4: Creaci\u00f3n y uso adecuado de variables y constantes, con algunos errores en operadores o conversiones.</li> <li>5: Uso eficiente de variables, constantes, tipos de datos y operadores.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#comentarios-y-documentacion-en-el-codigo","title":"Comentarios y Documentaci\u00f3n en el C\u00f3digo","text":"<ul> <li>0: Ausencia total de comentarios y documentaci\u00f3n.</li> <li>1-2: Comentarios y documentaci\u00f3n m\u00ednimos, falta de claridad.</li> <li>3-4: Comentarios y documentaci\u00f3n adecuados, con algunos detalles por mejorar.</li> <li>5: Excelentes comentarios y documentaci\u00f3n, proporcionando claridad y comprensi\u00f3n del c\u00f3digo.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#herramientas-de-desarrollo-y-entornos-integrados","title":"Herramientas de Desarrollo y Entornos Integrados","text":"<ul> <li>0: No utiliza las herramientas de desarrollo y entornos integrados.</li> <li>1-2: Uso b\u00e1sico de herramientas y entornos, con errores o limitaciones.</li> <li>3-4: Uso competente de las herramientas y entornos, con peque\u00f1as \u00e1reas de mejora.</li> <li>5: Uso avanzado y efectivo de herramientas y entornos, optimizando el desarrollo.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#identificacion-y-uso-de-las-estructuras-de-control-y-flujo-del-programa","title":"Identificaci\u00f3n y uso de las Estructuras de Control y Flujo del Programa","text":"<ul> <li>0: Falta de implementaci\u00f3n o uso incorrecto de estructuras de control.</li> <li>1-2: Uso b\u00e1sico de estructuras de control, con errores en la l\u00f3gica o flujo.</li> <li>3-4: Uso adecuado de m\u00faltiples estructuras de control, con una l\u00f3gica bien definida.</li> <li>5: Implementaci\u00f3n innovadora y eficiente de estructuras de control, optimizando el flujo del programa.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#manejo-de-errores-y-excepciones","title":"Manejo de Errores y Excepciones","text":"<ul> <li>0: No gestiona errores y excepciones.</li> <li>1-2: Gesti\u00f3n b\u00e1sica de errores y excepciones, con falta de cobertura completa.</li> <li>3-4: Gesti\u00f3n adecuada de errores y excepciones, con buen manejo de casos comunes.</li> <li>5: Gesti\u00f3n avanzada de errores y excepciones, aportando robustez y fiabilidad al programa.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#desarrollo-prueba-y-depuracion-de-programas","title":"Desarrollo, Prueba y Depuraci\u00f3n de Programas","text":"<ul> <li>0: No realiza desarrollo, pruebas ni depuraci\u00f3n efectivas.</li> <li>1-2: Realiza pruebas y depuraci\u00f3n b\u00e1sicas, con omisiones significativas.</li> <li>3-4: Buenas pr\u00e1cticas de desarrollo, pruebas y depuraci\u00f3n, con peque\u00f1as \u00e1reas de mejora.</li> <li>5: Excelente pr\u00e1ctica en desarrollo, pruebas y depuraci\u00f3n, demostrando un enfoque metodol\u00f3gico y eficiente.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/evaluacion/#trabajo-con-librerias-y-estructuras-de-datos-avanzadas","title":"Trabajo con Librer\u00edas y Estructuras de Datos Avanzadas","text":"<ul> <li>0: No utiliza o utiliza incorrectamente librer\u00edas y estructuras de datos avanzadas.</li> <li>1-2: Uso b\u00e1sico de librer\u00edas y estructuras de datos, con limitaciones en su aplicaci\u00f3n.</li> <li>3-4: Uso competente de librer\u00edas y estructuras de datos avanzadas, con buena integraci\u00f3n en el juego.</li> <li>5: Uso innovador y \u00f3ptimo de librer\u00edas y estructuras de datos, mejorando significativamente la funcionalidad y eficiencia del juego.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/","title":"Actividad: \ud83d\udcd2 Agenda \ud83d\udcda","text":"<p>ID actividad: pe-Agenda-u1u2u3</p> <p>Agrupamiento de la actividad: Individual</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#descripcion","title":"Descripci\u00f3n:","text":"<ol> <li>El programa debe estar correctamente documentado (Docstrings y comentarios). UD 2 - 2.5 Documentar el c\u00f3digo</li> <li>Observad que las funciones existentes en el c\u00f3digo del programa no est\u00e1n completamente bien documentadas.</li> <li>Debes intentar ajustarte lo m\u00e1ximo posible a lo que se pide en los comentarios <code>TODO</code> que observar\u00e1s en el programa <code>agenda.py</code>.</li> <li>Tienes libertad para desarrollar los m\u00e9todos o funciones que consideres, pero est\u00e1s obligado a usar como m\u00ednimo todos los que se solicitan en los comentarios TODO.</li> <li>Adem\u00e1s, tu programa deber\u00e1 pasar correctamente las <code>pruebas unitarias</code> que se adjuntan en el fichero <code>test_agenda.py</code> de la carpeta <code>test</code>.</li> <li>Debido al punto anterior, est\u00e1s obligado a desarrollar los m\u00e9todos que se importan y prueban en los tests unitarios: <code>pedir_email()</code>, <code>validar_email()</code> y <code>validar_telefono()</code></li> <li>En algunos casos, el codigo no diferencia adecuadamente la instrucciones que procesan informacion, de las que interactuan con el usuario a traves de consola. Siguiendo las buenas practicas vistas durante el curso, soluciona estos problemas alla donde te los encuenteres.</li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#comentarios-todo-que-debes-resolver","title":"Comentarios TODO que debes resolver:","text":"<ul> <li>L\u00ednea 42</li> </ul> <pre><code>#TODO: Crear un conjunto con las posibles opciones del men\u00fa de la agenda\nOPCIONES_MENU = ?\n#TODO: Utiliza este conjunto en las funciones agenda() y pedir_opcion()\n</code></pre> <ul> <li>L\u00ednea 60</li> </ul> <pre><code>#TODO: Crear un bucle para mostrar el men\u00fa y ejecutar las funciones necesarias seg\u00fan la opci\u00f3n seleccionada...\n</code></pre> <ul> <li>L\u00ednea 72</li> </ul> <pre><code>#TODO: Crear funci\u00f3n buscar_contacto para recuperar la posici\u00f3n de un contacto con un email determinado...\n</code></pre> <ul> <li>L\u00ednea 88</li> </ul> <pre><code>#TODO: Crear un bucle para mostrar el men\u00fa y ejecutar las funciones necesarias seg\u00fan la opci\u00f3n seleccionada...\n</code></pre> <ul> <li>L\u00ednea 94</li> </ul> <pre><code>#TODO: Se valorar\u00e1 que utilices la diferencia sim\u00e9trica de conjuntos para comprobar que la opci\u00f3n es un n\u00famero entero del 1 al 6\n     if opcion in ?:\n</code></pre> <ul> <li>L\u00ednea 110</li> </ul> <pre><code>#TODO: Asignar una estructura de datos vac\u00eda para trabajar con la agenda...\ncontactos = ?\n</code></pre> <ul> <li>L\u00ednea 113</li> </ul> <pre><code>#TODO: Modificar la funci\u00f3n cargar_contactos para que almacene todos los contactos del fichero en una lista con un diccionario por contacto (claves: nombre, apellido, email y telefonos)\n#TODO: Realizar una llamada a la funci\u00f3n cargar_contacto con todo lo necesario para que funcione correctamente.\ncargar_contactos(?)\n</code></pre> <ul> <li>L\u00ednea 117</li> </ul> <pre><code>#TODO: Crear funci\u00f3n para agregar un contacto. Debes tener en cuenta lo siguiente:\n# - El nombre y apellido no pueden ser una cadena vac\u00eda o solo espacios y se guardar\u00e1n con la primera letra may\u00fascula y el resto min\u00fasculas (ojo a los nombre compuestos)\n# - El email debe ser \u00fanico en la lista de contactos, no puede ser una cadena vac\u00eda y debe contener el car\u00e1cter @.\n# - El email se guardar\u00e1 tal cu\u00e1l el usuario lo introduzca, con las may\u00fasculas y min\u00fasculas que escriba. \n#  (CORREO@gmail.com se considera el mismo email que correo@gmail.com)\n# - Pedir tel\u00e9fonos hasta que el usuario introduzca una cadena vac\u00eda, es decir, que pulse la tecla &lt;ENTER&gt; sin introducir nada.\n# - Un tel\u00e9fono debe estar compuesto solo por 9 n\u00fameros, aunque debe permitirse que se introduzcan espacios entre los n\u00fameros.\n# - Adem\u00e1s, un n\u00famero de tel\u00e9fono puede incluir de manera opcional un prefijo +34.\n# - De igual manera, aunque existan espacios entre el prefijo y los 9 n\u00fameros al introducirlo, debe almacenarse sin espacios.\n# - Por ejemplo, ser\u00e1 posible introducir el n\u00famero +34 600 100 100, pero guardar\u00e1 +34600100100 y cuando se muestren los contactos, el tel\u00f3fono se mostrar\u00e1 como +34-600100100. \n#TODO: Realizar una llamada a la funci\u00f3n agregar_contacto con todo lo necesario para que funcione correctamente.\nagregar_contacto(?)\n</code></pre> <ul> <li>L\u00ednea 133</li> </ul> <pre><code>#TODO: Realizar una llamada a la funci\u00f3n eliminar_contacto con todo lo necesario para que funcione correctamente, eliminando el contacto con el email rciruelo@gmail.com\neliminar_contacto(?)\n</code></pre> <ul> <li>L\u00ednea 139</li> </ul> <pre><code>#TODO: Crear funci\u00f3n mostrar_contactos para que muestre todos los contactos de la agenda con el siguiente formato:\n# ** IMPORTANTE: debe mostrarlos ordenados seg\u00fan el nombre, pero no modificar la lista de contactos de la agenda original **\n#\n# AGENDA (6)\n# ------\n# Nombre: Antonio Amargo (aamargo@gmail.com)\n# Tel\u00e9fonos: niguno\n# ......\n# Nombre: Daniela Alba (danalba@gmail.com)\n# Tel\u00e9fonos: +34-600606060 / +34-670898934\n# ......\n# Nombre: Laura Iglesias (liglesias@gmail.com)\n# Tel\u00e9fonos: 666777333 / 666888555 / 607889988\n# ......\n# ** resto de contactos **\n#\n#TODO: Realizar una llamada a la funci\u00f3n mostrar_contactos con todo lo necesario para que funcione correctamente.\nmostrar_contactos(?)\n</code></pre> <ul> <li>L\u00ednea 161</li> </ul> <pre><code>#TODO: Crear un men\u00fa para gestionar la agenda con las funciones previamente desarrolladas y las nuevas que necesit\u00e9is:\n# AGENDA\n# ------\n# 1. Nuevo contacto\n# 2. Modificar contacto\n# 3. Eliminar contacto\n# 4. Vaciar agenda\n# 5. Cargar agenda inicial\n# 6. Mostrar contactos por criterio\n# 7. Mostrar la agenda completa\n# 8. Salir\n#\n# &gt;&gt; Seleccione una opci\u00f3n: \n#\n#TODO: Para la opci\u00f3n 3, modificar un contacto, deber\u00e1s desarrollar las funciones necesarias para actualizar la informaci\u00f3n de un contacto.\n#TODO: Tambi\u00e9n deber\u00e1s desarrollar la opci\u00f3n 6 que deber\u00e1 preguntar por el criterio de b\u00fasqueda (nombre, apellido, email o telefono) y el valor a buscar para mostrar los contactos que encuentre en la agenda.\nagenda(?)\n</code></pre>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#objetivo","title":"Objetivo:","text":"<ul> <li>Aplicar conocimientos de estructuras de datos y control de flujo en un contexto pr\u00e1ctico.</li> <li>Desarrollar habilidades de depuraci\u00f3n y resoluci\u00f3n de problemas en programaci\u00f3n.</li> <li>Fomentar la creatividad y la innovaci\u00f3n en el dise\u00f1o de algoritmos y soluciones.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#trabajo-a-realizar","title":"Trabajo a realizar:","text":"<ol> <li>Documentar correctamente, controlar errores y excepciones en el c\u00f3digo del juego proporcionado.</li> <li>Implementar las mejoras requeridas para el programa.</li> <li>Realizar los test unitarios de nuevas funciones que implement\u00e9is en el c\u00f3digo y sean susceptibles de realizarse c\u00f3mo hemos visto en clase.</li> </ol> <p>Aclaraci\u00f3n:</p> <ul> <li>El programa entregado debe funcionar correctamente y cumplir los test unitarios.</li> <li>No se puede modificar el c\u00f3digo de las funciones proporcionadas para que hagan algo distinto, pero si se puede a\u00f1adir c\u00f3digo en las funciones proporcionadas siempre que el funcionamiento sea el mismo.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#recursos","title":"Recursos","text":"<ul> <li>Apuntes dados en clase.</li> <li>Recursos y ejemplos vistos en clase.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#permitido-y-prohibido","title":"Permitido y Prohibido","text":"<ul> <li>Permitido el uso de apuntes, ejemplos y recursos vistos en clase.</li> <li>Prohibido el uso de cualquier otro recurso: apuntes de compa\u00f1eros, ayuda de compa\u00f1eros, copilot, chatgpt, etc.</li> </ul> <p>El uso de cualquier recurso prohibido supondr\u00e1 la calificaci\u00f3n de 0 en la actividad.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#evaluacion-y-calificacion","title":"Evaluaci\u00f3n y calificaci\u00f3n","text":"<p>Pr\u00e1ctica para realizar en casa (30%) que se entregar\u00e1 esta semana. Esta pr\u00e1ctica se evaluar\u00e1 con una calificaci\u00f3n de 0 a 10 puntos.</p> <p>La prueba espec\u00edfica (60%) consistir\u00e1 en dos pruebas: la pr\u00e1ctica, d\u00f3nde ten\u00e9is que analizar y actualizar un programa en Python para que cumpla con los requisitos especificados en el enunciado, y la te\u00f3rica, que consiste en un cuestionario de preguntas sobre los contenidos de las unidades 1, 2 y 3.</p> <ul> <li>La parte pr\u00e1ctica se evaluar\u00e1 con una calificaci\u00f3n de 0 a 10 puntos. (80%)</li> <li>La parte te\u00f3rica se evaluar\u00e1 con una calificaci\u00f3n de 0 a 10 puntos. (20%)</li> </ul> <p>El 10% restante corresponde al examen pr\u00e1ctico ya realizado al finalizar la unidad 1. Esta pr\u00e1ctica se evaluar\u00e1 con una calificaci\u00f3n de 0 a 10 puntos.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#ra-y-ce-evaluados","title":"RA y CE evaluados:","text":"<ul> <li>RA1: Conoce la estructura de un programa inform\u00e1tico identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado.</li> <li>RA3: Escribe y depura c\u00f3digo analizando y utilizando las estructuras de control del lenguaje.</li> <li>RA6: Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos. (no todos los criterios de evaluaci\u00f3n).</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#conlleva","title":"Conlleva","text":"<p>Presentaci\u00f3n: SI, se evaluar\u00e1 con el profesor.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#rubrica","title":"Rubrica:","text":"<ul> <li>El programa funciona adecuadamente.</li> <li>Las mejoras solicitadas se han implementado adecuadamente</li> <li>Trabajo con Variables, Constantes y Tipos de Datos y sus operadores.</li> <li>Comentarios y Documentaci\u00f3n en el C\u00f3digo</li> <li>Herramientas de Desarrollo y Entornos Integrados</li> <li>Identificaci\u00f3n y uso de las Estructuras de Control y Flujo del Programa</li> <li>Manejo de Errores y Excepciones</li> <li>Desarrollo, Prueba y Depuraci\u00f3n de Programas</li> <li>Trabajo con Librer\u00edas y Estructuras de Datos Avanzadas (Listas, Tuplas, Diccionarios, Conjuntos, etc.)</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#entrega","title":"Entrega","text":"<p>La entrega tiene que cumplir las condiciones de entrega para poder ser calificada. En caso de no cumplirlas podr\u00eda calificarse como no entregada.</p> <ul> <li>Conlleva la entrega de URL a repositorio: El proyecto se entregar\u00e1 en un repositorio GitHub, trabajando por proyectos y dejando constancia de las acciones realizadas.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Agenda/#la-fecha-de-entrega-es-el-proximo-viernes-1-de-diciembre","title":"La fecha de entrega es el pr\u00f3ximo <code>viernes, 1 de diciembre</code>.","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20BlackJack/src/","title":"Index","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20BlackJack/src/#ejercicio-juguemos-al-blackjack","title":"\u2660\ufe0f\u2665\ufe0f\u2666\ufe0f\u2663\ufe0f Ejercicio: Juguemos al blackjack \u2660\ufe0f\u2665\ufe0f\u2666\ufe0f\u2663\ufe0f","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20BlackJack/src/#representacion-del-juego","title":"Representaci\u00f3n del Juego:","text":"<p>Este programa desarrolla el juego del black jack entre dos jugadores:</p> <ul> <li>Inicialmente se reparte una carta a cada jugador.</li> <li>Posteriormente se pregunta en cada ronda si desea una carta m\u00e1s o se planta.</li> <li>Gana el jugador que m\u00e1s se acerque a 21 sin pasarse.</li> <li>El programa te permite jugar una partida tras otra hasta que t\u00fa decidas parar o se acaben las cartas de la baraja.</li> <li>El valor de las cartas es el siguiente:<ul> <li>El n\u00famero de la misma en las cartas del 2 al 10.</li> <li>As puede valer 1 u 11.</li> <li>J, Q y K valen 10.</li> </ul> </li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20BlackJack/src/#descripcion-del-problema","title":"Descripci\u00f3n del Problema:","text":"<p>En esta ocasi\u00f3n la documentaci\u00f3n no est\u00e1 completa y solo existe una descripci\u00f3n funcional de qu\u00e9 realiza cada bloque de c\u00f3digo del juego.</p> <p>Alg\u00fan profe despistado ha desarrollado con prisas el juego y deb\u00e9is darle soluci\u00f3n vosotros...</p> <ul> <li> <p>Para empezar nos falta una constante muy VALIOSA, que recoje los puntos de cada CARTA en un diccionario. El As es una carta que act\u00faa de comod\u00edn y puede valer 1 u 11, seg\u00fan mejor convenga a nuestra mano. Esta carta especial debe tener un valor de una tupla de dos valores enteros y no un solo valor entero c\u00f3mo el resto de cartas.</p> </li> <li> <p>Soluciona los errores evidentes que ya os est\u00e1 marcando Visual Studio.</p> </li> <li> <p>Al proporcionar las cartas a los jugadores, aunque parece que tiene buena pinta, cuando se acaba la baraja se produce un \"problemilla\" no muy controlado, est\u00e1 claro que el profe no jug\u00f3 mucho...</p> </li> <li> <p>Al desarrollar el juego seguramente existan argumentos o par\u00e1metros que no se hayan pasado o definido correctamente... en fin, las prisas :-P</p> </li> <li> <p>En la funci\u00f3n valor_carta se intenta controlar que si el tipo del valor de la carta es una tupla y tiene 2 elementos pueda recuperar su valor m\u00ednimo o m\u00e1ximo seg\u00fan indique su par\u00e1metro de entrada valor_minimo.</p> </li> <li> <p>jugar() debe tener alg\u00fan problema porque no me deja JUGAR...</p> </li> <li> <p>Me gustar\u00eda que el programa funcionara c\u00f3mo se describe al principio y poder jugar las partidas que yo quiera hasta que se acabe la baraja.</p> </li> <li> <p>Si ves alguna mejora posible, adelante y realizala, siempre que la documentes correctamente y no c\u00f3mo ha hecho el vago del profesor.</p> </li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/","title":"Readme","text":"<p>En un lugar no tan lejano del vasto ciberespacio, hay una isla pixelada llena de misterios y riquezas sin fin...</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#como-es-la-isla","title":"\u00bfC\u00f3mo es la Isla?","text":"<p>La isla se representa como una cuadr\u00edcula de 5x5, una matriz donde cada celda es un pedazo de tierra que puede esconder desde pistas doradas hasta trampas temibles. \u00a1Como buenos aventureros, vuestra tarea es explorar cada celda con la esperanza de encontrar el tesoro perdido!</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#que-secretos-oculta","title":"\u00bfQu\u00e9 Secretos Oculta?","text":"<ul> <li>Pistas: Algunas celdas contienen flechas misteriosas que se\u00f1alan hacia el tesoro. Estas pueden apuntar hacia arriba, abajo, izquierda o derecha. \u00a1Usad estas pistas para acercaros al tesoro!</li> <li>Trampas: \u00a1Oh, cuidado! Algunas celdas tienen trampas ocultas que pueden detener vuestro avance. Una vez que ca\u00e9is en una, tendr\u00e9is que intentar un nuevo camino.</li> <li>Tesoro: En alguna parte de la cuadr\u00edcula, marcada con la gloriosa \"X\", se encuentra el tesoro. \u00a1Encontradlo y ser\u00e9is los campeones de la isla!</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#el-objetivo-de-la-aventura","title":"El Objetivo de la Aventura","text":"<p>El objetivo del juego es simple y claro como el agua de mar: encontrad el tesoro sin caer en las trampas. Pero no os preocup\u00e9is, si os perd\u00e9is, siempre pod\u00e9is intentarlo de nuevo, \u00a1la isla es muy paciente con los intr\u00e9pidos buscadores de fortunas!</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#el-gran-desafio-os-espera","title":"\u00a1El Gran Desaf\u00edo os Espera!","text":"<p>\u00bfEst\u00e1is listos para dejar vuestra marca en los anales de la historia de la isla? \u00a1Pues adelante! Elegid vuestro camino, descifrad las pistas y sobre todo... \u00a1mantened un ojo avizor para esas malvadas trampas!</p> <p>\u00a1Que comience la caza del tesoro! \u00bfQui\u00e9n descubrir\u00e1 primero la \"X\" que marca el lugar? \ud83c\udff4\u200d\u2620\ufe0f\ud83d\udc8e</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#la-aventura-del-tesoro-de-la-isla-desierta","title":"\ud83c\udf34\ud83d\udc63\ud83c\udff4\u200d\u2620\ufe0f La Aventura del Tesoro de la Isla Desierta \ud83d\udc63\ud83c\udff4\u200d\u2620\ufe0f\ud83c\udf34","text":"<p>\u00a1Valientes aventureros y astutos codificadores! \u00bfEst\u00e1is listos para zarpar hacia las ind\u00f3mitas aguas de la Programaci\u00f3n Python para desenterrar tesoros ocultos? \u00a1Pues vuestro barco ha atracado en la isla de los desaf\u00edos c\u00f3digos!</p> <p>En esta emocionante odisea, os encontr\u00e1is varados en una isla que guarda secretos antiguos y riquezas escondidas. Pero no todo es brisa y palmeras; para escapar, necesitar\u00e9is vuestro ingenio, vuestra destreza y un conocido aliado: \u00a1Python!</p> <p>La isla est\u00e1 representada por una cuadr\u00edcula misteriosa, cada celda de la cual puede ser un paso hacia la gloria o una trampa que os hunda en la desesperaci\u00f3n. \u00bfSer\u00e9is capaces de descifrar las pistas, esquivar peligros y encontrar el bot\u00edn antes de que las trampas os atrapen?</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#desafio-para-codificadores","title":"\ud83d\udd0d\ud83e\udded Desaf\u00edo para Codificadores \ud83d\udd0d\ud83e\udded","text":"<p>Vuestra misi\u00f3n, si decid\u00eds aceptarla, es sumergiros en el c\u00f3digo proporcionado y:</p> <p>Desentra\u00f1ar los Errores: Hay errores astutamente ocultos que deb\u00e9is encontrar y arreglar. Algunos son traviesos bugs de sintaxis que os esperan en las sombras, otros son serpenteantes fallos sem\u00e1nticos que se deslizan entre las l\u00edneas, y algunos son ilusorios errores l\u00f3gicos que desafiar\u00e1n vuestro intelecto.</p> <p>Mejorar el Mapa: \u00a1Agregad vuestra magia para que el mapa revele no solo trampas y tesoros sino tambi\u00e9n la historia de vuestra traves\u00eda por la isla! Dejad un rastro de vuestro paso que otros puedan seguir... o admirar.</p> <p>Expandir el Horizonte: \u00bfOs atrev\u00e9is a a\u00f1adir vuestras propias islas al archipi\u00e9lago? \u00bfTal vez un l\u00edmite de movimientos para incrementar el desaf\u00edo o una funcionalidad para grabar vuestra epopeya y reanudarla en otra marea?</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#errores-para-correccion-por-los-estudiantes","title":"Errores para Correcci\u00f3n por los Estudiantes","text":"<ol> <li>Errores de Sintaxis:</li> <li>Olvidar cerrar par\u00e9ntesis o corchetes.</li> <li>Usar una palabra clave de Python como nombre de variable (por ejemplo, <code>from</code>, <code>class</code>).</li> <li>Escribir mal alguna instrucci\u00f3n como <code>prin</code> en lugar de <code>print</code>.</li> <li>Errores Sem\u00e1nticos:</li> <li>Confundir las variables <code>FILAS</code> y <code>COLUMNAS</code> al generar pistas.</li> <li>Utilizar un comparador incorrecto, como <code>&lt;=</code> en lugar de <code>&lt;</code> o <code>==</code> en lugar de <code>!=</code>.</li> <li>Errores L\u00f3gicos:</li> <li>En <code>crear_camino</code>, crear un bucle infinito al moverse solo en una direcci\u00f3n o no moverse nunca hacia el tesoro.</li> <li>En <code>generar_mapa_con_solucion</code>, llenar todo el mapa solo con trampas sin dejar espacio para pistas o celdas vac\u00edas.</li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla/src/Readme/#nuevas-funcionalidades-para-implementar","title":"Nuevas Funcionalidades para Implementar","text":"<ol> <li>Rastreo del Camino:</li> <li>Modifica el juego para que el jugador deje un rastro en cada celda por la que pase. Por ejemplo, usar un punto o un caracter espec\u00edfico para mostrar el camino recorrido por el jugador.</li> <li>Limitaci\u00f3n de Movimientos:</li> <li>Establece un n\u00famero m\u00e1ximo de movimientos que el jugador puede realizar y finaliza el juego cuando se exceda, indicando que el jugador est\u00e1 \"perdido\".</li> <li>Mejor Visualizaci\u00f3n del Mapa:</li> <li>Implementar una funci\u00f3n que muestre el mapa con m\u00e1s detalles, como marcar la posici\u00f3n actual del jugador con un caracter especial.</li> <li>Funcionalidad de Deshacer Movimiento:</li> <li>Permitir que el jugador ingrese un comando para \"deshacer\" su \u00faltimo movimiento, haciendo que el juego sea m\u00e1s indulgente y estrat\u00e9gico.</li> </ol> <p>Recuerda, joven pirata programador: en cada l\u00ednea de c\u00f3digo puede haber un desaf\u00edo escondido o una oportunidad para brillar. \u00a1Prepara tus dedos para teclear, ajusta tus lentes de ver c\u00f3digo y que comience la cacer\u00eda del tesoro!</p> <p>\u00a1Que la fortuna os acompa\u00f1e y los vientos sean favorables en vuestra b\u00fasqueda del Tesoro de la Isla Desierta! \ud83c\udfdd\ufe0f\ud83d\udcb0</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/","title":"Actividad: El Juego de la B\u00fasqueda del Tesoro en la Isla","text":"<p>ID actividad: pe-Isla-u1u2u3</p> <p>Agrupamiento de la actividad: Individual</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#descripcion","title":"Descripci\u00f3n:","text":"<p>La actividad consiste en desarrollar y mejorar un juego interactivo en Python donde los estudiantes est\u00e1n atrapados en una isla y deben encontrar un tesoro escondido para escapar.</p> <p>Descripci\u00f3n del Problema:</p> <p>Los estudiantes est\u00e1n atrapados en una isla desierta y deben encontrar un tesoro escondido para escapar.</p> <p>La isla est\u00e1 representada como una cuadr\u00edcula donde cada celda puede contener una pista que indica la direcci\u00f3n general del tesoro, nada o una trampa que le impide el paso.</p> <p>Los estudiantes deben usar su conocimiento de estructuras de datos y control de flujo para interpretar las pistas, evitar las trampas y encontrar el tesoro.</p> <p>Este es un ejemplo de mapa del tesoro con dimensi\u00f3n 5, con el tesoro en la posicion (0,0) y el jugador en la posicion (2,2)</p> <p>El programa muestra lo siguiente al  usuario: <pre><code>?   ?   ?\n? ? ? ? ?\n  ?   ?      \n  ?   ? ?\n? ? ?   ?\nTu posici\u00f3n es (2, 2)\nIngresa tu movimiento (formato: 'u:arriba', 'd:abajo', 'l:izquierda', 'r:derecha', q:salir):\n</code></pre></p> <p>Internamente tendr\u00e9is una lista anidada para contener un mapa similar al siguiente: <pre><code>columnas  0    1    2    3    4\nfilas\n0       [\"X\", \" \", \"!\", \" \", \"&lt;\"]\n1       [\"!\", \"^\", \"!\", \"&lt;\", \"!\"]\n2       [\" \", \"^\", \" \", \"&lt;\", \" \"]\n3       [\" \", \"&lt;\", \" \", \"!\", \"^\"]\n4       [\"!\", \"&lt;\", \"!\", \" \", \"^\"]\n</code></pre></p> <p>Se pide realizar lo siguiente:</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#1-correccion-de-errores-o-problemas","title":"1. CORRECCI\u00d3N DE ERRORES O PROBLEMAS:","text":"<ul> <li> <p>1: El juego no se puede <code>jugar()</code></p> </li> <li> <p>2: Acaba la funci\u00f3n <code>generar_mapa()</code> sino no vas a poder hacer nada.</p> </li> <li> <p>3: Existen errores t\u00edpicos de no declarar correctamente las funciones.</p> </li> <li> <p>4: Las funciones <code>pedir_movimiento()</code> y <code>obtener_nueva_posicion()</code> tienen algo raro, ya que aparentemente parece que son correctas, pero dan problemas... igual depurando puedes aclararte y corregirlo.</p> </li> <li> <p>5: Corrige otros errores sint\u00e1cticos que te indique el IDE para evitar problemas y pasar a las mejoras.</p> </li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#2-mejoras","title":"2. MEJORAS:","text":"<ul> <li> <p>1: Mostrar los n\u00fameros del tablero asociados a las filas y las columnas.      Pero las filas y columnas que empiecen en el n\u00famero 1 visualmente. <pre><code>   1 2 3 4 5\n  -----------\n1 |? ? ? ? ?|\n2 |?     ? ?|\n3 |?       ?|\n4 |? ? ? ? ?|\n5 |  ? ? ? ?|\n  -----------\n</code></pre></p> </li> <li> <p>2: Mostrar la posici\u00f3n del jugador con respecto a la numeraci\u00f3n visual del mapa.</p> </li> </ul> <p><code>Tu posici\u00f3n es (3, 3)  #aunque internamente est\u00e9 en la posici\u00f3n (2, 2)</code></p> <ul> <li> <p>3: Evitar que en la posici\u00f3n inicial del jugador en el mapa se genere una pista o una trampa.</p> </li> <li> <p>4: Limpiar la consola cada vez que realices un movimiento y dejar el mensaje de la pista o trampa en la zona superior de la consola, justo arriba del mapa. Pero cuando se encuentra el tesoro no debe borrar la consola y el mensaje aparecer\u00e1 abajo y finalizar\u00e1 el juego.</p> </li> <li> <p>5 (DIF\u00cdCIL): Mostrar un s\u00edmbolo para el jugador. Para ello, una soluci\u00f3n es cambiar el c\u00f3digo de la funci\u00f3n <code>imprimir_mapa_oculto()</code></p> </li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#objetivo","title":"Objetivo:","text":"<ul> <li>Aplicar conocimientos de estructuras de datos y control de flujo en un contexto pr\u00e1ctico.</li> <li>Desarrollar habilidades de depuraci\u00f3n y resoluci\u00f3n de problemas en programaci\u00f3n.</li> <li>Fomentar la creatividad y la innovaci\u00f3n en el dise\u00f1o de algoritmos y soluciones.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#trabajo-a-realizar","title":"Trabajo a realizar:","text":"<ol> <li>Corregir errores y problemas en el c\u00f3digo del juego proporcionado.</li> <li>Implementar mejoras sugeridas para el juego.</li> </ol> <p>Aclaraci\u00f3n:  - La realizaci\u00f3n de test te puede ayudar a detectar errores y problemas. No es obligatorio, pero si recomendable. - No se puede modificar el c\u00f3digo de las funciones proporcionadas para que hagan algo distinto, pero si se puede a\u00f1adir c\u00f3digo en las funciones proporcionadas siempre que el funcionamiento sea el mismo.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#recursos","title":"Recursos","text":"<ul> <li>Apuntes dados en clase.</li> <li>Recursos y ejemplos vistos en clase.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#permitido-y-prohibido","title":"Permitido y Prohibido","text":"<ul> <li>Permitido el uso de apuntes, ejemplos y recursos vistos en clase.</li> <li>Prohibido el uso de cualquier otro recurso: apuntes de compa\u00f1eros, ayuda de compa\u00f1eros, copilot, chatgpt, etc.</li> </ul> <p>El uso de cualquier recurso prohibido supondr\u00e1 la calificaci\u00f3n de 0 en la actividad.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#evaluacion-y-calificacion","title":"Evaluaci\u00f3n y calificaci\u00f3n","text":"<p>La prueba especifica (50%) consistir\u00e1 de dos pruebas, la pr\u00e1ctica que consisten en la realizaci\u00f3n de un programa en Python que cumpla con los requisitos especificados en el enunciado, y la te\u00f3rica que consiste en un cuestionario de preguntas sobre los contenidos de la unidad. - La parte pr\u00e1ctica, este ejercicio, se evaluar\u00e1 con una calificaci\u00f3n de 0 a 10 puntos. (80%) - La parte te\u00f3rica, que se realizar\u00e1 otro dia, y se evaluar\u00e1 con una calificaci\u00f3n de 0 a 10 puntos. (20%)</p> <p>Adicionalmente se realizar\u00e1 un pr\u00e1ctica (40%) que se entregar\u00e1 esta semana. Esta pr\u00e1ctica se evaluar\u00e1 con una calificaci\u00f3n de 0 a 10 puntos.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#ra-y-ce-evaluados","title":"RA y CE evaluados:","text":"<ul> <li>RA1: Conoce la estructura de un programa inform\u00e1tico identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado.</li> <li>RA3: Escribe y depura c\u00f3digo analizando y utilizando las estructuras de control del lenguaje.</li> <li>RA6: Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos. (no todos los criterios de evaluaci\u00f3n).</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#conlleva","title":"Conlleva","text":"<p>presentaci\u00f3n: SI, se evaluar\u00e1 con el profesor.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#rubrica","title":"Rubrica:","text":"<ul> <li>El programa funciona adecuadamente.</li> <li>Las mejoras solicitadas se han implementado adecuadamente</li> <li>Trabajo con Variables, Constantes y Tipos de Datos y sus operadores. </li> <li>Comentarios y Documentaci\u00f3n en el C\u00f3digo </li> <li>Herramientas de Desarrollo y Entornos Integrados</li> <li>Identificaci\u00f3n y uso de las Estructuras de Control y Flujo del Programa</li> <li>Manejo de Errores y Excepciones</li> <li>Desarrollo, Prueba y Depuraci\u00f3n de Programas</li> <li>Trabajo con Librer\u00edas y Estructuras de Datos Avanzadas (Listas, Tuplas, Diccionarios, Conjuntos, etc.)</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Isla%20-%20New/alumnos/#entrega","title":"Entrega","text":"<p>La entrega tiene que cumplir las condiciones de entrega para poder ser calificada. En caso de no cumplirlas podr\u00eda calificarse como no entregada.</p> <ul> <li>Conlleva la entrega de URL a repositorio: El proyecto se entregar\u00e1 en un repositorio GitHub, trabajando por proyectos y dejando constancia de las acciones realizadas.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/","title":"Index","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/#ejercicio-el-buscaminas-de-la-isla-misteriosa","title":"\ud83e\udde8 Ejercicio: El Buscaminas de la Isla Misteriosa \ud83e\udde8","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/#descripcion-del-problema","title":"Descripci\u00f3n del Problema:","text":"<p>\u00a1Aventureros! Os encontr\u00e1is en la Isla Misteriosa, un lugar conocido por sus enigmas y, sobre todo, por sus peligrosas minas ocultas. Vuestro objetivo es despejar la isla de minas sin detonar ninguna. \u00a1Cuidado! Un paso en falso y todo habr\u00e1 terminado.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/#representacion-del-juego","title":"Representaci\u00f3n del Juego:","text":"<ul> <li>Tablero: El juego se desarrolla en un tablero de cuadr\u00edcula de 8x8.</li> <li>Minas: Algunas celdas del tablero contienen minas ocultas.</li> <li>N\u00fameros: Las celdas sin minas muestran el n\u00famero de minas en las celdas adyacentes.</li> <li>Celdas Vac\u00edas: Las celdas sin minas ni n\u00fameros adyacentes son \"vac\u00edas\".</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/#estructuras-de-datos-a-utilizar","title":"Estructuras de Datos a Utilizar:","text":"<ul> <li>Matriz Bidimensional: Representaci\u00f3n del tablero.</li> <li>Listas: Para almacenar las coordenadas de las minas, n\u00fameros y celdas vac\u00edas.</li> <li>Conjuntos: Para llevar un registro de las celdas ya reveladas o marcadas.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/#tareas-para-los-estudiantes","title":"Tareas para los Estudiantes:","text":"<ol> <li>Inicializaci\u00f3n del Tablero: Crear una funci\u00f3n para inicializar el tablero colocando aleatoriamente las minas y calculando los n\u00fameros para las celdas adyacentes a las minas.</li> <li>Revelar Celda: Implementar una funci\u00f3n que revele el contenido de una celda seleccionada por el usuario. Si la celda es una mina, el juego termina. Si es un n\u00famero, se muestra. Si es vac\u00eda, se revelan las celdas adyacentes. Permite revelar celdas marcadas.</li> <li>Marcar Celdas: Permitir a los usuarios marcar celdas que creen que contienen minas.</li> <li>Verificaci\u00f3n de Victoria: Verificar si el jugador ha despejado todas las celdas sin minas.</li> <li>Interfaz de Usuario: Crear una interfaz simple en la consola para que el jugador pueda interactuar con el juego (por ejemplo, elegir una celda para revelar o marcar).</li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/#ejemplo-de-interaccion","title":"Ejemplo de Interacci\u00f3n:","text":"<pre><code>  1 2 3 4 5 6 7 8\n1 . . . . . . . .\n2 . . . . . . . .\n3 . . . . . . . .\n4 . . . . . . . .\n5 . . . . . . . .\n6 . . . . . . . .\n7 . . . . . . . .\n8 . . . . . . . .\n\nElige una acci\u00f3n:\n1. Revelar celda\n2. Marcar celda\n3. Salir\n\nTu elecci\u00f3n: 1\nIngresa coordenadas (fila, columna): 5,3\n\nRevelando celda 5,3...\n</code></pre>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2324%20-%20Minas/src/#consideraciones-adicionales","title":"Consideraciones Adicionales:","text":"<ul> <li>Introduce errores de sintaxis y l\u00f3gica en el c\u00f3digo base que los estudiantes tendr\u00e1n que corregir.</li> <li>A\u00f1ade desaf\u00edos adicionales, como limitar el n\u00famero de banderas que pueden colocar o implementar diferentes niveles de dificultad.</li> </ul> <p>Este ejercicio de Buscaminas no solo les permite practicar con estructuras de datos fundamentales en Python, sino que tambi\u00e9n desaf\u00eda su l\u00f3gica y capacidad de pensamiento cr\u00edtico. Adem\u00e1s, al ser un juego familiar, puede resultar m\u00e1s atractivo y motivador para ellos.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20HundirFlota/","title":"Index","text":"<p>Ver la descripci\u00f3n aqui</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica1_README/","title":"practica1 README","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica1_README/#prueba-practica-01-matriz-ordenada","title":"Prueba Pr\u00e1ctica 01: Matriz Ordenada","text":"<p>En esta pr\u00e1ctica trabajar\u00e1s con matrices en Python, dise\u00f1ando un programa modular que permita al usuario crear, ordenar y mostrar matrices. Adem\u00e1s, guardar\u00e1s la configuraci\u00f3n y los resultados en un fichero JSON para consolidar el manejo de estructuras avanzadas.</p> <p>Tu programa deber\u00e1 utilizar un diccionario para almacenar la configuraci\u00f3n del programa, como los l\u00edmites de las dimensiones de la matriz, los valores permitidos y el formato de salida de los n\u00fameros. Esta configuraci\u00f3n debe ser consultada a lo largo del programa, en lugar de usar valores codificados directamente.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica1_README/#tareas-a-realizar","title":"Tareas a realizar","text":"<ol> <li>Definir las dimensiones de la matriz:</li> <li>Solicita al usuario las dimensiones de la matriz.</li> <li>Las dimensiones deben cumplir con un l\u00edmite m\u00ednimo y m\u00e1ximo definido en el diccionario de configuraci\u00f3n.</li> </ol> <p>Ejemplo: <pre><code>Dime las dimensiones de la matriz...\nFilas &gt;&gt; 2\nColumnas &gt;&gt; 2\n</code></pre></p> <ol> <li>Recopilar los elementos de la matriz:</li> <li>Solicita al usuario que introduzca los elementos de la matriz uno por uno.</li> <li>Los valores deben estar dentro de un rango m\u00ednimo y m\u00e1ximo definido en el diccionario de configuraci\u00f3n.</li> <li>Almacena los elementos en una estructura que represente la matriz.</li> </ol> <p>Ejemplo: <pre><code>Dame los elementos:\n&gt;&gt; 4.789\n&gt;&gt; -0.8938\n&gt;&gt; -6.8\n&gt;&gt; 3.9987\n</code></pre></p> <ol> <li>Crear y mostrar la matriz original:</li> <li>Imprime la matriz con un formato que alinee todos los n\u00fameros correctamente.</li> <li>El formato de salida para los valores (tama\u00f1o y n\u00famero de decimales) debe estar definido en el diccionario de configuraci\u00f3n.</li> </ol> <p>Ejemplo: <pre><code>                      4.79 -0.89\nMatriz 2x2 original: -6.80  4.00\n</code></pre></p> <ol> <li>Ordenar los elementos de la matriz:</li> <li> <p>Una buena pr\u00e1ctica para ordenar los valores de la matriz puede ser extraerlos a una \u00fanica lista, ordenarlos y reconstruir de nuevo la matriz con los valores ordenados respetando las dimensiones originales.</p> </li> <li> <p>Mostrar la matriz ordenada:</p> </li> <li>Imprime la matriz ordenada usando el mismo formato que la original.</li> </ol> <p>Ejemplo: <pre><code>                     -6.80 -0.89\nMatriz 2x2 ordenada:  4.00  4.79\n</code></pre></p> <ol> <li>Guardar en un fichero JSON:</li> <li> <p>Almacena en un fichero JSON:</p> <ul> <li>La configuraci\u00f3n del programa.</li> <li>La matriz original.</li> <li>La matriz ordenada.</li> </ul> </li> <li> <p>Si el archivo ya existe, debe sobrescribirse.</p> </li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica1_README/#requisitos-adicionales","title":"Requisitos adicionales","text":"<ol> <li>Uso de un diccionario:</li> <li>Define un diccionario de configuraci\u00f3n para almacenar:<ul> <li>Los l\u00edmites de las dimensiones de la matriz (1 a 10).</li> <li>Los valores m\u00ednimo y m\u00e1ximo permitidos en la matriz (-9.98 a 9.98).</li> <li>El formato de salida de los n\u00fameros (n\u00famero de decimales = 2 y tama\u00f1o total = 5).</li> </ul> </li> <li> <p>No uses valores codificados directamente en el programa. Consulta siempre los l\u00edmites desde el diccionario.</p> </li> <li> <p>Gesti\u00f3n de errores:</p> </li> <li> <p>Valida todas las entradas del usuario:</p> <ul> <li>Si introduce un valor fuera de rango o no v\u00e1lido, muestra un mensaje de error y vuelve a pedir la entrada.</li> </ul> </li> <li> <p>Modularidad:</p> </li> <li>Divide tu programa en funciones independientes. Algunas sugerencias:<ul> <li><code>pedir_dimensiones</code>: Solicita las dimensiones de la matriz al usuario.</li> <li><code>generar_matriz</code>: Recopila los valores y genera la matriz.</li> <li><code>ordenar_matriz</code>: Ordena los valores y reestructura la matriz.</li> <li><code>mostrar_matriz</code>: Muestra cualquier matriz formateada.</li> <li><code>guardar_json</code>: Guarda la informaci\u00f3n en un fichero JSON.</li> </ul> </li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica1_README/#preguntas-a-responder","title":"Preguntas a responder","text":"<p>Debes responder a estas preguntas editando este mismo fichero, y debajo de cada una...</p> <ol> <li> <p>\u00bfPor qu\u00e9 es m\u00e1s adecuado usar un diccionario en lugar de una lista para almacenar la configuraci\u00f3n del programa?</p> </li> <li> <p>\u00bfCu\u00e1ndo utilizar\u00edas un conjunto y para qu\u00e9?. Proporciona un ejemplo de cualquiera de los 3 ejercicios que has realizado.</p> </li> <li> <p>\u00bfSer\u00eda m\u00e1s adecuado almacenar la informaci\u00f3n de la matriz en una tupla de tuplas? Responde \"S\u00ed\" o \"No\" y razona tu respuesta.</p> </li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/","title":"practica2 README","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#prueba-practica-02-analisis-de-datos-en-un-censo","title":"Prueba Pr\u00e1ctica 02: An\u00e1lisis de datos en un censo","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#contexto","title":"Contexto:","text":"<p>Se ha proporcionado un archivo JSON que contiene informaci\u00f3n de un censo de una poblaci\u00f3n. Cada registro tiene los siguientes campos:</p> <ul> <li>Nombre: Nombre de la persona.</li> <li>Edad: Edad de la persona.</li> <li>Ciudad: Ciudad donde vive.</li> <li>Profesi\u00f3n: Profesi\u00f3n de la persona.</li> </ul> <p>El objetivo es trabajar con estos datos en memoria y generar estad\u00edsticas \u00fatiles sobre ellos, utilizando las estructuras de datos y funcionalidades avanzadas de Python como conjuntos y diccionarios.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#tareas-a-realizar","title":"Tareas a realizar","text":"<p>Deber\u00e1s completar las funciones siguientes:</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#1-cargar_datos","title":"1. <code>cargar_datos()</code>","text":"<p>Realiza la carga de los datos (practica2_censo_info.json) en una estructura de datos adecuada, manejando los posibles errores que se puedan producir.</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#2-obtener_ciudades_unicas","title":"2. <code>obtener_ciudades_unicas()</code>","text":"<ul> <li>Entrada: Recibe la lista de datos cargados.</li> <li>Salida: Devuelve un conjunto con las ciudades \u00fanicas registradas en el censo.</li> <li>Ejemplo de salida: <code>{\"Madrid\", \"Barcelona\", \"Sevilla\", \"Valencia\", \"Bilbao\"}</code></li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#3-contar_profesiones","title":"3. <code>contar_profesiones()</code>","text":"<ul> <li>Entrada: Recibe la lista de datos cargados.</li> <li>Salida: Devuelve un diccionario con las profesiones como claves y la cantidad de personas que las ejercen como valores.</li> <li> <p>Ejemplo de salida:</p> <pre><code>{\n    \"Ingeniero\": 4,\n    \"M\u00e9dico\": 3,\n    \"Abogado\": 2,\n    \"Profesor\": 5\n}\n</code></pre> </li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#4-agrupar_personas_por_edad","title":"4. <code>agrupar_personas_por_edad()</code>","text":"<ul> <li>Entrada: Recibe la lista de datos cargados.</li> <li>Salida: Devuelve un diccionario en el que:</li> <li>Las claves son las edades.</li> <li>Los valores son conjuntos con los nombres de las personas de esa edad.</li> <li> <p>Ejemplo de salida:</p> <pre><code>{\n    25: {\"Juan\", \"Pedro\"},\n    30: {\"Ana\", \"Luis\"},\n    40: {\"Carmen\", \"Jose\"}\n}\n</code></pre> </li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#5-crear-la-funcion-buscar_personas_por_ciudad","title":"5. Crear la funci\u00f3n <code>buscar_personas_por_ciudad()</code>","text":"<ul> <li>Entrada: Recibe la lista de datos cargados y una ciudad.</li> <li>Salida: Devuelve un conjunto con los nombres de las personas que viven en esa ciudad.</li> <li>Ejemplo de salida: Si la ciudad es <code>\"Madrid\"</code>: <code>{\"Juan\", \"Carmen\", \"Luis\"}</code></li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#6-mostrar_estadisticas","title":"6. <code>mostrar_estadisticas()</code>","text":"<ul> <li>Entrada: Recibe la lista de datos cargados.</li> <li>Requisitos:</li> <li>Invocar las funciones creadas anteriormente y mostrar los resultados de cada una:<ol> <li>Ciudades \u00fanicas.</li> <li>N\u00famero de personas por profesi\u00f3n.</li> <li>Personas agrupadas por edad.</li> <li>B\u00fasqueda por ciudad:</li> <li>Solicitar al usuario una ciudad para buscar personas.</li> <li>Mostrar los nombres de las personas que viven all\u00ed o indicar que no hay resultados.</li> </ol> </li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#ejemplo-de-salida-del-programa","title":"Ejemplo de salida del programa:","text":"<p>Al ejecutar el programa, debe cargar los datos del archivo y generar las estad\u00edsticas solicitadas en el ejercicio, con una salida similar a la siguiente:</p> <pre><code>1. Ciudades \u00fanicas:\n   Barcelona, Bilbao, C\u00e1diz, Madrid, Sevilla y Valencia.\n\n2. N\u00famero de personas por profesi\u00f3n:\n\n   Abogado: 2\n   Estudiante: 1\n   Ingeniero: 7\n   M\u00e9dico: 4\n   Profesor: 7\n\n3. Personas agrupadas por edad:\n\n   22: Lucia - Raul - Maria.\n   25: Pedro - Juan.\n   28: Eva - Sara - Manuel.\n   30: Julia - Luis - Ana - Laura.\n   33: Juani - Alberto.\n   35: Irene - Victor - Pablo.\n   40: Jose - Elena - David - Carmen.\n\nIntroduce una ciudad para buscar personas: C\u00e1diz\n\n4. Personas en C\u00e1diz:\n   Ana\n   Juani\n   Manuel\n   Sara\n</code></pre>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica2_README/#pautas-importantes","title":"Pautas importantes:","text":"<ol> <li>Modularizaci\u00f3n del c\u00f3digo:</li> <li>Implementa las funciones descritas y las que necesites o veas necesarias para implementar tu soluci\u00f3n.</li> <li> <p>Evita escribir toda la l\u00f3gica en la funci\u00f3n <code>main()</code>.</p> </li> <li> <p>Errores y excepciones:</p> </li> <li> <p>Aseg\u00farate de manejar correctamente los errores al leer el archivo JSON.</p> </li> <li> <p>Ejemplo del archivo JSON:    Utiliza el archivo proporcionado en el enunciado como entrada para probar tu programa.</p> </li> <li> <p>Descripci\u00f3n del formato de salida de cada apartado: </p> </li> <li> <p>La lista de ciudades est\u00e1 ordenada alfab\u00e9ticamente a la hora de mostrarse. Adem\u00e1s, si no hay ciudades debe mostrar \"No existen!\", si solo hubiera una ciudad debe mostrar por ejemplo \"C\u00e1diz.\". Por \u00faltimo, si hay m\u00e1s de una ciudad las debe mostrar como en el ejemplo.</p> </li> <li> <p>El n\u00famero de personas por profesi\u00f3n debe mostrarse ordenadas alfab\u00e9ticamente por la clave. Para hacer esto de forma m\u00e1s sencilla, pod\u00e9is crear un nuevo diccionario con las claves ordenadas del diccionario original.</p> </li> <li> <p>Las personas agrupadas por edad tambi\u00e9n deben aparecer por las claves ordenadas y con el separador \" - \" entre los nombres, finalizando cada l\u00ednea con un punto (\".\").</p> </li> <li> <p>Las personas de una ciudad deben aparecer de forma ordenada alfab\u00e9ticamente en l\u00edneas diferentes.</p> </li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/","title":"practica3 README","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#prueba-practica-03-gestion-de-tareas","title":"Prueba Pr\u00e1ctica 03: Gesti\u00f3n de Tareas","text":"<p>En esta pr\u00e1ctica, implementar\u00e1s funciones para gestionar una lista de tareas predefinidas. El programa contar\u00e1 con un men\u00fa interactivo que permitir\u00e1:</p> <ol> <li>Filtrar tareas: Seleccionar solo las tareas con un estado espec\u00edfico.</li> <li>Mostrar todas las tareas: Listar todas las tareas en formato legible.</li> <li>Mostrar la siguiente tarea: Recorrer las tareas (filtradas o completas) secuencialmente con un iterador.</li> <li>Salir: Finalizar el programa.</li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#detalles-tecnicos","title":"Detalles T\u00e9cnicos","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#1-lista-de-tareas","title":"1. Lista de Tareas","text":"<p>Se proporciona la funci\u00f3n <code>crear_tareas_ejemplo()</code> que genera una lista predefinida de tareas con los siguientes atributos: - <code>ID</code>: N\u00famero \u00fanico de identificaci\u00f3n. - <code>Descripci\u00f3n</code>: Texto breve que describe la tarea. - <code>Estado</code>: Estado actual de la tarea (<code>Pendiente</code>, <code>En Proceso</code>, <code>Completada</code>).</p>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#2-menu","title":"2. Men\u00fa","text":"<p>El programa debe implementar las siguientes opciones: - Opci\u00f3n 1: Filtrar tareas   - Solicita al usuario un estado (<code>Pendiente</code>, <code>En Proceso</code>, <code>Completada</code>) o presiona ENTER para eliminar el filtro.   - Filtra las tareas seg\u00fan el estado introducido.   - Reinicia el iterador con las tareas filtradas.</p> <ul> <li>Opci\u00f3n 2: Mostrar todas las tareas</li> <li>Utiliza una funci\u00f3n para generar una cadena con todas las tareas formateadas.</li> <li> <p>Restricci\u00f3n: Esta funci\u00f3n debe utilizar <code>join</code>.</p> </li> <li> <p>Opci\u00f3n 3: Mostrar la siguiente tarea</p> </li> <li>Muestra la siguiente tarea del iterador. Si no hay m\u00e1s tareas, reinicia el iterador y lo notifica.</li> <li> <p>Restricci\u00f3n: Implementa el recorrido con el iterador y el m\u00e9todo <code>next()</code>.</p> </li> <li> <p>Opci\u00f3n 4: Salir</p> </li> <li>Finaliza el programa.</li> </ul>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#tareas-a-realizar","title":"Tareas a realizar:","text":"<p>Se te proporciona un esqueleto del programa, con algunas funciones ya terminadas. Pero debes completar las siguientes:</p> <ol> <li><code>obtener_tareas</code></li> <li>Toma una lista de tareas y retorna una cadena con todas las tareas en formato:      <pre><code>ID: 1, Descripci\u00f3n: Estudiar Python, Estado: Pendiente\nID: 2, Descripci\u00f3n: Terminar proyecto, Estado: En Proceso\n...\n</code></pre></li> <li> <p>Obligatorio: Usa <code>join</code> para separar las tareas en diferentes l\u00edneas.</p> </li> <li> <p><code>mostrar_tarea</code></p> </li> <li> <p>Recibe un diccionario que representa una tarea y la muestra en formato:      <pre><code>ID: 1, Descripci\u00f3n: Estudiar Python, Estado: Pendiente\n</code></pre></p> </li> <li> <p><code>filtrar_tareas_por_estado</code></p> </li> <li> <p>Recibe una lista de tareas y un estado, y retorna una tupla con las tareas que coinciden.</p> </li> <li> <p><code>main</code> L\u00f3gica de Filtrado (Opci\u00f3n 1 del Men\u00fa)</p> </li> <li>Filtra las tareas por estado si el usuario introduce un estado v\u00e1lido. Si no introduce nada, elimina el filtro.</li> <li> <p>Reinicia el iterador con la nueva lista de tareas.</p> </li> <li> <p><code>main</code> L\u00f3gica de Mostrar Tareas (Opci\u00f3n 2 del Men\u00fa)</p> </li> <li> <p>Utiliza <code>obtener_tareas</code> para mostrar todas las tareas en formato legible.</p> </li> <li> <p><code>main</code> L\u00f3gica de Mostrar Siguiente Tarea (Opci\u00f3n 3 del Men\u00fa)</p> </li> <li>Muestra la siguiente tarea del iterador. Si no hay m\u00e1s tareas, reinicia el iterador e informa al usuario.</li> </ol>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#ejemplo-de-ejecucion","title":"Ejemplo de Ejecuci\u00f3n","text":""},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#menu-principal","title":"Men\u00fa Principal","text":"<pre><code>Men\u00fa:\n----\n1. Filtrar tareas \n2. Mostrar todas las tareas\n3. Mostrar siguiente tarea\n4. Salir\nElige una opci\u00f3n:\n</code></pre>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#opcion-1-filtrar-tareas","title":"Opci\u00f3n 1: Filtrar tareas","text":"<ul> <li>Input: en proceso</li> <li>Resultado: Filtra las tareas por el estado <code>En Proceso</code>. Las tareas filtradas ser\u00e1n:</li> </ul> <pre><code>ID: 2, Descripci\u00f3n: Terminar proyecto, Estado: En Proceso\nID: 6, Descripci\u00f3n: Actualizar curr\u00edculum, Estado: En Proceso\n\nPresione una tecla para continuar . . . \n</code></pre>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#opcion-2-mostrar-todas-las-tareas","title":"Opci\u00f3n 2: Mostrar todas las tareas","text":"<pre><code>ID: 1, Descripci\u00f3n: Estudiar Python, Estado: Pendiente\nID: 2, Descripci\u00f3n: Terminar proyecto, Estado: En Proceso\nID: 3, Descripci\u00f3n: Revisar correos, Estado: Completada\nID: 4, Descripci\u00f3n: Planificar reuni\u00f3n, Estado: Pendiente\nID: 5, Descripci\u00f3n: Comprar libros, Estado: Pendiente\nID: 6, Descripci\u00f3n: Actualizar curr\u00edculum, Estado: En Proceso\nID: 7, Descripci\u00f3n: Organizar escritorio, Estado: Completada\nID: 8, Descripci\u00f3n: Preparar presentaci\u00f3n, Estado: Pendiente   \n\nPresione una tecla para continuar . . . \n</code></pre>"},{"location":"section1/u03/practica/otrosRecursos/examenes/2425%20-%20pruebaClase/practica3_README/#opcion-3-mostrar-siguiente-tarea","title":"Opci\u00f3n 3: Mostrar siguiente tarea","text":"<ul> <li>Primera vez:</li> </ul> <pre><code>Siguiente tarea:\nID: 1, Descripci\u00f3n: Estudiar Python, Estado: Pendiente\n\nPresione una tecla para continuar . . . \n</code></pre> <ul> <li>Si no existen m\u00e1s tareas:</li> </ul> <pre><code>No hay m\u00e1s tareas! Se ha reiniciado el iterador...\n\nPresione una tecla para continuar . . . \n</code></pre>"},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/","title":"UD 3 - 3.0 Cadenas","text":"","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#30-cadenas","title":"3.0 Cadenas","text":"<p>Las cadenas son una secuencia de caracteres. En Python, las cadenas son objetos y tienen m\u00e9todos asociados. En esta unidad vamos a ver c\u00f3mo trabajar con cadenas en Python.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#1-acceso-a-los-caracteres-de-una-cadena","title":"1. Acceso a los caracteres de una cadena","text":"<p>En Python, las cadenas son secuencias de caracteres. Puedes acceder a los caracteres de una cadena utilizando el operador de indexaci\u00f3n <code>[]</code>. Por ejemplo, si tienes una cadena <code>fruta</code> y quieres acceder al segundo car\u00e1cter de la cadena, puedes hacerlo de la siguiente manera:</p> <pre><code>```Python\n&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; letra = fruta[1]\n</code></pre> <p>La segunda sentencia extrae el car\u00e1cter en la posici\u00f3n del \u00edndice 1 de la variable <code>fruta</code> y la asigna a la variable <code>letra</code>.</p> <p>La expresi\u00f3n que hay dentro de los corchetes es llamada \u00edndice. El \u00edndice indica qu\u00e9 car\u00e1cter de la secuencia quieres (de ah\u00ed el nombre).</p> <p>Pero podr\u00edas no obtener lo que esperas:</p> <pre><code>&gt;&gt;&gt; print(letra)\na\n</code></pre> <p>Para la mayor\u00eda de las personas, la primer letra de \u201cbanana\u201d es \u201cb\u201d, no \u201ca\u201d. Pero en Python, el \u00edndice es un desfase desde el inicio de la cadena, y el desfase de la primera letra es cero.</p> <pre><code>&gt;&gt;&gt; letra = fruta[0]\n&gt;&gt;&gt; print(letra)\nb\n</code></pre> <p>As\u00ed que \u201cb\u201d es la letra 0 (\u201ccero\u201d) de \u201cbanana\u201d, \u201ca\u201d es la letra con \u00edndice 1, y \u201cn\u201d es la que tiene \u00edndice 2, etc.</p> <p> </p> Representaci\u00f3n de una Cadena de texto","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#11-indices-de-cadenas","title":"1.1. Indices de Cadenas","text":"<p>Puedes usar cualquier expresi\u00f3n, incluyendo variables y operadores, como un \u00edndice, pero el valor del \u00edndice tiene que ser un entero. De otro modo obtendr\u00e1s:</p> <pre><code>&gt;&gt;&gt; letra = fruta[1.5]\nTypeError: string indices must be integers\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#12-rebanado-slicing-de-una-cadena","title":"1.2. Rebanado (slicing) de una cadena","text":"<p>Un segmento de una cadena es llamado rebanado. Seleccionar un rebanado es similar a seleccionar un car\u00e1cter:</p> <pre><code>&gt;&gt;&gt; s = 'Monty Python'\n&gt;&gt;&gt; print(s[0:5])\nMonty\n&gt;&gt;&gt; print(s[6:12])\nPython\n</code></pre> <p>El operador <code>[n:m]</code> retorna la parte de la cadena desde el \u201cn-\u00e9simo\u201d car\u00e1cter hasta el \u201cm-\u00e9simo\u201d car\u00e1cter, incluyendo el primero pero excluyendo el \u00faltimo.</p> <p>Si omites el primer \u00edndice (antes de los dos puntos), el rebanado comienza desde el inicio de la cadena. Si omites el segundo \u00edndice, el rebanado va hasta el final de la cadena:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; fruta[:3]\n'ban'\n&gt;&gt;&gt; fruta[3:]\n'ana'\n</code></pre> <p>Si el primer \u00edndice es mayor que o igual que el segundo, el resultado es una cadena vac\u00eda, representado por dos comillas:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; fruta[3:3]\n''\n</code></pre> <p>Una cadena vac\u00eda no contiene caracteres y tiene un tama\u00f1o de 0, pero fuera de esto es lo mismo que cualquier otra cadena.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#13-las-cadenas-son-inmutables","title":"1.3. Las cadenas son inmutables","text":"<p>Puede ser tentador utilizar el operador [] en el lado izquierdo de una asignaci\u00f3n, con la intenci\u00f3n de cambiar un car\u00e1cter en una cadena. Por ejemplo:</p> <pre><code>&gt;&gt;&gt; saludo = 'Hola, mundo!'\n&gt;&gt;&gt; saludo[0] = 'J'\nTypeError: 'str' object does not support item assignment\n</code></pre> <p>El \u201cobjeto\u201d en este caso es la cadena y el \u201c\u00edtem\u201d es el car\u00e1cter que tratamos de asignar. Por ahora, un objeto es la misma cosa que un valor, pero vamos a redefinir esa definici\u00f3n despu\u00e9s. Un \u00edtem es uno de los valores en una secuencia.</p> <p>La raz\u00f3n por la cual ocurre el error es que las cadenas son inmutables, lo cual significa que no puedes modificar una cadena existente. Lo mejor que puedes hacer es crear una nueva cadena que sea una variaci\u00f3n de la original:</p> <pre><code>&gt;&gt;&gt; saludo = 'Hola, mundo!'\n&gt;&gt;&gt; nuevo_saludo = 'J' + saludo[1:]\n&gt;&gt;&gt; print(nuevo_saludo)\nJola, mundo!\n</code></pre> <p>Este ejemplo concatena una nueva letra a una parte de <code>saludo</code>. Esto no tiene efecto sobre la cadena original.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#2-operando-con-cadenas","title":"2. Operando con cadenas","text":"<p>Las cadenas en Python soportan operadores como <code>+</code>, <code>*</code>, <code>==</code> e <code>in</code>. M\u00e9todos como <code>len</code> para obtener la longitud , m\u00e9topdos </p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#21-multiplicando-y-concatenando-de-cadenas","title":"2.1. Multiplicando <code>*</code> y concatenando de cadenas <code>+</code>","text":"<p>En general, no puedes realizar operaciones matem\u00e1ticas con cadenas, incluso si los caracteres parecen n\u00fameros. El siguiente c\u00f3digo es incorrecto:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; 'n' + 1\nTypeError: Can't convert 'int' object to str implicitly\n</code></pre> <p>El error que obtienes es un <code>TypeError</code>, que significa que est\u00e1s intentando operar con tipos incompatibles. En este caso, est\u00e1s intentando sumar un car\u00e1cter a un n\u00famero.</p> <p>Pero puedes realizar otras operaciones con cadenas, como la concatenaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; prefijo = 'an'\n&gt;&gt;&gt; prefijo + fruta\n'ananana'\n</code></pre> <p>Tambi\u00e9n puedes multiplicar una cadena por un n\u00famero entero:</p> <pre><code>&gt;&gt;&gt; prefijo = 'an'\n&gt;&gt;&gt; prefijo * 3\n'ananan'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#22-obtener-el-tamano-de-una-cadena-usando-len","title":"2.2. Obtener el tama\u00f1o de una cadena usando <code>len</code>","text":"<p><code>len</code> es una funci\u00f3n nativa que devuelve el n\u00famero de caracteres en una cadena:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; len(fruta)\n6\n</code></pre> <p>Para obtener la \u00faltima letra de una cadena, podr\u00edas estar tentado a probar algo como esto:</p> <pre><code>&gt;&gt;&gt; tama\u00f1o = len(fruta)\n&gt;&gt;&gt; ultima = fruta[tama\u00f1o]\nIndexError: string index out of range\n</code></pre> <p>La raz\u00f3n de que haya un <code>IndexError</code> es que ah\u00ed no hay ninguna letra en \u201cbanana\u201d con el \u00edndice 6. Puesto que empezamos a contar desde cero, las seis letras est\u00e1n enumeradas desde 0 hasta 5. Para obtener el \u00faltimo car\u00e1cter, tienes que restar 1 a <code>length</code>:</p> <pre><code>&gt;&gt;&gt; ultima = fruta[tama\u00f1o-1]\n&gt;&gt;&gt; print(ultima)\na\n</code></pre> <p>Alternativamente, puedes usar \u00edndices negativos, los cuales cuentan hacia atr\u00e1s desde el final de la cadena. La expresi\u00f3n <code>fruta[-1]</code> devuelve la \u00faltima letra, <code>fruta[-2]</code> la pen\u00faltima letra, y as\u00ed sucesivamente.</p> <p>IMPORTANTE: En las secuencias, el \u00edndice empieza en la posici\u00f3n <code>0</code> y termina en la posici\u00f3n <code>len() - 1</code></p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#23-el-operador-in","title":"2.3. El operador <code>in</code>","text":"<p>La palabra <code>in</code> es un operador booleano que toma dos cadenas y regresa <code>True</code> si la primera cadena aparece como una subcadena de la segunda:</p> <pre><code>&gt;&gt;&gt; 'a' in 'banana'\nTrue\n&gt;&gt;&gt; 'semilla' in 'banana'\nFalse\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#24-comparacion-de-cadenas","title":"2.4. Comparaci\u00f3n de cadenas <code>==</code>, <code>&gt;</code>, <code>&lt;</code>...","text":"<p>Los operadores de comparaci\u00f3n funcionan en cadenas. Para ver si dos cadenas son iguales:</p> <pre><code>if palabra == 'banana':\n    print('Muy bien, bananas.')\n</code></pre> <p>Otras operaciones de comparaci\u00f3n son \u00fatiles para poner palabras en orden alfab\u00e9tico:</p> <pre><code>if palabra &lt; 'banana':\n    print('Tu palabra, ' + palabra + ', est\u00e1 antes de banana.')\nelif palabra &gt; 'banana':\n    print('Tu palabra, ' + palabra + ', est\u00e1 despu\u00e9s de banana.')\nelse:\n    print('Muy bien, bananas.')\n</code></pre> <p>Python no maneja letras may\u00fasculas y min\u00fasculas de la misma forma que la gente lo hace. Todas las letras may\u00fasculas van antes que todas las letras min\u00fasculas, por ejemplo:</p> <pre><code>Tu palabra, Pi\u00f1a, est\u00e1 antes que banana.\n</code></pre> <p>Una forma com\u00fan de manejar este problema es convertir cadenas a un formato est\u00e1ndar, como todas a min\u00fasculas, antes de llevar a cabo la comparaci\u00f3n.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#25-el-operador-de-formato","title":"2.5. El operador de formato <code>%</code>","text":"<p>El operador de formato <code>%</code> nos permite construir cadenas, reemplazando partes de las cadenas con datos almacenados en variables. Cuando lo aplicamos a enteros, <code>%</code> es el operador m\u00f3dulo. Pero cuando es aplicado a una cadena, <code>%</code> es el operador de formato.</p> <p>El primer operando es la cadena a formatear, la cual contiene una o m\u00e1s secuencias de formato que especifican c\u00f3mo el segundo operando es formateado. El resultado es una cadena.</p> <p>Por ejemplo, la secuencia de formato <code>%d</code> significa que el segundo operando deber\u00eda ser formateado como un entero (\u201cd\u201d significa \u201cdecimal\u201d):</p> <pre><code>&gt;&gt;&gt; camellos = 42\n&gt;&gt;&gt; '%d' % camellos\n'42'\n</code></pre> <p>El resultado es la cadena \u201842\u2019, el cual no debe ser confundido con el valor entero 42.</p> <p>Una secuencia de formato puede aparecer en cualquier lugar en la cadena, as\u00ed que puedes meter un valor en una frase:</p> <pre><code>&gt;&gt;&gt; camellos = 42\n&gt;&gt;&gt; 'Yo he visto %d camellos.' % camellos\n'Yo he visto 42 camellos.'\n</code></pre> <p>Si hay m\u00e1s de una secuencia de formato en la cadena, el segundo argumento tiene que ser una tupla. Cada secuencia de formato es relacionada con un elemento de la tupla, en orden.</p> <p>El siguiente ejemplo usa <code>%d</code> para formatear un entero, <code>%g</code> para formatear un n\u00famero de punto flotante (no preguntes por qu\u00e9), y <code>%s</code> para formatear una cadena:</p> <pre><code>&gt;&gt;&gt; 'En %d a\u00f1os yo he visto %g %s.' % (3, 0.1, 'camellos')\n'En 3 a\u00f1os yo he visto 0.1 camellos.'\n</code></pre> <p>El n\u00famero de elementos en la tupla debe coincidir con el n\u00famero de secuencias de formato en la cadena. El tipo de los elementos tambi\u00e9n debe coincidir con la secuencia de formato:</p> <pre><code>&gt;&gt;&gt; '%d %d %d' % (1, 2)\nTypeError: not enough arguments for format string\n&gt;&gt;&gt; '%d' % 'dolares'\nTypeError: %d format: a number is required, not str\n</code></pre> <p>En el primer ejemplo, no hay suficientes elementos; en el segundo, el elemento es de un tipo incorrecto.</p> <p>El operador de formato es poderoso, pero puede ser dif\u00edcil de usar. Puedes leer m\u00e1s al respecto en</p> <p>https://docs.python.org/library/stdtypes.html#printf-style-string-formatting.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#3-iteradores-recorriendo-una-cadena-mediante-un-bucle","title":"3. Iteradores: Recorriendo una cadena mediante un bucle","text":"<p>Muchos de los c\u00e1lculos requieren procesar una cadena car\u00e1cter por car\u00e1cter. Frecuentemente empiezan desde el inicio, seleccionando cada car\u00e1cter presente, haciendo algo con \u00e9l, y continuando hasta el final. Este patr\u00f3n de procesamiento es llamado un iterador. Una manera de escribir un iterador es con un bucle <code>while</code>:</p> <pre><code>indice = 0\nwhile indice &lt; len(fruta):\n    letra = fruta[indice]\n    print(letra)\n    indice = indice + 1\n</code></pre> <p>Este bucle recorre la cadena e imprime cada letra en una l\u00ednea cada una. La condici\u00f3n del bucle es <code>indice &lt; len(fruta)</code>, as\u00ed que cuando <code>indice</code> es igual al tama\u00f1o de la cadena, la condici\u00f3n es falsa, y el c\u00f3digo del bucle no se ejecuta. El \u00faltimo car\u00e1cter accedido es el que tiene el \u00edndice <code>len(fruta)-1</code>, el cual es el \u00faltimo car\u00e1cter en la cadena.</p> <p>Otra forma de escribir un iterador es con un bucle <code>for</code>:</p> <pre><code>for caracter in fruta:\n    print(caracter)\n</code></pre> <p>Cada vez que iteramos el bucle, el siguiente car\u00e1cter en la cadena es asignado a la variable <code>caracter</code>. El ciclo contin\u00faa hasta que no quedan caracteres.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#31-iterando-y-contando","title":"3.1. Iterando y contando","text":"<p>El siguiente programa cuenta el n\u00famero de veces que la letra \u201ca\u201d aparece en una cadena:</p> <pre><code>palabra = 'banana'\ncontador = 0\nfor letra in palabra:\n    if letra == 'a':\n        contador = contador + 1\nprint(contador)\n</code></pre> <p>Este programa demuestra otro patr\u00f3n de computaci\u00f3n llamado contador. La variable <code>contador</code> es inicializada a 0 y despu\u00e9s se incrementa cada vez que una \u201ca\u201d es encontrada. Cuando el bucle termina, <code>contador</code> contiene el resultado: el n\u00famero total de a\u2019s.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#5-metodos-de-cadenas","title":"5. M\u00e9todos de cadenas","text":"<p>Los cadenas son un ejemplo de objetos en Python. Un objeto contiene tanto datos (el valor de la cadena misma) como m\u00e9todos, los cuales son efectivamente funciones que est\u00e1n implementadas dentro del objeto y que est\u00e1n disponibles para cualquier instancia del objeto.</p> <p>Python tiene una funci\u00f3n llamada <code>dir</code> la cual lista los m\u00e9todos disponibles para un objeto. La funci\u00f3n <code>type</code> muestra el tipo de un objeto y la funci\u00f3n <code>dir</code> muestra los m\u00e9todos disponibles.</p> <pre><code>&gt;&gt;&gt; cosa = 'Hola mundo'\n&gt;&gt;&gt; type(cosa)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; dir(cosa)\n['capitalize', 'casefold', 'center', 'count', 'encode',\n'endswith', 'expandtabs', 'find', 'format', 'format_map',\n'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit',\n'isidentifier', 'islower', 'isnumeric', 'isprintable',\n'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',\n'lstrip', 'maketrans', 'partition', 'replace', 'rfind',\n'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip',\n'split', 'splitlines', 'startswith', 'strip', 'swapcase',\n'title', 'translate', 'upper', 'zfill']\n&gt;&gt;&gt; help(str.capitalize)\nHelp on method_descriptor:\n\ncapitalize(...)\n    S.capitalize() -&gt; str\n\n    Return a capitalized version of S, i.e. make the first character have upper case and the rest lower case.\n&gt;&gt;&gt;\n</code></pre> <p>Llamar a un m\u00e9todo es similar a llamar una funci\u00f3n (esta toma argumentos y devuelve un valor) pero la sintaxis es diferente. Llamamos a un m\u00e9todo uniendo el nombre del m\u00e9todo al de la variable, usando un punto como delimitador. Aunque la funci\u00f3n <code>dir</code> lista los m\u00e9todos y puedes usar la funci\u00f3n <code>help</code> para obtener una breve documentaci\u00f3n de un m\u00e9todo, una mejor fuente de documentaci\u00f3n para los m\u00e9todos de cadenas se puede encontrar en M\u00e9todos en ingl\u00e9s y M\u00e9todos en castellano</p> <p>Por ejemplo, el m\u00e9todo <code>upper</code> toma una cadena y devuelve una nueva cadena con todas las letras en may\u00fascula:</p> <p>En vez de la sintaxis de funci\u00f3n <code>upper(palabra)</code>, \u00e9ste utiliza la sintaxis de m\u00e9todo <code>palabra.upper()</code>.</p> <pre><code>&gt;&gt;&gt; palabra = 'banana'\n&gt;&gt;&gt; nueva_palabra = palabra.upper()\n&gt;&gt;&gt; print(nueva_palabra)\nBANANA\n</code></pre> <p>Esta forma de notaci\u00f3n con punto especifica el nombre del m\u00e9todo, <code>upper</code>, y el nombre de la cadena al que se le aplicar\u00e1 el m\u00e9todo, <code>palabra</code>. Los par\u00e9ntesis vac\u00edos indican que el m\u00e9todo no toma argumentos.</p> <p>Una llamada a un m\u00e9todo es conocida como una invocaci\u00f3n; en este caso, dir\u00edamos que estamos invocando <code>upper</code> en <code>palabra</code>.</p> <p>Por ejemplo, existe un m\u00e9todo de cadena llamado <code>find</code> que busca la posici\u00f3n de una cadena dentro de otra:</p> <pre><code>&gt;&gt;&gt; palabra = 'banana'\n&gt;&gt;&gt; indice = palabra.find('a')\n&gt;&gt;&gt; print(indice)\n1\n</code></pre> <p>En este ejemplo, invocamos <code>find</code> en <code>palabra</code> y pasamos la letra que estamos buscando como un par\u00e1metro.</p> <p>El m\u00e9todo <code>find</code> puede encontrar subcadenas as\u00ed como caracteres:</p> <pre><code>&gt;&gt;&gt; palabra.find('na')\n2\n</code></pre> <p>Tambi\u00e9n puede tomar como un segundo argumento el \u00edndice desde donde debe empezar:</p> <pre><code>&gt;&gt;&gt; palabra.find('na', 3)\n4\n</code></pre> <p>Una tarea com\u00fan es eliminar los espacios en blanco (espacios, tabs, o nuevas l\u00edneas) en el inicio y el final de una cadena usando el m\u00e9todo <code>strip</code>:</p> <pre><code>&gt;&gt;&gt; linea = '  Aqu\u00ed vamos  '\n&gt;&gt;&gt; linea.strip()\n'Aqu\u00ed vamos'\n</code></pre> <p>Algunos m\u00e9todos como <code>startswith</code> devuelven valores booleanos.</p> <pre><code>&gt;&gt;&gt; linea = 'Que tengas un buen d\u00eda'\n&gt;&gt;&gt; linea.startswith('Que')\nTrue\n&gt;&gt;&gt; linea.startswith('q')\nFalse\n</code></pre> <p>Puedes notar que <code>startswith</code> requiere que el formato (may\u00fasculas y min\u00fasculas) coincida, de modo que a veces tendremos que tomar la l\u00ednea y cambiarla completamente a min\u00fasculas antes de hacer la verificaci\u00f3n, utilizando el m\u00e9todo <code>lower</code>.</p> <pre><code>&gt;&gt;&gt; linea = 'Que tengas un buen d\u00eda'\n&gt;&gt;&gt; linea.startswith('q')\nFalse\n&gt;&gt;&gt; linea.lower()\n'que tengas un buen d\u00eda'\n&gt;&gt;&gt; linea.lower().startswith('q')\nTrue\n</code></pre> <p>En el \u00faltimo ejemplo, el m\u00e9todo <code>lower</code> es llamado y despu\u00e9s usamos <code>startswith</code> para ver si la cadena resultante en min\u00fasculas comienza con la letra \u201cq\u201d. Siempre y cuando seamos cuidadosos con el orden, podemos hacer m\u00faltiples llamadas a m\u00e9todos en una sola expresi\u00f3n.</p> <p>Es recomendable tener la ayuda cerca y consultar los m\u00e9todos disponibles y su funcionamiento, siempre actualizado a las \u00faltimas versiones. No obstante aqui hay una lista no exahustiva de m\u00e9todos:</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#51-stringcapitalize","title":"5.1. string.capitalize()","text":"<p>El m\u00e9todo capitalize() devuelve una copia de la cadena con su primera letra en may\u00fascula. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.capitalize()\n'Mi diario python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#52-stringendswithsufijo","title":"5.2. string.endswith(sufijo)","text":"<p>El m\u00e9todo endswith() devuelve True si la cadena termina con el sufijo especificado. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.endswith(\"python\")\nTrue\n&gt;&gt;&gt; texto.endswith(\"thon\")\nTrue\n&gt;&gt;&gt; texto.endswith(\"py\")\nFalse\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#53-stringexpandtabstamano_de_tab8","title":"5.3. string.expandtabs(tama\u00f1o_de_tab=8)","text":"<p>El m\u00e9todo expandtabs devuelva una copia de la cadena en la que todos los caracteres de las pesta\u00f1as se reemplazan por uno o m\u00e1s espacios, seg\u00fan la columna actual y el tama\u00f1o de la pesta\u00f1a. Para expandir la cadena, la columna actual se establece en cero y la cadena se examina car\u00e1cter por car\u00e1cter. Si el car\u00e1cter es una pesta\u00f1a ( <code>t</code>), se insertan uno o m\u00e1s caracteres de espacio en el resultado hasta que la columna actual sea igual a la siguiente posici\u00f3n de la pesta\u00f1a. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mitdiariotpython\"\n&gt;&gt;&gt; texto.expandtabs(4)\n'mi  diario  python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringfindsub","title":"string.find(sub)","text":"<p>Devuelve el \u00edndice m\u00e1s bajo de la cadena en la subcadena sub se encuentra dentro de la rebanada <code>s[start:end]</code>. Devuelve -1 si no se encuentra el sub. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.find(\"mi\")\n0\n&gt;&gt;&gt; texto.find(\"m\")\n0\n&gt;&gt;&gt; texto.find(\"i\")\n1\n&gt;&gt;&gt; texto.find(\"python\")\n10\n&gt;&gt;&gt; texto.find(\"py\")\n10\n&gt;&gt;&gt; texto.find(\"p y\")\n-1\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#54-stringformat","title":"5.4. string.format()","text":"<p>Nos permite realizar una operaci\u00f3n de formato de cadena. La cadena en la que se llama a este m\u00e9todo puede contener texto literal o campos de reemplazo delimitados por llaves <code>{}</code>. Cada campo de reemplazo contiene el \u00edndice num\u00e9rico de un argumento posicional o el nombre de un argumento de palabra clave. Devuelve una copia de la cadena donde cada campo de reemplazo se reemplaza con el valor de la cadena del argumento correspondiente. Ejemplo:</p> <pre><code>&gt;&gt;&gt; \"La suma de 1 + 2 es {0}\".format(1+2)\n'La suma de 1 + 2 es 3'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#56-stringindexsub","title":"5.6. string.index(sub)","text":"<p>El m\u00e9todo index es muy similar al m\u00e9todo find. Con la diferencia de que cuando no se encuentra la subcadena, index lanza un ValueError.</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.index(\"mi\")\n0\n&gt;&gt;&gt; texto.index(\"PYTHON\")\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: substring not found\n&gt;&gt;&gt;\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#57-stringisalpha","title":"5.7. string.isalpha()","text":"<p>Devuelve verdadero si todos los caracteres de la cadena son alfanum\u00e9ricos y hay al menos un car\u00e1cter, de lo contrario es falso. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.isalpha()\nFalse\n&gt;&gt;&gt; \"midiariopython\".isalpha()\nTrue\n</code></pre> <p>Si te preguntas \u00bfpor que \u201cmi diario python\u201d a lanzado False?. Es porque los espacios no son un car\u00e1cter alfanum\u00e9rico.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#58-stringisdigit","title":"5.8. string.isdigit()","text":"<p>El m\u00e9todo isdigit() devuelve True si todos los caracteres de la cadena son d\u00edgitos. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; digitos = \"12345\"\n&gt;&gt;&gt; texto.isdigit()\nFalse\n&gt;&gt;&gt; digitos.isdigit()\nTrue\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#59-stringisspace","title":"5.9. string.isspace()","text":"<p>El m\u00e9todo isspace() devuelve True si solo hay caracteres de espacio en blanco. Ejemplo:</p> <pre><code>&gt;&gt;&gt; \" \".isspace()\nTrue\n&gt;&gt;&gt; \"  a\".isspace()\nFalse\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringlower","title":"string.lower()","text":"<p>El m\u00e9todo lower devuelve una copia de la cadena con todos sus caracteres en min\u00fasculas. Ejemplo:</p> <pre><code>&gt;&gt;&gt; \"Hola Mundo\".lower()\n'hola mundo'\n&gt;&gt;&gt; \"PYTHON\".lower()\n'python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#510-stringupper","title":"5.10. string.upper()","text":"<p>El m\u00e9todo upper() devuelve la una copia de la cadena con todos su caracteres en may\u00fasculas. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.upper()\n'MI DIARIO PYTHON'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#511-stringlstripchars","title":"5.11. string.lstrip(chars)","text":"<p>El m\u00e9todo lstrip devuelve una copia de la cadena con los caracteres iniciales eliminados. El argumento chars es una cadena que especifica el conjunto de caracteres que se eliminar\u00e1n. Ejemplo:</p> <pre><code>&gt;&gt;&gt; web = \"www.pythondiario.com\"\n&gt;&gt;&gt; web.lstrip(\"w.\")\n'pythondiario.com'\n&gt;&gt;&gt;\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#512-stringreplacestring_viejo-string_nuevo","title":"5.12. string.replace(string_viejo, string_nuevo)","text":"<p>El m\u00e9todo replace() devuelve una copia de la cadena con la subcadena vieja remplazada por una nueva. Veamos un ejemplo para entenderlo mejor:</p> <pre><code>&gt;&gt;&gt; cadena = \"Hola Mundo\"\n&gt;&gt;&gt; cadena.replace(\"Mundo\", \"Internet\")\n'Hola Internet'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#513-stringpartitionchar","title":"5.13. string.partition(char)","text":"<p>El m\u00e9todo partition() divide la cadena en la primera aparici\u00f3n de char y devuelve una tupla que contiene la parte anterior a char, el mismo char, y la parte posterior de char. Suena un poco confuso, veamos un ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Hola Mundo\"\n&gt;&gt;&gt; cadena.partition(\"la\")\n('Ho', 'la', ' Internet')\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#514-stringtitle","title":"5.14. string.title()","text":"<p>El m\u00e9todo title() devuelve una copia de la cadena donde las palabras comienzan con una letra may\u00fascula. Veamos un ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"mi diario python\"\n&gt;&gt;&gt; cadena.title()\n'Mi Diario Python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#515-stringswapcase","title":"5.15. string.swapcase()","text":"<p>El m\u00e9todo swapcase() devuelve una copia de la cadena con los caracteres en may\u00fasculas convertidos en min\u00fasculas y viceversa.</p> <p>Ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Mi Diario Python\"\n&gt;&gt;&gt; cadena.swapcase()\n'mI dIARIO pYTHON'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#516-stringstartswithprefijo","title":"5.16. string.startswith(prefijo)","text":"<p>El m\u00e9todo startswith() devuelve True si la cadena comienza con el prefijo, de lo contrario devuelve False. Ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Mi Diario Python\"\n&gt;&gt;&gt; cadena.startswith(\"Mi\")\nTrue'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#517-stringsplitsep","title":"5.17. string.split(sep)","text":"<p>El m\u00e9todo split() devuelve una lista de las palabras en la cadena, utilizando a sep como la cadena delimitadora. Ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Luis,Jose,Maria,Sofia,Miguel\"\n&gt;&gt;&gt; cadena.split(\",\")\n['Luis', 'Jose', 'Maria', 'Sofia', 'Miguel']\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#518-stringzfillancho","title":"5.18. string.zfill(ancho)","text":"<p>El m\u00e9todo zfill() devuelve una copia de la cadena que se rellena con 0 d\u00edgitos ASCII para hacer una cadena de ancho de longitud . Ejemplo:</p> <pre><code>&gt;&gt;&gt; \"356\".zfill(6)\n'000356'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#6-analizando-cadenas","title":"6. Analizando cadenas","text":"<p>Frecuentemente, queremos examinar una cadena para encontrar una subcadena. Por ejemplo, si se nos presentaran una seria de l\u00edneas con el siguiente formato:</p> <p><code>From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008</code></p> <p>y quisi\u00e9ramos obtener \u00fanicamente la segunda parte de la direcci\u00f3n de correo (esto es, <code>uct.ac.za</code>) de cada l\u00ednea, podemos hacer esto utilizando el m\u00e9todo <code>find</code> y una parte de la cadena.</p> <p>Primero tenemos que encontrar la posici\u00f3n de la arroba en la cadena. Despu\u00e9s, tenemos que encontrar la posici\u00f3n del primer espacio despu\u00e9s de la arroba. Y despu\u00e9s partiremos la cadena para extraer la porci\u00f3n de la cadena que estamos buscando.</p> <pre><code>&gt;&gt;&gt; dato = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'\n&gt;&gt;&gt; arrobapos = dato.find('@')\n&gt;&gt;&gt; print(arrobapos)\n21\n&gt;&gt;&gt; espos = dato.find(' ',arrobapos)\n&gt;&gt;&gt; print(espos)\n31\n&gt;&gt;&gt; direccion = dato[arrobapos+1:espos]\n&gt;&gt;&gt; print(direccion)\nuct.ac.za\n&gt;&gt;&gt;\n</code></pre> <p>Utilizamos una versi\u00f3n del m\u00e9todo <code>find</code> que nos permite especificar la posici\u00f3n en la cadena desde donde queremos que <code>find</code> comience a buscar. Cuando recortamos una parte de una cadena, extraemos los caracteres desde \u201cuno despu\u00e9s de la arroba hasta,  pero no incluyendo , el car\u00e1cter de espacio\u201d.</p> <p>La documentaci\u00f3n del m\u00e9todo <code>find</code> est\u00e1 disponible en</p> <p>M\u00e9todos en castellano.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#7-depuracion","title":"7. Depuraci\u00f3n","text":"<p>Una habilidad que debes desarrollar cuando programas es siempre preguntarte a ti mismo, \u201c\u00bfQu\u00e9 podr\u00eda fallar aqu\u00ed?\u201d o alternativamente, \u201c\u00bfQu\u00e9 cosa il\u00f3gica podr\u00eda hacer un usuario para hacer fallar nuestro (aparentemente) perfecto programa?\u201d</p> <p>Por ejemplo, observa el programa que utilizamos para demostrar el bucle <code>while</code> en el apartado de iteraciones:</p> <pre><code>linea = input('&gt; ')\nwhile linea != 'fin':\n    if linea[0] != '#' :\n        print(linea)\n    linea = input('&gt; ')\nprint('\u00a1Terminado!')\n\n# C\u00f3digo: https://es.py4e.com/code3/copytildone2.py\n</code></pre> <p>Mira lo que pasa cuando el usuario introduce una l\u00ednea vac\u00eda como entrada:</p> <pre><code>&gt; hola a todos\nhola a todos\n&gt; # no imprimas esto\n&gt; \u00a1imprime esto!\n\u00a1imprime esto!\n&gt;\nTraceback (most recent call last):\n  File \"copytildone.py\", line 3, in &lt;module&gt;\n    if linea[0] != '#' :\nIndexError: string index out of range\n</code></pre> <p>El c\u00f3digo funciona bien hasta que se presenta una l\u00ednea vac\u00eda. En ese momento no hay un car\u00e1cter cero, por lo que obtenemos una traza de error (traceback). Existen dos soluciones a esto para convertir la l\u00ednea tres en \u201csegura\u201d, incluso si la l\u00ednea est\u00e1 vac\u00eda.</p> <p>Una posibilidad es simplemente usar el m\u00e9todo <code>startswith</code> que devuelve <code>False</code> si la cadena est\u00e1 vac\u00eda.</p> <pre><code>if linea.startswith('#'):\n</code></pre> <p>Otra forma segura es escribir una sentencia <code>if</code> utilizando el patr\u00f3n guardi\u00e1n y asegurarse que la segunda expresi\u00f3n l\u00f3gica es evaluada s\u00f3lo cuando hay al menos un car\u00e1cter en la cadena:</p> <pre><code>if len(linea) &gt; 0 and linea[0] != '#':\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#fuente","title":"Fuente","text":"<ul> <li>P\u00e1gina de Juan Jose Lozano Gomez sobre Python</li> <li>Python para todos</li> <li>Ejemplos con m\u00e9todos de String</li> <li>Estructuras de datos</li> <li>Aprende con Alf</li> </ul>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/","title":"UD 3 - 3.1 Listas","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#31-listas","title":"3.1 Listas","text":"<p>Las listas son una de las estructuras de datos m\u00e1s vers\u00e1tiles en Python. A continuaci\u00f3n, se describe a que nos referimos con estructuras de datos y se profundiza en las listas.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#1-estructuras-de-datos","title":"1. Estructuras de datos","text":"<p>Las estructuras de datos en programaci\u00f3n son un modo de representar informaci\u00f3n en una computadora, aunque adem\u00e1s, cuentan con un comportamiento interno. \u00bfQu\u00e9 significa? Que se rige por determinadas reglas/restricciones que han sido dadas por la forma en que est\u00e1 construida internamente.</p> <p>\u00bfPor qu\u00e9 es importante conocerlas? Cuando inicias en el mundo de la programaci\u00f3n y te metes de lleno en el mundo de Python, las estructuras de datos son fundamentales. Conocer sobre listas, \u00e1rboles y grafos te permitir\u00e1 organizar mejor la informaci\u00f3n y crear c\u00f3digo m\u00e1s eficiente. Adem\u00e1s, es clave para mejorar tus habilidades t\u00e9cnicas y enfrentarte con \u00e9xito a cada reto en tus futuras entrevistas laborales.</p> <p>En Python estas estructuras vienen definidas en la biblioteca est\u00e1ndar de Python</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#11-para-que-sirven-las-estructuras-de-datos","title":"1.1. \u00bfPara qu\u00e9 sirven las estructuras de datos?","text":"<p>En el \u00e1mbito de la inform\u00e1tica, las estructuras de datos son aquellas que nos permiten, como desarrolladores, organizar la informaci\u00f3n de manera eficiente, y en definitiva dise\u00f1ar la soluci\u00f3n correcta para un determinado problema.</p> <p>Ya sean las m\u00e1s utilizadas com\u00fanmente - como las  variables,  arrays, conjuntos ** o  **clases - o las dise\u00f1adas para un prop\u00f3sito espec\u00edfico - \u00e1rboles,  grafos,  tablas, etc., una **estructura de datos ** nos permite trabajar en un alto nivel de abstracci\u00f3n almacenando informaci\u00f3n para luego acceder a ella, modificarla y manipularla.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#12-cuales-son-los-tipos-de-estructuras-de-datos","title":"1.2. \u00bfCu\u00e1les son los tipos de estructuras de datos?","text":"<p>Primero, debemos diferenciar entre estructura de dato est\u00e1tica y estructura de dato din\u00e1mica</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#121-estructura-de-datos-estaticas","title":"1.2.1. Estructura de datos est\u00e1ticas","text":"<p>Las estructuras de datos est\u00e1ticas son aquellas en las que el tama\u00f1o ocupado en memoria se define antes de que el programa se ejecute y no puede modificarse dicho tama\u00f1o durante la ejecuci\u00f3n del programa, mientras que una estructura de datos din\u00e1mica es aquella en la que el tama\u00f1o ocupado en memoria puede modificarse durante la ejecuci\u00f3n del programa.</p> <p>Cada tipo de estructura depender\u00e1 del tipo de aplicaci\u00f3n que se requiera. Una estructuras de datos est\u00e1ticas t\u00edpica son los arrays:</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#que-es-un-array-en-programacion","title":"\u00bfQu\u00e9 es un array en programaci\u00f3n?","text":"<p>Un array es un tipo de dato estructurado que permite almacenar un conjunto de datos homog\u00e9neo y ordenado, es decir, todos ellos del mismo tipo y relacionados. Su condici\u00f3n de homog\u00e9neo, indica que sus elementos est\u00e1n compuestos por el mismo tipo de dato, y su condici\u00f3n de ordenado hace que se pueda identificar la posici\u00f3n que ocupan desde el primer al \u00faltimo elemento que lo compone.</p> <p>Los arrays de t\u00e9rminos generales hacen referencia a menudo a los vectores y las matrices. Un vector es un array de 1 fila x n columnas (vector de fila) o 1 columna x n filas (vector de columna), mientras que una matriz es un array de m filas x n columnas.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#122-estructura-de-datos-dinamicas","title":"1.2.2. Estructura de datos din\u00e1micas","text":"<p>Por otro lado, en programaci\u00f3n existen estructuras de datos din\u00e1micas, es decir, una colecci\u00f3n de elementos -nodos- que se utilizan para almacenar y organizar datos. A diferencia de un array que contiene espacio para almacenar un n\u00famero fijo de elementos, una estructura din\u00e1mica de datos se ampl\u00eda y contrae durante la ejecuci\u00f3n del programa. Veamos algunos ejemplos:</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#estructura-de-datos-lineales","title":"Estructura de datos lineales","text":"<p>Las estructuras de datos lineales son aquellas en las que los elementos ocupan lugares sucesivos en la estructura y cada uno de ellos tiene un \u00fanico sucesor y un \u00fanico predecesor, es decir, sus elementos est\u00e1n ubicados uno al lado del otro relacionados en forma lineal.</p> <p>Hay tres tipos de estructuras de datos lineales listas enlazadas, pilas y colas.:</p> <ul> <li>Listas enlazadas: En las estructuras de datos, las listas enlazadas se construyen con elementos que est\u00e1n ubicados en una secuencia. Aqu\u00ed, cada elemento se conecta con el siguiente a trav\u00e9s de un enlace que contiene la posici\u00f3n del siguiente elemento. De este modo, teniendo la referencia del principio de la lista podemos acceder a todos los elementos de la misma. Tambi\u00e9n existen las listas doblemente enlazadas, en las que cada nodo tiene dos enlaces, uno al nodo anterior y otro al siguiente.</li> </ul> <p> </p> Estructura de datos: Lista doblemente enlazada <ul> <li>Pila: es un tipo especial de lista lineal dentro de las estructuras de datos din\u00e1micas que permite almacenar y recuperar datos, siendo el modo de acceso a sus elementos de tipo LIFO (del ingl\u00e9s  Last In, First Out, es decir, \u00faltimo en entrar, primero en salir). \u00bfC\u00f3mo funciona? A trav\u00e9s de dos operaciones b\u00e1sicas: apilar (push), que coloca un objeto en la pila, y su operaci\u00f3n inversa, desapilar (pop), que retira el \u00faltimo elemento apilado.   </li> </ul> <p> </p> Estructura de datos: Pila","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#estructura-de-datos-no-lineales","title":"Estructura de datos no lineales","text":"<p>Las estructuras de datos no lineales, tambi\u00e9n llamadas multienlazadas, son aquellas en las que cada elemento puede estar enlazado a cualquier otro componente. Es decir, cada elemento puede tener varios sucesores o varios predecesores.</p> <p>Entre ellos, destacamos dos tipos: \u00c1rboles, Grafos</p> <ul> <li> <p>\u00c1rboles: En estructura de datos, los \u00e1rboles consisten en una estructura no lineal que se utiliza para representar datos con una relaci\u00f3n jer\u00e1rquica en la que cada elemento tiene un \u00fanico antecesor y puede tener varios sucesores.      Los mismos se encuentran clasificados en:      </p> <ul> <li>\u00e1rbol general, un \u00e1rbol donde cada elemento puede tener un n\u00famero ilimitado de sub \u00e1rboles</li> <li>\u00e1rboles binarios, que son una estructura de datos homog\u00e9nea, din\u00e1mica y no lineal en donde a cada elemento le pueden seguir como m\u00e1ximo dos nodos.</li> </ul> </li> </ul> <p> </p> Estructura de datos: Arbol <ul> <li>Grafos: Otro tipo no lineal de estructura de datos en programaci\u00f3n son los grafos. Se trata de una estructura matem\u00e1tica formada por un conjunto de puntos \u2014 una estructura de datos \u2014 y un conjunto de l\u00edneas, cada una de las cuales une un punto a otro. Los puntos se llaman nodos o v\u00e9rtices del grafo y las l\u00edneas se llaman aristas o arcos.</li> </ul> <p> </p> Estructura de datos: Grafo <p>Las estructuras de datos son un aspecto clave a conocer en el mundo de la programaci\u00f3n. Nos permiten mejorar nuestro c\u00f3digo y habilidades t\u00e9cnicas, y en definitiva, resolver de manera eficiente problemas complejos.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#2-listas","title":"2. Listas","text":"<p>Las listas en Python son un tipo contenedor compuesto, que se usan para almacenar conjuntos de elementos relacionados del mismo tipo o de tipos distintos.</p> <p>Junto a las clases <code>tuple</code>, <code>range</code> y <code>str</code>, son uno de los tipos de secuencia en Python, con la particularidad de que son mutables. Esto \u00faltimo quiere decir que su contenido se puede modificar despu\u00e9s de haber sido creada.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#21-crear-una-lista-en-python","title":"2.1. Crear una lista en Python","text":"<p>Para crear una lista en Python, simplemente hay que encerrar una secuencia de elementos separados por comas entre corchetes <code>[]</code>.</p> <p>Por ejemplo, para crear una lista con los n\u00fameros del 1 al 10 se har\u00eda del siguiente modo:</p> <pre><code>&gt;&gt;&gt; numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p>Como te dec\u00eda, en python, las listas pueden almacenar elementos de distinto tipo. La siguiente lista tambi\u00e9n es v\u00e1lida:</p> <pre><code>&gt;&gt;&gt; elementos = [3, 'a', 8, 7.2, 'hola']\n</code></pre> <p>Incluso pueden contener otros elementos compuestos, como objetos u otras listas:</p> <pre><code>&gt;&gt;&gt; lista = [1, ['a', 'e', 'i', 'o', 'u'], 8.9, 'hola']\n</code></pre> <p>Las listas tambi\u00e9n se pueden crear usando el constructor de la clase, <code>list(iterable)</code>. En este caso, el constructor crea una lista cuyos elementos son los mismos y est\u00e1n en el mismo orden que los \u00edtems del iterable. El objeto iterable puede ser o una secuencia, un contenedor que soporte la iteraci\u00f3n o un objeto iterador.</p> <p>Por ejemplo, el tipo str tambi\u00e9n es un tipo secuencia. Si pasamos un string al constructor <code>list()</code> crear\u00e1 una lista cuyos elementos son cada uno de los caracteres de la cadena:</p> <pre><code>&gt;&gt;&gt; vocales = list('aeiou')\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n</code></pre> <p>Para terminar, a continuaci\u00f3n podemos ver dos alternativas para crear una lista vac\u00eda:</p> <pre><code>&gt;&gt;&gt; lista_1 = []  # Opci\u00f3n 1\n&gt;&gt;&gt; lista_2 = list()  # Opci\u00f3n 2\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#22-trabajar-con-los-elementos-de-una-lista","title":"2.2. Trabajar con los elementos de una lista","text":"<p>En Python, las listas son secuencias mutables, es decir, sus elementos pueden ser modificados (se pueden a\u00f1adir nuevos \u00edtems, actualizar o eliminar).</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#221-como-acceder-a-los-elementos-de-una-lista-en-python","title":"2.2.1 C\u00f3mo acceder a los elementos de una lista en Python","text":"<p>Para acceder a un elemento de una lista se utilizan los \u00edndices. Un \u00edndice es un n\u00famero entero que indica la posici\u00f3n de un elemento en una lista. El primer elemento de una lista siempre comienza en el \u00edndice 0.</p> <p>Por ejemplo, en una lista con 4 elementos, los \u00edndices de cada uno de los \u00edtems ser\u00edan 0, 1, 2 y 3.</p> <pre><code>&gt;&gt;&gt; lista = ['a', 'b', 'd', 'i', 'j']\n&gt;&gt;&gt; lista[0]  # Primer elemento de la lista. \u00cdndice 0\n&gt;&gt;&gt; 'a'\n&gt;&gt;&gt; lista[3]  # Cuarto elemento de la lista. \u00cdndice 3\n&gt;&gt;&gt; 'i'\n</code></pre> <p>Si se intenta acceder a un \u00edndice que est\u00e1 fuera del rango de la lista, el int\u00e9rprete lanzar\u00e1 la excepci\u00f3n <code>IndexError</code>. De igual modo, si se utiliza un \u00edndice que no es un n\u00famero entero, se lanzar\u00e1 la excepci\u00f3n <code>TypeError</code>:</p> <pre><code>&gt;&gt;&gt; lista = [1, 2, 3]  # Los \u00edndices v\u00e1lidos son 0, 1 y 2\n&gt;&gt;&gt; lista[8]\n&gt;&gt;&gt; Traceback (most recent call last):\n&gt;&gt;&gt; File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n&gt;&gt;&gt; IndexError: list index out of range\n&gt;&gt;&gt; lista[1.0]\n&gt;&gt;&gt; Traceback (most recent call last):\n&gt;&gt;&gt; File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n&gt;&gt;&gt; TypeError: list indices must be integers or slices, not float\n</code></pre> <p>Como hemos visto, las listas pueden contener otros elementos de tipo secuencia de forma anidada. Por ejemplo, una lista que uno de sus \u00edtems es otra lista. Del mismo modo, se puede acceder a los elementos de estos tipos usando \u00edndices compuestos o anidados:</p> <pre><code>&gt;&gt;&gt; lista = ['a', ['d', 'b'], 'z']\n&gt;&gt;&gt; lista[1][1]  # lista[1] hace referencia a la lista anidada\n&gt;&gt;&gt; 'b'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#acceso-a-los-elementos-usando-un-indice-negativo","title":"Acceso a los elementos usando un \u00edndice negativo","text":"<p>En Python est\u00e1 permitido usar \u00edndices negativos para acceder a los elementos de una secuencia. En este caso, el \u00edndice -1 hace referencia al \u00faltimo elemento de la secuencia, el -2 al pen\u00faltimo y as\u00ed, sucesivamente:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[-1]\n&gt;&gt;&gt; 'u'\n&gt;&gt;&gt; vocales[-4]\n&gt;&gt;&gt; 'e'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#acceso-a-un-subconjunto-de-elementos","title":"Acceso a un subconjunto de elementos","text":"<p>Tambi\u00e9n es posible acceder a un subconjunto de elementos de una lista utilizando rangos en los \u00edndices. Esto es usando el operador <code>[:]</code>:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[2:3]  # Elementos desde el \u00edndice 2 hasta el \u00edndice 3-1\n&gt;&gt;&gt; ['i']\n&gt;&gt;&gt; vocales[2:4]  # Elementos desde el 2 hasta el \u00edndice 4-1\n&gt;&gt;&gt; ['i', 'o']\n&gt;&gt;&gt; vocales[:]  # Todos los elementos\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[1:]  # Elementos desde el \u00edndice 1\n&gt;&gt;&gt; ['e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[:3]  # Elementos hasta el \u00edndice 3-1\n&gt;&gt;&gt; ['a', 'e', 'i']\n</code></pre> <p>Tambi\u00e9n es posible acceder a los elementos de una lista indicando un paso con el operador <code>[::]</code>:</p> <pre><code>&gt;&gt;&gt; letras = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n&gt;&gt;&gt; letras[::2]  # Acceso a los elementos de 2 en 2\n&gt;&gt;&gt; ['a', 'c', 'e', 'g', 'i', 'k']\n&gt;&gt;&gt; letras[1:5:2]  # Elementos del \u00edndice 1 al 4 de 2 en 2\n&gt;&gt;&gt; ['b', 'd']\n&gt;&gt;&gt; letras[1:6:3]  # Elementos del \u00edndice 1 al 5 de 3 en 3\n&gt;&gt;&gt; ['b', 'e']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#222-anadir-elementos-a-una-lista-en-python","title":"2.2.2. A\u00f1adir elementos a una lista en Python","text":"<p>Tal y como te he adelantado, las listas son secuencias mutables, es decir, sus elementos pueden ser modificados (se pueden a\u00f1adir nuevos \u00edtems, actualizar o eliminar).</p> <p>Para a\u00f1adir un nuevo elemento a una lista se utiliza el m\u00e9todo <code>append()</code> y para a\u00f1adir varios elementos, el m\u00e9todo <code>extend()</code>:</p> <pre><code>&gt;&gt;&gt; vocales = ['a']\n&gt;&gt;&gt; vocales.append('e')  # A\u00f1ade un elemento\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e']\n&gt;&gt;&gt; vocales.extend(['i', 'o', 'u'])  # A\u00f1ade un grupo de elementos\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n</code></pre> <p>Tambi\u00e9n es posible utilizar el operador de concatenaci\u00f3n <code>+</code> para unir dos listas en una sola. El resultado es una nueva lista con los elementos de ambas:</p> <pre><code>&gt;&gt;&gt; lista_1 = [1, 2, 3]\n&gt;&gt;&gt; lista_2 = [4, 5, 6]\n&gt;&gt;&gt; nueva_lista = lista_1 + lista_2\n&gt;&gt;&gt; nueva_lista\n&gt;&gt;&gt; [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Por otro lado, el operador <code>*</code> repite el contenido de una lista <code>n</code> veces:</p> <pre><code>&gt;&gt;&gt; numeros = [1, 2, 3]\n&gt;&gt;&gt; numeros *= 3\n&gt;&gt;&gt; numeros\n&gt;&gt;&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code></pre> <p>Y para terminar esta secci\u00f3n, indicarte que tambi\u00e9n es posible a\u00f1adir un elemento en una posici\u00f3n concreta de una lista con el m\u00e9todo <code>insert(\u00edndice, elemento)</code>. Los elementos cuyo \u00edndice sea mayor a <code>\u00edndice</code> se desplazan una posici\u00f3n a la derecha:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'u']\n&gt;&gt;&gt; vocales.insert(2, 'i')\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'u']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#223-modificar-elementos-de-una-lista","title":"2.2.3. Modificar elementos de una lista","text":"<p>Es posible modificar un elemento de una lista en Python con el operador de asignaci\u00f3n <code>=</code>. Para ello, lo \u00fanico que necesitas conocer es el \u00edndice del elemento que quieres modificar o el rango de \u00edndices:</p> <pre><code>&gt;&gt;&gt; vocales = ['o', 'o', 'o', 'o', 'u']\n\n# Actualiza el elemento del \u00edndice 0\n&gt;&gt;&gt; vocales[0] = 'a'\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'o', 'o', 'o', 'u']\n\n# Actualiza los elementos entre las posiciones 1 y 2\n&gt;&gt;&gt; vocales[1:3] = ['e', 'i']\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#224-eliminar-un-elemento-de-una-lista-en-python","title":"2.2.4. Eliminar un elemento de una lista en Python","text":"<p>En Python se puede eliminar un elemento de una lista de varias formas.</p> <p>Con la sentencia <code>del</code> se puede eliminar un elemento a partir de su \u00edndice:</p> <pre><code># Elimina el elemento del \u00edndice 1\n&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; del vocales[1]\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'i', 'o', 'u']\n\n# Elimina los elementos con \u00edndices 2 y 3\n&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; del vocales[2:4]\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'u']\n\n##### Elimina todos los elementos\n&gt;&gt;&gt; del vocales[:]\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; []\n</code></pre> <p>Adem\u00e1s de la sentencia <code>del</code>, podemos usar los m\u00e9todos <code>remove()</code> y <code>pop([i])</code>. <code>remove()</code> elimina la primera ocurrencia que se encuentre del elemento en una lista. Por su parte, <code>pop([i])</code> obtiene el elemento cuyo \u00edndice sea igual a <code>i</code> y lo elimina de la lista. Si no se especifica ning\u00fan \u00edndice, recupera y elimina el \u00faltimo elemento.</p> <pre><code>&gt;&gt;&gt; letras = ['a', 'b', 'k', 'a', 'v']\n\n# Elimina la primera ocurrencia del car\u00e1cter a\n&gt;&gt;&gt; letras.remove('a')\n&gt;&gt;&gt; letras\n&gt;&gt;&gt; ['b', 'k', 'a', 'v']\n\n# Obtiene y elimina el \u00faltimo elemento\n&gt;&gt;&gt; letras.pop()\n&gt;&gt;&gt; 'v'\n&gt;&gt;&gt; letras\n&gt;&gt;&gt; ['b', 'k', 'a']\n</code></pre> <p>Finalmente, es posible eliminar todos los elementos de una lista a trav\u00e9s del m\u00e9todo <code>clear()</code>:</p> <pre><code>&gt;&gt;&gt; letras = ['a', 'b', 'c']\n&gt;&gt;&gt; letras.clear()\n&gt;&gt;&gt; letras\n&gt;&gt;&gt; []\n</code></pre> <p>El c\u00f3digo anterior ser\u00eda equivalente a <code>del letras[:]</code>.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#23-patrones-de-uso","title":"2.3. Patrones de uso","text":"<p>Algunos patrones de uso de las listas son los siguientes:</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#231-longitud-len-de-una-lista-en-python","title":"2.3.1. Longitud (len) de una lista en Python","text":"<p>Como cualquier tipo secuencia, para conocer la longitud de una lista en Python se hace uso de la funci\u00f3n <code>len()</code>. Esta funci\u00f3n devuelve el n\u00famero de elementos de una lista:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt;\n&gt;&gt;&gt; len(vocales)\n&gt;&gt;&gt; 5\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#232-recorrer-una-lista-for-list-python","title":"2.3.2. Recorrer una lista - <code>for</code> list Python","text":"<p>Como vimos en las unidades anteriores, se puede usar el bucle for en Python para recorrer los elementos de una secuencia <code>String</code>. En nuestro caso, para recorrer una lista en Python utilizar\u00edamos la siguiente estructura, similar a la que ya hemos visto:</p> <pre><code>&gt;&gt;&gt; colores = ['azul', 'blanco', 'negro']\n&gt;&gt;&gt; for color in colores:\n&gt;&gt;&gt;     print(color)\n&gt;&gt;&gt; azul\n&gt;&gt;&gt; blanco\n&gt;&gt;&gt; negro\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#233-como-saber-si-un-elemento-esta-en-una-lista-en-python","title":"2.3.3. C\u00f3mo saber si un elemento est\u00e1 en una lista en Python","text":"<p>Como vimos anteriormente con las cadenas, para saber si un elemento car\u00e1cter est\u00e1 contenido en una lista de caracteres, se utiliza el operador de pertenencia <code>in</code>. En las listas funciona exactamente igual:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; if 'a' in vocales:\n&gt;&gt;&gt; ...     print('S\u00ed')\n&gt;&gt;&gt; ...\n&gt;&gt;&gt; S\u00ed\n&gt;&gt;&gt; if 'b' not in vocales:\n&gt;&gt;&gt; ...     print('No')\n&gt;&gt;&gt; ...\n&gt;&gt;&gt; No\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#234-ordenar-una-lista-en-python-sort-list-python","title":"2.3.4. Ordenar una lista en Python - <code>sort</code> list Python","text":"<p>Las listas son secuencias ordenadas. Esto quiere decir que sus elementos siempre se devuelven en el mismo orden en que fueron a\u00f1adidos.</p> <p>No obstante, es posible ordenar los elementos de una lista con el m\u00e9todo <code>sort()</code>. El m\u00e9todo <code>sort()</code> ordena los elementos de la lista utilizando \u00fanicamente el operador <code>&lt;</code> y modifica la lista actual (no se obtiene una nueva lista):</p> <pre><code># Lista desordenada de n\u00fameros enteros\n&gt;&gt;&gt; numeros = [3, 2, 6, 1, 7, 4]\n\n\n# Identidad del objeto numeros\n&gt;&gt;&gt; id(numeros)\n&gt;&gt;&gt; 4475439216\n\n# Se llama al m\u00e9todo sort() para ordenar los elementos de la lista\n&gt;&gt;&gt; numeros.sort()\n&gt;&gt;&gt; numeros\n&gt;&gt;&gt; [1, 2, 3, 4, 6, 7]\n\n# Se comprueba que la identidad del objeto numeros es la misma\n&gt;&gt;&gt; id(numeros)\n&gt;&gt;&gt; 4475439216\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#235-copia-de-listas","title":"2.3.5. Copia de listas","text":"<p>Existen dos formas de copiar listas:</p> <ul> <li>Copia por referencia <code>l1 = l2</code>: Asocia a la variable <code>l1</code> la misma lista que tiene asociada la variable <code>l2</code>, es decir, ambas variables apuntan a la misma direcci\u00f3n de memoria. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> o <code>l2</code> afectar\u00e1 a la misma lista.</li> <li>Copia por valor <code>l1 = list(l2)</code>: Crea una copia de la lista asociada a <code>l2</code> en una direcci\u00f3n de memoria diferente y se la asocia a <code>l1</code>. Las variables apuntan a direcciones de memoria diferentes que contienen los mismos datos. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> no afectar\u00e1 a la lista de <code>l2</code> y viceversa.</li> </ul> <pre><code>&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; # copia por referencia\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b\n[1, 2, 3]\n&gt;&gt;&gt; b.remove(2)\n&gt;&gt;&gt; b\n[1, 3]\n&gt;&gt;&gt; a\n[1, 3]\n</code></pre> <pre><code>&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; # copia por referencia\n&gt;&gt;&gt; b = list(a)\n&gt;&gt;&gt; b\n[1, 2, 3]\n&gt;&gt;&gt; b.remove(2)\n&gt;&gt;&gt; b\n[1, 3]\n&gt;&gt;&gt; a\n[1, 2, 3]\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#24-listado-de-metodos-de-la-clase-list","title":"2.4. Listado de m\u00e9todos de la clase list","text":"<p>Finalizamos mostrando la lista completa de m\u00e9todos de la clase <code>list</code>. Algunos de ellos ya se han mencionado en las secciones anteriores.</p> M\u00e9todo Descripci\u00f3n <code>append()</code> A\u00f1ade un nuevo elemento al final de la lista. <code>extend()</code> A\u00f1ade un grupo de elementos (iterables) al final de la lista. <code>insert(indice, elemento)</code> Inserta un elemento en una posici\u00f3n concreta de la lista. <code>remove(elemento)</code> Elimina la primera ocurrencia del elemento en la lista. <code>pop([i])</code> Obtiene y elimina el elemento de la lista en la posici\u00f3n i. Si no se especifica, obtiene y elimina el \u00faltimo elemento. <code>clear()</code> Borra todos los elementos de la lista. <code>index(elemento)</code> Obtiene el \u00edndice de la primera ocurrencia del elemento en la lista. Si el elemento no se encuentra, se lanza la excepci\u00f3n<code>ValueError</code>. <code>count(elemento)</code> Devuelve el n\u00famero de ocurrencias del elemento en la lista. <code>sort()</code> Ordena los elementos de la lista utilizando el operador<code>&lt;</code>. <code>reverse()</code> Obtiene los elementos de la lista en orden inverso. <code>copy()</code> Devuelve una copia poco profunda de la lista.","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#3-depuracion","title":"3. Depuraci\u00f3n","text":"<p>El uso descuidado de listas (y otros objetos mutables) puede llevar a largas horas de depuraci\u00f3n. Aqu\u00ed est\u00e1n algunos de los errores m\u00e1s comunes y las formas de evitarlos:</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#31-revisa-los-metodos","title":"3.1. Revisa los m\u00e9todos","text":"<p>No olvides que la mayor\u00eda de m\u00e9todos de listas modifican el argumento y regresan <code>None</code>. Esto es lo opuesto a los m\u00e9todos de cadenas, que regresan una nueva cadena y dejan la original sin modificar.</p> <p>Si est\u00e1s acostumbrado a escribir c\u00f3digo de cadenas como este:</p> <pre><code>palabra = palabra.strip()\n</code></pre> <p>Est\u00e1s propenso a escribir c\u00f3digo de listas como este:</p> <pre><code>t = t.sort()           # \u00a1EQUIVOCADO!\n</code></pre> <p>Debido a que <code>sort</code> regresa <code>None</code>, la siguiente operaci\u00f3n que hagas con <code>t</code> es probable que falle.</p> <p>Antes de usar m\u00e9todos y operadores de listas, deber\u00edas leer la documentaci\u00f3n cuidadosamente y despu\u00e9s probarlos en modo interactivo. Los m\u00e9todos y operadores que las listas comparten con otras secuencias (como cadenas) est\u00e1n documentados en:</p> <p>docs.python.org/library/stdtypes.html#common-sequence-operations</p> <p>Los m\u00e9todos y operadores que solamente aplican a secuencias mutables est\u00e1n documentados en:</p> <p>docs.python.org/library/stdtypes.html#mutable-sequence-types</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#32-elige-un-estilo-y-apegate-a-el","title":"3.2. Elige un estilo y ap\u00e9gate a \u00e9l.","text":"<p>Parte del problema con listas es que hay demasiadas formas de hacer las cosas. Por ejemplo, para remover un elemento de una lista, puedes utilizar <code>pop</code>, <code>remove</code>, <code>del</code>, o incluso una asignaci\u00f3n por rebanado.    Para agregar un elemento, puedes utilizar el m\u00e9todo <code>append</code> o el operador <code>+</code>. Pero no olvides que esos tambi\u00e9n son correctos:</p> <pre><code>t.append(x)\nt = t + [x]\n</code></pre> <p>Y esos son incorrectos:</p> <pre><code>t.append([x])          # \u00a1EQUIVOCADO!\nt = t.append(x)        # \u00a1EQUIVOCADO!\nt + [x]                # \u00a1EQUIVOCADO!\nt = t + x              # \u00a1EQUIVOCADO!\n</code></pre> <p>Prueba cada uno de esos ejemplos en modo interactivo para asegurarte que entiendes lo que hacen. Nota que solamente la \u00faltima provoca un error en tiempo de ejecuci\u00f3n (runtime error); los otros tres son v\u00e1lidos, pero hacen la funci\u00f3n equivocada.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#33-hacer-copias-para-evitar-alias","title":"3.3. Hacer copias para evitar alias.","text":"<p>Si quieres utilizar un m\u00e9todo como <code>sort</code> que modifica el argumento, pero necesitas mantener la lista original tambi\u00e9n, puedes hacer una copia.</p> <pre><code>orig = t[:]\nt.sort()\n</code></pre> <p>En este ejemplo podr\u00edas tambi\u00e9n usar la funci\u00f3n interna <code>sorted</code>, la cual regresa una lista nueva y ordenada, y deja la original sin modificar. \u00a1Pero en ese caso deber\u00edas evitar usar <code>sorted</code> como un nombre de variable!</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#34-listas-split-y-archivos","title":"3.4. Listas, <code>split</code>, y archivos","text":"<p>Cuando leemos y analizamos archivos, hay muchas oportunidades de encontrar entradas que pueden hacer fallar a nuestro programa, as\u00ed que es una buena idea revisar el patr\u00f3n guardi\u00e1n cuando escribimos programas que leen a trav\u00e9s de un archivo y buscan una \u201caguja en un pajar\u201d.    Vamos a revisar nuestro programa que busca por el d\u00eda de la semana en las l\u00edneas que contienen \u201cfrom\u201d en el archivo\":</p> <pre><code>From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n</code></pre> <p>Puesto que estamos dividiendo esta l\u00ednea en palabras, podr\u00edamos apa\u00f1arnos con el uso de <code>startswith</code> y simplemente buscar la primera palabra de la l\u00ednea para determinar si estamos interesados en esa l\u00ednea o no. Podemos saltarnos las l\u00edneas que no tienen \u201cFrom\u201d como  primer palabra, tal como sigue:</p> <pre><code>manejador = open('mbox-short.txt')\nfor linea in manejador:\n    palabras = linea.split()\n    if palabras[0] != 'From' : continue # Hay otra forma, evita continue\n    print(palabras[2])\n</code></pre> <p>Esto se ve mucho m\u00e1s simple y ni siquiera necesitamos hacer <code>rstrip</code> para borrar el salto de l\u00ednea al final del archivo. Pero, \u00bfes mejor?</p> <pre><code>python search8.py\nSat\nTraceback (most recent call last):\n  File \"search8.py\", line 5, in &lt;module&gt;\n    if palabras[0] != 'From' : continue\nIndexError: list index out of range\n</code></pre> <p>De alguna manera funciona y vemos el d\u00eda de la primera l\u00ednea (Sat), pero luego el programa falla con un error. \u00bfQu\u00e9 fue lo que fall\u00f3? \u00bfQu\u00e9 datos estropearon e hicieron fallar a nuestro elegante, inteligente, y muy Pyth\u00f3nico programa?</p> <p>Puedes mirar el c\u00f3digo por un largo tiempo y tratar de resolverlo o preguntar a alguien m\u00e1s, pero el m\u00e9todo m\u00e1s r\u00e1pido e inteligente es agregar una sentencia <code>print</code>. El mejor lugar para agregar la sentencia <code>print</code> es justo antes de la l\u00ednea donde el programa fall\u00f3, e imprimir los datos que parece que causan la falla.</p> <p>Ahora bien, este m\u00e9todo podr\u00eda generar muchas l\u00edneas de salida, pero al menos tendr\u00e1s inmediatamente alguna pista de cu\u00e1l es el problema. As\u00ed que agregamos un print a la variable <code>palabras</code> justo antes de la l\u00ednea cinco. Incluso podemos agregar un prefijo \u201cDepuraci\u00f3n:\u201d a la l\u00ednea de modo que mantenemos nuestra salida regular separada de la salida de mensajes de depuraci\u00f3n.</p> <pre><code>for linea in manejador:\n    palabras = line.split()\n    print('Depuraci\u00f3n:', palabras)\n    if palabras[0] != 'From' : continue\n    print(palabras[2])\n</code></pre> <p>Cuando ejecutamos el programa, se generan muchos mensajes de salida en la pantalla, pero al final, vemos nuestra salida de depuraci\u00f3n y el mensaje de error, de modo que sabemos qu\u00e9 sucedi\u00f3 justo antes del error.</p> <pre><code>Depuraci\u00f3n: ['X-DSPAM-Confidence:', '0.8475']\nDepuraci\u00f3n: ['X-DSPAM-Probability:', '0.0000']\nDepuraci\u00f3n: []\nTraceback (most recent call last):\n  File \"search9.py\", line 6, in &lt;module&gt;\n    if palabras[0] != 'From' : continue\nIndexError: list index out of range\n</code></pre> <p>Cada l\u00ednea de depuraci\u00f3n imprime la lista de palabras que obtuvimos cuando la funci\u00f3n <code>split</code> dividi\u00f3 la l\u00ednea en palabras. Cuando el programa falla, la lista de palabras est\u00e1 vac\u00eda <code>[]</code>. Si abrimos el archivo en un editor de texto y miramos el archivo, en ese punto se ve lo siguiente:</p> <pre><code>X-DSPAM-Result: Innocent\nX-DSPAM-Processed: Sat Jan  5 09:14:16 2008\nX-DSPAM-Confidence: 0.8475\nX-DSPAM-Probability: 0.0000\n\nDetails: http://source.sakaiproject.org/viewsvn/?view=rev&amp;rev=39772\n</code></pre> <p>\u00a1El error ocurre cuando nuestro programa encuentra una l\u00ednea vac\u00eda! Por supuesto, hay \u201ccero palabras\u201d en una lista vac\u00eda. \u00bfPor qu\u00e9 no pensamos en eso cuando est\u00e1bamos escribiendo el c\u00f3digo? Cuando el c\u00f3digo busca la primera palabra (<code>palabras[0]</code>) para revisar si coincide con \u201cFrom\u201d, obtenemos un error \u201cindex out of range\u201d (\u00edndice fuera de rango).</p> <p>Este es, por supuesto, el lugar perfecto para agregar algo de c\u00f3digo guardi\u00e1n para evitar revisar si la primera palabra no existe. Hay muchas maneras de proteger este c\u00f3digo; vamos a optar por revisar el n\u00famero de palabras que tenemos antes de mirar la primera palabra:</p> <pre><code>manejador = open('mbox-short.txt')\ncontador = 0\nfor linea in manejador:\n    palabras = linea.split()\n    # print 'Depuraci\u00f3n:', palabras\n    if len(palabras) == 0 : continue\n    if palabras[0] != 'From' : continue\n    print(palabras[2])\n</code></pre> <p>Posteriormente comentaremos la sentencia de depuraci\u00f3n en vez de borrarla, en caso de que nuestra modificaci\u00f3n falle y tengamos que depurar de nuevo. Luego, agregamos una sentencia guardi\u00e1n que revisa si tenemos cero palabras, y si as\u00ed fuera, saltaremos a la siguiente l\u00ednea en el archivo.</p> <p>Podemos pensar en las dos sentencias <code>continue</code> (seguro que encuetnras otra forma que no sea con <code>continue</code>) que se usan para solo procesar las l\u00edneas que son \u201cinteresantes\u201d en nuestro proceso. Una l\u00ednea que no tenga palabras \u201cno es interesante\u201d para nosotros as\u00ed que saltamos a la siguiente l\u00ednea. Una l\u00ednea que no tenga \u201cFrom\u201d como su primera palabra tampoco nos interesa as\u00ed que la saltamos.</p> <p>El programa modificado se ejecuta con \u00e9xito, as\u00ed que quiz\u00e1s es correcto. Nuestra sentencia guardi\u00e1n se asegura de que <code>palabras[0]</code> nunca falle, pero quiz\u00e1 no sea suficiente. Cuando estamos programando, siempre debemos pensar, \u201c\u00bfqu\u00e9 podr\u00eda salir mal?\u201d</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/","title":"UD 3 - 3.2 Tuplas","text":"","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#32-tuplas","title":"3.2. Tuplas","text":"<p>Otra estructura de datos que nos ofrece Python son las tuplas. Vamos a ver qu\u00e9 son y c\u00f3mo trabajar con ellas. </p>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#1-que-es-una-tupla","title":"1. Que es una tupla","text":"<p>La clase <code>tuple</code> en Python es un tipo contenedor compuesto, que en un principio se pens\u00f3 para almacenar grupos de elementos heterog\u00e9neos, aunque tambi\u00e9n puede contener elementos homog\u00e9neos. Se pueden considerar como listas inmutables. Se definen entre par\u00e9ntesis y los elementos se separan por comas.</p> <p>Junto a las clases list y range, es uno de los tipos de secuencia en Python, con la particularidad de que son inmutables. Esto \u00faltimo quiere decir que su contenido NO se puede modificar despu\u00e9s de haber sido creada.</p> <p>En general, para crear una tupla en Python simplemente hay que definir una secuencia de elementos separados por comas. No es obligarorio encerrar los elementos entre par\u00e9ntesis, aunque es una buena pr\u00e1ctica hacerlo.</p> <p>Por ejemplo, para crear una tupla con los n\u00fameros del 1 al 5 se har\u00eda del siguiente modo:</p> <pre><code>&gt;&gt;&gt; numeros = 1, 2, 3, 4, 5\n</code></pre> <p>La clase <code>tuple</code> tambi\u00e9n puede almacenar elementos de distinto tipo:</p> <pre><code>&gt;&gt;&gt; elementos = 3, 'a', 8, 7.2, 'hola'\n</code></pre> <p>Incluso pueden contener otros elementos compuestos y objetos, como listas, otras tuplas, etc.:</p> <pre><code>&gt;&gt;&gt; tup = 1, ['a', 'e', 'i', 'o', 'u'], 8.9, 'hola'\n</code></pre> <p>A continuaci\u00f3n se ven las diferentes formas que existen de crear una tupla en Python:</p> <ul> <li>Para crear una tupla vac\u00eda, usa par\u00e9ntesis <code>()</code> o el constructor de la clase <code>tuple()</code> sin par\u00e1metros.</li> <li>Para crear una tupla con un \u00fanico elemento: <code>elem,</code> o <code>(elem, )</code>. Observa que siempre se a\u00f1ade una coma.</li> <li>Para crear una tupla de varios elementos, sep\u00e1ralos con comas: <code>a, b, c</code> o <code>(a, b, c)</code>.</li> <li>Las tuplas tambi\u00e9n se pueden crear usando el constructor de la clase, <code>tuple(iterable)</code>. En este caso, el constructor crea una tupla cuyos elementos son los mismos y est\u00e1n en el mismo orden que los \u00edtems del iterable. El objeto iterable puede ser una secuencia, un contenedor que soporte la iteraci\u00f3n o un objeto iterador.</li> </ul> <p>\ufe0fIMPORTANTE: El hecho que determina que una secuencia de elementos sea una tupla es la coma <code>,</code> no los par\u00e9ntesis. Los par\u00e9ntesis son opcionales y solo se necesitan para crear una tupla vac\u00eda o para evitar ambig\u00fcedades.</p> <pre><code># Aqu\u00ed, a, b y c no son una tupla, sino tres argumentos con\n# los que se llama a la funci\u00f3n \"una_funcion\"\n&gt;&gt;&gt; una_funcion(a, b, c)\n# Aqu\u00ed, a, b y c son tres elementos de una tupla. Esta tupla,\n# es el \u00fanico argumento con el que se invoca a la\n# funci\u00f3n \"una_funcion\"\n&gt;&gt;&gt; una_funcion((a, b, c))\n</code></pre> <p>La forma de crear una tupla sin par\u00e9ntesis es conocida como tuple packing (algo as\u00ed como empaquetado de tuplas).</p>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#2-diferencia-entre-tuplas-y-listas","title":"2. Diferencia entre tuplas y listas.","text":"<p>Una lista no es lo mismo que una tupla. Ambas son un conjunto ordenado de valores, en donde este \u00faltimo puede ser cualquier objeto: un n\u00famero, una cadena, una funci\u00f3n, una clase, una instancia, etc. La diferencia es que las listas presentan una serie de funciones adicionales que permiten un amplio manejo de los valores que contienen. Bas\u00e1ndonos en esta definici\u00f3n, puede decirse que las listas son din\u00e1micas, mientras que las tuplas son est\u00e1ticas.</p> <p>La principal diferencia entre las listas y las tuplas de Python, y el motivo por el que muchos usuarios solamente utilizar listas, es que las listas son mutables mientras que las tuplas son inmutables. \u00bfPero qu\u00e9 significa ser mutable o no? B\u00e1sicamente un objeto mutable se puede modificar una vez creado mientras que uno que no lo es no. As\u00ed el contenido de las listas se puede modificar durante la ejecuci\u00f3n del programa mientras para las tuplas no es posible alterar su contenido. Las tuplas se podr\u00e1n usar como las listas teniendo en cuenta su inmutabilidad.</p> <p>El hecho de ser mutable tiene adem\u00e1s otras consecuencias. Para ser mutables las listas se almacena en dos bloques de memoria, mientras que las tuplas solo necesitan uno. Lo que provoca que las tuplas ocupen menos memoria que las listas. Adem\u00e1s, por el hecho de no ser mutables, es m\u00e1s r\u00e1pido manejar tuplas que listas. Debido a esto, hay que tener en cuenta lo anterior para elegir en nuestros algoritmos el tipo que mejor se adapte. En el caso de que no sea necesario modificar el contenido de los datos la mejor opci\u00f3n es la tupla, ya que es ocupa menos memoria y es m\u00e1s r\u00e1pida. En el resto de los casos la mejor opci\u00f3n ser\u00e1 utilizar listas.</p>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#3-trabajar-con-tuplas-en-python","title":"3. Trabajar con tuplas en Python","text":"<p>Las tuplas en Python son objetos inmutables, lo que significa que una vez creadas no se pueden modificar. A continuaci\u00f3n, se muestran algunas operaciones b\u00e1sicas que se pueden realizar con las tuplas en Python.</p>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#31-como-acceder-a-los-elementos-de-una-tupla-en-python","title":"3.1. C\u00f3mo acceder a los elementos de una tupla en Python","text":"<p>Para acceder a un elemento de una tupla se utilizan los \u00edndices. Un \u00edndice es un n\u00famero entero que indica la posici\u00f3n de un elemento en una tupla. El primer elemento de una tupla siempre comienza en el \u00edndice 0.</p> <p>Por ejemplo, en una tupla con 3 elementos, los \u00edndices de cada uno de los \u00edtems ser\u00edan 0, 1 y 2.</p> <pre><code>&gt;&gt;&gt; tupla = ('a', 'b', 'd')\n&gt;&gt;&gt; tupla[0]  # Primer elemento de la tupla. \u00cdndice 0\n'a'\n&gt;&gt;&gt; tupla[1]  # Segundo elemento de la tupla. \u00cdndice 1\n'b'\n</code></pre> <p>Si se intenta acceder a un \u00edndice que est\u00e1 fuera del rango de la tupla, el int\u00e9rprete lanzar\u00e1 la excepci\u00f3n <code>IndexError</code>. De igual modo, si se utiliza un \u00edndice que no es un n\u00famero entero, se lanzar\u00e1 la excepci\u00f3n <code>TypeError</code>:</p> <pre><code>&gt;&gt;&gt; tupla = 1, 2, 3  # Los \u00edndices v\u00e1lidos son 0, 1 y 2\n&gt;&gt;&gt; tupla[8]\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nIndexError: tuple index out of range\n&gt;&gt;&gt; tupla[1.0]\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nTypeError: tuple indices must be integers or slices, not float\n&gt;\n</code></pre>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#311-acceso-a-los-elementos-usando-un-indice-negativo","title":"3.1.1. Acceso a los elementos usando un \u00edndice negativo","text":"<p>Al igual que ocurre con las listas (y todos los tipos secuenciales), est\u00e1 permitido usar \u00edndices negativos para acceder a los elementos de una tupla. En este caso, el \u00edndice -1 hace referencia al \u00faltimo elemento de la secuencia, el -2 al pen\u00faltimo y as\u00ed, sucesivamente:</p> <pre><code>&gt;&gt;&gt; bebidas = ('agua', 'caf\u00e9', 'batido', 'sorbete')\n&gt;&gt;&gt; bebidas[-1]\n'sorbete'\n&gt;&gt;&gt; bebidas[-3]\n'caf\u00e9'\n</code></pre>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#312-acceso-a-un-subconjunto-de-elementos","title":"3.1.2. Acceso a un subconjunto de elementos","text":"<p>Tambi\u00e9n es posible acceder a un subconjunto de elementos de una tupla utilizando el operador <code>[:]</code>:</p> <pre><code>&gt;&gt;&gt; vocales = 'a', 'e', 'i', 'o', 'u'\n&gt;&gt;&gt; vocales[2:3]  # Elementos desde el \u00edndice 2 hasta el \u00edndice 3-1\n('i',)\n&gt;&gt;&gt; vocales[2:4]  # Elementos desde el 2 hasta el \u00edndice 4-1\n('i', 'o')\n&gt;&gt;&gt; vocales[:]  # Todos los elementos\n('a', 'e', 'i', 'o', 'u')\n&gt;&gt;&gt; vocales[1:]  # Elementos desde el \u00edndice 1\n('e', 'i', 'o', 'u')\n&gt;&gt;&gt; vocales[:3]  # Elementos hasta el \u00edndice 3-1\n('a', 'e', 'i')\n</code></pre> <p>O indicando un salto entre los elementos con el operador <code>[::]</code>:</p> <pre><code>&gt;&gt;&gt; pares = 2, 4, 6, 8, 10, 12, 14\n&gt;&gt;&gt; pares[::2]  # Acceso a los elementos de 2 en 2\n(2, 6, 10, 14)\n&gt;&gt;&gt; pares[1:5:2]  # Elementos del \u00edndice 1 al 4 de 2 en 2\n(4, 8)\n&gt;&gt;&gt; pares[1:6:3]  # Elementos del \u00edndice 1 al 5 de 3 en 3\n(4, 10)\n</code></pre>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#32-modificar-una-tupla-en-python","title":"3.2. Modificar una tupla en Python","text":"<p>Como hemos dicho ya, las tuplas son objetos inmutables. No obstante, las tuplas pueden contener objetos u otros elementos de tipo secuencia, por ejemplo, una lista. Estos objetos, si son mutables, s\u00ed se pueden modificar:</p> <pre><code>&gt;&gt;&gt; tupla = (1, ['a', 'b'], 'hola', 8.2)\n&gt;&gt;&gt; tupla[1].append('c')  # tupla[1] hace referencia a la lista\n&gt;&gt;&gt; tupla\n(1, ['a', 'b', 'c'], 'hola', 8.2)\n</code></pre>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#4-patrones-de-uso","title":"4. Patrones de uso","text":"","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#41-longitud-len-de-una-tupla-en-python","title":"4.1. Longitud (len) de una tupla en Python","text":"<p>Como cualquier tipo secuencia, para conocer la longitud de una tupla en Python se hace uso de la funci\u00f3n <code>len()</code>. Esta funci\u00f3n devuelve el n\u00famero de elementos de una tupla:</p> <pre><code>&gt;&gt;&gt; vocales = ('a', 'e', 'i', 'o', 'u')\n&gt;&gt;&gt; len(vocales)\n5\n</code></pre>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#42-recorrer-una-tupla-for-tuple-python","title":"4.2. Recorrer una tupla - <code>for</code> tuple Python","text":"<p>El bucle <code>for</code> en Python es una de las estructuras ideales para iterar sobre los elementos de una secuencia. Para recorrer una tupla en Python utiliza la siguiente estructura:</p> <pre><code>&gt;&gt;&gt; colores = 'azul', 'blanco', 'negro'\n&gt;&gt;&gt; for color in colores:\n...   print(color)\nazul\nblanco\nnegro\n</code></pre>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#43-como-saber-si-un-elemento-esta-en-una-tupla-en-python","title":"4.3. C\u00f3mo saber si un elemento est\u00e1 en una tupla en Python","text":"<p>Como hemos visto en otras unidades, para saber si un elemento est\u00e1 contenido en una tupla, se utiliza el operador de pertenencia <code>in</code>:</p> <pre><code>&gt;&gt;&gt; colores = 'azul', 'blanco', 'negro'\n&gt;&gt;&gt; if 'azul' in colores:\n...     print('S\u00ed')\n...     \nS\u00ed\n&gt;&gt;&gt; if 'verde' not in colores:\n...     print('No')\n...     \nNo\n</code></pre>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#44-tuple-unpacking","title":"4.4. tuple unpacking","text":"<p>El concepto conocido como tuple unpacking (desempaquetado de una tupla) se puede aplicar sobre cualquier objeto de tipo secuencia, aunque se usa mayoritariamente con las tuplas, y consiste en lo siguiente:</p> <pre><code>&gt;&gt;&gt; bebidas = 'agua', 'caf\u00e9', 'batido'\n&gt;&gt;&gt; a, b, c = bebidas\n&gt;&gt;&gt; a\n'agua'\n&gt;&gt;&gt; b\n'caf\u00e9'\n&gt;&gt;&gt; c\n'batido'\n</code></pre> <p>Como puedes apreciar, es un tipo de asignaci\u00f3n m\u00faltiple. Requiere que haya tantas variables a la izquierda del operador de asignaci\u00f3n <code>=</code> como elementos haya en la secuencia.</p>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#5-listado-de-metodos-de-la-clase-tuple-en-python","title":"5. Listado de m\u00e9todos de la clase tuple en Python","text":"<p>Para terminar, se muestran los m\u00e9todos de la clase <code>tuple</code> en Python, que son los m\u00e9todos definidos para cualquier tipo secuencial:</p> M\u00e9todo Descripci\u00f3n <code>index(elemento)</code> Obtiene el \u00edndice de la primera ocurrencia del elemento en la tupla. Si el elemento no se encuentra, se lanza la excepci\u00f3n<code>ValueError</code>. <code>count(elemento)</code> Devuelve el n\u00famero de ocurrencias del elemento en la tupla.","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> </ul>","tags":["Software","tuplas"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/","title":"UD 3 - 3.3 Diccionarios","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#33-diccionarios","title":"3.3. Diccionarios","text":"<p>Los diccionarios son una estructura de datos que permite almacenar un conjunto de pares clave-valor. Cada clave es \u00fanica y est\u00e1 asociada a un valor. Los diccionarios son una estructura de datos muy utilizada en Python y en otros lenguajes de programaci\u00f3n. En este apartado vamos a ver c\u00f3mo se crean y se utilizan los diccionarios en Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>La clase <code>dict</code> de Python es un tipo mapa que asocia claves a valores. A diferencia de los tipos secuenciales <code>list</code>, <code>tuple</code>, <code>range</code> o <code>str</code>, que son indexados por un \u00edndice num\u00e9rico, los diccionarios son indexados por claves. Estas claves siempre deben ser de un tipo inmutable, concretamente un tipo hashable.</p> <p>\ud83c\udfaf NOTA: Un objeto es hashable si tiene un valor de hash que no cambia durante todo su ciclo de vida. En principio, los objetos que son instancias de clases definidas por el usuario son hashables. Tambi\u00e9n lo son la mayor\u00eda de tipos inmutables definidos por Python (<code>int</code>,<code>float</code> o <code>str</code>).</p> <p>Piensa siempre en un diccionario como un contenedor de pares clave: valor, en el que la clave puede ser de cualquier tipo hashable y es \u00fanica en el diccionario que la contiene. Generalmente, se suelen usar como claves los tipos <code>int</code> y <code>str</code> aunque, como se ha comentado, cualquier tipo hashable puede ser una clave.</p> <p>Ten cuenta que no todo los objetos pueden ser clave, solo los hashables</p> <p> </p> Estructura de datos: Diccionario <p>Las principales operaciones que se suelen realizar con diccionarios son almacenar un valor asociado a una clave y recuperar un valor a partir de una clave. Esta es la esencia de los diccionarios y es aqu\u00ed donde son realmente importantes. En un diccionario, el acceso a un elemento a partir de una clave es una operaci\u00f3n realmente r\u00e1pida, eficaz y que consume pocos recursos si lo comparamos con c\u00f3mo lo har\u00edamos con otros tipos de datos.</p> <p>Otras caracter\u00edsticas a resaltar de los diccionarios:</p> <ul> <li>Es un tipo mutable: su contenido se puede modificar despu\u00e9s de haber sido creado.</li> <li>Es un tipo ordenado: en el sentido de que preserva el orden en que se insertan los pares clave: valor.</li> <li>Es un tipo din\u00e1mico: no es necesario declarar el tama\u00f1o del diccionario antes de usarlo.</li> <li>Es un tipo heterog\u00e9neo: las claves y los valores pueden ser de cualquier tipo y mezclarse en un mismo diccionario.</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#2-trabajar-con-diccionarios-en-python","title":"2. Trabajar con diccionarios en Python","text":"<p>Los diccionarios en Python son un tipo de datos muy vers\u00e1til y potente. Se pueden crear, modificar y eliminar elementos de un diccionario, as\u00ed como acceder a sus elementos de distintas formas. A continuaci\u00f3n, se describen las operaciones m\u00e1s comunes que se pueden realizar con diccionarios en Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#21-como-crear-un-diccionario","title":"2.1. C\u00f3mo crear un diccionario","text":"<p>En Python hay varias formas de crear un diccionario. Las veremos todas a continuaci\u00f3n.</p> <p>La m\u00e1s simple es encerrar una secuencia de pares clave: valor separados por comas entre llaves <code>{}</code></p> <pre><code>&gt;&gt;&gt; d = {1: 'hola', 89: 'Pythonista', 'a': 'b', 'c': 27}\n</code></pre> <p>En el diccionario anterior, los enteros <code>1</code> y <code>89</code> y las cadenas <code>'a'</code> y <code>'c'</code> son las claves. Como ves, se pueden mezclar claves y valores de distinto tipo sin problema.</p> <p>Para crear un diccionario vac\u00edo:    </p> <ul> <li>Asigna a una variable el valor <code>{}</code>.      </li> <li> <p>Usar el constructor de la clase <code>dict()</code>, aunque este constructor se puede de varias maneras:</p> <ul> <li>Sin par\u00e1metros . Esto crear\u00e1 un diccionario vac\u00edo.     </li> <li>Con pares clave: valor encerrados entre llaves.      </li> <li>Con argumentos con nombre. El nombre del argumento ser\u00e1 la clave en el diccionario. En este caso, las claves solo pueden ser identificadores v\u00e1lidos y mantienen el orden en el que se indican. No se podr\u00eda, por ejemplo, tener n\u00fameros enteros como claves. Para utilizar los n\u00fameros enteros como claves, se debe usar otra forma de crear los diccionarios.      </li> <li>Pasando un iterable. En este caso, cada elemento del iterable debe ser tambi\u00e9n un iterable con solo dos elementos. El primero se toma como clave del diccionario y el segundo como valor. Si la clave aparece varias veces, el valor que prevalece es el \u00faltimo.       </li> </ul> </li> </ul> <p>Veamos un ejemplo con todo lo anterior. Vamos a crear el mismo diccionario de todos los modos que te he explicado:</p> <pre><code># 1. Pares clave: valor encerrados entre llaves\n&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3}\n\n# 2. Argumentos con nombre\n&gt;&gt;&gt; d2 = dict(uno=1, dos=2, tres=3)\n&gt;&gt;&gt; d2\n{'uno': 1, 'dos': 2, 'tres': 3}\n\n# 3. Pares clave: valor encerrados entre llaves\n&gt;&gt;&gt; d3 = dict({'uno': 1, 'dos': 2, 'tres': 3})\n&gt;&gt;&gt; d3\n{'uno': 1, 'dos': 2, 'tres': 3}\n\n# 4. Iterable que contiene iterables con dos elementos\n&gt;&gt;&gt; d4 = dict([('uno', 1), ('dos', 2), ('tres', 3)])\n&gt;&gt;&gt; d4\n{'uno': 1, 'dos': 2, 'tres': 3}\n\n# 5. Diccionario vac\u00edo\n&gt;&gt;&gt; d5 = {}\n&gt;&gt;&gt; d5\n{}\n\n# 6. Diccionario vac\u00edo usando el constructor\n&gt;&gt;&gt; d6 = dict()\n&gt;&gt;&gt; d6\n{}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#22-como-acceder-a-los-elementos-de-un-diccionario-en-python","title":"2.2. C\u00f3mo acceder a los elementos de un diccionario en Python","text":"<p>Acceder a un elemento de un diccionario es una de las principales operaciones por las que existe este tipo de dato. El acceso a un valor se realiza mediante indexaci\u00f3n de la clave. Para ello, simplemente encierra entre corchetes la clave del elemento <code>d[clave]</code>. En caso de que la clave no exista, se lanzar\u00e1 la excepci\u00f3n <code>KeyError</code>.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; d['dos']\n2\n&gt;&gt;&gt; d[4]\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 4\n&gt; \n</code></pre> <p>La clase <code>dict</code> tambi\u00e9n ofrece el m\u00e9todo <code>get(clave [, valor por defecto])</code>. Este m\u00e9todo devuelve el valor correspondiente a la clave <code>clave</code>. En caso de que la clave no exista no lanza ning\u00fan error, sino que devuelve el segundo argumento <code>valor por defecto</code>. Si no se proporciona este argumento, se devuelve el valor <code>None</code>.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; d.get('uno')\n1\n\n# Devuelve 4 como valor por defecto si no encuentra la clave\n&gt;&gt;&gt; d.get('cuatro', 4)\n4\n\n# Devuelve None como valor por defecto si no encuentra la clave\n&gt;&gt;&gt; a = d.get('cuatro')\n&gt;&gt;&gt; a\n&gt;&gt;&gt; type(a)\n&lt;class 'NoneType'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#23-anadir-elementos-a-un-diccionario-en-python","title":"2.3. A\u00f1adir elementos a un diccionario en Python","text":"<p>Como hemos comentado, la clase <code>dict</code> es mutable, por lo que se pueden a\u00f1adir, modificar y/o eliminar elementos despu\u00e9s de haber creado un objeto de este tipo.</p> <p>Para a\u00f1adir un nuevo elemento a un diccionario existente, se usa el operador de asignaci\u00f3n <code>=</code>. A la izquierda del operador aparece el objeto diccionario con la nueva clave entre corchetes <code>[]</code> y a la derecha el valor que se asocia a dicha clave.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2}\n# A\u00f1ade un nuevo elemento al diccionario\n&gt;&gt;&gt; d['tres'] = 3\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3}\n</code></pre> <p>\ud83c\udfaf NOTA: Si la clave ya existe en el diccionario, se actualiza su valor.</p> <p>Tambi\u00e9n existe el m\u00e9todo <code>setdefault(clave[, valor])</code>. Este m\u00e9todo devuelve el valor de la clave si ya existe y, en caso contrario, le asigna el valor que se pasa como segundo argumento. Si no se especifica este segundo argumento, por defecto es <code>None</code>.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d.setdefault('uno', 1.0)\n1\n&gt;&gt;&gt; d.setdefault('tres', 3)\n3\n&gt;&gt;&gt; d.setdefault('cuatro')\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3, 'cuatro': None}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#24-modificar-elementos-de-un-diccionario","title":"2.4. Modificar elementos de un diccionario","text":"<p>En el apartado anterior hemos visto que para actualizar el valor asociado a una clave, simplemente se asigna un nuevo valor a dicha clave del diccionario.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d['uno'] = 1.0\n&gt;&gt;&gt; d\n{'uno': 1.0, 'dos': 2}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#25-eliminar-un-elemento-de-un-diccionario-en-python","title":"2.5. Eliminar un elemento de un diccionario en Python","text":"<p>En Python existen diversos modos de eliminar un elemento de un diccionario. Son los siguientes:</p> <ul> <li><code>pop(clave [, valor por defecto])</code>: Si la <code>clave</code> est\u00e1 en el diccionario, elimina el elemento y devuelve su valor; si no, devuelve el <code>valor por defecto</code>. Si no se proporciona el <code>valor por defecto</code> y la <code>clave</code> no est\u00e1 en el diccionario, se lanza la excepci\u00f3n <code>KeyError</code>.</li> <li><code>popitem()</code>: Elimina el \u00faltimo par clave: valor del diccionario y lo devuelve. Si el diccionario est\u00e1 vac\u00edo se lanza la excepci\u00f3n <code>KeyError</code>. (NOTA: En versiones anteriores a Python 3.7, se elimina/devuelve un par aleatorio, no se garantiza que sea el \u00faltimo).</li> <li><code>del d[clave]</code>: Elimina el par clave: valor. Si no existe la clave, se lanza la excepci\u00f3n <code>KeyError</code>.</li> <li><code>clear()</code>: Borra todos los pares clave: valor del diccionario.</li> </ul> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3, 'cuatro': 4, 'cinco': 5}\n\n# Elimina un elemento con pop()\n&gt;&gt;&gt; d.pop('uno')\n1\n&gt;&gt;&gt; d\n{'dos': 2, 'tres': 3, 'cuatro': 4, 'cinco': 5}\n\n# Trata de eliminar una clave con pop() que no existe\n&gt;&gt;&gt; d.pop(6)\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 6\n\n# Elimina un elemento con popitem()\n&gt;&gt;&gt; d.popitem()\n('cinco', 5)\n&gt;&gt;&gt; d\n{'dos': 2, 'tres': 3, 'cuatro': 4}\n\n# Elimina un elemento con del\n&gt;&gt;&gt; del d['tres']\n&gt;&gt;&gt; d\n{'dos': 2, 'cuatro': 4}\n\n# Trata de eliminar una clave con del que no existe\n&gt;&gt;&gt; del d['seis']\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 'seis'\n\n# Borra todos los elementos del diccionario\n&gt;&gt;&gt; d.clear()\n&gt;&gt;&gt; d\n{}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#3-patrones-de-uso-de-diccionarios-en-python","title":"3. Patrones de uso de diccionarios en Python","text":"<p>Python es un lenguaje muy vers\u00e1til y flexible que permite utilizar los diccionarios de muchas formas. A continuaci\u00f3n, se describen algunos de los patrones de uso m\u00e1s comunes de los diccionarios en Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#31-numero-de-elementos-len-de-un-diccionario-en-python","title":"3.1. N\u00famero de elementos (len) de un diccionario en Python","text":"<p>Al igual que sucede con otros tipos contenedores, se puede usar la funci\u00f3n de Python <code>len()</code> para obtener el n\u00famero de elementos de un diccionario.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; len(d)\n3\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#32-recorrer-un-diccionario-for-dict-python","title":"3.2. Recorrer un diccionario - for dict Python","text":"<p>Hay varias formas de recorrer los elementos de un diccionario: recorrer solo las claves, solo los valores o recorrer a la vez las claves y los valores. Puedes ver aqu\u00ed c\u00f3mo usar el bucle for para recorrer un diccionario.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; for e in d:\n...     print(e)\n... \nuno\ndos\ntres\n\n# Recorrer las claves del diccionario\n&gt;&gt;&gt; for k in d.keys():\n...     print(k)\n...   \nuno\ndos\ntres\n\n# Recorrer los valores del diccionario\n&gt;&gt;&gt; for v in d.values():\n...     print(v)\n...   \n1\n2\n3\n\n# Recorrer los pares clave valor\n&gt;&gt;&gt; for i in d.items():\n...     print(i)\n...   \n('uno', 1)\n('dos', 2)\n('tres', 3)\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#33-comprobar-si-un-elemento-esta-en-un-diccionario-en-python","title":"3.3. Comprobar si un elemento est\u00e1 en un diccionario en Python","text":"<p>Al operar con diccionarios, se puede usar el operador de pertenencia <code>in</code> para comprobar si una clave est\u00e1 contenida, o no, en un diccionario. Esto resulta \u00fatil, por ejemplo, para asegurarnos de que una clave existe antes de intentar eliminarla.</p> <pre><code>&gt;&gt;&gt; print('uno' in d)\nTrue\n&gt;&gt;&gt; print(1 in d)\nFalse\n&gt;&gt;&gt; print(1 not in d)\nTrue\n# Intenta eliminar la clave 1 si existe\n&gt;&gt;&gt; if 1 in d:\n...     del d[1]\n...   \n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#34-comparar-si-dos-diccionarios-son-iguales","title":"3.4. Comparar si dos diccionarios son iguales","text":"<p>En Python se puede utilizar el operador de igualdad <code>==</code> para comparar si dos diccionarios son iguales.  Dos diccionarios son iguales si contienen el mismo conjunto de pares clave: valor , independientemente del orden que tengan.</p> <p>Otro tipo de comparaciones entre diccionarios no est\u00e1n permitidas. Si se intenta, el int\u00e9rprete lanzar\u00e1 la excepci\u00f3n <code>TypeError</code>.</p> <pre><code>&gt;&gt;&gt; d1 = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d2 = {'dos': 2, 'uno': 1}\n&gt;&gt;&gt; d3 = {'uno': 1}\n&gt;&gt;&gt; print(d1 == d2)\nTrue\n&gt;&gt;&gt; print(d1 == d3)\nFalse\n&gt;&gt;&gt; print(d1 &gt; d2)\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nTypeError: '&gt;' not supported between instances of 'dict' and 'dict'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#35-diccionarios-anidados-en-python","title":"3.5. Diccionarios anidados en Python","text":"<p>Un diccionario puede contener un valor de cualquier tipo, entre ellos, otro diccionario. Este hecho se conoce como diccionarios anidados.</p> <p>Para acceder al valor de una de las claves de un diccionario interno, se usa el operador de indexaci\u00f3n anidada <code>[clave1][clave2]...</code></p> <p>Ve\u00e1moslo con un ejemplo:</p> <pre><code>&gt;&gt;&gt; d = {'d1': {'k1': 1, 'k2': 2}, 'd2': {'k1': 3, 'k4': 4}}\n&gt;&gt;&gt; d['d1']['k1']\n1\n&gt;&gt;&gt; d['d2']['k1']\n3\n&gt;&gt;&gt; d['d2']['k4']\n4\n&gt;&gt;&gt; d['d3']['k4']\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 'd3'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#36-obtener-una-lista-con-las-claves-de-un-diccionario","title":"3.6. Obtener una lista con las claves de un diccionario","text":"<p>En ocasiones, es necesario tener almacenado en una lista las claves de un diccionario. Para ello, simplemente pasa el diccionario como argumento del constructor <code>list()</code>. Esto devolver\u00e1 las claves del diccionario en una lista.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; list(d)\n['uno', 'dos', 'tres']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#37-objetos-vista-de-un-diccionario","title":"3.7. Objetos vista de un diccionario","text":"<p>La clase dict implementa tres m\u00e9todos muy particulares, dado que devuelven un tipo de dato, iterable, conocido como objetos vista. Estos objetos ofrecen una vista de las claves y valores contenidos en el diccionario y si el diccionario se modifica, dichos objetos se actualizan al instante.</p> <p>Los m\u00e9todos son los siguientes:</p> <ul> <li><code>keys()</code>: Devuelve una vista de las claves del diccionario.</li> <li><code>values()</code>: Devuelve una vista de los valores del diccionario.</li> <li><code>items()</code>: Devuelve una vista de pares (clave, valor) del diccionario.</li> </ul> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n# d.keys() es diferente a list(d), aunque ambos\n# contengan las claves del diccionario\n# d.keys() es de tipo dict_keys y list(d) es de tipo list\n&gt;&gt;&gt; v = d.keys()\n&gt;&gt;&gt; type(v)\n&lt;class 'dict_keys'&gt;\n&gt;&gt;&gt; v\ndict_keys(['uno', 'dos', 'tres'])\n\n&gt;&gt;&gt; l = list(d)\n&gt;&gt;&gt; type(l)\n&lt;class 'list'&gt;\n&gt;&gt;&gt; l\n['uno', 'dos', 'tres']\n\n&gt;&gt;&gt; v = d.values()\n&gt;&gt;&gt; type(v)\n&lt;class 'dict_values'&gt;\n&gt;&gt;&gt; v\ndict_values([1, 2, 3])\n\n&gt;&gt;&gt; v = d.items()\n&gt;&gt;&gt; type(v)\n&lt;class 'dict_items'&gt;\n&gt;&gt;&gt; v\ndict_items([('uno', 1), ('dos', 2), ('tres', 3)])\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#4-listado-de-metodos-de-la-clase-dict","title":"4. Listado de m\u00e9todos de la clase dict","text":"<p>Finalmente, enumeramos 0el listado de los principales m\u00e9todos de la clase dict. Algunos de ellos ya los hemos visto durante la unidad:</p> M\u00e9todo Descripci\u00f3n <code>clear()</code> Elimina todos los elementos del diccionario. <code>copy()</code> Devuelve una copia poco profunda del diccionario. <code>get(clave[, valor])</code> Devuelve el valor de la<code>clave</code>. Si no existe, devuelve el valor <code>valor</code> si se indica y si no, <code>None</code>. <code>items()</code> Devuelve una vista de los pares*clave: valor* del diccionario. <code>keys()</code> Devuelve una vista de las claves del diccionario. <code>pop(clave[, valor])</code> Devuelve el valor del elemento cuya clave es<code>clave</code> y elimina el elemento del diccionario. Si la clave no se encuentra, devuelve <code>valor</code> si se proporciona. Si la clave no se encuentra y no se indica <code>valor</code>, lanza la excepci\u00f3n <code>KeyError</code>. <code>popitem()</code> Devuelve un par*(clave, valor)* aleatorio del diccionario. Si el diccionario est\u00e1 vac\u00edo, lanza la excepci\u00f3n<code>KeyError</code>. <code>setdefault(clave[, valor])</code> Si la<code>clave</code> est\u00e1 en el diccionario, devuelve su valor. Si no lo est\u00e1, inserta la <code>clave</code> con el valor <code>valor</code> y lo devuelve (si no se especifica <code>valor</code>, por defecto es <code>None</code>). <code>update(iterable)</code> Actualiza el diccionario con los pares*clave: valor* del <code>iterable</code>. <code>values()</code> Devuelve una vista de los valores del diccionario.","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#5-depuracion","title":"5. Depuraci\u00f3n","text":"<p>Conforme trabajes con conjuntos de datos m\u00e1s grandes puede ser complicado depurar imprimiendo y revisando los datos a mano. Aqu\u00ed hay algunas sugerencias para depurar grandes conjuntos de datos:</p> <ul> <li>Reducir la entrada: Si es posible, trata de reducir el tama\u00f1o del conjunto de datos. Por ejemplo, si el programa lee un archivo de texto, comienza solamente con las primeras 10 l\u00edneas, o con el ejemplo m\u00e1s peque\u00f1o que puedas encontrar. Puedes ya sea editar los archivos directamente, o (mejor) modificar el programa para que solamente lea las primeras <code>n</code> n\u00famero de l\u00edneas.</li> </ul> <p>Si hay un error, puedes reducir <code>n</code> al valor m\u00e1s peque\u00f1o que produce el error, y despu\u00e9s incrementarlo gradualmente conforme vayas encontrando y corrigiendo errores.</p> <ul> <li>Revisar extractos y tipos: En lugar de imprimir y revisar el conjunto de datos completo, considera imprimir extractos de los datos: por ejemplo, el n\u00famero de elementos en un diccionario o el total de una lista de n\u00fameros.</li> </ul> <p>Una causa com\u00fan de errores en tiempo de ejecuci\u00f3n es un valor que no es el tipo correcto. Para depurar este tipo de error, generalmente es suficiente con imprimir el tipo de un valor.</p> <ul> <li>Escribe auto-verificaciones: Algunas veces puedes escribir c\u00f3digo para revisar errores autom\u00e1ticamente. Por ejemplo, si est\u00e1s calculando el promedio de una lista de n\u00fameros, podr\u00edas verificar que el resultado no sea m\u00e1s grande que el elemento m\u00e1s grande de la lista o que sea menor que el elemento m\u00e1s peque\u00f1o de la lista. Esto es llamado \u201cprueba de sanidad\u201d porque detecta resultados que son \u201ccompletamente il\u00f3gicos\u201d.</li> </ul> <p>Otro tipo de prueba compara los resultados de dos diferentes c\u00e1lculos para ver si son consistentes. Esto es conocido como \u201cprueba de consistencia\u201d.</p> <p>Imprimir una salida ordenada: Dar un formato a los mensajes de depuraci\u00f3n puede facilitar encontrar un error. </p> <p>De nuevo, el tiempo que inviertas haciendo una buena estructura puede reducir el tiempo que inviertas en depurar.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Dicionarios y Hash</li> <li>Aprende con Alf</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/","title":"UD 3 - 3.4 Conjuntos","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#34-conjuntos","title":"3.4. Conjuntos","text":"<p>Los conjuntos se han convertido en una estructura de datos muy utilizada en Python. En esta unidad vamos a ver qu\u00e9 es un conjunto, c\u00f3mo se crea, c\u00f3mo se a\u00f1aden y eliminan elementos, c\u00f3mo se accede a los elementos, c\u00f3mo se realizan operaciones con conjuntos, etc.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#1-que-es-el-tipo-set-en-python","title":"1. Qu\u00e9 es el tipo set en Python","text":"<p>Los conjuntos son una estructura de datos que permite almacenar elementos de forma desordenada y \u00fanicos, es decir, sin repetici\u00f3n. En Python, los conjuntos, tipo <code>set</code>, se representan con llaves <code>{}</code> y los elementos se separan por comas. Los conjuntos son mutables, es decir, se pueden modificar despu\u00e9s de su creaci\u00f3n,</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#11-caracteristicas-de-los-conjuntos-en-python","title":"1.1. Caracter\u00edsticas de los conjuntos en Python","text":"<p>La principal caracter\u00edstica de este tipo de datos es que es una colecci\u00f3n cuyos elementos no guardan ning\u00fan orden y que adem\u00e1s son \u00fanicos.</p> <p>Estas caracter\u00edsticas hacen que los principales usos de esta clase sean conocer si un elemento pertenece o no a una colecci\u00f3n y eliminar duplicados de un tipo secuencial (list, tuple o str).</p> <p>Adem\u00e1s, esta clase tambi\u00e9n implementa las t\u00edpicas operaciones matem\u00e1ticas sobre conjuntos:  uni\u00f3n ,  intersecci\u00f3n ,  diferencia , \u2026</p> <p>Los princpales uso de los conjuntos son:</p> <ul> <li>Eliminar duplicados de una lista. Ej: <code>set([1, 2, 3, 1, 2])</code> devuelve <code>{1, 2, 3}</code>.    </li> <li>Comprobar si un elemento est\u00e1 en una colecci\u00f3n. Ej: <code>3 in {1, 2, 3}</code> devuelve <code>True</code>.    </li> <li>Realizar operaciones de conjuntos. Ej: <code>{1, 2, 3} &amp; {2, 3, 4}</code> devuelve <code>{2, 3}</code>.    </li> <li>Implementar algoritmos de b\u00fasqueda y optimizaci\u00f3n. Ej: <code>set([1, 2, 3]) - set([2, 3, 4])</code> devuelve <code>{1}</code>.    </li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#2-trabajar-con-conjuntos","title":"2. Trabajar con conjuntos","text":"<p>A continuaci\u00f3n se muestra c\u00f3mo trabajar con conjuntos en Python. Se ver\u00e1 c\u00f3mo crear conjuntos, a\u00f1adir y eliminar elementos, acceder a los elementos.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#21-creacion-de-conjuntos-en-python","title":"2.1. Creaci\u00f3n de conjuntos en Python","text":"<p>Para crear un conjunto, basta con encerrar una serie de elementos entre llaves <code>{}</code>, o bien usar el constructor de la clase <code>set()</code> y pasarle como argumento un objeto iterable (como una  lista , una  tupla , una cadena \u2026).</p> <pre><code># Crea un conjunto con una serie de elementos entre llaves\n# Los elementos repetidos se eliminan\n&gt;&gt;&gt; c = {1, 3, 2, 9, 3, 1}\n&gt;&gt;&gt; c\n{1, 2, 3, 9}\n\n# Crea un conjunto a partir de un string\n# Los caracteres repetidos se eliminan\n&gt;&gt;&gt; a = set('Hola Pythonista')\n&gt;&gt;&gt; a\n{'a', 'H', 'h', 'y', 'n', 's', 'P', 't', ' ', 'i', 'l', 'o'}\n\n# Crea un conjunto a partir de una lista\n# Los elementos repetidos de la lista se eliminan\n&gt;&gt;&gt; unicos = set([3, 5, 6, 1, 5])\n&gt;&gt;&gt; unicos\n{1, 3, 5, 6}\n</code></pre> <p>Para crear un conjunto vac\u00edo, simplemente llama al constructor <code>set()</code> sin par\u00e1metros.</p> <p>\u2757\ufe0f  **IMPORTANTE: ** <code>{}</code> NO crea un conjunto vac\u00edo, sino un diccionario vac\u00edo. Usa <code>set()</code> si quieres crear un conjunto sin elementos.</p> <p>\ud83c\udfaf NOTA: Los elementos que se pueden a\u00f1adir a un conjunto deben ser de tipo hashable. Un objeto es hashable si tiene un valor de hash que no cambia durante todo su ciclo de vida. En principio, los objetos que son instancias de clases definidas por el usuario son hashables. Tambi\u00e9n lo son la mayor\u00eda de tipos inmutables definidos por Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#211-set-vs-frozenset","title":"2.1.1. set vs frozenset","text":"<p>En realidad, en Python podemos crear dos clases de conjuntos: <code>set</code> y <code>frozenset</code>. La principal diferencia es que <code>set</code> es mutable, por lo que despu\u00e9s de ser creado, se pueden a\u00f1adir y/o eliminar elementos del conjunto, como veremos en secciones posteriores. Por su parte, <code>frozenset</code> es inmutable y su contenido no puede ser modificado una vez que ha sido inicializado.</p> <p>Para crear un conjunto de tipo <code>frozenset</code>, se usa el constructor de la clase <code>frozenset()</code>:</p> <pre><code>&gt;&gt;&gt; f = frozenset([3, 5, 6, 1, 5])\n&gt;&gt;&gt; f\nfrozenset({1, 3, 5, 6})\n</code></pre> <p>\ud83c\udfaf NOTA: El \u00fanico modo en Python de tener un conjunto de conjuntos es utilizando objetos de tipo frozenset como elementos del propio conjunto.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#22-como-acceder-a-los-elementos-de-un-conjunto-en-python","title":"2.2. C\u00f3mo acceder a los elementos de un conjunto en Python","text":"<p>Dado que los conjuntos son colecciones desordenadas, en ellos no se guarda la posici\u00f3n en la que son insertados los elementos como ocurre en los tipos <code>list</code> o <code>tuple</code>. Es por ello que no se puede acceder a los elementos a trav\u00e9s de un \u00edndice.</p> <p>Sin embargo, s\u00ed se puede acceder y/o recorrer todos los elementos de un conjunto usando un bucle for:</p> <pre><code>&gt;&gt;&gt; mi_conjunto = {1, 3, 2, 9, 3, 1}\n&gt;&gt;&gt; for e in mi_conjunto:\n...     print(e)\n...     \n1\n2\n3\n9\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#23-anadir-elementos-a-un-conjunto-set-en-python","title":"2.3. A\u00f1adir elementos a un conjunto (set) en Python","text":"<p>Para a\u00f1adir un elemento a un conjunto se utiliza el m\u00e9todo <code>add()</code>. Tambi\u00e9n existe el m\u00e9todo <code>update()</code>, que puede tomar como argumento una lista, tupla, string, conjunto o cualquier objeto de tipo iterable.</p> <pre><code>&gt;&gt;&gt; mi_conjunto = {1, 3, 2, 9, 3, 1}\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 9}\n\n# A\u00f1ade el elemento 7 al conjunto\n&gt;&gt;&gt; mi_conjunto.add(7)\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 7, 9}\n\n# A\u00f1ade los elementos 5, 3, 4 y 6 al conjunto\n# Los elementos repetidos no se a\u00f1aden al conjunto\n&gt;&gt;&gt; mi_conjunto.update([5, 3, 4, 6])\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 4, 5, 6, 7, 9}\n</code></pre> <p>\ud83c\udfaf NOTA: <code>add()</code> y <code>update()</code> no a\u00f1aden elementos que ya existen al conjunto.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#24-eliminar-un-elemento-de-un-conjunto-en-python","title":"2.4. Eliminar un elemento de un conjunto en Python","text":"<p>La clase <code>set</code> ofrece cuatro m\u00e9todos para eliminar elementos de un conjunto. Son: <code>discard()</code>, <code>remove()</code>, <code>pop()</code> y <code>clear()</code>. A continuaci\u00f3n se explica qu\u00e9 hace cada uno de ellos.</p> <ul> <li><code>discard(elemento)</code> y <code>remove(elemento)</code> eliminan <code>elemento</code> del conjunto. La \u00fanica diferencia es que si <code>elemento</code> no existe, <code>discard()</code> no hace nada mientras que <code>remove()</code> lanza la excepci\u00f3n <code>KeyError</code>. </li> <li><code>pop()</code> es un tanto peculiar. Este m\u00e9todo devuelve un elemento aleatorio del conjunto y lo elimina del mismo. Si el conjunto est\u00e1 vac\u00edo, lanza la excepci\u00f3n <code>KeyError</code>.      </li> <li><code>clear()</code> elimina todos los elementos contenidos en el conjunto.      </li> </ul> <pre><code>&gt;&gt;&gt; mi_conjunto = {1, 3, 2, 9, 3, 1, 6, 4, 5}\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 4, 5, 6, 9}\n\n# Elimina el elemento 1 con remove()\n&gt;&gt;&gt; mi_conjunto.remove(1)\n&gt;&gt;&gt; mi_conjunto\n{2, 3, 4, 5, 6, 9}\n\n# Elimina el elemento 4 con discard()\n&gt;&gt;&gt; mi_conjunto.discard(4)\n&gt;&gt;&gt; mi_conjunto\n{2, 3, 5, 6, 9}\n\n# Trata de eliminar el elemento 7 (no existe) con remove()\n# Lanza la excepci\u00f3n KeyError\n&gt;&gt;&gt; mi_conjunto.remove(7)\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 7\n\n# Trata de eliminar el elemento 7 (no existe) con discard()\n# No hace nada\n&gt;&gt;&gt; mi_conjunto.discard(7)\n&gt;&gt;&gt; mi_conjunto\n{2, 3, 5, 6, 9}\n\n# Obtiene y elimina un elemento aleatorio con pop()\n&gt;&gt;&gt; mi_conjunto.pop()\n2\n&gt;&gt;&gt; mi_conjunto\n{3, 5, 6, 9}\n\n# Elimina todos los elementos del conjunto\n&gt;&gt;&gt; mi_conjunto.clear()\n&gt;&gt;&gt; mi_conjunto\nset()\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#3-patrones-de-uso-de-conjuntos-en-python","title":"3. Patrones de uso de conjuntos en Python","text":"<p>Veamos algunos ejemplos de uso de conjuntos en Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#31-numero-de-elementos-len-de-un-conjunto","title":"3.1. N\u00famero de elementos (len) de un conjunto","text":"<p>Como con cualquier otra colecci\u00f3n, puedes usar la funci\u00f3n <code>len()</code> para obtener el n\u00famero de elementos contenidos en un conjunto:</p> <pre><code>&gt;&gt;&gt; mi_conjunto = set([1, 2, 5, 3, 1, 5])\n&gt;&gt;&gt; len(mi_conjunto)\n4\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#32-como-saber-si-un-elemento-esta-en-un-conjunto","title":"3.2. C\u00f3mo saber si un elemento est\u00e1 en un conjunto","text":"<p>Con los conjuntos tambi\u00e9n se puede usar el operador de pertenencia <code>in</code> para comprobar si un elemento est\u00e1 contenido, o no, en un conjunto:</p> <pre><code>&gt;&gt;&gt; mi_conjunto = set([1, 2, 5, 3, 1, 5])\n&gt;&gt;&gt; print(1 in mi_conjunto)\nTrue\n\n&gt;&gt;&gt; print(6 in mi_conjunto)\nFalse\n\n&gt;&gt;&gt; print(2 not in mi_conjunto)\nFalse\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#33-operaciones-sobre-conjuntos-en-python-set-operations","title":"3.3. Operaciones sobre conjuntos en Python (set operations)","text":"<p>Uno de los principales usos del tipo <code>set</code> es utilizarlo en operaciones del \u00e1lgebra de conjuntos: uni\u00f3n, intersecci\u00f3n, diferencia, diferencia sim\u00e9trica, \u2026</p> <p>A continuaci\u00f3n veremos c\u00f3mo llevar a cabo estas operaciones en Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#331-union-de-conjuntos-en-python","title":"3.3.1. Uni\u00f3n de conjuntos en Python","text":"<p>La uni\u00f3n de dos conjuntos <code>A</code> y <code>B</code> es el conjunto <code>A \u222a B</code> que contiene todos los elementos de <code>A</code> y de <code>B</code>.</p> <p>En Python se utiliza el operador <code>|</code> para realizar la uni\u00f3n de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\n&gt;&gt;&gt; a | b\n{1, 2, 3, 4, 6, 8}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#332-interseccion-de-conjuntos-en-python","title":"3.3.2. Intersecci\u00f3n de conjuntos en Python","text":"<p>La intersecci\u00f3n de dos conjuntos <code>A</code> y <code>B</code> es el conjunto<code>A \u2229 B</code> que contiene todos los elementos comunes de <code>A</code> y de <code>B</code>.</p> <p>En Python se utiliza el operador <code>&amp;</code> para realizar la intersecci\u00f3n de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\n&gt;&gt;&gt; a &amp; b\n{2, 4}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#333-diferencia-de-conjuntos-en-python","title":"3.3.3. Diferencia de conjuntos en Python","text":"<p>La diferencia entre dos conjuntos <code>A</code> y <code>B</code> es el conjunto <code>A \\ B</code> que contiene todos los elementos de <code>A</code> que no pertenecen a <code>B</code>.</p> <p>En Python se utiliza el operador <code>-</code> para realizar la diferencia de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\n&gt;&gt;&gt; a - b\n{1, 3}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#334-diferencia-simetrica-de-conjuntos-en-python","title":"3.3.4. Diferencia sim\u00e9trica de conjuntos en Python","text":"<p>La diferencia sim\u00e9trica entre dos conjuntos <code>A</code> y <code>B</code> es el conjunto que contiene los elementos de <code>A</code> y <code>B</code> que no son comunes.</p> <p>En Python se utiliza el operador <code>^</code> para realizar la diferencia sim\u00e9trica de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\na ^ b\n{1, 3, 6, 8}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#334-inclusion-de-conjuntos-en-python","title":"3.3.4. Inclusi\u00f3n de conjuntos en Python","text":"<p>Dado un conjunto <code>A</code>, subcolecci\u00f3n del conjunto <code>B</code> o igual a este, sus elementos son un subconjunto de <code>B</code>. Es decir, <code>A</code> es un subconjunto de <code>B</code> y <code>B</code> es un superconjunto de <code>A</code>.</p> <p>En Python se utiliza el operador <code>&lt;=</code> para comprobar si un conjunto <code>A</code> es subconjunto de <code>B</code> y el operador <code>&gt;=</code> para comprobar si un conjunto <code>A</code> es superconjunto de <code>B</code>.</p> <pre><code>&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2, 3, 4}\n&gt;&gt;&gt; a &lt;= b\nTrue\n\n&gt;&gt;&gt; a &gt;= b\nFalse\n\n&gt;&gt;&gt; b &gt;= a\nTrue\n\n&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2}\n&gt;&gt;&gt; a &lt; b  # Ojo al operador &lt; sin el =\nFalse\n\n&gt;&gt;&gt; a &lt;= b\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#335-conjuntos-disjuntos-en-python","title":"3.3.5. Conjuntos disjuntos en Python","text":"<p>Dos conjuntos <code>A</code> y <code>B</code> son disjuntos si no tienen elementos en com\u00fan, es decir, la intersecci\u00f3n de <code>A</code> y <code>B</code> es el conjunto vac\u00edo.</p> <p>En Python se utiliza el m\u00e9todo <code>isdisjoint()</code> de la clase <code>set</code> para comprobar si un conjunto es disjunto de otro.</p> <pre><code>&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2, 3, 4}\n&gt;&gt;&gt; a.isdisjoint(b)\nFalse\n\n&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {3, 4}\n&gt;&gt;&gt; a.isdisjoint(b)\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#336-igualdad-de-conjuntos-en-python","title":"3.3.6. Igualdad de conjuntos en Python","text":"<p>En Python dos conjuntos son iguales si y solo si todos los elementos de un conjunto est\u00e1n contenidos en el otro. Esto quiere decir que cada uno es un subconjunto del otro.</p> <pre><code>&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2}\n&gt;&gt;&gt; id(a)\n4475070656\n&gt;&gt;&gt; id(b)\n4475072096\n&gt;&gt;&gt; a == b\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#4-metodos-de-la-clase-set-en-python","title":"4. M\u00e9todos de la clase set en Python","text":"<p>Se finaliza, listando los m\u00e9todos principales de la clase <code>set</code> en Python:</p> M\u00e9todo Descripci\u00f3n <code>add(e)</code> A\u00f1ade un elemento al conjunto. <code>clear()</code> Elimina todos los elementos del conjunto. <code>copy()</code> Devuelve una copia superficial del conjunto. <code>difference(iterable)</code> Devuelve la diferencia del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>difference_update(iterable)</code> Actualiza el conjunto tras realizar la diferencia con el<code>iterable</code>. <code>discard(e)</code> Elimina, si existe, el elemento del conjunto. <code>intersection(iterable)</code> Devuelve la intersecci\u00f3n del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>intersection_update(iterable)</code> Actualiza el conjunto tras realizar la intersecci\u00f3n con el<code>iterable</code>. <code>isdisjoint(iterable)</code> Devuelve<code>True</code> si dos conjuntos son disjuntos. <code>issubset(iterable)</code> Devuelve<code>True</code> si el conjunto es subconjunto del <code>iterable</code>. <code>issuperset(iterable)</code> Devuelve<code>True</code> si el conjunto es superconjunto del <code>iterable</code>. <code>pop()</code> Obtiene y elimina un elemento de forma aleatoria del conjunto. <code>remove(e)</code> Elimina el elemento del conjunto. Si no existe lanza un error. <code>symmetric_difference(iterable)</code> Devuelve la diferencia sim\u00e9trica del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>symmetric_difference_update(iterable)</code> Actualiza el conjunto tras realizar la diferencia sim\u00e9trica con el<code>iterable</code>. <code>union(iterable)</code> Devuelve la uni\u00f3n del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>update(iterable)</code> Actualiza el conjunto tras realizar la uni\u00f3n con el<code>iterable</code>. <p>\u2757\ufe0f NOTA: Los operadores <code>|</code>, <code>&amp;</code>, \u2026 toman siempre como operandos objetos de tipo <code>set</code>. Sin embargo, sus respectivas versiones como m\u00e9todos <code>union()</code>, <code>intersection()</code>, \u2026 toman como argumentos un iterable (lista,  tupla, conjunto, etc.).</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#fuente","title":"Fuente","text":"<ul> <li>P\u00e1gina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> <li>Operaciones con conjuntos</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/","title":"UD 3 - 3.5 Funciones","text":"","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#35-modularizar-un-programa","title":"3.5. Modularizar un programa.","text":"<p>La modularizaci\u00f3n de un programa es una t\u00e9cnica de programaci\u00f3n que consiste en dividir un programa en partes m\u00e1s peque\u00f1as y manejables. Cada una de estas partes se denomina m\u00f3dulo y se encarga de realizar una tarea espec\u00edfica. La modularizaci\u00f3n de un programa tiene varias ventajas:    </p> <ul> <li>Facilita la comprensi\u00f3n del programa.     </li> <li>Facilita la depuraci\u00f3n del programa.    </li> <li>Facilita la reutilizaci\u00f3n del c\u00f3digo.   </li> <li>Facilita la colaboraci\u00f3n entre programadores.    </li> <li>Facilita la realizaci\u00f3n de pruebas unitarias y otro tipo.    </li> </ul> <p>Las funciones son una de las herramientas que nos permiten modularizar un programa.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#1-modularizar-un-programa-con-funciones","title":"1. Modularizar un programa con funciones","text":"<p>Dise\u00f1ar un programa desde cero y dividirlo en funciones requiere estrategias claras. Aqu\u00ed tienes una gu\u00eda pr\u00e1ctica para planificar y dividir un programa en funciones desde el principio</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#11-comprende-el-problema","title":"1.1. Comprende el problema","text":"<p>Antes de escribir c\u00f3digo, aseg\u00farate de entender completamente el problema que est\u00e1s resolviendo.</p> <ul> <li>Lee el enunciado del problema con atenci\u00f3n.   </li> <li>Identifica lo que el programa debe hacer: entradas, salidas y pasos intermedios.    </li> <li>Haz preguntas si algo no est\u00e1 claro.    </li> </ul> <p>Ejemplo: Dise\u00f1a un programa que gestione una lista de tareas pendientes. El usuario debe poder:    </p> <ol> <li>A\u00f1adir tareas.    </li> <li>Ver todas las tareas.   </li> <li>Marcar tareas como completadas.    </li> </ol> <p>Preguntas clave:    </p> <ul> <li>\u00bfC\u00f3mo se almacenar\u00e1n las tareas?    </li> <li>\u00bfSe debe guardar esta lista entre ejecuciones?    </li> <li>\u00bfQu\u00e9 ocurre si el usuario intenta completar una tarea que no existe?    </li> </ul>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#12-divide-el-problema-en-partes-divide-y-venceras","title":"1.2. Divide el problema en partes (Divide y vencer\u00e1s)","text":"<p>Divide el problema principal en subtareas o pasos m\u00e1s peque\u00f1os. Cada subtarea puede convertirse en una funci\u00f3n.</p> <p>Ejemplo:  Para el problema de la lista de tareas, las subtareas podr\u00edan ser:    </p> <ol> <li>Mostrar un men\u00fa con opciones.    </li> <li>A\u00f1adir una tarea a la lista.   </li> <li>Mostrar la lista de tareas.   </li> <li>Marcar una tarea como completada.    </li> </ol>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#13-define-la-estructura-del-programa","title":"1.3. Define la estructura del programa","text":"<p>Crea un esquema b\u00e1sico que describa qu\u00e9 hace cada parte del programa. Este esquema es como un \"borrador\" del programa.</p> <p>Ejemplo: <pre><code>1. Mostrar el men\u00fa de opciones.\n2. Seg\u00fan la opci\u00f3n elegida:\n   a. A\u00f1adir una tarea.\n   b. Mostrar todas las tareas.\n   c. Marcar una tarea como completada.\n   d. Salir del programa.\n</code></pre></p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#14-escribe-pseudocodigo","title":"1.4. Escribe pseudoc\u00f3digo","text":"<p>El pseudoc\u00f3digo te ayuda a planificar sin preocuparte por los detalles de la sintaxis.</p> <p>Ejemplo: <pre><code>Mientras el programa no haya terminado:\n    Mostrar men\u00fa\n    Leer opci\u00f3n del usuario\n    Si la opci\u00f3n es \"A\u00f1adir tarea\":\n        Pedir la descripci\u00f3n de la tarea\n        A\u00f1adir tarea a la lista\n    Si la opci\u00f3n es \"Ver tareas\":\n        Mostrar todas las tareas\n    Si la opci\u00f3n es \"Completar tarea\":\n        Pedir n\u00famero de la tarea\n        Marcar tarea como completada\n    Si la opci\u00f3n es \"Salir\":\n        Terminar el programa\n</code></pre></p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#15-identifica-las-funciones-necesarias","title":"1.5. Identifica las funciones necesarias","text":"<p>Para cada paso del pseudoc\u00f3digo, identifica qu\u00e9 funciones ser\u00e1n necesarias. Preg\u00fantate:    </p> <ul> <li>\u00bfQu\u00e9 tareas son independientes? </li> <li>\u00bfQu\u00e9 c\u00f3digo se repite? </li> <li>\u00bfPuedo separar la entrada, procesamiento y salida? </li> <li>\u00bfCada funci\u00f3n tiene una responsabilidad clara? </li> </ul> <p>Y para cada funci\u00f3n:   * \u00bfQu\u00e9 tarea realiza esta funci\u00f3n?  * \u00bfQu\u00e9 datos necesita esta funci\u00f3n? (par\u00e1metros)   * \u00bfQu\u00e9 devuelve esta funci\u00f3n? (resultado)      </p> <p>Ejemplo: Funciones necesarias inicialmente:</p> <ol> <li><code>mostrar_menu()</code>: Muestra el men\u00fa de opciones al usuario.    </li> <li><code>opcion_a\u00f1adir_tarea(lista_tareas)</code>: A\u00f1ade una tarea a la lista.   </li> <li><code>opcion_mostrar_tareas(lista_tareas)</code>: Muestra todas las tareas.    </li> <li><code>opcion_completar_tarea(lista_tareas)</code>: Marca una tarea como completada.   </li> </ol> <p>En un an\u00e1lisis posterior puedes analizar que hace cada funci\u00f3n para separar las funciones que interactuan con el usuario de las que realizan operaciones sobre los datos.</p> <p>Funciones auxilares de entrada y salida, interact\u00faan con el usuario.    </p> <ol> <li><code>mostrar_menu</code> </li> <li><code>pedir_opcion</code> </li> <li><code>pedir_descripcion</code> </li> <li><code>pedir_indice</code> </li> <li><code>mostrar_tareas</code> </li> <li><code>mostrar_mensaje</code> </li> </ol> <p>Funciones que realizan operaciones sobre los datos.    </p> <ol> <li><code>a\u00f1adir_tarea</code> </li> <li><code>eliminar_tarea</code> </li> <li><code>completar_tarea</code> </li> <li><code>listar_tareas</code> </li> </ol> <p>Es posible que tengas que realizar varias iteraciones para identificar todas las funciones necesarias.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#16-esquema-de-funciones","title":"1.6. Esquema de funciones","text":"<p>Organiza las funciones seg\u00fan su prop\u00f3sito:    </p> <ol> <li>Funciones principales: Coordinan el flujo general del programa.     </li> <li>Funciones auxiliares: Realizan tareas espec\u00edficas dentro de las funciones principales.     </li> </ol> <p>Ejemplo: </p> <ol> <li>Las funciones opcion_a\u00f1adir_tarea, opcion_mostrar_tareas, opcion_completar_tarea y opcion_mostrar_tareas son funciones principales, gu\u00eda el flujo del programa.    </li> <li>Las funciones a\u00f1adir_tarea, eliminar_tarea, completar_tarea y listar_tareas son funciones auxiliares, son funciones auxiliares que realizan operaciones espec\u00edficas sobre los datos.     </li> <li>Las funciones mostrar_menu, pedir_opcion, pedir_descripcion, pedir_indice, mostrar_tareas y mostrar_mensaje son funciones auxilares de entrada y salida, interact\u00faan con el usuario.     </li> </ol>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#17-implementa-una-funcion-a-la-vez","title":"1.7. Implementa una funci\u00f3n a la vez","text":"<p>Empieza escribiendo las funciones m\u00e1s simples y ve construyendo desde ah\u00ed. Esto ayuda a evitar errores grandes y facilita las pruebas.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#18-ejemplo-completo-lista-de-tareas","title":"1.8. Ejemplo completo: Lista de tareas","text":"<p>Estructura b\u00e1sica </p> <ol> <li>Operaciones sobre la estructura de datos: Funciones que trabajan exclusivamente con los datos (a\u00f1adir, eliminar, cambiar el estado de una tarea, etc.).     </li> <li>Entrada y salida: Funciones que se encargan de interactuar con el usuario (mostrar men\u00fas, recibir entradas y mostrar resultados).     </li> <li>Controlador: Coordina las operaciones entre la E/S y las funciones que manipulan los datos.    </li> </ol> <p>C\u00f3digo estructurado</p> <pre><code># --- Operaciones sobre la estructura de datos ---\ndef a\u00f1adir_tarea(lista_tareas, descripcion):\n    \"\"\"\n    A\u00f1ade una tarea a la lista de tareas.\n    \"\"\"\n    lista_tareas.append({\"tarea\": descripcion, \"completada\": False})\n\ndef eliminar_tarea(lista_tareas, indice):\n    \"\"\"\n    Elimina una tarea de la lista por su \u00edndice.\n    \"\"\"\n    if 0 &lt;= indice &lt; len(lista_tareas):\n        lista_tareas.pop(indice)\n        return True\n    return False\n\ndef completar_tarea(lista_tareas, indice):\n    \"\"\"\n    Cambia el estado de una tarea a 'completada'.\n    \"\"\"\n    if 0 &lt;= indice &lt; len(lista_tareas):\n        lista_tareas[indice][\"completada\"] = True\n        return True\n    return False\n\ndef listar_tareas(lista_tareas):\n    \"\"\"\n    Devuelve una lista formateada de las tareas con su estado.\n    \"\"\"\n    return [\n        f\"{i + 1}. {tarea['tarea']} [{'Completada' if tarea['completada'] else 'Pendiente'}]\"\n        for i, tarea in enumerate(lista_tareas)\n    ]\n\n# --- Funciones de entrada y salida ---\ndef mostrar_menu():\n    \"\"\"\n    Muestra el men\u00fa de opciones al usuario.\n    \"\"\"\n    print(\"\\nOpciones:\")\n    print(\"1. A\u00f1adir tarea\")\n    print(\"2. Ver tareas\")\n    print(\"3. Completar tarea\")\n    print(\"4. Eliminar tarea\")\n    print(\"5. Salir\")\n\ndef pedir_opcion():\n    \"\"\"\n    Solicita al usuario una opci\u00f3n del men\u00fa.\n    \"\"\"\n    try:\n        return int(input(\"Elige una opci\u00f3n: \"))\n    except ValueError:\n        return -1\n\ndef pedir_descripcion():\n    \"\"\"\n    Solicita al usuario una descripci\u00f3n para una nueva tarea.\n    \"\"\"\n    return input(\"Escribe la nueva tarea: \")\n\ndef pedir_indice():\n    \"\"\"\n    Solicita al usuario el \u00edndice de una tarea.\n    \"\"\"\n    try:\n        return int(input(\"Introduce el n\u00famero de la tarea: \")) - 1\n    except ValueError:\n        return -1\n\ndef mostrar_tareas(lista_tareas):\n    \"\"\"\n    Muestra la lista de tareas en la consola.\n    \"\"\"\n    print(\"\\nLista de tareas:\")\n    if not lista_tareas:\n        print(\"No hay tareas pendientes.\")\n    else:\n        for tarea in listar_tareas(lista_tareas):\n            print(tarea)\n\ndef mostrar_mensaje(mensaje):\n    \"\"\"\n    Muestra un mensaje al usuario.\n    \"\"\"\n    print(mensaje)\n\ndef opcion_a\u00f1adir_tarea(lista_tareas):\n    \"\"\"\n    Solicita una descripci\u00f3n y a\u00f1ade una tarea a la lista.\n    \"\"\"\n    descripcion = pedir_descripcion()\n    a\u00f1adir_tarea(lista_tareas, descripcion)\n    mostrar_mensaje(\"Tarea a\u00f1adida con \u00e9xito.\")\n\n\ndef opcion_completar_tarea(lista_tareas):\n    \"\"\"\n    Solicita un \u00edndice y marca una tarea como completada.\n    \"\"\"\n    mostrar_tareas(lista_tareas)\n    indice = pedir_indice()\n    if completar_tarea(lista_tareas, indice):\n      mostrar_mensaje(\"Tarea completada con \u00e9xito.\")\n    else:\n      mostrar_mensaje(\"\u00cdndice inv\u00e1lido. Int\u00e9ntalo de nuevo.\")\n\ndef opcion_mostrar_tareas(lista_tareas):\n    \"\"\"\n    Muestra la lista de tareas.\n    \"\"\"\n    mostrar_tareas(lista_tareas)\n\n\n\ndef opcion_eliminar_tarea(lista_tareas):\n    \"\"\"\n    Solicita un \u00edndice y elimina una tarea de la lista.\n    \"\"\"\n    mostrar_tareas(lista_tareas)\n    indice = pedir_indice()\n    if eliminar_tarea(lista_tareas, indice):\n      mostrar_mensaje(\"Tarea eliminada con \u00e9xito.\")\n    else:\n      mostrar_mensaje(\"\u00cdndice inv\u00e1lido. Int\u00e9ntalo de nuevo.\")\n\n\n# --- Controlador principal ---\ndef programa_principal():\n    \"\"\"\n    Funci\u00f3n principal que coordina el flujo del programa.\n    \"\"\"\n    lista_tareas = []\n    while True:\n        mostrar_menu()\n        opcion = pedir_opcion()\n\n        if opcion == 1:  # A\u00f1adir tarea\n            opcion_a\u00f1adir_tarea(lista_tareas)          \n\n        elif opcion == 2:  # Ver tareas\n            opcion_mostrar_tareas(lista_tareas)\n\n        elif opcion == 3:  # Completar tarea\n            opcion_completar_tarea(lista_tareas)\n\n        elif opcion == 4:  # Eliminar tarea\n            opcion_eliminar_tarea(lista_tareas)\n\n        elif opcion == 5:  # Salir\n            mostrar_mensaje(\"Saliendo del programa. \u00a1Adi\u00f3s!\")\n\n        else:\n            mostrar_mensaje(\"Opci\u00f3n no v\u00e1lida. Int\u00e9ntalo de nuevo.\")\n\n# --- Ejecutar el programa ---\nprograma_principal()\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#181-puntos-clave-de-la-solucion","title":"1.8.1. Puntos clave de la soluci\u00f3n","text":"<ol> <li> <p>Separaci\u00f3n de responsabilidades:    </p> <ul> <li>Operaciones sobre datos: Son funciones puras que no dependen de la interacci\u00f3n con el usuario. Ejemplo: <code>a\u00f1adir_tarea</code>, <code>eliminar_tarea</code>, <code>completar_tarea</code>.    </li> <li>Entrada y salida: Se encargan exclusivamente de interactuar con el usuario. Ejemplo: <code>mostrar_menu</code>, <code>mostrar_tareas</code>, <code>pedir_opcion</code>.</li> <li>Controlador principal: Coordina la l\u00f3gica del programa conectando la E/S con las operaciones sobre los datos: <code>opci\u00f3n_a\u00f1adir_tarea</code>, <code>opci\u00f3n_mostrar_tareas</code>, <code>opci\u00f3n_completar_tarea</code>, <code>opci\u00f3n_eliminar_tarea</code>.</li> </ul> </li> <li> <p>Reutilizaci\u00f3n de c\u00f3digo:    </p> <ul> <li>Las funciones de entrada y salida pueden usarse en otros contextos. Por ejemplo, <code>opci\u00f3n_mostrar_tareas</code> podr\u00eda conectarse a una interfaz gr\u00e1fica en lugar de imprimir en consola.</li> </ul> </li> <li> <p>Facilidad para pruebas:    </p> <ul> <li>Las operaciones sobre datos son independientes de la E/S, lo que facilita probarlas unitariamente.    </li> </ul> </li> </ol>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#19-estrategias-adicionales","title":"1.9. Estrategias adicionales","text":"","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#191-usa-diagramas-de-flujo","title":"1.9.1. Usa diagramas de flujo","text":"<p>Dibujar un diagrama de flujo puede ayudarte a visualizar c\u00f3mo fluye el programa entre las funciones.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#192-empieza-simple","title":"1.9.2. Empieza simple","text":"<p>Crea primero una versi\u00f3n b\u00e1sica del programa. Luego, a\u00f1ade funciones y complejidad de manera incremental.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#193-de-arriba-a-abajo-top-down","title":"1.9.3. De arriba a abajo: top-down","text":"<p>Empieza por la funci\u00f3n principal y luego desglosa en funciones m\u00e1s peque\u00f1as. Esto te ayuda a mantener el enfoque en el objetivo principal del programa. </p> <p> </p> Desglose top down","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#194-de-abajo-a-arriba-bottom-up","title":"1.9.4. De abajo a arriba: bottom-up","text":"<p>Si tienes problemas para dividir el programa en funciones, empieza por las funciones m\u00e1s peque\u00f1as y luego agr\u00fapalas en funciones m\u00e1s grandes. </p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#195-piensa-en-terminos-de-entrada-proceso-salida","title":"1.9.5. Piensa en t\u00e9rminos de \"entrada-proceso-salida\"","text":"<p>Para cada funci\u00f3n: - Entrada: \u00bfQu\u00e9 datos necesita? - Proceso: \u00bfQu\u00e9 hace con esos datos? - Salida: \u00bfQu\u00e9 resultado produce?</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#2-funciones","title":"2. Funciones","text":"<p>Las funciones en cualquier lenguaje de programaci\u00f3n, son estructuras esenciales de c\u00f3digo. Una funci\u00f3n es un grupo de instrucciones que constituyen una unidad l\u00f3gica del programa y resuelven un problema muy concreto.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#21-que-son-las-funciones-en-python","title":"2.1. Qu\u00e9 son las funciones en Python","text":"<p>Las funciones en Python constituyen unidades l\u00f3gicas de un programa y tienen un doble objetivo:</p> <ul> <li>Dividir y organizar el c\u00f3digo en partes m\u00e1s sencillas.</li> <li>Encapsular el c\u00f3digo que se repite a lo largo de un programa para ser reutilizado.</li> </ul> <p>Python ya define de serie un conjunto de funciones que podemos utilizar directamente en nuestras aplicaciones. Algunas de ellas ya las has utilizado. Por ejemplo, la funci\u00f3n <code>len()</code>, que obtiene el n\u00famero de elementos de un objeto contenedor como una lista, una tupla, un diccionario o un conjunto. Tambi\u00e9n hemos visto la funci\u00f3n <code>print()</code>, que muestra por consola un texto.</p> <p>Puedes encontrar una lista de funciones predefinidas en Python aqu\u00ed</p> <p>Sin embargo, t\u00fa como programador, puedes definir tus propias funciones para estructurar el c\u00f3digo de manera que sea m\u00e1s legible y para reutilizar aquellas partes que se repiten a lo largo de una aplicaci\u00f3n. Esto es una tarea fundamental a medida que va creciendo el n\u00famero de l\u00edneas de un programa.</p> <p>La idea la puedes observar en la siguiente imagen:</p> <p> </p> Funciones <p>En principio, un programa es una secuencia ordenada de instrucciones que se ejecutan una a continuaci\u00f3n de la otra. Sin embargo, cuando se utilizan funciones, puedes agrupar parte de esas instrucciones como una unidad m\u00e1s peque\u00f1a que ejecuta dichas instrucciones y suele devolver un resultado.</p> <p>En el siguiente apartado te muestro c\u00f3mo definir una funci\u00f3n en Python.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#22-como-definir-una-funcion-en-python","title":"2.2. C\u00f3mo definir una funci\u00f3n en Python","text":"<p>La siguiente imagen muestra el esquema de una funci\u00f3n en Python:</p> <p> </p> Esquema de una funci\u00f3n <p>Para definir una funci\u00f3n en Python:</p> <ul> <li>Se utiliza la palabra reservada <code>def</code>.</li> <li>A continuaci\u00f3n viene el nombre o identificador de la funci\u00f3n que es el que se utiliza para invocarla.</li> <li>Despu\u00e9s del nombre hay que incluir los par\u00e9ntesis y una lista opcional de par\u00e1metros.</li> <li>Por \u00faltimo, la cabecera o definici\u00f3n de la funci\u00f3n termina con dos puntos.</li> </ul> <p>Tras los dos puntos se incluye el cuerpo de la funci\u00f3n (con un sangrado mayor, generalmente cuatro espacios) que no es m\u00e1s que el conjunto de instrucciones que se encapsulan en dicha funci\u00f3n y que le dan significado.</p> <p>En \u00faltimo lugar y de manera opcional, se a\u00f1ade la instrucci\u00f3n con la palabra reservada <code>return</code> para devolver un resultado.</p> <p>\u2757NOTA: Cuando la primera instrucci\u00f3n de una funci\u00f3n es un <code>string</code> encerrado entre tres comillas simples <code>'''</code> o dobles <code>\"\"\"</code>, a dicha instrucci\u00f3n se le conoce como <code>docstring</code>. El <code>docstring</code> es una cadena que se utiliza para documentar la funci\u00f3n, es decir, indicar qu\u00e9 hace dicha funci\u00f3n.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#23-como-usar-o-llamar-a-una-funcion","title":"2.3. C\u00f3mo usar o llamar a una funci\u00f3n","text":"<p>Para usar o invocar a una funci\u00f3n, simplemente hay que escribir su nombre como si de una instrucci\u00f3n m\u00e1s se tratara. Eso s\u00ed, pasando los argumentos necesarios seg\u00fan los par\u00e1metros que defina la funci\u00f3n.</p> <p>Ve\u00e1moslo con un ejemplo. Vamos a crear una funci\u00f3n que muestra por pantalla el resultado de multiplicar un n\u00famero por cinco:</p> <pre><code>def multiplica_por_5(numero):\n    print(f'{numero} * 5 = {numero * 5}')\n\n\nprint('Comienzo del programa')\nmultiplica_por_5(7)\nprint('Siguiente')\nmultiplica_por_5(113)\nprint('Fin')\n</code></pre> <p>La funci\u00f3n <code>multiplica_por_5()</code> define un par\u00e1metro llamado numero que es el que se utiliza para multiplicar por 5. El resultado del programa anterior ser\u00eda el siguiente:</p> <pre><code>Comienzo del programa\n7 * 5 = 35\nSiguiente\n113 * 5 = 565\nFin\n</code></pre> <p>Como puedes observar, el programa comienza su ejecuci\u00f3n en la l\u00ednea 4 y va ejecutando las instrucciones una a una de manera ordenada. Cuando se encuentra el nombre de la funci\u00f3n <code>multiplica_por_5()</code>, el flujo de ejecuci\u00f3n pasa a la primera instrucci\u00f3n de la funci\u00f3n. Cuando se llega a la \u00faltima instrucci\u00f3n de la funci\u00f3n, el flujo del programa sigue por la instrucci\u00f3n que hay a continuaci\u00f3n de la llamada de la funci\u00f3n.</p> <p>\u2757IMPORTANTE: Diferencia entre par\u00e1metro y  argumento . La funci\u00f3n <code>multiplica_por_5()</code> define un par\u00e1metro llamado <code>numero</code>. Sin embargo, cuando desde el c\u00f3digo se invoca a la funci\u00f3n, por ejemplo, <code>multiplica_por_5(7)</code>, se dice que se llama a multiplica por cinco con el argumento <code>7</code>.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#24-sentencia-return","title":"2.4. Sentencia return","text":"<p>Se indicaba anteriormente que cuando acaba la \u00faltima instrucci\u00f3n de una funci\u00f3n, el flujo del programa contin\u00faa por la instrucci\u00f3n que sigue a la llamada de dicha funci\u00f3n. Hay una excepci\u00f3n: usar la sentencia <code>return</code>. <code>return</code> hace que termine la ejecuci\u00f3n de la funci\u00f3n cuando aparece y el programa contin\u00faa por su flujo normal.</p> <p>Adem\u00e1s, <code>return</code> se puede utilizar para devolver un valor.</p> <p>La sentencia <code>return</code> es opcional, puede devolver, o no, un valor y es posible que aparezca m\u00e1s de una vez dentro de una misma funci\u00f3n.</p> <p>A continuaci\u00f3n hay varios ejemplos:</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#241-return-que-no-devuelve-ningun-valor","title":"2.4.1. return que no devuelve ning\u00fan valor","text":"<p>La siguiente funci\u00f3n muestra por pantalla el cuadrado de un n\u00famero solo si este es par:</p> <pre><code>&gt;&gt;&gt; def cuadrado_de_par(numero):\n...     if not numero % 2 == 0:\n...         return\n...     else:\n...         print(numero ** 2)\n...\n&gt;&gt;&gt; cuadrado_de_par(8)\n64\n&gt;&gt;&gt; cuadrado_de_par(3)\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#242-en-python-una-funcion-siempre-devuelve-un-valor","title":"2.4.2. En Python una funci\u00f3n siempre devuelve un valor","text":"<p>Python, a diferencia de otros lenguajes de programaci\u00f3n, no tiene procedimientos. Un procedimiento ser\u00eda como una funci\u00f3n pero que no devuelve ning\u00fan valor.</p> <p>\u00bfPor qu\u00e9 no tiene procedimientos si hemos vistos ejemplos de funciones que no retornan ning\u00fan valor? Porque Python, internamente, devuelve por defecto el valor <code>None</code> cuando en una funci\u00f3n no aparece la sentencia <code>return</code> o esta no devuelve nada.</p> <pre><code>&gt;&gt;&gt; def saludo(nombre):\n...     print(f'Hola {nombre}')\n...\n&gt;&gt;&gt; print(saludo('j2logo'))\nHola j2logo\nNone\n</code></pre> <p>Como puedes ver en el ejemplo anterior, el <code>print</code> que envuelve a la funci\u00f3n <code>saludo()</code> muestra <code>None</code>.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#243-varios-return-en-una-misma-funcion","title":"2.4.3. Varios return en una misma funci\u00f3n","text":"<p>La funci\u00f3n es_par() devuelve True si un n\u00famero es par y False en caso contrario:</p> <pre><code>&gt;&gt;&gt; def es_par(numero):\n...     if numero % 2 == 0:\n...         return True\n...     else:\n...         return False\n...\n&gt;&gt;&gt; es_par(2)\nTrue\n&gt;&gt;&gt; es_par(5)\nFalse\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#244-devolver-mas-de-un-valor-con-return-en-python","title":"2.4.4. Devolver m\u00e1s de un valor con return en Python","text":"<p>En Python, es posible devolver m\u00e1s de un valor con una sola sentencia <code>return</code>. Por defecto, con <code>return</code> se puede devolver una tupla de valores. Un ejemplo ser\u00eda la siguiente funci\u00f3n <code>cuadrado_y_cubo()</code> que devuelve el cuadrado y el cubo de un n\u00famero:</p> <pre><code>&gt;&gt;&gt; def cuadrado_y_cubo(numero):\n...     return numero ** 2, numero ** 3\n...\n&gt;&gt;&gt; cuad, cubo = cuadrado_y_cubo(4)\n&gt;&gt;&gt; cuad\n16\n&gt;&gt;&gt; cubo\n64\n</code></pre> <p>Sin embargo, se puede usar otra t\u00e9cnica devolviendo los diferentes resultados/valores en una lista. Por ejemplo, la funci\u00f3n <code>tabla_del()</code> que se muestra a continuaci\u00f3n hace esto:</p> <pre><code>&gt;&gt;&gt; def tabla_del(numero):\n...     resultados = []\n...     for i in range(11):\n...         resultados.append(numero * i)\n...     return resultados\n...\n&gt;&gt;&gt; res = tabla_del(3)\n&gt;&gt;&gt; res\n[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#25-parametros-de-las-funciones-en-python","title":"2.5. Par\u00e1metros de las funciones en Python","text":"<p>Una funci\u00f3n puede definir, opcionalmente, una secuencia de par\u00e1metros con los que invocarla. \u00bfC\u00f3mo se asignan en Python los valores a los par\u00e1metros? \u00bfSe puede modificar el valor de una variable dentro de una funci\u00f3n?</p> <p>Antes de contestar a estas dos preguntas, tenemos que conocer los conceptos de programaci\u00f3n paso por valor y  paso por referencia:    </p> <ul> <li>Paso por valor: Un lenguaje de programaci\u00f3n que utiliza paso por valor de los argumentos, lo que realmente hace es copiar el valor de las variables en los respectivos par\u00e1metros. Cualquier modificaci\u00f3n del valor del par\u00e1metro, no afecta a la variable externa correspondiente.     </li> <li>Paso por referencia: Un lenguaje de programaci\u00f3n que utiliza paso por referencia, lo que realmente hace es copiar en los par\u00e1metros la direcci\u00f3n de memoria de las variables que se usan como argumento. Esto implica que realmente hagan referencia al mismo objeto/elemento y cualquier modificaci\u00f3n del valor en el par\u00e1metro afectar\u00e1 a la variable externa correspondiente.     </li> </ul> <p>Muchos lenguajes de programaci\u00f3n usan a la vez paso por valor y por referencia en funci\u00f3n del tipo de la variable. Por ejemplo, paso por valor para los tipos simples: entero, float, \u2026 y paso por referencia para los objetos.</p> <p>Sin embargo, en Python todo es un objeto. Entonces, \u00bfc\u00f3mo se pasan los argumentos en Python, por valor o por referencia? Lo que ocurre en Python realmente es que se pasa por valor la referencia del objeto  \u00bfQu\u00e9 implicaciones tiene esto? B\u00e1sicamente que si el tipo que se pasa como argumento es inmutable, cualquier modificaci\u00f3n en el valor del par\u00e1metro no afectar\u00e1 a la variable externa pero, si es mutable (como una lista o diccionario), s\u00ed se ver\u00e1 afectado por las modificaciones. As\u00ed que, \u00a1\u00a1\u00a1cuidado!!!</p> <p>Una vez aclarado este tema, a continuaci\u00f3n encontrar\u00e1s unos tutoriales muy, muy interesantes para que sigas profundizando sobre los tipos de par\u00e1metros en Python:</p> <ul> <li>Tipos de par\u00e1metros</li> <li>*args y **kwargs. N\u00famero de par\u00e1metros indefinido</li> </ul> <p>Aqu\u00ed tienes un resumen:</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#251-args-y-kwargs-en-python","title":"2.5.1.  *args y **kwargs en Python","text":"<p>En Python, <code>*args</code> y <code>**kwargs</code> permiten que una funci\u00f3n acepte un n\u00famero variable de argumentos, lo que proporciona flexibilidad en la cantidad y tipo de argumentos que se pueden pasar.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#uso-de-args","title":"Uso de *args","text":"<p><code>*args</code> permite pasar una lista de argumentos de longitud variable sin palabras clave. Por ejemplo:</p> <pre><code>def sumar(*args):\n    return sum(args)  # sum es una funci\u00f3n incorporada de Python\n\n\nprint(sumar(3, 5, 10, 15))  # Imprime 33\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#uso-de-kwargs","title":"Uso de **kwargs","text":"<p><code>**kwargs</code> permite pasar un diccionario de longitud variable de argumentos con palabras clave. Por ejemplo:</p> <pre><code>def describir_persona(**kwargs):\n    for clave, valor in kwargs.items():\n        print(f\"{clave}: {valor}\")\n\n\ndescribir_persona(nombre=\"John\", edad=25, ciudad=\"Nueva York\")  \n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#ejemplos-de-funciones-con-args-y-kwargs","title":"Ejemplos de Funciones con *args y **kwargs","text":"<p>Ejemplo de *args para sumar n\u00fameros</p> <pre><code>def sum(*args):\n    value = 0\n    for n in args:\n        value += n\n    return value\n</code></pre> <p>Ejemplo de **kwargs para filtrar datos</p> <pre><code>def filtrar(**kwargs):\n    condiciones = \" AND \".join([f\"{k}='{v}'\" for k, v in kwargs.items()])\n    return f\"SELECT * FROM clientes WHERE {condiciones};\"\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#el-orden-importa","title":"El Orden Importa","text":"<p>Cuando se usan juntos, <code>*args</code> y <code>**kwargs</code> deben usarse en ese orden espec\u00edfico en la definici\u00f3n de la funci\u00f3n.</p> <pre><code>def ejemplo(arg1, arg2, *args, **kwargs):\n    pass\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#args-y-kwargs-como-argumentos","title":"*args y **kwargs como Argumentos","text":"<p>Tambi\u00e9n puedes desempaquetar argumentos en la llamada a una funci\u00f3n:</p> <p>Usando *args para Desempaquetar una Lista o Tupla</p> <pre><code>def resultado(x, y, op):\n    if op == '+':\n        return x + y\n    elif op == '-':\n        return x - y\n\n\na = (1, 2, '+')\nprint(resultado(*a))  # Imprime 3\n</code></pre> <p>Usando **kwargs para Desempaquetar un Diccionario</p> <pre><code>a = {\"op\": \"+\", \"x\": 2, \"y\": 5}\nprint(resultado(**a))  # Imprime 7\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#resumiendo","title":"Resumiendo","text":"<ul> <li>Usa <code>*args</code> cuando quieras pasar un n\u00famero indefinido de argumentos no clave a una funci\u00f3n.</li> <li>Usa <code>**kwargs</code> cuando quieras pasar un n\u00famero indefinido de argumentos clave a una funci\u00f3n.</li> <li><code>*args</code> recoge los argumentos adicionales en una tupla.</li> <li><code>**kwargs</code> recoge los argumentos clave adicionales en un diccionario.</li> <li>Aseg\u00farate de que <code>*args</code> y <code>**kwargs</code> se usan al final y en ese orden cuando se combinan en la definici\u00f3n de la   funci\u00f3n.</li> </ul>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#252-parametros-opcionales","title":"2.5.2. Parametros opcionales","text":"<p>En Python, es posible definir par\u00e1metros opcionales en una funci\u00f3n, los cuales tienen valores predeterminados y toman esos valores si no se les pasa ning\u00fan valor espec\u00edfico al invocar la funci\u00f3n. Esto permite que una funci\u00f3n sea m\u00e1s flexible en su uso.</p> <p>Ejemplo de una funci\u00f3n con par\u00e1metros opcionales:</p> <pre><code>def saludo(nombre, mensaje=\"encantado de saludarte\"):\n    print(\"Hola {}, {}\".format(nombre, mensaje))\n</code></pre> <p>En este ejemplo, el par\u00e1metro <code>nombre</code> es obligatorio, mientras que el par\u00e1metro <code>mensaje</code> es opcional y tiene un valor predeterminado de \"encantado de saludarte\". Si no se proporciona un valor para <code>mensaje</code>, se utilizar\u00e1 el valor por defecto.</p> <p>Tambi\u00e9n es importante tener en cuenta que una vez que se define un par\u00e1metro opcional, todos los par\u00e1metros a su derecha tambi\u00e9n deben ser opcionales. Esto significa que los par\u00e1metros obligatorios no pueden seguir a los par\u00e1metros opcionales en la definici\u00f3n de la funci\u00f3n.</p> <p>Por ejemplo, la siguiente definici\u00f3n de funci\u00f3n ser\u00eda incorrecta:</p> <pre><code>def saludo(mensaje=\"encantado de saludarte\", nombre):\n    # C\u00f3digo de la funci\u00f3n\n</code></pre> <p>Este c\u00f3digo generar\u00eda un error de sintaxis porque un par\u00e1metro obligatorio (<code>nombre</code>) sigue a un par\u00e1metro opcional (<code>mensaje</code>) en la definici\u00f3n de la funci\u00f3n, lo cual no est\u00e1 permitido en Python.</p> <p>Por tanto, los par\u00e1metros opcionales son \u00fatiles para proporcionar valores predeterminados en una funci\u00f3n y permiten que esta sea m\u00e1s vers\u00e1til al manejar diferentes situaciones de llamada.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#26-ambito-y-ciclo-de-vida-de-las-variables","title":"2.6. \u00c1mbito y ciclo de vida de las variables","text":"<p>En cualquier lenguaje de programaci\u00f3n de alto nivel, toda variable est\u00e1 definida dentro de un  \u00e1mbito . Esto es, los sitios en los que la variable tiene sentido y d\u00f3nde se puede utilizar.</p> <p>Los par\u00e1metros y variables definidos dentro de una funci\u00f3n tienen un \u00e1mbito local, local a la propia funci\u00f3n. Por tanto, estos par\u00e1metros y variables no pueden ser utilizados fuera de la funci\u00f3n porque no ser\u00edan reconocidos.</p> <p>El ciclo de vida de una variable determina el tiempo en que una variable permanece en memoria. Una variable dentro de una funci\u00f3n existe en memoria durante el tiempo en que est\u00e1 ejecut\u00e1ndose dicha funci\u00f3n. Una vez que termina su ejecuci\u00f3n, sus variables y par\u00e1metros desaparecen de memoria y, por tanto, no pueden ser referenciados.</p> <pre><code>&gt;&gt;&gt; def saludo(nombre):\n...     x = 10\n...     print(f'Hola {nombre}')\n...\n&gt;&gt;&gt; saludo('Alumno')\nHola Alumno\n&gt;&gt;&gt; print(x)\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nNameError: name 'x' is not defined\n</code></pre> <p>Como ves, en el ejemplo anterior, al tratar de mostrar por pantalla el valor de la variable <code>x</code>, el int\u00e9rprete mostrar\u00e1 un error.</p> <p>El siguiente ejemplo es diferente:</p> <pre><code>&gt;&gt;&gt; def muestra_x():\n...     x = 10\n...     print(f'x vale {x}')\n...\n&gt;&gt;&gt; x = 20\n&gt;&gt;&gt; muestra_x()\nx vale 10\n&gt;&gt;&gt; print(x)\n20\n</code></pre> <p>Lo que sucede en este ejemplo es que dentro de la funci\u00f3n <code>muestra_x()</code> se est\u00e1 creando una nueva variable <code>x</code> que, precisamente, tiene el mismo nombre que la variable definida fuera de la funci\u00f3n. Por tanto, <code>x</code> dentro de la funci\u00f3n tiene el valor <code>10</code>, pero una vez que la funci\u00f3n termina, <code>x</code> hace referencia a la variable definida fuera, cuyo valor es <code>20</code>.</p> <p>Las variables definidas fuera de una funci\u00f3n tienen un \u00e1mbito conocido como global y son visibles dentro de las funciones, d\u00f3nde solo se puede consultar su valor.</p> <pre><code>&gt;&gt;&gt; y = 20\n&gt;&gt;&gt; def muestra_x():\n...     x = 10\n...     print(f'x vale {x}')\n...     print(f'y vale {y}')\n...\n&gt;&gt;&gt; muestra_x()\nx vale 10\ny vale 20\n</code></pre> <p>Para modificar dentro de una funci\u00f3n una variable definida fuera de la misma, hay que usar la palabra reservada <code>global</code> para declarar la variable dentro de la funci\u00f3n.</p> <pre><code>&gt;&gt;&gt; y = 20\n&gt;&gt;&gt; x = 3\n&gt;&gt;&gt; def muestra_x():\n...     global x\n...     x += 1\n...     print(f'x vale {x}')\n...     print(f'y vale {y}')\n...\n&gt;&gt;&gt; muestra_x()\nx vale 4\ny vale 20\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#fuente","title":"Fuente","text":"<ul> <li>P\u00e1gina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> <li>Tipos mutables e inmutables</li> </ul>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/","title":"UD 3 - 3.6 Manejo de JSON","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#36-json","title":"3.6. JSON","text":"<p>Los archivos JSON (JavaScript Object Notation) son un formato de datos ligero utilizado para intercambiar informaci\u00f3n de manera sencilla.  En Python, se gestionan principalmente con el m\u00f3dulo integrado <code>json</code>, que permite leer, escribir y manipular datos JSON de forma sencilla.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#1-conceptos-basicos-de-json","title":"1. Conceptos b\u00e1sicos de JSON","text":"<p>Un archivo JSON est\u00e1 estructurado en pares clave-valor, similar a un diccionario de Python. Puede contener objetos (estructuras anidadas) y listas.</p> <p>Ejemplo de JSON, nombre del archivo: <code>datos.json</code> : <pre><code>{\n    \"nombre\": \"Juan\",\n    \"edad\": 30,\n    \"habilidades\": [\"Python\", \"JavaScript\"],\n    \"activo\": true\n}\n</code></pre></p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#2-json-en-python","title":"2. JSON en Python","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#21-importar-el-modulo-json","title":"2.1. Importar el m\u00f3dulo <code>json</code>","text":"<p>El m\u00f3dulo <code>json</code> est\u00e1 disponible en la biblioteca est\u00e1ndar de Python, por lo que no necesitamos instalar nada adicional.</p> <pre><code>import json\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#22-leer-archivos-json","title":"2.2. Leer archivos JSON","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#221-leer-json-desde-un-archivo","title":"2.2.1. Leer JSON desde un archivo","text":"<p>Se usa <code>json.load()</code> para convertir el contenido del archivo JSON en un objeto de Python (normalmente un diccionario o una lista).</p> <p>Ejemplo:</p> <pre><code>import json\n\n# Leer el archivo JSON\nwith open(\"datos.json\", \"r\") as archivo:\n    datos = json.load(archivo)\n\n# Acceder a los datos\nprint(datos[\"nombre\"])  # Ejemplo: 'Juan'\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#222-leer-json-desde-una-cadena-de-caracteres","title":"2.2.2. Leer JSON desde una cadena de caracteres","text":"<p>Para leer JSON desde una cadena, se usa <code>json.loads()</code>.</p> <p>Ejemplo:</p> <pre><code>import json\n\ncadena_json = '{\"nombre\": \"Juan\", \"edad\": 30}'\ndatos = json.loads(cadena_json)\n\nprint(datos[\"edad\"])  # 30\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#23-escribir-archivos-json","title":"2.3. Escribir archivos JSON","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#231-escribir-json-en-un-archivo","title":"2.3.1. Escribir JSON en un archivo","text":"<p>Se usa <code>json.dump()</code> para convertir un objeto de Python a JSON y escribirlo en un archivo.</p> <p>Ejemplo:</p> <pre><code>import json\n\ndatos = {\n    \"nombre\": \"Ana\",\n    \"edad\": 25,\n    \"habilidades\": [\"HTML\", \"CSS\"],\n    \"activo\": False\n}\n\n# Escribir datos en un archivo JSON\nwith open(\"salida.json\", \"w\") as archivo:\n    json.dump(datos, archivo, indent = 4)  # `indent` para una salida legible\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#232-convertir-objetos-python-a-cadenas-json","title":"2.3.2. Convertir objetos Python a cadenas JSON","text":"<p>Para convertir datos de Python a una cadena JSON, se usa <code>json.dumps()</code>.</p> <p>Ejemplo:</p> <pre><code>import json\n\ndatos = {\"nombre\": \"Pedro\", \"edad\": 40}\n\n# Convertir a cadena JSON\ncadena_json = json.dumps(datos, indent = 2)\nprint(cadena_json)\n</code></pre> <p>Salida:</p> <pre><code>{\n  \"nombre\": \"Pedro\",\n  \"edad\": 40\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#24-manipular-datos-json","title":"2.4. Manipular datos JSON","text":"<p>Despu\u00e9s de cargar un archivo JSON como un objeto de Python (como un diccionario o lista), podemos manipular los datos con las operaciones est\u00e1ndar de Python.</p> <p>Ejemplo:</p> <pre><code>import json\n\n# Leer el archivo JSON\nwith open(\"datos.json\", \"r\") as archivo:\n    datos = json.load(archivo)\n\n# Modificar los datos\ndatos[\"edad\"] += 1\ndatos[\"habilidades\"].append(\"SQL\")\n\n# Escribir los cambios de nuevo al archivo\nwith open(\"datos.json\", \"w\") as archivo:\n    json.dump(datos, archivo, indent = 4)\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#25-manejo-de-errores","title":"2.5. Manejo de errores","text":"<p>Cuando trabajamos con JSON, es importante manejar posibles excepciones para evitar errores inesperados.</p> <p>Ejemplo:</p> <pre><code>import json\n\ntry:\n    with open(\"datos.json\", \"r\") as archivo:\n        datos = json.load(archivo)\nexcept FileNotFoundError:\n    print(\"*ERROR* Archivo no encontrado.\")\nexcept json.JSONDecodeError:\n    print(\"*ERROR* Problemas al decodificar el archivo JSON.\")\nexcept Exception as e:\n    print(f\"*ERROR* {e}.\")\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#26-ejemplo-completo","title":"2.6. Ejemplo Completo","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#261-fichero-json-inicial-datosjson","title":"2.6.1. Fichero JSON inicial (<code>datos.json</code>)","text":"<p>Este es el contenido inicial del archivo JSON que usaremos:</p> <pre><code>{\n    \"usuarios\": [\n        {\"id\": 1, \"nombre\": \"Juan\", \"edad\": 30},\n        {\"id\": 2, \"nombre\": \"Ana\", \"edad\": 25}\n    ]\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#262-operaciones-que-el-programa-de-ejemplo-va-a-realizar","title":"2.6.2. Operaciones que el programa de ejemplo va a realizar","text":"<p>El c\u00f3digo realiza las siguientes operaciones:</p> <ol> <li>Carga los datos desde el archivo JSON con manejo de excepciones.</li> <li>Actualiza la edad de un usuario.</li> <li>Inserta un nuevo usuario.</li> <li>Elimina un usuario por su <code>id</code>.</li> <li>Guarda los cambios en el archivo.</li> </ol>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#263-codigo-en-python","title":"2.6.3. C\u00f3digo en Python","text":"<p><pre><code>import json\n\n\ndef cargar_json(nombre_fichero: str) -&gt; dict:\n    \"\"\"\n    Carga el contenido de un fichero JSON.\n\n    Args:\n        nombre_fichero (str): Nombre del fichero JSON.\n\n    Returns:\n        (dict): Contenido del archivo JSON como un diccionario, o None si no se pudo cargar.\n    \"\"\"\n    try:\n        with open(nombre_fichero, \"r\") as archivo:\n            return json.load(archivo)\n\n    except FileNotFoundError:\n        print(f\"*ERROR* El archivo {nombre_fichero} no existe.\")\n\n    except json.JSONDecodeError:\n        print(\"*ERROR* El archivo JSON tiene un formato incorrecto.\")\n\n    except Exception as e:\n        print(f\"*ERROR* Problemas al cargar los datos {e}.\")\n\n    return None\n\n\ndef guardar_json(nombre_fichero: str, datos: dict):\n    \"\"\"\n    Guarda los datos en un fichero JSON.\n\n    Args:\n        nombre_fichero (str): Nombre del fichero JSON.\n        datos (dict): Datos a guardar.\n    \"\"\"\n    try:\n        with open(nombre_fichero, \"w\") as archivo:\n            json.dump(datos, archivo, indent = 4)\n\n    except PermissionError:\n        print(f\"*ERROR* No tienes permisos para escribir en el archivo '{nombre_fichero}'.\")\n\n    except TypeError as e:\n        print(f\"*ERROR* Los datos no son serializables a JSON. Detalle: {e}\")        \n\n    except Exception as e:\n        print(f\"*ERROR* Problemas al guardar los datos: {e}\")\n\n\ndef actualizar_usuario(datos: dict, id_usuario: int, nueva_edad: int):\n    \"\"\"\n    Actualiza la edad de un usuario dado su ID.\n\n    Args:\n        datos (dict): Diccionario con los datos actuales.\n        id_usuario (int): ID del usuario a actualizar.\n        nueva_edad (int): Nueva edad del usuario.\n    \"\"\"\n    for usuario in datos[\"usuarios\"]:\n        if usuario[\"id\"] == id_usuario:\n            usuario[\"edad\"] = nueva_edad\n            print(f\"Usuario con ID {id_usuario} actualizado.\")\n            return\n\n    print(f\"Usuario con ID {id_usuario} no encontrado.\")\n\n\ndef insertar_usuario(datos: dict, nuevo_usuario: dict):\n    \"\"\"\n    Inserta un nuevo usuario.\n\n    Args:\n        datos (dict): Diccionario con los datos actuales.\n        nuevo_usuario (dict): Diccionario con los datos del nuevo usuario.\n    \"\"\"\n    datos[\"usuarios\"].append(nuevo_usuario)\n    print(f\"Usuario {nuevo_usuario['nombre']} a\u00f1adido con \u00e9xito.\")\n\n\ndef eliminar_usuario(datos: dict, id_usuario: int):\n    \"\"\"\n    Elimina un usuario dado su ID.\n\n    Args:\n        datos (dict): Diccionario con los datos actuales.\n        id_usuario (int): ID del usuario a eliminar.\n    \"\"\"\n    for usuario in datos[\"usuarios\"]:\n        if usuario[\"id\"] == id_usuario:\n            datos[\"usuarios\"].remove(usuario)\n            print(f\"Usuario con ID {id_usuario} eliminado.\")\n            return\n\n    print(f\"Usuario con ID {id_usuario} no encontrado.\")\n\n\ndef main():\n    \"\"\"\n    Funci\u00f3n principal que realiza las operaciones de gesti\u00f3n de un archivo JSON.\n    \"\"\"\n    # Nombre del fichero JSON\n    nombre_fichero = \"src/otros/datos_usuarios.json\"\n\n    # 1. Cargar datos desde el fichero JSON\n    datos = cargar_json(nombre_fichero)\n\n    if datos is None:\n        # Inicializamos datos vac\u00edos si hay error\n        datos = {\"usuarios\": []}\n\n    # 2. Actualizar la edad de un usuario\n    actualizar_usuario(datos, id_usuario = 1, nueva_edad = 31)\n\n    # 3. Insertar un nuevo usuario\n    nuevo_usuario = {\"id\": 3, \"nombre\": \"Pedro\", \"edad\": 40}\n    insertar_usuario(datos, nuevo_usuario)\n\n    # 4. Eliminar un usuario\n    eliminar_usuario(datos, id_usuario = 2)\n\n    # 5. Guardar los datos de nuevo en el fichero JSON\n    guardar_json(nombre_fichero, datos)\n\n    print(\"Operaciones completadas. Archivo actualizado.\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> NOTA: Aunque estamos utilizando <code>print()</code> dentro de las funciones que tratan con las estructuras de datos, es recomendable que estas funciones devuelvan valores y que sea la funci\u00f3n principal la que se encargue de mostrar los mensajes al usuario.  Para mostrar mensaje, en un programa real se recomienda usar un sistema de registro de errores m\u00e1s robusto, como el m\u00f3dulo <code>logging</code>.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#264-explicacion-paso-a-paso","title":"2.6.4. Explicaci\u00f3n paso a paso","text":"<ol> <li>Funci\u00f3n <code>cargar_json</code>:</li> <li>Lee el contenido del archivo JSON.</li> <li> <p>Maneja excepciones como <code>FileNotFoundError</code> y <code>JSONDecodeError</code> para evitar fallos en caso de problemas con el archivo.</p> </li> <li> <p>Funci\u00f3n <code>guardar_json</code>:</p> </li> <li>Guarda el objeto Python en el archivo JSON.</li> <li> <p>Usa <code>json.dump</code> con <code>indent = 4</code> para que sea legible.</p> </li> <li> <p>Funci\u00f3n <code>actualizar_usuario</code>:</p> </li> <li>Busca un usuario por su <code>id</code> y actualiza su edad si existe.</li> <li> <p>Muestra un mensaje si no encuentra al usuario.</p> </li> <li> <p>Funci\u00f3n <code>insertar_usuario</code>:</p> </li> <li> <p>Agrega un nuevo usuario al listado.</p> </li> <li> <p>Funci\u00f3n <code>eliminar_usuario</code>:</p> </li> <li>Elimina un usuario por su <code>id</code> si existe.</li> <li> <p>Muestra un mensaje si no lo encuentra.</p> </li> <li> <p>Ejecuci\u00f3n principal:</p> </li> <li>Carga el JSON inicial.</li> <li>Realiza las operaciones necesarias (actualizar, insertar, eliminar).</li> <li>Guarda los datos actualizados en el archivo.</li> </ol>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#265-resultado-final-datosjson","title":"2.6.5. Resultado final (<code>datos.json</code>)","text":"<p>Despu\u00e9s de ejecutar el programa, el archivo <code>datos.json</code> tendr\u00e1 el siguiente contenido:</p> <pre><code>{\n    \"usuarios\": [\n        {\n            \"id\": 1,\n            \"nombre\": \"Juan\",\n            \"edad\": 31\n        },\n        {\n            \"id\": 3,\n            \"nombre\": \"Pedro\",\n            \"edad\": 40\n        }\n    ]\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#27-conclusion-json-en-python","title":"2.7. Conclusi\u00f3n - JSON en Python","text":"<ul> <li>El manejo de archivos JSON en Python es sencillo y flexible gracias al m\u00f3dulo <code>json</code>. Este permite trabajar con datos estructurados de forma legible y eficiente. </li> <li>Con las funciones <code>load</code>, <code>loads</code>, <code>dump</code> y <code>dumps</code>, podemos realizar operaciones comunes como leer, escribir y manipular datos JSON en nuestros programas. </li> </ul>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#28-opciones-avanzadas","title":"2.8. Opciones avanzadas","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#281-serializacion-de-objetos","title":"2.8.1. Serializaci\u00f3n de Objetos","text":"<p>La serializaci\u00f3n es el proceso de convertir un objeto en memoria (como una lista, diccionario, o incluso objetos m\u00e1s complejos) en un formato que pueda ser f\u00e1cilmente almacenado o transmitido, como un archivo JSON, XML o binario. </p> <p>En el contexto de JSON, serializar un objeto significa convertirlo a una cadena en formato JSON para:</p> <ol> <li> <p>Almacenamiento persistente: Guardarlo en un archivo o base de datos.</p> </li> <li> <p>Transmisi\u00f3n de datos: Enviarlo a trav\u00e9s de una red, como en una API o un servicio web.</p> </li> <li> <p>Compatibilidad: Interoperar con otros sistemas que usen JSON.</p> </li> </ol> <p>Deserializaci\u00f3n, por el contrario, es el proceso inverso: convertir la representaci\u00f3n JSON de vuelta a un objeto en memoria.</p> <p>\u00bfQu\u00e9 es un Objeto Serializable?</p> <p>Un objeto serializable es aquel que puede ser convertido directamente a un formato de almacenamiento/transmisi\u00f3n (en este caso, JSON). En Python, los objetos b\u00e1sicos como str, int, float, list, dict, bool, y None son serializables a JSON de manera directa.</p> <p>Sin embargo, no todos los tipos de objetos en Python son serializables por defecto. Por ejemplo, objetos como datetime, set, o instancias de clases personalizadas necesitan una forma espec\u00edfica de ser convertidos.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#282-serializar-objetos-personalizados","title":"2.8.2. Serializar objetos personalizados","text":"<p>El m\u00f3dulo <code>json</code> puede serializar objetos personalizados usando el argumento <code>default</code>.</p> <p>Ejemplo:</p> <pre><code>import json\nfrom datetime import datetime\n\n# Crear un objeto con un tipo no JSON serializable\ndatos = {\n    \"evento\": \"Reuni\u00f3n\",\n    \"fecha\": datetime.now()\n}\n\n# Serializador personalizado\ndef convertir(obj):\n    if isinstance(obj, datetime):\n        return obj.isoformat()  # Convertir a formato ISO 8601\n    raise TypeError(\"Tipo no serializable\")\n\n# Serializar el objeto\ncadena_json = json.dumps(datos, default = convertir, indent = 4)\nprint(cadena_json)\n</code></pre> <p>\u00bfQu\u00e9 sucede aqu\u00ed?</p> <ul> <li> <p>El diccionario <code>datos</code> contiene:</p> <ul> <li> <p>\"evento\": una cadena (str), que es serializable de manera directa.</p> </li> <li> <p>\"fecha\": un objeto de tipo datetime, que no es serializable por defecto.</p> </li> </ul> </li> <li> <p>La funci\u00f3n <code>json.dumps()</code> intenta serializar cada valor del diccionario.</p> <ul> <li> <p>Al llegar a \"fecha\", detecta que es un tipo datetime (no serializable directamente).</p> </li> <li> <p>Llama a la funci\u00f3n proporcionada en el argumento default, que es <code>convertir</code>.</p> </li> </ul> </li> <li> <p>La funci\u00f3n <code>convertir</code>:</p> <ul> <li> <p>Verifica si el objeto es de tipo datetime con <code>isinstance(obj, datetime)</code>.</p> </li> <li> <p>Si lo es, lo convierte al formato ISO 8601 utilizando el m\u00e9todo <code>isoformat()</code>.</p> </li> <li> <p>Si no puede convertir el objeto, lanza un TypeError.</p> </li> </ul> </li> <li> <p>Finalmente, <code>json.dumps()</code> crea la cadena JSON con el formato que podemos observar en Salida.</p> </li> </ul> <p>Salida:</p> <pre><code>{\n    \"evento\": \"Reuni\u00f3n\",\n    \"fecha\": \"2024-11-22T12:34:56.789123\"\n}\n</code></pre> <p>El argumento default     - Sirve como un callback que json.dumps() llama cada vez que encuentra un objeto no serializable.     - Si no proporcionas este argumento y se encuentra un tipo no serializable, json.dumps() lanza una excepci\u00f3n TypeError.     - \u00datil para convertir tipos personalizados, como datetime, set, o incluso instancias de clases.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#283-ordenar-claves","title":"2.8.3. Ordenar claves","text":"<p>Para ordenar las claves del JSON, usa el argumento <code>sort_keys</code>.</p> <p>Ejemplo:</p> <pre><code>import json\n\ndatos = {\"z\": 1, \"a\": 2, \"m\": 3}\ncadena_json = json.dumps(datos, sort_keys = True, indent = 2)\nprint(cadena_json)\n</code></pre> <p>\u00bfQu\u00e9 sucede aqu\u00ed?:     - <code>datos</code> es un diccionario que contiene:         * \"z\": 1         * \"a\": 2         * \"m\": 3     - Cuando usamos el argumento <code>sort_keys = True</code>:         * Python ordena las claves del diccionario alfab\u00e9ticamente (a, m, z) antes de convertirlo a JSON.         * Esto es \u00fatil cuando queremos garantizar un orden consistente de las claves en el JSON, especialmente en archivos o transmisiones donde el orden importa.     - El resultado es el que se muestra en Salida.     - Sin <code>sort_keys = True</code>, el orden de las claves en el JSON seguir\u00eda el orden original del diccionario.</p> <p>Salida:</p> <pre><code>{\n  \"a\": 2,\n  \"m\": 3,\n  \"z\": 1\n}\n</code></pre> <p>El argumento sort_keys     - No afecta la estructura o contenido del JSON, solo su presentaci\u00f3n.     - Es puramente est\u00e9tico o pr\u00e1ctico, por ejemplo, para facilitar la lectura o las comparaciones en pruebas automatizadas.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#284-conclusion-opciones-avanzadas","title":"2.8.4. Conclusi\u00f3n - Opciones avanzadas","text":"<p>La serializaci\u00f3n personalizada y la ordenaci\u00f3n de claves son caracter\u00edsticas avanzadas pero muy \u00fatiles del m\u00f3dulo json. Permiten:     1.  Adaptabilidad: Serializar tipos personalizados como datetime, o incluso tus propias clases.     2.  Consistencia: Ordenar las claves del JSON para garantizar un formato est\u00e1ndar, \u00fatil en pruebas, depuraci\u00f3n o contratos API.     3.  Flexibilidad: Personalizar la salida del JSON para que cumpla con los requisitos espec\u00edficos de tu aplicaci\u00f3n.</p> <p>Al dominar estas t\u00e9cnicas, podemos aprovechar al m\u00e1ximo el m\u00f3dulo json en proyectos de cualquier complejidad.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#3-json-en-kotlin","title":"3. JSON en Kotlin","text":"<p>El formato JSON en Kotlin es similar al de Python: se utiliza para representar pares clave-valor y listas. Es compatible con las estructuras de datos de Kotlin, como <code>Map</code> y <code>List</code>.</p> <p>En Kotlin, estos datos se pueden mapear a clases de datos (<code>data class</code>) para trabajar con ellos de forma estructurada.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#31-importar-y-configurar-gson","title":"3.1. Importar y configurar Gson","text":"<p>Kotlin no tiene soporte nativo para JSON, pero librer\u00edas como Gson permiten manejarlo f\u00e1cilmente.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#311-configuracion-del-proyecto","title":"3.1.1. Configuraci\u00f3n del proyecto","text":"<ol> <li>A\u00f1ade la dependencia de Gson al archivo <code>build.gradle.kts</code>:</li> </ol> <pre><code>dependencies {\n    implementation(\"com.google.code.gson:gson:2.8.9\")\n}\n</code></pre> <ol> <li>Importa la librer\u00eda Gson en tu c\u00f3digo:</li> </ol> <pre><code>import com.google.gson.Gson\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#32-leer-archivos-json","title":"3.2. Leer archivos JSON","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#321-leer-json-desde-un-archivo","title":"3.2.1. Leer JSON desde un archivo","text":"<p>Usamos la clase <code>File</code> de Kotlin para leer el archivo como texto y luego <code>Gson</code> para convertirlo en objetos de Kotlin.</p> <p>Ejemplo:</p> <pre><code>import com.google.gson.Gson\nimport java.io.File\n\ndata class Usuario(val id: Int, val nombre: String, var edad: Int)\ndata class Datos(val usuarios: MutableList&lt;Usuario&gt;)\n\nfun cargarJson(nombreFichero: String): Datos? {\n    return try {\n        val json = File(nombreFichero).readText()\n        Gson().fromJson(json, Datos::class.java)\n    } catch (e: Exception) {\n        println(\"Error al cargar el archivo: ${e.message}\")\n        null\n    }\n}\n</code></pre> <p>Este c\u00f3digo: - Lee el archivo JSON como texto. - Usa <code>Gson().fromJson()</code> para convertir el texto JSON en un objeto <code>Datos</code> (con una lista de <code>Usuario</code>).</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#322-leer-json-desde-una-cadena","title":"3.2.2. Leer JSON desde una cadena","text":"<p>Podemos trabajar con cadenas JSON directamente en lugar de un archivo. </p> <p>Ejemplo:</p> <pre><code>val cadenaJson = \"\"\"\n    {\"usuarios\": [{\"id\": 1, \"nombre\": \"Juan\", \"edad\": 30}]}\n\"\"\"\nval datos = Gson().fromJson(cadenaJson, Datos::class.java)\nprintln(datos.usuarios[0].nombre) // Salida: Juan\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#33-escribir-archivos-json","title":"3.3. Escribir archivos JSON","text":"","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#331-escribir-json-en-un-archivo","title":"3.3.1. Escribir JSON en un archivo","text":"<p>Usamos <code>Gson().toJson()</code> para convertir un objeto Kotlin a JSON y luego lo guardamos con <code>File.writeText()</code>.</p> <p>Ejemplo:</p> <pre><code>fun guardarJson(nombreFichero: String, datos: Datos) {\n    try {\n        val json = Gson().toJson(datos)\n        File(nombreFichero).writeText(json)\n    } catch (e: Exception) {\n        println(\"Error al guardar los datos: ${e.message}\")\n    }\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#332-convertir-objetos-kotlin-a-cadenas-json","title":"3.3.2. Convertir objetos Kotlin a cadenas JSON","text":"<p>Si no queremos guardar los datos en un archivo, podemos simplemente convertirlos a una cadena JSON.</p> <p>Ejemplo:</p> <pre><code>val datos = Datos(mutableListOf(Usuario(1, \"Juan\", 30)))\nval cadenaJson = Gson().toJson(datos)\nprintln(cadenaJson)\n</code></pre> <p>Salida:</p> <pre><code>{\n  \"usuarios\": [\n    {\n      \"id\": 1,\n      \"nombre\": \"Juan\",\n      \"edad\": 30\n    }\n  ]\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#34-manipular-datos-json","title":"3.4. Manipular datos JSON","text":"<p>Una vez que los datos JSON se cargan en un objeto Kotlin, podemos manipularlos f\u00e1cilmente como cualquier otra colecci\u00f3n.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#341-actualizar-un-dato","title":"3.4.1. Actualizar un dato","text":"<p>Actualiza la edad de un usuario espec\u00edfico buscando su <code>id</code>:</p> <pre><code>fun actualizarUsuario(datos: Datos, idUsuario: Int, nuevaEdad: Int) {\n    val usuario = datos.usuarios.find { it.id == idUsuario }\n    if (usuario != null) {\n        usuario.edad = nuevaEdad\n        println(\"Usuario con ID $idUsuario actualizado.\")\n    } else {\n        println(\"Usuario con ID $idUsuario no encontrado.\")\n    }\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#342-insertar-un-nuevo-usuario","title":"3.4.2. Insertar un nuevo usuario","text":"<p>A\u00f1ade un nuevo usuario a la lista:</p> <pre><code>fun insertarUsuario(datos: Datos, nuevoUsuario: Usuario) {\n    datos.usuarios.add(nuevoUsuario)\n    println(\"Usuario ${nuevoUsuario.nombre} a\u00f1adido con \u00e9xito.\")\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#343-eliminar-un-usuario","title":"3.4.3. Eliminar un usuario","text":"<p>Elimina un usuario de la lista buscando su <code>id</code>:</p> <pre><code>fun eliminarUsuario(datos: Datos, idUsuario: Int) {\n    val usuario = datos.usuarios.find { it.id == idUsuario }\n    if (usuario != null) {\n        datos.usuarios.remove(usuario)\n        println(\"Usuario con ID $idUsuario eliminado.\")\n    } else {\n        println(\"Usuario con ID $idUsuario no encontrado.\")\n    }\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#35-manejo-de-errores","title":"3.5. Manejo de errores","text":"<p>Usamos bloques <code>try-catch</code> para manejar excepciones al leer o escribir archivos JSON.</p> <p>Ejemplo:</p> <pre><code>fun cargarJsonSeguro(nombreFichero: String): Datos? {\n    return try {\n        val json = File(nombreFichero).readText()\n        Gson().fromJson(json, Datos::class.java)\n    } catch (e: FileNotFoundException) {\n        println(\"Archivo no encontrado: $nombreFichero\")\n        null\n    } catch (e: JsonSyntaxException) {\n        println(\"Error en el formato del archivo JSON.\")\n        null\n    }\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#36-ejemplo-completo","title":"3.6. Ejemplo completo","text":"<p>Con todas las piezas juntas, el flujo completo de operaciones ser\u00eda:</p> <pre><code>fun main() {\n    val nombreFichero = \"datos.json\"\n\n    // 1. Cargar datos desde el fichero JSON\n    val datos = cargarJson(nombreFichero) ?: Datos(mutableListOf())\n\n    // 2. Actualizar la edad de un usuario\n    actualizarUsuario(datos, idUsuario = 1, nuevaEdad = 31)\n\n    // 3. Insertar un nuevo usuario\n    val nuevoUsuario = Usuario(id = 3, nombre = \"Pedro\", edad = 40)\n    insertarUsuario(datos, nuevoUsuario)\n\n    // 4. Eliminar un usuario\n    eliminarUsuario(datos, idUsuario = 2)\n\n    // 5. Guardar los datos de nuevo en el fichero JSON\n    guardarJson(nombreFichero, datos)\n\n    println(\"Operaciones completadas. Archivo actualizado.\")\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#37-resultado-final","title":"3.7. Resultado final","text":"<p>Despu\u00e9s de ejecutar el programa, el archivo <code>datos.json</code> se ver\u00e1 as\u00ed: <pre><code>{\n  \"usuarios\": [\n    {\"id\": 1, \"nombre\": \"Juan\", \"edad\": 31},\n    {\"id\": 3, \"nombre\": \"Pedro\", \"edad\": 40}\n  ]\n}\n</code></pre></p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#38-json-en-un-mapstring-any","title":"3.8. JSON en un <code>Map&lt;String, Any&gt;</code>","text":"<p>Si necesitamos mayor flexibilidad, podemos deserializar el JSON en un <code>Map</code>. Esto es \u00fatil si no conocemos la estructura del JSON o prefirimos manipular los datos din\u00e1micamente.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#381-deserializacion-a-un-map","title":"3.8.1. Deserializaci\u00f3n a un <code>Map</code>","text":"<p>Con Gson, podemos hacerlo utilizando un <code>TypeToken</code>:</p> <pre><code>import com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport java.io.File\n\nfun cargarJsonComoMap(nombreFichero: String): Map&lt;String, Any&gt;? {\n    return try {\n        val json = File(nombreFichero).readText()\n        val tipo = object : TypeToken&lt;Map&lt;String, Any&gt;&gt;() {}.type\n        Gson().fromJson&lt;Map&lt;String, Any&gt;&gt;(json, tipo)\n    } catch (e: Exception) {\n        println(\"*ERROR* Problemas al cargar el JSON como Map: ${e.message}\")\n        null\n    }\n}\n\nfun main() {\n    val nombreFichero = \"datos.json\"\n    val datosComoMap = cargarJsonComoMap(nombreFichero)\n    if (datosComoMap != null) {\n        println(\"\\nDatos cargados como Map:\")\n        datosComoMap.forEach { (clave, valor) -&gt;\n            println(\"$clave: $valor\")\n        }\n    }\n}\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#382-ejemplo-de-salida","title":"3.8.2. Ejemplo de Salida","text":"<p>Dado este archivo <code>datos.json</code>:</p> <pre><code>{\n    \"usuarios\": [\n        {\"id\": 1, \"nombre\": \"Juan\", \"edad\": 30},\n        {\"id\": 2, \"nombre\": \"Ana\", \"edad\": 25}\n    ]\n}\n</code></pre> <p>Salida del Programa:</p> <pre><code>Datos cargados como Map:\nusuarios: [{id=1.0, nombre=Juan, edad=30.0}, {id=2.0, nombre=Ana, edad=25.0}]\n</code></pre>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.6.-ManejoJSON/#39-conclusion-json-en-kotlin","title":"3.9. Conclusi\u00f3n - JSON en Kotlin","text":"<p>El manejo de JSON en Kotlin es muy sencillo gracias a librer\u00edas como Gson. Al igual que en Python, podemos realizar operaciones como leer, escribir, actualizar e insertar datos con un enfoque modular y utilizando clases de datos (<code>data class</code>) para estructurar los datos.</p>","tags":["Software","JSON"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/","title":"UD 3 - 3.7 Manejo de XML","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#xml","title":"XML","text":"<p>XML (eXtensible Markup Language) es un formato est\u00e1ndar utilizado para estructurar y almacenar datos.  En Python, se gestiona principalmente con los m\u00f3dulos integrados <code>xml.etree.ElementTree</code> (m\u00e1s simple) o <code>xml.dom.minidom</code> (para representaci\u00f3n legible).  Tambi\u00e9n puedes usar librer\u00edas externas como <code>lxml</code> para funcionalidades avanzadas.</p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#conceptos-basicos-de-xml","title":"Conceptos b\u00e1sicos de XML","text":"<p>Un archivo XML contiene elementos (tags), atributos y valores anidados. Es m\u00e1s estructurado que JSON pero tambi\u00e9n m\u00e1s verboso, es decir, requiere m\u00e1s texto para representar la misma cantidad de informaci\u00f3n.</p> <p>Ejemplo de XML: <pre><code>&lt;usuario&gt;\n    &lt;nombre&gt;Juan&lt;/nombre&gt;\n    &lt;edad&gt;30&lt;/edad&gt;\n    &lt;habilidades&gt;\n        &lt;habilidad&gt;Python&lt;/habilidad&gt;\n        &lt;habilidad&gt;JavaScript&lt;/habilidad&gt;\n    &lt;/habilidades&gt;\n    &lt;activo&gt;true&lt;/activo&gt;\n&lt;/usuario&gt;\n</code></pre></p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#xml-en-python","title":"XML en Python","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#1-importar-el-modulo-xmletreeelementtree","title":"1. Importar el m\u00f3dulo <code>xml.etree.ElementTree</code>","text":"<p>El m\u00f3dulo <code>xml.etree.ElementTree</code> permite leer y manipular XML de manera sencilla.</p> <pre><code>import xml.etree.ElementTree as ET\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#2-leer-archivos-xml","title":"2. Leer archivos XML","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#21-leer-xml-desde-un-archivo","title":"2.1 Leer XML desde un archivo","text":"<p>Se usa <code>ET.parse()</code> para convertir el contenido del archivo XML en un \u00e1rbol de elementos.</p> <p>Ejemplo: <pre><code>import xml.etree.ElementTree as ET\n\n# Leer el archivo XML\narbol = ET.parse(\"datos.xml\")\nraiz = arbol.getroot()\n\n# Acceder a los datos\nprint(raiz.find(\"nombre\").text)  # Ejemplo: 'Juan'\n</code></pre></p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#22-leer-xml-desde-una-cadena-de-caracteres","title":"2.2 Leer XML desde una cadena de caracteres","text":"<p>Para leer XML desde una cadena, se usa <code>ET.fromstring()</code>.</p> <p>Ejemplo: <pre><code>import xml.etree.ElementTree as ET\n\ncadena_xml = \"\"\"\n&lt;usuario&gt;\n    &lt;nombre&gt;Juan&lt;/nombre&gt;\n    &lt;edad&gt;30&lt;/edad&gt;\n&lt;/usuario&gt;\n\"\"\"\nraiz = ET.fromstring(cadena_xml)\n\nprint(raiz.find(\"edad\").text)  # Ejemplo: '30'\n</code></pre></p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#3-escribir-archivos-xml","title":"3. Escribir archivos XML","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#31-escribir-xml-en-un-archivo","title":"3.1 Escribir XML en un archivo","text":"<p>Se construyen los elementos con <code>ET.Element</code> y luego se escribe en un archivo con <code>ET.ElementTree.write()</code>.</p> <p>Ejemplo: <pre><code>import xml.etree.ElementTree as ET\n\n# Crear el elemento ra\u00edz\nraiz = ET.Element(\"usuarios\")\n\n# A\u00f1adir un usuario\nusuario = ET.SubElement(raiz, \"usuario\")\nET.SubElement(usuario, \"id\").text = \"1\"\nET.SubElement(usuario, \"nombre\").text = \"Ana\"\nET.SubElement(usuario, \"edad\").text = \"25\"\n\n# Escribir en un archivo XML\narbol = ET.ElementTree(raiz)\narbol.write(\"salida.xml\", encoding=\"utf-8\", xml_declaration=True)\n</code></pre></p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#32-convertir-objetos-python-a-cadenas-xml","title":"3.2 Convertir objetos Python a cadenas XML","text":"<p>Para convertir datos de Python a XML como cadena, usa <code>ET.tostring()</code>.</p> <p>Ejemplo: <pre><code>import xml.etree.ElementTree as ET\n\n# Crear el elemento ra\u00edz\nraiz = ET.Element(\"usuario\")\nET.SubElement(raiz, \"nombre\").text = \"Pedro\"\nET.SubElement(raiz, \"edad\").text = \"40\"\n\n# Convertir a cadena XML\ncadena_xml = ET.tostring(raiz, encoding=\"unicode\")\nprint(cadena_xml)\n</code></pre></p> <p>Salida: <pre><code>&lt;usuario&gt;\n    &lt;nombre&gt;Pedro&lt;/nombre&gt;\n    &lt;edad&gt;40&lt;/edad&gt;\n&lt;/usuario&gt;\n</code></pre></p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#4-manipular-datos-xml","title":"4. Manipular datos XML","text":"<p>Despu\u00e9s de cargar un archivo XML como un \u00e1rbol de elementos, puedes manipular los datos con operaciones est\u00e1ndar de Python.</p> <p>Ejemplo: <pre><code>import xml.etree.ElementTree as ET\n\n# Leer y modificar datos XML\narbol = ET.parse(\"datos.xml\")\nraiz = arbol.getroot()\n\n# Modificar un elemento\nraiz.find(\"edad\").text = str(int(raiz.find(\"edad\").text) + 1)\n\n# A\u00f1adir un nuevo elemento\nhabilidades = raiz.find(\"habilidades\")\nnueva_habilidad = ET.SubElement(habilidades, \"habilidad\")\nnueva_habilidad.text = \"SQL\"\n\n# Guardar los cambios\narbol.write(\"datos.xml\", encoding=\"utf-8\", xml_declaration=True)\n</code></pre></p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#4-manejo-de-errores","title":"4. Manejo de errores","text":"<p>Es importante manejar posibles excepciones al trabajar con XML para evitar errores inesperados.</p> <p>Ejemplo: <pre><code>import xml.etree.ElementTree as ET\n\ntry:\n    arbol = ET.parse(\"datos.xml\")\n    raiz = arbol.getroot()\nexcept FileNotFoundError:\n    print(\"*ERROR* Archivo no encontrado.\")\nexcept ET.ParseError:\n    print(\"*ERROR* Problemas al analizar el archivo XML.\")\nexcept Exception as e:\n    print(f\"*ERROR* {e}.\")\n</code></pre></p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#5-conclusion","title":"5. Conclusi\u00f3n","text":"<p>El manejo de archivos XML en Python es vers\u00e1til y eficaz gracias al m\u00f3dulo integrado xml.etree.ElementTree.  Este m\u00f3dulo permite trabajar con datos estructurados de forma jer\u00e1rquica, ofreciendo una interfaz intuitiva para crear, leer, modificar y guardar archivos XML.</p> <p>XML tiene una estructura basada en etiquetas, que lo hace ideal para representar datos complejos con relaciones jer\u00e1rquicas claras.  Las funciones parse, fromstring, y ElementTree proporcionan herramientas esenciales para manipular archivos XML en proyectos peque\u00f1os o grandes.</p> <p>Con un manejo adecuado de excepciones y el uso de funciones auxiliares como find, findall y SubElement, puedes trabajar eficientemente con documentos XML,  incluso en escenarios avanzados que requieren validaci\u00f3n o extensibilidad.</p> <p>En resumen, Python ofrece una soluci\u00f3n robusta y extensible para gestionar datos XML, facilitando su integraci\u00f3n en aplicaciones que necesiten intercambiar informaci\u00f3n en este formato est\u00e1ndar.</p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#6-ejemplo-completo","title":"6. Ejemplo Completo","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#61-archivo-xml-inicial-datosxml","title":"6.1. Archivo XML inicial (<code>datos.xml</code>)","text":"<pre><code>&lt;usuarios&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;nombre&gt;Juan&lt;/nombre&gt;\n        &lt;edad&gt;30&lt;/edad&gt;\n    &lt;/usuario&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;2&lt;/id&gt;\n        &lt;nombre&gt;Ana&lt;/nombre&gt;\n        &lt;edad&gt;25&lt;/edad&gt;\n    &lt;/usuario&gt;\n&lt;/usuarios&gt;\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#62-codigo-en-python","title":"6.2. C\u00f3digo en Python","text":"<pre><code>import xml.etree.ElementTree as ET\n\n\ndef cargar_xml(nombre_fichero: str) -&gt; ET.ElementTree:\n    \"\"\"\n    Carga el contenido de un archivo XML.\n\n    Args:\n        nombre_fichero (str): Nombre del archivo XML.\n\n    Returns:\n        ET.ElementTree: \u00c1rbol del XML.\n    \"\"\"\n    try:\n        return ET.parse(nombre_fichero)\n\n    except FileNotFoundError:\n        print(f\"*ERROR* El archivo {nombre_fichero} no existe.\")\n\n    except ET.ParseError:\n        print(\"*ERROR* El archivo XML tiene un formato incorrecto.\")\n\n    except Exception as e:\n        print(f\"*ERROR* Problemas al cargar el XML: {e}\")\n\n    return None\n\n\ndef guardar_xml(arbol: ET.ElementTree, nombre_fichero: str) -&gt; bool:\n    \"\"\"\n    Guarda un \u00e1rbol XML en un archivo.\n\n    Args:\n        arbol (ET.ElementTree): \u00c1rbol XML.\n        nombre_fichero (str): Nombre del archivo de salida.\n\n    Returns:\n        (bool): True si se guard\u00f3 correctamente y False si se produjo alg\u00fan problema.\n    \"\"\"\n    try:\n        arbol.write(nombre_fichero, encoding = \"utf-8\", xml_declaration = True)\n\n        return True\n\n    except FileNotFoundError:\n        print(f\"*ERROR* La ruta especificada '{nombre_fichero}' no existe.\")\n\n    except PermissionError:\n        print(f\"*ERROR* No tienes permisos para escribir en el archivo '{nombre_fichero}'.\")\n\n    except Exception as e:\n        print(f\"*ERROR* Problemas al guardar el archivo XML: {e}\")\n\n    return False\n\n\ndef actualizar_usuario(raiz: ET.Element, id_usuario: int, nueva_edad: int):\n    \"\"\"\n    Actualiza la edad de un usuario dado su ID.\n\n    Args:\n        raiz (ET.Element): Nodo ra\u00edz del XML.\n        id_usuario (int): ID del usuario a actualizar.\n        nueva_edad (int): Nueva edad.\n    \"\"\"\n    for usuario in raiz.findall(\"usuario\"):\n        if usuario.find(\"id\").text == str(id_usuario):\n            usuario.find(\"edad\").text = str(nueva_edad)\n            print(f\"Usuario con ID {id_usuario} actualizado.\")\n            return\n\n    print(f\"Usuario con ID {id_usuario} no encontrado.\")\n\n\ndef insertar_usuario(raiz: ET.Element, nuevo_usuario: dict):\n    \"\"\"\n    Inserta un nuevo usuario en el XML.\n\n    Args:\n        raiz (ET.Element): Nodo ra\u00edz del XML.\n        nuevo_usuario (dict): Datos del nuevo usuario.\n    \"\"\"\n    usuario = ET.SubElement(raiz, \"usuario\")\n    ET.SubElement(usuario, \"id\").text = str(nuevo_usuario[\"id\"])\n    ET.SubElement(usuario, \"nombre\").text = nuevo_usuario[\"nombre\"]\n    ET.SubElement(usuario, \"edad\").text = str(nuevo_usuario[\"edad\"])\n\n    print(f\"Usuario {nuevo_usuario['nombre']} a\u00f1adido con \u00e9xito.\")\n\n\ndef eliminar_usuario(raiz: ET.Element, id_usuario: int):\n    \"\"\"\n    Elimina un usuario por su ID.\n\n    Args:\n        raiz (ET.Element): Nodo ra\u00edz del XML.\n        id_usuario (int): ID del usuario a eliminar.\n    \"\"\"\n    for usuario in raiz.findall(\"usuario\"):\n        if usuario.find(\"id\").text == str(id_usuario):\n            raiz.remove(usuario)\n            print(f\"Usuario con ID {id_usuario} eliminado.\")\n            return\n\n    print(f\"Usuario con ID {id_usuario} no encontrado.\")\n\n\ndef main():\n    \"\"\"\n    Funci\u00f3n principal.\n    \"\"\"\n    nombre_fichero = \"src/otros/datos_usuarios.xml\"\n\n    # 1. Cargar XML\n    arbol = cargar_xml(nombre_fichero)\n\n    if arbol is None:\n        # Inicializamos datos vac\u00edos si hay error\n        raiz = ET.Element(\"usuarios\")\n        arbol = ET.ElementTree(raiz)\n\n    # Obtenemos el nodo principal y padre de todos\n    raiz = arbol.getroot()\n\n    # 2. Actualizar la edad de un usuario\n    actualizar_usuario(raiz, id_usuario = 1, nueva_edad = 31)\n\n    # 3. Insertar un nuevo usuario\n    nuevo_usuario = {\"id\": 3, \"nombre\": \"Pedro\", \"edad\": 40}\n    insertar_usuario(raiz, nuevo_usuario)\n\n    # 4. Eliminar un usuario\n    eliminar_usuario(raiz, id_usuario=2)\n\n    # 5. Guardar los datos de nuevo en el fichero XML\n    guardar_xml(arbol, nombre_fichero)\n\n    print(\"Operaciones completadas. Archivo actualizado.\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#63-resultado-final-datosxml","title":"6.3. Resultado final (<code>datos.xml</code>)","text":"<pre><code>&lt;usuarios&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;nombre&gt;Juan&lt;/nombre&gt;\n        &lt;edad&gt;31&lt;/edad&gt;\n    &lt;/usuario&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;3&lt;/id&gt;\n        &lt;nombre&gt;Pedro&lt;/nombre&gt;\n        &lt;edad&gt;40&lt;/edad&gt;\n    &lt;/usuario&gt;\n&lt;/usuarios&gt;\n</code></pre> <p>El manejo de XML en Python requiere m\u00e1s pasos que JSON, pero es igualmente flexible. Este ejemplo muestra c\u00f3mo cargar, modificar y guardar datos XML de manera eficiente con <code>xml.etree.ElementTree</code>.</p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#xml-en-kotlin","title":"XML en Kotlin","text":"<p>En Kotlin, el manejo de XML puede realizarse utilizando bibliotecas externas, ya que no cuenta con un soporte nativo para trabajar con XML al nivel de Python. </p> <p>Una de las bibliotecas m\u00e1s utilizadas es JDOM, que proporciona una API intuitiva para leer, escribir y manipular documentos XML. </p> <p>A continuaci\u00f3n, se explica c\u00f3mo manejar archivos XML en Kotlin utilizando esta biblioteca.</p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#1-importar-la-biblioteca-jdom","title":"1. Importar la biblioteca JDOM","text":"<p>Para usar JDOM en Kotlin, agrega la dependencia en el archivo <code>build.gradle</code> de tu proyecto:</p> <pre><code>implementation(\"org.jdom:jdom2:2.0.6\")\n</code></pre> <p>Luego, importa las clases necesarias:</p> <pre><code>import org.jdom2.Document\nimport org.jdom2.Element\nimport org.jdom2.input.SAXBuilder\nimport org.jdom2.output.XMLOutputter\nimport org.jdom2.output.Format\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#2-leer-archivos-xml_1","title":"2. Leer archivos XML","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#21-leer-xml-desde-un-archivo_1","title":"2.1 Leer XML desde un archivo","text":"<p>Usamos <code>SAXBuilder</code> para convertir el contenido de un archivo XML en un objeto <code>Document</code>.</p> <p>Ejemplo:</p> <pre><code>import org.jdom2.input.SAXBuilder\n\nfun cargarXML(nombreFichero: String): Document? {\n    return try {\n        val builder = SAXBuilder()\n        builder.build(nombreFichero)\n    } catch (e: Exception) {\n        println(\"*ERROR* Problemas al cargar el archivo XML: ${e.message}\")\n        null\n    }\n}\n\n// Uso:\nval documento = cargarXML(\"datos.xml\")\nval raiz = documento?.rootElement\nprintln(raiz?.getChild(\"usuario\")?.getChildText(\"nombre\")) // Ejemplo: 'Juan'\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#22-leer-xml-desde-una-cadena","title":"2.2 Leer XML desde una cadena","text":"<p>Usamos <code>StringReader</code> junto con <code>SAXBuilder</code>.</p> <p>Ejemplo:</p> <pre><code>import org.jdom2.input.SAXBuilder\nimport java.io.StringReader\n\nval cadenaXML = \"\"\"\n&lt;usuario&gt;\n    &lt;nombre&gt;Juan&lt;/nombre&gt;\n    &lt;edad&gt;30&lt;/edad&gt;\n&lt;/usuario&gt;\n\"\"\".trimIndent()\n\nval builder = SAXBuilder()\nval documento = builder.build(StringReader(cadenaXML))\nval raiz = documento.rootElement\n\nprintln(raiz.getChildText(\"edad\")) // Ejemplo: '30'\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#3-escribir-archivos-xml_1","title":"3. Escribir archivos XML","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#31-escribir-xml-en-un-archivo_1","title":"3.1 Escribir XML en un archivo","text":"<p>Creamos los elementos con <code>Element</code> y luego guardamos el documento con <code>XMLOutputter</code>.</p> <p>Ejemplo:</p> <pre><code>import org.jdom2.Document\nimport org.jdom2.Element\nimport org.jdom2.output.XMLOutputter\nimport org.jdom2.output.Format\nimport java.io.File\n\nfun guardarXML(documento: Document, nombreFichero: String) {\n    try {\n        val outputter = XMLOutputter(Format.getPrettyFormat())\n        outputter.output(documento, File(nombreFichero).writer())\n        println(\"Archivo XML guardado en $nombreFichero\")\n    } catch (e: Exception) {\n        println(\"*ERROR* Problemas al guardar el archivo XML: ${e.message}\")\n    }\n}\n\n// Uso:\nval raiz = Element(\"usuarios\")\nval documento = Document(raiz)\n\nval usuario = Element(\"usuario\")\nusuario.addContent(Element(\"id\").setText(\"1\"))\nusuario.addContent(Element(\"nombre\").setText(\"Ana\"))\nusuario.addContent(Element(\"edad\").setText(\"25\"))\n\nraiz.addContent(usuario)\nguardarXML(documento, \"salida.xml\")\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#32-convertir-elementos-a-cadenas-xml","title":"3.2 Convertir elementos a cadenas XML","text":"<p>Usamos <code>XMLOutputter</code> para convertir un documento o elemento a una cadena.</p> <p>Ejemplo:</p> <pre><code>import org.jdom2.output.XMLOutputter\nimport org.jdom2.output.Format\n\nval xmlComoCadena = XMLOutputter(Format.getPrettyFormat()).outputString(documento)\nprintln(xmlComoCadena)\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#4-manipular-datos-xml_1","title":"4. Manipular datos XML","text":"<p>Una vez cargado el archivo XML, puedes modificarlo agregando, actualizando o eliminando elementos.</p> <p>Ejemplo:</p> <pre><code>// Leer y modificar datos XML\nval documento = cargarXML(\"datos.xml\")\nval raiz = documento?.rootElement\n\n// Modificar un elemento\nval usuario = raiz?.getChild(\"usuario\")\nusuario?.getChild(\"edad\")?.text = (usuario.getChildText(\"edad\").toInt() + 1).toString()\n\n// A\u00f1adir un nuevo elemento\nval nuevoUsuario = Element(\"usuario\")\nnuevoUsuario.addContent(Element(\"id\").setText(\"2\"))\nnuevoUsuario.addContent(Element(\"nombre\").setText(\"Pedro\"))\nnuevoUsuario.addContent(Element(\"edad\").setText(\"40\"))\nraiz?.addContent(nuevoUsuario)\n\n// Guardar los cambios\nguardarXML(documento!!, \"datos_modificados.xml\")\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#5-manejo-de-errores","title":"5. Manejo de errores","text":"<p>Es importante manejar posibles excepciones al trabajar con XML, como archivos inexistentes o problemas de formato.</p> <p>Ejemplo:</p> <pre><code>try {\n    val documento = SAXBuilder().build(\"datos.xml\")\n    val raiz = documento.rootElement\n    println(raiz.getChildText(\"nombre\"))\n} catch (e: Exception) {\n    when (e) {\n        is org.jdom2.JDOMException -&gt; println(\"*ERROR* Problemas con el formato del archivo XML.\")\n        is java.io.FileNotFoundException -&gt; println(\"*ERROR* Archivo no encontrado.\")\n        else -&gt; println(\"*ERROR* ${e.message}\")\n    }\n}\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#6-conclusion","title":"6. Conclusi\u00f3n","text":"<p>El manejo de archivos XML en Kotlin es flexible y potente gracias a bibliotecas como JDOM. Estas herramientas permiten trabajar con datos estructurados de forma jer\u00e1rquica, facilitando tareas como leer, modificar y guardar archivos XML.</p> <p>Aunque XML puede ser m\u00e1s verboso que JSON, su capacidad para manejar datos complejos con relaciones jer\u00e1rquicas claras lo hace ideal para muchas aplicaciones. JDOM, en combinaci\u00f3n con Kotlin, ofrece una API clara y extensible, permitiendo la integraci\u00f3n fluida de XML en proyectos modernos.</p>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#7-ejemplo-completo","title":"7. Ejemplo Completo","text":"","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#archivo-xml-inicial-datosxml","title":"Archivo XML inicial (<code>datos.xml</code>)","text":"<pre><code>&lt;usuarios&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;nombre&gt;Juan&lt;/nombre&gt;\n        &lt;edad&gt;30&lt;/edad&gt;\n    &lt;/usuario&gt;\n&lt;/usuarios&gt;\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#codigo-en-kotlin","title":"C\u00f3digo en Kotlin","text":"<pre><code>fun main() {\n    val nombreFichero = \"datos.xml\"\n\n    // 1. Cargar XML\n    val documento = cargarXML(nombreFichero) ?: Document(Element(\"usuarios\"))\n    val raiz = documento.rootElement\n\n    // 2. Actualizar usuario\n    actualizarUsuario(raiz, 1, 31)\n\n    // 3. Insertar nuevo usuario\n    val nuevoUsuario = mapOf(\"id\" to \"2\", \"nombre\" to \"Ana\", \"edad\" to \"25\")\n    insertarUsuario(raiz, nuevoUsuario)\n\n    // 4. Eliminar usuario\n    eliminarUsuario(raiz, 1)\n\n    // 5. Guardar los cambios\n    guardarXML(documento, nombreFichero)\n}\n\nfun actualizarUsuario(raiz: Element, id: Int, nuevaEdad: Int) {\n    val usuario = raiz.getChildren(\"usuario\").find { it.getChildText(\"id\").toInt() == id }\n    usuario?.getChild(\"edad\")?.text = nuevaEdad.toString()\n}\n\nfun insertarUsuario(raiz: Element, nuevoUsuario: Map&lt;String, String&gt;) {\n    val usuario = Element(\"usuario\")\n    nuevoUsuario.forEach { (clave, valor) -&gt; usuario.addContent(Element(clave).setText(valor)) }\n    raiz.addContent(usuario)\n}\n\nfun eliminarUsuario(raiz: Element, id: Int) {\n    val usuario = raiz.getChildren(\"usuario\").find { it.getChildText(\"id\").toInt() == id }\n    if (usuario != null) raiz.removeContent(usuario)\n}\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.7.-ManejoXML/#resultado-final-datosxml","title":"Resultado Final (<code>datos.xml</code>)","text":"<pre><code>&lt;usuarios&gt;\n    &lt;usuario&gt;\n        &lt;id&gt;2&lt;/id&gt;\n        &lt;nombre&gt;Ana&lt;/nombre&gt;\n        &lt;edad&gt;25&lt;/edad&gt;\n    &lt;/usuario&gt;\n&lt;/usuarios&gt;\n</code></pre>","tags":["Software","XML"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/","title":"UD 3 - 3.8 Ampliaci\u00f3n 1","text":"","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/#identidad-tipo-y-valor","title":"Identidad, tipo y valor","text":"<p>Python es un lenguaje de programaci\u00f3n orientado a objetos, y como tal, trata a todos los tipos de datos como objetos. Un simple entero es un objeto.</p> <pre><code># x es un objeto\nx = 5\n</code></pre> <p>Y una funci\u00f3n es tambi\u00e9n un objeto.</p> <pre><code># saludar es un objeto\ndef saludar(nombre: str):\n    print(f\"Hola, {nombre}\")\n</code></pre> <p>Cada objeto viene identificado por su identidad, tipo y valor:</p> <ul> <li>Identidad:     &gt; Nunca cambia e identifica de manera un\u00edvoca al objeto. El operador <code>is</code> nos permite saber si dos objetos son en realidad el mismo. Es decir, si dos variables hacen referencia al mismo.</li> <li>Tipo:     &gt; Nos indica el tipo al que pertenece, como un <code>float</code> o una <code>lista</code>. La funci\u00f3n <code>type()</code> nos indica el tipo de un determinado objeto. Es la clase a la que pertenece.</li> <li>Valor:     &gt; Todo objeto tiene unas caracter\u00edsticas particulares. Si estas caracter\u00edsticas pueden ser modificadas, diremos que es un tipo <code>mutable</code>. De lo contrario, que es <code>inmutable</code>.</li> </ul> <p>Veamos un ejemplo con un entero:</p> <pre><code>x = 10\nprint(\"Identidad:\", id(x))\nprint(\"Tipo:\", type(x))\nprint(\"Valor:\", x)\n</code></pre> <p>Podemos ver con <code>id()</code>, que se trata de un identificador \u00fanico. Es importante notar que si ejecutamos el c\u00f3digo diferentes veces, su valor no tiene porqu\u00e9 se el mismo. Por otro lado el tipo entero, <code>&lt;class 'int'&gt;</code>. Por \u00faltimo tenemos su valor, <code>10</code>.</p> <pre><code>Identidad: 4474035136\nTipo: &lt;class 'int'&gt;\nValor: 10\n</code></pre> <p>Los tipos de datos <code>int</code>, <code>float</code>, <code>bool</code> y <code>str</code> en Python, son un tipo inmutable.</p>","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/#mutabilidad","title":"Mutabilidad","text":"<p>Los diferentes tipos de Python u otros objetos en general, pueden ser clasificados atendiendo a su mutabilidad. Pueden ser:</p> <ul> <li>Mutables: Si permiten ser modificados una vez creados.</li> <li>Inmutables: Si no permiten ser modificados una vez creados.</li> </ul> <p>Son mutables los siguientes tipos:</p> <ul> <li>Listas</li> <li>Diccionarios</li> <li>Sets</li> <li>Bytearray</li> <li>Memoryview</li> <li>Y clases definidas por el usuario</li> </ul> <p>Y son inmutables:</p> <ul> <li>Booleanos</li> <li>Enteros</li> <li>Float</li> <li>Cadenas</li> <li>Tuplas</li> <li>Frozenset</li> <li>Range</li> <li>Bytes</li> </ul> <p>Python trata de manera diferente a los tipos mutables e inmutables.</p> <p>Por ejemplo, una lista puede ser modificada una vez creada, pero una tupla no.</p> <pre><code>l = [1, 2, 3]\nprint(id(l)) #4383854144\nl[0] = 0\nprint(id(l)) #4383854144\n</code></pre> <p>Se puede observar que el <code>id</code> es el mismo antes y despu\u00e9s de realizar la modificaci\u00f3n.</p> <p>Sin embargo, una tupla es inmutable, por lo que la siguiente asignaci\u00f3n dar\u00e1 un error.</p> <pre><code># La asignaci\u00f3n no se puede realizar\nt = (1, 2, 3)\nt[0] = 0\n</code></pre> <p>Aunque la tupla es inmutable, si que habr\u00eda una forma de modificar el valor de t, pero lo que en realidad hacemos es crear una nueva tupla y asignarle el mismo nombre, como pasa con un tipo <code>int</code> o <code>str</code>.</p> <p>Se podr\u00eda hacer algo como lo siguiente, convertir la tupla en lista, modificar la lista y convertir a tupla otra vez.</p> <pre><code>t = (1, 2, 3)\nprint(id(t)) #4483581184\nt = list(t)\n\n# Modificar elemento\nt[0] = 0\n\nt = tuple(t)\nprint(t)     #(0, 2, 3)\nprint(id(t)) #4483953088\n</code></pre> <p>Ahora hemos conseguido modificar el valor de t, pero id(t) ya no nos devuelve el mismo valor. El nombre de la variable es el mismo, pero el objeto al que \u201capunta\u201d ha cambiado.</p> <p>Lo mismo pasa con los sets (mutables) y los frozenset (no mutables).</p> <p>Las principales diferencias entre tipos mutables e inmutables son las siguientes:</p> <ul> <li>Los tipos inmutables son generalmente m\u00e1s r\u00e1pidos de acceder. Por lo que si no piensas modificar una lista, es mejor que uses una tupla.</li> <li>Los tipos mutables son perfectos cuando quieres cambiar su contenido repetidas veces.</li> <li>Los tipos inmutables son caros de cambiar, ya que lo que se hace en realidad es hacer una copia de su contenido en un nuevo objeto con las modificaciones.</li> </ul>","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/#paso-por-valorreferencia","title":"Paso por valor/referencia","text":"<p>La mutabilidad de los objetos es una caracter\u00edstica muy importante cuando tratamos con funciones, ya que Python los tratar\u00e1 de manera distinta.</p> <p>Si conoces lenguajes de programaci\u00f3n como C, los conceptos de paso por valor o referencia te resultar\u00e1n familiares:</p> <ul> <li>Los tipos inmutables son pasados por valor, por lo tanto dentro de la funci\u00f3n se accede a una copia y no al valor original.</li> <li>Los tipos mutables son pasados por referencia, como es el caso de las listas y los diccionarios. Algo similar a como C pasa las array como punteros.</li> </ul> <p>Tenemos una funci\u00f3n que modifica dos variables.</p> <pre><code>def funcion(a, b):\n    a = 10\n    b[0] = 10\n\ndef main():\n    # x es un entero\n    x = 5\n    # y es una lista\n    y = [5]\n\n    funcion(x, y)\n\n    print(x) # 5\n    print(y) # 10\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Si llamamos a la funci\u00f3n con ambas variables, vemos como el valor de x no ha cambiado, pero el de y s\u00ed. Esto se debe a que <code>a = 10</code> trabaja con un valor de <code>a</code> local a la funci\u00f3n, al ser el entero un tipo inmutable. Sin embargo <code>b[0] = 10</code> act\u00faa sobre la variable original.</p>","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/#copia-superficial-y-profunda","title":"Copia superficial y profunda:","text":"<p>En Python para los tipos de datos inmutables solamente se usan asignaciones y para los tipos de datos mutables adem\u00e1s se utiliza la copia superficial y la copia profunda.</p> <p>Las variables en Python no guardan directamente valores ni objetos sino referencias a estos. Por lo que cuando se hace una asignaci\u00f3n no se est\u00e1n copiando esos valores.</p> <pre><code>num1 = 5\nnum2 = num1\n\nprint(f\"num1 = {num1} (id =&gt; {id(num1)})\")\nprint(f\"num2 = {num2} (id =&gt; {id(num2)})\\n\")\n\nnum1 += 1\n\nprint(f\"num1 = {num1} (id =&gt; {id(num1)})\")\nprint(f\"num2 = {num2} (id =&gt; {id(num2)})\")\n</code></pre> <p>Si ejecutamos nuestro ejemplo, podemos observar c\u00f3mo :</p> <pre><code>num1 = 5 (id =&gt; 140716801844136)\nnum2 = 5 (id =&gt; 140716801844136)\n\nnum1 = 6 (id =&gt; 140716801844168)\nnum2 = 5 (id =&gt; 140716801844136)\n</code></pre>","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/#copia-superficial","title":"Copia superficial:","text":"<p><code>Solamente se copian las referencias a los elementos contenidos en el objeto.</code></p>","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/#copia-profunda","title":"Copia profunda:","text":"<p><code>Si el objeto contiene subobjetos estos se copian recursivamente.</code></p> <p>Veamos el siguiente ejemplo:</p> <pre><code>from random import randint\nfrom copy import copy, deepcopy\n\ndef lista(n = 2):\n    lst = list()\n    for k in range(n):\n        lst.append(randint(0,99))\n    return lst\n\ndef main():\n    LA = [lista(), lista()]\n    A = LA\n    B = copy(LA)\n    C = deepcopy(LA)\n\n    print(\"LA id =\", id(LA), \"-&gt;\", LA)\n    print(\"A id =\", id(A), \"-&gt;\", A)\n    print(\"B id =\", id(B), \"-&gt;\", B)\n    print(\"C id =\", id(C), \"-&gt;\", C)\n    print(\"LA[0] id =\", id(LA[0]), \"-&gt;\", LA[0])\n    print(\"A[0] id =\", id(A[0]), \"-&gt;\", A[0])\n    print(\"B[0] id =\", id(B[0]), \"-&gt;\", B[0])\n    print(\"C[0] id =\", id(C[0]), \"-&gt;\", C[0])\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Como se puede observar el id de LA y A es el mismo ya que ambos hacen referencia a la misma instancia.</p> <p>El id de B es diferente porque este es una copia, sin embargo los id de sus listas interiores son iguales a los identificadores de las listas contenidas en LA, debido a que B es una copia superficial.</p> <p>En el caso de C, su id tambi\u00e9n es diferente al de A y LA, as\u00ed como los identificadores de las listas que contiene, puesto que C es una copia profunda.</p> <p>A simple vista parece que la copia superficial hace exactamente lo mismo que la copia profunda porque los valores son iguales, sin embargo la diferencia radica en que las instancias a los objetos referenciados por A, B y C respectivamente son distintas.</p> <p>Se puede ver m\u00e1s claramente en el siguiente diagrama:</p> <p></p>","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.8.-OtrosAmpliacion1/#fuente","title":"Fuente","text":"<ul> <li>Python: copia superficial y copia profunda</li> <li>Tipos y estructuras - Mutabilidad</li> </ul>","tags":["Software","Asignaci\u00f3n","Identidad","Mutabilidad","Paso por valor","Paso por referencia","Copia superficial","Copia profunda"]},{"location":"section1/u03/teoria/PROG-U3.9.-OtrosAmpliacion2/","title":"UD 3 - 3.9 Ampliaci\u00f3n 2","text":"","tags":["Software","Globales","join","Iterables con for","Return con operadores l\u00f3gicos"]},{"location":"section1/u03/teoria/PROG-U3.9.-OtrosAmpliacion2/#variables-globales","title":"Variables globales","text":"<p>Las variables declaradas fuera de las funciones son de \u00e1mbito global.</p> <p>No es una buena pr\u00e1ctica abusar de este uso, m\u00e1s bien solo para variables definidas c\u00f3mo constantes. El resto de variables podemos seguir utiliz\u00e1ndolas de manera local, dentro de las funciones y utilizando los pasos de par\u00e1metros a las distintas funciones y el retorno de valores cuando sea necesario para actualizarlas.</p> <p>Las colecciones pasan su id o referencia, esto quiere decir, que si modificamos algo en ellas dentro de una funci\u00f3n, se modificar\u00e1 tambi\u00e9n en la colecci\u00f3n original... a diferencia de los tipos de variables primitivos (<code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>... que son inmutables y debemos reasignar su valor)</p>","tags":["Software","Globales","join","Iterables con for","Return con operadores l\u00f3gicos"]},{"location":"section1/u03/teoria/PROG-U3.9.-OtrosAmpliacion2/#metodo-join","title":"M\u00e9todo join","text":"<p>La sintaxis del m\u00e9todo <code>join()</code> es:</p> <p><code>&lt;sep&gt;.join(&lt;iterable&gt;)</code></p> <p>Donde,</p> <ul> <li><code>&lt;iterable&gt;</code> es cualquier iterable de Python que contenga subcadenas, como una lista o una tupla, y</li> <li><code>&lt;sep&gt;</code> es el separador sobre el que quieres que se unan las subcadenas.</li> </ul> <p>En esencia, el m\u00e9todo <code>join()</code> une todos los elementos en un <code>&lt;iterable&gt;</code> usando <code>&lt;sep&gt;</code> como el separador.</p> <p>Ejemplo:</p> <pre><code>def mostrar_lista(asignaturas: list):\n    print(\" - \".join(asignaturas))\n\ndef main():\n    asignaturas = ['Programaci\u00f3n', 'Entornos de Desarrollo', 'Sistemas Inform\u00e1ticos', 'FOL', 'Lenguajes de Marcas', 'Bases de Datos']\n    mostrar_lista(asignaturas)\n</code></pre> <p>El resultado mostrar\u00e1 en consola los elementos de la lista separados por la cadena de caracteres \" - \":</p> <pre><code>Programaci\u00f3n - Entornos de Desarrollo - Sistemas Inform\u00e1ticos - FOL - Lenguajes de Marcas - Bases de Datos\n</code></pre>","tags":["Software","Globales","join","Iterables con for","Return con operadores l\u00f3gicos"]},{"location":"section1/u03/teoria/PROG-U3.9.-OtrosAmpliacion2/#bucle-for-para-generar-iterables","title":"Bucle for para generar iterables","text":"<pre><code>Instrucci\u00f3n for _ in range()\n</code></pre> <pre><code>Instrucci\u00f3n for i in range()\n</code></pre> <p>La variable definida en <code>for</code> con nombre <code>_</code> indica que no vamos a usar dicha variable, sino que solo necesitamos ejecutar una instrucci\u00f3n un n\u00famero determinado de veces.</p> <p>Un ejemplo sencillo ser\u00eda crear una lista de 10 elementos con todos los valores asignados a la cadena de caracteres vac\u00eda:</p> <p><code>lista_valores = list('' for _ in range(10))</code></p> <p>Para crear listas o tuplas con elementos iterables necesitamos ejecutar el constructor <code>list()</code> o <code>[]</code> para listas o <code>tuple()</code> o <code>()</code> para tuplas.</p> <p>Un ejemplo un poco m\u00e1s complejo, ejecutando una funci\u00f3n para crear un iterable y construir una tupla, ser\u00eda el siguiente:</p> <pre><code>def pedir_asignatura(indice: int) -&gt; str:\n    asignatura = None\n    while asignatura == None:\n        try:\n            asignatura = input(f\"{indice}. \").strip()\n            if len(asignatura) &lt;= 0:\n                asignatura = None\n                raise ValueError(\"No es posible introducir una asignatura vac\u00eda.\")\n        except ValueError as e:\n            print(f\"**Error** {e}\")\n    return asignatura\n\n\ndef crear_asignaturas(num_asignaturas = 6) -&gt; tuple:\n    print(\"Introduzca las asignaturas de 1\u00ba de DAM: \")\n    asignaturas = tuple(pedir_asignatura(i + 1) for i in range(num_asignaturas))\n    return asignaturas\n\n\ndef main():\n    asignaturas_1DAM = crear_asignaturas()\n    print(asignaturas_1DAM)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Otro ejemplo ser\u00eda la creaci\u00f3n de una matriz. Las matrices son estructuras de m\u00e1s de una dimensi\u00f3n.</p> <p>Si necesitamos almacenar un tablero de ajedrez y en sus posiciones inicialmente quiero almacenar el valor 0, podemos crear una tupla con listas anidadas en su interior.</p> <p>El cerebro humano percibe esta matriz c\u00f3mo una estructura de filas y columnas:</p> <pre><code>Tablero: 8x8\n\nColumnas 0  1  2  3  4  5  6  7\nFilas\n0       [0, 0, 0, 0, 0, 0, 0, 0]\n1       [0, 0, 0, 0, 0, 0, 0, 0]\n2       [0, 0, 0, 0, 0, 0, 0, 0]\n3       [0, 0, 0, 0, 0, 0, 0, 0]\n4       [0, 0, 0, 0, 0, 0, 0, 0]\n5       [0, 0, 0, 0, 0, 0, 0, 0]\n6       [0, 0, 0, 0, 0, 0, 0, 0]\n7       [0, 0, 0, 0, 0, 0, 0, 0]\n</code></pre> <p>Podemos crearla manualmente introduciendo una a una todas las listas de la tupla:</p> <p><code>tablero = ([0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], ...)</code></p> <p>O utilizar un for para generar un iterable:</p> <pre><code>#Constante que define el valor de las celdas de la matriz inicialmente\nVALORINI = 0\n\ndef crear_fila() -&gt; list:\n    return list(VALORINI for _ in range (8))\n\n\ndef crear_tablero() -&gt; list:\n    return list(crear_fila() for _ in range (8))\n\n\ndef mostrar_matriz(tablero: list) :\n    res = \"\"\n    for fila in tablero:\n        for celda in fila:\n            res += str(celda) + \" \"\n        res += \"\\n\"\n    print(res)\n\n\ndef main():\n    tablero = crear_tablero()\n    mostrar_matriz(tablero)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>El resultado del programa ser\u00e1 el siguiente:</p> <pre><code>0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 \n</code></pre> <p>Tambi\u00e9n podemos utilizar condiciones en los propios bucles. </p> <p>En el ejemplo siguiente buscamos extraer de un conjunto los nombres que empiezan por la letra 'A':</p> <pre><code>nombres = ('Ana', 'Patri', 'David', 'Alba', 'Dario', 'Antonio', 'Ricardo', 'V\u00edcky')\nnombres_que_empiezan_por_A = {nombre for nombre in nombres if nombre[:1].upper() == 'A'}\nprint(nombres_que_empiezan_por_A)\n</code></pre> <p>El resultado del programa ser\u00e1 el siguiente:</p> <pre><code>{'Alba', 'Ana', 'Antonio'}\n</code></pre>","tags":["Software","Globales","join","Iterables con for","Return con operadores l\u00f3gicos"]},{"location":"section1/u03/teoria/PROG-U3.9.-OtrosAmpliacion2/#uso-de-operadores-logicos-para-retornar-valores-de-distintas-funciones","title":"Uso de operadores l\u00f3gicos para retornar valores de distintas funciones","text":"<p>C\u00f3mo ya sabemos, si evaluamos en Python el contenido de una variable de tipo <code>str</code> de manera l\u00f3gica, si se trata de una cadena vac\u00eda lo tomar\u00e1 como <code>False</code> y si tiene alg\u00fan contenido ser\u00e1 <code>True</code>.</p> <pre><code>def mostrar_contenido(cadena: str):\n    if cadena: #es lo mismo que si escribimos if cadena == \"\"\n        print(cadena)\n    else:\n        print(\"La variable a es una cadena vac\u00eda\")\n\ndef main():\n    mostrar_contenido('')\n    mostrar_contenido('hola')\n</code></pre> <p>El resultado ser\u00eda el siguiente:</p> <pre><code>La variable a es una cadena vac\u00eda\nhola\n</code></pre> <p>Lo mismo ocurre con el tipo de dato <code>int</code> o <code>float</code>... si es <code>0</code> Python lo considera <code>False</code> y cualquier n\u00famero distinto a <code>0</code> es considerado <code>True</code>.</p> <p>De esta manera, os pod\u00e9is encontrar programas que utilicen operadores l\u00f3gicos para retornar valores de m\u00e1s de una funci\u00f3n.</p> <p>Un ejemplo simple ser\u00eda el siguiente:</p> <pre><code>EDAD = 1\ndef bebida_alcoholica(edad: int) -&gt; str:\n    if edad &gt;= 18:\n        return \"Cubata\"\n    return \"\"\n\n\ndef bebida_sin_alcohol(edad: int) -&gt; str:\n    if edad &gt;= 12:\n        return \"Zumo\"\n    return \"Agua\"\n\n\ndef dar_bebida(cliente: tuple) -&gt; str:\n    return bebida_alcoholica(cliente[EDAD]) or bebida_sin_alcohol(cliente[EDAD]) ## \"\" evaluado como False, entonces se ejecuta la funci\u00f3n de la derecha\n\n\ndef main():\n    clientes = [(\"Antonio\", 17), (\"Ana\", 21), (\"Marta\", 8)]\n    for cliente in clientes:\n        print(cliente[0] + \" toma \" + dar_bebida(cliente))\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>La funci\u00f3n <code>dar_bebida()</code> contiene \u00fanicamente la instrucci\u00f3n <code>return</code> que eval\u00faa dos expresiones con un operador l\u00f3gico <code>or</code>. Las expresiones son funciones que a su vez retornan un valor <code>str</code>. Si ejecutamos el programa, la funci\u00f3n <code>dar_bebida()</code> con la primera tupla <code>(\"Antonio\", 17)</code> realiza lo siguiente:</p> <ol> <li>Se ejecuta la funci\u00f3n que est\u00e1 a la izquierda del operador <code>or</code>.</li> <li>Si el resultado de la funci\u00f3n <code>bebida_alcoholica()</code> es una cadena de caracteres vac\u00eda.</li> <li>Entonces, el int\u00e9rprete de Python toma esa cadena como <code>False</code>, y pasa a ejecutar la expresi\u00f3n de la derecha del    operador <code>or</code>.</li> <li>La funci\u00f3n <code>bebida_sin_alcohol()</code> para la edad <code>17</code> retorna un <code>str</code> no vac\u00eda.</li> <li>En este caso, Python entiende que el retorno de la funci\u00f3n <code>dar_bebida()</code> debe ser la cadena de caracteres que se    eval\u00faa como <code>True</code>.</li> </ol> <p>El resultado del programa ser\u00e1 el siguiente:</p> <pre><code>Antonio toma Zumo\nAna toma Cubata\nMarta toma Agua\n</code></pre>","tags":["Software","Globales","join","Iterables con for","Return con operadores l\u00f3gicos"]},{"location":"section1/u04/","title":"UD 4 - Programaci\u00f3n orientada a objetos","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software","POO"]},{"location":"section1/u04/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software","POO"]},{"location":"section1/u04/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Escribe y prueba programas sencillos, reconociendo y aplicando los fundamentos de la programaci\u00f3n orientada a objetos.</p>","tags":["Software","POO"]},{"location":"section1/u04/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han identificado los fundamentos de la programaci\u00f3n orientada a objetos.</li> <li>b) Se han escrito programas simples.</li> <li>c) Se han instanciado objetos a partir de clases predefinidas.</li> <li>d) Se han utilizado m\u00e9todos y propiedades de los objetos.</li> <li>e) Se han escrito llamadas a m\u00e9todos est\u00e1ticos.</li> <li>f) Se han utilizado par\u00e1metros en la llamada a m\u00e9todos.</li> <li>g) Se han incorporado y utilizado librer\u00edas de objetos.</li> <li>h) Se han utilizado constructores.</li> <li>i) Se ha utilizado el entorno integrado de desarrollo en la creaci\u00f3n y compilaci\u00f3n de programas simples</li> </ul>","tags":["Software","POO"]},{"location":"section1/u04/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 3 de Programaci\u00f3n orientada a objetos.</p> <ul> <li>U4: Programaci\u00f3n orientada a objetos. </li> </ul> <p>En la Unidad 3, veremos:  - Caracter\u00edsticas de POO.  - Componentes de clases y objetos.  - Constructores e instanciaci\u00f3n de objetos.  - Utilizaci\u00f3n de m\u00e9todos y propiedades.  - Utilizaci\u00f3n de m\u00e9todos est\u00e1ticos.  - Librer\u00edas de objetos.  - Entornos de desarrollo para programaci\u00f3n orientada a objetos.    </p>","tags":["Software","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/","title":"UD 4 - POO1: Ejercicios b\u00e1sicos kotlin","text":"","tags":["Software","Ejercicios","kotlin","Basico"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#p40-ejercicios-basicos","title":"P4.0 - Ejercicios B\u00e1sicos","text":"<p>Realiza aprox. los 5 \u00faltimos ejercicios de todas las relaciones que se han realizado durante las unidades u1, u2, u3. Propuesta:</p> <p>U1:  * B\u00e1sicos: 4, 6, 12, 15, 18, 20, 21, 22, 24, 25, 26 y 27.</p> <p>U2: * Sentencias condicionales: 2, 3, 6, 8 y 10. * Sentencias iterativas: 2, 4, 6, 7, 8, 13, 15, 18, 19 y 25. * Captura de excepciones: 2, 3 y 4.</p> <p>U3: * Listas y tuplas: 4, 6, 8, 9, 10 y 13. * Diccionarios: 3, 5, 6, 7, 8, 10 y 11. * Conjuntos: 1, 2, 3, 4, 5 y 6.  </p> <p>Aqu\u00ed tienes el enlace a GitHub Classroom para asignarte la tarea. A\u00f1\u00e1delos al siguiente repositorio: </p>","tags":["Software","Ejercicios","kotlin","Basico"]},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/","title":"PROG U4. Practica002 Guia45","text":""},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#guia-de-ayuda-para-realizar-los-apartados-5-al-13-del-ejercicio-45-tiempo","title":"Gu\u00eda de ayuda para realizar los apartados 5 al 13 del ejercicio 4.5 - Tiempo","text":""},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#5-metodo-incrementarttiempoboolean","title":"5. M\u00e9todo <code>incrementar(t:Tiempo):Boolean</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Incrementar el tiempo del objeto actual con el tiempo que almacena <code>t</code>.</li> <li>Si el resultado excede <code>23:59:59</code>, no modifica el tiempo y devuelve <code>false</code>.</li> <li>Si todo ok, devuelve <code>true</code>.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Convertir el tiempo actual y <code>t</code> a segundos facilita la suma.</li> <li>Validar si la suma excede los segundos equivalentes a <code>23:59:59</code> (86399 segundos).</li> <li>Pod\u00e9is crear la constante <code>MAX_SEGUNDOS</code> = 86399 en el companion object.</li> <li>Si no excede, actualizar el tiempo usando una funci\u00f3n que convierta los segundos totales de vuelta a horas, minutos y segundos.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Crea un nuevo m\u00e9todo <code>obtenerSegundos</code> para calcular y retornar los segundos totales del objeto actual.</li> <li>El m\u00e9todo <code>obtenerSegundos</code> tambi\u00e9n podr\u00e1s utilizarlo para el objeto <code>t</code> que se pasa como argumento.</li> <li>Si la suma no excede el l\u00edmite, actualiza el tiempo del objeto actual.</li> <li>Tambi\u00e9n pod\u00e9is crear otro m\u00e9todo, <code>actualizarTiempoConSegundos</code> para convertir los segundos en hora, min y seg y actualizar las propiedades del objeto. </li> </ul> </li> </ol> <p>/**     * Convierte las horas, minutos y segundos del objeto actual en un total de segundos y lo retorna.     *     * @return El tiempo total en segundos.     */    private fun obtenerSegundos(): Int {        //TODO: retornar el tiempo en segundos utilizando las propiedades hora, min y seg.    }</p> <p>/**     * Actualiza los valores de hora, minuto y segundo del objeto actual     * con base en un total de segundos.     *     * @param totalSegundos El tiempo total en segundos.     */    private fun actualizarTiempoConSegundos(totalSegundos: Int) {        //TODO: convertir segundos a hora, min y seg para actualizar las propiedades    }</p>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#6-metodo-decrementarttiempoboolean","title":"6. M\u00e9todo <code>decrementar(t:Tiempo):Boolean</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Decrementar el tiempo del objeto actual con el tiempo que almacena <code>t</code>.</li> <li>Si el resultado es menor que <code>00:00:00</code>, no modifica el tiempo y devuelve <code>false</code>.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Similar al m\u00e9todo <code>incrementar</code>, pero en lugar de sumar los segundos, los resta.</li> <li>Validar si el resultado es negativo antes de actualizar el tiempo.</li> <li>Reutiliza la funci\u00f3n auxiliar para actualizar el tiempo con los segundos restantes.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Calcula los segundos totales del objeto actual y de <code>t</code>.</li> <li>Si la resta da un resultado negativo, devuelve <code>false</code>.</li> <li>Si no es negativo, actualiza el tiempo.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#7-metodo-compararttiempoint","title":"7. M\u00e9todo <code>comparar(t:Tiempo):Int</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Comparar el tiempo del objeto actual con el tiempo de <code>t</code>, devolviendo:<ul> <li><code>-1</code> si el tiempo actual es menor.</li> <li><code>0</code> si son iguales.</li> <li><code>1</code> si el tiempo actual es mayor.</li> </ul> </li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Usa los segundos totales para realizar la comparaci\u00f3n.</li> <li>Reutiliza el m\u00e9todo <code>obtenerSegundos</code> para obtener los valores en segundos.</li> <li>Usa un bloque <code>when</code> o <code>if</code> para devolver el resultado de la comparaci\u00f3n.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Obt\u00e9n los segundos totales de ambos objetos.</li> <li>Compara los valores y devuelve el resultado.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#8-metodo-copiartiempo","title":"8. M\u00e9todo <code>copiar():Tiempo</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Crear y devolver un nuevo objeto <code>Tiempo</code> con los mismos valores que el objeto actual.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Reutiliza el constructor de la clase para crear un nuevo objeto.</li> <li>Pasa las propiedades <code>hora</code>, <code>min</code> y <code>seg</code> del objeto actual al constructor.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Retorna un nuevo objeto <code>Tiempo</code> inicializado con los valores actuales.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#9-metodo-copiarttiempotiempo","title":"9. M\u00e9todo <code>copiar(t:Tiempo):Tiempo</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Copiar el tiempo del objeto <code>t</code> en el objeto actual.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Modifica directamente las propiedades <code>hora</code>, <code>min</code> y <code>seg</code> del objeto actual con los valores de <code>t</code>.</li> <li>Este m\u00e9todo devuelve el mismo objeto que recibe como argumento de entrada.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Asigna los valores de <code>t.hora</code>, <code>t.min</code> y <code>t.seg</code> al objeto actual.</li> <li>Retorna el objeto que se le ha pasado como \u00fanico par\u00e1metro del m\u00e9todo.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#10-metodo-sumarttiempotiempo","title":"10. M\u00e9todo <code>sumar(t:Tiempo):Tiempo?</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Sumar el tiempo del objeto actual con el tiempo de <code>t</code>.</li> <li>Devuelve un nuevo objeto <code>Tiempo</code> con el resultado, o <code>null</code> si el resultado excede <code>23:59:59</code>.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Usa el m\u00e9todo <code>incrementar</code> para evitar duplicar la l\u00f3gica.</li> <li>Crea una copia del objeto actual antes de intentar la suma.</li> <li>Si <code>incrementar</code> devuelve <code>true</code>, retorna la copia actualizada. De lo contrario, retorna <code>null</code>.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Usa <code>copiar</code> para crear una copia del objeto actual.</li> <li>Aplica <code>incrementar</code> en la copia.</li> <li>Retorna la copia si la operaci\u00f3n es v\u00e1lida o <code>null</code> si no lo es.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#11-metodo-restarttiempotiempo","title":"11. M\u00e9todo <code>restar(t:Tiempo):Tiempo?</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Restar el tiempo del objeto actual con el tiempo de <code>t</code>.</li> <li>Devuelve un nuevo objeto <code>Tiempo</code> con el resultado, o <code>null</code> si el resultado es menor que <code>00:00:00</code>.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Similar al m\u00e9todo <code>sumar</code>, pero usa <code>decrementar</code>.</li> <li>Crea una copia del objeto actual antes de intentar la resta.</li> <li>Si <code>decrementar</code> devuelve <code>true</code>, retorna la copia actualizada. De lo contrario, retorna <code>null</code>.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Usa <code>copiar</code> para crear una copia del objeto actual.</li> <li>Aplica <code>decrementar</code> en la copia.</li> <li>Retorna la copia si la operaci\u00f3n es v\u00e1lida o <code>null</code> si no lo es.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#12-metodo-esmayorquettiempoboolean","title":"12. M\u00e9todo <code>esMayorQue(t:Tiempo):Boolean</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Determinar si el tiempo del objeto actual es mayor que el tiempo de <code>t</code>.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Compara los segundos totales del objeto actual y de <code>t</code>.</li> <li>Reutiliza el m\u00e9todo <code>obtenerSegundos</code>.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Retorna <code>true</code> si los segundos del objeto actual son mayores que los de <code>t</code>.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#13-metodo-esmenorquettiempoboolean","title":"13. M\u00e9todo <code>esMenorQue(t:Tiempo):Boolean</code>","text":"<ol> <li> <p>Prop\u00f3sito:</p> <ul> <li>Determinar si el tiempo del objeto actual es menor que el tiempo de <code>t</code>.</li> </ul> </li> <li> <p>Pistas:</p> <ul> <li>Similar a <code>esMayorQue</code>, pero verifica si los segundos totales son menores.</li> </ul> </li> <li> <p>L\u00f3gica:</p> <ul> <li>Retorna <code>true</code> si los segundos del objeto actual son menores que los de <code>t</code>.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/PROG-U4.-Practica002-Guia45/#consejos-generales-para-resolver-el-ejercicio","title":"Consejos Generales para Resolver el Ejercicio","text":"<ul> <li> <p>Reutilizaci\u00f3n de M\u00e9todos:</p> <ul> <li>Piensa en c\u00f3mo los m\u00e9todos existentes pueden ayudarte a implementar nuevos m\u00e9todos sin duplicar l\u00f3gica. Por ejemplo, <code>sumar</code> y <code>restar</code> reutilizan <code>incrementar</code> y <code>decrementar</code>.</li> </ul> </li> <li> <p>Creaci\u00f3n de los m\u00e9todos <code>obtenerSegundos</code> y <code>actualizarTiempoConSegundos</code>:</p> <ul> <li>Estos m\u00e9todos son clave para simplificar las operaciones de comparaci\u00f3n, suma y resta de tiempos.</li> </ul> </li> <li> <p>Pruebas Graduales:</p> <ul> <li>Implementa un m\u00e9todo a la vez y verifica su funcionamiento con casos simples en el programa principal antes de pasar al siguiente.</li> </ul> </li> <li> <p>Validaciones:</p> <ul> <li>Aseg\u00farate de manejar los casos l\u00edmite, como tiempos negativos o mayores que <code>23:59:59</code>.</li> </ul> </li> </ul>"},{"location":"section1/u04/practica/PROG-U4.-Practica002/","title":"UD 4 - POO2: Ejercicios b\u00e1sicos de POO I","text":"","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica002/#p42-ejercicios-basicos-de-poo-1-al-5","title":"P4.2 - Ejercicios b\u00e1sicos de POO 1 al 5","text":"","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica002/#ejercicio-41","title":"Ejercicio 4.1","text":"<ol> <li> <p>Crear una clase <code>Rect\u00e1ngulo</code>, con atributos <code>base</code> y <code>altura</code>. La clase debe disponer del constructor y los m\u00e9todos para calcular el <code>area</code> y el <code>perimetro</code>. Los atributos no se podr\u00e1n modificar, aunque si consultar. Por \u00faltimo, tendr\u00e1n que ser mayor que 0.</p> </li> <li> <p>Opcionalmente se puede crear el m\u00e9todo <code>toString()</code> para mostrar informaci\u00f3n sobre el rect\u00e1ngulo: <code>override fun toString() = \"\"</code>. (Pulsa Ctrl+o)</p> </li> <li> <p>En el programa principal, crear varios rect\u00e1ngulos. Mostarlos y mostrar por pantalla sus \u00e1reas y per\u00edmetros.</p> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica002/#ejercicio-42","title":"Ejercicio 4.2","text":"<ol> <li> <p>Crear una clase <code>Persona</code> que tenga <code>nombre</code>, <code>peso</code> (en kg con decimales), <code>altura</code> (en metros con decimales) y su <code>imc</code>.</p> </li> <li> <p>Crear un constructor primario con todos los atributos, excepto nombre e imc. Este \u00faltimo atributo se calcula en funci\u00f3n del peso y la altura. Por tanto no se debe poder modificar, pero si consultar.  </p> </li> <li> <p>Crear un constructor secundario que tambi\u00e9n incluya el nombre de la persona c\u00f3mo par\u00e1metro.</p> </li> <li> <p>Implementa el m\u00e9todo <code>toString</code>, representaci\u00f3n del objeto en forma de <code>String</code>:  <code>override fun toString() = \"\"</code>. (Pulsa Ctrl+o)</p> </li> <li> <p>En el <code>main()</code>, crear 3 personas diferentes (la primera sin nombre) utilizando el constructor primario y secundario. Despu\u00e9s mostrarlas por consola y a continuaci\u00f3n, realizar lo siguiente:</p> <ul> <li>Sobre la persona 1:<ul> <li>Modificar su nombre y para ello debes solicitarlo al usuario por consola. No puede ser nulo o vacio.</li> <li>Mostrar por consola s\u00f3lo el nombre, peso y altura.</li> </ul> </li> <li>Sobre la persona 3:<ul> <li>Mostrar el peso, altura y imc.</li> <li>Modificar la altura, por ejemplo a <code>1.80</code></li> <li>Mostrar el peso, altura y imc.</li> </ul> </li> <li>Sobre la persona 2:<ul> <li>Modificar la altura para que tenga el mismo valor que la persona 3.</li> <li>Mostrar la persona 2 y persona 3.</li> <li>Comparar si las dos personas son iguales, y mostrar el resultado.</li> <li>Implementa el m\u00e9todo <code>equals():boolean</code> (Pulsa Ctrl+o).</li> <li>Ejecutar la comparaci\u00f3n.</li> </ul> </li> </ul> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica002/#ejercicio-43","title":"Ejercicio 4.3","text":"<ol> <li> <p>Actualizar el ejercicio 4.2 para a\u00f1adir a la clase <code>Persona</code> el siguiente comportamiento:</p> <ul> <li>Debe retornar un saludo con su nombre... <code>saludar():String</code></li> <li>Debe retornar si altura por encima de la media (solo si altura &gt;= 1.75)... <code>alturaEncimaMedia():Boolean</code></li> <li>Debe retornar si peso por encima de la media (solo si peso &gt;= 70)... <code>pesoEncimaMedia():Boolean</code></li> <li> <p>Ser\u00eda conveniente a\u00f1adir tambi\u00e9n un m\u00e9todo <code>obtenerDescImc()</code> para usar en <code>obtenerDesc()</code>, que implemente el retorno de la descripci\u00f3n del rango de tipo de imc al que equivale su c\u00e1lculo.    </p> <ul> <li>Si el IMC es menos de 18.5, se encuentra dentro del rango de \"peso insuficiente\". </li> <li>Si el IMC est\u00e1 entre 18.5 y 24.9, se encuentra dentro del rango de \"peso saludable\". </li> <li>Si el IMC est\u00e1 entre 25.0 y 29.9, se encuentra dentro del rango de \"sobrepeso\". </li> <li>Si el IMC es 30.0 o superior, se encuentra dentro del rango de \"obesidad\".</li> </ul> <p>Nota: (Mejora: Enum class en https://www.baeldung.com/kotlin/enum)       </p> </li> <li> <p>Debe implementar tambi\u00e9n un m\u00e9todo que muestre una descripci\u00f3n completa de la persona... <code>obtenerDesc():String</code>. Por ejemplo, este m\u00e9todo mostrar\u00e1 por pantalla algo as\u00ed:</p> <p><pre><code>\"Julia con una altura de 1.72m (Por debajo de la media) y un peso 64.7kg (Por encima de la media) tiene un IMC de 21,87 (peso saludable)\". \n</code></pre>    2. Crear en el <code>main()</code> una estructura de datos con 4 o 5 personas m\u00e1s, recorrer la estructura y por cada persona debe saludar y mostrar su descripci\u00f3n completa.</p> </li> </ul> </li> <li> <p>Finalmente, revisa el IDE e intenta actualizar el modificador de visibilidad de los m\u00e9todos de tu clase c\u00f3mo os estar\u00e1 indicando... ver\u00e9is que los m\u00e9todos que realmente no van a ser llamados desde fuera de la clase te recomienda que sean privados a la misma.     De esta manera estamos <code>encapsulando</code> estos m\u00e9todos para que se puedan utilizar solo desde dentro de la clase y no sean p\u00fablicos.</p> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica002/#ejercicio-44","title":"Ejercicio 4.4","text":"<ol> <li> <p>Crear una clase <code>Coche</code>, a trav\u00e9s de la cual se pueda conocer el <code>color</code> del coche, la <code>marca</code>, el <code>modelo</code>, el <code>n\u00famero de caballos</code>, el <code>n\u00famero de puertas</code> y la <code>matr\u00edcula</code>. Crear el constructor del coche, as\u00ed como el m\u00e9todo <code>toString()</code>. </p> <ul> <li>Todas sus propiedades tendr\u00e1n tipos de datos nulables.</li> <li>Marca y modelo no podr\u00e1n ser vac\u00edos, ni nulos. Tampoco podr\u00e1n modificarse y solo se inicializar\u00e1n al crear el objeto.</li> <li>N\u00famero de caballos, n\u00famero de puertas y matr\u00edcula no podr\u00e1n modificarse, ni podr\u00e1n ser nulos.</li> <li>Color podr\u00e1 modificarse, pero no podr\u00e1 ser nulo.</li> </ul> </li> <li> <p>Recuerda que Kotlin a\u00f1ade los getters y setters con el comportamiento por defecto, por lo que no es necesario que los implementes, a no ser que tengas que a\u00f1adir alguna funcionalidad extra.</p> <ul> <li>El atributo matricula no debe permitir un valor que no tenga 7 caracteres.</li> <li>Los atributos modelo y marca siempre se devolver\u00e1n con la primera letra en may\u00fascula (getter).</li> <li>El n\u00famero de caballosdeber\u00e1 tener un valor entre 70 y 700.</li> <li>El n\u00famero de puertasno podr\u00e1 ser inferior a 3, ni superior a 5.</li> <li>Ten en cuenta todas estas condiciones a la hora de crear el constructor de la clase.</li> </ul> </li> <li> <p>En el programa principal, instancia varios coches, mu\u00e9stralos por pantalla (toString) y realiza lo siguiente: </p> <ul> <li>Intenta instanciar un coche con la marca y modelo con valores nulos o vac\u00edos y comprueba que no es posible.</li> <li>Intenta instanciar un coche con el n\u00famero de caballos con un valor inferior a 70 o superior a 700 y comprueba que no es posible.</li> <li>Intenta instanciar un coche con el n\u00famero de puertas con un valor inferior a 3 o superior a 5 y comprueba que no es posible.</li> <li>Intenta instanciar un coche con la matr\u00edcula con un valor que no tenga 7 caracteres y comprueba que no es posible.</li> <li>Intenta instanciar y modificar el color a un valor nulo y comprueba que no es posible.</li> <li>Todas estas pruebas debes hacerla capturando las excepciones que deben lanzarse desde la clase Coche cuando el valor de una propiedad no es correcto (seg\u00fan los resuisitos del ejercicio)</li> </ul> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica002/#ejercicio-45","title":"Ejercicio 4.5","text":"<ol> <li> <p>Crear una clase <code>Tiempo</code>, que refleja las horas de un d\u00eda, es dec\u00edr, desde <code>00:00:00</code> hasta <code>23:59:59</code>,  con atributos <code>hora</code>, <code>minuto</code> y <code>segundo</code>, que pueda ser construida indicando los tres atributos, s\u00f3lo hora y minuto o s\u00f3lo la hora (si no se indica, el valor de minuto o segundo ser\u00e1 0). </p> </li> <li> <p>Crear el m\u00e9todo <code>toString()</code> para mostrar el tiempo en formato: <code>XXh XXm XXs</code>.</p> </li> <li> <p>En el programa principal, debe solicitar por teclado hora, minuto y segundo de forma que se puedan omitir los segundos o los minutos (y segundos, claro) e instancie la clase <code>Tiempo</code> mostrando su valor.</p> </li> <li> <p>A tener en cuenta:  </p> <ul> <li>Si segundos o minutos es mayor que 60, se tendr\u00e1 que hacer las operaciones necesarios para incrementar la magnitud superior por el resultado del modulo de 60, qued\u00e1ndose en segundos o minutos con el resto. Es decir 65 segundos equivale a : 1 minuto y 5 segundos.</li> <li>Hora siempre tendr\u00e1 que ser menor que 24, si no, lanzar\u00e1 una excepci\u00f3n. </li> </ul> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>incrementar(t:Tiempo):Boolean</code>, que incrementa en <code>t</code>, el total del tiempo que almacena el objeto que recibe el mensaje, devolviendo false si al incrementar se superan las <code>23:59:59</code>, en cuyo caso no cambiar\u00eda nada del objeto que recibe el mensaje. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al incrementar en <code>t</code> el tiempo, mostrando un mensaje de error si devuelve <code>false</code>.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>decrementar(t:Tiempo):Boolean</code>, que decrementa en <code>t</code>, el total del tiempo que almacena el objeto que recibe el mensaje, devolviendo false si al decrementar se superan las <code>00:00:00</code>, en cuyo caso no cambiar\u00eda nada del objeto que recibe el mensaje. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al decrementar en <code>t</code> el tiempo, mostrando un mensaje de error si devuelve <code>false</code>.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>comparar(t:Tiempo):Int</code>, que compara el tiempo que almacena el objeto que recibe el mensaje con el tiempo que almacena <code>t</code>, devolviendo -1 si el tiempo del objeto que recibe el mensaje es menor que <code>t</code>, 0 si son iguales y 1 si es mayor. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al comparar el tiempo del objeto que recibe el mensaje con el tiempo de <code>t</code>.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>copiar():Tiempo</code>, que devuelve un objeto <code>Tiempo</code> con el mismo tiempo que almacena el objeto que recibe el mensaje. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al copiar el tiempo del objeto que recibe el mensaje en un nuevo objeto <code>Tiempo</code>.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>copiar(t:Tiempo):Tiempo</code>, que copia el tiempo que almacena <code>t</code> en el objeto que recibe el mensaje. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al copiar el tiempo de <code>t</code> en el objeto que recibe el mensaje.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>sumar(t:Tiempo):Tiempo?</code>, que suma el tiempo que almacena el objeto que recibe el mensaje con el tiempo que almacena <code>t</code>, devolviendo un nuevo objeto <code>Tiempo</code> con el resultado o <code>null</code> si el resultado es mayor que <code>23:59:59</code>. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al sumar el tiempo del objeto que recibe el mensaje con el tiempo de <code>t</code>.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>restar(t:Tiempo):Tiempo?</code>, que resta el tiempo que almacena el objeto que recibe el mensaje con el tiempo que almacena <code>t</code>, devolviendo un nuevo objeto <code>Tiempo</code> con el resultado o <code>null</code> si el resultado es menor que <code>00:00:00</code>. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al restar el tiempo del objeto que recibe el mensaje con el tiempo de <code>t</code>.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>esMayorQue(t:Tiempo):Boolean</code>, que devuelve true si el tiempo que almacena el objeto que recibe el mensaje es mayor que el tiempo que almacena <code>t</code>. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al comparar si el tiempo del objeto que recibe el mensaje es mayor que el tiempo de <code>t</code>.</p> </li> <li> <p>A\u00f1adir un nuevo m\u00e9todo <code>esMenorQue(t:Tiempo):Boolean</code>, que devuelve true si el tiempo que almacena el objeto que recibe el mensaje es menor que el tiempo que almacena <code>t</code>. En el programa principal, debe solicitar por teclado hora, minuto y segundo del objeto <code>t</code>. Mostrar\u00e1 por pantalla el resultado obtenido al comparar si el tiempo del objeto que recibe el mensaje es menor que el tiempo de <code>t</code>.</p> </li> </ol> <p>En el siguiente enlace ten\u00e9is ayuda con pistas para resolver los apartados 5 al 13: Gu\u00eda de ayuda para realizar los apartados 5 al 13</p>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica003/","title":"UD 4 - POO3: Ejercicios b\u00e1sicos de POO II","text":"","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica003/#p43-ejercicios-basicos-de-poo-6-al-10","title":"P4.3 - Ejercicios b\u00e1sicos de POO 6 al 10","text":"","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica003/#ejercicio-46","title":"Ejercicio 4.6","text":"<ol> <li> <p>Realizar el ejercicio 1 de Conjuntos de los \"Ejercicios b\u00e1sicos con Kotlin\" (Ejercicio 3.3.1) orientado a objetos.</p> </li> <li> <p>Te proporciono algunas pistas de una posible soluci\u00f3n:</p> <pre><code>/**\n* Clase Compra\n* @param cliente cliente que realizo la compra\n* @param dia dia de la compra\n* @param monto monto de la compra\n* @constructor Crea una compra con cliente, dia y monto\n*/\n</code></pre> <pre><code>/**\n * Clase Cliente\n * @param nombre nombre del cliente\n * @param domicilio domicilio del cliente\n * @constructor Crea un cliente con nombre y domicilio\n */\n</code></pre> <pre><code>/**\n * Clase Domicilio\n * @param calle calle del domicilio\n * @param numero numero del domicilio\n * @constructor Crea un domicilio con calle y numero\n */ \n</code></pre> </li> <li> <p>La clase Domicilio tendr\u00e1 un m\u00e9todo llamado dirCompleta()que retornar\u00e1 el domicilio completo con la calle y el n\u00famero.</p> </li> <li> <p>Las clases Compra, Cliente y Domicilio se establecer\u00e1n como data class, es decir, delante de class incluir\u00e1n el modificador data en la declaraci\u00f3n de dichas clases.</p> </li> <li> <p>Para entender mejor que es una data class, visualizar el siguiente enlace: Data classes</p> <pre><code>/**\n * Clase RepositorioCompras\n * @constructor Crea un repositorio de compras\n */\n</code></pre> </li> <li> <p>La clase <code>RepositorioCompras</code> tendr\u00e1 un m\u00e9todo para agregar una compra al repositorio y un m\u00e9todo domicilios para retornar los domicilios de cada cliente al cual se le debe enviar una factura de compra.       Esta funci\u00f3n retorna una estructura que contenga cada domicilio una sola vez.</p> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica003/#ejercicio-47","title":"Ejercicio 4.7","text":"<ol> <li> <p>Se quiere crear una clase <code>Cuenta</code> la cual se caracteriza por tener asociado un n\u00famero de cuenta y un saldo disponible. </p> </li> <li> <p>Adem\u00e1s, se puede consultar el saldo disponible, recibir abonos y realizar pagos.</p> </li> <li> <p>Crear tambi\u00e9n una clase Persona, que se caracteriza por un DNI y una lista de cuentas bancarias.</p> </li> <li> <p>La <code>Persona</code> puede tener asociada hasta 3 cuentas bancarias, y debe tener un m\u00e9todo que permita a\u00f1adir cuentas (hasta 3 el m\u00e1ximo permitido).  Las cuentas se almacenar\u00e1n en un array/vector. No usar una lista.</p> </li> <li> <p>M\u00e9todos est\u00e1ticos de la clase <code>Cuenta</code>:</p> <ul> <li>Debe contener un m\u00e9todo, <code>esMorosa</code>, que devuelva si la persona es morosa (si tienen alguna cuenta con saldo negativo). Recibir\u00e1 como par\u00e1metro el objeto <code>Persona</code> y devolver\u00e1 un booleano.</li> <li>Tambi\u00e9n contendr\u00e1 otro m\u00e9todo, <code>transferencia</code>, que realice una transferencia entre dos cuentas. Recibir\u00e1 como par\u00e1metro dos objetos <code>PersonaB</code>, dos identificacdors de cuentas y la cantidad a transferir. Devolver\u00e1 un booleano indicando si se ha podido realizar o no la operaci\u00f3n.</li> </ul> </li> <li> <p>En el programa principal, instanciar un objeto Persona con un DNI cualquiera, as\u00ed como dos objetos cuenta, una sin saldo inicial y otra con 700 euros.       La persona recibe la n\u00f3mina mensual, por lo que ingresa 1100 euros en la primera cuenta, pero tiene que pagar el alquiler de 750 euros con la segunda.       Imprimir por pantalla si la persona es morosa.</p> </li> <li> <p>Posteriormente hacer una transferencia de una cuenta a otra (de forma que todos los saldos sean positivos) y mostrar por pantalla el estado de la persona.</p> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica003/#ejercicio-48","title":"Ejercicio 4.8","text":"<ol> <li> <p>Queremos mantener una colecci\u00f3n de los libros que hemos ido leyendo, poni\u00e9ndoles una calificaci\u00f3n seg\u00fan nos haya gustado m\u00e1s o menos al leerlo.</p> </li> <li> <p>Para ello, crear la clase <code>Libro</code>, cuyos atributos son el <code>t\u00edtulo</code>, el <code>autor</code>, el <code>n\u00famero de p\u00e1ginas</code> y la <code>calificaci\u00f3n</code> que le damos entre 0 y 10.</p> </li> <li> <p>Posteriormente, crear una clase <code>ConjuntoLibros</code>, que almacena un conjunto de libros (con un vector de un tama\u00f1o fijo).       Se pueden a\u00f1adir libros que no existan (siempre que haya espacio), eliminar libros por t\u00edtulo o autor, mostrar por pantalla los libros con la mayor y menor calificaci\u00f3n y,       por \u00faltimo, mostrar un contenido de todo el conjunto.</p> </li> <li> <p>En el programa principal realizar las siguientes operaciones: crear dos libros, a\u00f1adirlos al conjunto, eliminarlos por los dos criterios (t\u00edtulo y autor) hasta que el conjunto       est\u00e9 vac\u00edo, volver a a\u00f1adir un libro y mostrar el contenido final.</p> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica003/#ejercicio-49","title":"Ejercicio 4.9","text":"<ol> <li> <p>Realizar un programa para gestionar una Lista de tareas con POO.</p> </li> <li> <p>El programa debe mostrar un men\u00fa en el que se pueda agregar (por defecto una nueva tarea tendr\u00e1 el estado pendiente), eliminar y cambiar el estado de una tarea. Tambi\u00e9n ser\u00e1 posible mostrar la lista de tareas (todas las tareas), mostrar la lista de tareas pendientes y la lista de tareas ya realizadas.</p> </li> <li> <p>Una tarea debe tener un identificador (podr\u00e1 indicarlo o generarlo autom\u00e1ticamente), una descripci\u00f3n y un estado que indique si est\u00e1 pendiente o ya fue realizada (en este caso, deber\u00e1 mostrar la fecha, con formato DD-MM-AAAA HH:MM:SS, en la que se marc\u00f3 c\u00f3mo realizada)</p> </li> <li> <p>Os muestro un ejemplo de c\u00f3mo generar una fecha:</p> <pre><code>import java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nfun main() {\n    val fechaHoraActual: LocalDateTime = LocalDateTime.now()\n    // Formatear la fecha y hora para imprimir\n    val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\")\n    val fechaFormateada: String = fechaHoraActual.format(formatter)\n    println(\"Fecha y Hora Actual: $fechaFormateada\")\n}\n</code></pre> </li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica003/#ejercicio-410","title":"Ejercicio 4.10","text":"<ol> <li>Realizar el juego del 3 en raya con POO.</li> </ol>","tags":["Software","Ejercicios","POO","Kotlin"]},{"location":"section1/u04/practica/PROG-U4.-Practica004/","title":"UD 4 - POO4: Ejercicios b\u00e1sicos de POO III","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica004/#p44-robots","title":"P4.4 - Robots","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica004/#descripcion-donde-esta-r2d2","title":"Descripci\u00f3n \u00bfD\u00f3nde est\u00e1 R2D2?","text":"<p>Calcula d\u00f3nde estar\u00e1 un robot (sus coordenadas finales) que se encuentra en una cuadr\u00edcula representada por los ejes \"x\" e \"y\".</p> <ul> <li>El robot comienza en la coordenada (0, 0).  </li> <li>Para indicarle que se mueva, le enviamos un array formado por enteros (positivos o negativos) que indican la secuencia de pasos a dar. Por ejemplo: <code>[10, 5, -2]</code> indica que primero se mueve <code>10</code> pasos, se detiene, luego <code>5</code>, se detiene, y finalmente <code>2</code>. El resultado en este caso ser\u00eda <code>(x: -5, y: 12)</code> </li> <li>Si el n\u00famero de pasos es negativo, se desplazar\u00eda en sentido contrario al que est\u00e1 mirando.   </li> <li>Los primeros pasos los hace en el eje \"y\". Interpretamos que est\u00e1 mirando hacia la parte positiva del eje \"y\".   </li> <li>El robot tiene un fallo en su programaci\u00f3n: cada vez que finaliza una secuencia de pasos gira 90 grados en el sentido contrario a las agujas del reloj.</li> </ul> <p>No te olvides lo aprendido en las primeras unidades. Estructura condicionales, repetitivas, comentarios, etc.</p> <p>Tras los siguientes movimientos: <pre><code>[10, 5, -2]\n[0, 0, 0]\n[]\n[-10, -5, 2]\n[-10, -5, 2, 4, -8]\n</code></pre> Las salidas son estas: <pre><code>x: -5, y: 12, direction: POSITIVEX\nx: 0, y: 0, direction: POSITIVEX\nx: 0, y: 0, direction: POSITIVEY\nx: 5, y: -12, direction: POSITIVEX\nx: 9, y: -20, direction: NEGATIVEX\n</code></pre></p>","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica004/#parte-1","title":"PARTE 1","text":"<ol> <li> <p>Crear una versi\u00f3n del programa \u00bfD\u00f3nde est\u00e1 R2D2?, pero ORIENTADO A OBJETOS.</p> </li> <li> <p>La clase Robot debe tener 4 propiedades: <code>nombre</code>, <code>posX</code>, <code>posY</code> y <code>direccion</code>. Tambi\u00e9n tendr\u00e1 un comportamiento por medio de 3 m\u00e9todos: <code>mover()</code>, <code>obtenerPosicion()</code> y <code>obtenerDireccion()</code>.</p> </li> <li> <p>El m\u00e9todo <code>mover()</code> debe recibir un array de elementos enteros y no retornar\u00e1 nada, ya que los cambios quedar\u00e1n almacenados en las propiedades del mismo.</p> </li> <li> <p>El m\u00e9todo <code>obtenerDireccion()</code> no recibe par\u00e1metros y retorna una cadena de caracteres con la direcci\u00f3n <code>PositiveX</code>, <code>NegativeX</code>, <code>PositiveY</code> o <code>NegativeY</code>. (Posible mejora con <code>enum class</code> Enum classes)</p> </li> <li> <p>El m\u00e9todo <code>obtenerPosicion()</code> debe devolver la posici\u00f3n. Ejemplo: <code>(10, -5)</code>.</p> </li> <li> <p>Describe la posici\u00f3n actual del robot en el m\u00e9todo <code>toString()</code>. (Pulsa Ctrl+o) Ejemplo: <code>R2D2 est\u00e1 en (10, -5) PositiveX</code></p> </li> <li> <p>Un objeto de la clase Robot debe inicializarse siempre en la posici\u00f3n <code>(0, 0)</code> y la direcci\u00f3n eje Y positivo (hacia arriba) <code>PositiveY</code> cuando se instancia. En esta versi\u00f3n ya no va a moverse siempre desde la posici\u00f3n <code>(0,0)</code>, sino que lo har\u00e1 desde la \u00faltima posici\u00f3n y direcci\u00f3n d\u00f3nde se qued\u00f3 al realizar su \u00faltimo movimiento.</p> </li> <li> <p>En este programa, vamos a realizar los mismos movimientos, pero el robot comenzar\u00e1 cada movimiento en la posici\u00f3n final despu\u00e9s de realizar el movimiento anterior.</p> </li> <li> <p>En el main debes crear un objeto de Robot (o una variable de tipo Robot) con el nombre <code>R2D2</code>. El nombre de la variable que utilices para crearlo puede ser <code>robot1</code>.</p> </li> <li> <p>La clase Robot debe obligar a introducir un nombre que no est\u00e9 vac\u00edo.</p> </li> <li> <p>Cread los movimientos en un array de arrays y recorrerlos para realizar en cada iteraci\u00f3n los movimientos del robot y mostrar la posici\u00f3n del mismo al finalizar cada uno. En cada iteraci\u00f3n del bucle llamaremos al m\u00e9todo <code>mover()</code> y mostraremos por consola el contenido del robot, es decir, el m\u00e9todo <code>toString()</code>.</p> </li> </ol> <p>Un ejemplo de una estructura que pod\u00e9is utilizar para los movimientos ser\u00eda la siguiente:</p> <pre><code>[\n   [1, -5, 0, -9],\n   [3, 3, 5, 6, 1, 0, 0, -7],\n   [2, 1, 0, -1, 1, 1, -4],\n   [],\n   [3, 5]\n]\n</code></pre> <p>La salida correcta del programa ser\u00eda la siguiente:</p> <pre><code>R2D2 est\u00e1 en (-4, 1) PositiveY\nR2D2 est\u00e1 en (-8, 0) PositiveY\nR2D2 est\u00e1 en (-11, 7) PositiveX\nR2D2 est\u00e1 en (-11, 7) PositiveX\nR2D2 est\u00e1 en (-8, 12) NegativeX\n</code></pre>","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica005/","title":"UD 4 - POO5: Ejercicios b\u00e1sicos de POO IV","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica005/#p45-robots-con-reto-incluido","title":"P4.5 - Robots (con RETO incluido)","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica005/#parte-2","title":"PARTE 2","text":"<ol> <li> <p>Crear varios robots en una estructura de datos.</p> </li> <li> <p>Los robots ser\u00e1n <code>R2D2</code>, <code>DAW1A</code>, <code>DAW1B</code> y <code>DAM1</code>.</p> </li> <li> <p>RETO: En la clase Robot deb\u00e9is realizar una modificaci\u00f3n para que la clase reciba una funci\u00f3n tipo que modifique la direcci\u00f3n del mismo seg\u00fan la info siguiente:</p> <ul> <li> <p><code>R2D2</code> sigue igual, comienza en <code>(0, 0)</code> y <code>PositiveY</code> cuando se instancia el objeto y realiza un giro de <code>-90\u00ba</code> al detenerse en cada movimiento.</p> </li> <li> <p><code>DAW1A</code> comienza en una posici\u00f3n aleatoria entre <code>-5</code> y <code>5</code> para <code>x</code> y en el eje <code>y</code> en <code>0</code>. La direcci\u00f3n ser\u00e1 <code>PositiveX</code>.     Al detenerse, si su valor de la posici\u00f3n <code>x es positiva</code> gira <code>180\u00ba</code> y si su valor de la posici\u00f3n <code>x es negativa</code> gira <code>90\u00ba</code>.</p> </li> <li> <p><code>DAW1B</code> comienza en la posici\u00f3n <code>x = 0</code>, pero la posici\u00f3n <code>y</code> es aleatoria entre <code>-10</code> y <code>10</code>. Su direcci\u00f3n inicial ser\u00e1 <code>aleatoria</code>.     La direcci\u00f3n que toma al detenerse ser\u00e1 <code>-90\u00ba</code> si el valor de su posici\u00f3n <code>y</code> es positivo y <code>270\u00ba</code> si el valor de su posici\u00f3n <code>y</code> es negativo.</p> </li> <li> <p><code>DAM1</code> comienza en en una posici\u00f3n aleatoria entre <code>-5</code> y <code>5</code> en cada eje. La direcci\u00f3n inicial es <code>aleatoria</code>.     Debe tomar una tambi\u00e9n una direcci\u00f3n totalmente aleatoria al detenerse entre cada movimiento, <code>siempre que no sea la misma en la que estaba</code>.</p> </li> </ul> </li> <li> <p>Si no sois capaces de realizar estos cambios pas\u00e1ndole una <code>funci\u00f3n como par\u00e1metro</code> a la clase, pod\u00e9is realizarlo de otra forma (con sentido), pero que cada robot tenga el comportamiento que se indica al moverse con la direcci\u00f3n.</p> </li> <li> <p>El programa debe pedirme un n\u00famero de movimientos por consola y ejecutar esos movimientos con todos los robots, indicando su posici\u00f3n y direcci\u00f3n final.       Los movimientos deben ser n\u00fameros enteros comprendidos entre <code>-20</code> y <code>20</code>.</p> </li> </ol>","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica006/","title":"UD 4 - POO6: Prueba","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica006/#practica-de-clase-1-poo","title":"Pr\u00e1ctica de clase 1 - POO","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica006/#desarrolla-un-programa-con-las-siguientes-clases","title":"Desarrolla un programa con las siguientes clases:","text":"<ul> <li>Clase <code>Cafetera</code> con atributos <code>ubicacion</code> (nombre de la sala o habitaci\u00f3n d\u00f3nde se encuentra), <code>capacidad</code> (la cantidad m\u00e1xima de caf\u00e9 que puede contener la cafetera) y <code>cantidad</code> (la cantidad actual de caf\u00e9 que hay en la cafetera).   </li> </ul> <p>Implementa, al menos, lo siguiente:   </p> <ul> <li>En la clase se debe establecer la <code>capacidad</code> m\u00e1xima en 1000 (c.c.) y la <code>cantidad</code> actual en cero (cafetera vac\u00eda).</li> <li><code>Constructor primario</code> con la <code>ubicacion</code>.</li> <li><code>Constructor secundario</code> con la <code>ubicaci\u00f3n</code> y la <code>capacidad</code> m\u00e1xima de la cafetera. Inicializa la <code>cantidad</code> actual de caf\u00e9 igual a la <code>capacidad</code> m\u00e1xima.</li> <li><code>Constructor secundario</code> con la <code>ubicacion</code>, la <code>capacidad</code> m\u00e1xima y la <code>cantidad</code> actual. Si la <code>cantidad</code> actual es mayor que la <code>capacidad</code> m\u00e1xima de la cafetera, la ajustar\u00e1 al m\u00e1ximo.</li> <li><code>llenar()</code>: hace que la <code>cantidad</code> actual sea igual a la <code>capacidad</code>.</li> <li><code>servirTaza(Taza)</code>: simula la acci\u00f3n de servir una <code>taza</code> con la <code>capacidad</code> que tenga la taza. Si la cafetera tiene caf\u00e9, llenar\u00e1 la taza y restar\u00e1 la cantidad servida en la cantidad de la cafetera.      Si la cantidad actual de caf\u00e9 \u201cno alcanza\u201d para llenar la taza, se sirve lo que quede. Actualizar la cantidad de la cafetera y aplicar el m\u00e9todo adecuado de la taza.</li> <li><code>vaciar()</code>: pone la <code>cantidad</code> de caf\u00e9 actual en cero.</li> <li><code>agregarCafe(Int)</code>: a\u00f1ade a la cafetera la <code>cantidad</code> de caf\u00e9 indicada. Por defecto a\u00f1ade 200 c.c. No se puede a\u00f1adir m\u00e1s cantidad que su capacidad m\u00e1xima, si ocurriera esta circunstancia, simplemente llenar\u00edamos la cantidad de la cafetera a su capacidad m\u00e1xima.</li> <li><code>toString()</code>: debe retornar por ejemplo \"Cafetera(ubicaci\u00f3n = Sal\u00f3n, capacidad = 1000 c.c., cantidad = 0 c.c.)\" </li> </ul> <p>Ademas:</p> <ul> <li>Clase Taza, que tendr\u00e1 los atributos <code>color</code>, <code>capacidad</code> y <code>cantidad</code>.</li> </ul> <p>Implementa, al menos, lo siguiente:</p> <ul> <li>Un \u00fanico <code>constructor</code> con el <code>color</code> (por defecto blanco) y la <code>capacidad</code> (por defecto 50 c.c.). La clase tambi\u00e9n contendr\u00e1 un atributo con la <code>cantidad</code> que se establcer\u00e1 a 0.</li> <li>La propiedad <code>cantidad</code> debe modificarse para que si el valor que recibe es mayor que la capacidad de la taza, solo establezca el valor de dicha capacidad.</li> <li>El m\u00e9todo <code>llenar()</code> que establecer\u00e1 la cantidad de la taza a su m\u00e1xima capacidad.</li> <li>El m\u00e9todo \"sobrecargado\" <code>llenar(Int)</code> que establecer\u00e1 la cantidad de la taza a la cantidad pasada como argumento al m\u00e9todo.</li> <li>Sobreescribir el m\u00e9todo <code>toString()</code>, que debe retornar por ejemplo \"Taza(color = BLANCO, capacidad = 50 c.c., cantidad = 30 c.c.)\" </li> </ul> <p>Por \u00faltimo:</p> <ul> <li>Clase enumerada <code>Color</code>, que contendr\u00e1 los colores disponibles: blanco, negro, gris, azul y verde.</li> </ul> <p>En el programa principal se deben crear 3 cafeteras de capacidad 1000, 750 y 500 c.c. con 0, 750 y 200 c.c de cantidad respectivamente. Para crear cada cafetera, deb\u00e9is utilizar un constructor diferente. Tambi\u00e9n deb\u00e9is generar una lista de 20 tazas con la capacidad de 50, 75 y 100 de manear aleatoria. Implementar el resto de comentarios TODO de la funci\u00f3n main().</p> <p>NOTA: La sobrecarga de m\u00e9todos se refiere a la capacidad de definir varios m\u00e9todos en una clase con el mismo nombre pero con diferentes par\u00e1metros. Esto permite que una clase tenga varios m\u00e9todos con la misma firma (nombre de m\u00e9todo) pero con listas de par\u00e1metros diferentes.  La sobrecarga de m\u00e9todos facilita la legibilidad del c\u00f3digo y proporciona flexibilidad al programador al permitirle utilizar el mismo nombre de m\u00e9todo para realizar operaciones similares pero con diferentes conjuntos de datos.     </p> <p>Main Principal del ejercicio: </p> <pre><code>```Kotlin\nfun main() {\n\n    //TODO: Crear 3 cafeteras en la Sala, Cocina y Oficina\n\n\n    //TODO: Crear una lista de 20 tazas con capacidades aleatorias\n\n\n    println(\"**********************************************\")\n    //TODO: Mostrar por pantalla el contenido de las 3 cafeteras y las tazas.\n\n\n    println(\"**********************************************\")\n    println(\"Llenar la cafetera1 de caf\u00e9...\")\n    println(\"Vaciar la cafetera2...\")\n    println(\"Agregar caf\u00e9 a la cafetera2 a la mitad de su capacidad...\")\n    println(\"Agregar 400 c.c. de caf\u00e9 a la cafereta3...\")\n\n    //TODO: Llenar la cafetera1 de caf\u00e9.\n\n\n    //TODO: Vaciar la cafetera2.\n\n\n    //TODO: Agregar caf\u00e9 a la cafetera2 a la mitad de su capacidad.\n\n\n    //TODO: Agregar 400 c.c. de caf\u00e9 a la cafereta3\n\n\n    println(\"**********************************************\")\n    //TODO: Mostrar por pantalla el contenido de las 3 cafeteras\n\n\n    println(\"**********************************************\")\n    println(\"Servir caf\u00e9 en las tazas...\")\n\n    //TODO: Servir caf\u00e9 en las tazas... siempre que haya caf\u00e9 en la cafetera y en el orden cafetera1, cafetera2 y cafetera3.\n\n\n    println(\"**********************************************\")\n    //TODO: Mostrar por pantalla el contenido de las 3 cafeteras y las tazas.\n\n\n}\n</code></pre>","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica007/","title":"UD 4 - POO7: Trabajo en grupos","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica007/#practica-en-grupos-juego-del-ahorcado","title":"Pr\u00e1ctica en grupos - Juego del Ahorcado","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica007/#abre-el-siguiente-repositorio-publico-y-lee-atentamente-las-instrucciones-prog2425_poo_ahorcadoalumnos","title":"Abre el siguiente repositorio p\u00fablico y lee atentamente las instrucciones: PROG2425_POO_AhorcadoAlumnos","text":"","tags":["Software","Ejercicios","POO"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/","title":"UD 4 - POO8: Cambio de rol","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#practica-en-grupos-cambio-de-rol-explicamelo-tu","title":"Pr\u00e1ctica en Grupos: \"Cambio de Rol\" - Expl\u00edcamelo t\u00fa","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#objetivo-general","title":"Objetivo General","text":"<p>Deb\u00e9is investigar y profundizar en uno de los temas asignados, preparar una presentaci\u00f3n din\u00e1mica y pr\u00e1ctica, para exponerlo al resto de la clase. El objetivo es que todos los estudiantes se conviertan temporalmente en profesores, reforzando su aprendizaje mientras comparten conocimientos.</p>","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#temas-a-trabajar","title":"Temas a Trabajar","text":"<p>Cada grupo de trabajo estar\u00e1 compuesto por 3-4 alumnos. La mitad de los grupos trabajar\u00e1n en el tema 1 y la otra mitad en el tema 2.</p>","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#tema-1-expresiones-regulares-funciones-de-extension","title":"Tema 1: Expresiones Regulares + Funciones de Extensi\u00f3n","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#1-que-es-una-expresion-regular","title":"1. \u00bfQu\u00e9 es una expresi\u00f3n regular?","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#2-para-que-se-usan","title":"2. \u00bfPara qu\u00e9 se usan?","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#3-explica-las-expresiones-regulares-con-un-ejemplo-practico","title":"3. Explica las expresiones regulares con un ejemplo pr\u00e1ctico.","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#4-localiza-en-la-practica-del-ahorcado-donde-se-utiliza-una-expresion-regular-analiza-y-explica-el-codigo-en-detalle","title":"4. Localiza en la pr\u00e1ctica del Ahorcado d\u00f3nde se utiliza una expresi\u00f3n regular. Analiza y explica el c\u00f3digo en detalle.","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#5-que-es-una-funcion-de-extension","title":"5. \u00bfQu\u00e9 es una funci\u00f3n de extensi\u00f3n?","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#6-desarrolla-y-explica-una-funcion-de-extension-que-se-llame-filtrar-para-la-clase-liststring-esta-funcion-debe-utilizar-una-expresion-regular-para-filtrar-los-elementos-de-la-lista-el-resultado-sera-una-lista-con-los-elementos-que-coincidan-con-el-patron-que-se-pasara-a-dicha-funcion","title":"6. Desarrolla y explica una funci\u00f3n de extensi\u00f3n que se llame <code>filtrar</code> para la clase <code>List&lt;String&gt;</code>. Esta funci\u00f3n debe utilizar una expresi\u00f3n regular para filtrar los elementos de la lista. El resultado ser\u00e1 una lista con los elementos que coincidan con el patr\u00f3n que se pasar\u00e1 a dicha funci\u00f3n.","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#nota-esta-funcion-debe-emular-el-comportamiento-del-metodo-filter","title":"Nota: Esta funci\u00f3n debe emular el comportamiento del m\u00e9todo <code>filter</code>.","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#tema-2-genericos","title":"Tema 2: Gen\u00e9ricos","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#1-que-son-los-genericos","title":"1. \u00bfQu\u00e9 son los gen\u00e9ricos?","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#2-para-que-o-donde-se-usan","title":"2. \u00bfPara qu\u00e9 o d\u00f3nde se usan?","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#3-explica-los-genericos-con-un-ejemplo-practico","title":"3. Explica los gen\u00e9ricos con un ejemplo pr\u00e1ctico.","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#4-localiza-en-la-practica-del-ahorcado-donde-se-utilizan-genericos-analiza-y-explica-el-codigo-en-detalle","title":"4. Localiza en la pr\u00e1ctica del Ahorcado d\u00f3nde se utilizan gen\u00e9ricos. Analiza y explica el c\u00f3digo en detalle.","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#5-que-es-una-funcion-de-extension_1","title":"5. \u00bfQu\u00e9 es una funci\u00f3n de extensi\u00f3n?","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#6-desarrolla-y-explica-una-funcion-de-extension-que-se-llame-filtrar-esta-funcion-debe-ser-generica-y-aplicarse-a-cualquier-lista-de-elementos-listt-recibiendo-como-parametro-una-funcion-de-tipo-t-boolean-esta-funcion-debe-devolver-una-lista-con-los-elementos-que-cumplan-la-condicion-especificada-como-parametro-de-entrada","title":"6. Desarrolla y explica una funci\u00f3n de extensi\u00f3n que se llame <code>filtrar</code>. Esta funci\u00f3n debe ser gen\u00e9rica y aplicarse a cualquier lista de elementos (<code>List&lt;T&gt;</code>), recibiendo como par\u00e1metro una funci\u00f3n de tipo <code>(T) -&gt; Boolean</code>. Esta funci\u00f3n debe devolver una lista con los elementos que cumplan la condici\u00f3n especificada como par\u00e1metro de entrada.","text":"","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/PROG-U4.-Practica008/#metodologia-de-trabajo","title":"Metodolog\u00eda de Trabajo","text":"<ol> <li>Formaci\u00f3n de los grupos:</li> <li> <p>Se mantendr\u00e1n los grupos asignados para la pr\u00e1ctica del juego del \"Ahorcado\".</p> </li> <li> <p>Investigaci\u00f3n:</p> </li> <li> <p>Cada grupo investigar\u00e1 su tema con el apoyo de documentaci\u00f3n oficial, tutoriales, pr\u00e1cticas vistas en clase y la IA.</p> </li> <li> <p>Preparaci\u00f3n de la exposici\u00f3n:</p> </li> <li> <p>Cada grupo debe organizar su presentaci\u00f3n, que debe incluir:</p> <ul> <li>Explicaciones claras de los conceptos.</li> <li>Ejemplos pr\u00e1cticos con c\u00f3digo.</li> <li>Demostraciones en vivo usando un IDE (por ejemplo, IntelliJ IDEA o Android Studio).</li> </ul> </li> <li> <p>Exposici\u00f3n:</p> </li> <li>Cada grupo tendr\u00e1 10 minutos para exponer su tema, con 5 minutos adicionales para preguntas del resto de la clase.</li> <li> <p>Durante la exposici\u00f3n, deben asegurarse de:</p> <ul> <li>Explicar los conceptos te\u00f3ricos.</li> <li>Mostrar y ejecutar el c\u00f3digo desarrollado.</li> <li>Resolver cualquier duda que surja.</li> </ul> </li> <li> <p>Discusi\u00f3n y evaluaci\u00f3n:</p> </li> <li>Al finalizar ambas presentaciones, se abrir\u00e1 un espacio para que todos los alumnos discutan y comparen las soluciones presentadas.</li> <li>Se evaluar\u00e1 el trabajo en grupo y la claridad de la exposici\u00f3n.</li> </ol>","tags":["Software","Ejercicios","Regex","Gen\u00e9ricos","Funciones de extensi\u00f3n"]},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Ejemplo/","title":"Companion Objects en Kotlin Una Gu\u00eda Completa Ejemplo","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Ejemplo/#ejemplo-extendido-creacion-de-usuarios-anonimos-y-normalizados","title":"Ejemplo extendido: Creaci\u00f3n de usuarios an\u00f3nimos y normalizados","text":"<p>Usando un companion object, podemos a\u00f1adir l\u00f3gica adicional para crear usuarios con diferentes reglas:</p> <p>class private Usuario(val nombre: String) {     val id: Int</p> <pre><code>companion object {  \n    private var ultimoId \\= 0\n\n    private fun generarId(): Int {  \n        ultimoId++  \n        return ultimoId  \n    }\n\n     private fun normaliza(nombre:String): String {\n</code></pre> <p>return nombre.trim().capitalize()          }</p> <pre><code>    fun crearAnonimo(): Usuario {  \n        return Usuario(\"An\u00f3nimo\")  \n    }\n\n    fun crearNormalizado(nombre: String): Usuario {  \n        val nombreNormalizado \\= normaliza(nombre)  \n        return Usuario(nombreNormalizado)  \n    }  \n}\n\ninit {  \n    id \\= generarId()  \n}\n</code></pre> <p>}</p> <p>fun main() {     val usuarioAnonimo = Usuario.crearAnonimo()     val usuarioNormalizado = Usuario.crearNormalizado(\"   martina   \")</p> <pre><code>println(\"Usuario an\u00f3nimo: \\\\${usuarioAnonimo.nombre}, ID: \\\\${usuarioAnonimo.id}\")  \nprintln(\"Usuario normalizado: \\\\${usuarioNormalizado.nombre}, ID: \\\\${usuarioNormalizado.id}\")\n</code></pre> <p>}</p> <p>Salida esperada:</p> <p>Usuario an\u00f3nimo: An\u00f3nimo, ID: 1 Usuario normalizado: Martina, ID: 2  </p> <p>Con estos conceptos, est\u00e1s listo para aplicar los companion objects en tus proyectos, aprovechando su flexibilidad para centralizar l\u00f3gicas comunes y mantener un c\u00f3digo organizado. Ahora procederemos al ejercicio de aplicaci\u00f3n pr\u00e1ctica.</p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Ejercicio/","title":"Companion Objects en Kotlin Una Gu\u00eda Completa Ejercicio","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Ejercicio/#ejercicio-generador-de-pokemon","title":"Ejercicio: Generador de Pok\u00e9mon","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Ejercicio/#descripcion-del-ejercicio","title":"Descripci\u00f3n del ejercicio","text":"<p>Vas a construir un programa para gestionar Pok\u00e9mon utilizando companion objects en Kotlin. Este ejercicio te ayudar\u00e1 a entender c\u00f3mo usar companion objects para generar IDs \u00fanicos y l\u00f3gica compartida.</p> <p>Tendr\u00e1s dos clases principales:</p> <ol> <li>Clase ************************************<code>Pokemon</code>:  </li> <li>Representar\u00e1 un Pok\u00e9mon con los siguientes atributos:  <ul> <li><code>nombre</code>: Nombre del Pok\u00e9mon (String).  </li> <li><code>tipo</code>: Tipo del Pok\u00e9mon (String, como \"El\u00e9ctrico\", \"Agua\").  </li> <li><code>poderBase</code>: Poder base del Pok\u00e9mon (Int).  </li> <li><code>id</code>: ID \u00fanico del Pok\u00e9mon (generado autom\u00e1ticamente por el companion object).  </li> </ul> </li> <li>Incluir\u00e1 un companion object que:  <ul> <li>Genere IDs \u00fanicos para cada Pok\u00e9mon.  </li> <li>Permita crear un Pok\u00e9mon pasando parametros, y de forma aleatoria a partir de una lista predefinida.  </li> </ul> </li> <li>Clase ************************************<code>GestorPokemon</code>:  </li> <li>Gestionar\u00e1 una lista de Pok\u00e9mon registrados.  </li> <li>Incluir\u00e1 m\u00e9todos para:  <ul> <li>Registrar un Pok\u00e9mon manualmente.  </li> <li>Registrar un Pok\u00e9mon aleatorio.  </li> <li>Devolver una lista de todos los Pok\u00e9mon registrados.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Ejercicio/#requisitos","title":"Requisitos","text":"<ol> <li>Implementa las clases <code>Pokemon</code> y <code>GestorPokemon</code> siguiendo la descripci\u00f3n.  </li> <li>En el programa principal, crea tres Pok\u00e9mon manualmente y al menos uno aleatorio.  </li> <li>Usa el m\u00e9todo <code>mostrarPokemon()</code> para imprimir la lista completa de Pok\u00e9mon registrados.</li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/","title":"Companion Objects en Kotlin Una Gu\u00eda Completa Plantilla","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#plantilla-para-el-ejercicio-generador-de-pokemon","title":"Plantilla para el Ejercicio: Generador de Pok\u00e9mon","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#descripcion-del-ejercicio","title":"Descripci\u00f3n del ejercicio","text":"<p>En este ejercicio, implementar\u00e1s una aplicaci\u00f3n para gestionar Pok\u00e9mon. Completar\u00e1s una clase <code>Pokemon</code> con un companion object que se usar\u00e1 para:</p> <ol> <li>Generar un ID \u00fanico para cada Pok\u00e9mon.  </li> <li>Crear Pok\u00e9mon de manera aleatoria.</li> </ol> <p>Tambi\u00e9n usar\u00e1s la clase <code>GestorPokemon</code> para registrar y mostrar los Pok\u00e9mon.</p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#codigo-base","title":"C\u00f3digo base","text":"<p>Te proporcionamos el siguiente c\u00f3digo base. Completa las secciones marcadas con <code>TODO</code>.</p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#clase-pokemon","title":"Clase <code>Pokemon</code>","text":"<p>import kotlin.random.Random</p> <p>class private Pokemon(val nombre: String, val tipo: String, val poderBase: Int) {     val id: Int</p> <pre><code>companion object {  \n    // TODO: Declara una variable para almacenar el \u00faltimo ID generado\n\n    // TODO: Crea un m\u00e9todo para generar IDs \u00fanicos\n\n    // TODO: Crea un m\u00e9todo para generar un Pok\u00e9mon aleatorio\n\n    // TODO: Crea un m\u00e9todo para crear un Pok\u00e9mon\n\n}\n\ninit {  \n    // TODO: Inicializa el ID usando el m\u00e9todo del companion object  \n}\n</code></pre> <p>}</p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#clase-gestorpokemon","title":"Clase <code>GestorPokemon</code>","text":"<p>class GestorPokemon {     // TODO: Estructura en la que almacenaras tus pokemons     private val pokemons =....</p> <p>// TODO: Registra tus pokemons    fun registrarPokemon(nombre: String, tipo: String, poderBase: Int): Pokemon {         \u2026         return nuevoPokemon     }</p> <p>// TODO: Estructura en la que almacenaras tus pokemons aleatorios      fun registrarPokemonAleatorio(): Pokemon {         \u2026         return pokemonAleatorio     }</p> <p>// TODO: Obtener los pokemons      fun obtenerPokemon(): \u2026.. {         \u2026         }     } }</p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#_1","title":"Companion Objects en Kotlin Una Gu\u00eda Completa Plantilla","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#_2","title":"Companion Objects en Kotlin Una Gu\u00eda Completa Plantilla","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#programa-principal","title":"Programa principal","text":"<p>fun main() {     val gestor = GestorPokemon()</p> <pre><code>// Registrar Pok\u00e9mon manualmente  \ngestor.registrarPokemon(\"Pikachu\", \"El\u00e9ctrico\", 55\\)  \ngestor.registrarPokemon(\"Charmander\", \"Fuego\", 52\\)\n\n// Registrar un Pok\u00e9mon aleatorio  \nprintln(\"Generando Pok\u00e9mon aleatorio...\")  \ngestor.registrarPokemonAleatorio()\n\n// TODO: Mostrar todos los Pok\u00e9mon registrados  \nprintln(\"\\\\nLista de Pok\u00e9mon registrados:\")  \nvar pokemon \\= gestor.mostrarPokemon()\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#_3","title":"}","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#pista-para-el-companion-object","title":"Pista para el Companion Object","text":"<ol> <li>Usa una variable <code>private var</code> para llevar el control del \u00faltimo ID generado.    Crea una lista de triples con nombres, tipos y poderes base de Pok\u00e9mon predefinidos. Por ejemplo:  </li> </ol> <p>private val nombresYPropiedades = listOf(</p> <pre><code>Triple(\"Pikachu\", \"El\u00e9ctrico\", 55),  \nTriple(\"Charmander\", \"Fuego\", 52),  \nTriple(\"Bulbasaur\", \"Planta\", 49\\)\n</code></pre> <ol> <li>Usa el m\u00e9todo <code>.random()</code> de Kotlin para seleccionar un elemento aleatorio de la lista.</li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Plantilla/#entregables","title":"Entregables","text":"<ol> <li>Completa la clase <code>Pokemon</code> con el companion object.  </li> <li>Aseg\u00farate de que el programa genera IDs \u00fanicos y permite registrar Pok\u00e9mon tanto manual como aleatoriamente.  </li> <li>Sube el c\u00f3digo completo y funcional.</li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Solucion/","title":"Companion Objects en Kotlin Una Gu\u00eda Completa Solucion","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Solucion/#pista-de-implementacion","title":"Pista de implementaci\u00f3n","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Solucion/#clase-pokemon","title":"Clase <code>Pokemon</code>","text":"<pre><code>class Pokemon private constructor(val nombre: String, val tipo: String, val poderBase: Int) {\nval id: Int\n\n    companion object {\n        private var ultimoId = 0\n        private val nombresYPropiedades = listOf(\n            Triple(\"Pikachu\", \"El\u00e9ctrico\", 55),\n            Triple(\"Charmander\", \"Fuego\", 52),\n            Triple(\"Bulbasaur\", \"Planta\", 49),\n            Triple(\"Squirtle\", \"Agua\", 48),\n            Triple(\"Jigglypuff\", \"Normal\", 45),\n            Triple(\"Meowth\", \"Normal\", 40),\n            Triple(\"Eevee\", \"Normal\", 55),\n            Triple(\"Snorlax\", \"Normal\", 110),\n            Triple(\"Gengar\", \"Fantasma\", 65),\n            Triple(\"Dragonite\", \"Drag\u00f3n\", 134)\n        )\n\n        private fun generarId(): Int {\n            return ++ultimoId\n        }\n\n        fun generarPokemonAleatorio(): Pokemon {\n            val (nombre, tipo, poderBase) = nombresYPropiedades.random()\n            return crearPokemon(nombre, tipo, poderBase)\n        }\n\n        fun crearPokemon(nombre: String, tipo: String, poderBase: Int): Pokemon {\n            return Pokemon(nombre, tipo, poderBase)\n        }\n    }\n\n    init {\n        id = generarId()\n    }\n}\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Solucion/#clase-gestorpokemon","title":"Clase <code>GestorPokemon</code>","text":"<pre><code>class GestorPokemon {\n    private val pokemons = mutableListOf&lt;Pokemon&gt;()\n\n    fun registrarPokemon(nombre: String, tipo: String, poderBase: Int): Pokemon {\n        val nuevoPokemon = Pokemon.crearPokemon(nombre, tipo, poderBase)\n        pokemons.add(nuevoPokemon)\n        return nuevoPokemon\n    }\n\n    fun registrarPokemonAleatorio(): Pokemon {\n        val pokemonAleatorio = Pokemon.generarPokemonAleatorio()\n        pokemons.add(pokemonAleatorio)\n        return pokemonAleatorio\n    }\n\n    fun obtenerPokemon() : List&lt;Pokemon&gt; {\n        return pokemons.toList()\n    }\n}\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Solucion/#programa-principal","title":"Programa principal","text":"<pre><code>fun main() {\n    val gestor = GestorPokemon()\n\n    // Registrar Pok\u00e9mon manualmente\n    gestor.registrarPokemon(\"Pikachu\", \"El\u00e9ctrico\", 55)\n    gestor.registrarPokemon(\"Charmander\", \"Fuego\", 52)\n\n    // Registrar un Pok\u00e9mon aleatorio\n    println(\"Generando Pok\u00e9mon aleatorio...\")\n    val pokemonAleatorio = gestor.registrarPokemonAleatorio()\n    println(\"\u00a1Ha aparecido un \\${pokemonAleatorio.nombre} de tipo \\${pokemonAleatorio.tipo} con poder base \\${pokemonAleatorio.poderBase}!\")\n\n    // Mostrar todos los Pok\u00e9mon registrados\n    println(\"\\nLista de Pok\u00e9mon registrados:\")\n    gestor.obtenerPokemon().forEach { pokemon -&gt;\n        println(\"ID: ${pokemon.id}, Nombre: ${pokemon.nombre}, Tipo: ${pokemon.tipo}, Poder Base: ${pokemon.poderBase}\")\n    }\n}\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Solucion/#salida-esperada","title":"Salida esperada","text":"<p>Generando Pok\u00e9mon aleatorio...</p> <p>\u00a1Ha aparecido un Eevee de tipo Normal con poder base 55!</p> <p>Lista de Pok\u00e9mon registrados:</p> <p>ID: 1, Nombre: Pikachu, Tipo: El\u00e9ctrico, Poder Base: 55</p> <p>ID: 2, Nombre: Charmander, Tipo: Fuego, Poder Base: 52</p> <p>ID: 3, Nombre: Eevee, Tipo: Normal, Poder Base: 55</p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa-Solucion/#extensiones-opcionales","title":"Extensiones opcionales","text":"<ol> <li>Agrega un m\u00e9todo para buscar Pok\u00e9mon por tipo.  </li> <li>Implementa un sistema de combate entre dos Pok\u00e9mon.  </li> <li>Permite actualizar los atributos de un Pok\u00e9mon existente.</li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/","title":"Companion Objects en Kotlin Una Gu\u00eda Completa","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#companion-objects-en-kotlin-una-guia-completa","title":"Companion Objects en Kotlin: Una Gu\u00eda Completa","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#que-es-un-companion-object","title":"\u00bfQu\u00e9 es un Companion Object?","text":"<p>Un companion object es una caracter\u00edstica especial en Kotlin que permite asociar un \u00fanico objeto a una clase. Este objeto act\u00faa como una extensi\u00f3n est\u00e1tica de la clase, permitiendo que contenga propiedades y m\u00e9todos que pertenecen directamente a la clase, en lugar de a sus instancias. Gracias a esto, puedes acceder a ellos sin necesidad de crear una instancia de la clase.</p> <p>El concepto es similar al de m\u00e9todos est\u00e1ticos en Java, pero ofrece mayor flexibilidad y est\u00e1 m\u00e1s integrado con el paradigma orientado a objetos.</p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#_1","title":"Companion Objects en Kotlin Una Gu\u00eda Completa","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ol> <li>Asociaci\u00f3n \u00fanica a una clase: </li> <li>Solo puede existir un companion object por clase.  </li> <li>Se declara con la palabra clave <code>companion</code> dentro de la clase.  </li> <li>Acceso como miembro est\u00e1tico: </li> <li>Puedes acceder a los m\u00e9todos y propiedades del companion object directamente a trav\u00e9s del nombre de la clase.  </li> <li>Ejemplo: MiClase.miMetodoEstatico()  </li> <li>Encapsulaci\u00f3n de l\u00f3gica est\u00e1tica: </li> <li>Agrupa l\u00f3gica que no depende de instancias, como configuraciones globales o m\u00e9todos auxiliares.  </li> <li>Compatibilidad con Java: </li> <li>Los m\u00e9todos en un companion object son visibles como m\u00e9todos est\u00e1ticos cuando se acceden desde Java.  </li> <li>Acceso a miembros privados de la clase: </li> <li>El companion object tiene acceso total a los atributos y m\u00e9todos privados de la clase a la que pertenece.</li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#ventajas-de-usar-companion-objects","title":"Ventajas de usar Companion Objects","text":"<ul> <li>Centralizaci\u00f3n de l\u00f3gica compartida: </li> <li>Agrupa propiedades y m\u00e9todos que deben ser consistentes entre todas las instancias de la clase.  </li> <li>Compatibilidad con lenguajes externos: </li> <li>Al usarse como m\u00e9todos est\u00e1ticos desde Java, facilita la interoperabilidad entre Kotlin y Java.  </li> <li>Encapsulaci\u00f3n: </li> <li>Mantiene el c\u00f3digo relacionado con la clase dentro de su mismo contexto, evitando la necesidad de crear clases auxiliares externas.  </li> <li>Ideal para funciones de f\u00e1brica: </li> <li>Facilita la creaci\u00f3n de instancias personalizadas o con validaciones espec\u00edficas antes de la construcci\u00f3n del objeto.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#_2","title":"Companion Objects en Kotlin Una Gu\u00eda Completa","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#desventajas","title":"Desventajas","text":"<ul> <li>Sobrecarga de responsabilidades: </li> <li>Si se abusa de los companion objects para manejar demasiada l\u00f3gica, pueden volverse dif\u00edciles de mantener y probar.  </li> <li>Confusi\u00f3n conceptual: </li> <li>Para principiantes, puede ser complicado entender c\u00f3mo se diferencian los m\u00e9todos del companion object de los m\u00e9todos de instancia.  </li> <li>P\u00e9rdida de flexibilidad en herencia: </li> <li>Al no poder tener m\u00faltiples companion objects en una clase, se limita la capacidad de modularizar diferentes aspectos.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#_3","title":"Companion Objects en Kotlin Una Gu\u00eda Completa","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#ejemplo-generador-de-ids-unicos","title":"Ejemplo: Generador de IDs \u00fanicos","text":"<p>Supongamos que tenemos una clase <code>Usuario</code> y necesitamos generar un ID \u00fanico para cada nueva instancia. Usaremos un companion object para centralizar esta l\u00f3gica:</p> <p>class Usuario(val nombre: String) {     val id: Int</p> <pre><code>companion object {  \n    private var ultimoId \\= 0\n\n    fun generarId(): Int {  \n        ultimoId++  \n        return ultimoId  \n    }  \n}\n\ninit {  \n    id \\= generarId()  \n}\n</code></pre> <p>}</p> <p>fun main() {     val usuario1 = Usuario(\"Martina\")     val usuario2 = Usuario(\"Elena\")</p> <p>println(\"Usuario 1: \\\\({usuario1.nombre}, ID: \\\\\\)\") println(\"Usuario 2: \\\\({usuario2.nombre}, ID: \\\\\\)\") }</p> <p>Salida esperada:</p> <p>Usuario 1: Martina, ID: 1 Usuario 2: Elena, ID: 2  </p>"},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#_4","title":"Companion Objects en Kotlin Una Gu\u00eda Completa","text":""},{"location":"section1/u04/practica/otrosRecursos/CompanionObject/Companion%20Objects%20en%20Kotlin_Una%20Gu%C3%ADa%20Completa/#cuando-usar-companion-objects","title":"\u00bfCu\u00e1ndo usar Companion Objects?","text":"<ul> <li>Almacenar constantes y configuraciones: </li> <li>Ejemplo: Valores predeterminados para tu aplicaci\u00f3n, como l\u00edmites o configuraciones globales.     class Configuracion {         companion object {             const val TIEMPO_MAXIMO = 60         }     }  </li> <li>Funciones de f\u00e1brica (Factory): </li> <li>Permiten crear instancias de una clase con validaciones o ajustes previos.     class Usuario(val nombre: String) {         companion object {             fun crearAnonimo(): Usuario {                 return Usuario(\"An\u00f3nimo\")             }         }     }  </li> <li>L\u00f3gica compartida entre todas las instancias: </li> <li>M\u00e9todos auxiliares o de utilidades relacionados con la clase.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/PracticaClase_POO_GestionCafes/","title":"Pr\u00e1ctica de clase 1 - POO","text":""},{"location":"section1/u04/practica/otrosRecursos/soluciones/PracticaClase_POO_GestionCafes/#desarrolla-un-programa-con-las-siguientes-clases","title":"Desarrolla un programa con las siguientes clases:","text":"<ul> <li>Clase <code>Cafetera</code> con atributos <code>ubicacion</code> (nombre de la sala o habitaci\u00f3n d\u00f3nde se encuentra), <code>capacidad</code> (la cantidad m\u00e1xima de caf\u00e9 que puede contener la cafetera) y <code>cantidad</code> (la cantidad actual de caf\u00e9 que hay en la cafetera).</li> </ul> <p>Implementa, al menos, lo siguiente:</p> <ul> <li>En la clase se debe establecer la <code>capacidad</code> m\u00e1xima en 1000 (c.c.) y la <code>cantidad</code> actual en cero (cafetera vac\u00eda).</li> <li><code>Constructor primario</code> con la <code>ubicacion</code>.</li> <li><code>Constructor secundario</code> con la <code>ubicaci\u00f3n</code> y la <code>capacidad</code> m\u00e1xima de la cafetera. Inicializa la <code>cantidad</code> actual de caf\u00e9 igual a la <code>capacidad</code> m\u00e1xima.</li> <li><code>Constructor secundario</code> con la <code>ubicacion</code>, la <code>capacidad</code> m\u00e1xima y la <code>cantidad</code> actual. Si la <code>cantidad</code> actual es mayor que la <code>capacidad</code> m\u00e1xima de la cafetera, la ajustar\u00e1 al m\u00e1ximo.</li> <li><code>llenar()</code>: hace que la <code>cantidad</code> actual sea igual a la <code>capacidad</code>.</li> <li><code>servirTaza(Taza)</code>: simula la acci\u00f3n de servir una <code>taza</code> con la <code>capacidad</code> que tenga la taza. Si la cafetera tiene caf\u00e9, llenar\u00e1 la taza y restar\u00e1 la cantidad servida en la cantidad de la cafetera.      Si la cantidad actual de caf\u00e9 \u201cno alcanza\u201d para llenar la taza, se sirve lo que quede. Actualizar la cantidad de la cafetera y aplicar el m\u00e9todo adecuado de la taza.</li> <li><code>vaciar()</code>: pone la <code>cantidad</code> de caf\u00e9 actual en cero.</li> <li><code>agregarCafe(Int)</code>: a\u00f1ade a la cafetera la <code>cantidad</code> de caf\u00e9 indicada. Por defecto a\u00f1ade 200 c.c. No se puede a\u00f1adir m\u00e1s cantidad que su capacidad m\u00e1xima, si ocurriera esta circunstancia, simplemente llenar\u00edamos la cantidad de la cafetera a su capacidad m\u00e1xima.</li> <li> <p><code>toString()</code>: debe retornar por ejemplo \"Cafetera(ubicaci\u00f3n = Sal\u00f3n, capacidad = 1000 c.c., cantidad = 0 c.c.)\"</p> </li> <li> <p>Clase Taza, que tendr\u00e1 los atributos <code>color</code>, <code>capacidad</code> y <code>cantidad</code>.</p> </li> </ul> <p>Implementa, al menos, lo siguiente:</p> <ul> <li>Un \u00fanico <code>constructor</code> con el <code>color</code> (por defecto blanco) y la <code>capacidad</code> (por defecto 50 c.c.). La clase tambi\u00e9n contendr\u00e1 un atributo con la <code>cantidad</code> que se establcer\u00e1 a 0.</li> <li>La propiedad <code>cantidad</code> debe modificarse para que si el valor que recibe es mayor que la capacidad de la taza, solo establezca el valor de dicha capacidad.</li> <li>El m\u00e9todo <code>llenar()</code> que establecer\u00e1 la cantidad de la taza a su m\u00e1xima capacidad.</li> <li>El m\u00e9todo \"sobrecargado\" <code>llenar(Int)</code> que establecer\u00e1 la cantidad de la taza a la cantidad pasada como argumento al m\u00e9todo.</li> <li> <p>Sobreescribir el m\u00e9todo <code>toString()</code>, que debe retornar por ejemplo \"Taza(color = BLANCO, capacidad = 50 c.c., cantidad = 30 c.c.)\"</p> </li> <li> <p>Clase enumerada <code>Color</code>, que contendr\u00e1 los colores disponibles: blanco, negro, gris, azul y verde.</p> </li> </ul> <p>En el programa principal se deben crear 3 cafeteras de capacidad 1000, 750 y 500 c.c. con 0, 750 y 200 c.c de cantidad respectivamente. Para crear cada cafetera, deb\u00e9is utilizar un constructor diferente. Tambi\u00e9n deb\u00e9is generar una lista de 20 tazas con la capacidad de 50, 75 y 100 de manear aleatoria. Implementar el resto de comentarios TODO de la funci\u00f3n main().</p> <p>NOTA:</p> <pre><code>la sobrecarga de m\u00e9todos se refiere a la capacidad de definir varios m\u00e9todos en una clase con el mismo nombre\npero con diferentes par\u00e1metros. Esto permite que una clase tenga varios m\u00e9todos con la misma firma (nombre de m\u00e9todo)\npero con listas de par\u00e1metros diferentes.\n\nLa sobrecarga de m\u00e9todos facilita la legibilidad del c\u00f3digo y proporciona flexibilidad al programador al permitirle\nutilizar el mismo nombre de m\u00e9todo para realizar operaciones similares pero con diferentes conjuntos de datos.\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/","title":"Ejercicios de introducci\u00f3n a la programaci\u00f3n orientada a objetos","text":""},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#ejercicio-1-clase-cuenta-bancaria","title":"Ejercicio 1: Clase Cuenta Bancaria.","text":"<p>Crea una clase CuentaBancaria con las propiedades:</p> <ul> <li>titular (de tipo String).</li> <li>saldo (de tipo Double).</li> </ul> <p>La clase debe tener:</p> <ol> <li>Un constructor que inicialice el titular con el saldo en 0 por defecto.</li> <li> <p>M\u00e9todos para:</p> </li> <li> <p>Ingresar dinero (ingresar).</p> </li> <li>Retirar dinero (retirar). Este m\u00e9todo debe lanzar una excepci\u00f3n si se intenta retirar m\u00e1s dinero del que hay en la cuenta.</li> </ol> <p>A tener en cuenta:</p> <ol> <li>El saldo no podr\u00e1 ser modificado directamente desde fuera de la clase. Solo ser\u00e1 posible su cambio mediante los m\u00e9todos ingresar y retirar.</li> <li>Los m\u00e9todos ingresar y retirar debe mostrar un mensaje con el saldo final despu\u00e9s de la operaci\u00f3n.</li> <li>No ser\u00e1 posible retirar m\u00e1s dinero del saldo actual, ni ingresar cantidades negativas o 0. Deber\u00e1 generar una excepci\u00f3n si ocurre esta situaci\u00f3n.</li> </ol> <p>En el programa principal:</p> <ul> <li>Crea una cuenta bancaria con un titular.</li> <li>Realiza un ingreso de 100.0 y un retiro de 50.0.</li> <li>Intenta realizar un retiro que supere el saldo y captura la excepci\u00f3n.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#diseno","title":"Dise\u00f1o:","text":"<p>Aqu\u00ed tienes el diagrama UML para la clase CuentaBancaria que implementa las especificaciones del ejercicio:</p> <p></p>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#contenido-del-diagrama","title":"Contenido del Diagrama:","text":"<ol> <li>Clase: <code>CuentaBancaria</code></li> <li>Atributos:<ul> <li><code>titular: String</code>: El nombre del titular.</li> <li><code>saldo: Double = 0.0</code>: El saldo de la cuenta, inicializado a 0.</li> </ul> </li> <li>M\u00e9todos:<ul> <li><code>CuentaBancaria(titular: String)</code>: Constructor que inicializa la cuenta con un titular y saldo en 0.</li> <li><code>ingresar(cantidad: Double): void</code>: M\u00e9todo para ingresar dinero.</li> <li><code>retirar(cantidad: Double): void</code>: M\u00e9todo para retirar dinero.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#caracteristicas-del-diseno","title":"Caracter\u00edsticas del dise\u00f1o:","text":"<ul> <li>Los atributos son privados (<code>-</code>) para asegurar el encapsulamiento.</li> <li>Los m\u00e9todos p\u00fablicos (<code>+</code>) controlan las operaciones sobre el saldo.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#ejercicio-2-clase-vehiculo","title":"Ejercicio 2: Clase Veh\u00edculo","text":"<p>Crea una clase Vehiculo con las propiedades:</p> <ul> <li>marca.</li> <li>modelo.</li> <li>kilometraje.</li> </ul> <p>La clase debe tener:</p> <ol> <li>M\u00e9todos para registrar un viaje que aumente el kilometraje.</li> <li>Un m\u00e9todo detalles que devuelva una descripci\u00f3n del veh\u00edculo o modificar el m\u00e9todo toString.</li> </ol> <p>En el programa principal:</p> <ul> <li>Crea un veh\u00edculo, registra un viaje de 100 km y muestra sus detalles.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#diseno_1","title":"Dise\u00f1o:","text":"<p>Aqu\u00ed tienes el diagrama UML para la clase Veh\u00edculo que implementa las especificaciones del ejercicio:</p> <p></p>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#contenido-del-diagrama_1","title":"Contenido del Diagrama:","text":"<ol> <li>Clase: <code>Vehiculo</code></li> <li>Atributos:<ul> <li><code>marca: String</code>: Marca del veh\u00edculo.</li> <li><code>modelo: String</code>: Modelo del veh\u00edculo.</li> <li><code>kilometraje: Double = 0.0</code>: Kilometraje inicializado a 0.</li> </ul> </li> <li>M\u00e9todos:<ul> <li><code>registrarViaje(kilometros: Double): void</code>: M\u00e9todo para aumentar el kilometraje.</li> <li><code>detalles(): String</code>: M\u00e9todo para obtener una descripci\u00f3n detallada del veh\u00edculo.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#caracteristicas-del-diseno_1","title":"Caracter\u00edsticas del dise\u00f1o:","text":"<ul> <li>Los atributos son privados (<code>-</code>) para proteger la informaci\u00f3n.</li> <li>Los m\u00e9todos p\u00fablicos (<code>+</code>) permiten operar y acceder a la informaci\u00f3n del veh\u00edculo.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#ejercicio-3-clase-libro","title":"Ejercicio 3: Clase Libro","text":"<p>Crea una clase Libro con las propiedades:</p> <ul> <li>titulo (de tipo String).</li> <li>autor (de tipo String).</li> <li>numPaginas (de tipo Int).</li> <li>leido (de tipo Boolean, inicializado en false).</li> </ul> <p>La clase debe:</p> <ol> <li>Sobrescribir el m\u00e9todo toString para mostrar: \"Libro: [titulo] por [autor], P\u00e1ginas: [numPaginas], Le\u00eddo: [S\u00ed/No]\".</li> <li>Incluir un constructor secundario que inicialice numPaginas y leido con valores predeterminados.</li> </ol> <p>A tener en cuenta:</p> <ol> <li>las propiedades titulo, autor y numPaginas ser\u00e1n propiedades inmutables.</li> <li>titulo y autor no pueden ser cadenas vac\u00edas.</li> <li>numPaginas debe ser un valor positivo, no superior a 5000.</li> <li>Por defecto un libro tiene 100 p\u00e1ginas si no se especifica al inicializarlo.</li> </ol> <p>En el programa principal:</p> <ul> <li>Crea dos libros, marca uno como le\u00eddo e imprime el valor de cada libro.</li> <li>Crea un libro con titulo vac\u00edo que muestre el mensaje de error correspondiente (acu\u00e9rdate de capturar las excepciones).</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#diseno_2","title":"Dise\u00f1o:","text":"<p>Aqu\u00ed tienes el diagrama UML para la clase Libro que implementa las especificaciones del ejercicio:</p> <p></p>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#contenido-del-diagrama_2","title":"Contenido del Diagrama:","text":"<ol> <li>Clase: <code>Libro</code></li> <li>Atributos:<ul> <li><code>titulo: String</code>: El t\u00edtulo del libro.</li> <li><code>autor: String</code>: El autor del libro.</li> <li><code>numPaginas: Int = 100</code>: N\u00famero de p\u00e1ginas con valor predeterminado de 100.</li> <li><code>leido: Boolean = false</code>: Indica si el libro ha sido le\u00eddo, inicializado en <code>false</code>.</li> </ul> </li> <li>M\u00e9todos:<ul> <li><code>Libro(titulo: String, autor: String, numPaginas: Int = 100, leido: Boolean = false)</code>: Constructor que permite inicializar el libro.</li> <li><code>toString(): String</code>: Sobrescribe el m\u00e9todo <code>toString</code> para proporcionar una descripci\u00f3n del libro.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#caracteristicas-del-diseno_2","title":"Caracter\u00edsticas del dise\u00f1o:","text":"<ul> <li>Las propiedades son privadas (<code>-</code>) para mantener su encapsulaci\u00f3n.</li> <li>Se permite un constructor secundario que inicializa valores predeterminados para <code>numPaginas</code> y <code>leido</code>.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#ejercicio-4-clase-estudiante","title":"Ejercicio 4: Clase Estudiante","text":"<p>Crea una clase Estudiante con las propiedades:</p> <ul> <li>nombre</li> <li>nota</li> </ul> <p>La clase debe:</p> <ol> <li>Modificar el setter de nota para asegurarse de que est\u00e9 en el rango 0-10.</li> <li>Sobrescribir el m\u00e9todo toString para mostrar: \"Estudiante: [nombre], Nota: [nota]\".</li> </ol> <p>A tener en cuenta:</p> <ol> <li>El nombre del estudiante no se podr\u00e1 modificar una vez inicializado un objeto de tipo Estudiante.</li> <li>La propiedad nombre no puede ser tampoco visible desde fuera de la clase Estudiante.</li> </ol> <p>En el programa principal:</p> <ul> <li>Crea varios estudiantes, intenta asignarles notas fuera del rango y muestra sus detalles.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#diseno_3","title":"Dise\u00f1o:","text":"<p>Aqu\u00ed tienes el diagrama UML para la clase Estudiante, implementando las especificaciones del ejercicio 4:</p> <p></p>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#contenido-del-diagrama_3","title":"Contenido del Diagrama:","text":"<ol> <li>Clase: <code>Estudiante</code></li> <li> <p>Atributos:</p> <ul> <li><code>nombre: String</code>: Nombre del estudiante, inmutable y no visible externamente.</li> <li><code>nota: Double</code>: Nota del estudiante, ajustable dentro del rango 0-10 mediante un m\u00e9todo.</li> <li> <p>M\u00e9todos:</p> </li> <li> <p><code>Estudiante(nombre: String)</code>: Constructor que inicializa el nombre del estudiante.</p> </li> <li><code>setNota(nota: Double): void</code>: Establece la nota validando que est\u00e9 entre 0 y 10.</li> <li><code>toString(): String</code>: Devuelve una descripci\u00f3n en el formato: <code>Estudiante: [nombre], Nota: [nota]</code>.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#caracteristicas-del-diseno_3","title":"Caracter\u00edsticas del dise\u00f1o:","text":"<ul> <li>Las propiedades son privadas (<code>-</code>) para mantener su encapsulaci\u00f3n. Sin embargo existen los m\u00e9todos getter y setter, adaptados para la propiedad <code>nota</code> seg\u00fan las especificaciones.</li> <li>El constructor estar\u00eda disponible para inicializar el nombre del estudiante.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#ejercicio-5-clase-producto","title":"Ejercicio 5: Clase Producto","text":"<p>Crea una clase Producto con las propiedades:</p> <ul> <li>nombre</li> <li>precio</li> <li>stock</li> </ul> <p>La clase debe:</p> <ol> <li>Utilizar un bloque init para asegurarse de que el precio y el stock sean positivos.</li> <li>Sobrescribir el m\u00e9todo toString para mostrar: \"Producto: [nombre], Precio: [precio]\u20ac, Stock: [stock]\".</li> <li>M\u00e9todos vender y readastecer, que actualizar\u00e1n el stock. Realizar los controles que ve\u00e1is adecuados.</li> <li>Las propiedades precio y stock no pueden ser modificadas directamente desde fuera de la clase Producto.</li> </ol> <p>En el programa principal:</p> <ul> <li>Crea varios productos, usa sus m\u00e9todos y muestra sus detalles.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#diseno_4","title":"Dise\u00f1o:","text":"<p>Aqu\u00ed tienes el diagrama UML para la clase Producto, implementando las especificaciones del ejercicio 5:</p> <p></p>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#contenido-del-diagrama_4","title":"Contenido del Diagrama:","text":"<ol> <li>Clase: <code>Atributos</code></li> <li>Atributos:<ul> <li><code>nombre: String</code>: Nombre del producto.</li> <li><code>precio: Double</code>: Precio del producto, validado para ser positivo mediante un bloque <code>init</code>.</li> <li><code>stock: Int</code>: Cantidad de stock disponible, validada para ser positiva mediante un bloque <code>init</code>.</li> </ul> </li> <li>M\u00e9todos:<ul> <li><code>Producto(nombre: String, precio: Double, stock: Int)</code>: Constructor que inicializa el producto y valida los atributos.</li> <li><code>vender(cantidad: Int): void</code>: Reduce el stock si hay suficiente cantidad disponible.</li> <li><code>reabastecer(cantidad: Int): void</code>: Incrementa el stock del producto.</li> <li><code>toString(): String</code>: Devuelve una descripci\u00f3n en el formato: <code>Producto: [nombre], Precio: [precio]\u20ac, Stock: [stock]</code>.</li> </ul> </li> </ol>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO/#caracteristicas-del-diseno_4","title":"Caracter\u00edsticas del dise\u00f1o:","text":"<ul> <li>Las propiedades son privadas (<code>-</code>) para mantener su encapsulaci\u00f3n. Sin embargo, se han definido m\u00e9todos para operar con ellas.</li> <li>El constructor inicializa el producto y valida los atributos.</li> </ul>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO_Solucion/","title":"EjerciciosSencillosPOO Solucion","text":""},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO_Solucion/#ejercicio-1-clase-cuenta-bancaria","title":"Ejercicio 1: Clase Cuenta Bancaria","text":"<p>Crea una clase CuentaBancaria con las propiedades:    - titular (de tipo String).    - saldo (de tipo Double).</p> <p>La clase debe tener:    1. Un constructor que inicialice el titular con el saldo en 0 por defecto.    2. M\u00e9todos para:       - Ingresar dinero (ingresar).       - Retirar dinero (retirar). Este m\u00e9todo debe lanzar una excepci\u00f3n si se intenta retirar m\u00e1s dinero del que hay en la cuenta.</p> <p>A tener en cuenta:    1. El saldo no podr\u00e1 ser modificado directamente desde fuera de la clase. Solo ser\u00e1 posible su cambio mediante los m\u00e9todos ingresar y retirar.    2. Los m\u00e9todos ingresar y retirar debe mostrar un mensaje con el saldo final despu\u00e9s de la operaci\u00f3n.    3. No ser\u00e1 posible retirar m\u00e1s dinero del saldo actual, ni ingresar cantidades negativas o 0. Deber\u00e1 generar una excepci\u00f3n si ocurre esta situaci\u00f3n.</p> <p>En el programa principal:    - Crea una cuenta bancaria con un titular.    - Realiza un ingreso de 100.0 y un retiro de 50.0.    - Intenta realizar un retiro que supere el saldo y captura la excepci\u00f3n.</p> <p>Soluci\u00f3n:</p> <pre><code>class CuentaBancaria(val titular: String) {\n    var saldo: Double = 0.0\n        private set\n\n    fun ingresar(cantidad: Double) {\n        require(cantidad &gt; 0) { \"La cantidad debe ser positiva.\" }\n        saldo += cantidad\n        println(\"Ingreso realizado. Saldo actual: $saldo\")\n    }\n\n    fun retirar(cantidad: Double) {\n        require(cantidad &gt; 0) { \"La cantidad debe ser positiva.\" }\n        if (cantidad &gt; saldo) {\n            throw IllegalArgumentException(\"Saldo insuficiente.\")\n        }\n        saldo -= cantidad\n        println(\"Retiro realizado. Saldo actual: $saldo\")\n    }\n}\n\nfun main() {\n    val cuenta = CuentaBancaria(\"Luis\")\n\n    cuenta.ingresar(100.0)\n    cuenta.retirar(50.0)\n\n    try {\n        cuenta.retirar(100.0)\n    } catch (e: IllegalArgumentException) {\n        println(\"Error: ${e.message}\")\n    }\n}\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO_Solucion/#ejercicio-2-clase-vehiculo","title":"Ejercicio 2: Clase Veh\u00edculo","text":"<p>Crea una clase Vehiculo con las propiedades:    - marca.    - modelo.    - kilometraje.</p> <p>La clase debe tener:    1. M\u00e9todos para registrar un viaje que aumente el kilometraje.    2. Un m\u00e9todo detalles que devuelva una descripci\u00f3n del veh\u00edculo o modificar el m\u00e9todo toString.</p> <p>En el programa principal:    - Crea un veh\u00edculo, registra un viaje de 100 km y muestra sus detalles.</p> <p>Soluci\u00f3n:</p> <pre><code>class Vehiculo(val marca: String, val modelo: String) {\n    var kilometraje: Int = 0\n        private set\n\n    fun registrarViaje(kilometros: Int) {\n        require(kilometros &gt; 0) { \"La distancia debe ser mayor que 0.\" }\n        kilometraje += kilometros\n    }\n\n    fun detalles(): String {\n        return \"Veh\u00edculo $marca $modelo con $kilometraje km.\"\n    }\n}\n\nfun main() {\n    val vehiculo = Vehiculo(\"Toyota\", \"Corolla\")\n    vehiculo.registrarViaje(100)\n    println(vehiculo.detalles())\n}\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO_Solucion/#ejercicio-3-clase-libro","title":"Ejercicio 3: Clase Libro","text":"<p>Crea una clase Libro con las propiedades:    - titulo (de tipo String).    - autor (de tipo String).    - numPaginas (de tipo Int).    - leido (de tipo Boolean, inicializado en false).</p> <p>La clase debe:    1. Sobrescribir el m\u00e9todo toString para mostrar: \"Libro: [titulo] por [autor], P\u00e1ginas: [numPaginas], Le\u00eddo: [S\u00ed/No]\".    2. Incluir un constructor secundario que inicialice numPaginas y leido con valores predeterminados.</p> <p>A tener en cuenta:    1. las propiedades titulo, autor y numPaginas ser\u00e1n propiedades inmutables.    2. titulo y autor no pueden ser cadenas vac\u00edas.    3. numPaginas debe ser un valor positivo, no superior a 5000.    4. Por defecto un libro tiene 100 p\u00e1ginas si no se especifica al inicializarlo.</p> <p>En el programa principal:    - Crea dos libros, marca uno como le\u00eddo e imprime el valor de cada libro.    - Crea un libro con titulo vac\u00edo que muestre el mensaje de error correspondiente (acu\u00e9rdate de capturar las excepciones).</p> <p>Soluci\u00f3n:</p> <pre><code>class Libro(titulo: String, autor: String, numPaginas: Int, var leido: Boolean = false) {\n    constructor(titulo: String, autor: String) : this(titulo, autor, 100, false)\n\n    val titulo: String = \"Sin titulo\"\n    init {\n        require(titulo.isNotEmpty()) { \"El t\u00edtulo no puede estar vac\u00edo.\" }\n    }\n\n    val autor: String = \"Sin Autor\"\n    init {\n        require(nombre.isNotEmpty()) { \"El autor no puede estar vac\u00edo.\" }\n    }\n\n    val numPaginas: Int = 0\n    init {\n        require(numPaginas in 1..5000) { \"El n\u00famero de p\u00e1ginas debe estar en el rango 1-5000.\" }\n    }\n\n    fun marcarComoLeido() {\n        leido = true\n    }\n\n    override fun toString(): String {\n        return \"Libro: $titulo por $autor, P\u00e1ginas: $numPaginas, Le\u00eddo: ${if (leido) \"S\u00ed\" else \"No\"}\"\n    }\n}\n\nfun main() {\n    val libro1 = Libro(\"El Hobbit\", \"J.R.R. Tolkien\")\n    val libro2 = Libro(\"1984\", \"George Orwell\", 328, true)\n\n    libro1.marcarComoLeido()\n\n    println(libro1)\n    println(libro2)\n\n    val libro3 = try {\n        Libro(\"\", \"\")\n    } catch (3: IllegalArgumentException) {\n        println(\"ERROR: ${e.message}!\")\n    }\n\n    println(libro3)\n}\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO_Solucion/#ejercicio-4-clase-estudiante","title":"Ejercicio 4: Clase Estudiante","text":"<p>Crea una clase Estudiante con las propiedades:    - nombre    - nota</p> <p>La clase debe:    1. Modificar el setter de nota para asegurarse de que est\u00e9 en el rango 0-10.    2. Sobrescribir el m\u00e9todo toString para mostrar: \"Estudiante: [nombre], Nota: [nota]\".</p> <p>A tener en cuenta:    1. El nombre del estudiante no se podr\u00e1 modificar una vez inicializado un objeto de tipo Estudiante.    2. La propiedad nombre no puede ser tampoco visible desde fuera de la clase Estudiante.</p> <p>En el programa principal:    - Crea varios estudiantes, intenta asignarles notas fuera del rango y muestra sus detalles.</p> <p>Soluci\u00f3n:</p> <pre><code>class Estudiante(private val nombre: String, notaInicial: Double) {\n    var nota: Double = notaInicial\n        set(value) {\n            require(value in 0.0..10.0) { \"La nota debe estar entre 0 y 10.\" }\n            field = value\n        }\n\n    init {\n        require(notaInicial in 0.0..10.0) { \"La nota inicial debe estar entre 0 y 10.\" }\n    }\n\n    override fun toString(): String {\n        return \"Estudiante: $nombre, Nota: $nota\"\n    }\n}\n\nfun main() {\n    try {\n        val estudiante1 = Estudiante(\"Laura\", 7.5)\n        val estudiante2 = Estudiante(\"Pedro\", 11.0) // Lanza excepci\u00f3n\n\n        estudiante1.nota = 9.0\n        println(estudiante1)\n        println(estudiante2)\n    } catch (e: IllegalArgumentException) {\n        println(\"Error: ${e.message}\")\n    }\n}\n</code></pre>"},{"location":"section1/u04/practica/otrosRecursos/soluciones/Practica_4_1_Kotlin_POO_basicos/EjerciciosSencillosPOO_Solucion/#ejercicio-5-clase-producto","title":"Ejercicio 5: Clase Producto","text":"<p>Crea una clase Producto con las propiedades:    - nombre    - precio    - stock</p> <p>La clase debe:    1. Utilizar un bloque init para asegurarse de que el precio y el stock sean positivos.    2. Sobrescribir el m\u00e9todo toString para mostrar: \"Producto: [nombre], Precio: [precio]\u20ac, Stock: [stock]\".    3. M\u00e9todos vender y readastecer, que actualizar\u00e1n el stock. Realizar los controles que ve\u00e1is adecuados.    4. Las propiedades precio y stock no pueden ser modificadas directamente desde fuera de la clase Producto.</p> <p>En el programa principal:    - Crea varios productos, usa sus m\u00e9todos y muestra sus detalles.</p> <p>Soluci\u00f3n:</p> <pre><code>class Producto(val nombre: String, precioInicial: Double, stockInicial: Int) {\n    var precio: Double = precioInicial\n        private set\n    var stock: Int = stockInicial\n        private set\n\n    init {\n        require(precioInicial &gt; 0) { \"El precio debe ser mayor que 0.\" }\n        require(stockInicial &gt;= 0) { \"El stock no puede ser negativo.\" }\n    }\n\n    fun vender(cantidad: Int) {\n        require(cantidad &gt; 0) { \"La cantidad debe ser positiva.\" }\n        if (cantidad &gt; stock) {\n            throw IllegalArgumentException(\"Stock insuficiente.\")\n        }\n        stock -= cantidad\n    }\n\n    fun reabastecer(cantidad: Int) {\n        require(cantidad &gt; 0) { \"La cantidad debe ser positiva.\" }\n        stock += cantidad\n    }\n\n    override fun toString(): String {\n        return \"Producto: $nombre, Precio: $precio\u20ac, Stock: $stock\"\n    }\n}\n\nfun main() {\n    try {\n        val producto1 = Producto(\"Manzana\", 0.5, 100)\n        val producto2 = Producto(\"Pl\u00e1tano\", -0.3, 50) // Lanza excepci\u00f3n\n\n        producto1.vender(10)\n        println(producto1)\n    } catch (e: IllegalArgumentException) {\n        println(\"Error: ${e.message}\")\n    }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/","title":"Apuntes de [Kotlin]","text":"<p>Kotlin es un lenguaje de programaci\u00f3n de c\u00f3digo abierto de tipo est\u00e1tico que se dirige a JVM, Android, JavaScript y Native. Est\u00e1 desarrollado por JetBrains. El proyecto se inici\u00f3 en 2010 y fue de c\u00f3digo abierto desde muy temprano. El primer lanzamiento oficial 1.0 fue en febrero de 2016.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#caracteristicas","title":"Caracter\u00edsticas","text":"<p>Un lenguaje de programaci\u00f3n se dise\u00f1a generalmente con un prop\u00f3sito espec\u00edfico en mente. Este prop\u00f3sito puede ser cualquier cosa, desde servir a un entorno espec\u00edfico (por ejemplo, la web) hasta un determinado paradigma (por ejemplo, la programaci\u00f3n funcional). En el caso de Kotlin el objetivo es construir un lenguaje productivo y pragm\u00e1tico, que tenga todas las caracter\u00edsticas que un desarrollador necesita y que sea f\u00e1cil de usar.</p> <p>Kotlin fue dise\u00f1ado inicialmente para trabajar con otros lenguajes de JVM, pero ahora ha evolucionado para ser mucho m\u00e1s: tambi\u00e9n funciona en el navegador y como una aplicaci\u00f3n nativa.</p> <p>Kotlin es multiparadigma, con soporte para paradigmas de programaci\u00f3n orientada a objetos, procedimentales y funcionales, sin forzar el uso de ninguno de ellos. Por ejemplo, a diferencia de Java, puede definir funciones de nivel superior, sin tener que declararlas dentro de una clase.</p> <ul> <li>100% interoperable con Java.</li> <li>100% compatible con Java 6..., por lo que puede crear aplicaciones para la mayor\u00eda de los dispositivos Android.</li> <li>Se ejecuta en la JVM, puede transpilarse (traducirse) a JavaScript e incluso puede ejecutarse de forma nativa, con interoperabilidad con las bibliotecas C y Objective-C (macOs e iOS).</li> <li>No hay necesidad de terminar las frases con punto y coma <code>;</code>. Los bloques de c\u00f3digo est\u00e1n delimitados por corchetes <code>{ }</code>.</li> <li>Soporte de primera clase para valores constantes y colecciones inmutables (ideal para programaci\u00f3n paralela y funcional).</li> <li>Las funciones pueden ser elementos de nivel superior (es decir, no hay necesidad de poner todo dentro de una clase).</li> <li>Las funciones son ciudadanos de primera clase: pueden transmitirse como cualquier otro tipo y utilizarse como argumento de las funciones. Lambda (es decir, funciones an\u00f3nimas) son muy compatibles con la biblioteca est\u00e1ndar.</li> <li>No hay una palabra clave <code>static</code>, sino que hay mejores alternativas.</li> <li>Clases de datos son clases especiales dise\u00f1adas para contener datos.</li> <li>Todo es una expresi\u00f3n: <code>if</code>, <code>for</code>, etc... Todos pueden devolver valores.</li> <li>La expresi\u00f3n <code>when</code> es como un interruptor con superpoderes.</li> </ul> <p>M\u00e1s informaci\u00f3n:</p> <p>https://kotlinlang.org/docs/reference/comparison-to-java.html https://kotlinlang.org/docs/reference/server-overview.html https://kotlinlang.org/docs/reference/evolution/kotlin-evolution.html</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#kotlin-en-linea-de-comandos","title":"Kotlin en l\u00ednea de comandos","text":"<ul> <li>Instalar el compilador desde l\u00ednea de comandos desde aqu\u00ed</li> <li>Compilar la aplicaci\u00f3n usando el compilador de Kotlin: <code>$ kotlinc name.kt -include-runtime -d name.jar</code></li> <li>Ejecutar el programa: <code>$ java -jar name.jar</code></li> <li>Ejecutar la consola 'REPL': <code>$ kotlinc-jvm</code></li> <li>Usar la l\u00ednea de comandos para ejecutar scripts (.kts): <code>$ kotlinc -script name.kts [params]</code></li> <li>Compilar una biblioteca sin la 'runtime' para ser usada en otros programas: <code>$ kotlinc name.kt -d name.jar</code></li> <li>Ejecutar binarios producidos por el compilador de Kotlin: <code>$ kotlin -classpath name.jar HelloKt (HelloKt is the main class name inside the file named name.kt)</code></li> </ul> <p>M\u00e1s informaci\u00f3n: https://kotlinlang.org/docs/command-line.html</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<p>El punto de entrada en un programa escrito en Kotlin (y en Java) es la funci\u00f3n <code>main(args: Array&lt;String&gt;)</code>. Esta funci\u00f3n recibe un array que contiene los argumentos de la l\u00ednea de comandos.</p> <pre><code>fun main(args: Array&lt;String&gt;) {\n    println(\"Hello World!\")\n}\n</code></pre> <p>Aunque a partir de la versi\u00f3n <code>1.3</code> puedes declarar <code>main</code> sin ning\u00fan par\u00e1metro.</p> <pre><code>fun main() {\n    println(\"Hello World!\")\n}\n</code></pre> <p>Las funciones y variables en Kotlin pueden declararse en un \"nivel superior\", es decir, no necesitan estar dentro de una clase, por tanto, directamente dentro de un paquete.</p> <p>Si un archivo Kotlin contiene una sola clase (potencialmente con declaraciones de nivel superior relacionadas), su nombre debe ser el mismo que el nombre de la clase, con la extensi\u00f3n '.kt'. Si un archivo contiene varias clases, o solo declaraciones de nivel superior, el nombre debe describir lo que contiene el archivo en formato 'UpperCamelCase' (e.g. <code>ProcessDeclarations.kt</code>)</p> <p>Kotlin sigue las convenciones de nomenclatura de Java. Los nombres de los paquetes se escriben siempre en min\u00fasculas y sin guiones bajos (e.g. <code>org.example.myproject</code>)</p> <p>Los nombres de las clases y los objetos se escriben en 'UpperCamelCase':</p> <pre><code>open class DeclarationProcessor { ... }\n\nobject EmptyDeclarationProcessor : DeclarationProcessor() { ... }\n</code></pre> <p>Los nombres de funciones, propiedades y variables locales en 'lowerCamelCase':</p> <pre><code>fun processDeclarations() { ... }\n\nvar declarationCount = ...\n</code></pre> <p>Los nombres de las constantes (propiedades marcadas con <code>const</code>) deben usar nombres en may\u00fasculas y separados por un gui\u00f3n bajo:</p> <pre><code>const val MAX_COUNT = 8\nval USER_NAME_FIELD = \"UserName\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#variables-y-tipos-basicos","title":"Variables y tipos b\u00e1sicos","text":"<p>https://kotlinlang.org/docs/basic-types.html#basic-types</p> <p>En Kotlin, todo es un objeto en el sentido de que podemos llamar funciones y propiedades de miembro en cualquier variable. Algunos de los tipos como los n\u00fameros, los caracteres o los booleanos pueden tener una representaci\u00f3n interna especial que se representa como valores primitivos en tiempo de ejecuci\u00f3n, pero para el usuario se comportan como clases ordinarias.</p> <p>La declaraci\u00f3n de valores se realiza utilizando <code>var</code> o <code>val</code>:</p> <ul> <li>Los valores constantes se declaran como <code>val</code> y son inmutables o 'read-only', es decir, que no se pueden reasignar.</li> <li>Las variables se declaran como <code>var</code> y son mutables, por lo que se le pueden asignar un nuevo valor pero \u00fanicamente del mismo tipo declarado.</li> </ul> <p>La recomendaci\u00f3n es crear valores constantes inmutables, que son m\u00e1s seguras en entornos 'multithreading' ya que no se pueden modificar y utilizar las variables mutables cuando sea necesario.</p> <p>Este soporte de primera clase para los valores constantes es importante por una raz\u00f3n: la programaci\u00f3n funcional. En la programaci\u00f3n funcional, el uso de los valores constantes permiten algunas optimizaciones que aumentan el rendimiento. Por ejemplo, los c\u00e1lculos pueden ser paralelos ya que existe una garant\u00eda de que el valor no cambiar\u00e1 entre dos ejecuciones paralelas, dado que no puede cambiar.</p> <pre><code>val fooVal = 10     // val es inmutable y no podr\u00e1 ser reutilizada\n\nval otherVal\notherVal = \"My Value\"   // Podemos declarar la variable 'val' en una l\u00ednea y asignarle valor posteriormente. Sigue siendo una sola asignaci\u00f3n.\n\nvar fooVar = 10\nfooVar = 20     // Se le puede asignar un nuevo valor pero \u00fanicamente del mismo tipo.\n</code></pre> <p>En la mayor\u00eda de los casos, Kotlin puede determinar o inferir cu\u00e1l es el tipo de una variable, por lo que no tenemos que especificarla expl\u00edcitamente. Cuando la variable no se inicialice deberemos indicar expl\u00edcitamente el tipo de la variable ya que Kotlin no puede inferir el tipo si no se inicializa.</p> <pre><code>val foo: Int = 7\nval bar = 10    // Kotlin infiere autom\u00e1ticamente el tipo\nval hello: String   // Si no se inicializa hay que especificar el tipo\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#numbers","title":"Numbers","text":"<p>https://kotlinlang.org/docs/numbers.html</p> <p>Kotlin proporciona los tipos <code>Byte</code>, <code>Short</code>, <code>Int</code> y <code>Long</code> para enteros.</p> <p></p> <p>Y los tipos <code>Float</code> y <code>Double</code> para n\u00fameros en coma flotante:</p> <p></p> <pre><code>val double: Double = 64.0   // 64 bits\nval float: Float = 32.0F // or 32f (32 bits)\n\nval long: Long = 64L    // 64 bits\nval int: Int = 32       // 32 bits\nval short: Short = 16   // 16 bits\n\nval byte: Byte = 8      // 8 bits\nval hexadecimal: Int = 0x16\nval binary: Int = 0b101\nval char: Char = 'a'\n</code></pre> <p>Todas las variables inicializadas con un entero no deben exceder el tama\u00f1o m\u00e1ximo de <code>Int</code> ya que Kotlin infiere el tipo <code>Int</code> si no se especifica expl\u00edcitamente el tipo o se a\u00f1ade el ap\u00e9ndice 'L' al valor. En el caso de n\u00fameros en coma flotante, Kotlin infiere el tipo <code>Double</code> si no se indica el tipo expl\u00edcitamente o se marca el valor en coma flotante con el ap\u00e9ndice 'F'.</p> <pre><code>val a = 1   // Kotlin infiere el tipo 'Int'\nval b = 1L  // Kotlin infiere el tipo 'Long'\n\nval c = 3.14    // Kotlin infiere el tipo 'Double'\nval d = 2.7123F  // Kotlin infiere el tipo 'Float'\n</code></pre> <p>A diferencia de Java, en Kotlin todos los tipos son objetos y por tanto no hay 'wrappers' u objetos envoltorio tipo <code>Integer</code>, <code>Double</code>, etc...</p> <p>Los guiones bajos se pueden utilizar para hacer que los n\u00fameros grandes sean m\u00e1s legibles:</p> <pre><code>val million = 1_000_000\n</code></pre> <p>La conversi\u00f3n debe ser invocada expl\u00edcitamente. Hay conversiones desde un tipo al resto de tipos:</p> <ul> <li><code>toByte()</code>: Byte</li> <li><code>toShort()</code>: Short</li> <li><code>toInt()</code>: Int</li> <li><code>toLong()</code>: Long</li> <li><code>toFloat()</code>: Float</li> <li><code>toDouble()</code>: Double</li> <li><code>toChar()</code>: Char</li> </ul> <pre><code>val otherLong = int.toLong()\nval direct = 25.toLong()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#characters","title":"Characters","text":"<p>https://kotlinlang.org/docs/characters.html</p> <p>Los caracteres no son n\u00fameros en Kotlin, a diferencia de Java. En Kotlin los caracteres se representan con el tipo <code>Char</code>:</p> <p>Los literales de car\u00e1cter se escriben con comillas simples como por ejemplo <code>'a'</code>. Los caracteres especiales se escapan con la barra invertida <code>'\\'</code>. Est\u00e1n soportadas las siguientes secuencias de escape: <code>\\t</code>, <code>\\b</code>, <code>\\n</code>, <code>\\r</code>, <code>\\'</code>, <code>\\\"</code>, <code>\\\\</code>, <code>\\$</code>.  </p> <p>Podemos convertir de forma expl\u00edcitia un car\u00e1cter en un n\u00famero de tipo <code>Int</code>:</p> <pre><code>fun decimalDigitValue(c: Char): Int {\n    if (c !in '0'..'9')\n        throw IllegalArgumentException(\"Out of range\")\n    return c.toInt() - '0'.toInt() // Explicit conversions to numbers\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#booleanos","title":"Booleanos","text":"<p>El tipo <code>Boolean</code> representa objetos booleanos que pueden tener dos valores:<code>true</code> y <code>false</code>.</p> <p><code>Boolean</code> tiene un tipo nulable <code>Boolean?</code> que tambi\u00e9n acepta valores <code>null</code>.</p> <p>Las operaciones que pueden ser con booleanos son:</p> <ul> <li><code>||</code> \u2013 disyunci\u00f3n (l\u00f3gica O)</li> <li><code>&amp;&amp;</code> \u2013 conjunci\u00f3n (l\u00f3gica Y)</li> <li><code>!</code> \u2013 negaci\u00f3n (l\u00f3gica NO)</li> </ul> <p><code>||</code> y <code>&amp;&amp;</code> trabajan con evaluaci\u00f3n perezosa,es decir, no eval\u00faa todos los operandos al lado de las operaciones. Evaluan el primero, y el segundo solo si es necesario.</p> <pre><code>val myTrue: Booleano =  verdadero\nval myFalse: Booleano =  falso\nval boolNull: Booleano?  = nulo\nprintln(myTrue || myFalse)\nprintln(myTrue &amp;&amp; myFalse)\nprintln(!myTrue)\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#strings","title":"Strings","text":"<p>https://kotlinlang.org/docs/strings.html</p> <p>Las cadenas son secuencias de caracteres inmutables y se representan con el tipo <code>String</code> de manera similar a Java. Las cadenas se crean usando las comillas dobles. El escapado de caracteres se hace con una barra invertida <code>'\\'</code>.</p> <pre><code>val fooString = \"My String Is Here!\"\nval barString = \"Printing on a new line?\\nNo Problem!\"\nval bazString = \"Do you want to add a tab?\\tNo Problem!\"\nprintln(fooString)\nprintln(barString)\nprintln(bazString)\nprintln(\"John Doe\"[2]) // =&gt; h\nprintln(\"John Doe\".startsWith(\"J\")) // =&gt; true\n</code></pre> <p>Se puede acceder a los elementos de una cadena como si fuera un array (e.g. <code>s[i]</code>) e iterar con un bucle tipo <code>for</code>:</p> <pre><code>for (c in str) {\n    println(c)\n}\n</code></pre> <p>Se puede utilizar el operador <code>+</code> para concatenar cadenas entre s\u00ed y con valores de otro tipo siempre y cuando uno de los elementos de la expresi\u00f3n sea una cadena:</p> <pre><code>val s = \"abc\" + 1\nprintln(s + \"def\")\n</code></pre> <p>Una cadena sin formato o 'raw string' est\u00e1 delimitada por una comilla triple (\"\"\"). Las cadenas sin formato pueden contener nuevas l\u00edneas y cualquier otro car\u00e1cter. Estas cadenas sin formato tambi\u00e9n tiene soporte para las 'string templates':</p> <pre><code>val fooRawString = \"\"\"\nfun helloWorld(val name : String) {\n    println(\"Hello, world!\")\n}\nval hello = $who\nval result = ${2 + 2}\n\"\"\"\n</code></pre> <p>Con la funci\u00f3n <code>trimMargin()</code> podemos eliminar los espacios en blanco:</p> <pre><code>val text = \"\"\"\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#string-templates","title":"String templates","text":"<p>https://kotlinlang.org/docs/strings.html#string-templates</p> <p>Un literal de cadena puede contener expresiones de plantilla o 'template expressions', que son fragmentos de c\u00f3digo que ser\u00e1 evaluado y cuyo resultado ser\u00e1 concatenado en la cadena. Son una forma simple y efectiva de incrustar valores, variables o incluso expresiones dentro de una cadena.</p> <p>Una expresi\u00f3n de plantilla comienza con un signo de d\u00f3lar (<code>$</code>) y consisten en un nombre de una variable (por ejemplo <code>$i</code>) o en una expresi\u00f3n (como por ejemplo <code>${name.length}</code>) en cuyo caso se utilizan llaves (<code>{}</code>):</p> <pre><code>val name = \"John Doe\"\nprintln(\"$name has ${name.length} characters\") // =&gt; John Doe has 8 characters\n\nval age = 40\nprintln(\"You are ${if (age &gt; 60) \"old\" else \"young\"}\") // =&gt; You are young\n</code></pre> <p>Las plantillas son compatibles tanto dentro de cadenas sin procesar como dentro de cadenas escapadas. En caso de necesitar representar el literal del d\u00f3lar en una cadena sin escapar se utiliza esta sintaxis:</p> <pre><code>val price = \"\"\"\n${'$'}9.99\n\"\"\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#arrays","title":"Arrays","text":"<p>https://kotlinlang.org/docs/arrays.html</p> <p>Una matriz est\u00e1 representada por la clase <code>Array</code> y es invariante, por lo que, por ejemplo, no se puede asignar un <code>Array&lt;String&gt;</code> a un tipo de variable <code>Array&lt;Any&gt;</code>.</p> <p>En Kotlin, podemos crear una matriz de elementos del mismo tipo o de distinto tipo utilizando la funci\u00f3n de biblioteca <code>arrayOf()</code> y pas\u00e1ndole los elementos a a\u00f1adir:</p> <pre><code>val cardNames = arrayOf(\"Jack\", \"Queen\", \"King\", 3, false)\nprintln(cardNames[1])   // =&gt; Queen\n</code></pre> <p>Podemos forzar la creaci\u00f3n de arrays del mismo tipo. De esta forma el compilador comprobar\u00e1 el tipo de los elementos que se a\u00f1aden y evitar\u00e1 que se a\u00f1adan elementos de tipos no v\u00e1lidos:</p> <pre><code>val myArray = arrayOf&lt;Int&gt;(1, 2, 3, 4)\nprintln(myArray.contentToString()) // =&gt; [1, 2, 3, 4]\n</code></pre> <p>La biblioteca est\u00e1ndar de Kotlin provee funciones para crear arrays de tipos primitivos como <code>intArrayOf()</code>, <code>longArrayOf()</code>, <code>charArrayOf()</code>, <code>doubleArrayOf()</code>, etc... Cada una de estas funciones devuelven una instancia de su equivalente en Kotlin como <code>IntArray</code>, <code>LongArray</code>, <code>CharArray</code>, <code>DoubleArray</code>, etc...:</p> <pre><code>val cards = intArrayOf(10, 11, 12) // IntArray\nprintln(\"${cards[1]}\") // =&gt; 11\n</code></pre> <p>Para mejorar la eficiencia y rendimiento del c\u00f3digo, cuando se utilicen tipos primitivos hay que utilizar las funciones <code>intArrayOf()</code>, <code>longArrayOf()</code>, etc.. en vez de <code>arrayOf()</code> para as\u00ed evitar el coste asociado a las operaciones de 'boxing'/'unboxing'.</p> <p>Alternativamente, podemos crear una matriz a partir de un tama\u00f1o inicial y una funci\u00f3n, que se utiliza para generar cada elemento usando el constructor <code>Array()</code>:</p> <pre><code>val allCards = Array(12, { i -&gt; i + 1 })\nprintln(\"${allCards.first()} - ${allCards.last()}\") // =&gt; 1 - 12\n</code></pre> <p>Iterando sobre la matriz con <code>indices</code>:</p> <pre><code>for (index in cardNames.indices) {\n    println(\"Element $index is ${cardNames[index]}\")\n}\n</code></pre> <p>Otra forma posible de iterar es usando la funci\u00f3n <code>withIndex()</code>:</p> <pre><code>for ((index, value) in cardNames.withIndex()) {\n    println(\"$index - $value\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#packages","title":"Packages","text":"<p>https://kotlinlang.org/docs/packages.html</p> <p>La palabra clave <code>package</code> funciona de la misma manera que en Java. El nombre del paquete se usa para construir el \"Fully Qualified Name\" (FQN) de una clase, objeto, interfaz o funci\u00f3n.</p> <p>Todo el contenido (como clases y funciones) de un fichero fuente est\u00e1n contenidos en el paquete declarado. Los nombres de los paquetes se escriben en min\u00fascula y sin guiones bajos:</p> <pre><code>package com.example.kotlin\n\nclass MyClass { /*...*/ }\n\nfun saySomething(): String { /*...*/  }\n</code></pre> <p>En el ejemplo, el FQN de la clase ser\u00e1 <code>com.example.kotlin.MyClass</code>.</p> <p>Dado que podemos tener 'top-level functions' como la funci\u00f3n <code>saySomething()</code> del ejemplo, el FQN de esta funci\u00f3n ser\u00e1 <code>com.example.kotlin.saySomething</code>.</p> <p>Si no se especifica un paquete, el contenido del fichero fuente pertenece al paquete 'default'.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#imports","title":"Imports","text":"<p>https://kotlinlang.org/docs/packages.html#imports</p> <p>En Kotlin, usamos la declaraci\u00f3n de importaci\u00f3n para permitir que el compilador localice las clases e interfaces, propiedades, enumeraciones, funciones y objetos que se importar\u00e1n.</p> <p>En Java, por otro lado, solo est\u00e1 permitido importar clases o interfaces.</p> <pre><code>// 'Bar' esta disponible en el c\u00f3digo\nimport foo.Bar\n\n// Si existe cierta ambig\u00fcedad podemos usar la palabra clave 'as'\nimport foo.Bar\nimport bar.Bar as bBar\n\n// Todo el contenido de 'foo' est\u00e1 disponible\nimport foo.*\n</code></pre> <p>Por defecto, al igual que en Java, el compilador importa de forma impl\u00edcita una serie de paquetes y por tanto est\u00e1n disponibles de forma autom\u00e1tica:</p> <ul> <li>kotlin.*</li> <li>kotlin.annotation.*</li> <li>kotlin.collections.*</li> <li>kotlin.comparisons.*</li> <li>kotlin.io.*</li> <li>kotlin.ranges.*</li> <li>kotlin.sequences.*</li> <li>kotlin.text.*</li> </ul> <p>Additional packages are imported depending on the target platform:</p> <ul> <li>JVM:</li> <li>java.lang.*</li> <li>kotlin.jvm.*</li> <li>JS:</li> <li>kotlin.js.*</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#comentarios","title":"Comentarios","text":"<pre><code>// Single-line comments start with //\n\n/*\nMulti-line comments look like this.\n*/\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#control-de-flujo-y-bucles","title":"Control de flujo y bucles","text":"<p>https://kotlinlang.org/docs/control-flow.html#control-flow-if-when-for-while</p> <p>Kotlin tiene 4 construcciones de control de flujo: <code>if</code>, <code>when</code>, <code>for</code> y <code>while</code>.  <code>if</code> y <code>when</code> son expresiones, por lo que devuelven un valor; <code>for</code> y <code>when</code> son declaraciones, por lo que no devuelven un valor. <code>if</code> y <code>when</code> tambi\u00e9n se pueden utilizar como sentencias, es decir, se pueden utilizar de forma aut\u00f3noma y sin devolver un valor.</p> <p>Un bucle <code>for</code> puede usarse con cualquier elemento que proporcione un iterador como rangos, colecciones, etc...:</p> <pre><code>for (c in \"hello\") {\n    println(c)\n}\n\nfor (i in 1..3) {\n    println(i)\n}\n\nfor (i in 6 downTo 0 step 2) {\n    println(i)\n}\n</code></pre> <p>Los bucles <code>while</code> y <code>do-while</code> funcionan de la misma manera que en otros lenguajes:</p> <pre><code>while (x &gt; 0) {\n    x--\n}\n\ndo {\n    val y = retrieveData()\n} while (y != null) // y is visible here!\n</code></pre> <p>La instrucci\u00f3n <code>if</code> y <code>if..else</code> funciona igual que en Java. Adem\u00e1s, en Kotlin los bloques <code>if</code> se pueden utilizar como una expresi\u00f3n que devuelve un valor. Por este motivo el operador ternario 'condition ? then: else' no es necesario en Kotlin:</p> <pre><code>// Traditional usage\nvar max = a\nif (a &lt; b) max = b\n\n// With else\nvar max: Int\nif (a &gt; b) {\n    max = a\n} else {\n    max = b\n}\n\n// As expression\nval max = if (a &gt; b) a else b\n\n// With blocks\n// returns a or 5\nvar top = if (a &gt; 5) {\n    println(\"a is greater than 5\")\n    a\n} else {\n    println(\"5 is greater than a\")\n    5\n}\n</code></pre> <p>Los bloques <code>when</code> se pueden usar como una alternativa a las cadenas <code>if-else-if</code> o en substituci\u00f3n de los <code>switch</code>. Si no se proporciona ning\u00fan argumento, las condiciones de la rama son simplemente expresiones booleanas, y una rama se ejecuta cuando su condici\u00f3n es verdadera:</p> <pre><code>when {\n    x.isOdd() -&gt; print(\"x is odd\")\n    x.isEven() -&gt; print(\"x is even\")\n    else -&gt; print(\"x is funny\")\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede usar con un argumento. Si ninguna de las opciones coincide con el argumento, se ejecuta la opci\u00f3n del bloque <code>else</code>:</p> <pre><code>when (x) {\n    1 -&gt; print(\"x == 1\")\n    2 -&gt; print(\"x == 2\")\n    else -&gt; {\n        println(\"none of the above\") // N\u00f3tese el uso de llaves para delimitar el bloque de c\u00f3digo\n    }\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede utilizar como una expresi\u00f3n que devuelve un valor. En este caso el bloque <code>else</code> es obligatorio. De hecho, la \u00fanica excepci\u00f3n a esta regla es si el compilador puede garantizar que siempre devuelve un valor. Por lo tanto, si las ramas normales cubren todos los valores posibles, entonces no hay necesidad de una rama <code>else</code>:</p> <pre><code>val result = when (i) {\n    0, 21 -&gt; \"0 or 21\"\n    in 1..20 -&gt; \"in the range 1 to 20\"\n    else -&gt; \"none of the above\"\n}\nprintln(result)\n\nval check = true\nval result = when(check) {   // All results are covered\n    true -&gt; println(\"it's true\")\n    false -&gt; println(\"it's false\")\n}\n</code></pre> <p>Se pueden utilizar expresiones arbitrarias, y no solo constantes, como condiciones en los bloques:</p> <pre><code>when (x) {\n    parseInt(s) -&gt; print(\"s encodes x\")\n    else -&gt; print(\"s does not encode x\")\n}\n</code></pre> <p>Si muchos casos deben manejarse de la misma manera, las condiciones de la rama pueden combinarse con una coma:</p> <pre><code>when (x) {\n    0, 1 -&gt; print(\"x == 0 or x == 1\")\n    else -&gt; print(\"otherwise\")\n}\n</code></pre> <p>Tambi\u00e9n podemos verificar si un valor est\u00e1 dentro <code>in</code> o no est\u00e1 dentro <code>!in</code> de un rango o una colecci\u00f3n:</p> <pre><code>when (x) {\n    in 1..10 -&gt; print(\"x is in the range\")\n    in validNumbers -&gt; print(\"x is valid\")\n    !in 10..20 -&gt; print(\"x is outside the range\")\n    else -&gt; print(\"none of the above\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#funciones","title":"Funciones","text":"<p>https://kotlinlang.org/docs/functions.html</p> <p>Las funciones se declaran usando la palabra clave <code>'fun'</code>. Los nombres de las funciones empiezan con min\u00fascula. Los par\u00e1metros de la funci\u00f3n se especifican entre par\u00e9ntesis despu\u00e9s del nombre de la funci\u00f3n y tienen la forma <code>'name: type'</code>. El tipo de cada par\u00e1metro debe especificarse expl\u00edcitamente y no puede omitirse.</p> <pre><code>fun powerOf(number: Int, exponent: Int) { ... }\n</code></pre> <p>Los par\u00e1metros de la funci\u00f3n pueden tener opcionalmente un valor por defecto, que se utilizar\u00e1 en caso de se omita el argumento al invocar la funci\u00f3n. El tipo de retorno de la funci\u00f3n, si es necesario, se especifica despu\u00e9s de los par\u00e1metros:</p> <pre><code>fun hello(name: String = \"world\"): String { // valor por defecto\n    return \"Hello, $name!\"\n}\n\nhello(\"foo\") // =&gt; Hello, foo!\nhello(name = \"bar\") // =&gt; Hello, bar!\nhello() // =&gt; Hello, world!\n\nfun bye(bye: String = \"Bye\", name: String): String {\n    return \"$bye, $name!!\"\n}\n\nbye(name = \"John\", bye = \"Good bye\") // =&gt; Good bye, John!!\nbye(name = \"John\") // =&gt; Bye, John!!\n</code></pre> <p>Si un par\u00e1metro por defecto precede a un par\u00e1metro sin valor predeterminado, el valor por defecto solo se puede usar llamando a la funci\u00f3n con argumentos con nombre:</p> <pre><code>fun foo(bar: Int = 0, baz: Int) { ... }\n\nfoo(baz = 1) // The default value bar = 0 is used\n</code></pre> <p>Dado que Java no admite valores de par\u00e1metros por defecto en los m\u00e9todos, deber\u00e1 especificar todos los valores de par\u00e1metros expl\u00edcitamente cuando llame a una funci\u00f3n de Kotlin desde Java. Kotlin nos proporciona la funcionalidad para facilitar las llamadas de Java al anotar la funci\u00f3n Kotlin con <code>'@JvmOverloads'</code>. Esta anotaci\u00f3n le indicar\u00e1 al compilador de Kotlin que genere las funciones sobrecargadas de Java para nosotros.</p> <pre><code>@JvmOverloads\nfun calCircumference(radius: Double, pi: Double = Math.PI): Double = (2 * pi) * radius\n\n// En Java\ndouble calCircumference(double radius, double pi);\ndouble calCircumference(double radius);\n</code></pre> <p>Cuando una funci\u00f3n no devuelve ning\u00fan valor significativo, su tipo de devoluci\u00f3n por defecto es <code>Unit</code>. En ese caso indicar el tipo de retorno es opcional. El tipo <code>Unit</code> es un objeto en Kotlin que es similar a los tipos <code>void</code> en Java y C.</p> <pre><code>fun hello(name: String): Unit {\n   print(\"Hello $name\")\n}\n\nfun sayHello(name: String) { // compila ya que el compilador infiere el tipo 'Unit'\n   print(\"Hello $name\")\n}\n</code></pre> <p>Los par\u00e1metros con nombre permiten c\u00f3digo m\u00e1s legible al nombrar los par\u00e1metros que se pasan a una funci\u00f3n cuando se invoca. Una vez que se utiliza un nombre en un par\u00e1metro, el resto de par\u00e1metros tambi\u00e9n deben asignarse con nombre:</p> <pre><code>fun area(width: Int, height: Int): Int {\n    return width * height\n}\n\narea(10, 12)\narea(width = 10, height = 12) // c\u00f3digo m\u00e1s legible\narea(height = 12, width = 10) // podemos cambiar el orden\narea(10, height = 12) // argumento por posici\u00f3n y argumentos con nombre\narea(width = 10, 12) // \u00a1incorrecto! no se permiten argumentos con nombre antes de argumentos por posici\u00f3n\n\nfun bar(k: Int, m: Long = 1L, j: Boolean = true) = println(\"$k - $m - $j\")\n\n// Una vez que un par\u00e1metro ha sido nombrado, todos los siguientes par\u00e1metros deben ser nombrados\nbar(10) // =&gt; Se omiten los par\u00e1mentros por defecto\nbar(15, 30L)\nbar(20, 2L, true)\nbar(m = 30L, j = false, k = 10)\nbar(k = 10, m = 20L, j = true)\nbar(5, m = 2L, j = true)\nbar(6, 1L, j = true)\n</code></pre> <p>Cuando se invoca una funci\u00f3n con argumentos posicionales y con nombre, todos los argumentos posicionales deben colocarse antes del primero argumento con nombre. Por ejemplo, la llamada <code>f(1, y = 2)</code> est\u00e1 permitida, pero <code>f(x = 1, 2)</code> no est\u00e1 permitida.</p> <p>Para pasar un n\u00famero variable de argumentos a una funci\u00f3n podemos usar la palabra clave <code>'vararg'</code> delante del nombre de una variable. Por tanto la funci\u00f3n aceptar\u00e1 una lista de par\u00e1metros separados por comas que el compilador envolver\u00e1 en una array. Por tanto, dentro de la funci\u00f3n accederemos a los par\u00e1metros mediante la notaci\u00f3n de array.</p> <p>Este tipo de par\u00e1metros se puede combinar con otros par\u00e1metros. Normalmente el par\u00e1metro <code>'vararg'</code> ser\u00e1 el \u00faltimo de la lista. Si hay otros par\u00e1metros despu\u00e9s de <code>'vararg'</code>, deber\u00e1n usarse par\u00e1metros con nombre:</p> <pre><code>fun varargExample(vararg names: Int) {\n    println(\"Argument has ${names.size} elements\")\n}\nvarargExample() // =&gt; Argument has 0 elements\nvarargExample(1) // =&gt; Argument has 1 elements\nvarargExample(1, 2, 3) // =&gt; Argument has 3 elements\n\n\nfun car(vararg model: String, year: Int) {}\ncar(\"Audi\", \"A6\", year = 2005) // par\u00e1metros con nombre despu\u00e9s de 'vararg'\n</code></pre> <p>Para utilizar un array para suministrar un n\u00famero variable de argumentos se utiliza el operador <code>'*'</code> tambi\u00e9n llamado 'spread operator' delante del nombre de la variable del array:</p> <pre><code>val intArray = intArrayOf(1, 2, 3, 4)\nval array = Array(5, { i -&gt; i + 1 })\nvarargExample(*intArray) // =&gt; Argument has 4 elements\nvarargExample(*array.toIntArray()) // =&gt; Argument has 5 elements\n</code></pre> <p>Cuando una funci\u00f3n consiste en una sola expresi\u00f3n, se pueden omitir los par\u00e9ntesis. El cuerpo se especifica despu\u00e9s de un s\u00edmbolo <code>'='</code>:</p> <pre><code>fun odd(x: Int): Boolean = x % 2 == 1\n</code></pre> <p>Declarar expl\u00edcitamente el tipo de retorno de una funci\u00f3n cuando es una expresi\u00f3n es opcional cuando puede ser inferido por el compilador o cuando el tipo de retorno es <code>'Unit'</code>. Cuando el cuerpo de una funci\u00f3n es un bloque hay que especificar el tipo de retorno ya que el compilador no puede inferirlo:</p> <pre><code>fun even(x: Int) = x % 2 == 0  // Optional\n\nfun printHello(name: String?) { // 'Unit'\n    if (name != null)\n        println(\"Hello ${name}\")\n    else\n        println(\"Hi there!\")\n    // `return Unit` or `return` is optional\n}\n</code></pre> <p>A veces queremos devolver m\u00faltiples valores desde una funci\u00f3n. Una forma es usar el tipo <code>'Pair'</code> de Kotlin. Esta estructura incluye dos valores a los que luego se puede acceder. Este tipo de Kotlin puede aceptar cualquier tipo que suministre a su constructor. Y, lo que es m\u00e1s, los dos tipos ni siquiera necesitan ser iguales. Kotlin tambi\u00e9n provee el tipo <code>'Triple'</code> que retorna tres valores:</p> <pre><code>fun getNumbers(num: Int): Pair&lt;Int?, Int?&gt; {\n    require(num &gt; 0, { \"Error: num is less than 0\" })\n    return Pair(num, num * 2)\n}\n\nval(num, num2) = getNumbers(10) // destructuring\n</code></pre> <p>En Kotlin, podemos hacer que la creaci\u00f3n de una instancia 'Pair' sea m\u00e1s compacta y legible utilizando la funci\u00f3n 'to', que es una funci\u00f3n 'infix' en lugar del constructor de 'Pair'.</p> <pre><code>val nigeriaCallingCodePair = 234 to \"Nigeria\"\nval nigeriaCallingCodePair2 = Pair(234, \"Nigeria\") // Same as above\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#extension-functions","title":"Extension functions","text":"<p>Las 'extension functions' son una forma de agregar nuevas funcionalidades a una clase sin tener que heredar de dicha clase. Esto es similar a los m\u00e9todos de extensi\u00f3n de C#. Una funci\u00f3n de extensi\u00f3n se declara fuera de la clase que quiere extender. En otras palabras, tambi\u00e9n es una 'top-level function'. Junto con las funciones de extensi\u00f3n, Kotlin tambi\u00e9n admite propiedades de extensi\u00f3n.</p> <p>Para crear una 'extension function', debe prefijar el nombre de la clase que est\u00e1 extendiendo antes del nombre de la funci\u00f3n. El nombre de la clase o el tipo en el que se define la extensi\u00f3n se denomina tipo de receptor, y el objeto receptor es la instancia de clase o el valor concreto sobre el que se llama a la funci\u00f3n de extensi\u00f3n.</p> <pre><code>fun String.remove(c: Char): String {  // 'String' es el tipo receptor\n    return this.filter { it != c }     // 'this' corresponde al objeto receptor\n}\n\nprintln(\"Hello, world!\".remove('l')) // =&gt; Heo, word!  // \"Hello World\" es el objeto receptor\n</code></pre> <p>En caso de que una 'extension function' tenga la misma firma (mismo nombre y misma lista de par\u00e1metros) que una funci\u00f3n miembro, es decir, una funci\u00f3n de la clase, el compilador invocar\u00e1 antes la funci\u00f3n miembro que la funci\u00f3n de extensi\u00f3n aunque no se generar\u00e1 ning\u00fan error de compilaci\u00f3n:</p> <pre><code>class C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo() {\n    println(\"extension\")\n}\n\nfun C.foo(i: Int) {\n    println(\"extension &amp; overrided\")\n}\n\nC().foo() // =&gt; member\nC().foo(5) // =&gt; extension &amp; overrided\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#top-level-functions","title":"Top-level functions","text":"<p>Las funciones de nivel superior son funciones que se definen fuera de cualquier clase, objeto o interfaz. Esto significa que son funciones a las que llama directamente, sin la necesidad de crear ning\u00fan objeto o llamar a ninguna clase. Dado que Java no soporta este tipo de funciones el compilador de Kotlin genera una clase con m\u00e9todos est\u00e1ticos. Este tipo de funciones son especialmente \u00fatiles para crear funciones de utilidad o de ayuda.</p> <pre><code>// Code defined inside a file called 'UserUtils.kt'\n@file:JvmName(\"UserUtils\")\npackage com.example.project.utils\n\nfun checkUserStatus(): String {\n    return \"online\"\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#high-order-functions","title":"High-Order Functions","text":"<p>Las funciones en Kotlin son de primera clase, lo que significa que pueden ser almacenadas en variables y estructuras de datos, pasadas como argumentos y devueltas desde otras funciones de orden superior. Puede operar con funciones de cualquier manera que sea posible para otros valores no funcionales.</p> <p>Para facilitar esto, Kotlin, como lenguaje de programaci\u00f3n est\u00e1ticamente tipado, utiliza una familia de tipos de funci\u00f3n para representar funciones y proporciona un conjunto de construcciones de lenguaje especializadas, tales como expresiones lambda.</p> <p>Una 'high-order function' o funci\u00f3n de orden superior es una funci\u00f3n que puede tomar funciones como par\u00e1metros y/o devolver una funci\u00f3n como tipo de retorno.</p> <pre><code>// Funci\u00f3n con dos par\u00e1metros, el segundo de ellos es una funci\u00f3n\nfun foo(str: String, fn: (String) -&gt; String): Unit {\n    val applied = fn(str)\n    println(applied)\n}\nfoo(\"Hello\", { it.reversed() }) // =&gt; olleH\n\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n\nfun isPositive(n: Int): (Int) -&gt; Boolean {\n    return { n &gt; 0 } // return a function. Instead 'return value' we have 'return { function }'\n}\n\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n de forma m\u00e1s compacta\nfun modulo(k: Int): (Int) -&gt; Boolean = { it % k == 0 }\n// fun modulo(k: Int): (Int) -&gt; Boolean = { n:Int -&gt; n % k == 0 } //igual que la definici\u00f3n de arriba.  \n\nval evens = listOf(1, 2, 3, 4, 5, 6).filter(modulo(2)) // =&gt; [2, 4, 6]\n\n// Asignar la funci\u00f3n a una variable\nval isEven: (Int) -&gt; Boolean = modulo(2)\n\nlistOf(1, 2, 3, 4).filter(isEven) // =&gt; [2, 4]\nlistOf(5, 6, 7, 8).filter(isEven) // =&gt; [6, 8]\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#functions-types-lambdas","title":"Functions types &amp; Lambdas","text":"<p>Un tipo funci\u00f3n es un tipo que consta de una firma de funci\u00f3n, es decir, dos par\u00e9ntesis que contiene la lista de par\u00e1metros (que son opcionales) y un tipo de retorno. Ambas partes est\u00e1n separadas por el operador <code>'-&gt;'</code>.</p> <p>Cuando se define un tipo funci\u00f3n, siempre se debe indicar expl\u00edcitamente el tipo de retorno. Cuando se declaran funciones normales que devuelven <code>Unit</code>, se puede omitir el tipo de retorno ya que el compilador lo infiere, pero no se puede omitir en los tipos funci\u00f3n. Adem\u00e1s, debe poner los par\u00e9ntesis para los par\u00e1metros, incluso cuando el tipo funci\u00f3n no acepta ning\u00fan par\u00e1metro.</p> <pre><code>fun executor(action:() -&gt; Unit) {\n    action()\n}\n\n// 'action' es el nombre del par\u00e1metro y su tipo es '() -&gt; Unit' que es una funci\u00f3n.\n// Por tanto el tipo de 'action' es un tipo funci\u00f3n.\n</code></pre> <ul> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve 'Unit': <code>() -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve un String: <code>() -&gt; String</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma un String y no devuelve nada: <code>(String) -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma dos par\u00e1metros y no devuelve nada: <code>(String, Float) -&gt; Unit</code></li> </ul> <p>Debido a que un tipo funci\u00f3n es solo un tipo, significa que puede asignar una funci\u00f3n a una variable, puede pasarla como un argumento a otra funci\u00f3n o puede devolverla desde una funci\u00f3n tal y como suceden en las `high-order functions':</p> <pre><code>val saySomething: (String) -&gt; Unit = { x -&gt; println(x) }\nsaySomething(\"Good morning\") // =&gt; Good morning\n</code></pre> <p>Una forma de instanciar una funci\u00f3n tipo es usando el operador <code>'::'</code>. Tambi\u00e9n podemos usar este operardor para pasar un tipo funci\u00f3n como par\u00e1metro de otra funci\u00f3n especificando su nombre con el operador y sin utilizar los par\u00e9ntesis:</p> <pre><code>fun businessEmail(s: String): Boolean {\n    return s.contains(\"@\") &amp;&amp; s.contains(\"business.com\")\n}\nisAnEmail(::businessEmail) // Invocar una 'high-order function' pas\u00e1ndole otra funci\u00f3n por su nombre\n\nfun tell(text: String) {\n    println(text)\n}\n\nvar saySomething: (String) -&gt; Unit // La variable 'saySomething' es una variable de tipo funci\u00f3n\nsaySomething = ::tell // instanciar el tipo funci\u00f3n y asignarlo a la variable 'saySomething'\n\nsaySomething(\"Hello\") //=&gt; Hello\n</code></pre> <p>En particular, una lambda es una funci\u00f3n literal: una funci\u00f3n an\u00f3nima que no se declara pero se usa directamente como una expresi\u00f3n.</p> <p>B\u00e1sicamente, una lambda es un bloque de c\u00f3digo que se puede pasar como cualquier otro literal (por ejemplo, simplemente como una cadena literal <code>\"una cadena\"</code>). La combinaci\u00f3n de estas caracter\u00edsticas permite a Kotlin soportar la programaci\u00f3n funcional b\u00e1sica.</p> <p>En el ejemplo una variable 'sum' de tipo funci\u00f3n y a la que le asignamos directamente una funci\u00f3n 'lambda' con dos par\u00e1metros:</p> <pre><code>// Asignando una funci\u00f3n 'lambda'\nval sum: (Int, Int) -&gt; Int = { x, y -&gt; x + y }\nsum(10, 20) // =&gt; 30\n\n// Equivalente usando el operador '::'\nfun operation(x: Int, y: Int): Int {\n    return x + y\n}\nval sum: (Int, Int) -&gt; Int = ::operation\nsum(10, 20) // =&gt; 30\n</code></pre> <p>En Kotlin, por convenci\u00f3n si una funci\u00f3n 'lambda' tiene solo un par\u00e1metro, su declaraci\u00f3n puede omitirse (junto con -&gt;). El nombre del \u00fanico par\u00e1metro ser\u00e1 <code>'it'</code>.</p> <pre><code>val isNegative: (Int) -&gt; Boolean = { it &lt; 0 } // este literal es del tipo '(it: Int) -&gt; Boolean'\nisNegative(-5) // =&gt; true\n</code></pre> <p>Otra convenci\u00f3n es que si el \u00faltimo par\u00e1metro de una funci\u00f3n acepta una funci\u00f3n, una expresi\u00f3n 'lambda' que es pasada como el argumento correspondiente se puede colocar fuera de los par\u00e9ntesis:</p> <pre><code>// lambda expression inside parentheses\nval upperCaseLetters = \"Hello World\".filter({ it.isUpperCase() })\n\n// lambda outside parentheses\nval lowerCaseLetters = \"Hello World\".filter { it.isLowerCase() }\n\nprintln(\"$upperCaseLetters - $lowerCaseLetters\") // =&gt; HW - elloorld\n</code></pre> <p>El siguiente ejemplo tenemos una funci\u00f3n de orden superior que acepta una funci\u00f3n lambda <code>{ (String) -&gt; Boolean }</code> como par\u00e1metro. Se expresa como \"acepta una funci\u00f3n 'from String to Boolean'\":</p> <pre><code>// El par\u00e1metro 'email' podemos usarlo como una funci\u00f3n que acepta una cadena y devuelve un booleano.\nfun isAnEmail(email: (String) -&gt; Boolean) {\n    email(\"myemail@example.com\")\n}\nisAnEmail({ s: String -&gt; s.contains(\"@\") }) // forma completa\nisAnEmail { s: String -&gt; s.contains(\"@\") } // Los par\u00e9ntesis son opcionales\nisAnEmail { it.contains(\"@\") } // Uso de 'it'\n</code></pre> <p>Para par\u00e1metros no utilizados se utiliza el operador <code>'_'</code>:</p> <pre><code>val unusedSecondParam: (String, Int) -&gt; Boolean = { s, _ -&gt;\n    s.length &gt; 10\n}\nunusedSecondParam(\"Hello World\", 0) // 0 is unused\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#anonymous-functions","title":"Anonymous functions","text":"<p>Una funci\u00f3n an\u00f3nima se parece mucho a una declaraci\u00f3n de funci\u00f3n normal, excepto que se omite su nombre. Su cuerpo puede ser una expresi\u00f3n o un bloque:</p> <pre><code>// Funci\u00f3n an\u00f3nima cuyo cuerpo es una expresi\u00f3n\nfun(x: Int, y: Int): Int = x + y\n\n// Funci\u00f3n an\u00f3nima con bloque\nfun(x: Int, y: Int): Int {\n    return x + y\n}\n</code></pre> <p>El tipo de los par\u00e1metros de una funci\u00f3n an\u00f3nima pueden omitirse si se pueden inferir por el contexto:</p> <pre><code>ints.filter(fun(item) = item &gt; 0)\n</code></pre> <p>La inferencia de tipo de retorno para funciones an\u00f3nimas funciona igual que para las funciones normales: el tipo de retorno se deduce autom\u00e1ticamente para funciones an\u00f3nimas con un cuerpo de expresi\u00f3n y debe especificarse expl\u00edcitamente (o se supone que es <code>'Unit'</code>) para funciones an\u00f3nimas con un cuerpo de bloque.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#closures","title":"Closures","text":"<p>Un 'closure' es una funci\u00f3n que tiene acceso a variables y par\u00e1metros que se definen en un \u00e1mbito externo. A diferencia de Java, las variables 'capturadas' pueden ser modificadas.</p> <pre><code>fun printFilteredNamesByLength(length: Int) {\n    val names = arrayListOf(\"Adam\", \"Andrew\", \"Chike\", \"Kechi\")\n    val filterResult = names.filter {\n        it.length == length     // 'length' se define fuera del \u00e1mbito de la lambda\n    }\n    println(filterResult)\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#local-or-nested-functions","title":"Local or Nested Functions","text":"<p>Para llevar m\u00e1s lejos la modularizaci\u00f3n de programas, Kotlin nos proporciona funciones locales, tambi\u00e9n conocidas como funciones anidadas o 'nested functions'. Una funci\u00f3n local es una funci\u00f3n que se declara dentro de otra funci\u00f3n.</p> <p>Podemos hacer que nuestras funciones locales sean m\u00e1s concisas al no pasarles par\u00e1metros expl\u00edcitamente. Esto es posible porque las funciones locales tienen acceso a todos los par\u00e1metros y variables de la funci\u00f3n de cierre.</p> <pre><code>fun printCircumferenceAndArea(radius: Double): Unit {\n\n    fun calCircumference(radius: Double): Double = (2 * Math.PI) * radius\n    val circumference = \"%.2f\".format(calCircumference(radius))\n\n    fun calArea(radius: Double): Double = (Math.PI) * Math.pow(radius, 2.0)\n    val area = \"%.2f\".format(calArea(radius))\n\n    print(\"The circle circumference of $radius radius is $circumference and area is $area\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#infix-functions","title":"Infix Functions","text":"<p>Las funciones marcadas con la palabra clave <code>'infix'</code> se pueden llamar usando la notaci\u00f3n 'infix' (omitiendo el punto y los par\u00e9ntesis para la llamada). Estas funciones deben cumplir los siguientes requisitos:</p> <ul> <li>Tienen que ser miembros de una clase o funciones de extensi\u00f3n</li> <li>Deben tener un solo par\u00e1metro</li> <li>Este par\u00e1metro no ser\u00e1 <code>'vararg'</code> ni tener valor por defecto</li> </ul> <p>Para invocar una funci\u00f3n <code>'infix'</code> en Kotlin no necesitamos usar la notaci\u00f3n de puntos ni los par\u00e9ntesis. Hay que tener en cuenta que las funciones <code>'infix'</code> siempre requieren que se especifiquen tanto el receptor como el par\u00e1metro. Cuando se invoca un m\u00e9todo en el receptor actual, como por ejemplo dentro de la clase, se necesita usar explicitamente la notaci\u00f3n <code>'this'</code>. A diferencia de las llamadas a m\u00e9todos regulares, no se puede omitir.</p> <pre><code>class Student {\n    var kotlinScore = 0.0\n\n    infix fun addKotlinScore(score: Double): Unit {\n        this.kotlinScore = kotlinScore + score\n    }\n\n    fun build() {\n        this addKotlinScore 95.0   // Correcto\n        addKotlinScore(95.0)       // Correcto\n        addKotlinScore 95.0        // Incorrectp: hay que especificar el receptor ('this')\n    }\n}\n\nval student = Student()\nstudent addKotlinScore 95.00 // Invocando la funci\u00f3n usando la notaci\u00f3n 'infix'\nstudent.addKotlinScore(95) // Invocando la funci\u00f3n con notaci\u00f3n normal\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#inline-functions","title":"Inline functions","text":"<p>El compilador de Kotlin crea una clase an\u00f3nima en versiones anteriores de Java cuando creamos o utilizamos expresiones lambda. Esto genera una sobrecarga, adem\u00e1s de la carga de memoria que se genera cuando en una funci\u00f3n lambda hace uso de variables de fuera de su entorno como en las 'closures'.</p> <p>Para evitar esta sobrecarga tenemos el modificador <code>'inline'</code> para las funciones. Una 'High-Order function' con el modificador <code>'inline'</code> se integrar\u00e1 durante la compilaci\u00f3n del c\u00f3digo. En otras palabras, el compilador copiar\u00e1 la 'lambda' (o funci\u00f3n literal) y tambi\u00e9n el cuerpo de la funci\u00f3n de orden superior y los pegar\u00e1 en el sitio de la llamada.</p> <p>Con este mecanismo, nuestro c\u00f3digo se ha optimizado significativamente, no m\u00e1s creaci\u00f3n de clases an\u00f3nimas o asignaciones de memoria extra. Por otro lado el uso de <code>'inline'</code> hace que el compilador genere ficheros bytecode m\u00e1s grandes. Por esta raz\u00f3n, se recomienda encarecidamente que solo se incluyan funciones de orden superior m\u00e1s peque\u00f1as que acepten lambda como par\u00e1metros.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> <li>https://revilofe.github.io/IESRA-DAM-Prog/#/</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/","title":"Apuntes de [Kotlin]","text":""},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#colecciones","title":"Colecciones","text":"<p>Kotlin proporciona su API de colecciones como una biblioteca est\u00e1ndar construida sobre la API de colecciones de Java como 'ArrayList', 'Maps', etc... Kotlin tiene dos variantes de colecciones: mutables e inmutables. Una colecci\u00f3n mutable nos brinda la capacidad de modificar una colecci\u00f3n ya sea agregando, eliminando o reemplazando un elemento. Las colecciones inmutables no se pueden modificar y no tienen estos m\u00e9todos de ayuda.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#lists-inmutable","title":"Lists - [Inmutable]","text":"<p>Una lista es una colecci\u00f3n ordenada de elementos. Esta es una colecci\u00f3n popular ampliamente utilizada.</p> <p>Podemos crear una lista inmutable usando la funci\u00f3n <code>listOf()</code>. Los elementos no se pueden agregar ni eliminar.</p> <pre><code>val fooList = listOf(\"a\", \"b\", \"c\", 1, false)\nval numbers: List&lt;Int&gt; = listOf(1, 2, 3, 4)\nval emptyList: List&lt;String&gt; = emptyList&lt;String&gt;() // lista vac\u00eda\nval nonNullsList: List&lt;String&gt; = listOfNotNull(2, 45, 2, null, 5, null) // lista de valores no nulos\n\nprintln(fooList.size) // =&gt; 3\nprintln(fooList.first()) // =&gt; a\nprintln(fooList.last()) // =&gt; c\nprintln(fooList.indexOf(\"b\")) // 1\n\n// Se puede acceder a los elementos de una lista por su \u00edndice\nprintln(fooList[1]) // =&gt; b\n</code></pre> <p>Se puede crear una lista mutable utilizando la funci\u00f3n <code>mutableListOf()</code>:</p> <pre><code>val fooMutableList = mutableListOf(\"a\", \"b\", \"c\")\nfooMutableList.add(\"d\")\nprintln(fooMutableList.last()) // =&gt; d\nprintln(fooMutableList.size) // =&gt; 4\n</code></pre> <p>Con la funci\u00f3n <code>'arrayListOf()'</code> crea una lista mutable y devuelve un tipo 'ArrayList' de la API de colecciones de Java.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#sets-inmutable","title":"Sets - [Inmutable]","text":"<p>Un conjunto o 'set' es una colecci\u00f3n desordenada de elementos \u00fanicos. En otras palabras, es una colecci\u00f3n que no admite duplicados.</p> <p>Podemos crear un conjunto (o 'set') inmutable utilizando la funci\u00f3n <code>'setOf()'</code>:</p> <pre><code>val fooSet = setOf(\"a\", \"b\", \"c\")\nprintln(fooSet.contains(\"a\")) // =&gt; true\nprintln(fooSet.contains(\"z\")) // =&gt; false\n</code></pre> <p>Con la funci\u00f3n <code>'mutableSetOf()'</code> podemos crear un conjunto mutable:</p> <pre><code>// creates a mutable set of int types only\nval intsMutableSet: MutableSet&lt;Int&gt; = mutableSetOf(3, 5, 6, 2, 0)\nintsMutableSet.add(8)\nintsMutableSet.remove(3)\n</code></pre> <p>La funci\u00f3n <code>'hashSetOf()'</code> retorna un 'HashSet' de la API de colecciones de Java el cual almacena los elementos en una tabla 'hash'. Podemos a\u00f1adir o quitar elementos de este conjunto porque es mutable.</p> <p>La funci\u00f3n <code>'linkedSetOf()'</code> retorna un 'LinkedHashSet' de la API de colecciones de Java. Tambi\u00e9n es un conjunto mutable.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#maps-inmutable","title":"Maps - [Inmutable]","text":"<p>Los mapas asocian una clave a un valor. Las claves deben ser \u00fanicas, y por tanto no se permite duplicados. En cambio no hay obligaci\u00f3n de que los valores asociados sean \u00fanicos. Cada clave s\u00f3lo podr\u00e1 asociarse a un solo elemento. De esa manera, cada clave se puede usar para identificar de forma \u00fanica el valor asociado, ya que el mapa se asegura de que no pueda haber claves duplicadas en la colecci\u00f3n. Los mapas implementan un forma eficiente de obtener el valor correspondiente a una determinada clave.</p> <p>Podemos crear un mapa ('map') inmutable usando la funci\u00f3n <code>'mapOf()'</code>:</p> <pre><code>val fooMap = mapOf(\"a\" to 8, \"b\" to 7, \"c\" to 9)\n\n// Se puede acceder a los valores en el mapa por su clave\nprintln(fooMap[\"a\"]) // =&gt; 8\n\n// iterar por un mapa con un bucle 'for'\nfor ((key, value) in fooMap) {\n    println(\"Key $key and value $value\")\n}\n</code></pre> <p>La funci\u00f3n <code>'linkedHashMap()'</code> retorna un 'LinkedHasMap' de la API de colecciones de Java, que es mutable.</p> <p>La funci\u00f3n <code>'sortedMapOf()'</code> retorna un 'SortedMap' de la API de colecciones de Java que tambi\u00e9n es mutable.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#sequences","title":"Sequences","text":"<p>Las secuencias representan colecciones 'lazily-evaluated'. Podemos crear una secuencia utilizando la funci\u00f3n <code>'generateSequence()'</code>. Las secuencias son excelentes  cuando el tama\u00f1o de la colecci\u00f3n es desconocido a priori:</p> <pre><code>val fooSequence = generateSequence(1, { it + 1 })\nval x = fooSequence.take(10).toList()\nprintln(x) // =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n// An example of using a sequence to generate Fibonacci numbers:\nfun fibonacciSequence(): Sequence&lt;Long&gt; {\n    var a = 0L\n    var b = 1L\n    fun next(): Long {\n        val result = a + b\n        a = b\n        b = result\n        return a\n    }\n    return generateSequence(::next)\n}\n\nval y = fibonacciSequence().take(10).toList()\nprintln(y) // =&gt; [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n</code></pre> <p>Kotlin proporciona 'higher-order functions' para trabajar con colecciones:</p> <pre><code>val z = (1..9).map { it * 3 }\n        .filter { it &lt; 20 }\n        .groupBy { it % 2 == 0 }\n        .mapKeys { if (it.key) \"even\" else \"odd\" }\n\nprintln(z) // =&gt; {odd=[3, 9, 15], even=[6, 12, 18]}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#destructuring-data","title":"Destructuring data","text":"<p>Los objetos pueden ser desestructurados en m\u00faltiples variables. Esta sintaxis se llama declaraci\u00f3n de desestructuraci\u00f3n. Una declaraci\u00f3n de desestructuraci\u00f3n crea m\u00faltiples variables a la vez.</p> <pre><code>val (a, b, c) = fooCopy\nprintln(\"$a $b $c\") // =&gt; 1 100 4\n</code></pre> <p>Desestructurando en un bucle <code>'for'</code>:</p> <pre><code>for ((a, b, c) in listOf(fooData)) {\n    println(\"$a $b $c\") // =&gt; 1 100 4\n}\n\nval mapData = mapOf(\"a\" to 1, \"b\" to 2)\n// Map.Entry is destructurable as well\nfor ((key, value) in mapData) {\n    println(\"$key -&gt; $value\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#rangos-de-valores","title":"Rangos de valores","text":"<p>Un rango se define como un intervalo que tiene un valor de inicio y un valor final. Los rangos son cerrados, lo que significa que el valor inicial y final est\u00e1n incluidos en el rango. Los rangos se crean con el operados <code>..</code> o con funciones como <code>rangeTo()</code> o <code>downTo()</code>.</p> <p>Para crear un intervalo sin incluir el \u00faltimo elemento usamos la funci\u00f3n <code>until</code>.</p> <pre><code>val oneToNine = 1..9\nval oneToFive: IntRange = 1.rangeTo(5)\n\nval fiveToOne = 5.downTo(1)\nprint(fiveToOne)  // =&gt; 5 downTo 1 step 1\n\nval oneToTen = (1..10).step(2).reversed() // =&gt; 9, 7, 5, 3, 1\nprintln(\"${tenToOne.first} - ${tenToOne.last}\") // =&gt; 10 - 1\n\nval oneToFour = 1.until(5)\nprint(r) // =&gt; 1..4\n</code></pre> <p>Lost tipos <code>IntRange</code>, <code>LongRange</code>, <code>CharRange</code> tienen una caracter\u00edstica extra y es que permite iterar sobre los intervalos.</p> <p>Una vez que se crea un intervalo, se puede usar el operador <code>in</code> para probar si un valor dado est\u00e1 incluido en el intervalo o el operador <code>!in</code> para comprobar si un valor no est\u00e1 en el intervalo:</p> <pre><code>// Iterar con un bucle 'for'\nfor (i in 1..10) { // equivalent of 1 &lt;= i &amp;&amp; i &lt;= 10\n    print(i)\n}\n\n// Iterar en sentido inverso\nfor (i in 4 downTo 1) {\n    print(i)\n}\n\n// Iterar por un intervalo sin incluir el \u00faltimo elemento\nfor (i in 1 until 10) {\n    // i in [1, 10), 10 is excluded\n    println(i)\n}\n\n// Pasos arbitrarios\nfor (i in 1..4 step 2) {\n    print(i)\n}\n\nfor (i in 4 downTo 1 step 2) {\n    print(i)\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#smart-casting","title":"Smart Casting","text":"<p>Podemos verificar si un objeto es de un tipo en particular usando el operador <code>is</code> o si no es de un tipo con el operador <code>!is</code>.</p> <p>Si un objeto pasa una verificaci\u00f3n de tipo entonces se puede usar como ese tipo sin realizar la conversi\u00f3n expl\u00edcitamente:</p> <pre><code>fun smartCastExample(x: Any): Boolean {\n    if (x is Boolean) {\n        // x is automatically cast to Boolean\n        return x\n    } else if (x is Int) {\n        // x is automatically cast to Int\n        return x &gt; 0\n    } else if (x is String) {\n        // x is automatically cast to String\n        return x.isNotEmpty()\n    } else {\n        return false\n    }\n}\nprintln(smartCastExample(\"Hello, world!\")) // =&gt; true\nprintln(smartCastExample(\"\")) // =&gt; false\nprintln(smartCastExample(5)) // =&gt; true\nprintln(smartCastExample(0)) // =&gt; false\nprintln(smartCastExample(true)) // =&gt; true\n</code></pre> <p>La conversi\u00f3n inteligente ('smart cast') tambi\u00e9n funciona con bloques <code>when</code> o bucles <code>while</code>:</p> <pre><code>fun smartCastWhenExample(x: Any) = when (x) {\n    is Boolean -&gt; x\n    is Int -&gt; x &gt; 0\n    is String -&gt; x.isNotEmpty()\n    else -&gt; false\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#conversion-explicita-o-explicit-casting","title":"Conversi\u00f3n expl\u00edcita o 'Explicit Casting'","text":"<p>Podemos usar el operador <code>as</code> (o el operador de conversi\u00f3n no segura o 'unsafe cast operator') para convertir expl\u00edcitamente una referencia de un tipo a otro tipo en Kotlin. Si la operaci\u00f3n de conversi\u00f3n expl\u00edcita es ilegal, tenga en cuenta que se lanzar\u00e1 una excepci\u00f3n de tipo 'ClassCastException'.</p> <p>Para evitar que se lance una excepci\u00f3n al realizar la conversi\u00f3n, podemos usar el operador de conversi\u00f3n seguro <code>as?</code>. Este operador intentar\u00e1 la conversi\u00f3n y si no se puede realizar la conversi\u00f3n devolver\u00e1 <code>'null'</code> en vez de lanzar la excepci\u00f3n. Por tanto la variable que contiene el resultado de una conversi\u00f3n segura debe ser capaz de mantener un resultado nulo:</p> <pre><code>val circle = shape as Circle\n\nval circle: Circle? = shape as? Circle // Conversi\u00f3n segura\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#valores-nulos-nullable-types","title":"Valores nulos ('nullable types')","text":"<p>Para que una variable contenga el valor 'null' debe especificarse expl\u00edcitamente como 'nullable'. Una variable se puede especificar como 'nullable' agregando un <code>?</code> a su tipo.</p> <p>Podemos acceder a una variable o m\u00e9todo 'nullable' utilizando el operador <code>'?.'</code> tambi\u00e9n llamado 'Safe Call Operator'. Un m\u00e9todo o variable s\u00f3lo ser\u00e1 invocado si tiene una valor no nulo. En caso de que sea nulo ser\u00e1 ignorado evitando un 'NullPointerException'</p> <p>Kotlin provee el operador <code>'?:'</code>, tambi\u00e9n llamado 'Elvis Operator' para especificar un valor alternativo para usar si una variable es nula. Cuando la expresi\u00f3n de la izquierda del operador <code>'?:'</code> no es nulo entonces lo devuelve. En caso de que sea nulo devuelve la expresi\u00f3n de la derecha. La expresi\u00f3n de la derecha s\u00f3lo ser\u00e1 evaluada si la expresi\u00f3n de la izquierda es 'null'.</p> <pre><code>val name: String = null // no compilar\u00e1 ya que no puede contener valores nulos\nvar fooNullable: String? = \"abc\"\n\nfooNullable?.length // =&gt; 3\n\n// 'Elvis Operator'\nfooNullable?.length ?: -1 // =&gt; 3\n\nfooNullable = null\nval len: Int? = fooNullable?.length // El tipo de retorno de 'fooNullable' puede ser 'null' y por tanto debemos usar Int?\n\nfooNullable?.length // =&gt; null\nfooNullable?.length ?: -1 // =&gt; -1\n\n// Encadenar 'safe calls'. La cadena retorna 'null' si alguna de ellas es 'null'\nfun getCountryNameSafe(person: Person?): String? {\n    return person?.address?.city?.country?.name\n}\n\n// Dado que 'throw' y 'return' son expresiones en Kotlin se pueden usar en la parte derecha del operador 'Elvis'\nfun foo(node: Node): String? {\n    val parent = node.getParent() ?: return null\n    val name = node.getName() ?: throw IllegalArgumentException(\"name expected\")\n    // ...\n}\n</code></pre> <p>De manera similar, podemos devolver tipos 'nullable' y no 'nullable'  desde una funci\u00f3n.</p> <pre><code>fun getName(): String? = name // Esta funci\u00f3n puede o no devolver una referencia nula.\n\nfun getNotNullName(): String = name ?: \"John\" // Esta funci\u00f3n no devolver\u00e1 una referencia nula\n\ngetName() // =&gt; null\ngetNotNullName() // =&gt; John\n</code></pre> <p>Con 'smart cast', el compilador rastrea las condiciones dentro de una expresi\u00f3n <code>'if'</code>. Si realizamos la verificaci\u00f3n de que una variable no es nula, entonces el compilador nos permitir\u00e1 acceder a la variable como si hubiera sido declarada como un tipo no anulable:</p> <pre><code>var l = if (name != null) name.length else -1\n</code></pre> <p>El operador de aserci\u00f3n no-nulo <code>'!!'</code> convierte cualquier valor a un tipo no nulo y lanza una excepci\u00f3n 'NullPointerException' si el valor es nulo.</p> <pre><code>val length: Int = name!!.length\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#igualdad","title":"Igualdad","text":"<p>En Kotlin hay tenemos la igualdad estructural y la igualdad referencial.</p> <p>La igualdad estructural se comprueba con la operaci\u00f3n <code>'=='</code> y la parte contraria <code>'!='</code> y se utiliza para comprobar si dos valores o variables son iguales (<code>equals()</code>)</p> <pre><code>if (a == b) {\n    // ...\n} else {\n    // ...\n}\n</code></pre> <p>La igualdad referencial se comprueba con la operaci\u00f3n <code>'==='</code> y su contraparte <code>'!=='</code> y eval\u00faa a <code>true</code> si y s\u00f3lo si dos referencias apuntan al mismo objeto.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#standard-library-functions","title":"[Standard Library Functions]","text":"<p>Son funciones que proporciona Kotlin para aumentar la biblioteca est\u00e1ndar de Java.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#apply","title":"[Apply]","text":"<p><code>'apply'</code> es una funci\u00f3n de extensi\u00f3n de la biblioteca est\u00e1ndar de Kotlin declarada en <code>'Any'</code>, por lo que puede ser invocada en cualquier tipo de instancia. <code>'apply'</code> acepta una expresi\u00f3n lambda que es invocada y el receptor es la instancia donde es llamada. La funci\u00f3n <code>'apply'</code> devuelve una instacia del original.</p> <p>Su uso principal es hacer que el c\u00f3digo que necesita inicializar una instancia sea m\u00e1s legible permitiendo que las funciones y las propiedades se llamen directamente dentro de la funci\u00f3n antes de devolver el valor en s\u00ed.</p> <pre><code>data class Person(var firstName: String, var lastName : String)\nvar person = Person(\"John\", \"Doe\")\n\nperson.apply { this.firstName = \"Bruce\" }\nprint(person) // =&gt; Person(firstName=Bruce, lastName=Doe)\n\n// 'apply' retorna la instancia original.\nperson.apply { this.firstName = \"Bruce\" }.firstName = \"Steve\"\nprint(person) // =&gt; Person(firstName=Steve, lastName=Doe)\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#let","title":"[Let]","text":"<p>La funci\u00f3n <code>'let'</code> toma el objeto sobre el que se invoca como par\u00e1metro y devuelve el resultado de la expresi\u00f3n lambda. Es \u00fatil cuando desea ejecutar alg\u00fan c\u00f3digo en un objeto antes de devolver alg\u00fan valor diferente y no necesita mantener una referencia al original:</p> <pre><code>fun main(args: Array&lt;String&gt;) {\n    var str = \"Hello World\"\n    str.let { println(\"$it!!\") } // =&gt; Hello World!!\n    println(str) // =&gt; Hello World\n}\n\nvar strLength = str.let { \"$it function\".length } // devuelve el resultado de la expresi\u00f3n lambda\nprintln(\"strLength is $strLength\") // =&gt; strLength is 25\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#with","title":"[With]","text":"<p>La funci\u00f3n <code>'with'</code> es una funci\u00f3n de nivel superior dise\u00f1ada para los casos en los que desea llamar a m\u00faltiples funciones en un objeto y no desea repetir el receptor cada vez. La funci\u00f3n <code>'with'</code> acepta un receptor y un cierre para operar en dicho receptor:</p> <pre><code>data class Person(var firstName: String, var lastName : String)\nvar person = Person(\"John\", \"Doe\")\n\nwith(person)\n{\n    firstName = \"Bruce\"\n    lastName = \"Doe\"\n}\n\n// notaci\u00f3n sin 'with'\nperson.firstName = \"John\"\nperson.lastName = \"Doe\"\n</code></pre> <p>La \u00faltima expresi\u00f3n en un bloque <code>'with'</code> se retorna como resultado:</p> <pre><code>var name = with(person)\n{\n    firstName = \"John\"\n    lastName = \"Doe\"\n    \"$firstName $lastName\" // se retorna este valor y se almacena en 'name'\n}\nprintln(name) // =&gt; John Doe\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#run","title":"[Run]","text":"<p><code>'Run'</code> es una funci\u00f3n que combina las caracter\u00edsticas de <code>'with'</code> y <code>'let'</code>. Esto significa que se pasa una expresi\u00f3n lambda a la funci\u00f3n <code>'run'</code> y la instancia del objeto es el receptor. El valor de retorno de la expresi\u00f3n lambda se usa como valor de retorno:</p> <pre><code>person.run {\n    this.firstName = \"Bruce\"\n}\nprint(person) // =&gt; Person(firstName=Bruce, lastName=Doe)\n</code></pre> <p>La diferencia clave entre <code>'let'</code> y <code>'run'</code> es que con <code>'run'</code> el receptor es la instancia,  mientras que en <code>'let'</code>, el argumento de la expresi\u00f3n lambda es la instancia.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#repeat","title":"[Repeat]","text":"<p>Esta funci\u00f3n acepta un entero y una funci\u00f3n literal. La funci\u00f3n literal ser\u00e1 invocada las veces indicadas por el valor entero.</p> <pre><code>repeat(10, { println(\"Hello\") })\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#lazy","title":"[Lazy]","text":"<p>La funci\u00f3n <code>'lazy'</code> es una funci\u00f3n cuya utilidad es envolver funciones costosas en t\u00e9rminos de rendimiento o de recursos y que ser\u00e1n invocadas cuando sean requeridas por primera vez. La ventaja de utilizar esta funci\u00f3n proporcionada por la biblioteca est\u00e1ndar de Kotlin es que el compilador mantendr\u00e1 la invocaci\u00f3n sincronizada evitando que sea invocada m\u00e1s de una vez.</p> <pre><code>fun readStringFromDatabase(): String = ... // expensive operation\nval lazyString = lazy { readStringFromDatabase() }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#use","title":"[Use]","text":"<p>La funci\u00f3n <code>'use'</code> es similar a la declaraci\u00f3n <code>'try-with-resources'</code> presente en Java 7. La funci\u00f3n <code>'use'</code> se define como una funci\u00f3n de extensi\u00f3n de la interfaz 'Closeable'. Ejecuta la funci\u00f3n y luego 'cierra' el recurso de forma segura.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#assertions","title":"Assertions","text":"<p>Kotlin proporciona un conjunto de funciones que nos permiten agregar una cantidad limitada de especificaciones formales a nuestro c\u00f3digo. Una especificaci\u00f3n formal es una aserci\u00f3n que siempre debe ser verdadera o falsa en la ubicaci\u00f3n cuando se ejecuta la aserci\u00f3n. Estos tambi\u00e9n se conocen como contratos o dise\u00f1o por contrato:</p> <ul> <li><code>'require()'</code> y <code>'requireNotNull()'</code> lanza una excepci\u00f3n de tipo 'IllegalArgumentException' y se utiliza para garantizar que los argumentos cumplan el contrato.</li> <li><code>'assert()'</code> lanza una excepci\u00f3n 'AssertionException' y se utiliza para garantizar que nuestro estado interno es consistente.</li> <li><code>'check()'</code> y <code>'error()'</code> lanza una excepci\u00f3n 'IllegalStateException' y tambi\u00e9n se usa para mantener la consistencia del estado interno.</li> </ul> <p>Estas funciones son similares. La clave que las diferencia es el tipo de excepci\u00f3n que se plantea.</p> <pre><code>fun neverEmpty(str: String) {\n    require(str.length &gt; 0, { \"String should not be empty\" })\n    println(str)\n}\n\nfun foo(k: Int, value: Boolean) {\n    require(k &gt; 10, { \"k should be greater than 10\" }) // =&gt; throws an IllegalArgumentException\n    requireNotNull(k) // =&gt; throws an IllegalArgumentException if the value is null.\n    check(value) // =&gt; throws an IllegalStateException if the value is false\n    if (k == 20) error(\"Error: k == 20\") // =&gt; throws an IllegalStateException\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#excepciones","title":"Excepciones","text":"<p>En Kotlin todas las excepciones son subclases de la clase <code>'Throwable'</code>. Cada excepci\u00f3n tiene un mensaje, un seguimiento de la pila y una causa opcional. Kotlin no tiene 'checked exceptions' a diferencia de Java, que realiza la distinci\u00f3n entre tipos de excepciones.</p> <p>Para lanzar un objeto de excepci\u00f3n, se utiliza la palabra clave <code>'throw'</code>:</p> <pre><code>throw Exception(\"Message\")\n</code></pre> <p>Para capturar una excepci\u00f3n lanzada se utiliza un bloque <code>'try'</code>:</p> <pre><code>try {\n    // some code\n}\ncatch (e: SomeException) {\n    // handler\n}\nfinally {\n    // optional finally block\n}\n</code></pre> <p>Puede haber 0 o m\u00e1s bloques <code>'catch'</code>. Los bloques <code>'finally'</code> son opcionales y puede omitirse. Sin embargo, tiene que haber al menos un bloque <code>'catch'</code> o <code>'finally'</code>.</p> <p>Al igual que muchas otras instrucciones en Kotlin, <code>'try'</code> es una expresi\u00f3n y por tanto puede devolver un valor:</p> <pre><code>val a: Int? = try { parseInt(input) } catch (e: NumberFormatException) { null }\n</code></pre> <p>El valor devuelto por un <code>'try'</code> que act\u00faa como expresi\u00f3n es la \u00faltima expresi\u00f3n en el bloque <code>'try'</code> o la \u00faltima expresi\u00f3n en el bloque <code>'catch'</code>. El contenido del bloque <code>'finally'</code> no afecta al resultado de la expresi\u00f3n.</p> <p><code>'throw'</code> es una expresi\u00f3n en Kotlin, as\u00ed que se puede usar, por ejemplo, como parte de una 'Elvis expression':</p> <pre><code>val s = person.name ?: throw IllegalArgumentException(\"Name required\")\n</code></pre> <p>El tipo de retorno de una expresi\u00f3n <code>'throw'</code> es el tipo especial <code>'Nothing'</code>. Este tipo no tiene valores y se utiliza para marcar ubicaciones del c\u00f3digo que nunca se pueden alcanzar.</p> <pre><code>fun fail(message: String): Nothing {\n    throw IllegalArgumentException(message)\n}\n</code></pre> <p>Cuando llame a la funci\u00f3n del ejemplo anterior, el compilador sabr\u00e1 que la ejecuci\u00f3n no contin\u00faa m\u00e1s all\u00e1 de la llamada:</p> <pre><code>val s = person.name ?: fail(\"Name required\")\nprintln(s)     // 's' is known to be initialized at this point\n</code></pre> <p>Otro caso en el que puede encontrar este tipo es la inferencia de tipos. La variante 'nullable' de este tipo, <code>'Nothing?'</code>, tiene exactamente un valor posible, que es el valor <code>'null'</code>. Si se usa el valor nulo para inicializar un valor de un tipo inferido y no hay otra informaci\u00f3n que se pueda usar para determinar un tipo m\u00e1s espec\u00edfico, el compilador inferir\u00e1 el tipo <code>'Nothing?'</code>:</p> <pre><code>val x = null           // 'x' tiene el tipo `Nothing?`\nval l = listOf(null)   // 'l' tiene el tipo `List&lt;Nothing?&gt;\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#anotaciones","title":"Anotaciones","text":"<p>Las anotaciones permiten a los desarrolladores agregar un significado adicional a las clases, interfaces, par\u00e1metros, etc., en el momento de la compilaci\u00f3n. Las anotaciones pueden ser utilizadas por el compilador o por su propio c\u00f3digo a trav\u00e9s de la reflexi\u00f3n en tiempo de ejecuci\u00f3n. Dependiendo del valor de la anotaci\u00f3n, el significado del programa o los datos puede cambiar.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmstatic","title":"[@JvmStatic]","text":"<p>Kotlin representa funciones de nivel de paquete (funciones fuera de una clase) como m\u00e9todos est\u00e1ticos. Kotlin tambi\u00e9n puede generar m\u00e9todos est\u00e1ticos para funciones definidas en 'objects' y 'companin objects' si anota esas funciones como <code>'@JvmStatic'</code>. Si usa esta anotaci\u00f3n, el compilador generar\u00e1 tanto un m\u00e9todo est\u00e1tico en la clase envolvente del objeto como un m\u00e9todo de instancia en el propio objeto.</p> <pre><code>class C {\n    companion object {\n        @JvmStatic fun foo() {}\n        fun bar() {}\n    }\n}\n\n// Ahora 'foo()' es est\u00e1tico en Java pero no 'bar()'\nC.foo(); // correcto\nC.bar(); // error: 'bar()' no es un m\u00e9todo est\u00e1tico\nC.Companion.foo(); // correcto\nC.Companion.bar(); // la \u00fanica forma de invocar a 'bar()'\n\nobject Obj {\n    @JvmStatic fun foo() {}\n    fun bar() {}\n}\n\n// In Java:\nObj.foo(); // correcto\nObj.bar(); // error\nObj.INSTANCE.bar(); // correcto, una llamada a trav\u00e9s de la instancia 'Singleton'\nObj.INSTANCE.foo(); // correcto\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#throws","title":"[@Throws]","text":"<p>Dado que todas las excepciones en Kotlin son 'unchecked exceptions', no es necesario agregar una lista de posibles excepciones a las firmas de m\u00e9todos como las que hay en Java. Sin embargo, es posible que deseamos informar a los usuarios de Java que nuestra API produce excepciones en ciertas situaciones. Podemos hacer esto utilizando la anotaci\u00f3n <code>'@Throws'</code>, que se utiliza para indicar al compilador que genere cl\u00e1usulas de lanzamiento en los m\u00e9todos generados.</p> <pre><code>@Throws(FileNotFoundException::class)\nfun fileExists(path: String) {\n    // ...\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmoverloads","title":"[@JvmOverloads]","text":"<p>Dada una funci\u00f3n con par\u00e1metros por defecto, <code>'@JvmOverloads'</code> har\u00e1 que el compilador cree m\u00faltiples m\u00e9todos sobrecargados para cada par\u00e1metro predeterminado.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmname","title":"[@JvmName]","text":"<p>Podemos cambiar el nombre del fichero creado por Kotlin con la anotaci\u00f3n <code>'@JvmName'</code>:</p> <pre><code>// example.kt (sin @JvmName)\npackage demo\n\nclass Foo\n\nfun bar() { ... }\n\n// En Java\nnew demo.Foo();\ndemo.ExampleKt.bar();\n\n\n// Usamos la anotaci\u00f3n '@JvmName' al principio del fichero para indicar al compilador el nombre del fichero\n@file:JvmName(\"DemoUtils\")\n\npackage demo\n\nclass Foo\n\nfun bar() { ... }\n\n// Ahora en Java\nnew demo.Foo();\ndemo.DemoUtils.bar();\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmmultifileclass","title":"[@JvmMultifileClass]","text":"<p>Adem\u00e1s de indicarle al compilador el nombre del fichero con <code>'@JvmName'</code> podemos indicarle que combine todas las funciones de nivel superior de varios ficheros en Kotlin en una \u00fanica clase Java con la anotaci\u00f3n <code>'@JvmMultifileClass'</code>.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#reflection","title":"[Reflection]","text":"<p>Reflection es el nombre dado a la inspecci\u00f3n del c\u00f3digo en tiempo de ejecuci\u00f3n en lugar de tiempo de compilaci\u00f3n. Puede usarse para crear instancias de clases, buscar funciones e invocarlas, inspeccionar anotaciones, buscar campos y descubrir par\u00e1metros y gen\u00e9ricos, todo sin conocer esos detalles en el momento de la compilaci\u00f3n.</p> <p>Por ejemplo, si necesitamos persistir tipos en una base de datos y a priori no conocemos el tipo de datos podemos utilizar la reflexi\u00f3n para conocer el tipo de datos en tiempo de ejecuci\u00f3n y crear la SQL apropiada a ese tipo.</p> <p>Para usar la reflexi\u00f3n en Kotlin hay que importar el paquete <code>kotlin.reflect</code>.</p> <p><code>'KClass'</code> es el tipo central utilizado en la reflexi\u00f3n de Kotlin. Cada tipo tiene una instancia de <code>'KClass'</code> en tiempo de ejecuci\u00f3n que contiene detalles de las funciones, propiedades, anotaciones, etc., para ese tipo. Para obtener una instancia de <code>'KClass'</code> para cualquier tipo, usamos la sintaxis especial <code>'::class'</code> en una instancia de ese tipo:</p> <pre><code>val name = \"George\"\nval kclass = name::class // =&gt; class kotlin.String\n\ndata class Person(val firstName: String, val lastName: String)\nprintln(Person::class.qualifiedName) // =&gt; Person\nprintln(Person::class.isData) // =&gt; true\n</code></pre> <p>Podemos obtener una referencia a la clase utilizando el 'fully qualified name or FQN' de la clase y la API 'reflection' de Java. Si el compilador no encuentra la clase lanza una 'ClassNotFoundException':</p> <pre><code>package com.example\ndata class Person(val firstName: String, val lastName: String)\n\nval kClass = Class.forName(\"com.example.Person\").kotlin // =&gt; class com.example.Personal\n</code></pre> <p>Para crear instancias de tipo sin conocer el tipo en tiempo de ejecuci\u00f3n podemos invocar la funci\u00f3n <code>'createInstance()'</code> en una referencia de <code>'KClass'</code>. Podemos usar esta funci\u00f3n con clases sin par\u00e1metros o con par\u00e1metros opcionales, es decir, que tengan valor por defecto:</p> <pre><code>class PositiveInteger(value: Int = 0)\n\nfun createInteger(kclass: KClass&lt;PositiveInteger&gt;): PositiveInteger {\n    return kclass.createInstance()\n}\n</code></pre> <p>Podemos devolver una lista de todos los constructores declarados en un tipo dado usando la propiedad <code>'constructor'</code> disponible en el tipo <code>'KClass'</code>. Podemos instanciar una clase usando el constructor con la instrucci\u00f3n <code>'call'</code> o <code>'callBy'</code>:</p> <pre><code>class Person constructor(val firstName: String, val lastName: String)\n\nfun &lt;T : Any&gt; printConstructors(kclass: KClass&lt;T&gt;) {\n    kclass.constructors.forEach {\n        println(it.parameters)\n    }\n}\nprintConstructors(Person::class) // Muestra el/los constructor/es de la clase 'Person'\n\n// Recupera el primer constructor. Si no encuentra ninguno lanza una excepci\u00f3n.\nval constructor = Person::class.constructors.first()\nval person = constructor.call(\"John\", \"Doe\") // Invocar al constructor con 'call'\nprintln(person.firstName) // =&gt; John\n</code></pre> <p>Adem\u00e1s de los constructores de una clase, tambi\u00e9n podemos acceder y listar las funciones de una clase con la propiedad <code>'functions'</code> disponible en el tipo <code>'KClass'</code>:</p> <pre><code>class Person constructor(val firstName: String, val lastName: String) {\n    fun getName(): String {\n        return \"$firstName $lastName\"\n    }\n}\n\nfun &lt;T : Any&gt; printFunctions(kclass: KClass&lt;T&gt;) {\n    kclass.functions.forEach {\n        println(it.name)\n    }\n}\n\nprintFunctions(Person::class) // =&gt; getName equals hashCode toString\n\nval function = Person::class.functions.find { it.name == \"getName\" }\nval person = Person(\"John\", \"Doe\")\nfunction?.call(person) // =&gt; John Doe\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#coroutines","title":"Coroutines","text":"<p>(todo)</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#testing","title":"Testing","text":"<p>KotlinTest es el framework para probar y testear el c\u00f3digo en Kotlin. A\u00f1adir la dependencia a Gradle: <code>testCompile 'io.kotlintest:kotlintest:x.y.z'</code>.</p> <p>Normalmente, para mantener ordenada la estructura del proyecto los ficheros de test se ubican en <code>src/test/kotlin</code></p> <p>Una especificaci\u00f3n o 'spec' es simplemente la manera en que las pruebas se presentan en los archivos de clase. Hay varias especificaciones diferentes disponibles como FunSpec, StringSpec+*, **ShouldSpec. etc...</p> <p>La especificaci\u00f3n FunSpec permite crear pruebas similares al estilo jUnit. Para escribir un test unitario invocamos la funci\u00f3n 'test' que toma dos par\u00e1metros. El primer par\u00e1metro es una descripci\u00f3n de la prueba unitaria y el segundo es una funci\u00f3n literal que contiene el cuerpo de la prueba. La descripci\u00f3n o nombre de la prueba aparecer\u00e1 en la salida, as\u00ed que permite saber que prueba/s han pasado la prueba y cu\u00e1les han fallado.</p> <pre><code>class StringTestWithFunSpec : FunSpec() {\n    init {\n        test(\"String.startsWith should be true for a prefix\") {\n            \"helloworld\".startsWith(\"hello\") shouldBe true\n        }\n        test(\"String.endsWith should be true for a prefix\") {\n            \"helloworld\".endsWith(\"world\") shouldBe true\n        }\n\n    }\n}\n</code></pre> <p>La especificaci\u00f3n StringSpec es la especificaci\u00f3n recomendada por los autores de Kotlin y es la especificaci\u00f3n m\u00e1s simple y compacta ya que reduce la sintaxis al m\u00ednimo. Se escribe una cadena seguida de una expresi\u00f3n lambda para probar el c\u00f3digo:</p> <pre><code>class StringTestWithStringSpec : StringSpec() {\n    init {\n        \"strings.length should return size of string\" {\n            \"hello\".length shouldBe 5\n            \"hello\" shouldBe haveLength(5)\n        }\n    }\n}\n</code></pre> <p>La especificaci\u00f3n ShouldSpec es similar a FunSpec pero usa la palabra clave <code>'should'</code> en vez de <code>'test'</code>:</p> <pre><code>class StringTestWithShouldSpec : ShouldSpec() {\n    init {\n        should(\"return the length of the string\") {\n            \"sammy\".length shouldBe 5\n            \"\".length shouldBe 0\n        }\n        // Nested form\n        \"String.length\" {\n            should(\"return the length of the string\") {\n                \"sammy\".length shouldBe 5\n                \"\".length shouldBe 0\n            }\n        }\n    }\n}\n</code></pre> <p>La especificaci\u00f3n WordSpec usa tambi\u00e9n la palabra clave <code>'should'</code>. Esta especificaci\u00f3n permite anidar las pruebas:</p> <pre><code>class StringTestWithWordSpec : WordSpec() {\n    init {\n        \"String.length\" should {\n            \"return the length of the string\" {\n                \"sammy\".length shouldBe 5\n                \"\".length shouldBe 0\n            }\n        }\n    }\n}\n</code></pre> <p>La especificaci\u00f3n BehaviorSpec utiliza las palabras clave <code>'given'</code>, <code>'when'</code> y <code>'then'</code> para crear pruebas unitarias m\u00e1s cercanas al lenguaje natural:</p> <pre><code>class StringTestWithBehaviorSpec : BehaviorSpec() {\n    init {\n        given(\"a stack\") {\n            val stack = Stack&lt;String&gt;()\n            `when`(\"an item is pushed\") {\n                stack.push(\"kotlin\")\n                then(\"the stack should not be empty\") {\n                    stack.isEmpty() shouldBe true\n                }\n            }\n            `when`(\"the stack is popped\") {\n                stack.pop()\n                then(\"it should be empty\") {\n                    stack.isEmpty() shouldBe false\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>La especificaci\u00f3n FeatureSpec es similar a la especificaci\u00f3n BehaviorSpec pero utiliza las palabras clave <code>'feature'</code> y <code>'scenario'</code>:</p> <pre><code>class StringTestWithFeatureSpec : FeatureSpec() {\n    init {\n        feature(\"Hello World\") {\n            scenario(\"should starts with 'Hello'\") {\n                \"Hello World\".startsWith(\"Hello\")\n            }\n            scenario(\"should ends with 'World'\") {\n                \"Hello World\".endsWith(\"World\")\n            }\n        }\n    }\n}\n</code></pre> <p>Los matchers prueban alguna propiedad, indicada por el nombre del matcher, m\u00e1s all\u00e1 de la simple igualdad. Por ejemplo, un comparador puede verificar si una cadena est\u00e1 vac\u00eda o si un entero es positivo.</p> <pre><code>// [String matchers]\nclass StringTestWithDifferentMatchers : StringSpec() {\n    init {\n        \"Tests string prefixes\" {\n            \"Hello\".startsWith(\"He\") shouldBe true\n            \"Hello\" shouldBe startWith(\"He\")\n        }\n        \"Tests substrings\"{\n            \"Hello\" shouldBe include(\"el\")\n        }\n        \"Test string suffixes\" {\n            \"Hello\".endsWith(\"llo\") shouldBe true\n            \"Hello\" shouldBe endWith(\"llo\")\n        }\n        \"Tests the length of a string\" {\n            \"Hello\".length shouldBe 5\n            \"Hello\" shouldBe haveLength(5)\n        }\n        \"Tests the equality using a regular expression\" {\n            \"Hello\" shouldBe match(\"He...\")\n        }\n    }\n}\n\n// [Collection matchers]\nclass CollectionTestWithDifferentMatchers : StringSpec() {\n    private val listWithDifferentIntegers = listOf(1, 2, 3, 4, 5)\n    private val mapWithKeyAndValues = mapOf&lt;Int, String&gt;(1 to \"Hello\", 2 to \"World\")\n\n    init {\n        \"Tests that a collection should contain the given element\" {\n            listWithDifferentIntegers shouldBe contain(3)\n        }\n        \"Test the size of the collection\" {\n            listWithDifferentIntegers shouldBe haveSize&lt;Int&gt;(5)\n        }\n        \"Tests that the collections should be sorted\" {\n            listWithDifferentIntegers shouldBe sorted&lt;Int&gt;()\n        }\n        \"Tests that the collection has a single element that is equal to the given element\" {\n            listWithDifferentIntegers shouldNotBe singleElement(2)\n        }\n        \"Tests that the collection contains all the given elements. The order of these elements does not matter.\" {\n            listWithDifferentIntegers shouldBe containsAll(1, 2, 4)\n        }\n        \"Tests whether the collection is empty or not\" {\n            listWithDifferentIntegers shouldNotBe beEmpty&lt;Int&gt;()\n        }\n        \"Tests whether the map contains mapping from a key to any value\" {\n            mapWithKeyAndValues shouldBe haveKey(2)\n        }\n        \"Tests whether the map contains the value for at least one key\" {\n            mapWithKeyAndValues shouldBe haveValue(\"Hello\")\n        }\n        \"Tests that the map contains the exact mapping of the key to the value\" {\n            mapWithKeyAndValues shouldBe contain(2, \"World\")\n        }\n    }\n}\n\n// [Floating point matchers]\n// En valores en punto flotante m\u00e1s que la igualdad absoluta se utiliza la 'tolerancia' que es el valor m\u00ednimo entre dos valores que satisfacen el criterio de igualdad\nclass FloatNumberTestWithTolerance : StringSpec() {\n    private val randomDouble = 18.005\n    private val enoughDouble = 18.006\n\n    init {\n        \"Test if two numbers are equals\" {\n            randomDouble shouldNotBe equals(enoughDouble)\n            randomDouble shouldBe (enoughDouble plusOrMinus 0.01)\n        }\n    }\n}\n\n// [Exception matchers]\n// 'shouldThrow fallar\u00e1 si se lanza una excepci\u00f3n diferente\nclass ExceptionTest : StringSpec() {\n    init {\n        \"Testing IllegalArgumentException\" {\n            shouldThrow&lt;IllegalArgumentException&gt; {\n                addNumberToTwo(10.0) shouldEqual 10.5\n            }\n        }\n    }\n}\n\n@Throws(IllegalArgumentException::class)\nfun addNumberToTwo(a: Any): Int {\n    if (a !is Int) {\n        throw IllegalArgumentException(\"Number must be an integer\")\n    }\n    return 2 + a\n}\n</code></pre> <p>Los matchers se pueden combinar usando los operadores de la l\u00f3gica booleana como <code>'and'</code> y <code>'or'</code>:</p> <pre><code>class CombiningMatchers : StringSpec() {\n    init {\n        \"Combining matchers\" {\n            \"Hello World\" should (startWith(\"Hel\") and endWith(\"rld\"))\n        }\n    }\n}\n</code></pre> <p>Un inspector en KotlinTest es la forma m\u00e1s f\u00e1cil de probar el contenido de 'collections':</p> <pre><code>val kings = listOf(\"Stephen I\", \"Henry I\", \"Henry II\", \"Henry III\", \"William I\", \"William III\")\n\nclass InspectorTests : StringSpec() {\n    init {\n        \"all kings should have a regal number\" {\n            forAll(kings) {\n                it should endWith(\"I\")\n            }\n        }\n        \"only one king has the name Stephen\" {\n            forOne(kings) {\n                it should startWith(\"Stephen\")\n            }\n        }\n        \"some kings have regal number II\" {\n            forSome(kings) {\n                it should endWith(\"II\")\n            }\n        }\n        \"at least one King has the name Henry\" {\n            forAtLeastOne(kings) {\n                it should startWith(\"Henry\")\n            }\n        }\n    }\n}\n</code></pre> <p>A veces es posible que sea necesario ejecutar algo de c\u00f3digo, antes de que se ejecuten las pruebas o despu\u00e9s de que se completen todas las pruebas (sean exitosas o no). Esto se puede lograr mediante el uso de la clase abstracta <code>'ProjectConfig'</code>. Para usar esto, simplemente se crea un objeto que extienda de esta clase abstracta y asegurarse que est\u00e9 en la ruta de la clase. KotlinTest lo encontrar\u00e1 autom\u00e1ticamente y lo invocar\u00e1:</p> <pre><code>object codeExecutionBeforeAndAfterTestCases : ProjectConfig() {\n    override fun beforeAll() {\n        // ...code\n    }\n\n    override fun afterAll() {\n        // ...code\n    }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#java-interop","title":"Java Interop","text":""},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#calling-java-from-kotlin","title":"Calling Java from Kotlin","text":"<p>Kotlin est\u00e1 dise\u00f1ado teniendo en cuenta la interoperabilidad de Java. El c\u00f3digo Java existente puede llamarse desde Kotlin de una manera natural, y el c\u00f3digo Kotlin tambi\u00e9n se puede usar desde Java sin problemas.</p> <p>Casi todo el c\u00f3digo de Java se puede utilizar sin problemas:</p> <pre><code>import java.util.*\n\nfun demo(source: List&lt;Int&gt;) {\n    val list = ArrayList&lt;Int&gt;()\n    // 'for'-loops work for Java collections:\n    for (item in source) {\n        list.add(item)\n    }\n    // Operator conventions work as well:\n    for (i in 0..source.size - 1) {\n        list[i] = source[i] // get and set are called\n    }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#getters-and-setters","title":"'Getters' and 'Setters'","text":"<p>Los m\u00e9todos que siguen las convenciones de Java para 'getters' y 'setters' (m\u00e9todos sin argumentos con nombres que comienzan con 'get' y m\u00e9todos con argumentos \u00fanicos con nombres que comienzan con 'set') se representan como propiedades en Kotlin.</p> <p>Los m\u00e9todos de acceso booleanos (donde el nombre del 'getter' comienza con 'is' y el nombre del 'setter' comienza con 'set') se representan como propiedades que tienen el mismo nombre que el m\u00e9todo 'getter':</p> <pre><code>import java.util.Calendar\n\nfun calendarDemo() {\n    val calendar = Calendar.getInstance()\n    if (calendar.firstDayOfWeek == Calendar.SUNDAY) {  // call getFirstDayOfWeek()\n        calendar.firstDayOfWeek = Calendar.MONDAY      // call setFirstDayOfWeek()\n    }\n    if (!calendar.isLenient) {                         // call isLenient()\n        calendar.isLenient = true                      // call setLenient()\n    }\n}\n</code></pre> <p>Si la clase Java solo tiene un 'setter', no ser\u00e1 visible como una propiedad en Kotlin, ya que Kotlin no admite propiedades que tengan \u00fanicamente el m\u00e9todo 'setter'.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#void-como-retorno","title":"'Void' como retorno","text":"<p>Si un m\u00e9todo Java devuelve <code>'void'</code>, devolver\u00e1 <code>'Unit'</code> cuando se llame desde Kotlin. Si, por casualidad, alguien usa ese valor de retorno, el compilador de Kotlin lo asignar\u00e1 en el sitio de la llamada, ya que el valor en s\u00ed mismo se conoce de antemano (es <code>'Unit'</code>).</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#escapar-palabras-clave-en-kotlin","title":"Escapar palabras clave en Kotlin","text":"<p>Algunas de las palabras clave de Kotlin son identificadores v\u00e1lidos en Java, como por ejemplo <code>'in'</code>, <code>'object'</code>, <code>'is'</code>, etc... Si una biblioteca de Java usa una palabra clave de Kotlin para un m\u00e9todo, se puede escapar usando las comillas invertidas (`):</p> <pre><code>// Java\npublic class Date {\n    public void when(str:String) { .... }\n}\n\n// Kotlin\ndate.`when`(\"2016\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#null-safety","title":"Null-Safety","text":"<p>Cualquier referencia en Java puede ser nula, lo que hace que los requisitos de Kotlin de seguridad con los valores nulos no sean pr\u00e1cticos para los objetos procedentes de Java. Los tipos de declaraciones de Java se tratan especialmente en Kotlin y se llaman <code>'platform types'</code>. Los controles nulos son relajados para tales tipos, por lo que las garant\u00edas de seguridad para ellos son las mismas que en Java.</p> <pre><code>val list = ArrayList&lt;String&gt;() // non-null (constructor result)\nlist.add(\"Item\")\nval size = list.size // non-null (primitive int)\nval item = list[0] // platform type inferred (ordinary Java object)\n\nitem.substring(1) // allowed, may throw an exception if item == null\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#checked-exceptions","title":"'Checked exceptions'","text":"<p>Kotlin no tiene 'checked exceptions'. Por lo tanto, los m\u00e9todos Java que tienen 'checked exceptions' se tratan de la misma manera que el resto de m\u00e9todos.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#calling-kotlin-from-java","title":"Calling Kotlin from Java","text":"<p>Al igual que Java se puede usar sin problemas en Kotlin, Kotlin se puede usar f\u00e1cilmente desde Java.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#top-level-functions","title":"Top-level functions","text":"<p>La JVM no admite funciones de nivel superior. Por lo tanto, para hacer que funcionen con Java, el compilador Kotlin crea una clase Java con el nombre del paquete. Las funciones se definen luego como m\u00e9todos est\u00e1ticos Java en esta clase, que deben ser instanciados antes de su uso.</p> <pre><code>// Kotlin\npackage org.example.utils\nfun cube(n: Int): Int = n * n * n\n\n// Java\nimport org.example.utils.Utils;\nUtilsKt.cube(3);\n</code></pre> <p>Como se indica en la secci\u00f3n de \"Anotaciones\", podemos indicar al compilador el nombre del fichero con la anotaci\u00f3n <code>'@JvmName'</code>:</p> <pre><code>// Kotlin\n@file:JvmName(\"Utils\")\npackage org.example.utils\nfun cube(n: Int): Int = n * n * n\n\n// Java\nimport org.example.utils.Utils;\nUtils.cube(3);\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#default-parameters","title":"Default parameters","text":"<p>la JVM no tiene soporte para los par\u00e1metros por defecto. Por lo tanto, cuando una funci\u00f3n se define con los valores predeterminados, el compilador debe crear una sola funci\u00f3n sin los par\u00e1metros predeterminados. Sin embargo, podemos indicarle al compilador que cree m\u00faltiples sobrecargas de la funci\u00f3n para cada par\u00e1metro predeterminado con la anotaci\u00f3n <code>'@JvmOverloads'</code>. Luego, los usuarios de Java pueden ver las diversas funciones y elegir cu\u00e1l es la m\u00e1s adecuada. Esta anotaci\u00f3n funciona tanto para constructores, funciones o m\u00e9todos est\u00e1ticos:</p> <pre><code>// Kotlin\nclass Foo @JvmOverloads constructor(x: Int, y: Double = 0.0) {\n    @JvmOverloads fun f(a: String, b: Int = 0, c: String = \"abc\") { ... }\n}\n\n// Java\n// Constructors:\nFoo(int x, double y)\nFoo(int x)\n\n// Methods\nvoid f(String a, int b, String c) { }\nvoid f(String a, int b) { }\nvoid f(String a) { }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#objects-and-static-methods","title":"Objects and static methods","text":"<p>Los 'named objects' y los 'companion objects' se generan como instancias 'singleton' de una clase. Sin embargo, podemos indicar al compilador que genere la funci\u00f3n como una m\u00e9todo est\u00e1tico en Java con la anotaci\u00f3n <code>'@JvmStatic'</code>:</p> <pre><code>// Kotlin\nobject Console {\n    fun clear() : Unit { } // Normal\n    @JvmStatic fun exit() : Unit { } // Con anotaci\u00f3n\n}\n\n// Java\nConsole.INSTANCE.clear() // Normal\nConsole.exit() // Con anotaci\u00f3n\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#checked-exceptions_1","title":"Checked exceptions","text":"<p>En Java, solo podemos detectar las 'checked exceptions'  si est\u00e1n declaradas en el m\u00e9todo, incluso si el cuerpo del m\u00e9todo lanza esa excepci\u00f3n. Por lo tanto, si tenemos una funci\u00f3n que se utilizar\u00e1 desde Java y queremos permitir que las personas detecten una excepci\u00f3n, debemos informar al compilador para que agregue la excepci\u00f3n a la firma del m\u00e9todo. Para ello usamos la anotaci\u00f3n <code>'@Throws'</code>:</p> <pre><code>// Kotlin\n@Throws(IOException::class)\nfun createDirectory(file: File) {\n    if (file.exists()) throw IOException(\"Directory already exists\")\n    file.createNewFile()\n}\n\n// Java\ntry {\n    UtilsKt.createDirectory(new File(\"file.txt\"));\n} catch (IOException e) {\n    // handle exception here\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/","title":"Aclaraciones sobre [Kotlin]","text":"<p>En este punto vamos a ver algunas aclaraciones sobre el lenguaje de programaci\u00f3n [Kotlin]. Se basa en las principales dudas que nos pueden surgir al empezar a programar en este lenguaje y que han sido extra\u00eddas de las preguntas que el alumnado ha realizado durante los distintos cursos.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#1-aclaraciones-sobre-el-lenguaje","title":"1. Aclaraciones sobre el lenguaje","text":"","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#11-funciones-lambda","title":"1.1. Funciones lambda","text":"<p>Imagina que tienes una lista de n\u00fameros y quieres quedarte solo con los que son pares. En Kotlin, puedes hacer esto f\u00e1cilmente con <code>filter</code>.</p> <p>La firma o signatura de la funci\u00f3n <code>filter</code> en Kotlin es la siguiente:</p> <pre><code>fun &lt;T&gt; Iterable&lt;T&gt;.filter(predicate: (T) -&gt; Boolean): List&lt;T&gt;\n</code></pre> <p>Aqu\u00ed te desgloso lo que significa cada parte:</p> <ul> <li><code>fun</code>: Indica que se trata de una funci\u00f3n.</li> <li><code>&lt;T&gt;</code>: Es un par\u00e1metro de tipo gen\u00e9rico. Esto significa que <code>filter</code> puede trabajar con listas de cualquier tipo de elementos, como <code>Int</code>, <code>String</code>, <code>YourCustomClass</code>, etc.</li> <li><code>Iterable&lt;T&gt;</code>: Indica que <code>filter</code> es una funci\u00f3n de extensi\u00f3n para la interfaz <code>Iterable&lt;T&gt;</code>. Dado que <code>List&lt;T&gt;</code> implementa <code>Iterable&lt;T&gt;</code>, puedes usar <code>filter</code> con cualquier lista.</li> <li><code>predicate: (T) -&gt; Boolean</code>: Es el par\u00e1metro que toma <code>filter</code>. Es una funci\u00f3n lambda que toma un elemento de tipo <code>T</code> y devuelve un <code>Boolean</code>. Si la lambda devuelve <code>true</code>, el elemento se incluye en la lista resultante; si devuelve <code>false</code>, se excluye.</li> <li><code>List&lt;T&gt;</code>: Es el tipo de retorno de <code>filter</code>. Devuelve una nueva lista que contiene solo los elementos que cumplen con el predicado.</li> </ul> <p>Esta signatura refleja la versatilidad y el poder de <code>filter</code> en Kotlin: puedes usarla con cualquier tipo de lista y definir cualquier condici\u00f3n para filtrar los elementos de esa lista.</p> <p>Por tanto, la funci\u00f3n <code>filter</code> se utiliza para filtrar elementos de una lista bas\u00e1ndose en una condici\u00f3n que defines. Funciona as\u00ed: pasas una lambda (un tipo de funci\u00f3n an\u00f3nima) a <code>filter</code>, y esta lambda debe devolver <code>true</code> o <code>false</code> para cada elemento. Si devuelve <code>true</code>, el elemento se mantiene en la lista resultante; si devuelve <code>false</code>, se descarta.</p> <p>Aqu\u00ed tienes un ejemplo sencillo:</p> <pre><code>val numeros = listOf(1, 2, 3, 4, 5)\nval pares = numeros.filter { it % 2 == 0 }\nprintln(pares)  // Imprimir\u00e1: [2, 4]\n</code></pre> <p>En este c\u00f3digo, <code>{ it % 2 == 0 }</code> es una lambda que chequea si un n\u00famero es par. <code>it</code> es una referencia al elemento actual de la lista que se est\u00e1 procesando.</p> <p>Ahora, sobre c\u00f3mo est\u00e1 implementada <code>filter</code> internamente: es una funci\u00f3n de extensi\u00f3n de la interfaz <code>List</code>. Utiliza un bucle para iterar sobre los elementos de la lista y aplica la lambda a cada uno. Si la lambda devuelve <code>true</code>, el elemento se agrega a una nueva lista. Finalmente, esta nueva lista filtrada se devuelve.</p> <p>Si bien el c\u00f3digo exacto de la implementaci\u00f3n puede variar, conceptualmente es algo as\u00ed:</p> <pre><code>fun &lt;T&gt; List&lt;T&gt;.filter(predicate: (T) -&gt; Boolean): List&lt;T&gt; {\n    val resultado = mutableListOf&lt;T&gt;()\n    for (item in this) {\n        if (predicate(item)) {\n            resultado.add(item)\n        }\n    }\n    return resultado\n}\n</code></pre> <p>Espero que esto te ayude a entender mejor c\u00f3mo funciona <code>filter</code> y en general cualquier funci\u00f3n o m\u00e9todo que utiliza lambdas entre sus par\u00e1metros.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#12-notacion-para-llamar-a-las-funciones-cuando-se-utilizan-lambdas","title":"1.2. Notaci\u00f3n para llamar a las funciones cuando se utilizan lambdas","text":"<p>En Kotlin, cuando llamas a una funci\u00f3n que toma una lambda como par\u00e1metro, puedes usar dos formas: con o sin par\u00e9ntesis. La que ya mostr\u00e9 es la forma sin par\u00e9ntesis, pero si prefieres usar par\u00e9ntesis, puedes hacerlo tambi\u00e9n. Aqu\u00ed te muestro c\u00f3mo ser\u00eda:</p> <pre><code>val numeros = listOf(1, 2, 3, 4, 5)\nval pares = numeros.filter({ it % 2 == 0 }) //tambien se puede poner numeros.filter { it % 2 == 0 }\nprintln(pares)  // Esto imprimir\u00e1: [2, 4]\n</code></pre> <p>En esta versi\u00f3n, simplemente colocas la lambda entre par\u00e9ntesis despu\u00e9s de <code>filter</code>. Funciona exactamente igual que la versi\u00f3n sin par\u00e9ntesis. Es m\u00e1s una cuesti\u00f3n de estilo y preferencia personal que de funcionalidad.</p> <p>En Kotlin, cuando una funci\u00f3n tiene una lambda como \u00faltimo par\u00e1metro, puedes optar por usar la \"sintaxis de lambda fuera de los par\u00e9ntesis\", que es lo que hicimos en los ejemplos de m\u00e1s arriba. Pero si te sientes m\u00e1s c\u00f3modo con los par\u00e9ntesis, \u00a1adelante!</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#13-que-es-un-receiver-en-kotlin","title":"1.3. \u00bfQu\u00e9 es un receiver en kotlin?","text":"<p>En Kotlin, un \"receiver\" se refiere a un tipo especial de par\u00e1metro que est\u00e1 disponible dentro del cuerpo de una funci\u00f3n de extensi\u00f3n o una lambda con receptor. Es una forma poderosa y flexible de a\u00f1adir funcionalidades a clases existentes o de crear DSLs (Domain-Specific Languages). Veamos cada caso:</p> <ol> <li> <p>Funciones de Extensi\u00f3n: Cuando defines una funci\u00f3n de extensi\u00f3n para una clase, el \"receiver\" es la instancia de esa clase sobre la cual se invoca la funci\u00f3n. Por ejemplo:</p> <pre><code>fun String.exclamar() = this + \"!\"\n</code></pre> <p>Aqu\u00ed, <code>String</code> es el receiver. Dentro de exclamar, puedes usar this para referirte a la instancia espec\u00edfica de String sobre la que se llama a la funci\u00f3n. Si haces <code>val saludo = \"Hola\".exclamar()</code>, <code>this</code> dentro de exclamar ser\u00e1 <code>\"Hola\"</code>.   </p> </li> <li> <p>Lambdas con Receptor: Son similares a las funciones de extensi\u00f3n, pero en forma de lambda. Dentro de estas lambdas, tienes acceso directo a los m\u00e9todos y propiedades del receiver. Un ejemplo com\u00fan es con las builders en Kotlin, como en apply:</p> <pre><code>val lista = ArrayList&lt;String&gt;().apply {\n    add(\"Uno\")\n    add(\"Dos\")\n}\n</code></pre> <p>En este caso, <code>ArrayList&lt;String&gt;()</code> es el receiver para la lambda pasada a <code>apply</code>. Dentro de la lambda, puedes llamar directamente a m\u00e9todos como <code>add</code> sin necesidad de especificar el objeto (no necesitas decir <code>this.add(\"Uno\")</code>, simplemente <code>add(\"Uno\")</code> funciona).</p> </li> </ol> <p>Por tanto, el receiver en Kotlin proporciona un contexto adicional dentro de una funci\u00f3n de extensi\u00f3n o una lambda, permiti\u00e9ndote acceder y modificar las propiedades y m\u00e9todos del objeto sobre el cual se invoca la funci\u00f3n o lambda. Esto hace que el c\u00f3digo sea m\u00e1s conciso y legible, y es una parte fundamental de c\u00f3mo Kotlin maneja muchas de sus caracter\u00edsticas m\u00e1s elegantes y potentes.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#14-que-es-it-en-kotlin","title":"1.4. \u00bfQu\u00e9 es <code>it</code> en kotlin?","text":"<p>En Kotlin, <code>it</code> es un nombre impl\u00edcito que se usa para referirse al par\u00e1metro \u00fanico de una lambda cuando dicho par\u00e1metro no se declara de manera expl\u00edcita. Es una forma conveniente y concisa de trabajar con lambdas que solo requieren un par\u00e1metro. Aqu\u00ed te explico un poco m\u00e1s:</p> <ol> <li>Uso en Lambdas: Cuando tienes una lambda que acepta un solo par\u00e1metro, puedes usar <code>it</code> para referirte a ese par\u00e1metro sin necesidad de declararlo. Por ejemplo:     <code>kotlin    val lista = listOf(1, 2, 3)    val cuadrados = lista.map { it * it }</code></li> </ol> <p>En este caso, la lambda pasada a <code>map</code> tiene un par\u00e1metro (cada elemento de la lista), y usamos <code>it</code> para referirnos a ese par\u00e1metro. Es equivalente a escribir <code>{ numero -&gt; numero * numero }</code>, pero m\u00e1s conciso.   </p> <ol> <li> <p>Cu\u00e1ndo se Utiliza: <code>it</code> se utiliza autom\u00e1ticamente solo cuando la lambda tiene un solo par\u00e1metro. Si la lambda tiene m\u00e1s de un par\u00e1metro o si quieres nombrar expl\u00edcitamente el par\u00e1metro por claridad, entonces no se puede usar <code>it</code>.   </p> </li> <li> <p>Legibilidad: Aunque <code>it</code> es \u00fatil para mantener el c\u00f3digo conciso, en algunos casos puede ser menos legible, especialmente si el cuerpo de la lambda es largo o complejo. En tales situaciones, puede ser mejor dar un nombre expl\u00edcito al par\u00e1metro para hacer el c\u00f3digo m\u00e1s f\u00e1cil de entender.   </p> </li> </ol> <p>Para darle un nombre a <code>it</code> en una lambda en Kotlin, simplemente defines expl\u00edcitamente el par\u00e1metro de la lambda. Esto se hace colocando el nombre del par\u00e1metro seguido de una flecha (<code>-&gt;</code>) al principio de la lambda. Aqu\u00ed te muestro c\u00f3mo hacerlo con un ejemplo:Supongamos que tienes una lista y quieres aplicar una operaci\u00f3n a cada elemento. Usando <code>it</code>, lo har\u00edas as\u00ed:</p> <pre><code>val numeros = listOf(1, 2, 3)\nval cuadrados = numeros.map { it * it }\n</code></pre> <p>En este caso, <code>it</code> se refiere impl\u00edcitamente a cada elemento de la lista <code>numeros</code>. Pero si prefieres darle un nombre expl\u00edcito al par\u00e1metro, lo haces de la siguiente manera:</p> <pre><code>val cuadrados = numeros.map { numero -&gt; numero * numero }\n</code></pre> <p>Aqu\u00ed, <code>numero</code> es el nombre que le has dado al par\u00e1metro que antes se referenciaba con <code>it</code>. Esto puede hacer que tu c\u00f3digo sea m\u00e1s legible, especialmente si la lambda es compleja o si est\u00e1s trabajando con varias lambdas y quieres evitar confusiones.</p> <p>Nombrar los par\u00e1metros de las lambdas es una buena pr\u00e1ctica cuando el contexto no es inmediatamente claro o cuando la lambda es lo suficientemente compleja como para beneficiarse de una mayor claridad.</p> <p>Por tanto, <code>it</code> es una herramienta \u00fatil en Kotlin que ayuda a mantener las lambdas simples y concisas cuando solo tienen un par\u00e1metro. Es parte de lo que hace a Kotlin un lenguaje expresivo y agradable de usar.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#15-manejo-de-nulos-y-operador-elvis","title":"1.5. Manejo de nulos y operador Elvis.","text":"<p>Controlar los nulos es una parte crucial en Kotlin, y es uno de los aspectos donde este lenguaje realmente brilla, gracias a su sistema de tipos que distingue entre referencias que pueden ser nulas (<code>nullable</code>) y las que no pueden serlo (<code>non-nullable</code>). Veamos c\u00f3mo puedes manejar los nulos y usar el operador Elvis en Kotlin:</p> <ol> <li> <p>Tipos Nulables y No Nulables:     En Kotlin, una variable no puede ser nula a menos que se declare expl\u00edcitamente como nulable. Se agrega un signo de interrogaci\u00f3n (<code>?</code>) al tipo para indicar que puede ser nula.</p> <pre><code>var nombre: String = \"Cirolele\"  // No puede ser nula\nvar apellido: String? = null     // Puede ser nula\n</code></pre> </li> <li> <p>Chequeo de Nulos:     Antes de usar una variable nulable, debes verificar si es nula.     <pre><code>if (apellido != null) {\n    println(apellido.length)\n}\n</code></pre></p> </li> <li> <p>Operador de Llamada Segura (<code>?.</code>):    Permite acceder de forma segura a las propiedades y m\u00e9todos de una referencia nulable. Si la referencia es nula, no se ejecuta el m\u00e9todo o propiedad y devuelve nulo.     <pre><code>println(apellido?.length)  // Imprime el largo si no es nulo, sino imprime null\n</code></pre></p> </li> <li> <p>Operador Elvis (<code>?:</code>):    Este operador se utiliza para proporcionar un valor por defecto en caso de que la expresi\u00f3n a su izquierda sea nula. Es como decir \"usa esto, pero si es nulo, entonces usa aquello\".     <pre><code>val longitud = apellido?.length ?: 0  // Si apellido es nulo, usa 0\n</code></pre>     El operador Elvis es extremadamente \u00fatil para evitar el anidamiento excesivo de declaraciones <code>if</code> y proporcionar valores predeterminados de manera concisa.   </p> </li> <li> <p>Operador de Aserto No Nulo (<code>!!</code>):     Convierte cualquier valor a un tipo no nulable, lanzando una excepci\u00f3n <code>NullPointerException</code> si el valor es nulo.     Debe usarse con cuidado, ya que va en contra de la seguridad de nulos que Kotlin intenta proporcionar.    <pre><code>val nombreNoNulo: String = nombre!!  // Lanza NullPointerException si nombre es nulo\n</code></pre></p> </li> <li> <p>let con Nulos:    El m\u00e9todo <code>let</code> puede ser \u00fatil para trabajar con valores nulables. Si el objeto es nulo, el bloque no se ejecuta.     <pre><code>apellido?.let {\n    println(\"El apellido tiene ${it.length} caracteres\")\n}\n</code></pre></p> </li> </ol> <p>Aprender a controlar los nulos en Kotlin te ayuda a escribir c\u00f3digo m\u00e1s seguro y menos propenso a errores en tiempo de ejecuci\u00f3n. Recuerda, Kotlin est\u00e1 dise\u00f1ado para minimizar la posibilidad de <code>NullPointerException</code>, y aprovechar estas caracter\u00edsticas te permite escribir un c\u00f3digo m\u00e1s robusto y limpio.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#16-diferencia-entre-listas-y-arrays","title":"1.6. Diferencia entre Listas y Arrays","text":"<p>Las listas y los arrays son dos estructuras de datos comunes en Kotlin. Aunque son similares, tienen algunas diferencias importantes que es importante conocer. Veamos cu\u00e1les son: - Listas: Una lista es una colecci\u00f3n ordenada de elementos. Puedes agregar o quitar elementos de una lista despu\u00e9s de su creaci\u00f3n. En Kotlin, las listas son inmutables por defecto, lo que significa que no puedes modificarlas despu\u00e9s de su creaci\u00f3n. Para crear una lista mutable, debes usar <code>mutableListOf</code> en lugar de <code>listOf</code>. Por ejemplo:</p> <p><pre><code>val lista = listOf(\"A\", \"B\", \"C\")  // Lista inmutable\nval listaMutable = mutableListOf(\"A\", \"B\", \"C\")  // Lista mutable\n</code></pre> - Arrays: Un array es una estructura de datos que contiene una colecci\u00f3n de elementos del mismo tipo. Los arrays son representados por la clase <code>Array</code> y son mutables por defecto, lo que significa que puedes modificarlos despu\u00e9s de su creaci\u00f3n. Para crear un array inmutable, debes usar <code>arrayOf</code> en lugar de <code>arrayOf</code>. Por ejemplo:</p> <pre><code>```kotlin\nval array = arrayOf(\"A\", \"B\", \"C\")  // Array mutable\nval arrayInmutable = arrayOf(\"A\", \"B\", \"C\")  // Array inmutable      \n```\n</code></pre> <p>En Kotlin el uso de arrays es muy similar al de las listas.  Puedes acceder a los elementos de un array usando el operador de indexaci\u00f3n (<code>[]</code>). Por ejemplo:</p> <pre><code>```kotlin\nval array = arrayOf(\"A\", \"B\", \"C\")\nprintln(array[0])  // Imprime \"A\"\n```\n</code></pre> <p>Tambi\u00e9n puedes modificar los elementos de un array usando el operador de indexaci\u00f3n. Por ejemplo:</p> <pre><code>```kotlin\nval array = arrayOf(\"A\", \"B\", \"C\")\narray[0] = \"D\"\nprintln(array[0])  // Imprime \"D\"\n```\n</code></pre> <p>Los arrays tambi\u00e9n tienen un m\u00e9todo <code>size</code> que devuelve el n\u00famero de elementos en el array. Por ejemplo:</p> <pre><code>```kotlin\nval array = arrayOf(\"A\", \"B\", \"C\")\nprintln(array.size)  // Imprime 3\n```\n</code></pre> <p>Los arrays tambi\u00e9n tienen un m\u00e9todo <code>get</code> que devuelve el elemento en el \u00edndice especificado. Por ejemplo:</p> <pre><code>```kotlin\nval array = arrayOf(\"A\", \"B\", \"C\")\nprintln(array.get(0))  // Imprime \"A\"\n```\n</code></pre> <p>Los arrays tambi\u00e9n tienen un m\u00e9todo <code>set</code> que establece el elemento en el \u00edndice especificado. Por ejemplo:</p> <pre><code>```kotlin\nval array = arrayOf(\"A\", \"B\", \"C\")\narray.set(0, \"D\")\nprintln(array.get(0))  // Imprime \"D\"\n```\n</code></pre> <p>Los arrays tambi\u00e9n tienen un m\u00e9todo <code>contains</code> que devuelve <code>true</code> si el array contiene el elemento especificado. Por ejemplo:</p> <p><code>kotlin     val array = arrayOf(\"A\", \"B\", \"C\")     println(array.contains(\"A\"))  //</code></p> <p>Por tanto, la principal diferencia entre un Array y una List en Kotlin radica en su tama\u00f1o y mutabilidad:</p> <ul> <li> <p>Tama\u00f1o:   </p> </li> <li> <p>Array: El tama\u00f1o de un Array es fijo una vez que se ha inicializado. No puedes agregar o eliminar elementos.</p> </li> <li> <p>List: Las listas pueden ser fijas (inmutables) o variables (mutables). Una List inmutable (listOf) no permite modificar su tama\u00f1o ni sus elementos, mientras que una MutableList (mutableListOf) permite tanto cambiar elementos existentes como agregar o quitar elementos, modificando as\u00ed su tama\u00f1o.</p> </li> <li> <p>Mutabilidad:   </p> </li> <li> <p>Array: Puede modificar los elementos existentes (es mutable en sus elementos), pero no su tama\u00f1o.</p> </li> <li> <p>List: Dependiendo de si es una List o MutableList, puede ser inmutable (no permite modificaciones en sus elementos ni en tama\u00f1o) o mutable (permite todo tipo de modificaciones).</p> </li> <li> <p>Uso:  </p> </li> <li> <p>Array: M\u00e1s adecuado para tama\u00f1os fijos y operaciones de bajo nivel, donde el tama\u00f1o es conocido y no cambiar\u00e1.</p> </li> <li> <p>List: Preferible para colecciones cuyo tama\u00f1o puede cambiar, o cuando se necesita una colecci\u00f3n inmutable.</p> </li> <li> <p>Tipos de Datos:   </p> </li> <li> <p>Array: Puede almacenar tipos primitivos de manera m\u00e1s eficiente (como IntArray, ByteArray).</p> </li> <li>List: Trabaja con objetos, incluso para tipos primitivos (como List). <p>Resumiendo, si necesitas una colecci\u00f3n de tama\u00f1o fijo o eficiencia para tipos primitivos, un Array puede ser la mejor elecci\u00f3n. Si requieres flexibilidad en el tama\u00f1o o quieres trabajar con colecciones inmutables, entonces una List ser\u00eda m\u00e1s adecuada.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#17-como-crear-listas","title":"1.7. Como crear listas","text":"<p>En Kotlin, hay varias formas de crear listas. Cada una tiene sus propias caracter\u00edsticas y usos, y es importante conocerlas para poder elegir la m\u00e1s adecuada para cada situaci\u00f3n. Veamos c\u00f3mo crear listas en Kotlin:</p> <ol> <li> <p>Listas Inmutables Vac\u00edas: Para crear una lista inmutable y vac\u00eda, usas <code>emptyList</code>. Por ejemplo:     <code>kotlin     val emptyList = emptyList&lt;String&gt;() // Una lista vac\u00eda de Strings</code></p> </li> <li> <p>Listas Inmutables: Usas <code>listOf</code> para crear listas inmutables. Si tienes <code>val readOnlyList = listOf(\"John\", \"Doe\")</code>, no puedes agregar o quitar elementos de <code>readOnlyList</code>. <code>listOfNotNull</code> se usa para excluir nulos, como en <code>val filteredList = listOfNotNull(\"A\", \"B\", null)</code>, resultando en una lista con \"A\" y \"B\" solamente.</p> </li> <li> <p>Listas Mutables: Con <code>mutableListOf</code>, creas listas a las que puedes agregar o quitar elementos despu\u00e9s. Por ejemplo:</p> </li> </ol> <pre><code>var mutableList = mutableListOf(\"Sydney\", \"Tokyo\")\nmutableList.add(\"New York\") // Ahora mutableList contiene Sydney, Tokyo y New York\n</code></pre> <p><code>arrayListOf</code> es similar, pero espec\u00edficamente crea un <code>ArrayList</code>.</p> <ol> <li>Conversi\u00f3n a Listas: Puedes convertir otras estructuras como <code>Map</code> a <code>List</code> con <code>toList</code>. Por ejemplo, al convertir un <code>Map</code> de direcciones:</li> </ol> <pre><code>val userAddressMap = mapOf(\"A\" to \"India\", \"B\" to \"Australia\")\nval addressList = userAddressMap.toList() // Convierte el Map a una List de Pares\n</code></pre> <ol> <li>Constructores de Listas: <code>List(size) { lambda }</code> crea una lista inmutable con un tama\u00f1o definido y elementos inicializados por la lambda. <code>MutableList</code> es similar pero mutable. Por ejemplo:</li> </ol> <pre><code>val myList = List(3) { it * 2 } // Crea una lista [0, 2, 4]\n</code></pre> <p><code>buildList</code> permite construir una lista inmutable con un bloque mutable. Ejemplo:</p> <pre><code>val builtList = buildList {\n    add(\"One\")\n    add(\"Two\")\n} // Crea una lista [\"One\", \"Two\"]\n</code></pre> <p>Cada uno de estos m\u00e9todos tiene usos espec\u00edficos, dependiendo de si necesitas modificar la lista despu\u00e9s de su creaci\u00f3n o si necesitas inicializarla de una manera particular.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#18-listas-de-listas","title":"1.8 Listas de listas","text":"<p>Crear matrices o listas bidimensionales en Kotlin es bastante sencillo. Una lista bidimensional es b\u00e1sicamente una lista de listas. Aqu\u00ed te muestro c\u00f3mo puedes hacerlo:</p> <ol> <li>Creaci\u00f3n de una Lista Bidimensional Manualmente: Puedes crear una lista bidimensional manualmente definiendo una lista de listas. Por ejemplo, para crear una matriz 2x3:</li> </ol> <pre><code>val matriz = listOf(\n    listOf(1, 2, 3),\n    listOf(4, 5, 6)\n)\n// Aqu\u00ed matriz es una lista de dos listas, cada una con tres elementos.\n</code></pre> <ol> <li>Creaci\u00f3n Din\u00e1mica: Si quieres crear una matriz con tama\u00f1os din\u00e1micos, puedes usar bucles para inicializarla. Por ejemplo, crear una matriz de 3x3:</li> </ol> <pre><code>val filas = 3\nval columnas = 3\nval matrizDinamica = List(filas) { MutableList(columnas) { 0 } }\n// Crea una matriz 3x3 con todos los elementos inicializados a 0.\n</code></pre> <ol> <li>Acceso y Modificaci\u00f3n de Elementos: Puedes acceder o modificar los elementos de la matriz usando \u00edndices. Por ejemplo, para cambiar un elemento:</li> </ol> <pre><code>matrizDinamica[0][1] = 10  // Cambia el segundo elemento de la primera fila a 10\n</code></pre> <p>Y para leer un elemento:</p> <pre><code>val elemento = matrizDinamica[0][1]  // Lee el segundo elemento de la primera fila\n</code></pre> <ol> <li>Iteraci\u00f3n sobre Elementos: Puedes iterar sobre los elementos de la matriz utilizando bucles anidados:</li> </ol> <pre><code>for (fila in matrizDinamica) {\n    for (elemento in fila) {\n        println(elemento)\n    }\n}\n</code></pre> <p>Estas son las formas b\u00e1sicas de trabajar con matrices o listas bidimensionales en Kotlin. Puedes adaptar estos ejemplos seg\u00fan tus necesidades espec\u00edficas, como cambiar el tipo de datos almacenados o modificar la forma de inicializaci\u00f3n.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#3-reference","title":"3. Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> <li>https://revilofe.github.io/IESRA-DAM-Prog/#/</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.1.-kotlin-aclaraciones/#4-fuente","title":"4. Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/","title":"Programaci\u00f3n orientada a objetos","text":"","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#1-caracteristicas","title":"1. Caracter\u00edsticas","text":"<p>La Programaci\u00f3n Orientada a Objetos (POO) viene a cambiar la forma de programar. Los objetos se utilizan como met\u00e1fora para emular las entidades reales del negocio a modelar.</p> <p>Est\u00e1 basada en varias t\u00e9cnicas como: abstracci\u00f3n, polimorfismo, encapsulamiento, herencia y cohesi\u00f3n/acoplamiento.</p> <ol> <li>Abstracci\u00f3n: La abstracci\u00f3n implica enfocarse en las caracter\u00edsticas esenciales de un objeto, ignorando las menos importantes o accidentales. En POO, esto se traduce en la creaci\u00f3n de clases que representan entidades abstractas con atributos y m\u00e9todos relevantes.    Ejemplo en Kotlin:</li> </ol> <p><pre><code>abstract class Vehiculo(val marca: String, val modelo: String) {\n    abstract fun acelerar()\n    abstract fun frenar()\n}\n</code></pre>    Aqu\u00ed, <code>Vehiculo</code> es una clase abstracta que define la abstracci\u00f3n de un veh\u00edculo con caracter\u00edsticas comunes como marca y modelo, y acciones como acelerar y frenar.</p> <p>Las clases abstractas no pueden ser instanciadas directamente; se utilizan como base para otras clases.</p> <ol> <li>Polimorfismo: El polimorfismo permite que objetos de diferentes clases sean tratados como objetos de una clase com\u00fan. Esto se logra a trav\u00e9s de la herencia y la implementaci\u00f3n de interfaces.    Ejemplo en Kotlin:</li> </ol> <p><pre><code>class Coche(marca: String, modelo: String) : Vehiculo(marca, modelo) {\n    override fun acelerar() {\n        println(\"Coche acelerando\")\n    }\n\n    override fun frenar() {\n        println(\"Coche frenando\")\n    }\n}\n</code></pre> <code>Coche</code> es una clase que hereda de <code>Vehiculo</code> y proporciona su propia implementaci\u00f3n de los m\u00e9todos acelerar y frenar.   </p> <ol> <li>Encapsulamiento: El encapsulamiento implica restringir el acceso directo a algunos componentes de un objeto y proteger la integridad del objeto exponiendo solo lo que es necesario.     Ejemplo en Kotlin:</li> </ol> <p><pre><code>class CuentaBancaria(private var saldo: Double) {\n    fun depositar(monto: Double) {\n        if (monto &gt; 0) {\n            saldo += monto\n        }\n    }\n\n    fun consultarSaldo(): Double {\n        return saldo\n    }\n}\n</code></pre>    Aqu\u00ed, el saldo de <code>CuentaBancaria</code> est\u00e1 encapsulado. Se manipula \u00fanicamente a trav\u00e9s de m\u00e9todos como <code>depositar</code>.   </p> <ol> <li>Herencia: La herencia es un mecanismo mediante el cual una nueva clase adquiere las propiedades y comportamientos de otra clase. Esto ayuda en la reutilizaci\u00f3n de c\u00f3digo.    Ejemplo en Kotlin:</li> </ol> <p><pre><code>open class Animal(val nombre: String) {\n    open fun sonido() {\n        println(\"El animal hace un sonido\")\n    }\n}\n\nclass Perro(nombre: String) : Animal(nombre) {\n    override fun sonido() {\n        println(\"El perro ladra\")\n    }\n}\n</code></pre> <code>Perro</code> hereda de <code>Animal</code> y sobrescribe el m\u00e9todo <code>sonido</code>.   </p> <ol> <li> <p>Cohesi\u00f3n/Acoplamiento: La cohesi\u00f3n se refiere a qu\u00e9 tan estrechamente relacionadas est\u00e1n las tareas realizadas por una clase. El acoplamiento se refiere a c\u00f3mo de interdependientes son las clases entre s\u00ed. La alta cohesi\u00f3n y el bajo acoplamiento son ideales en POO para facilitar la mantenibilidad y la escalabilidad.</p> </li> <li> <p>Alta cohesi\u00f3n: Una clase <code>Calculadora</code> que realiza operaciones matem\u00e1ticas.</p> </li> <li>Bajo acoplamiento: <code>Calculadora</code> utiliza una interfaz <code>OperacionesMatematicas</code> para interactuar con otras clases, lo que reduce su dependencia directa.</li> </ol> <p>Estos conceptos son fundamentales en POO y ayudan a crear software bien estructurado, mantenible y escalable.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#2-clases-y-objetosinstancias","title":"2. Clases y objetos/instancias","text":"<p>En la programaci\u00f3n orientada a objetos (POO), los conceptos fundamentales son las clases y los objetos. Estos conceptos son esenciales para entender c\u00f3mo la POO modela el mundo real y soluciona problemas de forma eficiente y organizada.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#21-conceptos","title":"2.1 Conceptos","text":"<ul> <li>Las clases son una plantilla para la creaci\u00f3n de objetos de datos seg\u00fan un modelo predefinido.   </li> <li>Los objetos son una instancia de la clase, es decir una concreci\u00f3n. Es un ejemplo de esa clase.   </li> </ul> <p>Ej:</p> <ul> <li>Clases: Persona, Animal, Coche</li> <li>Objetos/Instancias: Juan, Perro, Seat Ibiza</li> </ul> <p>Las clases tienen los siguientes componentes:</p> <ul> <li>Atributos/campos: tambi\u00e9n llamadas variables de instancia, contienen la informaci\u00f3n de los futuros objetos. Normalmente privadas al objeto. Los atributos son otros objetos que cualifican al objeto y se acceden a trav\u00e9s del . y el nombre del atributo.</li> <li>M\u00e9todos: tambien llamados m\u00e9todos de instancia, implementan la funcionalidad o comportamiento asociado al objeto, son funciones. Se acceden a estors m\u00e9todos a trav\u00e9s del . y el nombre del m\u00e9todo. Estos m\u00e9todos pueden acceder a las variables de instancia de la clase directamente.   Cuando se desea realizar una acci\u00f3n sobre un objeto, se dice que se le manda un mensaje invocando a un m\u00e9todo que realizar\u00e1 la acci\u00f3n.</li> <li>Constructores: son m\u00e9todos especiales que se utilizan para inicializar los objetos. Se llaman autom\u00e1ticamente cuando se crea un objeto de la clase. Adem\u00e1s van acompa\u00f1ados de un bloque de inicializaci\u00f3n.</li> </ul> <p>Los objetos tienen los siguientes componentes:</p> <ul> <li>Identidad: Los identifica del resto de objetos de la misma clase.</li> <li>Comportamiento: Relacionado con su funcionalidad, determina las operaciones que se pueden realizar y con las que responde a los mensajes.</li> <li>Estado: Conjunto de atributos y sus valores en un momento determinado.</li> </ul>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#22-creando-clase","title":"2.2 Creando clase","text":"","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#221-constructores","title":"2.2.1 Constructores","text":"<p>Un constructor es un m\u00e9todo especial que se utiliza para inicializar los objetos. Se llama autom\u00e1ticamente cuando se crea un objeto de la clase.</p> <p>En Kotlin, una clase puede tener tanto un constructor primario como uno o m\u00e1s constructores secundarios. Si la clase tiene un constructor primario, el secundario debe delegar en el constructor primario, ya sea directamente o indirectamente usando la palabra clave <code>this</code>.  Todos los constructores son p\u00fablicos por defecto, lo que significa que son visibles donde sea visible la clase.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#2211-constructor-primario","title":"2.2.1.1 Constructor Primario","text":"<p>Se declara en el encabezado de la clase y es el m\u00e1s com\u00fanmente utilizado. Por ejemplo:</p> <p><pre><code>class Persona(val nombre: String, val edad: Int)\n</code></pre> Aqu\u00ed, <code>Persona</code> tiene un constructor primario con dos par\u00e1metros: <code>nombre</code> y <code>edad</code>. Si no hay anotaciones ni modificadores de visibilidad, la palabra clave <code>constructor</code> es opcional y se puede omitir.   </p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#2212-constructor-secundario","title":"2.2.1.2 Constructor Secundario","text":"<p>Se declara dentro del cuerpo de la clase y se utiliza para proporcionar funcionalidades adicionales o para permitir diferentes formas de instanciar un objeto. <pre><code>class Persona(val nombre: String) {\n  var edad: Int = 0\n\n  constructor(nombre: String, edad: Int) : this(nombre) {\n      this.edad = edad\n  }\n}\n</code></pre> En el ejemplo anterior,  <code>Persona</code> tiene un constructor primario que solo toma un <code>nombre</code>, y un constructor secundario que toma tanto un <code>nombre</code> como una <code>edad</code>. Presta atenci\u00f3n a como el constructor secundario delega en el constructor primario usando la palabra clave <code>this</code>.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#2213-constructor-vacio","title":"2.2.1.3 Constructor vac\u00edo","text":"<p>Si no se proporciona ning\u00fan constructor, Kotlin crea un constructor vac\u00edo por defecto. Por ejemplo:   <pre><code>  class Persona\n</code></pre></p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#222-definicion-de-las-variables-de-instancia-en-el-constructor","title":"2.2.2 Definici\u00f3n de las variables de instancia en el constructor","text":"<p>Por otra parte, las propiedades o variables de instancia pueden definirse en el constructor principal o en el cuerpo de la clase. En el ejemplo anterior, <code>nombre</code> es una propiedad definida en el constructor principal, mientras que <code>edad</code> es una propiedad definida en el cuerpo de la clase.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#2221-definicion-en-el-constructor","title":"2.2.2.1 Definici\u00f3n en el Constructor","text":"<p>Al usar <code>val</code> o <code>var</code> en el constructor principal, Kotlin genera autom\u00e1ticamente m\u00e9todos getter y setter.</p> <ul> <li><code>val</code>: Solo se crea un m\u00e9todo getter, ya que <code>val</code> define una propiedad de solo lectura.   </li> <li><code>var</code>: Se crean tanto getter como setter, permitiendo lectura y escritura.   </li> </ul> <p>Ejemplo: <pre><code>class Persona(val nombre: String, var edad: Int)\n</code></pre></p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#2222-definicion-personalizada-en-el-cuerpo-de-la-clase","title":"2.2.2.2 Definici\u00f3n Personalizada en el Cuerpo de la Clase","text":"<p>Puedes personalizar c\u00f3mo se accede y modifica una propiedad mediante la definici\u00f3n expl\u00edcita de los m\u00e9todos getter y setter.</p> <p>Ejemplo: <pre><code>class Persona(nombreInicial: String, edadInicial: Int) {\nvar nombre: String = nombreInicial\n    get() = field.toUpperCase() // Personaliza el getter\n    set(value) {\n        field = value.capitalize()\n    }\n\nvar edad: Int = edadInicial\n    private set // Solo getter p\u00fablico, setter privado\n}\n</code></pre> Aqu\u00ed, <code>nombre</code> tiene un getter personalizado que devuelve el nombre en may\u00fasculas y un setter que capitaliza el valor asignado. <code>edad</code> tiene un setter privado, lo que significa que solo puede modificarse dentro de la clase <code>Persona</code>.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#223-bloques-de-inicializacion","title":"2.2.3 Bloques de inicializaci\u00f3n","text":"<p>Los bloques de inicializaci\u00f3n complementan los constructores primarios. Se utilizan para ejecutar c\u00f3digo de inicializaci\u00f3n que se requiere para todas las instancias de la clase, independientemente del constructor utilizado.</p> <p>Los Bloques de Inicializaci\u00f3n <code>init</code> se utilizan junto con el constructor primario. El c\u00f3digo en estos bloques se ejecuta cada vez que se crea una instancia de la clase, y puede haber m\u00e1s de uno.</p> <p>Dentro de los bloques <code>init</code> puedes usar la palabra <code>required</code> para validar las propiedades o par\u00e1metros. Tambi\u00e9n puedes usar los par\u00e1metros del constructor primario en los bloques <code>init</code> y en los inicializadores de las propiedades en el cuerpo de la clase:</p> <pre><code>class Persona(val nombre: String, val edad: Int) {\n  val nombreEnMayusculas = nombre.toUpperCase()\n  init {\n      require(nombre.trim().length &gt; 0) { \"Argumento nombre inv\u00e1lido.\" }\n      require(edad &gt;= 0 &amp;&amp; edad &lt; 150) { \"Argumento edad inv\u00e1lido.\" }\n      println(\"Se ha creado una nueva Persona llamada $nombre\")\n  }\n}\n</code></pre> <p>Una buena pr\u00e1ctica es conocer el orden de ejecuci\u00f3n de cada bloque.</p> <pre><code>class InitOrderDemo(name: String) {\n    val firstProperty = \"First property: $name\"\n    init {   \n        println(\"First initializer block that prints ${name}\")\n    }\n\n    val secondProperty = \"Second property: ${name.length}\"\n    init{   \n        println(\"Second initializer block that prints ${name.length}\")\n    }\n}\n</code></pre>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#23-atributos-vs-propiedades","title":"2.3 Atributos vs propiedades","text":"<p>Mientras que un atributo es simplemente una variable dentro de una clase, una propiedad en Kotlin es una interfaz m\u00e1s sofisticada para acceder y modificar estos atributos, ofreciendo control adicional y encapsulamiento.</p> <ul> <li>Atributos: Son las variables definidas dentro de una clase. Por ejemplo, en una clase <code>Coche</code>, un atributo podr\u00eda ser <code>marca</code>:</li> </ul> <p><pre><code>class Coche {\n    private var marca: String = \"Toyota\" // Atributo, con acceso tanto en lectura como en escritura privada.\n}\n</code></pre>   Aqu\u00ed, <code>marca</code> es un atributo de la clase <code>Coche</code>. Es privado, lo que significa que solo puede accederse dentro de la clase <code>Coche</code>.</p> <ul> <li>Propiedades: En Kotlin, una propiedad combina un atributo con sus m\u00e9todos getter y setter. Estos m\u00e9todos controlan el acceso y la actualizaci\u00f3n del atributo. Por ejemplo:</li> </ul> <p><pre><code>class Coche {\n    var marca: String = \"Toyota\"\n        private set // Solo se puede consultar. El setter es privado\n\n    val info: String\n        get() = \"Coche de marca $marca\" // Getter personalizado, muestra una cadena con la marca.\n}\n</code></pre>   Aqu\u00ed, <code>marca</code> es una propiedad. Tiene un setter privado, lo que significa que no puedes cambiar <code>marca</code> desde fuera de la clase <code>Coche</code>. <code>info</code> es una propiedad de solo lectura con un getter personalizado que devuelve una cadena que incluye el valor de <code>marca</code>.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#24-ejemplos-de-clases-y-objetos-personalizados","title":"2.4 Ejemplos de clases y objetos personalizados","text":"<p>Vamos a crear ejemplos para las clases <code>Persona</code>, <code>Animal</code>, y <code>Coche</code>, as\u00ed como para sus objetos o instancias espec\u00edficas. Cada clase incluir\u00e1 atributos (o campos) y m\u00e9todos, y mostrar\u00e9 c\u00f3mo se crean y utilizan las instancias de estas clases.</p> <ol> <li> <p>Clase <code>Persona</code>:   </p> </li> <li> <p>Atributos: nombre, edad</p> </li> <li> <p>M\u00e9todos: presentarse</p> <pre><code>class Persona(private val nombre: String, private val edad: Int) {\n    fun presentarse() {\n        println(\"Hola, mi nombre es $nombre y tengo $edad a\u00f1os.\")\n    }\n}\n\n// Creando una instancia\nval juan = Persona(\"Juan\", 30)\njuan.presentarse() // \"Hola, mi nombre es Juan y tengo 30 a\u00f1os.\"\n</code></pre> <p>ten en cuenta que es lo mismo que lo siguiente:</p> <pre><code>//Definiendo la clase\nclass Persona(nombreInicial: String, edadInicial: Int) {\nprivate var nombre: String = nombreInicial\nprivate var edad: Int = edadInicial\n\n    fun presentarse() {\n        println(\"Hola, mi nombre es $nombre y tengo $edad a\u00f1os.\")\n    }\n}\n\n// Uso de la clase para crear una instancia\nval juan = Persona(\"Juan\", 30)\njuan.presentarse() // \"Hola, mi nombre es Juan y tengo 30 a\u00f1os.\"\n</code></pre> </li> <li> <p>Clase <code>Animal</code>:</p> </li> <li> <p>Atributos: especie, nombre</p> </li> <li>M\u00e9todos: emitirSonido</li> </ol> <pre><code>//Definiendo la clase\nclass Animal(private val especie: String, private val nombre: String) {\n    fun emitirSonido() {\n        println(\"Soy un $especie y me llamo $nombre. \u00a1Hago un sonido caracter\u00edstico!\")\n    }\n}\n\n// Uso de la clase para crear una instancia\nval perro = Animal(\"perro\", \"Firulais\")\nperro.emitirSonido() // Soy un perro y me llamo Firulais. \u00a1Hago un sonido caracter\u00edstico!\n</code></pre> <ol> <li> <p>Clase <code>Coche</code>:</p> </li> <li> <p>Atributos: marca, modelo</p> </li> <li>M\u00e9todos: describir</li> </ol> <pre><code>//Definiendo la clase\nclass Coche(private val marca: String, private val modelo: String) {\n    fun describir(prefijo:String  = \"\") { \n       println(prefijo+\"Soy un coche de la marca $marca y modelo $modelo.\")\n    }\n}\n\n// Uso de la clase para crear una instancia\nval seatIbiza = Coche(\"Seat\", \"Ibiza\")\nseatIbiza.describir() // Soy un coche de la marca Seat y modelo Ibiza.\n</code></pre> <p>En cada una de estas clases, los atributos son privados, encapsulando as\u00ed la informaci\u00f3n dentro de la clase. Los m\u00e9todos <code>presentarse</code>, <code>emitirSonido</code>, y <code>describir</code> permiten interactuar con estas clases, mostrando c\u00f3mo los objetos (instancias) pueden usar sus m\u00e9todos para realizar acciones espec\u00edficas.</p> <p>Crear instancias como <code>juan</code>, <code>perro</code>, y <code>seatIbiza</code> de sus respectivas clases demuestra c\u00f3mo las clases sirven como plantillas para crear objetos espec\u00edficos con estados y comportamientos definidos.</p> <p>Presta atenci\u00f3n al <code>private</code> delante de los atributos de las clases. Esto es una buena pr\u00e1ctica para encapsular los atributos y que no puedan ser modificados desde fuera de la clase.</p> <p>Un ejemplo de representaci\u00f3n de una clase <code>Perro</code> con tres atributos y 3 m\u00e9todos.</p> <p> </p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#25-atributos-y-metodos-estaticos-companion-object","title":"2.5 Atributos y m\u00e9todos est\u00e1ticos (companion object)","text":"<p>Los m\u00e9todos y atributos est\u00e1ticos son elementos de una clase que pertenecen a la clase misma, en lugar de a instancias individuales de esa clase. En Kotlin, estos se manejan principalmente a trav\u00e9s de <code>companion objects</code>. Las caracter\u00edsticas clave incluyen:</p> <ol> <li>Atributos Est\u00e1ticos: Son variables asociadas con la clase en su conjunto. Por ejemplo, un contador de cu\u00e1ntas instancias de una clase se han creado.</li> <li>M\u00e9todos Est\u00e1ticos: Son funciones asociadas con la clase, no con instancias individuales. Puedes llamar a estos m\u00e9todos sin crear un objeto de la clase.</li> </ol> <p>Los <code>companion objects</code> en Kotlin proporcionan una manera elegante de trabajar con propiedades y m\u00e9todos que son comunes a todas las instancias de una clase, o que deben ser accesibles sin necesidad de crear una instancia de dicha clase, ademas pueden usarse para otras funciones importantes:</p> <ol> <li>Almacenar Propiedades y M\u00e9todos Est\u00e1ticos: A diferencia de Java, Kotlin no tiene campos o m\u00e9todos est\u00e1ticos. Los <code>companion objects</code> proporcionan una funcionalidad similar, permitiendo definir propiedades y m\u00e9todos que pertenecen a la clase en s\u00ed, y no a una instancia espec\u00edfica.</li> <li>Inicializaci\u00f3n de Clase: Pueden usarse para ejecutar c\u00f3digo que prepare recursos necesarios para la clase antes de que se creen instancias.</li> <li>Patrones de Dise\u00f1o: Son \u00fatiles en la implementaci\u00f3n de patrones de dise\u00f1o como Singleton, Factory, entre otros.</li> <li>Interfaces: Un <code>companion object</code> puede implementar interfaces, permitiendo que una clase tenga m\u00e9todos est\u00e1ticos que forman parte de una interfaz.</li> </ol> <p>Un buen ejemplo para demostrar un <code>companion object</code> en Kotlin, usando una de las clases anteriores, podr\u00eda ser en la clase <code>Animal</code>. Imagina que queremos llevar un registro del n\u00famero total de animales creados. Esto es un dato que no pertenece a un solo animal, sino a la clase <code>Animal</code> en su conjunto. Podemos usar un <code>companion object</code> para esto:</p> <pre><code>class Animal(private val especie: String, private val nombre: String) {\n    companion object {\n        private var contador = 0\n\n        fun getTotalAnimales(): Int {\n            return contador\n        }\n    }\n\n    init {\n        contador++\n    }\n\n    fun emitirSonido() {\n        println(\"Soy un $especie y me llamo $nombre. \u00a1Hago un sonido caracter\u00edstico!\")\n    }\n}\n</code></pre> <p>En este ejemplo, cada vez que se crea un nuevo <code>Animal</code>, el contador en el <code>companion object</code> se incrementa. Esto nos permite llevar un seguimiento de cu\u00e1ntos objetos <code>Animal</code> se han creado. El m\u00e9todo <code>getTotalAnimales</code> es est\u00e1tico y se puede llamar sin una instancia de <code>Animal</code>, lo que es \u00fatil para obtener informaci\u00f3n a nivel de clase.</p> <p>Tambi\u00e9n, como ejemplo del uso de <code>companion object</code>, podr\u00edamos a\u00f1adir a la clase <code>Coche</code> que defina si los coches tienen el volante a la derecha o a la izquierda. Esto puede depender de un valor est\u00e1tico como el pa\u00eds para el cual se crea el coche. Aqu\u00ed te muestro c\u00f3mo:</p> <pre><code>class Coche(private val marca: String, private val modelo: String) {\n    companion object {\n        var volanteALaDerecha: Boolean = true // Por defecto, para pa\u00edses con conducci\u00f3n a la izquierda\n\n        fun configurarConduccion(esConduccionALaDerecha: Boolean) {\n            volanteALaDerecha = esConduccionALaDerecha\n        }\n    }\n\n    fun describir() {\n        val ladoVolante = if (volanteALaDerecha) \"derecha\" else \"izquierda\"\n        println(\"Soy un coche de la marca $marca y modelo $modelo. Tengo el volante a la $ladoVolante.\")\n    }\n}\n</code></pre> <p>Con este enfoque, puedes cambiar la configuraci\u00f3n del volante para todos los coches seg\u00fan el pa\u00eds, utilizando el m\u00e9todo <code>configurarConduccion</code> del <code>companion object</code>.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#26-ejemplos-de-clases-y-objetos-propios-del-lenguaje","title":"2.6 Ejemplos de clases y objetos propios del lenguaje","text":"<p>En Kotlin, todo es un objeto en el sentido de que podemos hacer uso de los m\u00e9todos y atributos en cualquier del objeto. Por ejemplo, <code>Int</code> es una clase y <code>1</code> es un objeto de la clase <code>Int</code>.</p> <p>Aqui tienes las clases predefinidas de Kotlin. Un ejemplo com\u00fan y sencillo en muchos lenguajes de programaci\u00f3n orientada a objetos es la clase <code>String</code>. Esta clase es utilizada para representar cadenas de texto y ya viene definida en la mayor\u00eda de los lenguajes de programaci\u00f3n modernos, incluyendo Java, Python, C#, Kotlin, entre otros.</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#261-clase-string","title":"2.6.1. Clase: String","text":"<ul> <li>Clase <code>String</code>: Esta clase es una plantilla predefinida en el lenguaje de programaci\u00f3n para representar secuencias de caracteres (texto). Tiene varios m\u00e9todos que permiten manipular o consultar la cadena de texto, como <code>length()</code>, <code>toUpperCase()</code>, <code>substring()</code>, etc.</li> </ul>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#262-objetoinstancia-cadena-de-texto","title":"2.6.2. Objeto/Instancia: Cadena de Texto","text":"<ul> <li>Objeto <code>String</code>: Un objeto de la clase <code>String</code> es una instancia espec\u00edfica, es decir, una cadena de texto concreta. Por ejemplo, <code>\"Hola Mundo\"</code> es un objeto de la clase <code>String</code>.</li> </ul>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#263-ejemplo-en-kotlin","title":"2.6.3. Ejemplo en kotlin:","text":"<pre><code>val saludo = String(\"Hola Mundo\") // Creando un objeto de la clase String. Tambien se puede usar \"Hola Mundo\".\nval longitud = saludo.length // Utilizando una propiedad de la clase String\nprintln(\"Longitud del saludo: $longitud\") // Mostrando la longitud de la cadena\n</code></pre> <p>En este ejemplo:</p> <ul> <li><code>saludo</code> es un objeto de la clase <code>String</code>.</li> <li>Utilizamos la propiedad <code>length</code> de la clase <code>String</code> para obtener la longitud de la cadena de texto.</li> <li>Imprimimos la longitud del objeto <code>saludo</code>.</li> </ul> <p>Este ejemplo demuestra c\u00f3mo se define un objeto <code>String</code> en Kotlin y c\u00f3mo se puede interactuar con \u00e9l utilizando las propiedades y m\u00e9todos definidos en la clase <code>String</code>. La clase proporciona la estructura y los m\u00e9todos para manipular cadenas de texto, mientras que el objeto <code>saludo</code> es una instancia espec\u00edfica con su propio valor (<code>\"Hola Mundo\"</code>).</p>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#3-programa-simple-en-programacion-orientada-a-objetos","title":"3. Programa simple en programaci\u00f3n orientada a objetos","text":"<p>La creaci\u00f3n de programas es exactamente igual que hasta ahora. La diferencia es que ahora vamos a crear clases y objetos.</p> <p>Vamos a desarrollar un programa simple en Kotlin que demuestra la programaci\u00f3n orientada a objetos (POO). Este programa simular\u00e1 un sistema de gesti\u00f3n comunitario donde:</p> <ul> <li>Se crean personas.</li> <li>Estas personas pueden adoptar animales.</li> <li>Tambi\u00e9n pueden registrar sus veh\u00edculos.</li> <li>Finalmente, el programa mostrar\u00e1 un resumen de las personas con sus animales adoptados y veh\u00edculos registrados.</li> </ul> <p>Utilizaremos clases para representar personas, animales y coches, demostrando conceptos clave de POO como la encapsulaci\u00f3n, la instanciaci\u00f3n de objetos y la interacci\u00f3n entre diferentes objetos.</p> <p>Para desarrollar un programa simple en Kotlin haciendo uso de POO que haga lo que hemos comentado anteriormente, sigue estos pasos:</p> <ol> <li>Definir Clases: Empieza explicando c\u00f3mo se definen las clases en Kotlin. Cada clase (<code>Persona</code>, <code>Animal</code>, <code>Coche</code>) encapsula datos (atributos) y comportamientos (m\u00e9todos).</li> <li>Crear Instancias: Muestra c\u00f3mo crear instancias de estas clases usando sus constructores. Por ejemplo, <code>val juan = Persona(\"Juan\", 30)</code>.</li> <li>Usar M\u00e9todos y Propiedades: Explica c\u00f3mo acceder y utilizar m\u00e9todos y propiedades de los objetos. Por ejemplo, <code>juan.presentarse()</code> llama al m\u00e9todo <code>presentarse</code> del objeto <code>juan</code>.</li> <li>Estructuras de Datos: Introduce el uso de estructuras de datos como listas y mapas para almacenar y organizar objetos.</li> <li>Iteraci\u00f3n y Acci\u00f3n: Muestra c\u00f3mo iterar sobre estas estructuras (con <code>forEach</code>, por ejemplo) y realizar acciones, como imprimir informaci\u00f3n.</li> <li>Interacci\u00f3n entre Objetos: Demuestra c\u00f3mo diferentes objetos interact\u00faan, como en el mapeo de personas con sus animales y veh\u00edculos.</li> </ol> <p>Este enfoque proporciona una visi\u00f3n clara y estructurada de c\u00f3mo se construyen y se utilizan objetos en un programa Kotlin, destacando los principios de la POO.</p> <pre><code>import com.sun.xml.internal.fastinfoset.util.PrefixArray\n\n/**\n * Clase Persona representa a un individuo con un nombre y una edad.\n * @param nombre Nombre de la persona.\n * @param edad Edad de la persona.\n */\nclass Persona(private val nombre: String, private val edad: Int) {\n   /**\n    * M\u00e9todo para que la persona se presente.\n    */\n   fun presentarse() {\n      println(\"Hola, mi nombre es $nombre y tengo $edad a\u00f1os.\")\n   }\n}\n\n/**\n * Clase Animal representa a un animal con una especie y un nombre.\n * @param especie Especie del animal.\n * @param nombre Nombre del animal.\n */\nclass Animal(private val especie: String, private val nombre: String) {\n   /**\n    * M\u00e9todo para que el animal emita su sonido caracter\u00edstico.\n    */\n   fun emitirSonido() {\n      println(\"Soy un $especie y me llamo $nombre. \u00a1Hago un sonido caracter\u00edstico!\")\n   }\n}\n\n/**\n * Clase Coche representa un veh\u00edculo con marca y modelo.\n * @param marca Marca del coche.\n * @param modelo Modelo del coche.\n */\nclass Coche(private val marca: String, private val modelo: String) {\n   /**\n    * M\u00e9todo para describir el coche.\n    */\n   fun describir(prefijo:String  = \"\") {\n      println(prefijo+\"Soy un coche de la marca $marca y modelo $modelo.\")\n   }\n}\n\nfun main() {\n   // Registro de personas\n   val juan = Persona(\"Juan\", 30)\n   val maria = Persona(\"Maria\", 25)\n\n   // Adopci\u00f3n de animales\n   val perro = Animal(\"perro\", \"Firulais\")\n   val gato = Animal(\"gato\", \"Misu\")\n   val animalesAdoptados = mapOf(juan to perro, maria to gato)\n\n   // Registro de veh\u00edculos\n   val cocheJuan = Coche(\"Seat\", \"Ibiza\")\n   val cocheMaria = Coche(\"Ford\", \"Fiesta\")\n   val vehiculos = mapOf(juan to cocheJuan, maria to cocheMaria)\n\n   // Mostrar informaci\u00f3n\n   animalesAdoptados.forEach { (persona, animal) -&gt;\n      persona.presentarse()\n      println(\"He adoptado un ${animal.especie} llamado ${animal.nombre}.\")\n      vehiculos[persona]?.describir(\"=&gt;\")\n   }\n}\n</code></pre>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#4-reference","title":"4. Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> </ul>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-POO/#5-fuente","title":"5. Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","POO","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/","title":"Apuntes de [Kotlin]","text":""},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#clases-y-objetos","title":"Clases y objetos","text":""},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#clases","title":"Clases","text":"<p>Las clases son los bloques de construcci\u00f3n principales de cualquier lenguaje de programaci\u00f3n orientado a objetos. Las clases son esencialmente tipos personalizados: un grupo de variables y m\u00e9todos unidos en una estructura coherente. Para definir una clase se usa la palabra clave <code>'class'</code>.</p> <pre><code>class Invoice { ... }\n</code></pre> <p>La declaraci\u00f3n de clase consiste en el nombre de la clase, el encabezado de la clase (especificando sus par\u00e1metros de tipo, el constructor primario, etc.) y el cuerpo de clase, rodeado de llaves. Tanto el encabezado como el cuerpo son opcionales. Si la clase no tiene cuerpo se pueden omitir las llaves.</p> <p>Si no se especifica visibilidad, la visibilidad por defecto es <code>public</code> y por tanto cualquiera puede crear instancias de dicha clase.</p> <pre><code>class Empty\n</code></pre> <p>En comparaci\u00f3n con Java, puede definir varias clases dentro del mismo archivo fuente.</p> <p>La clases pueden contener:</p> <ul> <li>Constructores y bloques <code>'init'</code></li> <li>Funciones</li> <li>Propiedades</li> <li>Clases anidadas e internas</li> <li>Declaraciones de tipo <code>'object'</code></li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constructores","title":"Constructores","text":"<p>Una clase en Kotlin puede tener un constructor primario y uno o m\u00e1s constructores secundarios.</p> <p>El constructor primario es parte del encabezado de la clase. Este constructor va despu\u00e9s del nombre de la clase (y los par\u00e1metros de tipo que son opcionales). Por defecto, todos los constructores son p\u00fablicos, lo que equivale efectivamente a que sean visible en todas partes donde la clase sea visible.</p> <pre><code>class Person constructor(firstName: String) { ... }\n</code></pre> <p>Si el constructor principal no tiene anotaciones o modificadores de visibilidad, la palabra clave <code>'constructor'</code> se puede omitir:</p> <pre><code>// Podemos omitir la palabra clave 'constructor'\nclass Person(firstName: String) { ... }\n\n// Las anotaciones o modificadores de visibilidad requieren la palabra clave 'constructor'\nclass Customer public @Inject constructor(name: String) { ... }\n</code></pre> <p>Si una clase no-abstracta no declara ning\u00fan constructor (primario o secundario), tendr\u00e1 un constructor primario sin argumentos generado autom\u00e1ticamente. La visibilidad del constructor ser\u00e1 p\u00fablica por defecto. Si no desea que su clase tenga un constructor p\u00fablico, es necesario declarar un constructor vac\u00edo con una visibilidad que no sea la predeterminada:</p> <pre><code>// Clase con un constructor privado\nclass DontCreateMe private constructor () { ... }\n</code></pre> <p>Para crear una instancia de una clase, se invoca al constructor como si de una funci\u00f3n regular se tratase. En Kotlin no existe la palabra clave 'new':</p> <pre><code>class Person(val name: String) {\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n\nval person = Person(\"John\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constructor-primario","title":"Constructor primario","text":"<p>El constructor primario no puede contener ning\u00fan c\u00f3digo. El c\u00f3digo de inicializaci\u00f3n se puede colocar en bloques de inicializaci\u00f3n, que se definen con la palabra clave <code>'init'</code>.</p> <p>Durante una inicializaci\u00f3n de la instancia, los bloques de inicializaci\u00f3n se ejecutan en el mismo orden en que aparecen en el cuerpo de la clase, intercalados con los inicializadores de propiedades:</p> <pre><code>class InitOrderDemo(name: String) {\n    val firstProperty = \"First property: $name\"\n\n    init {\n        println(\"First initializer block that prints ${name}\")\n    }\n\n    val secondProperty = \"Second property: ${name.length}\"\n\n    init {\n        println(\"Second initializer block that prints ${name.length}\")\n    }\n}\n</code></pre> <p>Los bloques <code>'init'</code> pueden usarse para validar las propiedades o par\u00e1metros mediante la palabra clave <code>'require'</code>:</p> <pre><code>class Person (val firstName: String, val lastName: String, val age: Int?) {\n    init{\n        require(firstName.trim().length &gt; 0) { \"Invalid firstName argument.\" }\n        require(lastName.trim().length &gt; 0) { \"Invalid lastName argument.\" }\n\n        if (age != null) {\n            require(age &gt;= 0 &amp;&amp; age &lt; 150) { \"Invalid age argument.\" }\n        }\n    }\n}\n</code></pre> <p>Tenga en cuenta que los par\u00e1metros del constructor primario se pueden usar en los bloques de inicializaci\u00f3n. Tambi\u00e9n pueden ser utilizados en los inicializadores de las propiedades en el cuerpo de la clase:</p> <pre><code>class Customer(name: String) {\n    // Uso del par\u00e1metro 'name' para inicializar la propiedad 'customerKey'\n    val customerKey = name.toUpperCase()\n}\n</code></pre> <p>De hecho, para declarar propiedades e inicializarlas desde el constructor principal, Kotlin tiene una sintaxis concisa:</p> <pre><code>class Person(val firstName: String, val lastName: String, var age: Int) { ... }\n</code></pre> <p>De la misma forma que las propiedades definidas en el cuerpo de la clase, las propiedades declaradas en el constructor primario pueden ser mutables (<code>'var'</code>) o de solo lectura (<code>'val'</code>).</p> <p>Cuando se usa el prefijo <code>'val'</code> Kotlin genera autom\u00e1ticamente el m\u00e9todo <code>'getter()'</code> y cuando se usa el prefijo <code>'var'</code> Kotlin genera el <code>'getter()'</code> y <code>'setter()'</code>. Si no necesitamos los accesores se puede definir el constructor sin los prefijos. De esta forma podemos definir nuestros propios m\u00e9todos accesores.</p> <p>En este ejemplo, el constructor principal de la primera clase define las propiedades, mientras que el segundo no lo hace:</p> <pre><code>// class with primary constructor that defines properties\nclass Info (var name: String, var number: Int)\n\n// class with primary constructor that does not define properties\nclass Info (name: String, number: Int)\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constructor-secundario","title":"Constructor secundario","text":"<p>La clase tambi\u00e9n puede declarar uno o varios constructores secundarios, que se definen con la palabra clave <code>'constructor'</code>:</p> <pre><code>class Person {\n    // Constructor secundario\n    constructor(parent: Person) {\n        parent.children.add(this)\n    }\n}\n</code></pre> <p>Si la clase tiene un constructor primario, cada constructor secundario debe delegar en el constructor primario, ya sea directamente o indirectamente a trav\u00e9s de otro/s constructor/es secundario/s. La delegaci\u00f3n en otro constructor de la misma clase se hace usando la palabra clave <code>'this'</code>:</p> <pre><code>class Person(val name: String) { // Constructor primario\n\n    // Constructor secundario\n    // Usamos 'this' para invocar al constructor primario\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n</code></pre> <p>Hay que tenera en cuenta que el c\u00f3digo en los bloques de inicializaci\u00f3n se convierte efectivamente en parte del constructor primario. La delegaci\u00f3n en el constructor primario ocurre como la primera instrucci\u00f3n en el constructor secundario, por lo que el c\u00f3digo en todos los bloques de inicializaci\u00f3n se ejecuta antes que el constructor secundario. Incluso si la clase no tiene un constructor primario, la delegaci\u00f3n todav\u00eda ocurre impl\u00edcitamente y los bloques de inicializaci\u00f3n a\u00fan se ejecutan antes:</p> <pre><code>class Constructors {\n    init {\n        println(\"Init block\") // Se ejecuta antes que el constructor secundario\n    }\n    constructor(i: Int) {\n        println(\"Constructor\")\n    }\n}\n</code></pre> <p>La diferencia importante entre los constructores secundarios y primarios es que los par\u00e1metros de los constructores primarios pueden definir propiedades, mientras que los par\u00e1metros de un constructor secundario siempre son solo par\u00e1metros.</p> <p>Si los par\u00e1metros de un constructor primario tambi\u00e9n son propiedades, ser\u00e1n accesibles a lo largo de todo el ciclo de vida del objeto, al igual que las propiedades normales. Mientras que, si son simples par\u00e1metros, obviamente s\u00f3lo son accesibles dentro del constructor, como cualquier otro par\u00e1metro de una funci\u00f3n.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#propiedades","title":"Propiedades","text":"<p>En Kotlin no se utiliza el concepto de 'campo' cuando hablamos de variables de instancia sino que se emplea el concepto de propiedades.</p> <p>Las propiedades de una clase pueden declararse como mutables (<code>var</code>), o de inmutables o de s\u00f3lo lectura (<code>val</code>):</p> <pre><code>class Address {\n    var name: String = ...\n    var street: String = ...\n    var city: String = ...\n    var state: String? = ...\n    var zip: String = ...\n}\n</code></pre> <p>Para acceder a las propiedades de una clase usamos el operador punto <code>'.'</code> ya que a diferencia de Java no hay que utilizar <code>getters()</code> ni <code>setters()</code> si hemos definido la propiedad con <code>'val'</code> o <code>'var'</code>. Para usar la propiedad, simplemente nos referimos a ella por su nombre, como si fuera un campo en Java:</p> <pre><code>fun copyAddress(address: Address): Address {\n    val result = Address() // there's no 'new' keyword in Kotlin\n    result.name = address.name // accessors are called\n    result.street = address.street\n    // ...\n    return result\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#getters-and-setters","title":"'Getters()' and 'Setters()'","text":"<p>La sintaxis completa de definici\u00f3n de una propiedad en Kotlin:</p> <pre><code>{var|val} &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]\n    [&lt;getter&gt;]\n    [&lt;setter&gt;]\n</code></pre> <p>El inicializador y las funciones <code>'getter()'</code> (y <code>'setter()'</code> si es una propiedad mutable) son opcionales. El tipo de la propiedad es opcional si puede inferirse desde el inicializador o desde el tipo de retorno del <code>'getter()'</code>.</p> <pre><code>var allByDefault: Int? // error: se requiere un inicializador expl\u00edcito.\nvar initialized = 1 // propiedad de tipo Int, getter y setter por defecto\n\nval simple: Int? // propiedad de tipo Int, getter por defecto, debe ser inicializada por el constructor\nval inferredType = 1 // propiedad de tipo Int y getter por defecto\n</code></pre> <p>Si las funciones <code>'getter()'</code> (y <code>'setter()'</code> en propiedades mutables) por defecto no son suficientes se puede codificar funciones <code>'getter()'</code> o <code>'setter()'</code> propias como cualquier otra funci\u00f3n. Estas funciones est\u00e1n dentro de la propiedad y por tanto tienen que ser identadas correctamente</p> <pre><code>val isEmpty: Boolean\n    get() = this.size == 0\n\nvar stringRepresentation: String\n    get() = this.toString()\n    set(value) {\n        setDataFromString(value) // parses the string and assigns values to other properties\n    }\n</code></pre> <p>N\u00f3tese que por convenci\u00f3n, el nombre del par\u00e1metro de la funci\u00f3n <code>'setter()'</code> es <code>'value'</code> pero no es obligatorio y puede escogerse otro nombre.</p> <p>Las propiedades pueden ser 'private', 'protected', o 'public' (visibilidad por defecto).</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#backing-fields","title":"Backing Fields","text":"<p>El campo de respaldo o 'backing field' es un campo generado autom\u00e1ticamente para cualquier propiedad que solo puede usarse dentro de los accesores (getter o setter).</p> <p>Estar\u00e1 presente solo si utiliza la implementaci\u00f3n predeterminada de al menos uno de los accesores, o si un descriptor de acceso personalizado lo hace referencia a trav\u00e9s del identificador <code>'field'</code>. Este campo de respaldo se usa para evitar la llamada recursiva y por tanto evitar un 'StackOverflowError'.</p> <p>Kotlin proporciona autom\u00e1ticamente este campo de respaldo. Se puede hacer referencia a este campo en los accesores utilizando el identificador <code>'field'</code>:</p> <pre><code>var counter = 0 // Note: the initializer assigns the backing field directly\n    set(value) {\n        if (value &gt;= 0) field = value\n    }\n</code></pre> <p>Este campo es necesario ya que el siguiente c\u00f3digo genera un 'StackOverflowError'. Cuando Kotlin encuentra la propiedad 'selectedColor' llama al <code>'getter()'</code> correspondiente. Si usamos 'selectedColor' dentro de la definici\u00f3n del propio <code>'getter()'</code> es cuando se producen llamadas recursivas que acaban generando un desbordamiento de la pila. Kotlin provee del 'backing field' para evitarlo.</p> <pre><code>var selectedColor: Int = someDefaultValue\n        get() = selectedColor\n        set(value) {\n            this.selectedColor = value\n            doSomething()\n        }\n\n// C\u00f3digo correcto\nvar selectedColor: Int = someDefaultValue\n        get() = field\n        set(value) {\n            field = value\n            doSomething()\n        }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constantes-en-tiempo-de-compilacion","title":"Constantes en tiempo de compilaci\u00f3n","text":"<p>Las propiedades cuyo valor se conoce en el momento de la compilaci\u00f3n se pueden marcar como constantes de tiempo de compilaci\u00f3n utilizando el modificador <code>'const'</code>. Tales propiedades necesitan cumplir los siguientes requisitos:</p> <ul> <li>Top-level o miembros de un <code>'objet'</code></li> <li>Inicializado con un valor de tipo String o un tipo primitivo</li> <li>No tener un <code>'getter()'</code> propio</li> </ul> <p>Estas propiedades pueden ser utilizadas en anotaciones:</p> <pre><code>const val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#late-initialized-properties-and-variables","title":"Late-Initialized Properties and Variables","text":"<p>Normalmente, las propiedades declaradas con un tipo no nulo deben inicializarse en el constructor. Sin embargo, bastante a menudo esto no es conveniente. Por ejemplo, las propiedades se pueden inicializar mediante la inyecci\u00f3n de dependencias, o en el m\u00e9todo de configuraci\u00f3n de una prueba de unidad. En este caso, no puede proporcionar un inicializador que no sea nulo en el constructor, pero a\u00fan as\u00ed desea evitar las comprobaciones nulas al hacer referencia a la propiedad dentro del cuerpo de una clase.</p> <p>Para manejar este caso, puede marcar la propiedad con el modificador <code>'lateinit'</code>:</p> <pre><code>public class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method() // dereference directly\n    }\n}\n</code></pre> <p>Para usar este modificador hay que cumplir ciertos requisitos:</p> <ul> <li>Se puede usar \u00fanicamente en las propiedades <code>'var'</code> declaradas dentro del cuerpo de una clase. Por tanto no se puede usar en propiedades declaradas en el constructor principal.</li> <li>La propiedad no tiene un <code>'getter()'</code> o <code>'setter()'</code> personalizado.</li> </ul> <p>Acceder a una propiedad antes de que haya sido inicializada lanzar\u00e1 una 'UninitializedPropertyAccessException'.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#member-functions","title":"Member Functions","text":"<p>Una funci\u00f3n miembro es una funci\u00f3n que se define dentro de una clase, objeto o interfaz. Las funciones miembro se invocan con el operador <code>'.'</code>:</p> <pre><code>class Sample() {\n    fun foo() {\n        print(\"Foo\")\n    }\n}\n\nSample().foo() // crea una instancia de 'Sample' e invoca el m\u00e9todo 'foo'\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#herencia","title":"Herencia","text":"<p>La herencia es fundamental para la programaci\u00f3n orientada a objetos. Nos permite crear nuevas clases que reutilizan, ampl\u00edan y/o modifican el comportamiento de los preexistentes. La clase preexistente se llama superclase (o clase base), y la clase nueva que estamos creando se llama clase derivada. Una clase derivada obtendr\u00e1 impl\u00edcitamente todos los campos, propiedades y m\u00e9todos de la superclase (y de la superclase de la superclase si es el caso).</p> <p>Hay una restricci\u00f3n en cuanto a cu\u00e1ntas clases podemos heredar; en una JVM, solo puede tener una clase base. Pero se puede heredar de m\u00faltiples interfaces.</p> <p>La herencia es transitiva. Si la clase C se deriva de la clase B y esa clase B se deriva de una clase A dada, entonces la clase C es una clase derivada de A.</p> <p>Todas las clases en Kotlin tienen una superclase com\u00fan <code>'Any'</code>, que es la superclase predeterminada para una clase sin supertipos declarados. Esta clase <code>'Any'</code> tiene unos pocos m\u00e9todos b\u00e1sicos como <code>equals()</code> o <code>toString()</code>:</p> <pre><code>// Hereda de 'Any' implicitamente\nclass Example\n</code></pre> <p>Para declarar que una clase hereda de una clase base, colocamos el tipo de la clase base despu\u00e9s de dos puntos en el encabezado de la clase derivada. Por defecto en Kotlin las clases est\u00e1n cerradas a la herencia, es decir, son <code>'final'</code>. Para permitir que una clase sea heredada, hay que utilizar la palabra clave <code>'open'</code>.</p> <pre><code>open class Base(p: Int)\n\n// the derived class has a primary constructor\nclass DerivedWithConstructor(p: Int) : Base(p)\n</code></pre> <p>Si la clase derivada tiene un constructor primario, la clase base puede (y debe) inicializarse all\u00ed mismo, utilizando los par\u00e1metros del constructor primario.</p> <p>Si la clase no tiene un constructor primario, entonces cada constructor secundario tiene que inicializar el tipo base usando la palabra clave <code>'super'</code>, o delegar a otro constructor que haga eso. Tenga en cuenta que en este caso, diferentes constructores secundarios pueden llamar a diferentes constructores de la clase base:</p> <pre><code>open class Base(p: Int) {\n    constructor(p: Int, q: Int): this(p)\n}\n\nclass DerivedWithoutConstructor : Base {\n    // calling the base constructor with super()\n    constructor(p: Int) : super(p)\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#sobreescritura-de-metodos","title":"Sobreescritura de m\u00e9todos","text":"<p>Kotlin requiere anotaciones expl\u00edcitas para la sobreescritura de funciones miembro.</p> <p>Para que una funci\u00f3n pueda ser sobreescrita se utiliza la palabra clave <code>'open'</code> delante del nombre de la funci\u00f3n. Dado que las clases son finales en Kotlin, s\u00f3lo podemos utilizar la palabra clave <code>'open'</code> en funciones miembro de clases que tambi\u00e9n hayan sido definidas como <code>'open'</code>.</p> <p>Para indicar que una funci\u00f3n en la clase derivada sobreescribe una funci\u00f3n de la clase padre se utiliza la palabra clave <code>'override'</code> delante del nombre de la funci\u00f3n. De esta forma le indicamos al compilador que esta funci\u00f3n sobreescribe una funci\u00f3n de la clase padre y puede realizar las comprobaciones en tiempo de compilaci\u00f3n.</p> <p>Una funci\u00f3n con la palabra clave <code>'override'</code> tambi\u00e9n es <code>'open'</code> por definici\u00f3n y puede ser sobreescrita por las subclases sucesivas. Es posible marcar una funci\u00f3n <code>'override'</code> con la palabra clave <code>'final'</code> para evitar que sea sobreescrita.</p> <pre><code>open class Base {\n    open fun v() { ... }\n    open fun x(p: Int) { ... }\n    fun nv() { ... }\n}\n\nclass Derived: Base() {\n    override fun v() { ... }\n\n    final override fun x(p: Int) { ... } // Restringir la sobreescritura\n}\n</code></pre> <p>En Kotlin, la herencia est\u00e1 regulada por la siguiente regla: si una clase hereda varias implementaciones del mismo miembro de sus superclases inmediatas, debe invalidar este miembro y proporcionar su propia implementaci\u00f3n. Para denotar el supertipo del cual se toma la implementaci\u00f3n heredada, usamos la palaba clave <code>'super'</code> calificado por el nombre de supertipo entre par\u00e9ntesis angulares, por ejemplo, <code>super&lt;Base&gt;</code>:</p> <pre><code>open class A {\n    open fun f() { print(\"A\") }\n    fun a() { print(\"a\") }\n}\n\ninterface B {\n    fun f() { print(\"B\") } // interface members are 'open' by default\n    fun b() { print(\"b\") }\n}\n\nclass C() : A(), B {\n    // El compilador requiere que 'f()' sea sobreescrito para eliminar la ambig\u00fcedad\n    override fun f() {\n        super&lt;A&gt;.f() // call to A.f()\n        super&lt;B&gt;.f() // call to B.f()\n    }\n}\n</code></pre> <p>En la sobreescritura de m\u00e9todos con valores por defecto siempre se utilizan los mismos valores de par\u00e1metros por defecto que el m\u00e9todo base. Cuando se sobreescribe un m\u00e9todo, los valores por defecto deben omitirse de la firma:</p> <pre><code>open class A {\n    open fun foo(i: Int = 10) { ... }\n}\n\nclass B : A() {\n    override fun foo(i: Int) { ... }  // no default value allowed\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#sobreescritura-de-propiedades","title":"Sobreescritura de propiedades","text":"<p>La sobreescritura de propiedades funciona de manera similar a la sobreescritura de m\u00e9todos.</p> <p>Las propiedades declaradas en una superclase que luego se vuelven a declarar en una clase derivada deben ir precedidas por la palabra clave <code>'override'</code> y deben tener un tipo compatible. Tambi\u00e9n se puede usar la palabra clave <code>'override'</code> como parte de la declaraci\u00f3n de una propiedad en un constructor primario.</p> <p>Cada propiedad declarada puede ser sobreescrita por una propiedad con un inicializador o por una propiedad con un m\u00e9todo <code>'getter()'</code></p> <pre><code>open class Foo {\n    open val x: Int get() { ... }\n}\n\nclass Bar : Foo() {\n    override val x: Int = ...\n}\n\ninterface Foo1 {\n    val count: Int\n}\n\nclass Bar1(override val count: Int) : Foo1\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#orden-de-inicializacion","title":"Orden de inicializaci\u00f3n","text":"<p>Durante la construcci\u00f3n de una nueva instancia de una clase derivada, la inicializaci\u00f3n de la clase base se realiza como primer paso (precedida solo por la evaluaci\u00f3n de los argumentos para el constructor de la clase base) y, por lo tanto, ocurre antes de que se ejecute la l\u00f3gica de inicializaci\u00f3n de la clase derivada.</p> <p>Por lo tanto, durante la inicializaci\u00f3n de las propiedades de la clase base las propiedades de la clase derivada a\u00fan no se han inicializado. Si alguna de esas propiedades se utilizan (de forma directa o indirecta) en la inicializaci\u00f3n de la clase base se pueden producir comportamientos extra\u00f1os o errores en tiempo de ejecuci\u00f3n.</p> <pre><code>open class Base(val name: String) {\n    init {\n        println(\"Initializing Base\")\n    }\n\n    open val size: Int =\n            name.length.also { println(\"Initializing size in Base: $it\") }\n}\n\nclass Derived(name: String, val lastName: String) : Base(name.capitalize().also { println(\"Argument for Base: $it\") }) {\n    init {\n        println(\"Initializing Derived\")\n    }\n\n    override val size: Int =\n            (super.size + lastName.length).also { println(\"Initializing size in Derived: $it\") }\n}\n\n// Argument for Base: Hello\n// Initializing Base\n// Initializing size in Base: 5\n// Initializing Derived\n// Initializing size in Derived: 10\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#invocar-la-implementacion-de-la-superclase","title":"Invocar la implementaci\u00f3n de la superclase","text":"<p>El c\u00f3digo en una clase derivada puede llamar a funciones en la superclase e implementaciones de accesores de propiedades usando la palabra clave <code>'super'</code>:</p> <pre><code>open class Foo {\n    open fun f() { println(\"Foo.f()\") }\n    open val x: Int get() = 1\n}\n\nclass Bar : Foo() {\n    override fun f() {\n        super.f()  // Calling the super function  \n        println(\"Bar.f()\")\n    }\n    override val x: Int get() = super.x + 1\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#clases-abstractas","title":"Clases abstractas","text":"<p>Kotlin admite clases abstractas al igual que Java. Una clase abstracta es una clase con m\u00e9todos marcados como abstractos y que por tanto no puede ser instanciada. Si una clase tiene uno o varios m\u00e9todos abstractos es una clase abstracta y se indica con la palabra clave <code>'abstract'</code>.</p> <p>La subclase concreta de una clase abstracta deber\u00e1 implementar todos los m\u00e9todos y propiedades definidos en la clase abstracta; de lo contrario, tambi\u00e9n ser\u00e1 considerada como una clase abstracta.</p> <pre><code>open class Person {\n    open fun fullName(): String { ... }\n}\n\nabstract class Employee (val firstName: String, val lastName: String): Person() {\n    // Variable de intancia en una clase abstracta\n    val propFoo: String = \"bla bla\"\n\n    abstract fun earnings(): Double\n\n    // Podemos tener m\u00e9todos con implementaci\u00f3n por defecto\n    override fun fullName(): String {\n        return lastName + \" \" + firstName;\n    }\n}\n</code></pre> <p>Las clases abstractas pueden contener m\u00e9todos con implementaci\u00f3n por defecto como cualquier otra clase. Las subclases de la clase abstracta pueden sobreescribir la implementaci\u00f3n predeterminada de un m\u00e9todo pero solo si el m\u00e9todo tiene el modificador <code>'open'</code>. Los m\u00e9todos marcados como <code>'abstract'</code> tambi\u00e9n son <code>'open'</code> por defecto. Las clases abstractas tambi\u00e9n pueden definir variables de instancia al contrario que pasa con las interfaces.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#interfaces","title":"Interfaces","text":"<p>Las interfaces en Kotlin son muy similares a Java 8. Pueden contener declaraciones de m\u00e9todos abstractos, as\u00ed como implementaciones de m\u00e9todos. Lo que los diferencia de las clases abstractas es que las interfaces no pueden almacenar el estado, es decir, no pueden tener variables de instancia. Pueden tener propiedades, pero estas deben ser abstractas o proporcionar implementaciones de accesores.</p> <p>Una interfaz se define usando la palabra clave <code>'interface'</code>. Un m\u00e9todo en una interfaz es abstracto por defecto si no se proporciona una implementaci\u00f3n.</p> <pre><code>interface MyInterface {\n    fun bar()  // abstract by default\n    fun foo() {\n        // optional body\n    }\n}\n</code></pre> <p>Una clase u objeto pueden implementar una o varias interfaces:</p> <pre><code>class Child : MyInterface {\n    override fun bar() {\n        // body\n    }\n}\n</code></pre> <p>En una interfaz se pueden declarar propiedades. Una propiedad declarada en una interfaz puede ser abstracta o puede proporcionar implementaciones para el <code>'getter()'</code> o <code>'setter()'</code>. Las propiedades declaradas en interfaces no pueden tener 'backing fields' y, por lo tanto, los accesores declarados en interfaces no pueden hacer referencia a ellos.</p> <pre><code>interface MyInterface {\n    val prop: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = \"foo\"\n\n    fun foo() {\n        print(prop)\n    }\n}\n\nclass Child : MyInterface {\n    override val prop: Int = 29\n}\n</code></pre> <p>Una interfaz puede derivar de otras interfaces y, por lo tanto, proporcionar implementaciones para sus miembros y declarar nuevas funciones y propiedades. Naturalmente, las clases que implementen dicha interfaz solo tienen que definir las implementaciones que faltan:</p> <pre><code>interface Named {\n    val name: String\n}\n\ninterface Person : Named {\n    val firstName: String\n    val lastName: String\n    override val name: String get() = \"$firstName $lastName\"\n}\n\ndata class Employee(\n    // implementing 'name' is not required\n    override val firstName: String,\n    override val lastName: String,\n    val position: Position\n) : Person\n</code></pre> <p>En el caso de clases que hereden de varias interfaces, para evitar ambig\u00fcedades la subclase deber\u00e1 proporcionar implementaciones tanto para m\u00e9todos que tienen una implementaci\u00f3n en una de las interfaces como en m\u00e9todos que tiene implementaciones en varias interfaces.</p> <pre><code>interface A {\n    fun foo() { print(\"A\") }\n    fun bar()  // abstract\n}\n\ninterface B {\n    fun foo() { print(\"B\") }\n    fun bar() { print(\"bar\") }\n}\n\nclass C : A {\n    override fun bar() { print(\"bar\") }\n}\n\n// la clase 'D' tieen que implementar tanto foo() como bar()\nclass D : A, B {\n    override fun foo() {\n        super&lt;A&gt;.foo()\n        super&lt;B&gt;.foo()\n    }\n\n    override fun bar() {\n        super&lt;B&gt;.bar()\n    }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#visibilidad","title":"Visibilidad","text":"<p>Las clases, objetos, interfaces, constructores, funciones, propiedades y sus 'setters' pueden tener modificadores de visibilidad. (Los 'setters' siempre tienen la misma visibilidad que la propiedad).</p> <ul> <li>Public - Este es el valor predeterminado, y se puede acceder a cualquier clase, funci\u00f3n, propiedad, interfaz u objeto que tenga este modificador desde cualquier lugar.</li> <li>Private - Se puede acceder a una funci\u00f3n, interfaz o clase de nivel superior que se declara como privada solo dentro del mismo archivo.</li> </ul> <p>Cualquier funci\u00f3n o propiedad que se declare privada dentro de una clase, objeto o interfaz solo puede ser visible para otros miembros de esa misma clase, objeto o interfaz.</p> <p>Un constructor privado debe usar la palabra clave <code>'constructor'</code>. Si un constructor es marcado como privado no se puede instanciar un objeto con ese constructor.</p> <pre><code>class Car private constructor(val name: String, val plateNo: String) {\n    // ....\n}\n</code></pre> <ul> <li>Protected - Solo se puede aplicar a propiedades o funciones dentro de una clase, objeto o interfaz, no se puede aplicar a funciones, clases o interfaces de nivel superior. Las propiedades o funciones con este modificador solo son accesibles dentro de la clase que lo define y cualquier subclase.</li> <li>Internal - En un proyecto que tiene un m\u00f3dulo (m\u00f3dulo Gradle o Maven), una clase, objeto, interfaz o funci\u00f3n especificada con este modificador dentro de ese m\u00f3dulo solo es accesible desde ese m\u00f3dulo.</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#data-classes","title":"Data classes","text":"<p>Las Data classes son una forma concisa de crear clases que solo contienen datos. Estas clases se definen con la palabra clave <code>'data'</code>.</p> <pre><code>data class User(val name: String, val age: Int)\n</code></pre> <p>De forma autom\u00e1tica el compilador crear los m\u00e9todos <code>hashCode()</code>, <code>equals()</code>, <code>copy()</code> y <code>toString()</code> a partir de todas las propiedades declaradas en el constructor primario. Tambi\u00e9n se generan las funciones <code>componentN()</code> que corresponden a las propiedades declaradas en orden en el constructor primario.</p> <p>Para evitar comportamientos extra\u00f1os estas clases deben cumplir ciertos requisitos:</p> <ul> <li>El constructor primario necesita tener al menos un par\u00e1metro.</li> <li>Todos los par\u00e1metros del constructor primario estar\u00e1n marcados como <code>'val'</code> o <code>'var'</code>.</li> <li>Una 'data class' no puede ser <code>'abstract'</code>, <code>'open'</code>, <code>'sealed'</code> o <code>'inner'</code>.</li> <li>(Antes de 1.1) Las 'data classes' no pueden extender de otras clases (pero pueden implementar interfaces).</li> </ul> <p>El compilador s\u00f3lo tiene en cuenta las propiedades declaradas en el constructor primario a la hora de generar los m\u00e9todos de forma autom\u00e1tica. Por tanto, para excluir propiedades se deben declarar en el cuerpo de la clase.</p> <pre><code>data class DataClassExample(val x: Int, val y: Int, val z: Int) {\n    // Propiedad excluida\n    var xx; Int = 0\n}\n\nval fooData = DataClassExample(1, 2, 4)\nval fooCopy = fooData.copy(y = 100)\n\n// El formato de 'toString()' es el mismo 'ClassName(prop=xx, prop=yy, ....)'\nprintln(fooData) // =&gt; DataClassExample(x=1, y=2, z=4)\nprintln(fooCopy) // =&gt; DataClassExample(x=1, y=100, z=4)\n</code></pre> <p>El compilador genera la funci\u00f3n <code>copy()</code> que permite copiar un objeto y en caso necesario, crear la copia alterando algunas de sus propiedades y manteniendo el resto.</p> <pre><code>data class User(val name: String, val age: Int)\n\n// Funci\u00f3n 'copy()' generada autom\u00e1ticamente\n// fun copy(name: String = this.name, age: Int = this.age) = User(name, age)\n\nval jack = User(name = \"Jack\", age = 1)\n\n// Copiamos el objeto pero modificando la propiedad 'age'\nval olderJack = jack.copy(age = 2)\n</code></pre> <p>Las funciones <code>componentN()</code> permite desestructurar las propiedades:</p> <pre><code>val jane = User(\"Jane\", 35)\nval (name, age) = jane\nprintln(\"$name, $age years of age\") // =&gt; Jane, 35 years of age\n</code></pre> <p>Cada tipo se deriva de <code>'Any'</code>, que viene con una declaraci\u00f3n de m\u00e9todo <code>'hashCode()'</code>. Esto es el equivalente de un m\u00e9todo <code>'hashCode()'</code> de clase 'Object' de Java. Este m\u00e9todo es importante cuando se insertan instancias del objeto en colecciones, como un mapa. Al implementar este m\u00e9todo, se debe cumplir con una serie de requisitos:</p> <ol> <li>Cuando se invoque en el mismo objeto m\u00e1s de una vez durante el tiempo de ejecuci\u00f3n, el m\u00e9todo <code>'hashCode()'</code> debe devolver constantemente el mismo valor, dado que el objeto no se modific\u00f3.</li> <li>Si para dos objetos el m\u00e9todo <code>'equals()'</code>  devuelve true, entonces llamar al m\u00e9todo <code>'hashCode()'</code> en cada uno de ellos deber\u00eda devolver el mismo valor entero.</li> <li>Si dos objetos no son iguales, es decir, que el m\u00e9todo <code>'equals()'</code> devuelve false cuando se comparan, no es un requisito que cada m\u00e9todo <code>'hashCode()'</code> del objeto devuelva valores distintos. Sin embargo, producir un entero distinto para objetos desiguales podr\u00eda mejorar el rendimiento de las colecciones basadas en 'hash'.</li> </ol> <p>Las 'data classes' son un forma compacta y legible de devolver dos o m\u00e1s valores de una funci\u00f3n. Otra alternativa, menos legible, es utilizar el tipo <code>'Pair'</code> o <code>'Triple'</code> proporcionado por Kotlin:</p> <pre><code>data class Result(val result: Int, val status: Boolean)\n\nfun checkStatus() = Result(10, true)  // funci\u00f3n que retorna un tipo 'Result'\n\nval (result, status) = checkStatus() // usamos la desestructuraci\u00f3n de datos para acceder a los datos\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#sealed-classes","title":"Sealed classes","text":"<p>En Kotlin una 'sealed class' es una clase abstracta (no se puede crear instancias) que otras clases pueden extender. Estas subclases se definen dentro del cuerpo de la 'sealed class', en el mismo archivo por lo que podemos conocer todas las subclases posibles simplemente viendo el archivo.</p> <p>Las 'sealed class' se utilizan para representar jerarqu\u00edas de clases restringidas, de forma que una clase solo pueda heredar de un conjunto limidado de tipos. Son, en cierto sentido, una extensi\u00f3n de las clases de enumeraci\u00f3n.</p> <ul> <li>Podemos agregar el modificador <code>'abstract'</code>, pero esto es redundante porque estas clases son abstractas por defecto.</li> <li>No pueden tener el modificador <code>'open'</code> ni <code>'final'</code>.</li> <li>Podemos declarar clases de datos y objetos como subclases a una 'sealed class' (a\u00fan deben declararse en el mismo archivo).</li> <li>No pueden tener constructores p\u00fablicos ya que sus constructores son privados de forma predeterminada.</li> </ul> <pre><code>// shape.kt\n\nsealed class Shape\n\nclass Circle : Shape()\nclass Triangle : Shape()\nclass Rectangle: Shape()\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#generics","title":"Generics","text":"<p>'Covariance' y 'contravariance' son t\u00e9rminos que hacen referencia a la capacidad de usar un tipo m\u00e1s derivado (m\u00e1s espec\u00edfico) o menos derivado (menos espec\u00edfico) que el indicado originalmente. Los par\u00e1metros de tipo gen\u00e9rico admiten estos t\u00e9rminos para proporcionar mayor flexibilidad a la hora de asignar y usar tipos gen\u00e9ricos. Cuando se hace referencia a un sistema de tipos, se definen como:</p> <ul> <li>'Covariance' -&gt; Permite usar un tipo m\u00e1s derivado que el especificado originalmente. Puede asignar una instancia de <code>Class&lt;Derived&gt;</code> a una variable de tipo <code>Class&lt;Base&gt;</code>.</li> <li>'Contravariance' -&gt; Permite usar un tipo m\u00e1s gen\u00e9rico (menos derivado) que el especificado originalmente. Puede asignar una instancia de <code>Class&lt;Base&gt;</code> a una variable de tipo <code>Class&lt;Derived&gt;</code>.</li> <li>'Invariance' -&gt; Significa que solo se puede usar el tipo especificado originalmente. As\u00ed, un par\u00e1metro de tipo gen\u00e9rico invariable no es covariante ni contravariante. No se puede asignar una instancia de <code>List&lt;Base&gt;</code> a una variable de tipo <code>List&lt;Derived&gt;</code> o viceversa.</li> </ul> <p>Al igual que en Java, en Kotlin las clases pueden tener tipos con par\u00e1metros.</p> <pre><code>class Box&lt;T&gt;(t: T) {\n    var value = t\n}\n</code></pre> <p>En general, para crear una instancia de una clase gen\u00e9rica tenemos que proveer el tipo a la clase:</p> <pre><code>val box: Box&lt;Int&gt; = Box&lt;Int&gt;(1)\n</code></pre> <p>Si los par\u00e1metros se pueden inferir, como por ejemplo de los argumentos del constructor o por alg\u00fan otro medio, se pueden omitir los argumentos de tipo:</p> <pre><code>val box = Box(1) // '1' tiene tipo Int as\u00ed que el compilador infiere el tipo \"Box&lt;Int&gt;\"\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#la-palabra-clave-out","title":"La palabra clave 'out'","text":"<p>Digamos que queremos crear una clase de productor que producir\u00e1 un resultado de alg\u00fan tipo 'T'. A veces; queremos asignar ese valor producido a una referencia que es de un supertipo del tipo 'T'.</p> <p>Para lograr eso usando Kotlin, necesitamos usar la palabra clave <code>'out'</code> en el tipo gen\u00e9rico. Esto significa que podemos asignar esta referencia a cualquiera de sus supertipos. El valor de salida solo puede ser producido por la clase dada pero no consumido:</p> <pre><code>class ParameterizedProducer&lt;out T&gt;(private val value: T) {\n    fun get(): T {\n        return value\n    }\n}\n\nval a = ParameterizedProducer(\"string\") // ParameterizedProducer&lt;String&gt;\nval x: ParameterizedProducer&lt;Any&gt; = a // Correcto\n\nval b = ParameterizedProducer(10) // ParameterizedProducer&lt;Int&gt;\nval y: ParameterizedProducer&lt;Number&gt; = b // Correcto\nval z: ParameterizedProducer&lt;String&gt; = b // \u00a1Error de compilaci\u00f3n!\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#la-palabra-clave-in","title":"La palabra clave 'in'","text":"<p>A veces, tenemos una situaci\u00f3n opuesta, lo que significa que tenemos una referencia de tipo T y queremos poder asignarla al subtipo de T.</p> <p>Podemos usar la palabra clave <code>'in'</code> en el tipo gen\u00e9rico si queremos asignarlo a la referencia de su subtipo. La palabra clave <code>'in'</code> solo se puede utilizar en el tipo de par\u00e1metro que se consume, no se produce:</p> <pre><code>class ParameterizedConsumer&lt;in T&gt; {\n    fun toString(value: T): String {  // 'toString()' will only be consuming a value of type T.\n        return value.toString()\n    }\n}\n\nval a = ParameterizedConsumer&lt;Number&gt;()\n\nval b: ParameterizedConsumer&lt;Double&gt; = a // Correcto\nval c: ParameterizedConsumer&lt;Int&gt; = a // Correcto\nval d: ParameterizedConsumer&lt;String&gt; = a // \u00a1Error de compilaci\u00f3n!\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#star-projections","title":"Star projections","text":"<p>Hay situaciones en las que no es importante el tipo espec\u00edfico de un valor. Para ello usamos el operador <code>'*'</code> o 'star projection':</p> <pre><code>fun printArray(array: Array&lt;*&gt;) {\n    array.forEach { println(it) }\n}\n\n// Podemos pasar una matriz de cualquier tipo al m\u00e9todo 'printArray()'\nprintArray(arrayOf(1,2,3))\n\nprintArray(arrayOf(\"hello\", \"World!!\", 5))\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#generic-functions","title":"Generic functions","text":"<p>Las funciones tambi\u00e9n pueden ser gen\u00e9ricas en los tipos que utilizan. Esto permite escribir una funci\u00f3n que puede funcionar con cualquier tipo, en lugar de solo un tipo espec\u00edfico. Para ello, definimos los par\u00e1metros de tipo en la firma de funci\u00f3n.</p> <pre><code>fun &lt;T&gt; choose(t1: T, t2: T, t3: T): T {\n    return when (Random().nextInt(3)) {\n        0 -&gt; t1\n        1 -&gt; t2\n        else -&gt; t3\n    }\n}\n\n// Podemos usar esta funci\u00f3n con enteros. Si el compilador puede inferir el tipo se puede omitir.\nval r = choose&lt;Int&gt;(5, 7, 9)\nval r = choose(5, 7, 9)\n\n// Tambi\u00e9n es v\u00e1lido usar la funci\u00f3n con Strings\nval s = choose&lt;String&gt;(\"BMW\", \"Audi\", \"Ford\")\nval s = choose(\"BMW\", \"Audi\", \"Ford\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#generic-constraints","title":"Generic constraints","text":"<p>El conjunto de todos los tipos posibles que pueden sustituirse por un par\u00e1metro de tipo dado puede estar restringido por restricciones gen\u00e9ricas.</p> <p>El tipo m\u00e1s com\u00fan de restricci\u00f3n es un l\u00edmite superior que corresponde a la palabra clave de extensi\u00f3n de Java:</p> <pre><code>fun &lt;T : Comparable&lt;T&gt;&gt; sort(list: List&lt;T&gt;) {  ... }\n\nsort(listOf(1, 2, 3)) // OK. Int is a subtype of Comparable&lt;Int&gt;\nsort(listOf(HashMap&lt;Int, String&gt;())) // Error: HashMap&lt;Int, String&gt; is not a subtype of Comparable&lt;HashMap&lt;Int, String&gt;&gt;\n</code></pre> <p>El l\u00edmite superior predeterminado (si no se especifica) es <code>'Any?'</code>.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#nested-classes","title":"Nested classes","text":"<p>Al igual que las funciones, Kotlin permite las clases internas, es decir, clases definidas dentro de otra clase. Son equivalentes a las clases internas est\u00e1ticas en Java.</p> <pre><code>class OuterClass {\n\n    class NestedClass {\n        fun nestedClassFunc() { }\n    }\n}\n\nval nestedClass = OuterClass.NestedClass().nestedClassFunc()\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#inner-class","title":"Inner class","text":"<p>Las clases internas, por otro lado, pueden hacer referencia a la clase externa en la que se declar\u00f3. Para crear una clase interna, colocamos la palabra clave <code>'inner'</code> antes de la palabra clave <code>'class'</code>.</p> <pre><code>class OuterClass() {\n    val oCPropt: String = \"Yo\"\n\n    inner class InnerClass {\n        fun innerClassFunc() {\n            val outerClass = this@OuterClass\n            print(outerClass.oCPropt)\n        }\n    }\n}\nval demo = OuterClass().InnerClass().innerClassFunc() // =&gt; yo\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#enumeraciones","title":"Enumeraciones","text":"<p>Las clases de enumeraci\u00f3n son similares a los tipos 'enum' de Java. El uso m\u00e1s b\u00e1sico de las clases de enumeraci\u00f3n es la implementaci\u00f3n de enumeraciones de tipos seguros. Cada constante de la enumeraci\u00f3n es un objeto. Las constantes de la enumeraci\u00f3n est\u00e1n separadas por comas.</p> <pre><code>enum class Country {\n    Spain, France, Portugal\n}\n</code></pre> <p>Las enumeraciones pueden tener constructor:</p> <pre><code>enum class Direction(val angle: Int) {\n    North(90), West(180), South(270), East(0)\n}\n</code></pre> <p>En Kotlin las constantes de la enumeraci\u00f3n pueden declarar sus propias clases an\u00f3nimas con sus m\u00e9todos correspondientes, as\u00ed como sobreescribir m\u00e9todos primarios.</p> <p>Si la enumeraci\u00f3n define alg\u00fan miembro, debe separar las definiciones de constantes de enumeraci\u00f3n de las definiciones de miembros con un punto y coma, al igual que en Java.</p> <pre><code>enum class ProtocolState {\n    WAITING {\n        override fun signal() = TALKING\n    },\n\n    TALKING {\n        override fun signal() = WAITING\n    };\n\n    abstract fun signal(): ProtocolState\n}\n</code></pre> <p>En Kotlin las enumeraciones disponen de forma predeterminada de los m\u00e9todos:</p> <ul> <li><code>EnumClass.valueOf(value: String): EnumClass</code> -&gt; Devuelve la constante de enumeraci\u00f3n por su nombre. Lanza un 'IllegalArgumentException' si no existe la constante.</li> <li><code>EnumClass.values(): Array&lt;EnumClass&gt;</code> -&gt; Retorna un array con las constantes de enumeraci\u00f3n.</li> </ul> <p>Adem\u00e1s de los m\u00e9todos las instancias de enumeraci\u00f3n vienen con dos propiedades predefinidas. Uno es <code>'name'</code> de tipo 'String' y el segundo es <code>'ordinal'</code> de tipo 'Int' para obtener la posici\u00f3n de la constante dentro de la enumeraci\u00f3n, teniendo en cuenta que empiezan por 0:</p> <pre><code>enum class Country {\n    Spain, France, Portugal\n}\n\nprintln(Country.Spain) // =&gt; Spain\nprintln(Country.valueOf(\"Spain\")) // =&gt; Spain\n\nprintln(Country.Portugal.name) // =&gt; Portugal\nprintln(Country.France.ordinal) // =&gt; 1\n\nfun countries() {\n    for (country in Country.values()) {\n        println(\"Country: $country\")\n    }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#objects","title":"Objects","text":"<p>Los objetos son muy similares a las clases. A veces necesitamos crear un objeto con una ligera modificaci\u00f3n de alguna clase, sin declarar expl\u00edcitamente una nueva subclase para ello. Java maneja este caso con clases internas an\u00f3nimas. Kotlin generaliza ligeramente este concepto con 'object expressions' y 'objects declarations'.</p> <p>Estas son algunas de las caracter\u00edsticas de los objetos en Kotlin:</p> <ul> <li>Pueden tener propiedades, m\u00e9todos y un bloque init.</li> <li>Estas propiedades o m\u00e9todos pueden tener modificadores de visibilidad.</li> <li>No pueden tener constructores (primarios o secundarios).</li> <li>Pueden extender otras clases o implementar una interfaz.</li> </ul> <p>Hay importantes diferencias sem\u00e1nticas entre un 'object expression' y un 'object declaration'</p> <ul> <li>Los 'object expression' se ejecutan (y se inicializan) inmediatamente, donde se usan.</li> <li>Los 'object declaration' se inicializan cuando se accede por primera vez.</li> <li>Por su parte, un 'companion object' se inicializa cuando se cargala clase correspondiente.</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#objects-expressions","title":"Objects expressions","text":"<p>Para crear un objeto de una clase an\u00f3nima que hereda de alg\u00fan tipo (o tipos), escribimos:</p> <pre><code>fun countClicks(window: JComponent) {\n    var clickCount = 0\n    var enterCount = 0\n\n    window.addMouseListener(object : MouseAdapter() {\n        override fun mouseClicked(e: MouseEvent) {\n            clickCount++\n        }\n\n        override fun mouseEntered(e: MouseEvent) {\n            enterCount++\n        }\n    })\n    // ...\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#objects-declarations","title":"Objects declarations","text":"<p>Colocamos la palabra clave <code>'object'</code> antes del nombre del objeto que queremos crear. De hecho, estamos creando un SINGLETON cuando creamos objetos en Kotlin usando esta construcci\u00f3n ya que solo existe una instancia de un objeto.</p> <pre><code>object ObjectExample {\n    val baseUrl: String = \"http://www.myapi.com/\"\n    fun hello(): String {\n        return \"Hello\"\n    }\n}\n\nprintln(ObjectExample.hello()) // =&gt; Hello\n\nfun useObject() {\n    ObjectExample.hello() // =&gt; Hello\n    val someRef: Any = ObjectExample // Usamos el nombre de los objetos tal como son\n}\n</code></pre> <p>Al igual que una declaraci\u00f3n de variable, una declaraci\u00f3n de objeto no es una expresi\u00f3n y no se puede utilizar en el lado derecho de una declaraci\u00f3n de asignaci\u00f3n.</p> <p>Los objetos en Kotlin pueden utilizarse tambi\u00e9n para crear constantes.</p> <pre><code>object APIConstants {\n    val baseUrl: String = \"http://www.myapi.com/\"\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#companion-objects","title":"Companion objects","text":"<p>Los 'companion objects' son un tipo de 'object declaration'. Como Kotlin no admite clases, m\u00e9todos o propiedades est\u00e1ticas como las que tenemos en Java, Kotlin provee los 'companion objects'. Estos objetos son b\u00e1sicamente un objeto que pertenece a una clase que se conoce como la clase complementaria del objeto. Este objeto se indica con la palabra clave <code>'companion'</code>.</p> <p>Similar a los m\u00e9todos est\u00e1ticos en Java, un 'companion object' no est\u00e1 asociado con una instancia de clase, sino con la propia clase.</p> <p>Se puede llamar a los miembros del 'companion object' usando simplemente el nombre de la clase como el calificador, como si fuera un m\u00e9todo est\u00e1tico.</p> <p>Un 'companion object' puede tener nombre que facilitar\u00e1 el ser invocado desde Java aunque es opcional.</p> <pre><code>class Person private constructor(var firstName: String, var lastName: String) {\n\n    // Podemos omitir el nombre del objeto\n    companion object {\n        var count: Int = 0\n        fun create(firstName: String, lastName: String): Person = Person(firstName, lastName)\n\n        // Podemos tener bloques 'init' dentro de un 'companion object'\n        init {\n            println(\"Person companion object created\")\n        }\n    }\n}\nval person = Person.create(\"John\", \"Doe\")\n\nclass MyClass {\n\n    fun sayHello() = println(\"hello\")\n\n    // Objeto con el nombre 'Factory' y que utilizaremos como 'Factory Pattern'\n    companion object Factory {\n        fun create(): MyClass = MyClass()\n\n        fun sayHelloFromCompanion() = MyClass().sayHello() // Podemos acceder a miembros de la clase\n    }\n}\n\nval myClass = MyClass.create()\nMyClass().sayHello() // incorrecto\nMyClass.Factory.sayHelloFromCompanion() // Invocar un m\u00e9todo del 'companion'\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/","title":"Apuntes de [Kotlin]","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#summary","title":"Summary","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#basics","title":"Basics","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#package-definition-and-imports","title":"Package definition and imports","text":"<p>Package specification should be at the top of the source file:</p> <pre><code>package my.demo\n\nimport kotlin.text.*\n\n// ...\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#entry-point","title":"Entry point","text":"<p>An entry point of a Kotlin application is the <code>main()</code> function:</p> <pre><code>fun main(args: Array&lt;String&gt;) {\n    println(\"Hello, World\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#comments","title":"Comments","text":"<p>Just like most modern languages, Kotlin supports single-line (or end-of-line) and multi-line (block) comments:</p> <pre><code>// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#declaring-variables","title":"Declaring variables","text":"<p>Read-only local variables are defined using the keyword <code>val</code>. They can be assigned a value only once:</p> <pre><code>val a: Int = 1  // immediate assignment\nval b = 2   // `Int` type is inferred\nval c: Int  // Type required when no initializer is provided\nc = 3       // deferred assignment\n</code></pre> <p>Variables that can be reassigned use the <code>var</code> keyword:</p> <pre><code>var x = 5 // `Int` type is inferred\nx += 1\n</code></pre> <p>Top-level variables:</p> <pre><code>val PI = 3.14\nvar x = 0\n\nfun incrementX() {\n    x += 1\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#nullable-values-and-null-checks","title":"Nullable values and null checks","text":"<p>A reference must be explicitly marked as nullable when <code>null</code> value is possible.</p> <pre><code>var name: String? = null\n\nval length: Int\nlength = name?.length ?: 0      // length, or 0 if name is null\nlength = name?.length ?: return     // length, or return when name is null\nlength = name?.length ?: throw Error()      // length, or throw error when name is null\n</code></pre> <p>Return <code>null</code> if <code>str</code> does not hold an integer:</p> <pre><code>fun parseInt(str: String): Int? {\n    // ...\n}\n</code></pre> <p>Use a function returning nullable value:</p> <pre><code>fun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n\n    // Using `x * y` yields error because they may hold nulls.\n    if (x != null &amp;&amp; y != null) {\n        // x and y are automatically cast to non-nullable after null check\n        println(x * y)\n    }\n    else {\n        println(\"'$arg1' or '$arg2' is not a number\")\n    }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#string-templates","title":"String templates","text":"<pre><code>var a = 1\n// simple name in template:\nval s1 = \"a is $a\"\n\na = 2\n// arbitrary expression in template:\nval s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#control-flow","title":"Control Flow","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#if-as-an-expression","title":"'If' as an expression","text":"<p>In Kotlin, <code>if</code> can also be used as an expression:</p> <pre><code>fun bigger(a: Int, b: Int) = if (a &gt; b) a else b\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#for-loop","title":"'For' loop","text":"<pre><code>val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\nfor (item in items) {\n    println(item)\n}\n</code></pre> <pre><code>val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\nfor (index in items.indices) {\n    println(\"item at $index is ${items[index]}\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#while-loop","title":"'While' loop","text":"<pre><code>val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\nvar index = 0\nwhile (index &lt; items.size) {\n    println(\"item at $index is ${items[index]}\")\n    index++\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#when-expression","title":"'When' expression","text":"<pre><code>fun numberTypeName(x: Number) = when(x) {\n    0 -&gt; \"Zero\" // Equality check\n    in 1..4 -&gt; \"Four or less\" // Range check\n    5, 6, 7 -&gt; \"Five to seven\" // Multiple values\n    is Byte -&gt; \"Byte\" // Type check\n    else -&gt; \"Some number\"\n}\n</code></pre> <pre><code>fun describe(obj: Any): String =\n    when (obj) {\n        1          -&gt; \"One\"\n        \"Hello\"    -&gt; \"Greeting\"\n        is Long    -&gt; \"Long\"\n        !is String -&gt; \"Not a string\"\n        else       -&gt; \"Unknown\"\n    }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#when-expression-with-predicates","title":"'When' expression with predicates","text":"<pre><code>fun signAsString(x: Int)= when {\n    x &lt; 0 -&gt; \"Negative\"\n    x == 0 -&gt; \"Zero\"\n    else -&gt; \"Positive\"\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#functions","title":"Functions","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#declaring-function","title":"Declaring function","text":"<p>Function having two <code>Int</code> parameters with <code>Int</code> return type:</p> <pre><code>fun sum(a: Int, b: Int): Int {\n    return a + b\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#single-expression-function","title":"Single-expression function","text":"<p>Function with an expression body and inferred return type:</p> <pre><code>fun sum(a: Int, b: Int) = a + b\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#return-unit","title":"Return 'Unit'","text":"<p>Function returning no meaningful value:</p> <pre><code>fun printSum(a: Int, b: Int): Unit {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n</code></pre> <p><code>Unit</code> return type can be omitted:</p> <pre><code>fun printSum(a: Int, b: Int) {\n    println(\"sum of $a and $b is ${a + b}\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#function-types","title":"Function types","text":"<p><code>() -&gt; Unit</code> - takes no arguments and returns nothing (Unit). <code>(Int, Int) -&gt; Int</code> - takes two arguments of type Int and returns Int. <code>(() -&gt; Unit) -&gt; Int</code> - takes another function and returns Int. <code>(Int) -&gt; () -&gt; Unit</code> - takes argument of type Int and returns function.</p>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#function-literals","title":"Function literals","text":"<pre><code>// Simple lambda expression\nval add: (Int, Int) -&gt; Int = { i, j -&gt; i + j }\n\nval printAndDouble: (Int) -&gt; Int = {\n    println(it)\n    // When single parameter, we can reference it using `it`\n    it * 2 // In lambda, last expression is returned\n}\n\n// Anonymous function alternative\nval printAndDoubleFun: (Int) -&gt; Int = fun(i: Int): Int {\n    println(i) // Single argument can\u2019t be referenced by `it`\n    return i * 2 // Needs return like any function\n}\n\nval i = printAndDouble(10) // 10\nprint(i) // 20\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#extension-functions","title":"Extension functions","text":"<pre><code>fun Int.isEven() = this % 2 == 0\nprint(2.isEven()) // true\n\nfun List&lt;Int&gt;.average() = 1.0 * sum() / size\nprint(listOf(1, 2, 3, 4).average()) // 2.5\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#classes","title":"Classes","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#primary-constructor","title":"Primary constructor","text":"<pre><code>// val declares a read-only property, var a mutable one\nclass Person(val name: String, var age: Int)\n// name is read-only, age is mutable\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#inheritance","title":"Inheritance","text":"<pre><code>open class Person(val name: String) {\n    open fun hello() = \"Hello, I am $name\"\n    // Final by default so we need open\n}\n\nclass PolishPerson(name: String) : Person(name) {\n    override fun hello() = \"Dzie\u0144 dobry, jestem $name\"\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#properties-with-accessors","title":"Properties with accessors","text":"<pre><code>class Person(var name: String, var surname: String) {\n    var fullName: String\n    get() = \"$name $surname\"\n    set(value) {\n        val (first, rest) = value.split(\" \", limit = 2)\n        name = first\n        surname = rest\n    }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#data-classes","title":"Data classes","text":"<pre><code>data class Person(val name: String, var age: Int)\nval mike = Person(\"Mike\", 23)\n\n// Modifier data adds:\n// 1. toString that displays all primary constructor properties\nprint(mike.toString()) // Person(name=Mike, age=23)\n\n// 2. equals that compares all primary constructor properties\nprint(mike == Person(\"Mike\", 23)) // True\nprint(mike == Person(\"Mike\", 21)) // False\n\n// 3. hashCode that is based on all primary constructor properties\nval hash = mike.hashCode()\nprint(hash == Person(\"Mike\", 23).hashCode()) // True\nprint(hash == Person(\"Mike\", 21).hashCode()) // False\n\n// 4. component1, component2 etc. that allows deconstruction\nval (name, age) = mike\nprint(\"$name $age\") // Mike 23\n\n// 5. copy that returns copy of object with concrete properties changed\nval jake = mike.copy(name = \"Jake\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#collection-literals","title":"Collection Literals","text":"<pre><code>listOf(1,2,3,4) // List&lt;Int&gt;\nmutableListOf(1,2,3,4) // MutableList&lt;Int&gt;\n\nsetOf(\"A\", \"B\", \"C\") // Set&lt;String&gt;\nmutableSetOf(\"A\", \"B\", \"C\") // MutableSet&lt;String&gt;\n\narrayOf('a', 'b', 'c') // Array&lt;Char&gt;\n\nmapOf(1 to \"A\", 2 to \"B\") // Map&lt;Int, String&gt;\nmutableMapOf(1 to \"A\", 2 to \"B\")\n// MutableMap&lt;Int, String&gt;\n\nsequenceOf(4,3,2,1) // Sequence&lt;Int&gt;\n\n1 to \"A\" // Pair&lt;Int, String&gt;\n\nList(4) { it * 2 } // List&lt;Int&gt;\ngenerateSequence(4) { it + 2 } // Sequence&lt;Int&gt;\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#collection-processing","title":"Collection Processing","text":"<pre><code>students\n .fiter { it.passing &amp;&amp; it.averageGrade &gt; 4.0 }\n // Only passing students\n .sortedByDescending { it.averageGrade }\n // Starting from ones with biggest grades\n .take(10) // Take \u001frst 10\n .sortedWith(compareBy({ it.surname }, { it.name }))\n // Sort by surname and then name\n\ngenerateSequence(0) { it + 1 }\n // Infinitive sequence of next numbers starting on 0\n .filter { it % 2 == 0 } // Keep only even\n .map { it * 3 } // Triple every one\n .take(100) // Take \u001frst 100\n .average() // Count average\n\n// Most important functions for collection processing\nval l = listOf(1,2,3,4)\n//filter - returns only elements matched by predicate\nl.filter { it % 2 == 0 } // [2, 4]\n\n// map - returns elements after transformation\nl.map { it * 2 } // [2, 4, 6, 8]\n\n// flatMap - returns elements yielded from results of trans.\nl.flatMap { listOf(it, it + 10) } // [1, 11, 2, 12, 3, 13, 4, 14]\n\n// fold/reduce - accumulates elements\nl.fold(0.0) { acc, i -&gt; acc + i } // 10.0\nl.reduce { acc, i -&gt; acc * i } // 24\n\n// forEach/onEach - perfons an action on every element\nl.forEach { print(it) } // Prints 1234, returns Unit\nl.onEach { print(it) } // Prints 1234, returns [1, 2, 3, 4]\n\n// partition - splits into pair of lists\nval (even, odd) = l.partition { it % 2 == 0 }\nprint(even) // [2, 4]\nprint(odd) // [1, 3]\n\n// min/max/minBy/maxBy\nl.min() // 1, possible because we can compare Int\nl.minBy { -it } // 4\nl.max() // 4, possible because we can compare Int\nl.maxBy { -it } // 1\n\n// first/firstBy\nl.first() // 1\nl.first { it % 2 == 0 } // 2 (\u001frst even number)\n\n// count - count elements matched by predicate\nl.count { it % 2 == 0 } // 2\n\n// sorted/sortedBy - returns sorted collection\nlistOf(2,3,1,4).sorted() // [1, 2, 3, 4]\nl.sortedBy { it % 2 } // [2, 4, 1, 3]\n\n// groupBy - group elements on collection by key\nl.groupBy { it % 2 } // Map: {1=[1, 3], 0=[2, 4]}\n\n// distinct/distinctBy - returns only unique elements\nlistOf(1,1,2,2).distinct() // [1, 2]\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#mutable-vs-immutable-collection-processing-functions","title":"Mutable vs immutable collection processing functions","text":"<pre><code>val list = mutableListOf(3,4,2,1)\nval sortedResult = list.sorted() // Returns sorted\nprintln(sortedResult) // [1, 2, 3, 4]\nprintln(list) // [3, 4, 2, 1]\n\nval sortResult = list.sort() // Sorts mutable collection\nprintln(sortResult) // kotlin.Unit\nprintln(list) // [1, 2, 3, 4]\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#extension-functions_1","title":"Extension Functions","text":"Returns 'Receiver' Returns 'Results of lambda' Reference to receiver: 'it' also let Reference to receiver: 'this' apply run/with <pre><code>val dialog = Dialog().apply {\n    title = \"Dialog title\"\n    onClick { print(\"Clicked\") }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#delegates","title":"Delegates","text":"<pre><code>// Lazy - calculates value before \u001frst usage\nval i by lazy { print(\"init \"); 10 }\nprint(i) // Prints: init 10\nprint(i) // Prints: 10\n\n// notNull - returns last setted value, or throws error if no value has been set\n\n// observable/vetoable - calls function every time value changes. In vetoable function also decides if new value should be set.\nvar name by observable(\"Unset\") { p, old, new -&gt;\n    println(\"${p.name} changed $old -&gt; $new\")\n}\nname = \"Marcin\"\n// Prints: name changed Unset -&gt; Marcin\n\n// Map/MutableMap - \u001fnds value on map by property name\nval map = mapOf(\"a\" to 10)\nval a by map\nprint(a) // Prints: 10\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#visibility-modifiers","title":"Visibility Modifiers","text":"Modifier Class members Top-level Public (default) Visible everywhere Visible everywhere Private Visible only in the same class Visible in the same class Protected Visible only in the sambe class and subclasses Not allowed Internal Visible in the same module if class is accessible Visible in the same module"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>"},{"location":"section1/u05/","title":"UD 5 - Puesta en practica de la POO","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software","POO"]},{"location":"section1/u05/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software","POO"]},{"location":"section1/u05/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 4.  Desarrolla programas organizados en clases analizando y aplicando los principios de la programaci\u00f3n orientada a objetos.</p>","tags":["Software","POO"]},{"location":"section1/u05/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Criterios de Evaluaci\u00f3n:</p> <ul> <li>a) Se ha reconocido la sintaxis, estructura y componentes t\u00edpicos de una clase.  </li> <li>b) Se han definido clases.   </li> <li>c) Se han definido clases.   </li> <li>d) Se han definido propiedades y m\u00e9todos.  </li> <li>e) Se han creado constructores.   </li> <li>f) Se han desarrollado programas que instancien y utilicen objetos de las clases creadas anteriormente.  </li> <li>g) Se han utilizado mecanismos para controlar la visibilidad de las clases y de sus miembros.   </li> <li>h) Se han definido y utilizado clases heredadas.   </li> <li>i) Se han creado y utilizado m\u00e9todos est\u00e1ticos.  </li> <li>j) Se han definido y utilizado interfaces.   </li> <li>k) Se han creado y utilizado conjuntos y librer\u00edas de clases.</li> </ul>","tags":["Software","POO"]},{"location":"section1/u05/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 3 de Programaci\u00f3n orientada a objetos.</p> <ul> <li>U5: Puesta en pr\u00e1ctica de la POO</li> </ul> <p>En la Unidad 5, veremos:   </p> <ul> <li>Clases y Objetos: (Data class, Enumerados, Genericos, Objects)   </li> <li>Visibilidad de los miembros de una clase.  </li> <li>Pr\u00e1ctica en la creaci\u00f3n de constructores, m\u00e9todos y atributos.   </li> <li>Pr\u00e1ctica en el uso de clases y objetos.   </li> <li>Intro a la herencia e interfaces.</li> </ul>","tags":["Software","POO"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/","title":"UD 5 - P1: Herencia, interfaces, clases abstractas","text":"","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#p51-ejercicios","title":"P5.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-1-sistema-de-figuras-geometricas","title":"Ejercicio 1: Sistema de Figuras Geom\u00e9tricas","text":"<p>Crea una clase abstracta <code>Figura</code> que tenga m\u00e9todos abstractos para <code>area()</code> y <code>perimetro()</code>. Implementa subclases concretas como <code>Circulo</code>, <code>Rectangulo</code>, y <code>Triangulo</code>, proporcionando la implementaci\u00f3n espec\u00edfica de estos m\u00e9todos. La clase <code>Figura</code> podr\u00eda tener propiedades comunes como el color, que se inicializar\u00e1n a trav\u00e9s del constructor.</p> <p>El valor de PI lo conseguimos con Math.PI</p> <p>Objetivos:</p> <ul> <li>Practicar la creaci\u00f3n de clases abstractas y m\u00e9todos abstractos.</li> <li>Entender c\u00f3mo las subclases proporcionan implementaciones concretas de m\u00e9todos abstractos.</li> <li>Familiarizarse con los conceptos b\u00e1sicos de geometr\u00eda y c\u00f3mo se pueden aplicar en la programaci\u00f3n orientada a objetos.</li> </ul>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-2-sistema-de-empleados-y-departamentos","title":"Ejercicio 2: Sistema de Empleados y Departamentos","text":"<p>Dise\u00f1a una clase abstracta <code>Empleado</code> con propiedades como <code>nombre</code>, <code>id</code>, y un m\u00e9todo abstracto <code>calculaSalario()</code>. Crea clases derivadas como <code>EmpleadoPorHora</code> y <code>EmpleadoFijo</code>, que implementen el m\u00e9todo <code>calculaSalario()</code> de diferentes maneras. Considera a\u00f1adir una clase <code>Departamento</code> que tenga una lista de empleados y pueda calcular el salario total que se debe pagar a todos sus empleados.</p> <p><code>EmpleadoPorHora</code> podr\u00eda implementar dos propiedades c\u00f3mo horasTrabajadas al mes y tarifaPorHora para realizar el c\u00e1lculo de su salario mensual. <code>EmpleadoFijo</code> podr\u00eda tener a su vez dos propiedades distintas, salarioFijo y numPagas del que podr\u00edamos calcular su salario mensual.</p> <p><code>Departamento</code> podr\u00eda tener una lista de empleados y dos m\u00e9todos: agregarEmpleado y calculaSalarioTotal que tienen sus empleados al mes.</p> <p>En el main crea una instancia de Departamento, agrega varios empleados, recorre la lista de los empleados mostrando su informaci\u00f3n \"Nombre con ID-0001 tiene un salario de 28697.96 al mes.\" (el id siempre con 4 posiciones num\u00e9ricas y el salario con 2 decimales)</p> <p>\u00bfSe te ocurre alguna restricci\u00f3n l\u00f3gica que podr\u00edamos introducir a las propiedades?</p> <p>Objetivos:</p> <ul> <li>Aprender a manejar la herencia y la implementaci\u00f3n de m\u00e9todos abstractos.</li> <li>Comprender c\u00f3mo diferentes subclases pueden tener implementaciones distintas de la misma operaci\u00f3n (polimorfismo).</li> <li>Entender c\u00f3mo agrupar m\u00faltiples objetos en una colecci\u00f3n y realizar operaciones sobre ellos.</li> </ul>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-3-sistema-de-dispositivos-electronicos","title":"Ejercicio 3: Sistema de Dispositivos Electr\u00f3nicos","text":"<p>Crea tres interfaces:</p> <ul> <li><code>EncendidoApagado</code> con m\u00e9todos como <code>encender()</code> y <code>apagar()</code>.</li> <li><code>DispositivoElectronico</code> con un m\u00e9todo llamado <code>reiniciar()</code>.</li> <li><code>Vehiculo</code> con dos propiedades: <code>motorEncendido</code> y <code>kmHora</code>; y los m\u00e9todos <code>acelerar(Int)</code> y <code>frenar(Int)</code>.</li> </ul> <p>Implementa estas interfaces en varias clases como <code>Telefono</code>, <code>Lavadora</code> y <code>Coche</code>. Cada clase deber\u00eda tener su propia implementaci\u00f3n de los m\u00e9todos de las interfaces que tengan sentido que implementen, simulando el comportamiento que le obligan a desarrollar a cada una.</p> <p>Un coche solo acelera y frena si tiene el motor encendido. Por defecto un objeto coche estar\u00e1 apagado. Si a un coche le mandamos frenar y su valor final fuera negativo le asignaremos a kmHora el valor 0.</p> <p>Objetivos:</p> <ul> <li>Practicar la implementaci\u00f3n de interfaces y entender c\u00f3mo fuerzan a las clases a proporcionar implementaciones concretas de los m\u00e9todos definidos.</li> <li>Comprender c\u00f3mo se puede usar una interfaz para imponer un contrato que varias clases deben seguir.</li> <li>Familiarizarse con el concepto de separaci\u00f3n de la interfaz y la implementaci\u00f3n.</li> </ul>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-4-sistema-de-notificacion","title":"Ejercicio 4: Sistema de Notificaci\u00f3n","text":"<p>Dise\u00f1a una interfaz <code>Notificable</code> con un m\u00e9todo <code>enviarNotificacion()</code>. Implementa esta interfaz en clases como <code>CorreoElectronico</code>, <code>MensajeTexto</code>, y <code>NotificacionPush</code>. Cada clase debe tener una implementaci\u00f3n espec\u00edfica de <code>enviarNotificacion()</code>, simula el env\u00edo de la notificaci\u00f3n a trav\u00e9s del canal apropiado.</p> <p>En el programa principal crea una lista de tipo <code>Notificable</code> llamada notificaciones y en ella crea un objeto de cada clase. Recorre la lista enviando una notificaci\u00f3n con cada elemento.</p> <p>Objetivos:</p> <ul> <li>Aprender a utilizar interfaces para definir un comportamiento com\u00fan entre varias clases.</li> <li>Entender el beneficio de usar interfaces para permitir que diferentes clases sean tratadas de manera uniforme.</li> <li>Practicar el dise\u00f1o de sistemas flexibles donde se pueden agregar nuevos tipos de notificaciones sin modificar el c\u00f3digo que utiliza la interfaz <code>Notificable</code>.</li> </ul> <p>Estos ejercicios est\u00e1n dise\u00f1ados para reforzar la comprensi\u00f3n de los conceptos de clases abstractas e interfaces, y c\u00f3mo se aplican en diferentes situaciones en la programaci\u00f3n orientada a objetos.</p>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-5-sistema-de-gestion-de-biblioteca","title":"Ejercicio 5: Sistema de Gesti\u00f3n de Biblioteca","text":"<p>Imagina que est\u00e1s construyendo un sistema para una biblioteca que gestiona libros y usuarios. Este sistema deber\u00e1 poder manejar distintos tipos de items en la biblioteca (libros, revistas, DVDs) y distintos tipos de usuarios (estudiante, profesor, visitante).</p> <p>Parte 1: Definir <code>data class</code></p> <ol> <li> <p>Libro: T\u00edtulo (<code>String</code>), Autor (<code>String</code>) y A\u00f1o de Publicaci\u00f3n (<code>Int</code>)</p> </li> <li> <p>Revista: T\u00edtulo (<code>String</code>), Issue (<code>Int</code>), A\u00f1o (<code>Int</code>)</p> </li> <li> <p>DVD: T\u00edtulo (<code>String</code>), Director (<code>String</code>), A\u00f1o (<code>Int</code>)</p> </li> </ol> <p>Estas clases almacenar\u00e1n la informaci\u00f3n b\u00e1sica de cada \u00edtem en la biblioteca. Usa <code>data class</code> para definir estas clases ya que son perfectas para almacenar datos sin necesidad de l\u00f3gica adicional.</p> <p>Parte 2: Definir <code>sealed class</code></p> <p>Para gestionar los distintos tipos de usuarios, puedes usar una <code>sealed class</code>. Esto te permitir\u00e1 tener una jerarqu\u00eda de clases cerrada, lo cual es \u00fatil para cuando se conocen todos los posibles subtipos.</p> <ol> <li>Usuario</li> <li><code>sealed class Usuario</code><ul> <li>Clases que heredan de Usuario:</li> <li>Estudiante(id:<code>String</code>, nombre:<code>String</code>, carrera:<code>String</code>)</li> <li>Profesor(id:<code>String</code>, nombre:<code>String</code>, departamento:<code>String</code>)</li> <li>Visitante(id:<code>String</code>, nombre:<code>String</code>)</li> </ul> </li> </ol> <p>La <code>sealed class Usuario</code> permitir\u00e1 manejar operaciones espec\u00edficas para cada tipo de usuario, como pr\u00e9stamos de libros o acceso a \u00e1reas restringidas de la biblioteca.</p> <p>Ejercicio Propuesto:  </p> <ol> <li>Definir las <code>data class</code> para Libro, Revista, y DVD.  </li> <li>Crear una <code>sealed class Usuario</code> con las subclases Estudiante, Profesor, y Visitante. Cada subclase debe tener propiedades relevantes (como se describi\u00f3 anteriormente).  </li> <li>Implementar una funci\u00f3n que acepte un Usuario y un libro, y devuelva un mensaje indicando si el usuario puede o no tomar prestado el libro. Considerar reglas simples como que los Visitantes no pueden tomar prestados libros, o que los Profesores pueden tener pr\u00e9stamos por m\u00e1s tiempo.  </li> </ol>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-6-sistema-de-articulos","title":"Ejercicio 6: Sistema de articulos","text":"<ul> <li> <p>Crear una clase <code>Articulo</code> con un <code>nombre</code> y un <code>precio</code>, que ambos se puedan modificar. Tambi\u00e9n tendr\u00e1 un <code>id</code> que se generar\u00e1 de forma autom\u00e1tica mediante un contador (<code>totalArticulos</code>) y una funci\u00f3n <code>generarId()</code>. Este <code>id</code> no podr\u00e1 modificarse ni obtenerse fuera de Articulo.  </p> </li> <li> <p>Crear un m\u00e9todo <code>promocionNavidad()</code> que reciba el porcentaje de rebaja y lo aplique al precio.  </p> </li> <li> <p>Sobreescribir el m\u00e9todo <code>toString()</code> para que retorne el <code>\"{nombre} - {precio con dos decilames}\u20ac (ID: {id})\"</code>.  </p> </li> <li> <p>Crear una clase que herede de <code>Articulo</code> y se llame <code>Ordenador</code>. Debe agregar a su constructor primario el <code>tipo</code>, que ser\u00e1 de <code>TipoOrdenador</code> =&gt; <code>(BASICO, OFIMATICA, TODOTERRENO, GAMING)</code> y por defecto ser\u00e1 <code>BASICO</code>.  </p> </li> <li> <p>Sobreescribe el m\u00e9todo <code>promocionNavidad()</code> para que solo aplique la promoci\u00f3n si el precio es superior a 500 euros.  </p> </li> <li> <p>En el main crea dos art\u00edculos con precios 25 y 45 euros. Tambi\u00e9n crea dos ordenadores, el primero GAMING de precio 1299.99 y el segundo un ordenador b\u00e1sico de 399.99 euros.  </p> </li> <li> <p>Crear una variable para generar una lista con ellos y recorrerla aplic\u00e1ndoles la promoci\u00f3n e imprimiendo su contenido.  </p> </li> <li> <p>Puedes declarar la variable de la siguiente forma:  </p> </li> </ul> <pre><code>// Lista de todos los art\u00edculos\nval articulos = listOf(articulo1, articulo2, ordenador1, ordenador2)\n</code></pre> <p>Responde a las siguientes preguntas:</p> <ol> <li>\u00bfDe qu\u00e9 tipo genera en la lista por defecto el compilador?  </li> <li>\u00bfQu\u00e9 est\u00e1 ocurriendo en este ejemplo con respecto a lo que hemos visto del polimorfismo de la herencia?  </li> <li>\u00bfQu\u00e9 pasar\u00eda si cre\u00e1ramos la lista con <code>listOf&lt;Ordenador&gt;</code>? \u00bfY si la hici\u00e9ramos con <code>listOf&lt;Any&gt;</code>?  </li> </ol>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-7-sistema-de-vehiculos","title":"Ejercicio 7: Sistema de Veh\u00edculos","text":"<p>Descripci\u00f3n: Crea una jerarqu\u00eda de clases para representar diferentes tipos de veh\u00edculos. Cada veh\u00edculo tiene caracter\u00edsticas comunes como la marca, el modelo y la capacidad de combustible, pero cada tipo tiene sus propias caracter\u00edsticas y comportamientos.  </p> <p>Clases a implementar:  </p> <ol> <li>Clase Base <code>Vehiculo</code> </li> <li>Propiedades comunes: marca (<code>String</code>), modelo (<code>String</code>), capacidadCombustible (<code>Int</code>).</li> <li>M\u00e9todo <code>mostrarInformacion()</code>, que imprime la informaci\u00f3n del veh\u00edculo.</li> <li> <p>M\u00e9todo <code>calcularAutonomia()</code>, que retorna un valor Int (Suponemos que cada litro da para 10 km).  </p> </li> <li> <p>Clase Derivada <code>Automovil</code> (hereda de Vehiculo)  </p> </li> <li>Propiedad espec\u00edfica: tipo (<code>String</code>), como \"sed\u00e1n\", \"SUV\", \"deportivo\", etc.</li> <li> <p>Implementa el m\u00e9todo <code>calcularAutonomia()</code> (Suponemos que un autom\u00f3vil puede hacer 100km m\u00e1s que el c\u00e1lculo realizado en su clase base)</p> </li> <li> <p>Clase Derivada <code>Motocicleta</code> (hereda de Vehiculo)  </p> </li> <li>Propiedad espec\u00edfica: cilindrada (<code>Int</code>).</li> <li>Implementa el m\u00e9todo <code>calcularAutonomia()</code> (Suponemos que una moto puede hacer 40km menos que el c\u00e1lculo realizado en su clase base)  </li> </ol> <p>Objetivo: Demostrar c\u00f3mo se pueden crear clases derivadas de una superclase y c\u00f3mo pueden extender o modificar su comportamiento.</p>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-8-persona-y-estudiante","title":"Ejercicio 8: Persona y Estudiante","text":"<ol> <li>Clases y Objetos B\u00e1sicos:  </li> <li> <p>Crea una clase <code>Persona</code> que tenga dos propiedades: <code>nombre</code> y <code>edad</code>. Luego, en el main crea un objeto de esta clase e imprime sus propiedades.  </p> </li> <li> <p>M\u00e9todos Simples:  </p> </li> <li>A\u00f1ade un m\u00e9todo <code>cumple</code> a la clase <code>Persona</code> que incremente la edad de la persona en uno cada vez que se llama.</li> <li>Sobreescribe el m\u00e9todo <code>toString()</code> y progr\u00e1malo para que se muestre una persona con todas sus propiedades. Por ejemplo \"Persona (nombre = Luc\u00eda, edad = 21)\".</li> <li> <p>En el main ejecuta el cumple de la persona y muestra su informaci\u00f3n de dos formas: accediendo a sus propiedades y mediante el m\u00e9todo <code>toString()</code> (recuerda que no es necesario llamar al m\u00e9todo <code>toString()</code>, sino que se invocar\u00e1 autom\u00e1ticamente cuando necesite realizar la conversi\u00f3n del contenido a <code>String</code>).  </p> </li> <li> <p>Encapsulamiento:  </p> </li> <li> <p>Modifica la clase <code>Persona</code> para que reciba la fecha de nacimiento por el constructor, y se almacene en una propiedad privada. Modificar la edad para que no se pueda modificar, pero se pueda consultar su valor, calcul\u00e1ndolo con respecto a la fecha de nacimiento.</p> </li> <li> <p>Herencia:  </p> </li> <li>Crea una clase <code>Estudiante</code> que herede de <code>Persona</code> y a\u00f1ade una propiedad <code>carrera</code>. Las propiedades deben incluir el modificador <code>open</code> (vuelve a dejar la propiedad edad p\u00fablica).</li> <li> <p>Realiza de nuevo un override de <code>toString()</code> para completar la informaci\u00f3n de Estudiante (intenta usar el resultado del m\u00e9todo de la clase padre y completarlo).  </p> </li> <li> <p>Polimorfismo:  </p> </li> <li>A\u00f1ade un m\u00e9todo <code>actividad()</code> a la clase <code>Persona</code> que imprima \"Luc\u00eda est\u00e1 realizando una actividad.\" y sobreescribe en <code>Estudiante</code> para que muestre un mensaje espec\u00edfico para estudiantes.</li> <li> <p>Crea en el main a una persona y un estudiante y muestra la actividad que realizan.  </p> </li> <li> <p>Clases y Objetos con Validaci\u00f3n:  </p> </li> <li>Modifica la clase <code>Persona</code> para que no acepte nombres vac\u00edos y edades negativas. Utiliza un constructor primario con valores por defecto para edad.</li> <li>Prueba a crear un estudiante con una edad negativa, controlando las excepciones y mostrando el mensaje de error espec\u00edfico.  </li> </ol> <p>Objetivo: Aprender a crear clases y objetos, a utilizar m\u00e9todos y propiedades, a aplicar el encapsulamiento, a utilizar la herencia y el polimorfismo, y a controlar las excepciones.  </p>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-9-sistema-de-gestion-academica","title":"Ejercicio 9: Sistema de Gesti\u00f3n Acad\u00e9mica","text":"<p>Descripci\u00f3n: Crea una jerarqu\u00eda de clases para representar distintos roles en un entorno acad\u00e9mico, como estudiantes y profesores.  </p> <p>Clases a implementar:  </p> <ol> <li>Clase Base <code>Persona</code> </li> <li>Propiedades comunes: nombre (<code>String</code>), edad (<code>Int</code>), id (<code>String</code>).</li> <li> <p>M\u00e9todo <code>mostrarRol()</code>, que imprime el rol de la persona (Estudiante, Profesor, etc.).  </p> </li> <li> <p>Clase Derivada <code>Estudiante</code> </p> </li> <li>Propiedades espec\u00edficas: curso (<code>String</code>), calificacionPromedio (<code>Double</code>).</li> <li> <p>Implementa el m\u00e9todo <code>mostrarRol()</code> y a\u00f1ade un m\u00e9todo <code>mostrarCalificacion()</code> para imprimir la calificaci\u00f3n promedio.  </p> </li> <li> <p>Clase Derivada <code>Profesor</code> </p> </li> <li>Propiedades espec\u00edficas: departamento (<code>String</code>), aniosExperiencia (<code>Int</code>).</li> <li>Implementa el m\u00e9todo <code>mostrarRol()</code> y a\u00f1ade un m\u00e9todo <code>mostrarExperiencia()</code> para imprimir los a\u00f1os de experiencia.  </li> </ol> <p>Objetivo: Familiarizarse con la herencia y c\u00f3mo las clases derivadas pueden tener propiedades y m\u00e9todos adicionales, as\u00ed como comportamientos espec\u00edficos.</p>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-10-sistema-de-gestion-de-personal-en-una-empresa","title":"Ejercicio 10: Sistema de Gesti\u00f3n de Personal en una Empresa","text":"<p>Requisitos:  </p> <ol> <li>Clase Base <code>Persona</code>:  </li> <li>Propiedades:<ul> <li>nombre (<code>String</code>)</li> <li>edad (<code>Int)</code> </li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>toString()</code>: Devuelve una cadena con informaci\u00f3n b\u00e1sica sobre la persona (por ejemplo, \"Nombre: Julia, Edad: 24\").</li> <li><code>celebrarCumple()</code>: Incrementa la edad en 1 y retorna un mensaje de felicitaci\u00f3n (por ejemplo, \"Feliz cumplea\u00f1os Julia! Ahora tienes 25 a\u00f1os.\").  </li> </ul> </li> <li> <p>Clase Derivada <code>Empleado</code> (de <code>Persona</code>):  </p> </li> <li>Propiedades:<ul> <li>salarioBase (<code>Double</code>) (Intenta permitir tambi\u00e9n que se pueda construir un empleado con un argumento Int en esta propiedad)</li> <li>porcentajeImpuestos (<code>Double</code>) (Intenta permitir tambi\u00e9n que se pueda construir un empleado con un argumento Int en esta propiedad) (El valor por defecto es 10.0)  </li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>calcularSalario()</code>: Devuelve el salarioBase aplicando los impuestos.</li> <li><code>toString()</code>: Devuelve una cadena que incluye la informaci\u00f3n de <code>Persona</code> y detalles adicionales del <code>Empleado</code> (por ejemplo, \"Nombre: Julia, Edad: 24, Salario: 28273.47\u20ac\" con 2 posiciones decimales para el salario).</li> <li><code>trabajar()</code>: Retorna un mensaje que indica que el empleado est\u00e1 trabajando. (por ejemplo, \"Pablo est\u00e1 trabajando en la empresa.\")  </li> </ul> </li> <li> <p>Clase Derivada <code>Gerente</code> (de <code>Empleado</code>):  </p> </li> <li>Propiedades:<ul> <li>bonus (<code>Double</code>)</li> <li>exentoImpuestos (<code>Boolean</code>) (Por defecto no estar\u00e1 exento de los impuestos)  </li> </ul> </li> <li>Sobrescribir el porcentajeImpuestos para que los gerentes tengan un porcentaje de impuestos siempre del 33.99%.  </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>calcularSalario()</code>: Devuelve el salarioBase m\u00e1s el bonus aplicando los impuestos solo al salario base o sin aplicar impuestos si exentoImpuestos es <code>true</code>.</li> <li><code>toString()</code>: Devuelve una cadena que incluye la informaci\u00f3n de <code>Persona</code> y <code>Empleado</code>, adem\u00e1s de detalles espec\u00edficos del <code>Gerente</code>.</li> <li><code>administrar()</code>: Retorna un mensaje que indica que el gerente est\u00e1 administrando. (por ejemplo, \"Ana est\u00e1 administrando la empresa.\")  </li> </ul> </li> <li> <p>Uso en la Funci\u00f3n <code>main</code>:  </p> </li> </ol> <p>Crear una persona, un empleado y un gerente. Realizar distintas pruebas... para cada uno mostrar su informaci\u00f3n y ejecutar los m\u00e9todos que tienen accesibles.</p>","tags":["Software","Ejercicios","Herencia","interfaces","clases abstractas"]},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_01_SistemaVehiculos/","title":"Ej POO2 01 SistemaVehiculos","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_01_SistemaVehiculos/#ejercicio-sistema-de-vehiculos","title":"Ejercicio: Sistema de Veh\u00edculos","text":"<p>Descripci\u00f3n: Crea una jerarqu\u00eda de clases para representar diferentes tipos de veh\u00edculos.  Cada veh\u00edculo tiene caracter\u00edsticas comunes como la marca, el modelo y la capacidad de combustible, pero cada tipo tiene sus propias caracter\u00edsticas y comportamientos.</p> <p>Clases a implementar:</p> <ol> <li>Clase Base <code>Vehiculo</code></li> <li>Propiedades comunes: marca (String), modelo (String), capacidadCombustible (Int).</li> <li>M\u00e9todo <code>mostrarInformacion()</code>, que imprime la informaci\u00f3n del veh\u00edculo.</li> <li> <p>M\u00e9todo <code>calcularAutonomia()</code>, que retorna un valor Int (Suponemos que cada litro da para 10 km.).</p> </li> <li> <p>Clase Derivada <code>Automovil</code> (hereda de Vehiculo)</p> </li> <li>Propiedad espec\u00edfica: tipo (String), como \"sed\u00e1n\", \"SUV\", \"deportivo\", etc.</li> <li> <p>Implementa el m\u00e9todo <code>calcularAutonomia()</code> (Suponemos que un autom\u00f3vil puede hacer 100km m\u00e1s que el c\u00e1lculo realizado en su clase base)</p> </li> <li> <p>Clase Derivada <code>Motocicleta</code> (hereda de Vehiculo)</p> </li> <li>Propiedad espec\u00edfica: cilindrada (Int).</li> <li>Implementa el m\u00e9todo <code>calcularAutonomia()</code> (Suponemos que una moto puede hacer 40km menos que el c\u00e1lculo realizado en su clase base)</li> </ol> <p>Objetivo: Demostrar c\u00f3mo se pueden crear clases derivadas de una superclase y c\u00f3mo pueden extender o modificar su comportamiento.</p>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_02_GestionAcademica/","title":"Ej POO2 02 GestionAcademica","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_02_GestionAcademica/#ejercicio-sistema-de-gestion-academica","title":"Ejercicio: Sistema de Gesti\u00f3n Acad\u00e9mica","text":"<p>Descripci\u00f3n: Crea una jerarqu\u00eda de clases para representar distintos roles en un entorno acad\u00e9mico, como estudiantes y profesores.</p> <p>Clases a implementar:</p> <ol> <li>Clase Base <code>Persona</code></li> <li>Propiedades comunes: nombre (String), edad (Int), id (String).</li> <li> <p>M\u00e9todo <code>mostrarRol()</code>, que imprime el rol de la persona (Estudiante, Profesor, etc.).</p> </li> <li> <p>Clase Derivada <code>Estudiante</code></p> </li> <li>Propiedades espec\u00edficas: curso (String), calificacionPromedio (Double).</li> <li> <p>Implementa el m\u00e9todo <code>mostrarRol()</code> y a\u00f1ade un m\u00e9todo <code>mostrarCalificacion()</code> para imprimir la calificaci\u00f3n promedio.</p> </li> <li> <p>Clase Derivada <code>Profesor</code></p> </li> <li>Propiedades espec\u00edficas: departamento (String), aniosExperiencia (Int).</li> <li>Implementa el m\u00e9todo <code>mostrarRol()</code> y a\u00f1ade un m\u00e9todo <code>mostrarExperiencia()</code> para imprimir los a\u00f1os de experiencia.</li> </ol> <p>Objetivo: Familiarizarse con la herencia y c\u00f3mo las clases derivadas pueden tener propiedades y m\u00e9todos adicionales, as\u00ed como comportamientos espec\u00edficos.</p>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_03_Persona_Estudiante/","title":"Ej POO2 03 Persona Estudiante","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_03_Persona_Estudiante/#ejercicio-persona-y-estudiante","title":"Ejercicio: Persona y Estudiante","text":"<ol> <li> <p>Clases y Objetos B\u00e1sicos:</p> <ul> <li>Crea una clase <code>Persona</code> que tenga dos propiedades: <code>nombre</code> y <code>edad</code>. Luego, en el main crea un objeto de esta clase e imprime sus propiedades.</li> </ul> </li> <li> <p>M\u00e9todos Simples:</p> <ul> <li>A\u00f1ade un m\u00e9todo <code>cumple</code> a la clase <code>Persona</code> que incremente la edad de la persona en uno cada vez que se llama.</li> <li>Sobreescribe el m\u00e9todo toString() y progr\u00e1malo para que se muestre una persona con todas sus propiedades.   Por ejemplo \"Persona (nombre = Luc\u00eda, edad = 21)\".</li> <li>En el main ejecuta el cumple de la persona y muestra su informaci\u00f3n de dos formas: accediendo a sus propiedades y mediante el m\u00e9todo toString()   (recuerda que no es necesario llamar al m\u00e9todo toString(), sino que se invocar\u00e1 autom\u00e1ticamente cuando necesite realizar la conversi\u00f3n del contenido a String)</li> </ul> </li> <li> <p>Encapsulamiento:</p> <ul> <li>Modifica la clase <code>Persona</code> para hacer la propiedad <code>edad</code> privada y a\u00f1ade un m\u00e9todo <code>mostrarEdad()</code> para acceder a su valor.</li> </ul> </li> <li> <p>Herencia:</p> <ul> <li>Crea una clase <code>Estudiante</code> que herede de <code>Persona</code> y a\u00f1ade una propiedad <code>carrera</code>.</li> <li>Realiza de nuevo un override de toString() para completar la informaci\u00f3n de Estudiante (intenta usar el resultado del m\u00e9todo de la clase padre y completarlo).</li> </ul> </li> <li> <p>Polimorfismo:</p> <ul> <li>A\u00f1ade un m\u00e9todo <code>actividad()</code> a la clase <code>Persona</code> que imprima \"Luc\u00eda est\u00e1 realizando una actividad.\" y sobrescr\u00edbelo en <code>Estudiante</code> para que muestre un mensaje espec\u00edfico para estudiantes.</li> <li>Crea en el main a una persona y un estudiante y muestra la actividad que realizan.</li> </ul> </li> <li> <p>Clases y Objetos con Validaci\u00f3n:</p> <ul> <li>Modifica la clase <code>Persona</code> para que no acepte nombres vac\u00edos y edades negativas. Utiliza un constructor primario con valores por defecto para edad.</li> <li>Prueba a crer un estudiante con una edad negativa, controlando las excepciones y mostrando el mensaje de error espec\u00edfico.</li> </ul> </li> </ol>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_04_GestionPersonal/","title":"Ej POO2 04 GestionPersonal","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_04_GestionPersonal/#ejercicio-sistema-de-gestion-de-personal-en-una-empresa","title":"Ejercicio: Sistema de Gesti\u00f3n de Personal en una Empresa","text":"<p>Requisitos:</p> <ol> <li> <p>Clase Base <code>Persona</code>:</p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>nombre</code> (String)</li> <li><code>edad</code> (Int)</li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>toString()</code>: Devuelve una cadena con informaci\u00f3n b\u00e1sica sobre la persona (por ejemplo, \"Nombre: Julia, Edad: 24\").</li> <li><code>celebrarCumple()</code>: Incrementa la edad en 1 y retorna un mensaje de felicitaci\u00f3n (por ejemplo, \"Feliz cumplea\u00f1os Julia! Ahora tienes 25 a\u00f1os.\").  </li> </ul> </li> </ul> </li> <li> <p>Clase Derivada <code>Empleado</code> (de <code>Persona</code>):</p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>salarioBase</code> (Double) (Intenta permitir tambi\u00e9n que se pueda construir un empleado con un argumento Int en esta propiedad)</li> <li><code>porcentajeImpuestos</code> (Double) (Intenta permitir tambi\u00e9n que se pueda construir un empleado con un argumento Int en esta propiedad) (El valor por defecto es 10.0)</li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>calcularSalario()</code>: Devuelve el salarioBase aplicando los impuestos.</li> <li><code>toString()</code>: Devuelve una cadena que incluye la informaci\u00f3n de <code>Persona</code> y detalles adicionales del <code>Empleado</code> (por ejemplo, \"Nombre: Julia, Edad: 24, Salario: 28213.47\u20ac\" con 2 posiciones decimales para el salario).</li> <li><code>trabajar()</code>: Retorna un mensaje que indica que el empleado est\u00e1 trabajando. (por ejemplo, \"Pablo est\u00e1 trabajando en la empresa.\")</li> </ul> </li> </ul> </li> <li> <p>Clase Derivada <code>Gerente</code> (de <code>Empleado</code>):</p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>bonus</code> (Double)</li> <li><code>exentoImpuestos</code> (Boolean) (Por defecto no estar\u00e1 exento de los impuestos)</li> <li>Sobreescribir el porcentajeImpuestos para que los gerentes tengan un porcentaje de impuestos siempre del 33.99%.</li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>calcularSalario()</code>: Devuelve el salarioBase m\u00e1s el bonus aplicando los impuestos solo al salario base o sin aplicar impuestos si exentoImpuestos es <code>true</code>.</li> <li><code>toString()</code>: Devuelve una cadena que incluye la informaci\u00f3n de <code>Persona</code> y <code>Empleado</code>, adem\u00e1s de detalles espec\u00edficos del <code>Gerente</code>.</li> <li><code>administrar()</code>: Retorna un mensaje que indica que el gerente est\u00e1 administrando. (por ejemplo, \"Ana est\u00e1 administrando la empresa.\")</li> </ul> </li> </ul> </li> <li> <p>Uso en la Funci\u00f3n <code>main</code>:</p> <p>Crear una persona, un empleado y un gerente. Realizar distintas pruebas... para cada uno mostrar su informaci\u00f3n y ejecutar los m\u00e9todos que tienen accesibles.</p> </li> </ol>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/","title":"Ej POO2 05 Restaurante","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#el-restaurante-sin-herencias","title":"El Restaurante (Sin herencias)","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#bloque-1-gestion-de-platos-y-pedidos","title":"Bloque 1: Gesti\u00f3n de Platos y Pedidos","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#1-clase-plato","title":"1. Clase Plato","text":"<ul> <li>Responsabilidades:</li> <li> <p>Representar la informaci\u00f3n de un plato.</p> </li> <li> <p>Propiedades:</p> </li> <li><code>nombre</code>: String - El nombre del plato. No puede ser vac\u00edo.</li> <li><code>precio</code>: Double - El precio del plato. Debe ser mayor que 0.</li> <li><code>tiempoPreparacion</code>: Int - Tiempo estimado para preparar el plato (en minutos).</li> <li> <p><code>ingredientes</code>: List - Lista de ingredientes necesarios para el plato. <li> <p>M\u00e9todos:</p> </li> <li><code>agregarIngrediente(ingrediente: String)</code>: A\u00f1ade un nuevo ingrediente a la lista de ingredientes del plato.</li> <li><code>toString()</code>: Retornar la informaci\u00f3n del plato (por ejemplo, \"Hamburguesa (8 min.) -&gt; 8.99\u20ac (carne, huevo, queso, pan y tomate)\")</li> <p>Premisas y Requisitos: - El nombre del plato no puede ser vac\u00edo. - El precio del plato debe ser mayor que 0. - El tiempo de preparaci\u00f3n no podr\u00e1 ser igual o inferior a 1. - Un ingrediente no puede ser vac\u00edo. - Considerar el uso de propiedades de Kotlin para validar autom\u00e1ticamente estas restricciones tanto al crear un plato c\u00f3mo al modificar sus valores.</p>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#2-clase-pedido","title":"2. Clase Pedido","text":"<ul> <li>Responsabilidades:</li> <li>Mantener un registro de los platos pedidos por un cliente.</li> <li> <p><code>contPedidos</code>: Int - No pertenece a ning\u00fan pedido en concreto, sino que es un valor global a todos y se utilizar\u00e1 para calcular autom\u00e1ticamente los n\u00fameros de los pedidos.</p> </li> <li> <p>Propiedades:</p> </li> <li><code>numero</code>: Int - El n\u00famero de pedido ser\u00e1 calculado autom\u00e1ticamente al crear cada pedido con respecto a un contador que existir\u00e1 en la clase Pedido.</li> <li><code>platos</code>: List - Lista de platos que componen el pedido. <li> <p><code>estado</code>: String - Estado del pedido (por ejemplo, \"pendiente\", \"preparaci\u00f3n\", \"listo\" y \"servido\"). Por defecto, todo pedido estar\u00e1 en estado pendiente.</p> </li> <li> <p>M\u00e9todos:</p> </li> <li><code>agregarPlato(plato: Plato)</code>: A\u00f1ade un nuevo plato al pedido.</li> <li><code>eliminarPlato(nombrePlato: String)</code>: Elimina un plato del pedido bas\u00e1ndose en el nombre.</li> <li><code>calcularPrecio()</code>: Calcula el precio total del pedido sumando los precios de cada plato.</li> <li><code>calcularTiempo()</code>: Calcula el tiempo total de preparaci\u00f3n sumando el tiempo de preparaci\u00f3n de cada plato.</li> <li><code>toString()</code>: Retornar la informaci\u00f3n del pedido utilizando el n\u00famero de mesa, el m\u00e9todo toString() de cada plato y su estado. (por ejemplo, \"Hamburguesa (8 min.) -&gt; 8.99\u20ac (carne, huevo, queso, pan y tomate)\")</li>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#bloque-2-gestion-de-mesas-y-sistema-de-gestion-de-restaurante","title":"Bloque 2: Gesti\u00f3n de Mesas y Sistema de Gesti\u00f3n de Restaurante","text":""},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#3-clase-mesa","title":"3. Clase Mesa","text":"<ul> <li>Responsabilidades:</li> <li> <p>Representar una mesa en el restaurante.</p> </li> <li> <p>Propiedades:</p> </li> <li><code>numero</code>: Int - N\u00famero de la mesa.</li> <li><code>capacidad</code>: Int - Capacidad m\u00e1xima de personas que pueden sentarse en la mesa. Solo existen mesas de 1 a 6 comensales.</li> <li><code>estado</code>: String - Estado de la mesa (por ejemplo, \"libre\", \"reservada y \"ocupada\").</li> <li> <p><code>pedidos</code>: List - Lista de pedidos realizados por la mesa. <li> <p>M\u00e9todos:</p> </li> <li><code>ocuparMesa()</code>: Cambia el estado de la mesa a \"ocupada\", pero solo si la mesa est\u00e1 en estado \"libre\".</li> <li><code>ocuparReserva()</code>: Cambia el estado de la mesa a \"ocupada\", pero solo si la mesa est\u00e1 en estado \"reservada\".</li> <li><code>liberarMesa()</code>: Cambia el estado de la mesa a \"libre\".</li> <li><code>agregarPedido(Pedido)</code>: Agrega un pedido a los pedidos de la mesa.</li>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#4-sistema-de-gestion-de-restaurante","title":"4. Sistema de Gesti\u00f3n de Restaurante","text":"<ul> <li>Responsabilidades:</li> <li> <p>Integrar y gestionar las operaciones del restaurante.</p> </li> <li> <p>Propiedades:</p> </li> <li> <p><code>mesas</code>: List - Lista de todas las mesas en el restaurante. <li> <p>M\u00e9todos:</p> </li> <li><code>realizarPedido(numeroMesa: Int, pedido: Pedido)</code>: Asocia un nuevo pedido a una mesa. Debe verificar que la mesa est\u00e9 ocupada antes de asociar el pedido.</li> <li><code>cerrarPedido(numeroMesa: Int)</code>: Marca el \u00faltimo pedido de una mesa como servido.</li> <li><code>cerrarPedido(numeroMesa: Int, numeroPedido: Int)</code>: Marca el pedido de una mesa como servido.</li> <li><code>cerrarMesa(numeroMesa: Int)</code>: Si todos los pedidos est\u00e1n servidos, libera la mesa.</li> <li><code>buscarPlatos()</code>: Retorna una lista con el nombre de los platos pedidos. Si no hay ninguno retorna null.</li> <li><code>contarPlato(nombre: String)</code>: Cuenta el n\u00famero de veces que se ha pedido un plato. Si no hay ninguno retorna null.</li> <li><code>buscarPlatoMasPedido()</code>: Busca y retorna el o los platos m\u00e1s pedidos. Si no hay ninguno retorna null. Utiliza los dos m\u00e9todos anteriores.</li> <p>Premisas y Requisitos: - La capacidad de una mesa debe ser un n\u00famero positivo. - El estado de la mesa debe ser manejado adecuadamente para reflejar si est\u00e1 libre, reservada u ocupada.</p>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_05_Restaurante/#programa-principal","title":"Programa principal","text":"<p>Aqu\u00ed tienes un ejemplo de c\u00f3mo podr\u00eda ser el <code>main</code> para probar todas las funcionalidades del sistema de gesti\u00f3n del restaurante.  Este <code>main</code> incluye la creaci\u00f3n de platos y pedidos, la gesti\u00f3n de mesas y el uso del sistema de gesti\u00f3n del restaurante para realizar y cerrar pedidos,  y para buscar informaci\u00f3n relevante sobre los platos m\u00e1s pedidos. Este programa principal deber\u00eda funcionar bien si cre\u00e1is correctamente las clases que os he solicitado.</p> <pre><code>fun main() {\n    // Inicializaci\u00f3n de mesas\n    val mesas = listOf(\n        Mesa(numero = 1, capacidad = 4),\n        Mesa(numero = 2, capacidad = 2),\n        Mesa(numero = 3, capacidad = 6)\n    )\n\n    // Inicializaci\u00f3n del sistema de gesti\u00f3n de restaurante\n    val sistema = SistemaGestionRestaurante(mesas)\n\n    // Creaci\u00f3n de platos\n    val plato1 = Plato(\"Hamburguesa\", 9.99, 8, mutableListOf(\"carne\", \"huevo\", \"queso\", \"pan\", \"tomate\"))\n    val plato2 = Plato(\"Ensalada\", 7.99, 5, mutableListOf(\"lechuga\", \"tomate\", \"zanahoria\", \"ma\u00edz\"))\n    val plato3 = Plato(\"Tortilla\", 5.99, 10, mutableListOf(\"huevo\", \"patata\"))\n    val plato4 = Plato(\"Serranito\", 6.00, 4, mutableListOf(\"carne\", \"pimiento\", \"pan\", \"jam\u00f3n serrano\"))\n    val plato5 = Plato(\"Spagetti carbonara\", 6.00, 12, mutableListOf(\"huevo\", \"pasta\", \"bacon\", \"nata\"))\n    val plato6 = Plato(\"Rissotto setas\", 6.00, 12, mutableListOf(\"arroz\", \"setas\", \"gambas\", \"nata\"))\n\n    // Agregar ingredientes\n    plato1.agregarIngrediente(\"salsa\")\n    plato2.agregarIngrediente(\"at\u00fan\")\n\n    //Simular el registro de comensales a una mesa\n    mesas[0].ocuparMesa() // Ocupar mesa 1\n\n    // Creaci\u00f3n de pedidos\n    val pedido1 = Pedido()\n    pedido1.agregarPlato(plato1)\n    pedido1.agregarPlato(plato2)\n    pedido1.agregarPlato(plato3)\n    pedido1.agregarPlato(plato4)\n\n    println(\"***** Pedido ${pedido1.numero} *****\")\n    println(pedido1)\n\n    // Simulaci\u00f3n del proceso de los pedidos\n    sistema.realizarPedido(1, pedido1)\n\n    println(\"***** Mesa ${mesa[0].numero} *****\")\n    println(mesa[0])\n\n    //Simular el registro de comensales a una mesa\n    mesas[1].ocuparMesa() // Ocupar mesa 2\n\n    //Crear otro pedido\n    val pedido2 = Pedido()\n    pedido2.agregarPlato(plato2)\n    pedido2.agregarPlato(plato3)\n    pedido2.agregarPlato(plato4)\n\n    // Simulaci\u00f3n del proceso de los pedidos\n    sistema.realizarPedido(2, pedido2)\n\n    //Crear un segundo pedido para la mesa 2\n    val pedido3 = Pedido()\n    pedido3.agregarPlato(plato5)\n    pedido3.agregarPlato(plato6)\n\n    // Simulaci\u00f3n del proceso de los pedidos\n    sistema.realizarPedido(2, pedido3)\n\n    println(\"***** Mesa ${mesa[1].numero} *****\")\n    println(mesa[1])\n\n    // Cerrar pedidos y liberar mesas\n    sistema.cerrarPedido(1)\n    sistema.cerrarMesa(1)\n\n    sistema.cerrarPedido(2)\n    sistema.cerrarMesa(2)\n\n    // Buscar platos y contar pedidos\n    val platosPedidos = sistema.buscarPlatos() ?: listOf()\n    if (platosPedidos.size &gt; 0) {\n        println(\"Platos pedidos: ${platosPedidos.joinToString()}\")\n    }\n    else {\n        println(\"No existen platos.\")\n    }\n\n    val contPlato = sistema.contarPlato(\"Hamburguesa\") ?: 0\n    println(\"El plato 'Hamburguesa' fue pedido $contPlato veces.\")\n\n    val platosMasPedidos = sistema.buscarPlatoMasPedido()\n    if (platosMasPedidos != null) {\n        println(\"${if (platosMasPedidos.size == 1) \"El plato m\u00e1s pedido es \" else \"Los platos m\u00e1s pedidos son \"} ${platosMasPedidos.joinToString()}.\")\n    }\n    else {\n        println(\"No existen platos.\")\n    }\n}\n</code></pre>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_06_SistemaReservaActividades/","title":"Actividad: Sistema de Reservas para Actividades Recreativas","text":"<p>ID actividad: U5-006</p> <p>Agrupamiento de la actividad: Individual</p>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_06_SistemaReservaActividades/#descripcion","title":"Descripci\u00f3n:","text":"<p>Esta actividad implica el dise\u00f1o y desarrollo de un sistema de reservas en Kotlin para un centro recreativo que ofrece distintas actividades recreativas como nataci\u00f3n, senderismo y ciclismo. Cada actividad tiene caracter\u00edsticas \u00fanicas y est\u00e1 dirigida a diferentes tipos de clientes (miembros, no miembros, y grupos escolares), con tarifas y restricciones espec\u00edficas para las reservas.</p> <p>Objetivo:</p> <ul> <li>Desarrollar habilidades en la aplicaci\u00f3n de herencia y sobreescritura de m\u00e9todos en Kotlin.</li> <li>Aprender a dise\u00f1ar y utilizar clases abstractas para definir comportamientos y estructuras comunes.</li> <li>Practicar la implementaci\u00f3n y uso de interfaces para garantizar la consistencia en las clases.</li> <li>Manejar correctamente los modificadores de visibilidad para asegurar el encapsulamiento adecuado de las propiedades y m\u00e9todos.</li> <li>Aplicar gen\u00e9ricos para manejar distintos tipos de usuarios de manera eficiente y segura en el sistema de reservas.</li> </ul> <p>Trabajo a realizar:</p> <ol> <li>Definici\u00f3n de Clases de Actividades:</li> <li>Crear una clase abstracta <code>Actividad</code> con propiedades comunes (<code>nombre</code>, <code>capacidadMaxima</code>) y un m\u00e9todo abstracto <code>calcularTarifa(cliente: Cliente): Double</code>.</li> <li>Implementar clases <code>Natacion</code>, <code>Senderismo</code>, y <code>Ciclismo</code> que hereden de <code>Actividad</code> y sobreescriban el m\u00e9todo <code>calcularTarifa</code> para ajustar las tarifas seg\u00fan el tipo de cliente.</li> <li>Implementaci\u00f3n de Interfaz de Reserva:</li> <li>Definir una interfaz <code>Reservable</code> con un m\u00e9todo <code>reservar(cliente: Cliente): Boolean</code> que indique si la reserva es exitosa.</li> <li>Gesti\u00f3n de Usuarios:</li> <li>Crear una <code>sealed class Cliente</code> con subclases <code>Miembro</code>, <code>NoMiembro</code>, y <code>GrupoEscolar</code>, a\u00f1adiendo propiedades espec\u00edficas como <code>id</code>, <code>nombre</code>, y <code>cantidadEstudiantes</code> para <code>GrupoEscolar</code>.</li> <li>Sistema de Reservas:</li> <li>Desarrollar una funci\u00f3n gen\u00e9rica <code>realizarReserva</code> que acepte cualquier actividad que implemente <code>Reservable</code> y un <code>Cliente</code>, mostrando un mensaje sobre el estado de la reserva.</li> </ol>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_06_SistemaReservaActividades/#evaluacion-y-calificacion","title":"Evaluaci\u00f3n y calificaci\u00f3n","text":"<p>RA y CE evaluados:</p> <p>Conlleva presentaci\u00f3n: NO</p> <p>Rubrica:</p> <ul> <li> <p>Herencia y sobreescritura de m\u00e9todos: Evaluaci\u00f3n de c\u00f3mo se extienden las clases y se sobrescriben los m\u00e9todos para adaptar comportamientos espec\u00edficos.</p> </li> <li> <p>0: No implementa herencia.</p> </li> <li>5: Implementa herencia pero sin sobreescritura efectiva de m\u00e9todos.</li> <li>10: Usa herencia y sobreescritura de m\u00e9todos de forma efectiva y adecuada.</li> <li> <p>Uso de clases abstractas: Evaluaci\u00f3n del uso de clases abstractas para definir una base com\u00fan entre diferentes actividades.</p> </li> <li> <p>0: No utiliza clases abstractas.</p> </li> <li>5: Usa clases abstractas sin explotar todo su potencial.</li> <li>10: Aplica clases abstractas de manera eficaz para compartir estructura y comportamiento.</li> <li> <p>Implementaci\u00f3n de interfaces: Valoraci\u00f3n de c\u00f3mo las interfaces se usan para definir contratos comunes entre diferentes clases.</p> </li> <li> <p>0: No implementa interfaces.</p> </li> <li>5: Implementa interfaces pero no de manera completa.</li> <li>10: Implementa interfaces de manera completa y efectiva.</li> <li> <p>Modificadores de visibilidad: Evaluaci\u00f3n de c\u00f3mo se utilizan los modificadores de visibilidad para proteger y exponer datos.</p> </li> <li> <p>0: Uso incorrecto de modificadores de visibilidad.</p> </li> <li>5: Uso adecuado de modificadores de visibilidad con algunos errores.</li> <li>10: Uso correcto y estrat\u00e9gico de modificadores de visibilidad.</li> <li> <p>Uso de gen\u00e9ricos: Evaluaci\u00f3n del uso de gen\u00e9ricos para manejar diferentes tipos de forma segura.</p> </li> <li> <p>0: No utiliza gen\u00e9ricos.</p> </li> <li>5: Uso limitado de gen\u00e9ricos.</li> <li>10: Uso efectivo de gen\u00e9ricos para mejorar la flexibilidad y seguridad del tipo.</li> </ul>"},{"location":"section1/u05/practica/otrosRecursos/Ej_POO2_06_SistemaReservaActividades/#entrega","title":"Entrega","text":"<ul> <li>URL a repositorio GitHub: El proyecto completo debe ser subido a GitHub, mostrando el uso efectivo de control de versiones y trabajo en equipo.</li> <li>Documento PDF: C\u00f3digo fuente bien documentado y explicaci\u00f3n detallada del dise\u00f1o del sistema, incluyendo diagramas de clases si es necesario, siguiendo las especificaciones de entrega.</li> </ul> <p>Cumplimiento de Objetivos:</p> <ul> <li>Herencia y sobreescritura: Las clases <code>Natacion</code>, <code>Senderismo</code>, y <code>Ciclismo</code> demuestran la herencia de <code>Actividad</code> y la sobreescritura del m\u00e9todo <code>calcularTarifa</code>.</li> <li>Clases abstractas: <code>Actividad</code> act\u00faa como una clase abstracta que define el esqueleto de las actividades recreativas.</li> <li>Interfaces: <code>Reservable</code> garantiza que todas las actividades implementen el m\u00e9todo de reserva.</li> <li>Modificadores de visibilidad: El uso adecuado de <code>private</code>, <code>protected</code>, y <code>public</code> en propiedades y m\u00e9todos de las clases.</li> <li>Gen\u00e9ricos: La funci\u00f3n <code>realizarReserva</code> utiliza gen\u00e9ricos para permitir reservas de cualquier tipo de <code>Actividad</code> por cualquier tipo de <code>Cliente</code>.</li> </ul> <p>ubrica:</p> <ul> <li>Herencia y sobreescritura de m\u00e9todos: Evaluaci\u00f3n de c\u00f3mo se extienden las clases y se sobrescriben los m\u00e9todos para adaptar comportamientos espec\u00edficos.</li> <li>0: No implementa herencia.</li> <li>5: Implementa herencia pero sin sobreescritura efectiva de m\u00e9todos.</li> <li>10: Usa herencia y sobreescritura de m\u00e9todos de forma efectiva y adecuada.</li> <li>Uso de clases abstractas: Evaluaci\u00f3n del uso de clases abstractas para definir una base com\u00fan entre diferentes actividades.</li> <li>0: No utiliza clases abstractas.</li> <li>5: Usa clases abstractas sin explotar todo su potencial.</li> <li>10: Aplica clases abstractas de manera eficaz para compartir estructura y comportamiento.</li> <li>Implementaci\u00f3n de interfaces: Valoraci\u00f3n de c\u00f3mo las interfaces se usan para definir contratos comunes entre diferentes clases.</li> <li>0: No implementa interfaces.</li> <li>5: Implementa interfaces pero no de manera completa.</li> <li>10: Implementa interfaces de manera completa y efectiva.</li> <li>Modificadores de visibilidad: Evaluaci\u00f3n de c\u00f3mo se utilizan los modificadores de visibilidad para proteger y exponer datos.</li> <li>0: Uso incorrecto de modificadores de visibilidad.</li> <li>5: Uso adecuado de modificadores de visibilidad con algunos errores.</li> <li>10: Uso correcto y estrat\u00e9gico de modificadores de visibilidad.</li> <li>Uso de gen\u00e9ricos: Evaluaci\u00f3n del uso de gen\u00e9ricos para manejar diferentes tipos de forma segura.</li> <li>0: No utiliza gen\u00e9ricos.</li> <li>5: Uso limitado de gen\u00e9ricos.</li> <li>10: Uso efectivo de gen\u00e9ricos para mejorar la flexibilidad y seguridad del tipo.</li> </ul>"},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_01_SistemaVehiculos_vSol/","title":"Ej POO2 01 SistemaVehiculos vSol","text":""},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_01_SistemaVehiculos_vSol/#ejercicio-sistema-de-vehiculos","title":"Ejercicio: Sistema de Veh\u00edculos","text":"<p>Descripci\u00f3n: Crea una jerarqu\u00eda de clases para representar diferentes tipos de veh\u00edculos.  Cada veh\u00edculo tiene caracter\u00edsticas comunes como la marca, el modelo y la capacidad de combustible, pero cada tipo tiene sus propias caracter\u00edsticas y comportamientos.</p> <p>Clases a implementar:</p> <ol> <li>Clase Base <code>Vehiculo</code></li> <li>Propiedades comunes: marca (String), modelo (String), capacidadCombustible (Int).</li> <li>M\u00e9todo <code>mostrarInformacion()</code>, que imprime la informaci\u00f3n del veh\u00edculo.</li> <li> <p>M\u00e9todo <code>calcularAutonomia()</code>, que retorna un valor Int (Suponemos que cada litro da para 10 km.).</p> </li> <li> <p>Clase Derivada <code>Automovil</code> (hereda de Vehiculo)</p> </li> <li>Propiedad espec\u00edfica: tipo (String), como \"sed\u00e1n\", \"SUV\", \"deportivo\", etc.</li> <li> <p>Implementa el m\u00e9todo <code>calcularAutonomia()</code> (Suponemos que un autom\u00f3vil puede hacer 100km m\u00e1s que el c\u00e1lculo realizado en su clase base)</p> </li> <li> <p>Clase Derivada <code>Motocicleta</code> (hereda de Vehiculo)</p> </li> <li>Propiedad espec\u00edfica: cilindrada (Int).</li> <li>Implementa el m\u00e9todo <code>calcularAutonomia()</code> (Suponemos que una moto puede hacer 40km menos que el c\u00e1lculo realizado en su clase base)</li> </ol> <p>Objetivo: Demostrar c\u00f3mo se pueden crear clases derivadas de una superclase y c\u00f3mo pueden extender o modificar su comportamiento.</p> <ol> <li>Soluci\u00f3n:</li> </ol> <pre><code>open class Vehiculo(val marca: String, val modelo: String, val capacidadCombustible: Int) {\n\n    override fun toString() = \"Marca: $marca, Modelo: $modelo, Capacidad de Combustible: $capacidadCombustible\"\n\n    open fun calcularAutonomia(): Int {\n        // Implementaci\u00f3n b\u00e1sica. Puede ser m\u00e1s compleja dependiendo del tipo de veh\u00edculo.\n        return capacidadCombustible * 10  // Ejemplo: cada litro da para 10 km.\n    }\n}\n</code></pre> <pre><code>class Automovil(marca: String, modelo: String, capacidadCombustible: Int, val tipo: String) \n    : Vehiculo(marca, modelo, capacidadCombustible) {\n\n    override fun calcularAutonomia(): Int {\n        // Puede ser diferente dependiendo del tipo de autom\u00f3vil.\n        return super.calcularAutonomia() + 50 // Supongamos que los autom\u00f3viles tienen 50 km extra de autonom\u00eda.\n    }\n\n    override fun toString() = \"${super.toString()}, Tipo: $tipo\"\n}\n</code></pre> <pre><code>// Clase Derivada `Motocicleta`\nclass Motocicleta(marca: String, modelo: String, capacidadCombustible: Int, val cilindrada: Int) \n    : Vehiculo(marca, modelo, capacidadCombustible) {\n\n    override fun calcularAutonomia(): Int {\n        // La autonom\u00eda podr\u00eda ser diferente para motocicletas.\n        return super.calcularAutonomia() - 20 // Supongamos que las motocicletas tienen 20 km menos de autonom\u00eda.\n    }\n\n    override fun toString() = \"${super.toString()}, Cilindrada: $cilindrada\"\n}\n</code></pre>"},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_02_GestionAcademica_vSol/","title":"Ej POO2 02 GestionAcademica vSol","text":""},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_02_GestionAcademica_vSol/#ejercicio-sistema-de-gestion-academica","title":"Ejercicio: Sistema de Gesti\u00f3n Acad\u00e9mica","text":"<p>Descripci\u00f3n: Crea una jerarqu\u00eda de clases para representar distintos roles en un entorno acad\u00e9mico, como estudiantes y profesores.</p> <p>Clases a implementar:</p> <ol> <li>Clase Base <code>Persona</code></li> <li>Propiedades comunes: nombre (String), edad (Int), id (String).</li> <li> <p>M\u00e9todo <code>mostrarRol()</code>, que imprime el rol de la persona (Estudiante, Profesor, etc.).</p> </li> <li> <p>Clase Derivada <code>Estudiante</code></p> </li> <li>Propiedades espec\u00edficas: curso (String), calificacionPromedio (Double).</li> <li> <p>Implementa el m\u00e9todo <code>mostrarRol()</code> y a\u00f1ade un m\u00e9todo <code>mostrarCalificacion()</code> para imprimir la calificaci\u00f3n promedio.</p> </li> <li> <p>Clase Derivada <code>Profesor</code></p> </li> <li>Propiedades espec\u00edficas: departamento (String), aniosExperiencia (Int).</li> <li>Implementa el m\u00e9todo <code>mostrarRol()</code> y a\u00f1ade un m\u00e9todo <code>mostrarExperiencia()</code> para imprimir los a\u00f1os de experiencia.</li> </ol> <p>Objetivo: Familiarizarse con la herencia y c\u00f3mo las clases derivadas pueden tener propiedades y m\u00e9todos adicionales, as\u00ed como comportamientos espec\u00edficos.</p> <ol> <li>Soluci\u00f3n:</li> </ol> <pre><code>// Clase Base `Persona`\nopen class Persona(val nombre: String, val edad: Int, val id: String) {\n\n    // M\u00e9todo `mostrarRol()`\n    open fun mostrarRol() {\n        println(\"Persona: $nombre, Id: $id\")\n    }\n\n    // M\u00e9todo `toString()`\n    override fun toString() = \"Nombre: $nombre, Edad: $edad, Id: $id\"\n}\n</code></pre> <pre><code>// Clase Derivada `Estudiante`\nclass Estudiante(nombre: String, edad: Int, id: String, val curso: String, val calificacionPromedio: Double) \n    : Persona(nombre, edad, id) {\n\n    // Implementaci\u00f3n de `mostrarRol()`\n    override fun mostrarRol() {\n        println(\"Estudiante: $nombre, Curso: $curso, Id: $id\")\n    }\n\n    // M\u00e9todo `mostrarCalificacion()`\n    fun mostrarCalificacion() {\n        println(\"Calificaci\u00f3n Promedio de $nombre es $calificacionPromedio\")\n    }\n\n    // M\u00e9todo `toString()`\n    override fun toString() = \"${super.toString()}, Curso: $curso, Calificaci\u00f3n Promedio: $calificacionPromedio\"\n}\n</code></pre> <pre><code>// Clase Derivada `Profesor`\nclass Profesor(nombre: String, edad: Int, id: String, val departamento: String, val aniosExperiencia: Int) \n    : Persona(nombre, edad, id) {\n\n    // Implementaci\u00f3n de `mostrarRol()`\n    override fun mostrarRol() {\n        println(\"Profesor: $nombre, Departamento: $departamento, Id: $id\")\n    }\n\n    // M\u00e9todo `mostrarExperiencia()`\n    fun mostrarExperiencia() {\n        println(\"El profesor $nombre tiene $aniosExperiencia a\u00f1os de experiencia\")\n    }\n\n    // M\u00e9todo `toString()`\n    override fun toString() = \"${super.toString()}, Departamento: $departamento, A\u00f1os de Experiencia: $aniosExperiencia\"\n}\n</code></pre>"},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_03_Persona_Estudiante_vSol/","title":"Ej POO2 03 Persona Estudiante vSol","text":""},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_03_Persona_Estudiante_vSol/#ejercicio-persona-y-estudiante","title":"Ejercicio: Persona y Estudiante","text":"<ol> <li> <p>Clases y Objetos B\u00e1sicos:</p> <ul> <li> <p>Crea una clase <code>Persona</code> que tenga dos propiedades: <code>nombre</code> y <code>edad</code>. Luego, en el main crea un objeto de esta clase e imprime sus propiedades.</p> </li> <li> <p>Ejemplo:</p> <pre><code>class Persona(val nombre: String, val edad: Int)\n\nfun main() {\n    val persona = Persona(\"Juan\", 25)\n    println(\"Nombre: ${persona.nombre}, Edad: ${persona.edad}\")\n}\n</code></pre> </li> </ul> </li> <li> <p>M\u00e9todos Simples:</p> <ul> <li>A\u00f1ade un m\u00e9todo <code>cumple</code> a la clase <code>Persona</code> que incremente la edad de la persona en uno cada vez que se llama.</li> <li>Sobreescribe el m\u00e9todo toString() y progr\u00e1malo para que se muestre una persona con todas sus propiedades.   Por ejemplo \"Persona (nombre = Luc\u00eda, edad = 21)\".</li> <li>En el main ejecuta el cumple de la persona y muestra su informaci\u00f3n de dos formas: accediendo a sus propiedades y mediante el m\u00e9todo toString()   (recuerda que no es necesario llamar al m\u00e9todo toString(), sino que se invocar\u00e1 autom\u00e1ticamente cuando necesite realizar la conversi\u00f3n del contenido a String)</li> <li> <p>Ejemplo:</p> <pre><code>class Persona(val nombre: String, var edad: Int) {\n    fun cumple() {\n        edad++\n    }\n\n    override fun toString(): String {\n        return \"Persona (nombre = $nombre, edad = $edad)\"      \n    } \n}\n\nfun main() {\n    val persona = Persona(\"Juan\", 25)\n    persona.cumple()\n    println(\"Persona (nombre = ${persona.nombre}, edad = ${persona.edad})\") // Deber\u00eda mostrar 26\n    println(persona) // Deber\u00eda mostrar la misma informaci\u00f3n que la instrucci\u00f3n anterior\n}\n</code></pre> </li> </ul> </li> <li> <p>Encapsulamiento:</p> <ul> <li>Modifica la clase <code>Persona</code> para hacer la propiedad <code>edad</code> privada y a\u00f1ade un m\u00e9todo <code>mostrarEdad()</code> para acceder a su valor.</li> <li> <p>Ejemplo:</p> <pre><code>class Persona(val nombre: String, private var edad: Int) {\n    fun mostrarEdad() = edad\n    fun cumple() {\n        edad++\n    }\n    override fun toString(): String {\n        return \"Persona (nombre = $nombre, edad = $edad)\"      \n    } \n}\n</code></pre> </li> </ul> </li> <li> <p>Herencia:</p> <ul> <li>Crea una clase <code>Estudiante</code> que herede de <code>Persona</code> y a\u00f1ade una propiedad <code>carrera</code>. Las propiedades deben incluir el modificador <code>open</code> (vuelve a dejar la propiedad edad p\u00fablica)</li> <li>Realiza de nuevo un override de toString() para completar la informaci\u00f3n de Estudiante (intenta usar el resultado del m\u00e9todo de la clase padre y completarlo).</li> <li> <p>Ejemplo:</p> <pre><code>open class Persona(open val nombre: String, open var edad: Int) {\n    fun mostrarEdad() = edad\n    fun cumple() {\n        edad++\n    }\n    override fun toString(): String {\n        return \"Persona (nombre = $nombre, edad = $edad)\"      \n    } \n}\n\nclass Estudiante(override val nombre: String, override var edad: Int, val carrera: String) : Persona(nombre, edad) {\n    //Tambi\u00e9n es posible usar el m\u00e9todo de la clase padre y completarlo...\n    /*\n    override fun toString(): String {\n        return \"${super.toString().dropLast(1)}, carrera = $carrera)\"\n    }\n    */\n    override fun toString() : String {\n        return \"Persona (nombre = $nombre, edad = $edad, carrera = $carrera)\"\n    }\n}\n\nfun main() {\n    val estudiante = Estudiante(\"Laura\", 20, \"Ingenier\u00eda Inform\u00e1tica\")\n    println(\"Nombre: ${estudiante.nombre}, Edad: ${estudiante.edad}, Carrera: ${estudiante.carrera}\")\n    println(estudiante)\n}\n</code></pre> </li> </ul> </li> <li> <p>Polimorfismo:</p> <ul> <li>A\u00f1ade un m\u00e9todo <code>actividad()</code> a la clase <code>Persona</code> que imprima \"Luc\u00eda est\u00e1 realizando una actividad.\" y sobrescr\u00edbelo en <code>Estudiante</code> para que muestre un mensaje espec\u00edfico para estudiantes.</li> <li>Crea en el main a una persona y un estudiante y muestra la actividad que realizan.</li> <li> <p>Ejemplo:</p> <pre><code>open class Persona(open val nombre: String, open var edad: Int) {\n    fun mostrarEdad() = edad\n    fun cumple() {\n        edad++\n    }\n    override fun toString(): String {\n        return \"Persona (nombre = $nombre, edad = $edad)\"      \n    } \n    open fun actividad() {\n        println(\"$nombre est\u00e1 realizando una actividad.\")\n    }\n}\n\nclass Estudiante(override val nombre: String, override var edad: Int, val carrera: String) : Persona(nombre, edad) {\n    override fun toString(): String {\n        return \"${super.toString().dropLast(1)}, carrera = $carrera)\"\n    }\n    override fun actividad() {\n        println(\"$nombre est\u00e1 estudiando $carrera.\")\n    }\n}\n</code></pre> </li> </ul> </li> <li> <p>Clases y Objetos con Validaci\u00f3n:</p> <ul> <li>Modifica la clase <code>Persona</code> para que no acepte nombres vac\u00edos y edades negativas. Utiliza un constructor primario con valores por defecto para edad.</li> <li>Prueba a crer un estudiante con una edad negativa, controlando las excepciones y mostrando el mensaje de error espec\u00edfico.</li> <li> <p>Ejemplo:</p> <pre><code>class Persona(open val nombre: String, open var edad: Int = 0) {\n    init {\n        require(nombre.isNotBlank()) { \"El nombre no puede estar vac\u00edo.\" }\n        require(edad &gt; 0) { \"La edad no puede ser negativa.\" }\n    }\n    fun mostrarEdad() = edad\n    fun cumple() {\n        edad++\n    }\n    override fun toString(): String {\n        return \"Persona (nombre = $nombre, edad = $edad)\"      \n    } \n    open fun actividad() {\n        println(\"$nombre est\u00e1 realizando una actividad.\")\n    }\n}\n\nfun main() {\n    try {\n        val estudiante = Estudiante(\"Pedro\", -1, \"Derecho\")\n    } catch (e: IllegalArgumentException) {\n        println(e.message)\n    }\n}\n</code></pre> </li> </ul> </li> </ol>"},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_04_GestionPersonal_vSol/","title":"Ej POO2 04 GestionPersonal vSol","text":""},{"location":"section1/u05/practica/otrosRecursos/soluciones/Ej_POO2_04_GestionPersonal_vSol/#ejercicio-sistema-de-gestion-de-personal-en-una-empresa","title":"Ejercicio: Sistema de Gesti\u00f3n de Personal en una Empresa","text":"<p>Requisitos:</p> <ol> <li> <p>Clase Base <code>Persona</code>:</p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>nombre</code> (String)</li> <li><code>edad</code> (Int)</li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>toString()</code>: Devuelve una cadena con informaci\u00f3n b\u00e1sica sobre la persona (por ejemplo, \"Nombre: Julia, Edad: 24\").</li> <li><code>celebrarCumple()</code>: Incrementa la edad en 1 y retorna un mensaje de felicitaci\u00f3n (por ejemplo, \"Feliz cumplea\u00f1os Julia! Ahora tienes 25 a\u00f1os.\").  </li> </ul> </li> </ul> </li> <li> <p>Clase Derivada <code>Empleado</code> (de <code>Persona</code>):</p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>salarioBase</code> (Double) (Intenta permitir tambi\u00e9n que se pueda construir un empleado con un argumento Int en esta propiedad)</li> <li><code>porcentajeImpuestos</code> (Double) (Intenta permitir tambi\u00e9n que se pueda construir un empleado con un argumento Int en esta propiedad) (El valor por defecto es 10.0)</li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>calcularSalario()</code>: Devuelve el salarioBase aplicando los impuestos.</li> <li><code>toString()</code>: Devuelve una cadena que incluye la informaci\u00f3n de <code>Persona</code> y detalles adicionales del <code>Empleado</code> (por ejemplo, \"Nombre: Julia, Edad: 24, Salario: 28213.47\u20ac\" con 2 posiciones decimales para el salario).</li> <li><code>trabajar()</code>: Retorna un mensaje que indica que el empleado est\u00e1 trabajando. (por ejemplo, \"Pablo est\u00e1 trabajando en la empresa.\")</li> </ul> </li> </ul> </li> <li> <p>Clase Derivada <code>Gerente</code> (de <code>Empleado</code>):</p> <ul> <li> <p>Propiedades:</p> <ul> <li><code>bonus</code> (Double)</li> <li><code>exentoImpuestos</code> (Boolean) (Por defecto no estar\u00e1 exento de los impuestos)</li> <li>Sobreescribir el porcentajeImpuestos para que los gerentes tengan un porcentaje de impuestos siempre del 33.99%.</li> </ul> </li> <li> <p>M\u00e9todos:</p> <ul> <li><code>calcularSalario()</code>: Devuelve el salarioBase m\u00e1s el bonus aplicando los impuestos solo al salario base o sin aplicar impuestos si exentoImpuestos es <code>true</code>.</li> <li><code>toString()</code>: Devuelve una cadena que incluye la informaci\u00f3n de <code>Persona</code> y <code>Empleado</code>, adem\u00e1s de detalles espec\u00edficos del <code>Gerente</code>.</li> <li><code>administrar()</code>: Retorna un mensaje que indica que el gerente est\u00e1 administrando. (por ejemplo, \"Ana est\u00e1 administrando la empresa.\")</li> </ul> </li> </ul> </li> <li> <p>Uso en la Funci\u00f3n <code>main</code>:</p> <p>Crear una persona, un empleado y un gerente. Realizar distintas pruebas... para cada uno mostrar su informaci\u00f3n y ejecutar los m\u00e9todos que tienen accesibles.</p> </li> <li> <p>Soluci\u00f3n:</p> <pre><code>open class Persona(open val nombre: String, open var edad: Int) {\n\n    override fun toString() = \"Nombre: $nombre, Edad: $edad\"\n\n    fun celebrarCumple(): String {\n        edad += 1\n        return \"Feliz cumplea\u00f1os $nombre! Ahora tienes $edad a\u00f1os.\"\n    }\n}\n</code></pre> <pre><code>open class Empleado(\n    nombre: String, \n    edad: Int, \n    val salarioBase: Double, \n    open val porcentajeImpuestos: Double = 10.0\n) : Persona(nombre, edad) {\n\n    constructor(nombre: String, edad: Int, salarioBase: Int) : this(nombre, edad, salarioBase.toDouble())\n\n    constructor(nombre: String, edad: Int, salarioBase: Int, porcentajeImpuestos: Int) : this(nombre, edad, salarioBase.toDouble(), porcentajeImpuestos.toDouble())\n\n    open fun calcularSalario() = salarioBase * (1 - porcentajeImpuestos/100)\n\n    override fun toString() = \"${super.toString()}, Salario: ${\"%.2f\".format(calcularSalario())}\"\n\n    fun trabajar() = \"$nombre est\u00e1 trabajando.\"\n}\n</code></pre> <pre><code>class Gerente(\n    nombre: String,\n    edad: Int,\n    salarioBase: Double,\n    private val bonus: Double,\n    private val exentoImpuestos: Boolean = false\n) : Empleado(nombre, edad, salarioBase) {\n\n    //override val porcentajeImpuestos: Double = 33.99\n    override val porcentajeImpuestos: Double\n    get() = 33.99\n\n    override fun calcularSalario() : Double {\n        return if (exentoImpuestos) {\n            salarioBase + bonus\n        }\n        else {\n            super.calcularSalario() + bonus\n        }\n    }\n\n    override fun toString() = \"${super.toString()}, Bonus: $bonus\"\n\n    fun administrar() = \"$nombre est\u00e1 administrando.\"\n}\n</code></pre> <pre><code>fun main() {\n  val persona = Persona(\"Julia\", 19)\n  println(persona)\n  println(persona.celebrarCumple())\n\n  val empleado = Empleado(\"Pablo\", 27, 30000.67, 19.53)\n  println(empleado)\n  println(empleado.trabajar())\n  println(empleado.celebrarCumple())\n\n  val gerente = Gerente(\"Ana\", 40, 50000.0, 10000.0)\n  println(gerente)\n  println(gerente.trabajar())\n  println(gerente.administrar())\n  println(gerente.celebrarCumple())\n}\n</code></pre> </li> </ol>"},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/","title":"UD 5 - 5.1 Revisi\u00f3n de las clases/objetos","text":"","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#51-revisitando-las-clases-y-los-objetos","title":"5.1. Revisitando las clases y los objetos","text":"<p>En Kotlin, la Programaci\u00f3n Orientada a Objetos (POO) se maneja con una sintaxis concisa y poderosas caracter\u00edsticas que simplifican la codificaci\u00f3n y mejoran la legibilidad. Entre estas caracter\u00edsticas, las clases y objetos juegan un papel central, permitiendo a los desarrolladores modelar el mundo real de manera eficiente y efectiva. Kotlin, dise\u00f1ado para ser completamente interoperable con Java, introduce mejoras significativas sobre este, haciendo que el trabajo con POO sea m\u00e1s intuitivo y menos propenso a errores.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#1-data-class","title":"1. Data class","text":"<p>Las clases de datos, o \"data classes\", son una caracter\u00edstica de Kotlin dise\u00f1ada para contener datos puros. Son particularmente \u00fatiles cuando necesitas crear clases que act\u00faen principalmente como contenedores de datos sin mucha l\u00f3gica adicional.</p> <p>Un ejemplo de data class en Kotlin: <pre><code>data class User(val name: String, val age: Int, val email: String)\n</code></pre></p> <p>La clase de datos anterior define una clase <code>User</code> con dos propiedades: <code>name</code>, <code>age</code> y <code>email</code>. Kotlin genera autom\u00e1ticamente m\u00e9todos como <code>equals()</code>, <code>hashCode()</code>, y <code>toString()</code> para esta clase, lo que la hace muy conveniente para trabajar con datos de forma clara y concisa.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#11-cuando-usarlas","title":"1.1. \u00bfCu\u00e1ndo usarlas?","text":"<p>Aqu\u00ed te explico cu\u00e1ndo es especialmente apropiado usarlas:</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#111-modelado-de-datos-simples","title":"1.1.1. Modelado de Datos Simples","text":"<p>Usa data classes cuando necesites modelar datos simples y concisos. Por ejemplo, si est\u00e1s creando una aplicaci\u00f3n que maneja usuarios, una data class podr\u00eda ser perfecta para representar un usuario con propiedades como nombre, edad y correo electr\u00f3nico. Las data classes te permiten definir estos datos de forma clara y legible.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#112-objetos-inmutables","title":"1.1.2. Objetos Inmutables","text":"<p>Las data classes son una buena elecci\u00f3n cuando prefieres trabajar con objetos inmutables. Aunque Kotlin permite propiedades mutables en data classes, el paradigma funcional favorece la inmutabilidad para evitar efectos secundarios. Es decir, si prefieres que tus objetos de datos no cambien una vez creados, las data classes son una excelente opci\u00f3n. Ademas, proporcionan un m\u00e9todo <code>copy()</code> que te permite crear copias inmutables de un objeto con propiedades modificadas.</p> <pre><code>data class User(val name: String, val age: Int, val email: String)\n\nval jack = User(name = \"Jack\", age = 1, email = \"jack@sd.es\")\nval olderJack = jack.copy(age = 2) // Crear una copia inmutable con la edad modificada\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#113-necesidad-de-metodos-utiles-integrados","title":"1.1.3. Necesidad de M\u00e9todos \u00datiles Integrados","text":"<p>Kotlin genera autom\u00e1ticamente m\u00e9todos \u00fatiles para data classes, como <code>equals()</code>, <code>hashCode()</code>, y <code>toString()</code>. Esto es muy \u00fatil para comparar instancias de data classes o para imprimir sus propiedades de forma legible. Si necesitas estas funcionalidades \"gratis\" sin implementarlas t\u00fa mismo, las data classes son el camino a seguir.</p> <p>Los m\u00e9todos generados autom\u00e1ticamente por Kotlin para data classes son: - <code>equals()</code>: Compara dos instancias de la clase por igualdad estructural. Equivale a usar el operador <code>==</code>. - <code>hashCode()</code>: Devuelve un valor hash \u00fanico para cada instancia de la clase. - <code>toString()</code>: Devuelve una representaci\u00f3n de cadena de la instancia de la clase.</p> <pre><code>// uso de metodos generados equals(), hashCode() y toString()\ndata class User(val name: String, val age: Int)\n\nval jack = User(name = \"Jack\", age = 1)\nval olderJack = User(name = \"Jack\", age = 1)\n\nprintln(jack == olderJack) // =&gt; true\nprintln(jack.hashCode() == olderJack.hashCode()) // =&gt; true\nprintln(jack.toString()) // =&gt; User(name=Jack, age=1)\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#114-destructuracion-de-objetos","title":"1.1.4. Destructuraci\u00f3n de Objetos","text":"<p>Las data classes admiten la destructuraci\u00f3n de objetos de forma nativa. Si quieres descomponer un objeto en varias variables f\u00e1cilmente, las data classes te permiten hacerlo de manera elegante. Esto es especialmente \u00fatil en operaciones como iterar sobre una colecci\u00f3n de objetos de datos y acceder a sus propiedades directamente.</p> <pre><code>data class User(val name: String, val age: Int)\n\nval jane = User(\"Jane\", 35)\nval (name, age) = jane // Destructuraci\u00f3n de objetos, asignando propiedades a variables individuales. Tiene el mismo efecto que val name = jane.name y val age = jane.age\nprintln(\"$name, $age years of age\") // =&gt; Jane, 35 years of age\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#115-uso-con-colecciones-y-operaciones-funcionales","title":"1.1.5. Uso con Colecciones y Operaciones Funcionales","text":"<p>Si trabajas frecuentemente con colecciones y realizas operaciones funcionales sobre ellas (como filtrar, mapear, etc.), las data classes pueden ser muy pr\u00e1cticas. Permiten representar elementos de colecciones de una manera clara y concisa, facilitando operaciones funcionales sobre esos datos.</p> <pre><code>data class User(val name: String, val age: Int)\n\nval users = listOf(User(\"Alice\", 25), User(\"Bob\", 30), User(\"Charlie\", 35))\n\nval names = users.map { it.name } // Operaci\u00f3n funcional para mapear la lista de usuarios a una lista de nombres\nval adults = users.filter { it.age &gt;= 30 } // Operaci\u00f3n funcional para filtrar la lista de usuarios para obtener solo los mayores de 30 a\u00f1os\n</code></pre> <p>Como puedes ver, son bastante \u00fatiles. \u00dasalas cuando quieras simplicidad, claridad y funcionalidad integrada para tus objetos de datos.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#12-como-se-implementan-en-kotlin","title":"1.2. \u00bfC\u00f3mo se implementan en kotlin?","text":"<p>Las data classes son ideales para casos donde la principal responsabilidad de la clase es almacenar datos. De ahi que estas clases se definen con la palabra clave <code>'data'</code>. No son la mejor opci\u00f3n cuando tu clase necesita contener mucha l\u00f3gica de negocio o cuando la herencia (m\u00e1s all\u00e1 de implementar interfaces) es una parte crucial del dise\u00f1o de tu clase.</p> <pre><code>data class User(val name: String, val age: Int)\n</code></pre> <p>De forma autom\u00e1tica el compilador crear los m\u00e9todos <code>hashCode()</code>, <code>equals()</code>, <code>copy()</code> y <code>toString()</code> a partir de todas las propiedades declaradas en el constructor primario. Tambi\u00e9n se generan las funciones <code>componentN()</code> que corresponden a las propiedades declaradas en orden en el constructor primario.</p> <p>Para evitar comportamientos extra\u00f1os estas clases deben cumplir ciertos requisitos:</p> <ul> <li>El constructor primario necesita tener al menos un par\u00e1metro.    </li> <li>Todos los par\u00e1metros del constructor primario estar\u00e1n marcados como <code>'val'</code> o <code>'var'</code>.    </li> <li>Una 'data class' no puede ser <code>'abstract'</code>, <code>'open'</code>, <code>'sealed'</code> o <code>'inner'</code>.     </li> <li>(Antes de 1.1) Las 'data classes' no pueden extender de otras clases (pero pueden implementar interfaces).    </li> </ul> <p>El compilador s\u00f3lo tiene en cuenta las propiedades declaradas en el constructor primario a la hora de generar los m\u00e9todos de forma autom\u00e1tica. Por tanto, para excluir propiedades se deben declarar en el cuerpo de la clase.</p> <pre><code>data class DataClassExample(val x: Int, val y: Int, val z: Int) {\n    // Propiedad excluida\n    var xx; Int = 0\n}\n\nval fooData = DataClassExample(1, 2, 4)\nval fooCopy = fooData.copy(y = 100)\n\n// El formato de 'toString()' es el mismo 'ClassName(prop=xx, prop=yy, ....)'\nprintln(fooData) // =&gt; DataClassExample(x=1, y=2, z=4)\nprintln(fooCopy) // =&gt; DataClassExample(x=1, y=100, z=4)\n</code></pre> <p>El compilador genera la funci\u00f3n <code>copy()</code> que permite copiar un objeto y en caso necesario, crear la copia alterando algunas de sus propiedades y manteniendo el resto.</p> <pre><code>data class User(val name: String, val age: Int)\n\n// Funci\u00f3n 'copy()' generada autom\u00e1ticamente\n// fun copy(name: String = this.name, age: Int = this.age) = User(name, age)\n\nval jack = User(name = \"Jack\", age = 1)\n\n// Copiamos el objeto pero modificando la propiedad 'age'\nval olderJack = jack.copy(age = 2)\n</code></pre> <p>Las funciones <code>componentN()</code> permite desestructurar las propiedades:</p> <pre><code>val jane = User(\"Jane\", 35)\nval (name, age) = jane\nprintln(\"$name, $age years of age\") // =&gt; Jane, 35 years of age\n</code></pre> <p>Cada clase deriva de <code>'Any'</code>, y viene con una declaraci\u00f3n de m\u00e9todo <code>'hashCode()'</code>. Esto es el equivalente de un m\u00e9todo <code>'hashCode()'</code> de clase 'Object' de Java. Este m\u00e9todo es importante cuando se insertan instancias del objeto en colecciones, como un mapa. Al implementar este m\u00e9todo, se debe cumplir con una serie de requisitos:</p> <ol> <li>Cuando se invoque en el mismo objeto m\u00e1s de una vez durante el tiempo de ejecuci\u00f3n sin que haya sufrido cambios, el m\u00e9todo <code>'hashCode()'</code> debe devolver constantemente el mismo valor, dado que el objeto no se modific\u00f3.      </li> <li>Si para dos objetos el m\u00e9todo <code>'equals()'</code>  devuelve true, entonces llamar al m\u00e9todo <code>'hashCode()'</code> en cada uno de ellos deber\u00eda devolver el mismo valor entero.      </li> <li>Si dos objetos no son iguales, es decir, que el m\u00e9todo <code>'equals()'</code> devuelve false cuando se comparan, no es un requisito que cada m\u00e9todo <code>'hashCode()'</code> del objeto devuelva valores distintos. Sin embargo, producir un entero distinto para objetos desiguales podr\u00eda mejorar el rendimiento de las colecciones basadas en 'hash'.     </li> </ol> <p>Las 'data classes' son un forma compacta y legible de devolver dos o m\u00e1s valores de una funci\u00f3n. Otra alternativa, menos legible, es utilizar el tipo <code>'Pair'</code> o <code>'Triple'</code> proporcionado por Kotlin:</p> <pre><code>data class Result(val result: Int, val status: Boolean)\n\nfun checkStatus() = Result(10, true)  // funci\u00f3n que retorna un tipo 'Result'\n\nval (result, status) = checkStatus() // usamos la desestructuraci\u00f3n de datos para acceder a los datos\n</code></pre> <p>Aqu\u00ed puedes ver un ejemplo en el que se compara una data class en java con una data class en kotlin: data Class</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#2-sealed-classes","title":"2. Sealed classes","text":"<p>Las clases selladas, o \"sealed classes\", son un concepto poderoso en Kotlin que te permite restringir la jerarqu\u00eda de herencia. Son especialmente \u00fatiles en casos donde un valor puede tener uno de varios tipos espec\u00edficos, pero no puede tener cualquier otro tipo. </p> <p><pre><code>sealed class ResultadoOperacion {\n    data class Exito(val data: String): ResultadoOperacion()\n    data class Error(val error: Exception): ResultadoOperacion()\n}\n\nfun procesarResultado(resultado: ResultadoOperacion) {\n    when (resultado) {\n        is ResultadoOperacion.Exito -&gt; println(\"Operaci\u00f3n exitosa: ${resultado.data}\")\n        is ResultadoOperacion.Error -&gt; println(\"Error en la operaci\u00f3n: ${resultado.error.message}\")\n    }\n}\n</code></pre> En el ejemplo anterior, la variable <code>resultado</code> de tipo <code>ResultadoOperacion</code> puede ser de tipo <code>Exito</code> o <code>Error</code>, pero no de ning\u00fan otro tipo. Las sealed classes permiten definir un conjunto limitado de subclases que pueden ser utilizadas para representar diferentes estados o resultados de manera segura y controlada.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#21-cuando-usarlas","title":"2.1. \u00bfCu\u00e1ndo usarlas?","text":"<p>Aqu\u00ed te dejo algunos escenarios en los cuales es ideal usarlas:</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#211-modelado-de-estados-o-resultados-limitados","title":"2.1.1. Modelado de Estados o Resultados Limitados","text":"<p>Cuando est\u00e1s modelando un conjunto finito de estados para un sistema o los posibles resultados de una operaci\u00f3n, las sealed classes son tu mejor opci\u00f3n. Permiten representar de manera segura y clara estos estados limitados, garantizando que todos los casos posibles sean cubiertos durante la compilaci\u00f3n, como vimos en el ejemplo anterior.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#212-uso-en-patrones-de-diseno-tipo-cuando-when","title":"2.1.2. Uso en Patrones de Dise\u00f1o Tipo \"Cuando\" (when)","text":"<p>Las sealed classes son particularmente \u00fatiles con el patr\u00f3n de dise\u00f1o \"when\" en Kotlin, ya que el compilador puede verificar si todos los casos posibles han sido cubiertos. Esto elimina la necesidad de un cl\u00e1usula <code>else</code> innecesaria y aumenta la seguridad del c\u00f3digo al garantizar que todos los casos posibles sean considerados. </p> <pre><code>sealed class ResultadoOperacion {\n    data class Exito(val data: String): ResultadoOperacion()\n    data class Error(val error: Exception): ResultadoOperacion()\n}\n\nfun procesarResultado(resultado: ResultadoOperacion) {\n    when (resultado) {\n        is ResultadoOperacion.Exito -&gt; println(\"Operaci\u00f3n exitosa: ${resultado.data}\")\n        is ResultadoOperacion.Error -&gt; println(\"Error en la operaci\u00f3n: ${resultado.error.message}\")\n    }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#213-definicion-de-api-internas-y-controladas","title":"2.1.3. Definici\u00f3n de API Internas y Controladas","text":"<p>Si est\u00e1s dise\u00f1ando una API o un conjunto de interacciones dentro de tu m\u00f3dulo o librer\u00eda y quieres controlar estrictamente c\u00f3mo pueden ser extendidas o utilizadas las clases, las clases selladas son una excelente elecci\u00f3n. Limitan la creaci\u00f3n de subclases a las definidas dentro del mismo archivo, manteniendo un control sobre la extensi\u00f3n y uso de tu API.</p> <pre><code>sealed class Shape\n\nclass Circle : Shape()\nclass Triangle : Shape()\nclass Rectangle: Shape()\n</code></pre> <p>En este ejemplo, la clase <code>Shape</code> es sellada, lo que significa que solo las subclases <code>Circle</code>, <code>Triangle</code> y <code>Rectangle</code> pueden extenderla. Esto asegura que no se puedan crear subclases adicionales fuera de este archivo, manteniendo el control sobre la jerarqu\u00eda de clases.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#214-manejo-de-eventos-o-acciones-especificas","title":"2.1.4. Manejo de Eventos o Acciones Espec\u00edficas","text":"<p>En sistemas de manejo de eventos o en la implementaci\u00f3n de patrones como el MVI (Model-View-Intent) en desarrollo de aplicaciones, las sealed classes permiten definir un conjunto cerrado de acciones o eventos que pueden ser manejados o disparados, asegurando que todos los casos sean considerados y tratados adecuadamente.</p> <pre><code>sealed class Evento {\n    object CargarDatos: Evento()\n    data class MostrarError(val mensaje: String): Evento()\n    data class MostrarDatos(val datos: List&lt;String&gt;): Evento()\n}\n\nfun procesarEvento(evento: Evento) {\n    when (evento) {\n        is Evento.CargarDatos -&gt; println(\"Cargando datos...\")\n        is Evento.MostrarError -&gt; println(\"Error: ${evento.mensaje}\")\n        is Evento.MostrarDatos -&gt; println(\"Mostrando datos: ${evento.datos}\")\n    }\n}\n</code></pre> <p>En este ejemplo, la clase sellada <code>Evento</code> define tres tipos de eventos posibles: <code>CargarDatos</code>, <code>MostrarError</code> y <code>MostrarDatos</code>. Cada uno de estos eventos puede ser manejado de manera espec\u00edfica, asegurando que todos los casos posibles sean considerados y tratados adecuadamente. El beneficio de usar sealed classes en este contexto es que el compilador te obliga a considerar todos los casos posibles, evitando errores en tiempo de ejecuci\u00f3n.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#215-simplificacion-de-la-logica-de-negocio","title":"2.1.5. Simplificaci\u00f3n de la L\u00f3gica de Negocio","text":"<p>Al usar sealed classes para representar diferentes tipos de operaciones o entidades con comportamientos espec\u00edficos, puedes simplificar significativamente la l\u00f3gica de negocio. Esto se debe a que puedes usar el tipo de la clase sellada para controlar el flujo de la l\u00f3gica en tu aplicaci\u00f3n, asegur\u00e1ndote de que solo se consideren las instancias permitidas.</p> <p>En los ejemplos anteriores, las sealed classes se utilizan para representar diferentes resultados de operaciones y eventos, lo que simplifica la l\u00f3gica de manejo de estos casos espec\u00edficos. Al usar sealed classes, puedes garantizar que solo se consideren los casos permitidos y que la l\u00f3gica de negocio sea m\u00e1s clara y concisa.k</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#22-como-usarlas","title":"2.2. \u00bfC\u00f3mo usarlas?","text":"<p>En Kotlin una 'sealed class' es una clase abstracta (no se puede crear instancias) que otras clases pueden extender. Estas subclases se definen dentro del cuerpo de la 'sealed class', en el mismo archivo por lo que podemos conocer todas las subclases posibles simplemente viendo el archivo.</p> <p>Las 'sealed class' son una herramienta excelente para cuando necesitas asegurar una jerarqu\u00eda cerrada de clases, lo que te permite manejar de manera exhaustiva y segura los distintos tipos definidos. Usarlas promueve un dise\u00f1o de software m\u00e1s seguro, limpio y mantenible, especialmente en escenarios donde el conjunto de posibles tipos es conocido y limitado. Son, en cierto sentido, una extensi\u00f3n de las clases de enumeraci\u00f3n.</p> <ul> <li>Podemos agregar el modificador <code>'abstract'</code>, pero esto es redundante porque estas clases son abstractas por defecto.</li> <li>No pueden tener el modificador <code>'open'</code> ni <code>'final'</code>.</li> <li>Podemos declarar clases de datos y objetos como subclases a una 'sealed class' (a\u00fan deben declararse en el mismo archivo).</li> <li>No pueden tener constructores p\u00fablicos, ya que sus constructores son privados de forma predeterminada.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#221-ejemplos-practicos","title":"2.2.1 Ejemplos Pr\u00e1cticos","text":"<pre><code>// shape.kt\n\nsealed class Shape\n\nclass Circle : Shape()\nclass Triangle : Shape()\nclass Rectangle: Shape()\n</code></pre> <pre><code>sealed class ResultadoOperacion {\n    data class Exito(val data: String): ResultadoOperacion()\n    data class Error(val error: Exception): ResultadoOperacion()\n}\n</code></pre> <p>Este \u00faltimo ejemplo ilustra c\u00f3mo una operaci\u00f3n puede terminar en \u00e9xito o error, y c\u00f3mo las sealed classes pueden ser usadas para modelar estos dos resultados posibles de manera segura y controlada.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#3-generics","title":"3. Generics","text":"<p>Los gen\u00e9ricos son una herramienta poderosa en programaci\u00f3n que te permite escribir c\u00f3digo m\u00e1s flexible y reutilizable al permitirte trabajar con tipos de datos a\u00fan no especificados.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#31-cuando-usarlos","title":"3.1. \u00bfCu\u00e1ndo usarlos?","text":"<p>Aqu\u00ed tienes algunas situaciones clave en las que es especialmente \u00fatil usar gen\u00e9ricos:</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#311-para-crear-colecciones-tipo-seguras","title":"3.1.1. Para Crear Colecciones Tipo-Seguras","text":"<p>Usa gen\u00e9ricos para crear colecciones que pueden contener cualquier tipo de objetos pero manteniendo la seguridad de tipo. Esto te permite tener, por ejemplo, una lista de <code>Int</code> o una lista de <code>String</code>, asegurando que todos los elementos son del tipo especificado.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#312-cuando-necesitas-clases-interfaces-o-funciones-reutilizables","title":"3.1.2. Cuando Necesitas Clases, Interfaces o Funciones Reutilizables","text":"<p>Cuando quieras que tu clase, interfaz o funci\u00f3n pueda trabajar con diferentes tipos de datos sin estar ligada a ninguno en particular. Los gen\u00e9ricos te permiten escribir un c\u00f3digo que puede ser reutilizado con diferentes tipos, aumentando la reusabilidad y reduciendo la redundancia.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#313-para-implementar-algoritmos-genericos","title":"3.1.3. Para Implementar Algoritmos Gen\u00e9ricos","text":"<p>Cuando est\u00e9s implementando algoritmos que pueden ser aplicados independientemente del tipo de datos, los gen\u00e9ricos son la soluci\u00f3n. Esto es \u00fatil en algoritmos de ordenaci\u00f3n, b\u00fasqueda, y otras operaciones sobre colecciones que no dependen del tipo espec\u00edfico de los elementos.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#314-para-aumentar-la-legibilidad-y-la-seguridad-del-codigo","title":"3.1.4. Para Aumentar la Legibilidad y la Seguridad del C\u00f3digo","text":"<p>Los gen\u00e9ricos te ayudan a escribir c\u00f3digo m\u00e1s claro y seguro, evitando el uso excesivo de casting y reduciendo la posibilidad de errores en tiempo de ejecuci\u00f3n relacionados con tipos incorrectos.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#315-para-desarrollar-bibliotecas-y-frameworks","title":"3.1.5. Para Desarrollar Bibliotecas y Frameworks","text":"<p>Si est\u00e1s desarrollando una biblioteca o framework que ser\u00e1 utilizado en una variedad de contextos y con diferentes tipos de datos, los gen\u00e9ricos te permiten proporcionar componentes flexibles y tipo-seguros que pueden ser personalizados por los usuarios seg\u00fan sus necesidades espec\u00edficas.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#32-como-usarlos","title":"3.2. \u00bfComo usarlos?","text":"<p>Los gen\u00e9ricos son fundamentales cuando buscas escribir c\u00f3digo m\u00e1s abstracto, flexible y reutilizable, permiti\u00e9ndote definir comportamientos que son independientes del tipo de datos con los que trabajan. Su uso correcto puede llevar a un dise\u00f1o de software m\u00e1s limpio, seguro y f\u00e1cil de mantener. Los siguientes conceptos son \u00fatiles para entender c\u00f3mo funcionan los gen\u00e9ricos en Kotlin:</p> <p>'Covariance' y 'contravariance' son t\u00e9rminos que hacen referencia a la capacidad de usar un tipo m\u00e1s derivado (m\u00e1s espec\u00edfico) o menos derivado (menos espec\u00edfico) que el indicado originalmente. Los par\u00e1metros de tipo gen\u00e9rico admiten estos t\u00e9rminos para proporcionar mayor flexibilidad a la hora de asignar y usar tipos gen\u00e9ricos. Cuando se hace referencia a un sistema de tipos, se definen como:</p> <ul> <li>'Covariance' -&gt; Permite usar un tipo m\u00e1s derivado que el especificado originalmente. Puede asignar una instancia de <code>Class&lt;Derived&gt;</code> a una variable de tipo <code>Class&lt;Base&gt;</code>.</li> <li>'Contravariance' -&gt; Permite usar un tipo m\u00e1s gen\u00e9rico (menos derivado) que el especificado originalmente. Puede asignar una instancia de <code>Class&lt;Base&gt;</code> a una variable de tipo <code>Class&lt;Derived&gt;</code>.</li> <li>'Invariance' -&gt; Significa que solo se puede usar el tipo especificado originalmente. As\u00ed, un par\u00e1metro de tipo gen\u00e9rico invariable no es covariante ni contravariante. No se puede asignar una instancia de <code>List&lt;Base&gt;</code> a una variable de tipo <code>List&lt;Derived&gt;</code> o viceversa.</li> </ul> <p>Al igual que en Java, en Kotlin las clases pueden tener tipos con par\u00e1metros.</p> <pre><code>class Box&lt;T&gt;(t: T) {\n    var value = t\n}\n</code></pre> <p>En general, para crear una instancia de una clase gen\u00e9rica tenemos que proveer el tipo a la clase:</p> <pre><code>val box: Box&lt;Int&gt; = Box&lt;Int&gt;(1)\n</code></pre> <p>Si los par\u00e1metros se pueden inferir, como por ejemplo de los argumentos del constructor o por alg\u00fan otro medio, se pueden omitir los argumentos de tipo:</p> <pre><code>val box = Box(1) // '1' tiene tipo Int as\u00ed que el compilador infiere el tipo \"Box&lt;Int&gt;\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#321-la-palabra-clave-out","title":"3.2.1. La palabra clave 'out'","text":"<p>Digamos que queremos crear una clase de productor que producir\u00e1 un resultado de alg\u00fan tipo 'T'. A veces; queremos asignar ese valor producido a una referencia que es de un supertipo del tipo 'T'.</p> <p>Para lograr eso usando Kotlin, necesitamos usar la palabra clave <code>'out'</code> en el tipo gen\u00e9rico. Esto significa que podemos asignar esta referencia a cualquiera de sus supertipos. El valor de salida solo puede ser producido por la clase dada pero no consumido:</p> <pre><code>class ParameterizedProducer&lt;out T&gt;(private val value: T) {\n    fun get(): T {\n        return value\n    }\n}\n\nval a = ParameterizedProducer(\"string\") // ParameterizedProducer&lt;String&gt;\nval x: ParameterizedProducer&lt;Any&gt; = a // Correcto\n\nval b = ParameterizedProducer(10) // ParameterizedProducer&lt;Int&gt;\nval y: ParameterizedProducer&lt;Number&gt; = b // Correcto\nval z: ParameterizedProducer&lt;String&gt; = b // \u00a1Error de compilaci\u00f3n!\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#322-la-palabra-clave-in","title":"3.2.2. La palabra clave 'in'","text":"<p>A veces, tenemos una situaci\u00f3n opuesta, lo que significa que tenemos una referencia de tipo T y queremos poder asignarla al subtipo de T.</p> <p>Podemos usar la palabra clave <code>'in'</code> en el tipo gen\u00e9rico si queremos asignarlo a la referencia de su subtipo. La palabra clave <code>'in'</code> solo se puede utilizar en el tipo de par\u00e1metro que se consume, no se produce:</p> <pre><code>class ParameterizedConsumer&lt;in T&gt; {\n    fun toString(value: T): String {  // 'toString()' will only be consuming a value of type T.\n        return value.toString()\n    }\n}\n\nval a = ParameterizedConsumer&lt;Number&gt;()\n\nval b: ParameterizedConsumer&lt;Double&gt; = a // Correcto\nval c: ParameterizedConsumer&lt;Int&gt; = a // Correcto\nval d: ParameterizedConsumer&lt;String&gt; = a // \u00a1Error de compilaci\u00f3n!\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#323-star-projections","title":"3.2.3. Star projections","text":"<p>Hay situaciones en las que no es importante el tipo espec\u00edfico de un valor. Para ello usamos el operador <code>'*'</code> o 'star projection':</p> <pre><code>fun printArray(array: Array&lt;*&gt;) {\n    array.forEach { println(it) }\n}\n\n// Podemos pasar una matriz de cualquier tipo al m\u00e9todo 'printArray()'\nprintArray(arrayOf(1,2,3))\n\nprintArray(arrayOf(\"hello\", \"World!!\", 5))\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#324-generic-functions","title":"3.2.4. Generic functions","text":"<p>Las funciones tambi\u00e9n pueden ser gen\u00e9ricas en los tipos que utilizan. Esto permite escribir una funci\u00f3n que puede funcionar con cualquier tipo, en lugar de solo un tipo espec\u00edfico. Para ello, definimos los par\u00e1metros de tipo en la firma de funci\u00f3n.</p> <pre><code>fun &lt;T&gt; choose(t1: T, t2: T, t3: T): T {\n    return when (Random().nextInt(3)) {\n        0 -&gt; t1\n        1 -&gt; t2\n        else -&gt; t3\n    }\n}\n\n// Podemos usar esta funci\u00f3n con enteros. Si el compilador puede inferir el tipo se puede omitir.\nval r = choose&lt;Int&gt;(5, 7, 9)\nval r = choose(5, 7, 9)\n\n// Tambi\u00e9n es v\u00e1lido usar la funci\u00f3n con Strings\nval s = choose&lt;String&gt;(\"BMW\", \"Audi\", \"Ford\")\nval s = choose(\"BMW\", \"Audi\", \"Ford\")\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#325-generic-constraints","title":"3.2.5. Generic constraints","text":"<p>El conjunto de todos los tipos posibles que pueden sustituirse por un par\u00e1metro de tipo dado puede estar restringido por restricciones gen\u00e9ricas.</p> <p>El tipo m\u00e1s com\u00fan de restricci\u00f3n es un l\u00edmite superior que corresponde a la palabra clave de extensi\u00f3n de Java:</p> <pre><code>fun &lt;T : Comparable&lt;T&gt;&gt; sort(list: List&lt;T&gt;) {  ... }\n\nsort(listOf(1, 2, 3)) // OK. Int is a subtype of Comparable&lt;Int&gt;\nsort(listOf(HashMap&lt;Int, String&gt;())) // Error: HashMap&lt;Int, String&gt; is not a subtype of Comparable&lt;HashMap&lt;Int, String&gt;&gt;\n</code></pre> <p>El l\u00edmite superior predeterminado (si no se especifica) es <code>'Any?'</code>.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#4-clases-internamente-agrupadas","title":"4. Clases Internamente Agrupadas","text":"<p>En Kotlin, tenemos estas 'Clases Internamente Agrupadas', que pueden ser o bien 'Nested Classes' sin acceso directo a la clase exterior, o bien 'Inner Classes' que s\u00ed tienen acceso.\"</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#41-cuando-usarlas","title":"4.1. \u00bfCu\u00e1ndo usarlas?","text":"<p>Para explicar cu\u00e1ndo usar una Inner Class y cu\u00e1ndo optar por una Nested Class, podemos utilizar analog\u00edas que ayuden a comprender su prop\u00f3sito y diferencias en contextos reales. Es posible que necesites releer esta secci\u00f3n varias veces para comprender completamente las diferencias entre las dos.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#411-inner-class-el-miembro-de-la-familia","title":"4.1.1. Inner Class: El Miembro de la Familia","text":"<p>Imagina que una clase es como una casa familiar. Una Inner Class ser\u00eda como un miembro de esta familia que vive en la casa. Este miembro tiene acceso completo a todos los recursos y secretos de la casa (la clase externa) porque es parte integral de la familia. Puede interactuar libremente con los dem\u00e1s miembros y utilizar todo lo que est\u00e1 en la casa.</p> <p>\u00bfCu\u00e1ndo usarla? Utiliza una Inner Class cuando necesites una clase que est\u00e9 estrechamente vinculada a la clase externa y que necesite acceder a sus miembros, incluidos los privados. Es \u00fatil cuando tu clase interna debe \"conocer\" a la clase externa y colaborar estrechamente con ella, como un miembro de la familia que trabaja en un proyecto familiar.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#412-nested-class-el-vecino-independiente","title":"4.1.2. Nested Class: El Vecino Independiente","text":"<p>Por otro lado, una Nested Class (espec\u00edficamente una clase anidada est\u00e1tica en lenguajes que lo soportan) es como un vecino que vive al lado de tu casa. Aunque comparten la misma localizaci\u00f3n (el archivo fuente), este vecino tiene su propia vida y no necesita entrar a tu casa para conseguir lo que necesita. No tiene acceso directo a tus recursos privados, pero a\u00fan as\u00ed, puede interactuar con la familia (la clase externa) en cierta medida, mediante interfaces p\u00fablicas.</p> <p>\u00bfCu\u00e1ndo usarla? Opta por una Nested Class cuando necesites agrupar clases que est\u00e1n relacionadas, pero que no necesitan acceso directo a los miembros de la clase externa. Es ideal para situaciones en las que deseas mantener una separaci\u00f3n clara y una independencia funcional, como un vecino que colabora en proyectos comunitarios sin necesidad de acceso a tu casa.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#413-consideraciones-conceptuales","title":"4.1.3. Consideraciones Conceptuales","text":"<ul> <li>Acoplamiento: Si tu clase interna est\u00e1 tan acoplada a la clase externa que no tiene sentido sin ella, una Inner Class es apropiada. Es una relaci\u00f3n \u00edntima y directa, como la de los miembros de una familia.</li> <li>Independencia y Modularidad: Si tu clase puede funcionar de manera independiente de la clase externa, y especialmente si puede ser \u00fatil para otras clases, entonces una Nested Class (est\u00e1tica) es la mejor elecci\u00f3n. Piensa en ella como un vecino que tiene su propia casa y vida pero comparte una comunidad contigo.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#42-como-usarlas","title":"4.2. \u00bfC\u00f3mo usarlas?","text":"<p>La elecci\u00f3n entre Inner Class y Nested Class depende de la relaci\u00f3n que necesitas que tenga tu clase con su clase externa. Considera si tu clase interna necesita estar \u00edntimamente ligada y tener un acceso profundo a la clase externa (Inner Class) o si funciona mejor como una entidad independiente que, aunque relacionada, no necesita acceso directo a los recursos internos de la clase externa (Nested Class).</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#421-nested-classes","title":"4.2.1. Nested classes","text":"<p>Al igual que las funciones, Kotlin permite las clases internas, es decir, clases definidas dentro de otra clase. Son equivalentes a las clases internas est\u00e1ticas en Java.</p> <pre><code>class OuterClass {\n\n    class NestedClass {\n        fun nestedClassFunc() { }\n    }\n}\n\nval nestedClass = OuterClass.NestedClass().nestedClassFunc()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#422-inner-class","title":"4.2.2. Inner class","text":"<p>Las clases internas, por otro lado, pueden hacer referencia a la clase externa en la que se declar\u00f3. Para crear una clase interna, colocamos la palabra clave <code>'inner'</code> antes de la palabra clave <code>'class'</code>.</p> <pre><code>class OuterClass() {\n    val oCPropt: String = \"Yo\"\n\n    inner class InnerClass {\n        fun innerClassFunc() {\n            val outerClass = this@OuterClass\n            print(outerClass.oCPropt)\n        }\n    }\n}\nval demo = OuterClass().InnerClass().innerClassFunc() // =&gt; yo\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#423-diferencias-entre-nested-e-inner-classes","title":"4.2.3 Diferencias entre Nested e Inner classes","text":"<p>\u00a1Vamos a desenredar este l\u00edo de clases en Kotlin con un poco de humor y claridad!</p> <p>Imagina que tienes una familia grande viviendo en una casa enorme. La \"Nested Class\" es como tu primo que vive en la casa pero tiene su propia entrada y no depende de nadie para sus cosas. Es bastante independiente; vive all\u00ed, pero su vida es separada. En Kotlin, una \"Nested Class\" es est\u00e1tica por defecto, lo que significa que no puede acceder directamente a las propiedades de la clase externa. Es como si tu primo no pudiera simplemente abrir tu refrigerador sin preguntar.</p> <p>Por otro lado, la \"Inner Class\" es como tu hermano que vive en la misma habitaci\u00f3n que t\u00fa. Est\u00e1 muy unido a ti y comparte todo contigo. En Kotlin, una \"Inner Class\" est\u00e1 marcada con la palabra clave <code>inner</code> y puede acceder a los miembros de su clase externa. Es como si tu hermano pudiera usar tu computadora port\u00e1til sin tener que pedirte permiso cada vez.</p> <p>Por tanto:</p> <ul> <li>Nested Class (Clase Anidada): Es como un inquilino independiente en tu casa grande. No necesita de la clase externa para funcionar, por lo que no puede acceder a sus miembros directamente. Se declara sin la palabra clave <code>inner</code>.</li> </ul> <p><pre><code>class CasaGrande {\n    class PrimoIndependiente {\n        fun hacerAlgo() {\n            // Puede hacer cosas, pero no puede acceder directamente a lo que est\u00e1 en CasaGrande.\n        }\n    }\n}\n</code></pre> * Inner Class (Clase Interna): Es como un hermano con el que compartes tu habitaci\u00f3n. Tiene acceso completo a todo lo que es tuyo. Se declara con la palabra clave <code>inner</code> y puede acceder a los miembros de la clase externa.</p> <pre><code>class CasaGrande {\n    inner class HermanoCompartido {\n        fun hacerAlgo() {\n            // Puede hacer cosas Y acceder a lo que est\u00e1 en CasaGrande.\n        }\n    }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#5-enumeraciones","title":"5. Enumeraciones","text":"<p>Las enumeraciones, o \"enums\", son tipos especiales en programaci\u00f3n que definen un conjunto de constantes nombradas, mejorando la legibilidad y seguridad de tu c\u00f3digo. </p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#51-cuando-usarlas","title":"5.1. \u00bfCu\u00e1ndo usarlas?","text":"<p>Son \u00fatiles en varios contextos:</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#511-representar-un-conjunto-fijo-de-constantes","title":"5.1.1. Representar un Conjunto Fijo de Constantes","text":"<p>Usa enums cuando necesites representar un grupo fijo de constantes relacionadas. Por ejemplo, los d\u00edas de la semana, los meses del a\u00f1o, o los estados de un pedido (NUEVO, EN PROCESO, ENVIADO, ENTREGADO) son excelentes candidatos para ser modelados como enumeraciones.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#512-control-de-flujo-basado-en-valores-limitados","title":"5.1.2. Control de Flujo Basado en Valores Limitados","text":"<p>Cuando tu l\u00f3gica de negocio implica ramificaciones basadas en un conjunto limitado de valores posibles, las enumeraciones hacen tu c\u00f3digo m\u00e1s legible y menos propenso a errores, permiti\u00e9ndote usar <code>switch</code> o <code>when</code> para gestionar diferentes casos de manera clara.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#513-evitar-valores-magicos","title":"5.1.3. Evitar Valores M\u00e1gicos","text":"<p>Los \"valores m\u00e1gicos\" son n\u00fameros o cadenas literales con significado especial que pueden hacer que el c\u00f3digo sea dif\u00edcil de entender y mantener. Reemplazar estos valores por enums ayuda a evitar este problema, dando un nombre significativo a cada valor.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#514-asegurar-la-consistencia","title":"5.1.4. Asegurar la Consistencia","text":"<p>Si tienes una variable que solo deber\u00eda tomar uno de varios valores predefinidos, definir esos valores como un enum asegura que la variable no pueda contener ning\u00fan otro valor, lo que mejora la integridad de tus datos.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#515-agrupar-datos-relacionados","title":"5.1.5. Agrupar Datos Relacionados","text":"<p>Algunos lenguajes permiten que las enums contengan no solo nombres de constantes, sino tambi\u00e9n propiedades y m\u00e9todos. Esto es \u00fatil para agrupar datos y comportamientos relacionados, por ejemplo, asociar cada estado de un pedido con un mensaje espec\u00edfico o una acci\u00f3n.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#52-como-usarlas","title":"5.2. \u00bfC\u00f3mo usarlas?","text":"<p>Las enumeraciones son una herramienta poderosa para mejorar la legibilidad, la seguridad de tipo y la integridad de tu c\u00f3digo. Son especialmente \u00fatiles cuando trabajas con un conjunto cerrado de valores que conoces de antemano. Usar enums te ayuda a escribir c\u00f3digo m\u00e1s claro y mantenible, asegurando que tus variables solo contengan valores v\u00e1lidos.</p> <p>Las clases de enumeraci\u00f3n son similares a los tipos 'enum' de Java. El uso m\u00e1s b\u00e1sico de las clases de enumeraci\u00f3n es la implementaci\u00f3n de enumeraciones de tipos seguros. Cada constante de la enumeraci\u00f3n es un objeto. Las constantes de la enumeraci\u00f3n est\u00e1n separadas por comas.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#521-ejemplo-practico","title":"5.2.1 Ejemplo pr\u00e1ctico","text":"<p>Imagina que est\u00e1s desarrollando un juego y necesitas representar las direcciones en las que un jugador puede moverse. Podr\u00edas usar una enum para esto:</p> <pre><code>enum class Direccion {\n    NORTE, SUR, ESTE, OESTE\n}\n</code></pre> <p>Este enfoque mejora la legibilidad del c\u00f3digo y asegura que solo se puedan usar las direcciones definidas en la enum, en lugar de cadenas o n\u00fameros arbitrarios.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#522-constructores-de-enumeracion","title":"5.2.2. Constructores de Enumeraci\u00f3n","text":"<p>Ademas, las enumeraciones pueden tener constructor:</p> <pre><code>enum class Direction(val angle: Int) {\n    North(90), West(180), South(270), East(0)\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#523-clases-anonimas-en-enumeraciones","title":"5.2.3. Clases an\u00f3nimas en enumeraciones","text":"<p>En Kotlin las constantes de la enumeraci\u00f3n pueden declarar sus propias clases an\u00f3nimas con sus m\u00e9todos correspondientes, as\u00ed como sobreescribir m\u00e9todos primarios.</p> <p>Si la enumeraci\u00f3n define alg\u00fan miembro, debe separar las definiciones de constantes de enumeraci\u00f3n de las definiciones de miembros con un punto y coma, al igual que en Java.</p> <pre><code>enum class ProtocolState {\n    WAITING {\n        override fun signal() = TALKING\n    },\n\n    TALKING {\n        override fun signal() = WAITING\n    };\n\n    abstract fun signal(): ProtocolState\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#524-metodos-predeterminados-de-enumeracion","title":"5.2.4. M\u00e9todos predeterminados de Enumeraci\u00f3n","text":"<p>En Kotlin las enumeraciones disponen de forma predeterminada de los m\u00e9todos:</p> <ul> <li><code>EnumClass.valueOf(value: String): EnumClass</code> -&gt; Devuelve la constante de enumeraci\u00f3n por su nombre. Lanza un <code>IllegalArgumentException</code> si no existe la constante.</li> <li><code>EnumClass.values(): Array&lt;EnumClass&gt;</code> -&gt; Retorna un array con las constantes de enumeraci\u00f3n.</li> </ul> <p>Adem\u00e1s de los m\u00e9todos las instancias de enumeraci\u00f3n vienen con dos propiedades predefinidas. Uno es <code>'name'</code> de tipo <code>String</code> y el segundo es <code>'ordinal'</code> de tipo <code>Int</code> para obtener la posici\u00f3n de la constante dentro de la enumeraci\u00f3n, teniendo en cuenta que empiezan por 0:</p> <pre><code>enum class Country {\n    Spain, France, Portugal\n}\n\nprintln(Country.Spain) // =&gt; Spain\nprintln(Country.valueOf(\"Spain\")) // =&gt; Spain\n\nprintln(Country.Portugal.name) // =&gt; Portugal\nprintln(Country.France.ordinal) // =&gt; 1\n\nfun countries() {\n    for (country in Country.values()) {\n        println(\"Country: $country\")\n    }\n}\n</code></pre> <p>Aqui puedes ver un ejemplo m\u00e1s avanzado sobre el uso de enum Class en kotlin.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#6-objects","title":"6. Objects","text":"<p>En kotlin, los objetos pueden ser definidos de forma muy similar a las clases. A veces necesitamos crear un objeto con una ligera modificaci\u00f3n de alguna clase, sin declarar expl\u00edcitamente una nueva subclase para ello. Java maneja este caso con clases internas an\u00f3nimas. Kotlin generaliza ligeramente este concepto con 'object expressions' y 'objects declarations'.</p> <p>Estas son algunas de las caracter\u00edsticas de los objetos en Kotlin:</p> <ul> <li>Pueden tener propiedades, m\u00e9todos y un bloque init.</li> <li>Estas propiedades o m\u00e9todos pueden tener modificadores de visibilidad.</li> <li>No pueden tener constructores (primarios o secundarios).</li> <li>Pueden extender otras clases o implementar una interfaz.</li> </ul> <p>Hay importantes diferencias sem\u00e1nticas entre un 'object expression' y un 'object declaration'</p> <ul> <li>Los 'object expression' se ejecutan (y se inicializan) inmediatamente, donde se usan.</li> <li>Los 'object declaration' se inicializan cuando se accede por primera vez, de forma perezosa. Suelen usarse para implementar patrones de dise\u00f1o como el patr\u00f3n 'Singleton'.</li> <li>Por su parte, un 'companion object' se inicializa cuando se carga la clase correspondiente. Se usa para implementar m\u00e9todos y propiedades de nivel de clase en Kotlin.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#61-objects-expressions","title":"6.1. Objects expressions","text":"<p>Para crear un objeto de una clase an\u00f3nima que hereda de alg\u00fan tipo (o tipos), escribimos:</p> <pre><code>fun countClicks(window: JComponent) {\n    var clickCount = 0\n    var enterCount = 0\n\n    window.addMouseListener(object : MouseAdapter() {\n        override fun mouseClicked(e: MouseEvent) {\n            clickCount++\n        }\n\n        override fun mouseEntered(e: MouseEvent) {\n            enterCount++\n        }\n    })\n    // ...\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#62-objects-declarations","title":"6.2. Objects declarations","text":"<p>Colocamos la palabra clave <code>'object'</code> antes del nombre del objeto que queremos crear. De hecho, estamos creando un SINGLETON cuando creamos objetos en Kotlin usando esta construcci\u00f3n ya que solo existe una instancia de un objeto.</p> <pre><code>object ObjectExample {\n    val baseUrl: String = \"http://www.myapi.com/\"\n    fun hello(): String {\n        return \"Hello\"\n    }\n}\n\nprintln(ObjectExample.hello()) // =&gt; Hello\n\nfun useObject() {\n    ObjectExample.hello() // =&gt; Hello\n    val someRef: Any = ObjectExample // Usamos el nombre de los objetos tal como son\n}\n</code></pre> <p>Al igual que una declaraci\u00f3n de variable, una declaraci\u00f3n de objeto no es una expresi\u00f3n y no se puede utilizar en el lado derecho de una declaraci\u00f3n de asignaci\u00f3n.</p> <p>Los objetos en Kotlin pueden utilizarse tambi\u00e9n para crear constantes.</p> <pre><code>object APIConstants {\n    val baseUrl: String = \"http://www.myapi.com/\"\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#7-companion-objects","title":"7. Companion objects","text":"<p>Los 'companion objects' son un tipo de 'object declaration'. Como Kotlin no admite clases, m\u00e9todos y/o propiedades est\u00e1ticas, como las que tenemos en Java (tambien llamadas m\u00e9todos/propiedades de clase),  Kotlin provee los 'companion objects'. Estos objetos son b\u00e1sicamente un objeto que pertenece a una clase que se conoce como la clase complementaria del objeto. Este objeto se indica con la palabra clave <code>'companion'</code>.</p> <p>Similar a los m\u00e9todos est\u00e1ticos en Java, un 'companion object' no est\u00e1 asociado con una instancia de clase, sino con la propia clase.</p> <p>Se puede llamar a los miembros del 'companion object' usando simplemente el nombre de la clase como el calificador, como si fuera un m\u00e9todo est\u00e1tico.</p> <p>Un 'companion object' puede tener nombre que facilitar\u00e1 el ser invocado desde Java aunque es opcional.</p> <pre><code>class Person private constructor(var firstName: String, var lastName: String) {\n\n    // Podemos omitir el nombre del objeto\n    companion object {\n        var count: Int = 0\n        fun create(firstName: String, lastName: String): Person = Person(firstName, lastName)\n\n        // Podemos tener bloques 'init' dentro de un 'companion object'\n        init {\n            println(\"Person companion object created\")\n        }\n    }\n}\nval person = Person.create(\"John\", \"Doe\")\n\nclass MyClass {\n\n    fun sayHello() = println(\"hello\")\n\n    // Objeto con el nombre 'Factory' y que utilizaremos como 'Factory Pattern'\n    companion object Factory {\n        fun create(): MyClass = MyClass()\n\n        fun sayHelloFromCompanion() = MyClass().sayHello() // Podemos acceder a miembros de la clase\n    }\n}\n\nval myClass = MyClass.create()\nMyClass().sayHello() // incorrecto\nMyClass.Factory.sayHelloFromCompanion() // Invocar un m\u00e9todo del 'companion'\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#reference","title":"Reference","text":"<ul> <li>data class</li> <li>class enum</li> <li>https://kotlinlang.org/docs/reference/</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> <li>https://revilofe.github.io/</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-clasesYobjetos/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/","title":"UD 5 - 5.2 Visibilidad en miembros de clases","text":"","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#52-visibilidad-en-miembros-de-clases","title":"5.2. Visibilidad en miembros de clases","text":"<p>En Kotlin, al igual que en una base de superh\u00e9roes, no todo el mundo puede entrar en todas las \u00e1reas. Hay diferentes niveles de acceso dependiendo de qui\u00e9n seas y qu\u00e9 permisos tengas. Los modificadores de visibilidad de Kotlin controlan exactamente esto: qui\u00e9n puede acceder a tus clases, interfaces, funciones y propiedades. Vamos a ver los diferentes niveles de acceso disponibles:</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#1-visibilidad","title":"1. Visibilidad","text":"<p>Los modificadores de visibilidad se utilizan para determinar qu\u00e9 otros elementos del c\u00f3digo tienen acceso al elemento que se est\u00e1 consultando/modificando. Se aplican a algunos elementos diferentes en el c\u00f3digo, en varios niveles de alcance. La forma en que se aplican estas reglas puede variar ligeramente entre estos diferentes usos, lo que puede resultar confuso al principio.</p> <p>Las clases, objetos, interfaces, constructores, funciones/m\u00e9todos, propiedades/atributos y sus 'setters' pueden tener modificadores de visibilidad. (Los 'setters' tendr\u00e1n una visibilidad igual o m\u00e1s restrictiva que la propiedad).</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#11-public","title":"1.1. Public","text":"<p>Este es el valor predeterminado, y se puede acceder a cualquier clase, funci\u00f3n/m\u00e9todo, propiedad/atributo, interfaz u objeto que tenga este modificador desde cualquier lugar.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#12-private","title":"1.2. Private","text":"<p>Se puede acceder a una funci\u00f3n/m\u00e9todo, interfaz o clase de nivel superior que se declara como privada SOLO desde dentro del mismo archivo.</p> <p>Cualquier funci\u00f3n/m\u00e9todo o propiedad/atributo que se declare privada dentro de una clase, objeto o interfaz solo puede ser visible para otros miembros de esa misma clase, objeto o interfaz.</p> <p>Un constructor privado debe usar la palabra clave <code>'constructor'</code>. Si un constructor es marcado como privado no se puede instanciar un objeto con ese constructor, tendr\u00e1 que usarse desde dentro de la misma clase. Su uso m\u00e1s com\u00fan es para crear objetos singleton, desde un companion object un m\u00e9todo llama al constructor, creando una instancia de la clase y se guarda en una propiedad del companion object, y se crea otro m\u00e9todo de clase para acceder a esa propiedad.</p> <pre><code>class Car private constructor(val name: String, val plateNo: String) {\n    companion object {\n        private val car = Car(\"BMW\", \"1234\")\n        fun getInstance() = car\n\n    }\n}\n// Obtengo el objeto coche. \nfun main(){\n    var car = Car.getInstance()\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#13-protected","title":"1.3. Protected","text":"<p>Solo se puede aplicar a propiedades/atributos o funciones/m\u00e9todos dentro de una clase, objeto o interfaz, no se puede aplicar a funciones, clases o interfaces de nivel superior. Las propiedades o funciones con este modificador solo son accesibles dentro de la clase que lo define y cualquier subclase.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#14-internal","title":"1.4. Internal","text":"<p>En un proyecto que tiene un m\u00f3dulo (m\u00f3dulo Gradle o Maven), una clase, objeto, interfaz o funci\u00f3n especificada con este modificador dentro de ese m\u00f3dulo solo es accesible desde ese m\u00f3dulo.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#actividad-1-jugando-con-modificadores-de-visibilidad","title":"Actividad 1: Jugando con Modificadores de Visibilidad","text":"<p>Pregunta: \u00bfC\u00f3mo afectan los modificadores de visibilidad al acceso de una propiedad dentro de una clase y desde fuera de ella en Kotlin?</p> <p>Supongamos que tienes una clase <code>Libro</code> que tiene una propiedad <code>titulo</code> y un m\u00e9todo <code>mostrarTitulo()</code>. Queremos entender c\u00f3mo los diferentes modificadores de visibilidad (<code>private</code>, <code>protected</code>, <code>internal</code>, <code>public</code>) afectan la capacidad de acceder a <code>titulo</code> desde dentro de la clase, desde una subclase, y desde fuera de cualquier clase.  </p> <p>C\u00f3digo:</p> <pre><code>open class Libro {\n    var titulo: String = \"El secreto de Kotlin\"\n\n    fun mostrarTitulo():String {\n        return titulo.uppercase()\n    }\n}\n\nclass Novela : Libro() {\n    fun revelarTitulo():String {\n        titulo.uppercase()\n    }\n}\n\nfun main() {\n    val miLibro = Libro()\n    println(miLibro.mostrarTitulo())  // Intenta acceder a titulo desde aqu\u00ed\n    println(miLibro.titulo)  // Intenta acceder a titulo desde aqu\u00ed\n\n    val miNovela = Novela()\n    println(miNovela.revelarTitulo())  // Intenta acceder a titulo desde aqu\u00ed\n    println(miNovela.titulo)  // Intenta acceder a titulo desde aqu\u00ed\n}\n</code></pre> <p>Respuesta: Para entender el impacto de los modificadores de visibilidad, vamos a modificar el modificador de visibilidad de la propiedad <code>titulo</code> en la clase <code>Libro</code> y observar los resultados:</p> <ul> <li><code>public</code> (Por defecto): La propiedad <code>titulo</code> es accesible desde cualquier parte del c\u00f3digo. En este caso, tanto <code>mostrarTitulo()</code> dentro de <code>Libro</code> como <code>revelarTitulo()</code> dentro de <code>Novela</code> pueden acceder a <code>titulo</code>, as\u00ed como el acceso directo a <code>titulo</code> desde <code>main</code>.</li> <li><code>private</code>: La propiedad <code>titulo</code> solo es accesible dentro de la clase <code>Libro</code>. Ni <code>Novela</code> ni el m\u00e9todo <code>main</code> pueden acceder a <code>titulo</code> directamente. Tendr\u00edas que usar <code>mostrarTitulo()</code> para ver el t\u00edtulo.</li> <li><code>protected</code>: Similar a <code>private</code>, pero permite el acceso desde subclases. En este caso, <code>revelarTitulo()</code> en <code>Novela</code> puede acceder a <code>titulo</code>, pero <code>main</code> no puede.</li> <li><code>internal</code>: La propiedad <code>titulo</code> es accesible desde cualquier archivo dentro del mismo m\u00f3dulo. Si <code>Libro</code>, <code>Novela</code>, y <code>main</code> est\u00e1n en el mismo m\u00f3dulo, todos pueden acceder a <code>titulo</code>. Este acceso es restringido fuera del m\u00f3dulo.</li> </ul> <p>Para modificar el c\u00f3digo y probar cada uno de estos escenarios, simplemente cambia el modificador de <code>titulo</code> en <code>Libro</code> a <code>private</code>, <code>protected</code>, o <code>internal</code> y observa los errores de compilaci\u00f3n que surgen al intentar acceder a <code>titulo</code> desde diferentes partes del c\u00f3digo.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#2-resumen","title":"2. Resumen","text":"<p>Aqu\u00ed te dejo una forma divertida de recordarlo:</p> <ul> <li>Public: Como un parque p\u00fablico; abierto a todos.</li> <li>Private: Como tu diario personal; solo para tus ojos.</li> <li>Protected: Como la cocina en una fiesta; solo para el equipo y familiares cercanos.</li> <li>Internal: Como un club local; solo para los miembros de la comunidad.</li> </ul> <p>\u00a1Ahora ya tienes el poder de controlar qui\u00e9n puede acceder a las partes de tu c\u00f3digo, como un verdadero maestro de la base secreta de superh\u00e9roes de Kotlin!</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#reference","title":"Reference","text":"<ul> <li>Modificadores de acceso</li> <li>Visibility Modifiers</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.2.-VisibilidadEnClases/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/","title":"UD 5 - 5.3 Herencia. Clases abstractas. Interfaces","text":"","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#53-herencia-clases-abstractas-interfaces","title":"5.3. Herencia. Clases abstractas. Interfaces","text":"","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#1-concepto-de-herencia","title":"1. Concepto de Herencia","text":"<p>La herencia es uno de los pilares fundamentales de la OOP, junto con el encapsulamiento, la abstracci\u00f3n y el polimorfismo. Es un mecanismo que permite que una clase, conocida como subclase o clase hija, herede atributos (campos) y comportamientos (m\u00e9todos) de otra clase, llamada superclase o clase padre. Esta relaci\u00f3n no solo facilita la reutilizaci\u00f3n del c\u00f3digo existente sino que tambi\u00e9n establece una jerarqu\u00eda de clases dentro de la arquitectura del software.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#11-objetivos-y-beneficios","title":"1.1. Objetivos y Beneficios","text":"<ul> <li>Reutilizaci\u00f3n de C\u00f3digo: Reduce la duplicaci\u00f3n de c\u00f3digo al permitir que las clases compartan atributos y m\u00e9todos, lo que facilita el mantenimiento y la actualizaci\u00f3n del software.</li> <li>Jerarqu\u00eda de Clases: Establece una estructura l\u00f3gica y jer\u00e1rquica que refleja relaciones del mundo real o categorizaciones l\u00f3gicas, mejorando la legibilidad y organizaci\u00f3n del c\u00f3digo.</li> <li>Extensibilidad: Permite que el software se extienda con nuevas caracter\u00edsticas de manera eficiente, a\u00f1adiendo o modificando comportamientos en las subclases sin afectar la superclase o las clases hermanas.</li> <li>Polimorfismo: Facilita el uso de polimorfismo, donde un objeto de la subclase puede ser tratado como un objeto de la superclase, permitiendo un dise\u00f1o de software m\u00e1s flexible y din\u00e1mico.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#12-mecanismos-y-consideraciones","title":"1.2. Mecanismos y Consideraciones","text":"<ul> <li>Sobrescritura de M\u00e9todos: Las subclases pueden sobrescribir los m\u00e9todos heredados de las superclases para proporcionar implementaciones espec\u00edficas que se ajusten a sus necesidades particulares.</li> <li>Acceso a Miembros Superiores: Las subclases pueden acceder a los miembros (atributos y m\u00e9todos) de la superclase, dependiendo de los modificadores de acceso aplicados (private, protected, etc.).</li> <li>Constructor de la Superclase: Al crear una instancia de una subclase, tambi\u00e9n se debe inicializar la superclase, a menudo llamando expl\u00edcitamente al constructor de la superclase desde el constructor de la subclase.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#13-limitaciones-y-desventajas","title":"1.3. Limitaciones y Desventajas","text":"<ul> <li>Precauci\u00f3n: La herencia puede introducir complejidad y riesgo en el dise\u00f1o del software, por lo que debe usarse con precauci\u00f3n. En general, se recomienda favorecer la composici\u00f3n sobre la herencia.</li> <li>Acoplamiento: Un uso excesivo o inadecuado de la herencia puede llevar a un acoplamiento elevado entre clases, lo que puede complicar el mantenimiento y la escalabilidad del software.</li> <li>Jerarqu\u00edas Profundas: Las jerarqu\u00edas de herencia profundas o complicadas pueden hacer que el c\u00f3digo sea dif\u00edcil de seguir y entender.</li> <li>Flexibilidad vs. Rigidez: Mientras que la herencia promueve la reutilizaci\u00f3n del c\u00f3digo, tambi\u00e9n puede imponer una estructura r\u00edgida, lo que podr\u00eda limitar la flexibilidad del dise\u00f1o si no se usa cuidadosamente.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#14-ejemplo-conceptual","title":"1.4. Ejemplo Conceptual","text":"<p>Imaginemos un sistema de clasificaci\u00f3n biol\u00f3gica. En este sistema, cada nivel hereda caracter\u00edsticas del nivel anterior. As\u00ed, todos los mam\u00edferos comparten ciertas caracter\u00edsticas, pero dentro de los mam\u00edferos, los primates forman un subgrupo con caracter\u00edsticas adicionales, y dentro de los primates, los humanos tienen caracter\u00edsticas a\u00fan m\u00e1s espec\u00edficas. En t\u00e9rminos de OOP, <code>Mam\u00edfero</code> ser\u00eda una superclase de <code>Primate</code>, que a su vez ser\u00eda una superclase de <code>Humano</code>. Cada subclase hereda y potencialmente extiende o modifica las caracter\u00edsticas de su superclase.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#2-herencia-en-kotlin","title":"2. Herencia en Kotlin","text":"<p>La herencia es un concepto clave en la Programaci\u00f3n Orientada a Objetos (POO), permitiendo a los desarrolladores crear nuevas clases basadas en otras preexistentes. Esta caracter\u00edstica es esencial para reutilizar, extender y modificar el comportamiento de clases ya definidas, promoviendo as\u00ed la eficiencia y la reducci\u00f3n de la redundancia en el c\u00f3digo.</p> <p>En Kotlin, la herencia se maneja con una sintaxis clara y reglas espec\u00edficas dise\u00f1adas para mantener la seguridad y la claridad del c\u00f3digo:</p> <ul> <li> <p>Superclase y Subclase: </p> <ul> <li>La superclase (o clase base) es la clase existente de la que se deriva una nueva clase.    </li> <li>La subclase (o clase derivada) es la nueva clase creada, que hereda propiedades y m\u00e9todos de la superclase.    </li> </ul> </li> <li> <p>Herencia Impl\u00edcita: </p> <ul> <li>Al heredar de una superclase, la subclase obtiene autom\u00e1ticamente todos los campos, propiedades y m\u00e9todos de dicha superclase, incluyendo aquellos heredados por la superclase de otras superclases, si las hay.    </li> </ul> </li> <li> <p>Restricci\u00f3n de Herencia: </p> <ul> <li>Kotlin permite una herencia simple, significando que una subclase solo puede tener una clase base directa, aunque puede implementar m\u00faltiples interfaces.   </li> </ul> </li> <li> <p>Herencia Transitiva: </p> <ul> <li>La herencia es transitiva. Si una clase C hereda de B, y B hereda de A, entonces C indirectamente hereda de A.      </li> </ul> </li> <li> <p>Clase Any: </p> </li> <li>Todas las clases en Kotlin heredan de <code>Any</code>, la superclase predeterminada que proporciona m\u00e9todos b\u00e1sicos como <code>equals()</code>, <code>hashCode()</code>, y <code>toString()</code>.    </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#actividad-1-herencia-de-any","title":"Actividad 1: Herencia de <code>Any</code>","text":"<p>Pregunta: \u00bfQu\u00e9 m\u00e9todos y propiedades hereda <code>Example</code> de <code>Any</code>?</p> <p>C\u00f3digo:</p> <pre><code>class Example\n</code></pre> <p>Respuesta: <code>Example</code> hereda de <code>Any</code> los m\u00e9todos <code>equals()</code>, <code>hashCode()</code>, y <code>toString()</code>.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#21-declaracion-de-herencia","title":"2.1. Declaraci\u00f3n de Herencia","text":"<p>Para que una clase herede de otra en Kotlin, se coloca el nombre de la clase base despu\u00e9s de los dos puntos en el encabezado de la subclase. Las clases en Kotlin son <code>final</code> por defecto (por similitud con java, utilizando <code>final</code> cuando se decide no permitir heredar de una clase); para permitir la herencia, se debe usar <code>open</code>.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#actividad-2-instancia-de-clases-base-y-derivadas","title":"Actividad 2: Instancia de Clases Base y Derivadas","text":"<p>Pregunta: \u00bfCrear una variable de clase <code>Base</code>? \u00bfPuedes asignarle una instancia de <code>DerivedWithConstructor</code>?</p> <p>C\u00f3digo:</p> <pre><code>open class Base(var p: Int)\nclass DerivedWithConstructor(p: Int) : Base(p)\n</code></pre> <p>Respuesta: S\u00ed, puedes crear una variable de tipo <code>Base</code> y asignarle una instancia de <code>DerivedWithConstructor</code> debido a la herencia y polimorfismo.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#22-herencia-sin-constructor-primario","title":"2.2. Herencia sin Constructor Primario","text":"<p>Si una clase derivada no tiene un constructor primario, cada constructor secundario debe inicializar la clase base usando <code>super</code> o delegar a otro constructor de la clase derivada que lo haga.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#actividad-3-trabajando-con-constructores-secundarios","title":"Actividad 3: Trabajando con Constructores Secundarios","text":"<p>Pregunta: Ejecuta el siguiente c\u00f3digo, instancia la subclase con 1 e imprime el valor de <code>p</code>. \u00bfQu\u00e9 muestra en pantalla? \u00bfQu\u00e9 sucede si quitas el constructor de la subclase? \u00bfPodemos definir la subclase de otra forma? \u00bfQu\u00e9 tenemos que hacer para llamar al constructor de 2 par\u00e1metros?</p> <p>C\u00f3digo:</p> <pre><code>open class Base(var p: Int) {\n  constructor(p: Int, q: Int): this(p)\n}\n\nclass DerivedWithoutConstructor : Base {\n  constructor(p: Int) : super(p)\n}\n\nfun main() {\n  val instancia = DerivedWithoutConstructor(1)\n  println(instancia.p)\n}\n</code></pre> <p>Respuesta:</p> <ul> <li>Al ejecutar, muestra <code>1</code> en pantalla, indicando el valor de <code>p</code>.</li> <li>Si quitas el constructor de la subclase, el c\u00f3digo no compilar\u00e1 porque <code>DerivedWithoutConstructor</code> necesita definir c\u00f3mo inicializar <code>Base</code>.</li> <li>Para definir la subclase de otra manera, podr\u00edamos considerar agregar un constructor primario o utilizar un constructor secundario que llame al constructor de dos par\u00e1metros de <code>Base</code>.</li> <li>Para llamar al constructor de 2 par\u00e1metros de <code>Base</code>, necesitamos definir expl\u00edcitamente ese constructor en la subclase y utilizar <code>super(p, q)</code> dentro del constructor secundario.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#3-sobreescritura","title":"3. Sobreescritura","text":"<p>La sobreescritura de m\u00e9todos o propiedades, tambi\u00e9n conocida como \"overriding\", es un concepto clave en la programaci\u00f3n orientada a objetos (OOP) que se refiere a la capacidad de una clase derivada (subclase) de proporcionar una implementaci\u00f3n espec\u00edfica para un m\u00e9todo o propiedad que ya est\u00e1 definido en su clase base (superclase). Este mecanismo permite a las subclases ajustar o mejorar el comportamiento heredado de la superclase seg\u00fan sus propias necesidades.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#31-conceptos-fundamentales","title":"3.1. Conceptos Fundamentales","text":"<ul> <li>Polimorfismo: La sobreescritura es una forma de polimorfismo, que permite que un objeto de una subclase se comporte de manera diferente al mismo m\u00e9todo o propiedad definido en la superclase.</li> <li>Invocaci\u00f3n Din\u00e1mica: Cuando un m\u00e9todo sobreescrito se invoca en un objeto, la versi\u00f3n del m\u00e9todo que se ejecuta es la que corresponde a la clase real del objeto, no necesariamente la clase desde la cual se hace la llamada.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#32-como-funciona","title":"3.2. \u00bfC\u00f3mo Funciona?","text":"<p>Para sobreescibir un m\u00e9todo o propiedad en Kotlin, la superclase debe marcar ese m\u00e9todo o propiedad con el modificador <code>open</code>, indicando que est\u00e1 disponible para ser sobreescrito. Luego, la subclase usa el modificador <code>override</code> para proporcionar su propia implementaci\u00f3n del m\u00e9todo o propiedad.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#33-proposito-y-beneficios","title":"3.3. Prop\u00f3sito y Beneficios","text":"<ul> <li>Especializaci\u00f3n: Permite que las subclases especialicen o modifiquen comportamientos heredados de las superclases para satisfacer requisitos espec\u00edficos.</li> <li>Flexibilidad: Aumenta la flexibilidad del dise\u00f1o del software al permitir que nuevas versiones de m\u00e9todos o propiedades reemplacen a las antiguas en contextos espec\u00edficos.</li> <li>Consistencia: Mantiene una interfaz consistente, permitiendo que las subclases se utilicen en lugar de una superclase sin alterar el comportamiento esperado del programa.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#34-consideraciones-importantes","title":"3.4.  Consideraciones Importantes","text":"<ul> <li>Coherencia: Al sobreescibir m\u00e9todos o propiedades, es crucial mantener la coherencia en cuanto a la funcionalidad esperada. La nueva implementaci\u00f3n debe adherirse al \"contrato\" del m\u00e9todo original, respetando su prop\u00f3sito y comportamiento general.</li> <li>Uso de <code>super</code>: Las subclases pueden llamar al m\u00e9todo o propiedad de la superclase usando <code>super</code>, permitiendo que la sobreescritura complemente en lugar de reemplazar completamente el comportamiento heredado.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#35-sobreescritura-en-kotlin","title":"3.5. Sobreescritura en kotlin.","text":"<p>Cuando heredamos de una clase en Kotlin, todos los m\u00e9todos y propiedades de la clase base con modificadores de visibilidad que permita el acceso a ellos, son heredados por la clase derivada. Sin embargo, en algunos casos, es posible que queramos cambiar el comportamiento de un m\u00e9todo o propiedad en la clase derivada. Esto se conoce como sobreescritura.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#351-sobreescritura-de-metodos","title":"3.5.1. Sobreescritura de m\u00e9todos","text":"<p>Kotlin requiere anotaciones expl\u00edcitas para la sobreescritura de funciones miembro.</p> <p>Para que una funci\u00f3n pueda ser sobreescrita se utiliza la palabra clave <code>'open'</code> delante del nombre de la funci\u00f3n. Dado que las clases son finales en Kotlin, s\u00f3lo podemos utilizar la palabra clave <code>'open'</code> en funciones miembro de clases que tambi\u00e9n hayan sido definidas como <code>'open'</code>.</p> <p>Para indicar que una funci\u00f3n en la clase derivada sobreescribe una funci\u00f3n de la clase padre se utiliza la palabra clave <code>'override'</code> delante del nombre de la funci\u00f3n. De esta forma le indicamos al compilador que esta funci\u00f3n sobreescribe una funci\u00f3n de la clase padre y puede realizar las comprobaciones en tiempo de compilaci\u00f3n.</p> <p>Una funci\u00f3n con la palabra clave <code>'override'</code> tambi\u00e9n es <code>'open'</code> por definici\u00f3n y puede ser sobreescrita por las subclases sucesivas. Es posible marcar una funci\u00f3n <code>'override'</code> con la palabra clave <code>'final'</code> para evitar que sea sobreescrita.</p> <p>La sobreescritura de m\u00e9todos en Kotlin permite modificar el comportamiento de m\u00e9todos heredados en subclases, mientras que el uso de <code>final</code> previene la sobreescritura adicional, proporcionando un control detallado sobre la herencia y el polimorfismo en el dise\u00f1o de software.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#actividad-4-exploracion-de-sobreescritura-de-metodos-en-kotlin","title":"Actividad 4: Exploraci\u00f3n de Sobreescritura de M\u00e9todos en Kotlin","text":"<p>Pregunta: \u00bfC\u00f3mo funcionan la sobreescritura de m\u00e9todos y las restricciones de sobreescritura en Kotlin? Examina el comportamiento de sobreescritura en una jerarqu\u00eda de clases, las limitaciones impuestas por el modificador <code>final</code> y la extensi\u00f3n de funcionalidad mediante la sobreescritura en una subclase adicional.</p> <p>C\u00f3digo:</p> <pre><code>open class Base {\n    open fun v() { println(\"base\") }\n    open fun x(p: Int) { println(p) }\n    fun nv() { println(this.toString() + \": sin sobreescribir\") }\n}\n\nclass Derived: Base() {\n    override fun v() { println(\"derivada\") }\n    final override fun x(p: Int) { println(p+1) }\n}\n\nclass Derived2: Base() {\n    override fun v() { println(\"Derivada2\") }\n}\n\nfun main() {\n    val base = Base()\n    base.v()\n    base.x(10)\n    base.nv()\n\n    val derived = Derived()\n    derived.v()\n    derived.x(10)\n    derived.nv()\n\n    val derived2 = Derived2()\n    derived2.v()\n    derived2.x(10)\n    derived2.nv()\n}\n</code></pre> <p>Respuesta: Al ejecutar el c\u00f3digo proporcionado en la funci\u00f3n <code>main</code>, observar\u00e1s lo siguiente en la consola:</p> <pre><code>base\n10\nBase@hashcode: sin sobreescribir\nderivada\n11\nDerived@hashcode: sin sobreescribir\nDerivada2\n10\nDerived2@hashcode: sin sobreescribir\n</code></pre> <ul> <li>Al llamar a los m\u00e9todos desde instancias de <code>Base</code>, <code>Derived</code> y <code>Derived2</code>, la consola muestra c\u00f3mo cada clase maneja sus implementaciones espec\u00edficas de <code>v()</code> y <code>x(p: Int)</code>, as\u00ed como el m\u00e9todo <code>nv()</code> que no est\u00e1 marcado para sobreescritura y, por lo tanto, mantiene su comportamiento original en todas las clases.</li> <li>Intentar sobreescrbir el m\u00e9todo <code>nv</code> en <code>Derived</code> o <code>Derived2</code> resultar\u00eda en un error de compilaci\u00f3n, ya que <code>nv()</code> no est\u00e1 marcado con <code>open</code> en la clase <code>Base</code>, lo que significa que no est\u00e1 disponible para sobreescritura.</li> <li>Dado que el m\u00e9todo <code>x(p: Int)</code> en <code>Derived</code> est\u00e1 marcado como <code>final</code>, no puede ser sobreescrito en <code>Derived2</code>. Si intentas hacerlo, recibir\u00e1s un error de compilaci\u00f3n. En este ejemplo, <code>Derived2</code> no intenta sobreescrbir <code>x(p: Int)</code>, por lo que no hay conflicto.</li> <li><code>Derived2</code> demuestra c\u00f3mo se puede sobreescrbir el m\u00e9todo <code>v()</code> para proporcionar una nueva implementaci\u00f3n, imprimiendo \"Derivada2\" cuando se invoca, ilustrando la extensibilidad de las clases en Kotlin mediante la sobreescritura.</li> </ul> <p>En Kotlin, la herencia est\u00e1 regulada por la siguiente regla: si una clase hereda varias implementaciones del mismo miembro de sus superclases inmediatas, debe invalidar este miembro y proporcionar su propia implementaci\u00f3n. Para denotar el supertipo del cual se toma la implementaci\u00f3n heredada, usamos la palaba clave <code>'super'</code> calificado por el nombre de supertipo entre par\u00e9ntesis angulares, por ejemplo, <code>super&lt;Base&gt;</code>:</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#actividad-5-entendiendo-la-herencia-y-polimorfismo-en-kotlin","title":"Actividad 5: Entendiendo la Herencia y Polimorfismo en Kotlin","text":"<p>Pregunta: \u00bfC\u00f3mo interact\u00faan la herencia de clases y la implementaci\u00f3n de interfaces en Kotlin cuando m\u00faltiples superclases proporcionan implementaciones para el mismo m\u00e9todo? Explora el comportamiento al instanciar la subclase <code>C</code> y realizar llamadas polim\u00f3rficas utilizando referencias de diferentes tipos.</p> <p>C\u00f3digo:</p> <pre><code>open class A {\n    open fun f() { print(\"A\") }\n    fun a() { print(\"a\") }\n}\n\ninterface B {\n    fun f() { print(\"B\") } // Los miembros de las interfaces son `open` por defecto.\n    fun b() { print(\"b\") }\n}\n\nclass C() : A(), B {\n    // El compilador requiere que 'f()' sea sobreescrito para eliminar la ambig\u00fcedad\n    override fun f() {\n        super&lt;A&gt;.f() // Llamada a A.f()\n        super&lt;B&gt;.f() // Llamada a B.f()\n    }\n}\n\nfun main() {\n    val c = C()\n    c.f()\n    println() // Para separar las salidas\n\n    var a: A = C()\n    a.f()\n    println() // Para separar las salidas\n\n    var b: B = C()\n    b.f()\n    println() // Para separar las salidas\n\n    val aInstance = A()\n    aInstance.f()\n}\n</code></pre> <p>Respuesta: Al ejecutar el c\u00f3digo en <code>main</code>, observar\u00e1s lo siguiente en la consola:</p> <ol> <li>Instancia de C: Al instanciar <code>C</code> y llamar a <code>c.f()</code>, muestra en pantalla \"AB\". Esto se debe a que <code>C.f()</code> sobreescrito ejecuta expl\u00edcitamente ambas implementaciones de <code>f()</code> de <code>A</code> y <code>B</code>.</li> <li>Referencia de A hacia C: Al declarar <code>var a: A = C(); a.f()</code>, tambi\u00e9n muestra \"AB\". Aunque <code>a</code> es de tipo <code>A</code>, el objeto referenciado es una instancia de <code>C</code>, por lo que se ejecuta el m\u00e9todo <code>f()</code> sobreescrito en <code>C</code>, que incluye las llamadas a <code>A.f()</code> y <code>B.f()</code>.</li> <li>Referencia de B hacia C: Al declarar <code>var b: B = C(); b.f()</code>, muestra \"AB\" por las mismas razones que el caso anterior. La referencia es de tipo <code>B</code>, pero el objeto es de <code>C</code>, invocando <code>C.f()</code> que llama a ambas implementaciones.</li> <li>Instancia de A asignada a <code>a</code>: Si instancias <code>A</code> y lo asignas a <code>a</code>, llamando a <code>a.f()</code>, solo muestra \"A\". En este caso, <code>a</code> es de tipo <code>A</code> y el objeto referenciado es una instancia directa de <code>A</code>, por lo que solo se ejecuta la implementaci\u00f3n de <code>f()</code> definida en <code>A</code>.</li> </ol> <p>Diferencias Observadas:</p> <ul> <li>La principal diferencia radica en el tipo del objeto referenciado. Aunque las variables <code>a</code> y <code>b</code> pueden tener tipos est\u00e1ticos diferentes (<code>A</code> o <code>B</code>), el comportamiento en tiempo de ejecuci\u00f3n depende del tipo din\u00e1mico del objeto (en este caso, <code>C</code>), que ejecuta su propia implementaci\u00f3n de <code>f()</code>, llamando a las implementaciones tanto de <code>A</code> como de <code>B</code>.</li> <li>En contraste, una instancia directa de <code>A</code> solo ejecutar\u00e1 la implementaci\u00f3n de <code>f()</code> definida en <code>A</code>, sin invocar la de <code>B</code>, evidenciando c\u00f3mo el polimorfismo en Kotlin maneja la resoluci\u00f3n de m\u00e9todos en la herencia y las implementaciones de interfaces.</li> </ul> <p>En la sobreescritura de m\u00e9todos con valores por defecto siempre se utilizan los mismos valores de par\u00e1metros por defecto que el m\u00e9todo base. Cuando se sobreescribe un m\u00e9todo, los valores por defecto deben omitirse de la firma:</p> <pre><code>open class A {\n    open fun foo(i: Int = 10) { ... }\n}\n\nclass B : A() {\n    override fun foo(i: Int) { ... }  // no default value allowed\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#352-sobreescritura-de-propiedades","title":"3.5.2. Sobreescritura de propiedades","text":"<p>La sobreescritura de propiedades funciona de manera similar a la sobreescritura de m\u00e9todos.</p> <p>Las propiedades declaradas en una superclase que luego se vuelven a declarar en una clase derivada deben ir precedidas por la palabra clave <code>'override'</code> y deben tener un tipo compatible. Tambi\u00e9n se puede usar la palabra clave <code>'override'</code> como parte de la declaraci\u00f3n de una propiedad en un constructor primario.</p> <p>Cada propiedad declarada puede ser sobreescrita por una propiedad con un inicializador o por una propiedad con un m\u00e9todo <code>'getter()'</code></p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#actividad-6-explorando-la-sobreescritura-de-propiedades-en-kotlin","title":"Actividad 6: Explorando la Sobreescritura de Propiedades en Kotlin","text":"<p>Pregunta: \u00bfC\u00f3mo se comporta la sobreescritura de propiedades en Kotlin y qu\u00e9 diferencias se observan al imprimir los valores de las propiedades sobreescritas en una clase base y sus subclases?</p> <p>C\u00f3digo:</p> <pre><code>open class Foo {\n    open val x: String\n    get() = \"base\"\n}\n\nclass Bar : Foo() {\n    override val x: String = \"subclase\"\n}\n\ninterface Foo1 {\n    val count: Int\n}\n\nclass Bar1(override val count: Int) : Foo1\n\nfun main() {\n    val foo = Foo()\n    println(foo.x)\n\n    val bar = Bar()\n    println(bar.x)\n\n    val bar1 = Bar1(10)\n    println(bar1.count)\n}\n</code></pre> <p>Respuesta: Al ejecutar el c\u00f3digo proporcionado en la funci\u00f3n <code>main</code>, se observa lo siguiente en la consola:</p> <ol> <li>Objeto de <code>Foo</code>: Imprime el valor de la propiedad <code>x</code> definida en la clase base <code>Foo</code>, que es \"base\". Esto se debe a que se accede al getter de la propiedad <code>x</code> en la clase <code>Foo</code>, que devuelve el valor \"base\".</li> <li>Objeto de <code>Bar</code>: Imprime el valor de la propiedad <code>x</code> sobreescrita en la subclase <code>Bar</code>, que es \"subclase\". Esto muestra c\u00f3mo la sobreescritura de la propiedad <code>x</code> en <code>Bar</code> cambia el valor devuelto por el getter de esta propiedad, demostrando la sobreescritura de propiedades en acci\u00f3n.</li> <li>Objeto de <code>Bar1</code>: Imprime el valor de la propiedad <code>count</code> en la instancia de <code>Bar1</code>, que es 10. Aqu\u00ed se ilustra c\u00f3mo se puede sobreescrbir una propiedad definida en una interfaz (<code>Foo1</code>) al implementar esta interfaz en una clase (<code>Bar1</code>), proporcionando un valor espec\u00edfico (en este caso, a trav\u00e9s del constructor de <code>Bar1</code>).</li> </ol> <p>Diferencias Observadas:</p> <ul> <li>La principal diferencia observada es c\u00f3mo el valor de la propiedad <code>x</code> cambia entre la clase base <code>Foo</code> y su subclase <code>Bar</code> debido a la sobreescritura de la propiedad. En <code>Foo</code>, el getter de <code>x</code> devuelve \"base\", mientras que en <code>Bar</code>, la propiedad sobreescrita <code>x</code> tiene un valor fijo de \"subclase\".</li> <li>Al comparar con la implementaci\u00f3n y sobreescritura de propiedades en interfaces y clases que las implementan, como <code>Foo1</code> y <code>Bar1</code>, se ve que el mecanismo de sobreescritura permite personalizar los valores de las propiedades en subclases o en implementaciones de interfaces, ofreciendo flexibilidad en c\u00f3mo se representan y se accede a los datos de un objeto.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#353-orden-de-inicializacion","title":"3.5.3. Orden de inicializaci\u00f3n","text":"<p>Durante la construcci\u00f3n de una nueva instancia de una clase derivada, la inicializaci\u00f3n de la clase base se realiza como primer paso (precedida solo por la evaluaci\u00f3n de los argumentos para el constructor de la clase base) y, por lo tanto, ocurre antes de que se ejecute la l\u00f3gica de inicializaci\u00f3n de la clase derivada.</p> <p>Por lo tanto, durante la inicializaci\u00f3n de las propiedades de la clase base las propiedades de la clase derivada a\u00fan no se han inicializado. Si alguna de esas propiedades se utilizan (de forma directa o indirecta) en la inicializaci\u00f3n de la clase base se pueden producir comportamientos extra\u00f1os o errores en tiempo de ejecuci\u00f3n.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#actividad-7-comprendiendo-el-orden-de-inicializacion-en-kotlin","title":"Actividad 7: Comprendiendo el Orden de Inicializaci\u00f3n en Kotlin","text":"<p>Pregunta: \u00bfCu\u00e1l es el orden de inicializaci\u00f3n de una clase base y su clase derivada en Kotlin, especialmente cuando la clase derivada sobreescribe propiedades de la clase base? Observa c\u00f3mo este orden afecta la inicializaci\u00f3n de las propiedades.</p> <p>C\u00f3digo:</p> <pre><code>open class Base(val name: String) {\n    init { println(\"Initializing Base\") }\n    open val size: Int = name.length.also { println(\"Initializing size in Base: $it\") }\n}\n\nclass Derived(name: String, val lastName: String) : Base(name.capitalize().also { println(\"Argument for Base: $it\") }) {\n    init { println(\"Initializing Derived\") }\n    override val size: Int = (super.size + lastName.length).also { println(\"Initializing size in Derived: $it\") }\n}\n\nfun main() {\n    Derived(\"john\", \"doe\")\n}\n</code></pre> <p>Respuesta: Al ejecutar el c\u00f3digo proporcionado en la funci\u00f3n <code>main</code>, el orden de salida en la consola ser\u00e1 el siguiente:</p> <ol> <li>\"Argument for Base: John\" - Este mensaje se imprime primero debido a la evaluaci\u00f3n del argumento para el constructor de la clase base (<code>Base</code>) que se realiza antes de su inicializaci\u00f3n.</li> <li>\"Initializing Base\" - Indica que la inicializaci\u00f3n de la clase base <code>Base</code> comienza inmediatamente despu\u00e9s de la evaluaci\u00f3n de los argumentos para su constructor.</li> <li>\"Initializing size in Base: 4\" - Muestra la inicializaci\u00f3n de la propiedad <code>size</code> en la clase base <code>Base</code>. El valor <code>4</code> corresponde a la longitud del nombre \"John\" despu\u00e9s de aplicar <code>capitalize()</code>.</li> <li>\"Initializing Derived\" - Se\u00f1ala que la inicializaci\u00f3n de la clase derivada <code>Derived</code> comienza despu\u00e9s de completar la inicializaci\u00f3n de la clase base.</li> <li>\"Initializing size in Derived: 7\" - Muestra la inicializaci\u00f3n de la propiedad <code>size</code> sobrescrita en <code>Derived</code>, sumando la longitud del apellido \"doe\" a la <code>size</code> de la clase base, resultando en 7.</li> </ol> <p>Diferencias Observadas:</p> <ul> <li>El proceso de inicializaci\u00f3n comienza con la evaluaci\u00f3n de los argumentos pasados al constructor de la clase base, seguido de la inicializaci\u00f3n de la clase base antes que la clase derivada.</li> <li>Las propiedades de la clase derivada que sobrescriben a las de la clase base no se inicializan hasta que no se complete la inicializaci\u00f3n de la clase base, lo que es crucial para evitar referencias a propiedades que a\u00fan no se han inicializado.</li> <li>Este orden garantiza que todas las propiedades y bloques de inicializaci\u00f3n de la clase base se procesen antes de ejecutar cualquier l\u00f3gica de inicializaci\u00f3n en la clase derivada, siguiendo una secuencia l\u00f3gica y predecible que previene errores en tiempo de ejecuci\u00f3n relacionados con la inicializaci\u00f3n prematura de propiedades.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#36-invocar-la-implementacion-de-la-superclase","title":"3.6. Invocar la implementaci\u00f3n de la superclase","text":"<p>El c\u00f3digo en una clase derivada puede llamar a funciones en la superclase e implementaciones de accesores de propiedades usando la palabra clave <code>'super'</code>:</p> <pre><code>open class Foo {\n    open fun f() { println(\"Foo.f()\") }\n    open val x: Int get() = 1\n}\n\nclass Bar : Foo() {\n    override fun f() {\n        super.f()  // Calling the super function  \n        println(\"Bar.f()\")\n    }\n    override val x: Int get() = super.x + 1\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#4-interfaces","title":"4. Interfaces","text":"<p>Las interfaces en Kotlin son muy similares a Java 8. Pueden contener declaraciones de m\u00e9todos abstractos, as\u00ed como implementaciones de m\u00e9todos. Lo que los diferencia de las clases abstractas es que las interfaces no pueden almacenar el estado, es decir, no pueden tener variables de instancia. Pueden tener propiedades, pero estas deben ser abstractas o proporcionar implementaciones de accesores.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#41-definicion-de-interface","title":"4.1. Definici\u00f3n de Interface","text":"<p>Una interfaz se define usando la palabra clave <code>'interface'</code>. Un m\u00e9todo en una interfaz es abstracto por defecto si no se proporciona una implementaci\u00f3n.</p> <p>Actividad 8: Exploraci\u00f3n de Interfaces</p> <p>Pregunta: \u00bfQu\u00e9 sucede al crear una instancia de la interfaz <code>MyInterface</code> directamente y cu\u00e1l es el comportamiento de sus m\u00e9todos?</p> <p>C\u00f3digo:</p> <pre><code>interface MyInterface {\n    fun bar(): String // abstracto por defecto\n    fun foo() = 1 + 1 // con cuerpo opcional\n}\n\nfun main() {\n    val myInterfaceInstance = object : MyInterface {\n        override fun bar() = \"Implementaci\u00f3n de bar\"\n    }\n    println(myInterfaceInstance.bar())\n    println(myInterfaceInstance.foo())\n}\n</code></pre> <p>Respuesta:</p> <p>No se puede instanciar una interfaz directamente en Kotlin. Para crear una instancia de <code>MyInterface</code>, necesitamos definir una implementaci\u00f3n an\u00f3nima o una clase que implemente la interfaz. En el c\u00f3digo proporcionado, se crea una implementaci\u00f3n an\u00f3nima de <code>MyInterface</code>, proporcionando una implementaci\u00f3n concreta para el m\u00e9todo <code>bar()</code>, que es abstracto por defecto en la interfaz. El m\u00e9todo <code>foo()</code>, que ya tiene una implementaci\u00f3n en la interfaz, puede ser llamado directamente sin necesidad de sobreescribirlo, mostrando el comportamiento de ambos m\u00e9todos cuando se invocan.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#42-implementacion-de-interface","title":"4.2. Implementaci\u00f3n de Interface","text":"<p>Una clase u objeto pueden implementar una o varias interfaces:</p> <p>Actividad 9: Implementaci\u00f3n y Uso de Interfaces</p> <p>Pregunta: \u00bfQu\u00e9 sucede al implementar la interfaz <code>MyInterface</code> en una clase <code>Child</code> sin sobreescribir el m\u00e9todo <code>bar</code>? \u00bfEs posible llamar al m\u00e9todo <code>foo</code> en una instancia de <code>Child</code>?</p> <p>C\u00f3digo:</p> <pre><code>interface MyInterface {\n    fun bar(): String // abstracto por defecto\n    fun foo() = 1 + 1 // con cuerpo opcional\n}\n\nclass Child : MyInterface {\n    // No se sobreescribe el m\u00e9todo bar\n}\n\nfun main() {\n    val child = Child()\n    // println(child.bar()) // \u00bfQu\u00e9 sucede aqu\u00ed?\n    println(child.foo())\n}\n</code></pre> <p>Respuesta:</p> <p>Si intentamos compilar este c\u00f3digo tal como est\u00e1, recibiremos un error de compilaci\u00f3n indicando que la clase <code>Child</code> debe implementar el m\u00e9todo abstracto <code>bar()</code> de <code>MyInterface</code>. En Kotlin, todas las clases que implementan una interfaz deben proporcionar implementaciones concretas para todos los m\u00e9todos abstractos definidos en la interfaz. Respecto al m\u00e9todo <code>foo()</code>, s\u00ed es posible llamarlo en una instancia de <code>Child</code> sin necesidad de sobreescribirlo, ya que <code>foo</code> proporciona una implementaci\u00f3n predeterminada en la interfaz. Para corregir el error, se debe sobreescribir el m\u00e9todo <code>bar</code> en la clase <code>Child</code>.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#43-propiedades-de-interface","title":"4.3. Propiedades de Interface","text":"<p>En una interfaz se pueden declarar propiedades. Una propiedad declarada en una interfaz puede ser abstracta o puede proporcionar implementaciones para el <code>'getter()'</code> o <code>'setter()'</code>. Las propiedades declaradas en interfaces no pueden tener 'backing fields' y, por lo tanto, los accesores declarados en interfaces no pueden hacer referencia a ellos.</p> <p>Actividad 10: Uso de Propiedades en Interfaces</p> <p>Pregunta: \u00bfQu\u00e9 sucede al instanciar la clase <code>Child</code> que implementa la interfaz <code>MyInterface</code> sin sobreescribir expl\u00edcitamente todas las propiedades?</p> <p>C\u00f3digo:</p> <pre><code>interface MyInterface {\n    val prop: Int // abstracta\n    val propertyWithImplementation: String\n        get() = \"foo\"\n    fun foo() {\n        print(prop)\n    }\n}\n\nclass Child : MyInterface {\n    override val prop: Int = 29\n}\n\nfun main() {\n    val child = Child()\n    println(child.propertyWithImplementation)\n    child.foo()\n}\n</code></pre> <p>Respuesta:</p> <p>Al instanciar la clase <code>Child</code>, que implementa la interfaz <code>MyInterface</code>, no hay problemas al compilar y ejecutar el programa porque <code>Child</code> proporciona una implementaci\u00f3n concreta para la propiedad abstracta <code>prop</code>. La propiedad <code>propertyWithImplementation</code> ya tiene una implementaci\u00f3n en la interfaz, por lo que no es necesario sobreescribirla en <code>Child</code>. Al ejecutar <code>child.foo()</code>, se imprime el valor de <code>prop</code> definido en <code>Child</code>.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#44-extension-y-sobreescritura-en-interfaces","title":"4.4. Extensi\u00f3n y Sobreescritura en Interfaces","text":"<p>Una interfaz puede derivar de otras interfaces y, por lo tanto, proporcionar implementaciones para sus miembros y declarar nuevas funciones y propiedades. Naturalmente, las clases que implementen dicha interfaz solo tienen que definir las implementaciones que faltan:</p> <p>Actividad 11: Extensi\u00f3n y Sobreescritura en Interfaces</p> <p>Pregunta: \u00bfQu\u00e9 sucede al extender interfaces y sobreescribir propiedades en Kotlin? \u00bfCompila el c\u00f3digo al a\u00f1adir una nueva propiedad <code>name2</code> en la interfaz <code>Named</code> y sobreescribirla en <code>Person</code>?</p> <p>C\u00f3digo:</p> <pre><code>interface Named {\n    val name: String\n}\n\ninterface Person : Named {\n    val firstName: String\n    val lastName: String\n    override val name: String get() = \"$firstName $lastName\" // Implementaci\u00f3n por defecto\n    val name2: String // Nueva propiedad a\u00f1adida\n}\n\ndata class Employee(\n    // implementing 'name' is not required, because it has a default implementation\n    override val firstName: String,\n    override val lastName: String,\n    override val name2: String, // Propiedad sobrescrita\n    val position: String\n) : Person\n</code></pre> <p>Respuesta:</p> <p>El c\u00f3digo compila correctamente. Al a\u00f1adir la nueva propiedad <code>name2</code> en la interfaz <code>Person</code>, la clase <code>Employee</code>, que implementa <code>Person</code>, debe proporcionar una implementaci\u00f3n concreta para <code>name2</code>. Este ejemplo demuestra c\u00f3mo una clase puede heredar de interfaces que extienden otras interfaces, necesitando solo proporcionar implementaciones para los miembros que no tienen una implementaci\u00f3n predeterminada.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#45-ambiguedad-en-implementaciones-multiples","title":"4.5. Ambig\u00fcedad en Implementaciones M\u00faltiples","text":"<p>En el caso de clases que hereden de varias interfaces, para evitar ambig\u00fcedades la subclase deber\u00e1 proporcionar implementaciones tanto para m\u00e9todos que tienen una implementaci\u00f3n en una de las interfaces como en m\u00e9todos que tiene implementaciones en varias interfaces.</p> <p>Actividad 12: Resoluci\u00f3n de Ambig\u00fcedad en Implementaciones M\u00faltiples</p> <p>Pregunta: \u00bfC\u00f3mo se resuelve la ambig\u00fcedad en Kotlin cuando una clase hereda m\u00e9todos con implementaci\u00f3n de m\u00faltiples interfaces?</p> <p>C\u00f3digo:</p> <pre><code>interface A {\n    fun foo() { print(\"A\") }\n    fun bar() // Abstracto\n}\n\ninterface B {\n    fun foo() { print(\"B\") }\n    fun bar() { print(\"bar\") }\n}\n\n// la clase 'D' tiene que implementar tanto foo() como bar()\nclass D : A, B {\n    override fun foo() {\n        super&lt;A&gt;.foo()\n        super&lt;B&gt;.foo()\n    }\n\n    override fun bar() {\n        super&lt;B&gt;.bar()\n    }\n}\n\nfun main() {\n    val d = D()\n    d.foo() // \u00bfQu\u00e9 imprime?\n    d.bar() // \u00bfQu\u00e9 sucede?\n}\n</code></pre> <p>Respuesta:</p> <p>Al ejecutar el c\u00f3digo, el m\u00e9todo <code>foo()</code> en la clase <code>D</code> llama expl\u00edcitamente a las implementaciones de <code>foo()</code> tanto de <code>A</code> como de <code>B</code>, resolviendo as\u00ed la ambig\u00fcedad al heredar de m\u00faltiples interfaces. Esto resulta en la impresi\u00f3n de \"AB\". Para el m\u00e9todo <code>bar()</code>, como <code>B</code> proporciona una implementaci\u00f3n y <code>A</code> declara el m\u00e9todo como abstracto, <code>D</code> solo necesita sobreescribir <code>bar()</code> una vez, optando por utilizar la implementaci\u00f3n de <code>B</code>. Al llamar a <code>d.bar()</code>, se imprime \"bar\".</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#5-clases-abstractas","title":"5. Clases abstractas","text":"<p>Kotlin admite clases abstractas al igual que Java. Una clase abstracta es una clase con m\u00e9todos marcados como abstractos y que por tanto no puede ser instanciada. Si una clase tiene uno o varios m\u00e9todos abstractos es una clase abstracta y se indica con la palabra clave <code>'abstract'</code>.</p> <p>La subclase concreta de una clase abstracta deber\u00e1 implementar todos los m\u00e9todos y propiedades definidos en la clase abstracta; de lo contrario, tambi\u00e9n ser\u00e1 considerada como una clase abstracta.</p> <pre><code>open class Person {\n    open fun fullName(): String { ... }\n}\n\nabstract class Employee (val firstName: String, val lastName: String): Person() {\n    // Variable de intancia en una clase abstracta\n    val propFoo: String = \"bla bla\"\n\n    abstract fun earnings(): Double\n\n    // Podemos tener m\u00e9todos con implementaci\u00f3n por defecto\n    override fun fullName(): String {\n        return lastName + \" \" + firstName;\n    }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#51-diferencias-entre-interfaces-y-clases-abstractas","title":"5.1. Diferencias entre interfaces y clases abstractas","text":"<p>Las clases abstractas pueden contener m\u00e9todos con implementaci\u00f3n por defecto como cualquier otra clase. Las subclases de la clase abstracta pueden sobreescribir la implementaci\u00f3n predeterminada de un m\u00e9todo pero solo si el m\u00e9todo tiene el modificador <code>open</code>. Los m\u00e9todos marcados como <code>abstract</code> tambi\u00e9n son <code>open</code> por defecto. Las clases abstractas tambi\u00e9n pueden definir variables de instancia al contrario que pasa con las interfaces.</p> <p>Las interfaces y las clases abstractas son dos maneras de lograr la abstracci\u00f3n en Kotlin (y en muchos otros lenguajes de programaci\u00f3n orientados a objetos), permitiendo definir plantillas para un grupo de clases relacionadas. Sin embargo, tienen diferencias clave en su uso y capacidades:</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#511-interfaces","title":"5.1.1. Interfaces","text":"<ol> <li>Prop\u00f3sito Principal: Est\u00e1n dise\u00f1adas para especificar un contrato que las clases pueden implementar. Las interfaces definen qu\u00e9 debe hacer una clase, pero no c\u00f3mo se hace.</li> <li>Implementaciones de M\u00e9todos: Desde Java 8 y en Kotlin, las interfaces pueden contener implementaciones de m\u00e9todos (m\u00e9todos por defecto en Java y m\u00e9todos con cuerpo en Kotlin), adem\u00e1s de declaraciones de m\u00e9todos abstractos.</li> <li>Estado: No pueden almacenar estado. Aunque pueden tener propiedades, estas no pueden tener campos de respaldo (<code>backing fields</code>), lo que significa que cualquier propiedad declarada en una interfaz necesita ser abstracta o proporcionar una implementaci\u00f3n de acceso sin almacenar un valor.</li> <li>Herencia M\u00faltiple: Una clase puede implementar m\u00faltiples interfaces, permitiendo la herencia m\u00faltiple de tipo.</li> </ol>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#512-clases-abstractas","title":"5.1.2. Clases Abstractas","text":"<ol> <li>Prop\u00f3sito Principal: Se utilizan para proporcionar una base com\u00fan y parcialmente implementada para otras clases. Una clase abstracta puede definir tanto la estructura como el comportamiento que se comparte entre sus subclases.</li> <li>Implementaciones de M\u00e9todos: Pueden contener una mezcla de m\u00e9todos implementados y abstractos. Los m\u00e9todos abstractos en una clase abstracta deben ser sobrescritos por las subclases, mientras que los m\u00e9todos implementados pueden (o no) ser sobrescritos.</li> <li>Estado: Pueden tener campos de respaldo para propiedades, permitiendo que las clases abstractas mantengan un estado.</li> <li>Herencia: Una clase solo puede extender una clase abstracta, limitando la herencia a una jerarqu\u00eda de un solo padre. Esto previene la herencia m\u00faltiple de implementaci\u00f3n.</li> </ol>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#513-comparacion-y-eleccion-entre-interfaces-y-clases-abstractas","title":"5.1.3. Comparaci\u00f3n y Elecci\u00f3n entre Interfaces y Clases Abstractas","text":"<ul> <li>Uso de Interfaces: Cuando necesitas que diferentes clases que no est\u00e1n relacionadas en una jerarqu\u00eda de herencia compartan un conjunto de m\u00e9todos. Las interfaces son ideales para definir capacidades comunes sin imponer una relaci\u00f3n de clase entre ellas.</li> <li>Uso de Clases Abstractas: Cuando varias clases est\u00e1n estrechamente relacionadas y comparten una estructura com\u00fan o comportamiento. Las clases abstractas son \u00fatiles para proporcionar una implementaci\u00f3n parcial que se puede reutilizar en m\u00faltiples subclases.</li> </ul> <p>La elecci\u00f3n entre usar una interfaz o una clase abstracta a menudo depende de la necesidad de flexibilidad de herencia m\u00faltiple frente a la necesidad de compartir implementaciones de m\u00e9todos o mantener el estado en la superclase.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#reference","title":"Reference","text":"<ul> <li>Kotlinlang Inheritance</li> <li>Kotlinlang Classes and Inheritance</li> <li>Kotlinlang Constructors</li> <li>Kotlinlang Secondary Constructors</li> <li>Kotlinlang Any</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.3.-Herencia/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/","title":"ClasesAbstractas vs Interfaces","text":"<p>En Kotlin, tanto las clases abstractas como las interfaces son conceptos fundamentales para la abstracci\u00f3n y el dise\u00f1o de clases.  Permiten definir una estructura que otras clases pueden implementar o heredar. Aunque comparten algunos prop\u00f3sitos,  tienen caracter\u00edsticas y usos distintos. </p>"},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/#clase-abstracta","title":"Clase Abstracta","text":"<p>Una clase abstracta es una clase que no se puede instanciar por s\u00ed misma. Se utiliza como clase base para otras clases.  Las clases abstractas se utilizan para definir un patr\u00f3n com\u00fan para un grupo de clases relacionadas.</p> <p>Caracter\u00edsticas: - Puede contener implementaciones concretas de algunos m\u00e9todos. - Puede declarar constructores. - Puede tener propiedades con estado (variables con valores almacenados). - Las clases que heredan de una clase abstracta deben implementar todos los m\u00e9todos abstractos, a menos que ellas mismas sean abstractas.</p> <p>Uso t\u00edpico: - Cuando tienes una base com\u00fan para varias clases, pero nunca necesitas instanciar la clase base por s\u00ed misma. - Cuando tus clases base necesitan tener algunas implementaciones comunes que quieres compartir con las clases derivadas.</p>"},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/#interfaz","title":"Interfaz","text":"<p>Una interfaz define un contrato que otras clases pueden implementar. En Kotlin, las interfaces son m\u00e1s flexibles y  potentes que en muchos otros lenguajes.</p> <p>Caracter\u00edsticas: - No puede contener un estado (no puede tener propiedades inicializadas). - Puede contener declaraciones de m\u00e9todos as\u00ed como implementaciones de m\u00e9todos (a partir de Java 8 y Kotlin).    Sin embargo, las implementaciones de m\u00e9todos en las interfaces no pueden tener un estado. - Una clase puede implementar m\u00faltiples interfaces.</p> <p>Uso t\u00edpico: - Cuando varias clases no relacionadas deben compartir m\u00e9todos comunes (pero la implementaci\u00f3n puede ser diferente para cada clase). - Cuando necesitas asegurarte de que una clase implemente ciertos m\u00e9todos.</p>"},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/#diferencias-principales","title":"Diferencias Principales","text":"<ul> <li>Instanciaci\u00f3n: No puedes instanciar clases abstractas ni interfaces. La diferencia es que una clase abstracta puede tener un constructor    y puede realizar inicializaci\u00f3n en \u00e9l. Las interfaces no pueden tener constructores.</li> <li>Estado: Las clases abstractas pueden mantener un estado (tener propiedades que almacenen valores), pero las interfaces no.</li> <li>Implementaci\u00f3n M\u00faltiple: Las clases en Kotlin no pueden heredar de m\u00e1s de una clase (abstracta o no), pero pueden implementar m\u00faltiples interfaces.</li> <li>Funciones con Implementaci\u00f3n: Ambas, clases abstractas e interfaces, pueden tener funciones con implementaci\u00f3n.    Sin embargo, solo las clases abstractas pueden tener un estado que esas funciones puedan modificar.</li> </ul>"},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/#cuando-usar-uno-u-otro","title":"Cu\u00e1ndo usar uno u otro","text":"<ul> <li>Usa una clase abstracta cuando tengas clases que compartan un c\u00f3digo com\u00fan muy estrechamente relacionado,   y cuando ese c\u00f3digo incluya alg\u00fan estado que deba ser mantenido.</li> <li>Usa una interfaz cuando tengas clases que necesiten compartir m\u00e9todos, pero no comportamientos (implementaciones de m\u00e9todos) o estados,   o cuando quieras aprovechar la implementaci\u00f3n m\u00faltiple para combinar varios comportamientos.</li> </ul> <p>En resumen, la elecci\u00f3n entre una clase abstracta y una interfaz puede depender de las necesidades espec\u00edficas de tu dise\u00f1o de software y  de las caracter\u00edsticas del lenguaje que est\u00e9s utilizando. Kotlin ofrece una gran flexibilidad y caracter\u00edsticas adicionales para interfaces  que otros lenguajes no tienen, por lo que vale la pena considerar estas caracter\u00edsticas al tomar tu decisi\u00f3n.</p>"},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/#ejemplo-de-clase-abstracta","title":"Ejemplo de Clase Abstracta","text":"<p>Escenario: Supongamos que est\u00e1s construyendo un sistema para un zool\u00f3gico que necesita manejar diferentes tipos de animales.  Todos los animales tienen ciertas caracter\u00edsticas en com\u00fan, como la necesidad de alimentarse, pero cada tipo de animal tiene su propia forma de alimentarse.</p> <pre><code>// Clase abstracta Animal\nabstract class Animal(val nombre: String) {\n    abstract fun alimentarse()\n\n    fun dormir() {\n        println(\"$nombre est\u00e1 durmiendo\")\n    }\n}\n\n// Clase concreta Le\u00f3n que hereda de Animal\nclass Leon(nombre: String) : Animal(nombre) {\n    override fun alimentarse() {\n        println(\"$nombre, el le\u00f3n, est\u00e1 comiendo carne\")\n    }\n}\n\n// Clase concreta Elefante que hereda de Animal\nclass Elefante(nombre: String) : Animal(nombre) {\n    override fun alimentarse() {\n        println(\"$nombre, el elefante, est\u00e1 comiendo vegetales\")\n    }\n}\n\nfun main() {\n    val leon = Leon(\"Leo\")\n    leon.alimentarse()  // Output: Leo, el le\u00f3n, est\u00e1 comiendo carne\n    leon.dormir()       // Output: Leo est\u00e1 durmiendo\n\n    val elefante = Elefante(\"Eli\")\n    elefante.alimentarse()  // Output: Eli, el elefante, est\u00e1 comiendo vegetales\n    elefante.dormir()       // Output: Eli est\u00e1 durmiendo\n}\n</code></pre> <p>En este ejemplo, <code>Animal</code> es una clase abstracta que define un m\u00e9todo abstracto <code>alimentarse</code> y un m\u00e9todo concreto <code>dormir</code>.  Las clases <code>Leon</code> y <code>Elefante</code> heredan de <code>Animal</code> y proporcionan su propia implementaci\u00f3n del m\u00e9todo <code>alimentarse</code>.</p>"},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/#ejemplo-de-interfaz","title":"Ejemplo de Interfaz","text":"<p>Escenario: Imagina que est\u00e1s desarrollando un software para gestionar dispositivos inteligentes en una casa. Cada dispositivo tiene diferentes capacidades,  pero todos deben poder ser encendidos o apagados.</p> <pre><code>// Interfaz DispositivoInteligente\ninterface DispositivoInteligente {\n    fun encender()\n    fun apagar()\n}\n\n// Clase Luz que implementa la interfaz DispositivoInteligente\nclass Luz : DispositivoInteligente {\n    override fun encender() {\n        println(\"La luz est\u00e1 encendida\")\n    }\n\n    override fun apagar() {\n        println(\"La luz est\u00e1 apagada\")\n    }\n}\n\n// Clase Termostato que implementa la interfaz DispositivoInteligente\nclass Termostato : DispositivoInteligente {\n    override fun encender() {\n        println(\"El termostato est\u00e1 ajustando la temperatura\")\n    }\n\n    override fun apagar() {\n        println(\"El termostato est\u00e1 apagado\")\n    }\n}\n\nfun main() {\n    val luz = Luz()\n    luz.encender()  // Output: La luz est\u00e1 encendida\n    luz.apagar()    // Output: La luz est\u00e1 apagada\n\n    val termostato = Termostato()\n    termostato.encender()  // Output: El termostato est\u00e1 ajustando la temperatura\n    termostato.apagar()    // Output: El termostato est\u00e1 apagado\n}\n</code></pre> <p>En este ejemplo, <code>DispositivoInteligente</code> es una interfaz que define dos m\u00e9todos: <code>encender</code> y <code>apagar</code>.  Las clases <code>Luz</code> y <code>Termostato</code> implementan esta interfaz y proporcionan sus propias implementaciones de estos m\u00e9todos.</p>"},{"location":"section1/u05/teoria/otros/_ClasesAbstractas_vs_Interfaces/#resumen","title":"Resumen","text":"<ul> <li>Usa una clase abstracta cuando quieras que varias clases compartan un c\u00f3digo com\u00fan y tengan un estado com\u00fan, como en el ejemplo del zool\u00f3gico,   donde todos los animales se alimentan de formas diferentes, pero comparten ciertas caracter\u00edsticas y comportamientos.</li> <li>Usa una interfaz cuando quieras que diferentes clases sigan un contrato com\u00fan pero no necesariamente compartan un c\u00f3digo com\u00fan o estado,   como en el ejemplo de los dispositivos inteligentes, donde diferentes dispositivos pueden ser encendidos y apagados, pero la implementaci\u00f3n var\u00eda   significativamente entre dispositivos.</li> </ul>"},{"location":"section1/u05/teoria/otros/_ClasesSelladas/","title":"ClasesSelladas","text":""},{"location":"section1/u05/teoria/otros/_ClasesSelladas/#sealed-class","title":"Sealed Class","text":"<p>Las clases selladas (<code>sealed class</code>) en Kotlin son una caracter\u00edstica especial que se utiliza para representar jerarqu\u00edas de  clases restringidas, en las cuales una clase tiene un n\u00famero limitado de subtipos.  Se utilizan principalmente cuando se desea que un valor pueda ser de uno entre varios tipos, pero no de cualquier otro tipo.  Son especialmente \u00fatiles en el manejo de estados o en la implementaci\u00f3n del patr\u00f3n de dise\u00f1o de Visitor.</p> <p>Algunas caracter\u00edsticas clave de las clases selladas:</p> <ol> <li>Extensibilidad limitada: Solo las clases que est\u00e1n en el mismo archivo que la clase sellada pueden extenderla.    Esto asegura que todos los subtipos sean conocidos en tiempo de compilaci\u00f3n y ayuda a evitar errores en tiempo de ejecuci\u00f3n.</li> <li>Uso con <code>when</code>: Las clases selladas son muy \u00fatiles con la expresi\u00f3n <code>when</code> en Kotlin, ya que puedes asegurarte de    que has manejado todos los casos posibles sin necesidad de un bloque <code>else</code>.</li> </ol>"},{"location":"section1/u05/teoria/otros/_ClasesSelladas/#ejemplos-de-uso-de-clases-selladas","title":"Ejemplos de uso de clases selladas:","text":""},{"location":"section1/u05/teoria/otros/_ClasesSelladas/#ejemplo-1","title":"Ejemplo 1:","text":"<p>Supongamos que est\u00e1s construyendo una aplicaci\u00f3n y necesitas representar diferentes tipos de operaciones en una calculadora.  Podr\u00edas tener operaciones como Suma, Resta, Multiplicaci\u00f3n y Divisi\u00f3n. Aqu\u00ed hay un ejemplo de c\u00f3mo podr\u00edas hacerlo usando clases selladas:</p> <pre><code>sealed class CalculadoraOperacion {\n    data class Suma(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n    data class Resta(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n    data class Multiplicacion(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n    data class Division(val valor1: Double, val valor2: Double) : CalculadoraOperacion()\n}\n\nfun ejecutarOperacion(operacion: CalculadoraOperacion): Double {\n    return when (operacion) {\n        is CalculadoraOperacion.Suma -&gt; operacion.valor1 + operacion.valor2\n        is CalculadoraOperacion.Resta -&gt; operacion.valor1 - operacion.valor2\n        is CalculadoraOperacion.Multiplicacion -&gt; operacion.valor1 * operacion.valor2\n        is CalculadoraOperacion.Division -&gt; operacion.valor1 / operacion.valor2\n    }\n}\n\nfun main() {\n    val suma = CalculadoraOperacion.Suma(10.0, 20.0)\n    println(\"El resultado de la suma es: ${ejecutarOperacion(suma)}\")\n}\n</code></pre> <ul> <li>En este ejemplo, <code>CalculadoraOperacion</code> es una clase sellada que tiene cuatro subtipos:  <code>Suma</code>, <code>Resta</code>, <code>Multiplicacion</code>, y <code>Division</code>. </li> <li>Cada uno de estos subtipos tiene su propia implementaci\u00f3n y datos asociados. </li> <li>La funci\u00f3n <code>ejecutarOperacion</code> acepta un <code>CalculadoraOperacion</code> y usa <code>when</code> para determinar qu\u00e9 operaci\u00f3n realizar. </li> <li>Una de las ventajas aqu\u00ed es que si a\u00f1ades un nuevo subtipo de <code>CalculadoraOperacion</code> y te olvidas de manejarlo en  <code>ejecutarOperacion</code>, el compilador te advertir\u00e1 que el <code>when</code> no est\u00e1 manejando todos los casos posibles, ayud\u00e1ndote  a evitar errores.</li> </ul>"},{"location":"section1/u05/teoria/otros/_ClasesSelladas/#ejemplo-2","title":"Ejemplo 2:","text":"<p>Supongamos que est\u00e1s desarrollando un sistema de notificaciones para una aplicaci\u00f3n y tienes varios tipos de  notificaciones, como mensajes, alertas y advertencias. </p> <p>Puedes usar una clase sellada para modelar estos diferentes tipos de notificaciones.</p> <pre><code>// Definici\u00f3n de la clase sellada\nsealed class Notificacion {\n    class Mensaje(val contenido: String) : Notificacion()\n    class Alerta(val titulo: String, val descripcion: String) : Notificacion()\n    class Advertencia(val mensaje: String) : Notificacion()\n}\n\n// Funci\u00f3n que maneja las notificaciones\nfun manejarNotificacion(notificacion: Notificacion) {\n    when (notificacion) {\n        is Notificacion.Mensaje -&gt; println(\"Tienes un nuevo mensaje: ${notificacion.contenido}\")\n        is Notificacion.Alerta -&gt; println(\"Alerta: ${notificacion.titulo} - ${notificacion.descripcion}\")\n        is Notificacion.Advertencia -&gt; println(\"Advertencia: ${notificacion.mensaje}\")\n    }\n}\n\n// Funci\u00f3n principal para demostrar el uso de las clases selladas\nfun main() {\n    val mensaje = Notificacion.Mensaje(\"Bienvenido a Kotlin!\")\n    val alerta = Notificacion.Alerta(\"Error de Servidor\", \"El servidor no responde.\")\n    val advertencia = Notificacion.Advertencia(\"Bater\u00eda baja.\")\n\n    manejarNotificacion(mensaje)\n    manejarNotificacion(alerta)\n    manejarNotificacion(advertencia)\n}\n</code></pre> <p>En este ejemplo:</p> <ol> <li><code>Notificacion</code> es una clase sellada con tres subclases: <code>Mensaje</code>, <code>Alerta</code>, y <code>Advertencia</code>.</li> <li>Cada tipo de notificaci\u00f3n puede contener diferentes tipos de informaci\u00f3n. Por ejemplo, <code>Mensaje</code> solo tiene contenido,    <code>Alerta</code> tiene t\u00edtulo y descripci\u00f3n, y <code>Advertencia</code> solo tiene un mensaje.</li> <li>La funci\u00f3n <code>manejarNotificacion</code> usa un <code>when</code> para determinar el tipo de notificaci\u00f3n y actuar en consecuencia.</li> <li>En la funci\u00f3n <code>main</code>, se crean instancias de diferentes tipos de notificaciones y se pasan a la funci\u00f3n <code>manejarNotificacion</code>.</li> </ol> <p>La belleza de este enfoque es que si decides a\u00f1adir un nuevo tipo de notificaci\u00f3n en el futuro, el compilador te advertir\u00e1  en los lugares donde no est\u00e9s manejando este nuevo tipo, gracias a las garant\u00edas de exhaustividad proporcionadas por las  clases selladas en combinaci\u00f3n con <code>when</code>.</p>"},{"location":"section1/u05/teoria/otros/_ClasesSelladas/#ejemplo-3","title":"Ejemplo 3:","text":"<p>Las clases que est\u00e1n dentro de una clase sellada pueden tener sus propios m\u00e9todos y propiedades adicionales,  no solo los que se definen en su constructor primario. </p> <p>Esto te permite tener una estructura de clases muy flexible y rica en comportamiento. Cada subclase puede  tener su propia implementaci\u00f3n de m\u00e9todos y sus propias propiedades.</p> <pre><code>sealed class Dispositivo {\n    abstract fun mostrarInfo(): String\n\n    class Smartphone(val marca: String, val modelo: String, val sistemaOperativo: String) : Dispositivo() {\n        private val appsInstaladas = mutableListOf&lt;String&gt;()\n\n        fun instalarApp(nombreApp: String) {\n            appsInstaladas.add(nombreApp)\n        }\n\n        override fun mostrarInfo(): String {\n            return \"Smartphone $marca $modelo con SO $sistemaOperativo. Apps instaladas: $appsInstaladas\"\n        }\n    }\n\n    class Tableta(val marca: String, val tama\u00f1oPantalla: Double) : Dispositivo() {\n        var nivelBateria = 100\n\n        fun usarBateria(porcentaje: Int) {\n            nivelBateria -= porcentaje\n        }\n\n        override fun mostrarInfo(): String {\n            return \"Tableta $marca con pantalla de $tama\u00f1oPantalla pulgadas. Bater\u00eda al $nivelBateria%\"\n        }\n    }\n}\n\nfun describirDispositivo(dispositivo: Dispositivo) {\n    println(dispositivo.mostrarInfo())\n}\n\nfun main() {\n    val miSmartphone = Dispositivo.Smartphone(\"Pixel\", \"5\", \"Android\")\n    miSmartphone.instalarApp(\"Twitter\")\n    miSmartphone.instalarApp(\"Spotify\")\n\n    val miTableta = Dispositivo.Tableta(\"iPad\", 10.2)\n    miTableta.usarBateria(10)\n\n    describirDispositivo(miSmartphone)\n    describirDispositivo(miTableta)\n}\n</code></pre> <p>En este ejemplo:</p> <ol> <li><code>Dispositivo</code> es una clase sellada con dos subclases: <code>Smartphone</code> y <code>Tableta</code>.</li> <li><code>Smartphone</code> tiene una propiedad <code>appsInstaladas</code> que no se define en el constructor, sino en el cuerpo de la clase.    Tambi\u00e9n tiene un m\u00e9todo <code>instalarApp</code> para agregar aplicaciones a la lista.</li> <li><code>Tableta</code> tiene una propiedad mutable <code>nivelBateria</code> y un m\u00e9todo <code>usarBateria</code> para simular el uso de la bater\u00eda.</li> <li>Ambas clases <code>Smartphone</code> y <code>Tableta</code> implementan el m\u00e9todo abstracto <code>mostrarInfo</code> de la clase sellada <code>Dispositivo</code>,    pero cada una con su propia l\u00f3gica.</li> </ol> <p>Este ejemplo muestra c\u00f3mo puedes tener estructuras de clases complejas y bien organizadas utilizando clases selladas,  aprovechando la posibilidad de a\u00f1adir propiedades y m\u00e9todos espec\u00edficos en cada subclase.</p>"},{"location":"section1/u05/teoria/otros/_ClasesSelladas/#ejemplo-4","title":"Ejemplo 4:","text":"<p>Las clases que extienden una clase sellada en Kotlin no necesitan estar anidadas dentro de la clase sellada; sin embargo,  deben estar en el mismo archivo que la clase sellada. </p> <p>Esto se debe a que el objetivo de una clase sellada es restringir la jerarqu\u00eda de herencia a un conjunto conocido de subtipos,  lo que se facilita al requerir que todas las subclases est\u00e9n en el mismo archivo.</p> <p>Si las clases <code>Smartphone</code> y <code>Tableta</code> est\u00e1n fuera de la clase sellada <code>Dispositivo</code>, pero en el mismo archivo,  seguir\u00edan siendo subclases v\u00e1lidas de <code>Dispositivo</code>. Funcionalmente, ser\u00eda lo mismo en t\u00e9rminos de c\u00f3mo puedes usar estas clases  y c\u00f3mo funcionar\u00eda la comprobaci\u00f3n de tipos en tiempo de compilaci\u00f3n.</p> <pre><code>sealed class Dispositivo {\n    abstract fun mostrarInfo(): String\n}\n\nclass Smartphone(val marca: String, val modelo: String, val sistemaOperativo: String) : Dispositivo() {\n    private val appsInstaladas = mutableListOf&lt;String&gt;()\n\n    fun instalarApp(nombreApp: String) {\n        appsInstaladas.add(nombreApp)\n    }\n\n    override fun mostrarInfo(): String {\n        return \"Smartphone $marca $modelo con SO $sistemaOperativo. Apps instaladas: $appsInstaladas\"\n    }\n}\n\nclass Tableta(val marca: String, val tama\u00f1oPantalla: Double) : Dispositivo() {\n    var nivelBateria = 100\n\n    fun usarBateria(porcentaje: Int) {\n        nivelBateria -= porcentaje\n    }\n\n    override fun mostrarInfo(): String {\n        return \"Tableta $marca con pantalla de $tama\u00f1oPantalla pulgadas. Bater\u00eda al $nivelBateria%\"\n    }\n}\n\nfun describirDispositivo(dispositivo: Dispositivo) {\n    println(dispositivo.mostrarInfo())\n}\n\nfun main() {\n    val miSmartphone = Smartphone(\"Pixel\", \"5\", \"Android\")\n    miSmartphone.instalarApp(\"Twitter\")\n    miSmartphone.instalarApp(\"Spotify\")\n\n    val miTableta = Tableta(\"iPad\", 10.2)\n    miTableta.usarBateria(10)\n\n    describirDispositivo(miSmartphone)\n    describirDispositivo(miTableta)\n}\n</code></pre> <p>En este c\u00f3digo, <code>Smartphone</code> y <code>Tableta</code> son clases independientes que extienden la clase sellada <code>Dispositivo</code> y proporcionan  su propia implementaci\u00f3n de <code>mostrarInfo()</code>.</p> <p>Esto mantiene la capacidad de <code>Dispositivo</code> para limitar sus subtipos a un conjunto conocido y manejable, aprovechando las  ventajas de las clases selladas en Kotlin.</p>"},{"location":"section1/u05/teoria/otros/_Modificador_lateinit/","title":"Modificador lateinit","text":""},{"location":"section1/u05/teoria/otros/_Modificador_lateinit/#modificador-lateinit","title":"Modificador lateinit","text":"<p>El modificador <code>lateinit</code> es \u00fatil en Kotlin para casos en los que queremos declarar una propiedad no nula pero no podemos inicializarla en el momento de la creaci\u00f3n del objeto.  Es com\u00fanmente utilizado en situaciones como la inyecci\u00f3n de dependencias o la inicializaci\u00f3n posterior en el ciclo de vida del objeto.</p> <p>Ejemplo: Gestor de Tareas</p> <p>Vamos a crear una clase <code>GestorTareas</code> que represente un sistema simple para manejar tareas. Inicialmente, cuando se crea el gestor, a\u00fan no tenemos una lista de tareas para asignarle,  as\u00ed que queremos inicializar esa lista m\u00e1s tarde.</p> <ol> <li>Creaci\u00f3n de la Clase con <code>lateinit</code>:<ul> <li>Define una clase <code>Tarea</code> con una propiedad <code>descripcion</code>.</li> <li>Define la clase <code>GestorTareas</code> que inicialmente no sabe cu\u00e1les son las tareas que va a gestionar.</li> <li>Utiliza <code>lateinit</code> para declarar una propiedad que almacenar\u00e1 una lista de <code>Tarea</code>.</li> <li> <p>Proporciona una funci\u00f3n <code>inicializarTareas</code> para configurar las tareas despu\u00e9s de la creaci\u00f3n del objeto <code>GestorTareas</code>.</p> <pre><code>class Tarea(val descripcion: String)\n\nclass GestorTareas {\n    lateinit var tareas: List&lt;Tarea&gt;\n\n    fun inicializarTareas(tareas: List&lt;Tarea&gt;) {\n        this.tareas = tareas\n    }\n\n    fun mostrarTareas() {\n        if (::tareas.isInitialized) {\n            tareas.forEach { tarea -&gt;\n                println(tarea.descripcion)\n            }\n        } else {\n            println(\"Las tareas a\u00fan no han sido inicializadas.\")\n        }\n    }\n}\n\nfun main() {\n    val gestor = GestorTareas()\n    gestor.mostrarTareas()  // Debe indicar que las tareas no est\u00e1n inicializadas\n\n    val listaTareas = listOf(Tarea(\"Aprender Kotlin\"), Tarea(\"Hacer ejercicio\"))\n    gestor.inicializarTareas(listaTareas)\n\n    gestor.mostrarTareas()  // Ahora debe mostrar las tareas asignadas\n}\n</code></pre> </li> </ul> </li> </ol> <p>En este ejemplo, el gestor de tareas comienza sin conocer las tareas. Solo despu\u00e9s de inicializarlo con una lista de tareas (mediante el m\u00e9todo <code>inicializarTareas</code>),  est\u00e1 listo para funcionar y mostrar las tareas. Esto demuestra el uso de <code>lateinit</code> para propiedades que ser\u00e1n inicializadas m\u00e1s tarde y tambi\u00e9n muestra c\u00f3mo comprobar  si una propiedad <code>lateinit</code> ha sido inicializada antes de usarla, usando <code>::tareas.isInitialized</code>.</p> <p>En Kotlin, el operador <code>::</code> se utiliza como referencia a funciones o propiedades, y tambi\u00e9n para acceder a ciertas propiedades de la reflexi\u00f3n del lenguaje.</p> <ol> <li>Referencia a Funciones o Propiedades:</li> <li>Puedes obtener una referencia a una funci\u00f3n espec\u00edfica de una clase o un objeto usando el operador <code>::</code>.</li> <li>Esto es \u00fatil, por ejemplo c\u00f3mo ya hemos visto anteriormente en esta unidad, cuando quieres pasar una funci\u00f3n como argumento a otra funci\u00f3n de orden superior.</li> <li> <p>Ejemplo:</p> <pre><code>```kotlin\nfun saludar() {\n    println(\"\u00a1Hola!\")\n}\n\nfun ejecutarAccion(accion: () -&gt; Unit) {\n    accion()\n}\n\nfun main() {\n    // Pasamos la referencia de la funci\u00f3n 'saludar' a 'ejecutarAccion'\n    ejecutarAccion(::saludar) // Imprime \"\u00a1Hola!\"\n}\n```\n</code></pre> <ul> <li>Lo mismo se puede hacer con propiedades para obtener una referencia a la propiedad que puedes usar para leer o modificar la propiedad.</li> <li>Ejemplo:     <code>kotlin     var contador = 0      fun main() {         val referenciaContador = ::contador         referenciaContador.set(referenciaContador.get() + 1)         println(contador) // Imprime 1     }</code></li> </ul> </li> <li> <p>Verificaci\u00f3n de Inicializaci\u00f3n con <code>lateinit</code>:</p> </li> <li>En el contexto de una propiedad <code>lateinit</code>, puedes usar <code>::</code> para hacer referencia a la propiedad y luego <code>.isInitialized</code> para verificar si la propiedad ha sido inicializada.</li> <li>Ejemplo:         <pre><code>class Ejemplo {\n    lateinit var texto: String\n}\n\nfun main() {\n    val ejemplo = Ejemplo()\n    if (::texto.isInitialized) { // Verifica si 'texto' ha sido inicializado\n        println(ejemplo.texto)\n    } else {\n        println(\"texto no est\u00e1 inicializado.\")\n    }\n}\n</code></pre></li> <li>Esto es especialmente \u00fatil para propiedades <code>lateinit</code>, ya que acceder a una propiedad <code>lateinit</code> no inicializada lanzar\u00eda una excepci\u00f3n.      La verificaci\u00f3n con <code>.isInitialized</code> te permite evitar esta excepci\u00f3n comprobando primero si la propiedad ha sido inicializada.</li> </ol> <p>El uso de <code>::</code> es bastante vers\u00e1til y forma parte de las capacidades reflexivas y funcionales de Kotlin,  permitiendo escribir c\u00f3digo m\u00e1s abstracto y general, as\u00ed como realizar comprobaciones en tiempo de ejecuci\u00f3n sobre las propiedades y funciones de tus objetos.</p>"},{"location":"section1/u05/teoria/otros/_Polimorfismo_en_Herencia/","title":"Polimorfismo en Herencia","text":""},{"location":"section1/u05/teoria/otros/_Polimorfismo_en_Herencia/#polimorfismo-en-la-herencia","title":"Polimorfismo en la Herencia","text":"<p>Para explicar este concepto, primero crearemos una clase <code>Padre</code> con la propiedad <code>numAleatorio</code> y los m\u00e9todos <code>dameNumero()</code> y <code>dameTamanio()</code>.  Luego, crearemos la clase <code>Hija</code> que hereda de <code>Padre</code> y tiene sus propios atributos y m\u00e9todos.</p> <ul> <li>Clase Padre:</li> </ul> <pre><code>import kotlin.random.Random\n\nopen class Padre {\n    val numAleatorio: Int = Random.nextInt(100, 1000)\n\n    open fun dameNumero(): Int {\n        return numAleatorio\n    }\n\n    fun dameTamanio(texto: String): Int {\n        return texto.length\n    }\n}\n</code></pre> <p>En este c\u00f3digo, la clase <code>Padre</code> genera un n\u00famero aleatorio al inicializarse. La funci\u00f3n <code>dameNumero()</code> simplemente devuelve ese n\u00famero,  y la funci\u00f3n <code>dameTamanio()</code> devuelve la longitud del texto recibido.</p> <ul> <li>Clase Hija:</li> </ul> <pre><code>class Hija(var descripcion: String = \"Clase Derivada\") : Padre() {\n    var contador: Int = 0\n\n    override fun dameNumero(): Int {\n        contador++\n        println(\"Mostramos descripcion desde la funci\u00f3n dameNumero() -&gt; $descripcion\")\n        return contador\n    }\n\n    fun muestraDescripcion() {\n        println(descripcion)\n    }\n}\n</code></pre> <p>La clase <code>Hija</code> hereda de <code>Padre</code> y sobreescribe el m\u00e9todo <code>dameNumero()</code> para incrementar y devolver el valor de  su propio contador y tambi\u00e9n mostrar por pantalla su propiedad <code>descripcion</code>.  Tambi\u00e9n tiene un m\u00e9todo <code>muestraDescripcion()</code> que imprime su descripci\u00f3n.</p> <ul> <li>Programa principal:</li> </ul> <pre><code>fun main() {\n    val padre1 = Padre()\n    println(\"Info de padre1:\")\n    println(\"--------------\")\n    println(\"dameNumero() en padre: ${padre1.dameNumero()}\")\n    println(\"numAleatorio = ${padre1.numAleatorio}\")\n    println(\"numAleatorio = ${padre1.numAleatorio}\")\n    println(\"numAleatorio = ${padre1.numAleatorio}\")\n    println(\"dameTamanio('padre1 como Padre') = ${padre1.dameTamanio(\"padre1 como Padre\")}\")\n\n    println()\n\n    val padre2 : Padre = Hija()\n    println(\"Info de padre2:\")\n    println(\"--------------\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"numAleatorio = ${padre2.numAleatorio}\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"dameNumero() en padre2: ${padre2.dameNumero()}\")\n    println(\"numAleatorio = ${padre2.numAleatorio}\")\n    println(\"dameTamanio('padre2 como Padre instanciado con Hija()') = ${padre2.dameTamanio(\"padre2 como Padre instanciado con Hija()\")}\")\n\n    // El objeto padre2 es de tipo Padre y no puede llamar a muestraDescripcion(), \n    // que es un m\u00e9todo propio de la clase Hija\n    // padre2.muestraDescripcion()\n    // Tampoco puede acceder directamente a contador, ya que es una propiedad \n    // de la clase Hija.\n    //println(\"contador = ${padre2.contador}\")\n}\n</code></pre> <p>En la funci\u00f3n <code>main</code>, creamos instancias de ambas clases y mostramos sus comportamientos mediante llamadas a sus m\u00e9todos.</p> <pre><code>Nota: La clase `Hija` no puede acceder directamente a `numAleatorio` de `Padre` si fuera privada, as\u00ed que en este caso, `numAleatorio` \nest\u00e1 declarada como p\u00fablica. \n\nAdem\u00e1s, el m\u00e9todo `dameNumero()` en la clase `Hija` sobreescribe el m\u00e9todo de la clase `Padre`, lo cual se permite en Kotlin gracias a \nque la clase `Padre` y el m\u00e9todo `dameNumero()` est\u00e1n marcados como `open`.\n</code></pre> <p>Si ejecutamos el programa, lo que est\u00e1mos observando es un concepto central en la programaci\u00f3n orientada a objetos llamado \"polimorfismo\".  Este concepto permite que una variable de un tipo de clase <code>base</code> (superclase) pueda referenciar a un objeto de una clase <code>derivada</code> (subclase),  y al llamar a m\u00e9todos sobrescritos, se invocar\u00e1n las implementaciones de la <code>subclase</code>.</p> <p>En nuestro caso, tenemos:</p> <pre><code>val padre2: Padre = Hija()\n</code></pre> <p>Aqu\u00ed, <code>padre2</code> es una referencia de tipo <code>Padre</code>, pero apunta a una instancia de <code>Hija</code>.  Esto es posible porque <code>Hija</code> es una subclase de <code>Padre</code> y, por lo tanto, hereda todas sus propiedades y comportamientos.  Sin embargo, al sobrescribir el m\u00e9todo <code>dameNumero()</code> en <code>Hija</code>, cuando este m\u00e9todo se llama en la instancia <code>padre2</code>,  se ejecuta la versi\u00f3n de <code>Hija</code> del m\u00e9todo, no la de <code>Padre</code>. Esto es una manifestaci\u00f3n de polimorfismo.</p> <p>Cuando hacemos llamadas a m\u00e9todos a trav\u00e9s de una referencia de tipo <code>Padre</code>, como <code>padre2</code>, sucede lo siguiente:</p> <ol> <li> <p>Acceso a M\u00e9todos y Propiedades:</p> <ul> <li>Si el m\u00e9todo o la propiedad existe en la clase <code>Padre</code> y no est\u00e1 sobrescrito en <code>Hija</code>, se accede a la versi\u00f3n de <code>Padre</code>.</li> <li>Si el m\u00e9todo est\u00e1 sobrescrito en <code>Hija</code>, como <code>dameNumero()</code>, se accede a la versi\u00f3n de <code>Hija</code>,   incluso si la llamada se realiza a trav\u00e9s de una referencia de tipo <code>Padre</code>.</li> </ul> </li> <li> <p>Acceso Restringido a Miembros Espec\u00edficos de la Subclase:</p> <ul> <li>No podemos acceder directamente a miembros espec\u00edficos de <code>Hija</code> (como <code>contador</code> o <code>muestraDescripcion()</code>) a trav\u00e9s de una   referencia de tipo <code>Padre</code> sin un casting expl\u00edcito. Esto es porque, seg\u00fan la definici\u00f3n de <code>Padre</code>, esos miembros no existen.</li> </ul> </li> </ol> <p>En resumen, el tipo de la referencia (<code>Padre</code> en este caso) determina qu\u00e9 propiedades y m\u00e9todos est\u00e1n accesibles.  Sin embargo, el tipo real del objeto al que apunta la referencia (una instancia de <code>Hija</code>) determina qu\u00e9 implementaciones de  m\u00e9todos se ejecutan cuando se invocan. </p> <p>Esto permite el dise\u00f1o de sistemas flexibles y extensibles donde puedes usar objetos de diferentes subclases de manera intercambiable,  siempre que compartan una interfaz com\u00fan definida por su clase base.</p> <p>*** Casting</p> <p>Si ahora en el <code>main</code> realizamos un Casting de <code>padre2</code> como <code>Hija</code>:</p> <pre><code>fun main() {\n\n    ...    \n\n    // Casting de padre2 a Hija en l\u00ednea para llamar a\n    // contador y muestraDescripcion() directamente.\n    val padre2ComoHija = (padre2 as Hija)\n    println(\"Info de padre2ComoHija:\")\n    println(\"--------------\")\n    println(\"dameNumero() en padre2ComoHija: ${padre2ComoHija.dameNumero()}\")\n    println(\"dameNumero() en padre2ComoHija: ${padre2ComoHija.dameNumero()}\")\n    println(\"dameNumero() en padre2ComoHija: ${padre2ComoHija.dameNumero()}\")\n    padre2ComoHija.muestraDescripcion()\n    println(\"contador = ${padre2ComoHija.contador}\")\n    println(\"numAleatorio = ${padre2ComoHija.numAleatorio}\")\n    println(\"numAleatorio = ${padre2ComoHija.numAleatorio}\")\n    println(\"dameTamanio('padre2 con Casting a Hija') = ${padre2ComoHija.dameTamanio(\"padre2 con Casting a Hija\")}\")\n}\n</code></pre> <p>La capacidad de <code>padre2ComoHija</code> para acceder a <code>numAleatorio</code> directamente despu\u00e9s del casting a <code>Hija</code> se debe a c\u00f3mo funciona la herencia en la POO.  Cuando hacemos un casting de una referencia de una clase base (<code>Padre</code>) a una clase derivada (<code>Hija</code>), no estamos cambiando el objeto en s\u00ed,  sino c\u00f3mo nos referimos a ese objeto en nuestro c\u00f3digo.</p> <p>Aqu\u00ed est\u00e1n los puntos clave:</p> <ol> <li>Herencia:</li> <li> <p><code>Hija</code> es una subclase de <code>Padre</code>, lo que significa que una instancia de <code>Hija</code> hereda todos los campos y m\u00e9todos p\u00fablicos o protegidos de <code>Padre</code>.      En nuestro caso, <code>numAleatorio</code> es un campo p\u00fablico en <code>Padre</code>, por lo que tambi\u00e9n es accesible a trav\u00e9s de cualquier instancia de <code>Hija</code>.</p> </li> <li> <p>Casting:</p> </li> <li> <p>Al hacer <code>(padre2 as Hija)</code>, estamos dici\u00e9ndole al compilador: \"Trata <code>padre2</code>, que sabes que es de tipo <code>Padre</code>, como si fuera de tipo <code>Hija</code>\".      Esto es seguro porque <code>padre2</code> es realmente una instancia de <code>Hija</code>. Despu\u00e9s de este casting, podemos acceder, no solo a los miembros de <code>Hija</code>,      sino tambi\u00e9n a todos los miembros accesibles de <code>Padre</code> (como <code>numAleatorio</code>) a trav\u00e9s de la referencia <code>padre2ComoHija</code>.</p> </li> <li> <p>Acceso a los Miembros de Clase:</p> </li> <li><code>numAleatorio</code> es un miembro de <code>Padre</code> que es accesible en <code>Hija</code> debido a la herencia. Cuando hacemos el casting de <code>padre2</code> a <code>Hija</code>,      estamos simplemente proporcionando una referencia de tipo <code>Hija</code> al mismo objeto.      El objeto no cambia, ni sus miembros. Por lo tanto, <code>padre2ComoHija</code> tiene acceso a <code>numAleatorio</code> porque <code>Hija</code> tiene acceso a los miembros      p\u00fablicos de <code>Padre</code>.</li> </ol> <p>El hecho de que podamos acceder a <code>numAleatorio</code> a trav\u00e9s de <code>padre2ComoHija</code> es un reflejo de estos principios de herencia y polimorfismo en la  programaci\u00f3n orientada a objetos. El objeto no ha cambiado, solo la forma en que nos referimos a \u00e9l en nuestro c\u00f3digo, permiti\u00e9ndonos acceder a m\u00e1s de sus funcionalidades a trav\u00e9s del tipo m\u00e1s espec\u00edfico (<code>Hija</code>).</p>"},{"location":"section1/u05/teoria/otros/_Propiedades_Atributos_C%23_Kotlin/","title":"Propiedades Atributos C# Kotlin","text":""},{"location":"section1/u05/teoria/otros/_Propiedades_Atributos_C%23_Kotlin/#atributos-de-clase-vs-propiedades","title":"Atributos de clase vs Propiedades","text":""},{"location":"section1/u05/teoria/otros/_Propiedades_Atributos_C%23_Kotlin/#c","title":"C","text":"<p>En C#, un atributo de clase es una variable que pertenece a la clase, mientras que una propiedad es una forma de acceder y  controlar el acceso a ese atributo. Las propiedades pueden ofrecer un control m\u00e1s detallado sobre c\u00f3mo se accede o se modifica  un atributo, por ejemplo, validando datos antes de asignarlos.</p> <p>Esto un ejemplo simple de c\u00f3mo definir un atributo de clase y su propiedad:</p> <pre><code>using System;\n\npublic class Coche\n{\n    // Atributo de clase privado\n    private string color;\n\n    // Propiedad p\u00fablica para acceder y asignar el atributo 'color'\n    public string Color\n    {\n        get\n        {\n            // Aqu\u00ed se puede agregar l\u00f3gica adicional al obtener el color\n            return color;\n        }\n        set\n        {\n            // Aqu\u00ed se puede validar el valor antes de asignarlo al atributo 'color'\n            if (value == null)\n                throw new ArgumentNullException(\"El color no puede ser nulo.\");\n            else\n                color = value;\n        }\n    }\n\n    // Constructor de la clase\n    public Coche(string inicialColor)\n    {\n        // Asignar un color inicial al coche a trav\u00e9s de la propiedad\n        Color = inicialColor;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Crear una instancia de Coche con un color inicial\n        Coche miCoche = new Coche(\"Rojo\");\n\n        // Mostrar el color actual del coche\n        Console.WriteLine(\"El color del coche es: \" + miCoche.Color);\n\n        // Cambiar el color del coche\n        miCoche.Color = \"Azul\";\n\n        // Mostrar el nuevo color del coche\n        Console.WriteLine(\"El nuevo color del coche es: \" + miCoche.Color);\n    }\n}\n</code></pre> <p>En este ejemplo, <code>color</code> es un atributo de clase privado de la clase <code>Coche</code>. La propiedad <code>Color</code> permite acceder y modificar el atributo <code>color</code>.  Nota c\u00f3mo la propiedad <code>Color</code> proporciona un m\u00e9todo <code>get</code> para obtener el valor del color y un m\u00e9todo <code>set</code> para cambiar el color, incluyendo una  validaci\u00f3n para asegurarse de que el nuevo color no sea nulo antes de asignarlo al atributo <code>color</code>.</p>"},{"location":"section1/u05/teoria/otros/_Propiedades_Atributos_C%23_Kotlin/#kotlin","title":"Kotlin","text":"<p>Ahora realizamos el mismo c\u00f3digo en Kotlin y despu\u00e9s mostramos las diferencias.</p> <pre><code>class Coche(inicialColor: String) {\n    // Atributo de clase con propiedad incorporada\n    var color: String = inicialColor\n        set(value) {\n            // Validar el valor antes de asignarlo al atributo 'color'\n            if (value.isEmpty()) {\n                throw IllegalArgumentException(\"El color no puede estar vac\u00edo.\")\n            }\n            field = value\n        }\n\n    init {\n        // Validaci\u00f3n adicional o l\u00f3gica de inicializaci\u00f3n si es necesario\n    }\n}\n\nfun main() {\n    // Crear una instancia de Coche con un color inicial\n    val miCoche = Coche(\"Rojo\")\n\n    // Mostrar el color actual del coche\n    println(\"El color del coche es: ${miCoche.color}\")\n\n    // Cambiar el color del coche\n    miCoche.color = \"Azul\"\n\n    // Mostrar el nuevo color del coche\n    println(\"El nuevo color del coche es: ${miCoche.color}\")\n}\n</code></pre> <p>Diferencias y caracter\u00edsticas de Kotlin en relaci\u00f3n con C# en este contexto:</p> <ol> <li> <p>Propiedades Incorporadas:</p> <ul> <li>Kotlin maneja atributos de clase y propiedades como una sola entidad, a diferencia de C# que los maneja por separado.   En Kotlin, al definir un <code>var</code> (variable mutable) o <code>val</code> (variable inmutable), est\u00e1s creando autom\u00e1ticamente una propiedad   con su getter y setter correspondiente. Esto reduce la cantidad de c\u00f3digo necesario para definir propiedades simples.</li> </ul> </li> <li> <p>Palabras Clave <code>field</code>:</p> <ul> <li>En el setter de Kotlin, usas <code>field</code> para referirte al respaldo del campo de la propiedad. Es una palabra clave especial   que solo se puede usar dentro de los accesores de las propiedades (getters y setters).</li> </ul> </li> <li> <p>Inicializaci\u00f3n de Propiedades:</p> <ul> <li>En Kotlin, las propiedades pueden ser inicializadas directamente en su declaraci\u00f3n o en el bloque de inicializaci\u00f3n <code>init</code>.   Esto ofrece una sintaxis m\u00e1s concisa y clara.</li> </ul> </li> <li> <p>Verificaci\u00f3n de Nulos y Validaci\u00f3n:</p> <ul> <li>Kotlin tiene un sistema de tipos que distingue entre referencias que pueden ser nulas y las que no pueden serlo.   En este ejemplo, el tipo <code>String</code> no admite nulos. Si se intenta asignar un valor nulo a <code>color</code>, el programa no compilar\u00e1.</li> <li>La validaci\u00f3n en el <code>setter</code> se hace de manera similar a C#, pero lanzando una <code>IllegalArgumentException</code> si el valor es inv\u00e1lido.</li> </ul> </li> <li> <p>Sintaxis de Funciones y Clases:</p> <ul> <li>La sintaxis de Kotlin es m\u00e1s concisa. Por ejemplo, no es necesario especificar el tipo de retorno para funciones que no retornan un valor (equivalente a <code>void</code> en C#).</li> </ul> </li> </ol> <p>Kotlin, con su dise\u00f1o moderno, ofrece un enfoque m\u00e1s compacto y expresivo, especialmente \u00fatil para definir propiedades y realizar validaciones.  El idioma promueve un c\u00f3digo m\u00e1s seguro y menos propenso a errores en tiempo de ejecuci\u00f3n gracias a su manejo de nulos y su sistema de tipos.</p>"},{"location":"section1/u06/","title":"UD 6 - Creaci\u00f3n de programas con POO","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u06/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u06/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 6. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos.</p>","tags":["Software"]},{"location":"section1/u06/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han identificado los conceptos de herencia, superclase y subclase.</li> <li>b) Se han utilizado modificadores para bloquear y forzar la herencia de clases y m\u00e9todos.</li> <li>c) Se ha reconocido la incidencia de los constructores en la herencia.</li> <li>d) Se han creado clases heredadas que sobrescriban la implementaci\u00f3n de m\u00e9todos de la superclase.</li> <li>e) Se han dise\u00f1ado y aplicado jerarqu\u00edas de clases.</li> <li>f) Se han probado y depurado las jerarqu\u00edas de clases.</li> <li>g) Se han realizado programas que implementen y utilicen jerarqu\u00edas de clases.</li> <li>h) Se ha comentado y documentado el c\u00f3digo.</li> </ul>","tags":["Software"]},{"location":"section1/u06/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 3 de Programaci\u00f3n orientada a objetos.</p> <ul> <li>U6: Estructuras de datos.</li> </ul> <p>En la Unidad 6, veremos:</p> <ul> <li>Jerarqu\u00edas de clases</li> <li>Ejemplo: Sistema de Gesti\u00f3n de Biblioteca de Medios</li> <li>Principios de SOLID</li> <li>Comentarios y documentaci\u00f3n</li> </ul>","tags":["Software"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/otrosRecursos/ej01_SOLID_SRP/","title":"ej01 SOLID SRP","text":""},{"location":"section1/u06/practica/otrosRecursos/ej01_SOLID_SRP/#ejercicio-01-base-de-datos-de-empleados","title":"Ejercicio 01: Base de datos de Empleados.","text":""},{"location":"section1/u06/practica/otrosRecursos/ej01_SOLID_SRP/#contexto","title":"Contexto:","text":"<p>Este c\u00f3digo maneja tanto la l\u00f3gica de negocio de los empleados como la interacci\u00f3n con la base de datos dentro de la misma clase, lo cual va en contra del SRP (principio de responsabilidad \u00fanica).</p>"},{"location":"section1/u06/practica/otrosRecursos/ej01_SOLID_SRP/#tarea","title":"Tarea:","text":"<p>Refactoriza el c\u00f3digo para que cumpla el SRP.</p> <pre><code>class Empleado(val id: Int, var nombre: String, var puesto: String) {\n   fun guardarEmpleado() {\n       // Conexi\u00f3n a la base de datos\n       println(\"Conectando a la base de datos...\")\n       // L\u00f3gica para guardar el empleado\n       println(\"Empleado $nombre guardado en la base de datos\")\n   }\n\n   fun eliminarEmpleado() {\n       // Conexi\u00f3n a la base de datos\n       println(\"Conectando a la base de datos...\")\n       // L\u00f3gica para eliminar el empleado\n       println(\"Empleado $nombre eliminado de la base de datos\")\n   }\n\n   fun generarInformeEmpleado() {\n       // Generar un informe del empleado\n       println(\"Generando informe para el empleado $nombre\")\n   }\n}\n\nfun main() {\n   val empleado = Empleado(1, \"Juan P\u00e9rez\", \"Desarrollador\")\n   empleado.guardarEmpleado()\n   empleado.eliminarEmpleado()\n   empleado.generarInformeEmpleado()\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej01_SOLID_SRP/#solucion-refactorizada","title":"Soluci\u00f3n refactorizada:","text":"<p>La soluci\u00f3n involucra separar las responsabilidades en clases diferentes: una para manejar las operaciones de la base de datos (BaseDatosEmpleado), otra para la generaci\u00f3n de informes (GeneradorInformeEmpleado), y  mantenemos la clase Empleado enfocada en los datos del empleado.</p> <pre><code>// Data class para las propiedades del empleado\ndata class Empleado(val id: Int, var nombre: String, var puesto: String)\n\n// Clase para manejar las operaciones de la base de datos de empleados\nclass BaseDatosEmpleado {\n    fun guardarEmpleado(empleado: Empleado) {\n        println(\"Empleado ${empleado.nombre} guardado en la base de datos\")\n    }\n\n    fun eliminarEmpleado(empleado: Empleado) {\n        println(\"Empleado ${empleado.nombre} eliminado de la base de datos\")\n    }\n}\n\n// Clase para generar informes de empleados\nclass GeneradorInformeEmpleado {\n    fun generarInforme(empleado: Empleado) {\n        println(\"Generando informe para el empleado ${empleado.nombre}\")\n    }\n}\n\nfun main() {\n    val empleado = Empleado(1, \"Juan P\u00e9rez\", \"Desarrollador\")\n    val dbEmpleado = BaseDatosEmpleado()\n    val generadorInforme = GeneradorInformeEmpleado()\n\n    dbEmpleado.guardarEmpleado(empleado)\n    dbEmpleado.eliminarEmpleado(empleado)\n    generadorInforme.generarInforme(empleado)\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej02_SOLID_SRP/","title":"ej02 SOLID SRP","text":""},{"location":"section1/u06/practica/otrosRecursos/ej02_SOLID_SRP/#ejercicio-02-sistema-de-biblioteca","title":"Ejercicio 02: Sistema de Biblioteca","text":""},{"location":"section1/u06/practica/otrosRecursos/ej02_SOLID_SRP/#contexto","title":"Contexto:","text":"<p>Imagina que est\u00e1s dise\u00f1ando un sistema para una biblioteca que gestiona libros y pr\u00e9stamos. El sistema necesita soportar operaciones para agregar nuevos libros al inventario,  prestar libros a los usuarios, devolver libros y generar informes de libros prestados.</p> <p>Inicialmente, se te ocurre crear una clase <code>Libro</code> que maneje todo: las propiedades del libro, la gesti\u00f3n del inventario, los pr\u00e9stamos, las devoluciones y la generaci\u00f3n de informes.  R\u00e1pidamente te das cuenta de que esto viola el Principio de Responsabilidad \u00danica (SRP).</p>"},{"location":"section1/u06/practica/otrosRecursos/ej02_SOLID_SRP/#tarea","title":"Tarea:","text":"<ol> <li> <p>Refactoriza este dise\u00f1o inicial para adherir al Principio de Responsabilidad \u00danica. Considera separar las responsabilidades en diferentes clases, por ejemplo, una clase para  manejar las operaciones del inventario, otra para los pr\u00e9stamos de libros, y otra para generar informes, adem\u00e1s de mantener la clase <code>Libro</code> centrada en las propiedades del libro.</p> </li> <li> <p>Las caracter\u00edsticas de los libros pueden ser el isbn, titulo, autor y estado (disponible, prestado). El sistema debe permitir agregar, eliminar y comprobar si un libro est\u00e1 disponible (por isbn).</p> </li> <li> <p>En el <code>main</code> utiliza las clases para agregar tres libros, prestar dos de ellos, intentar volver a prestar uno ya prestado y finalmente eliminar un libro del inventario. Los datos de los libros son los siguientes:</p> </li> <li> <p>isbn: 123-456-789, t\u00edtulo: Kotlin para principiantes y autor: Juan P\u00e9rez.</p> </li> <li>isbn: 987-654-321, t\u00edtulo: Desarrollo Avanzado con Kotlin y autor: Ana L\u00f3pez.</li> <li> <p>isbn: 456-789-123, t\u00edtulo: Fundamentos de Programaci\u00f3n en Kotlin y autor: Carlos Garc\u00eda.</p> </li> <li> <p>Por \u00faltimo, nuestro sistema debe ser capaz de generar los siguientes informes: un informe detallado que incluya todos los libros, un informe con los libros disponibles para pr\u00e9stamo y otro con    los que actualmente est\u00e1n prestados. Mostrar en el main los tres informes al final del programa.</p> </li> </ol>"},{"location":"section1/u06/practica/otrosRecursos/ej02_SOLID_SRP/#solucion-propuesta","title":"Soluci\u00f3n Propuesta","text":"<p>A continuaci\u00f3n, se detalla una soluci\u00f3n posible para el ejercicio propuesto. La idea es dividir las responsabilidades en clases distintas, cada una enfocada en un \u00fanico aspecto del sistema de la biblioteca.</p> <p>Paso 1: Definir la clase <code>Libro</code> como una <code>data class</code></p> <p>Esta clase contiene solo las propiedades que definen un libro.</p> <pre><code>data class Libro(val isbn: String, var titulo: String, var autor: String, var estado: EstadoLibro = EstadoLibro.DISPONIBLE)\n\nenum class EstadoLibro {\n    DISPONIBLE, PRESTADO\n}\n</code></pre> <p>Paso 2: Crear una clase <code>GestorInventario</code> para manejar el inventario de libros</p> <p>Esta clase se encarga de agregar y remover libros del inventario.</p> <pre><code>class GestorInventario {\n    private val libros = mutableListOf&lt;Libro&gt;()\n\n    fun agregarLibro(libro: Libro) {\n        libros.add(libro)\n        println(\"Libro agregado: ${libro.titulo}\")\n    }\n\n    fun removerLibro(libro: Libro) {\n        libros.remove(libro)\n        println(\"Libro removido: ${libro.titulo}\")\n    }\n\n    fun cambiarEstadoLibro(isbn: String, nuevoEstado: EstadoLibro) {\n        libros.find { it.isbn == isbn }?.let {\n            it.estado = nuevoEstado\n            println(\"Estado cambiado a $nuevoEstado para el libro: ${it.titulo}\")\n        }\n    }\n\n    fun estaDisponible(isbn: String): Boolean {\n        return libros.any { it.isbn == isbn &amp;&amp; it.estado == EstadoLibro.DISPONIBLE }\n    }\n\n    fun listarTodosLosLibros(): List&lt;Libro&gt; = libros\n\n    fun listarLibrosDisponibles(): List&lt;Libro&gt; = libros.filter { it.estado == EstadoLibro.DISPONIBLE }\n\n    fun listarLibrosPrestados(): List&lt;Libro&gt; = libros.filter { it.estado == EstadoLibro.PRESTADO }\n}\n</code></pre> <p>Paso 3: Crear una clase <code>SistemaPrestamos</code> para manejar los pr\u00e9stamos</p> <p>Esta clase gestiona el pr\u00e9stamo de libros a los usuarios.</p> <pre><code>class SistemaPrestamos(private val inventario: GestorInventario) {\n    fun prestarLibro(isbn: String) {\n        if (inventario.estaDisponible(isbn)) {\n            inventario.cambiarEstadoLibro(isbn, EstadoLibro.PRESTADO)\n            println(\"Libro prestado con ISBN: $isbn\")\n        } else {\n            println(\"El libro con ISBN $isbn no est\u00e1 disponible para pr\u00e9stamo.\")\n        }\n    }\n\n    fun devolverLibro(isbn: String) {\n        inventario.cambiarEstadoLibro(isbn, EstadoLibro.DISPONIBLE)\n        println(\"Libro devuelto con ISBN: $isbn\")\n    }\n}\n</code></pre> <p>Paso 4: Crear una clase <code>GeneradorInformes</code> para generar informes de libros</p> <p>Esta clase se encarga de generar informes relacionados con los libros, como los libros m\u00e1s prestados.</p> <pre><code>class GeneradorInformes(private val inventario: GestorInventario) {\n    fun generarInformeDetalladoCompleto() {\n        println(\"\\nInforme Detallado Completo de la Biblioteca:\")\n        inventario.listarTodosLosLibros().forEach { libro -&gt;\n            println(\"- ${libro.titulo} (ISBN: ${libro.isbn}) - Estado: ${libro.estado}\")\n        }\n    }\n\n    fun generarInformeLibrosDisponibles() {\n        println(\"\\nInforme de Libros Disponibles para Pr\u00e9stamo:\")\n        inventario.listarLibrosDisponibles().forEach { libro -&gt;\n            println(\"- ${libro.titulo} (ISBN: ${libro.isbn})\")\n        }\n    }\n\n    fun generarInformeLibrosPrestados() {\n        println(\"\\nInforme de Libros Actualmente Prestados:\")\n        inventario.listarLibrosPrestados().forEach { libro -&gt;\n            println(\"- ${libro.titulo} (ISBN: ${libro.isbn})\")\n        }\n    }\n}\n</code></pre> <p>Implementaci\u00f3n en el <code>main</code>:</p> <pre><code>fun main() {\n    val libro1 = Libro(\"123-456-789\", \"Kotlin para principiantes\", \"Juan P\u00e9rez\")\n    val libro2 = Libro(\"987-654-321\", \"Desarrollo Avanzado con Kotlin\", \"Ana L\u00f3pez\")\n    val libro3 = Libro(\"456-789-123\", \"Fundamentos de Programaci\u00f3n en Kotlin\", \"Carlos Garc\u00eda\")\n\n    val gestorInventario = GestorInventario()\n    gestorInventario.agregarLibro(libro1)\n    gestorInventario.agregarLibro(libro2)\n    gestorInventario.agregarLibro(libro3)\n\n    val sistemaPrestamos = SistemaPrestamos(gestorInventario)\n\n    println(\"Prestar libros:\")\n    sistemaPrestamos.prestarLibro(libro1.isbn) // Libro 1 prestado\n    sistemaPrestamos.prestarLibro(libro2.isbn) // Libro 2 prestado\n\n    println(\"\\nIntentar prestar un libro ya prestado:\")\n    sistemaPrestamos.prestarLibro(libro1.isbn) // Intento fallido, libro 1 ya est\u00e1 prestado\n\n    println(\"\\nDevolver un libro y luego eliminarlo:\")\n    sistemaPrestamos.devolverLibro(libro2.isbn) // Libro 2 devuelto\n    gestorInventario.removerLibro(libro2) // Libro 2 eliminado del inventario\n\n    val generadorInformes = GeneradorInformes(gestorInventario)\n    generadorInformes.generarInformeDetalladoCompleto() // Genera un informe detallado de todos los libros\n    generadorInformes.generarInformeLibrosDisponibles() // Genera un informe de los libros disponibles\n    generadorInformes.generarInformeLibrosPrestados() // Genera un informe de los libros prestados\n}\n</code></pre> <p>Esta soluci\u00f3n demuestra c\u00f3mo aplicar el Principio de Responsabilidad \u00danica en un sistema de biblioteca. Cada clase tiene una \u00fanica raz\u00f3n para cambiar, lo que facilita  el mantenimiento y la extensi\u00f3n del sistema.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej03_SOLID_OCP/","title":"ej03 SOLID OCP","text":""},{"location":"section1/u06/practica/otrosRecursos/ej03_SOLID_OCP/#ejercicio-03-sistema-de-notificaciones","title":"Ejercicio 03: Sistema de Notificaciones","text":""},{"location":"section1/u06/practica/otrosRecursos/ej03_SOLID_OCP/#contexto","title":"Contexto:","text":"<p>Imagina que est\u00e1s construyendo un sistema de notificaciones para una aplicaci\u00f3n. Inicialmente, el sistema s\u00f3lo env\u00eda notificaciones por correo electr\u00f3nico, pero con el tiempo,  se requiere a\u00f1adir m\u00e1s m\u00e9todos de notificaci\u00f3n como SMS y notificaciones push. El dise\u00f1o inicial podr\u00eda ser algo as\u00ed, lo cual viola el principio de abierto/cerrado porque para  a\u00f1adir nuevos m\u00e9todos de notificaci\u00f3n, necesitas modificar la clase existente.</p> <pre><code>class Notificador {\n    fun enviarNotificacion(usuario: Usuario, mensaje: String) {\n        when (usuario.tipoNotificacion) {\n            \"email\" -&gt; println(\"Enviando correo electr\u00f3nico a ${usuario.email}: $mensaje\")\n            \"sms\" -&gt; println(\"Enviando SMS a ${usuario.telefono}: $mensaje\")\n            // Para a\u00f1adir un nuevo m\u00e9todo de notificaci\u00f3n, debes modificar esta clase.\n        }\n    }\n}\n\ndata class Usuario(val nombre: String, val email: String, val telefono: String, val tipoNotificacion: String)\n\n// Uso\nfun main() {\n    val usuario = Usuario(\"Juan\", \"juan@example.com\", \"1234567890\", \"email\")\n    Notificador().enviarNotificacion(usuario, \"\u00a1Bienvenido a nuestro sistema!\")\n}\n</code></pre> <p>La soluci\u00f3n para adherir al principio de abierto/cerrado implica dise\u00f1ar el sistema de modo que sea f\u00e1cil a\u00f1adir nuevos m\u00e9todos de notificaci\u00f3n sin modificar el c\u00f3digo existente.  Esto se puede lograr mediante el uso de interfaces o clases abstractas.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej03_SOLID_OCP/#tarea","title":"Tarea:","text":"<p>Implementa un interface para realizar la misma soluci\u00f3n, pero cumpliendo el segundo principio SOLID Abierto/Cerrado (OCP). Crea las clases que necesites y modifica tambi\u00e9n el programa principal para poder usar la nueva soluci\u00f3n al problema.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej03_SOLID_OCP/#solucion-refactorizada","title":"Soluci\u00f3n refactorizada:","text":"<pre><code>interface MetodoNotificacion {\n    fun enviar(usuario: Usuario, mensaje: String)\n}\n\nclass NotificacionEmail: MetodoNotificacion {\n    override fun enviar(usuario: Usuario, mensaje: String) {\n        println(\"Enviando correo electr\u00f3nico a ${usuario.email}: $mensaje\")\n    }\n}\n\nclass NotificacionSMS: MetodoNotificacion {\n    override fun enviar(usuario: Usuario, mensaje: String) {\n        println(\"Enviando SMS a ${usuario.telefono}: $mensaje\")\n    }\n}\n\ndata class Usuario(val nombre: String, val email: String, val telefono: String)\n\nclass Notificador(private val metodo: MetodoNotificacion) {\n    fun enviarNotificacion(usuario: Usuario, mensaje: String) {\n        metodo.enviar(usuario, mensaje)\n    }\n}\n\n// Uso\nfun main() {\n    val usuario = Usuario(\"Juan\", \"juan@example.com\", \"1234567890\")\n    val notificadorEmail = Notificador(NotificacionEmail())\n    notificadorEmail.enviarNotificacion(usuario, \"\u00a1Bienvenido a nuestro sistema!\")\n\n    val notificadorSMS = Notificador(NotificacionSMS())\n    notificadorSMS.enviarNotificacion(usuario, \"Tu c\u00f3digo de verificaci\u00f3n es 1234\")\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/","title":"ej04 SOLID OCP","text":""},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#ejercicio-04-procesamiento-de-pedidos","title":"Ejercicio 04: Procesamiento de Pedidos","text":""},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#contexto","title":"Contexto:","text":"<p>Est\u00e1s creando una aplicaci\u00f3n para gestionar el procesamiento de pedidos en una tienda en l\u00ednea. Los pedidos pueden ser procesados de diferentes maneras dependiendo del tipo de producto (por ejemplo, productos digitales, f\u00edsicos, suscripciones).</p>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#tarea","title":"Tarea:","text":"<p>Dise\u00f1ar un sistema de procesamiento de pedidos que cumpla con el principio SOLID de Abierto/Cerrado (OCP). Debe ser f\u00e1cil a\u00f1adir nuevos tipos de productos y sus respectivos procesamientos sin modificar el c\u00f3digo existente.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#requerimientos","title":"Requerimientos:","text":"<ol> <li>Crea una interfaz <code>ProcesadorPedido</code> con un m\u00e9todo <code>procesar(pedido: Pedido)</code>.</li> <li>Implementa clases concretas para procesar diferentes tipos de pedidos (por ejemplo, <code>ProcesadorPedidoDigital</code>, <code>ProcesadorPedidoFisico</code>, <code>ProcesadorPedidoSuscripcion</code>).</li> <li>Aseg\u00farate de que a\u00f1adir un nuevo tipo de producto s\u00f3lo requiera a\u00f1adir una nueva clase que implemente <code>ProcesadorPedido</code> sin modificar ninguna otra parte del c\u00f3digo.</li> </ol>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#consideraciones","title":"Consideraciones:","text":"<ul> <li>El pedido tendr\u00e1 un id (Int), un tipo (String) y detalles (String).</li> <li> <p>El m\u00e9todo procesar simplemente debe imprimir por consola que est\u00e1 procesando un pedido espec\u00edfico, imaginemos que tenemos los siguientes pedidos: </p> </li> <li> <p>Pedido(1, \"digital\", \"E-book de Kotlin\")</p> </li> <li>Pedido(2, \"fisico\", \"Libro impreso de Kotlin\")</li> <li>Pedido(3, \"suscripcion\", \"Suscripci\u00f3n a curso de Kotlin\")</li> <li>Pedido(4, \"desconocido\", \"Producto misterioso\")</li> </ul> <p>Los mensajes que debe mostrar por consola el m\u00e9todo procesar ser\u00e1n los siguientes:</p> <ul> <li>Procesando pedido digital: E-book de Kotlin</li> <li>Procesando pedido f\u00edsico: Libro impreso de Kotlin</li> <li>Procesando suscripci\u00f3n: Suscripci\u00f3n a curso de Kotlin</li> <li> <p>Tipo de pedido 'desconocido' no soportado</p> </li> <li> <p>Reflexiona sobre c\u00f3mo estructurar\u00edas las clases y las interfaces para maximizar la reutilizaci\u00f3n del c\u00f3digo y minimizar el impacto de los cambios futuros, siguiendo el principio de Abierto/Cerrado (OCP).   Intenta crear una clase <code>GestorPedidos(private val procesadores: Map&lt;String, ProcesadorPedido&gt;)</code> que reciba un diccionario con el mapeo de los posibles procesadores de pedidos que hab\u00e9is definido.</p> </li> </ul>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#solucion-refactorizada","title":"Soluci\u00f3n refactorizada:","text":"<p>Para resolver el ejercicio propuesto, siguiendo el Principio de Abierto/Cerrado, dise\u00f1aremos un sistema que permita gestionar distintos tipos de procesamiento de pedidos sin necesidad de modificar el  c\u00f3digo existente cada vez que se a\u00f1ada un nuevo tipo de pedido.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#paso-1-definir-la-interfaz-procesadorpedido","title":"Paso 1: Definir la Interfaz <code>ProcesadorPedido</code>","text":"<p>Primero, definimos una interfaz que ser\u00e1 implementada por todas las clases encargadas de procesar los diferentes tipos de pedidos.</p> <pre><code>interface ProcesadorPedido {\n    fun procesar(pedido: Pedido)\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#paso-2-crear-la-clase-pedido","title":"Paso 2: Crear la Clase <code>Pedido</code>","text":"<p>Luego, definimos una clase b\u00e1sica <code>Pedido</code> que contendr\u00e1 los detalles necesarios para cualquier pedido. A fines de este ejemplo, mantenemos la clase <code>Pedido</code> simple.</p> <pre><code>data class Pedido(val id: String, val tipo: String, val detalles: String)\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#paso-3-implementar-clases-concretas-de-procesamiento","title":"Paso 3: Implementar Clases Concretas de Procesamiento","text":"<p>Ahora, implementamos clases concretas para cada tipo de procesamiento de pedido. Estas clases implementar\u00e1n la interfaz <code>ProcesadorPedido</code>.</p> <pre><code>class ProcesadorPedidoDigital : ProcesadorPedido {\n    override fun procesar(pedido: Pedido) {\n        println(\"Procesando pedido digital: ${pedido.detalles}\")\n    }\n}\n\nclass ProcesadorPedidoFisico : ProcesadorPedido {\n    override fun procesar(pedido: Pedido) {\n        println(\"Procesando pedido f\u00edsico: ${pedido.detalles}\")\n    }\n}\n\nclass ProcesadorPedidoSuscripcion : ProcesadorPedido {\n    override fun procesar(pedido: Pedido) {\n        println(\"Procesando suscripci\u00f3n: ${pedido.detalles}\")\n    }\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#paso-4-crear-un-gestor-de-pedidos","title":"Paso 4: Crear un Gestor de Pedidos","text":"<p>Para facilitar el procesamiento de los pedidos, podemos crear una clase gestora que, dependiendo de los posibles procesadores del Sistema, elija el adecuado. Esto permite mantener el sistema flexible y abierto  a extensiones sin modificar el c\u00f3digo existente.</p> <pre><code>class GestorPedidos(private val procesadores: Map&lt;String, ProcesadorPedido&gt;) {\n    fun procesarPedido(pedido: Pedido) {\n        val procesador = procesadores[pedido.tipo]\n        procesador?.procesar(pedido) ?: println(\"Tipo de pedido '${pedido.tipo}' no soportado.\")\n    }\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej04_SOLID_OCP/#paso-5-demostracion-del-uso","title":"Paso 5: Demostraci\u00f3n del Uso","text":"<p>Finalmente, aqu\u00ed hay un ejemplo de c\u00f3mo utilizar este sistema para procesar diferentes tipos de pedidos.</p> <pre><code>fun main() {\n    val procesadores = mapOf(\n        \"digital\" to ProcesadorPedidoDigital(),\n        \"fisico\" to ProcesadorPedidoFisico(),\n        \"suscripcion\" to ProcesadorPedidoSuscripcion()\n        // A\u00f1adir nuevos procesadores de pedidos aqu\u00ed no requerir\u00eda modificar el c\u00f3digo de GestorPedidos.\n    )\n\n    val gestorPedidos = GestorPedidos(procesadores)\n\n    // Procesar pedidos...\n\n    val pedidoDigital = Pedido(1, \"digital\", \"E-book de Kotlin\")\n    gestorPedidos.procesarPedido(pedidoDigital)\n\n    val pedidoFisico = Pedido(2, \"fisico\", \"Libro impreso de Kotlin\")\n    gestorPedidos.procesarPedido(pedidoFisico)\n\n    val pedidoSuscripcion = Pedido(3, \"suscripcion\", \"Suscripci\u00f3n a curso de Kotlin\")\n    gestorPedidos.procesarPedido(pedidoSuscripcion)\n\n    val pedidoDesconocido = Pedido(4, \"desconocido\", \"Producto misterioso\")\n    gestorPedidos.procesarPedido(pedidoDesconocido) // Este mostrar\u00e1 un mensaje de tipo de pedido no soportado.\n}\n</code></pre> <p>Esta soluci\u00f3n demuestra c\u00f3mo aplicar el Principio de Abierto/Cerrado en el dise\u00f1o de un sistema de procesamiento de pedidos. Se puede a\u00f1adir f\u00e1cilmente soporte para nuevos tipos de pedidos simplemente implementando la interfaz <code>ProcesadorPedido</code> en una nueva clase, sin necesidad de modificar el c\u00f3digo existente.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/","title":"ej05 SOLID OCP Genericos","text":""},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#ejercicio-05-refactorizacion-del-sistema-de-procesamiento-de-pedidos-utilizando-genericos","title":"Ejercicio 05: Refactorizaci\u00f3n del Sistema de Procesamiento de Pedidos utilizando Gen\u00e9ricos","text":""},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#contexto","title":"Contexto:","text":"<p>Imagina que eres parte de un equipo de desarrollo encargado de mejorar y extender un sistema de gesti\u00f3n de pedidos para una tienda en l\u00ednea. La versi\u00f3n actual del sistema maneja diferentes tipos de pedidos  (digitales, f\u00edsicos, y suscripciones) mediante un enfoque que no utiliza gen\u00e9ricos, lo que ha resultado en un c\u00f3digo m\u00e1s r\u00edgido y dif\u00edcil de mantener cada vez que se introducen nuevos tipos de pedidos.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#objetivo","title":"Objetivo:","text":"<p>Tu tarea es refactorizar este sistema aplicando el uso de gen\u00e9ricos para lograr una soluci\u00f3n m\u00e1s flexible y adherente al Principio de Abierto/Cerrado. Esto permitir\u00e1 a\u00f1adir nuevos tipos de pedidos  en el futuro sin modificar el c\u00f3digo existente del gestor de pedidos.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#requisitos","title":"Requisitos:","text":"<ol> <li> <p>Definir Clases de Pedidos: Crea <code>data class</code> para representar distintos tipos de pedidos (p.ej., <code>PedidoDigital</code>, <code>PedidoFisico</code>, <code>PedidoSuscripcion</code>). Cada clase debe tener propiedades que reflejen sus    caracter\u00edsticas espec\u00edficas (p.ej., <code>urlDescarga</code> para digitales, <code>direccionEnvio</code> para f\u00edsicos, <code>duracionMeses</code> para suscripciones).</p> </li> <li> <p>Implementar la Interfaz Gen\u00e9rica <code>ProcesadorPedido</code>: Dise\u00f1a una interfaz gen\u00e9rica <code>ProcesadorPedido&lt;T&gt;</code> que declare un m\u00e9todo <code>procesar(pedido: T)</code>.    Esta interfaz ser\u00e1 la base para implementar diferentes procesadores de pedidos.</p> </li> <li> <p>Crear Procesadores de Pedidos: Implementa clases concretas para procesar cada tipo de pedido. Estas clases deben implementar <code>ProcesadorPedido&lt;T&gt;</code> especificando el tipo de pedido correspondiente.</p> </li> <li> <p>Desarrollar el Gestor de Pedidos Gen\u00e9rico: Crea una clase <code>GestorPedidos&lt;T&gt;</code> que utilice un procesador de pedidos para procesar pedidos de cualquier tipo. La instancia de <code>GestorPedidos</code> debe ser    capaz de aceptar un procesador espec\u00edfico en el momento de su creaci\u00f3n.</p> </li> <li> <p>Demostraci\u00f3n: Escribe un bloque de c\u00f3digo <code>main</code> que demuestre c\u00f3mo se pueden crear y procesar diferentes tipos de pedidos utilizando tu sistema refactorizado. Aseg\u00farate de mostrar c\u00f3mo se a\u00f1ade un    nuevo tipo de pedido al sistema con m\u00ednimo esfuerzo.</p> </li> </ol>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#consideraciones-adicionales","title":"Consideraciones Adicionales:","text":"<ul> <li>Reflexiona sobre c\u00f3mo el uso de gen\u00e9ricos no solo facilita la adherencia al Principio de Abierto/Cerrado, sino que tambi\u00e9n promueve la reutilizaci\u00f3n de c\u00f3digo y mejora la legibilidad.</li> <li>Considera realizar los siguientes pasos para la realizaci\u00f3n de esta nueva soluci\u00f3n:</li> <li>Definir las Clases de Pedido.</li> <li>Definir la Interfaz <code>ProcesadorPedido</code> con Gen\u00e9ricos.</li> <li>Implementar Clases Concretas de Procesamiento que implementen la interfaz <code>ProcesarPedido</code></li> <li>Crear un Gestor de Pedidos Gen\u00e9rico.</li> <li>Demostraci\u00f3n del Uso en el programa pcincipal.</li> </ul>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#entrega","title":"Entrega:","text":"<p>Tu soluci\u00f3n debe incluir:</p> <ul> <li>El c\u00f3digo fuente de las clases y la interfaz que dise\u00f1aste.</li> <li>Un ejemplo de ejecuci\u00f3n que demuestre la flexibilidad de tu sistema para manejar diferentes tipos de pedidos.</li> <li>Una breve explicaci\u00f3n de c\u00f3mo tu dise\u00f1o permite a\u00f1adir nuevos tipos de pedidos sin modificar el c\u00f3digo existente.</li> </ul> <p>Este ejercicio no solo pondr\u00e1 a prueba tu habilidad para aplicar gen\u00e9ricos en Kotlin, sino que tambi\u00e9n te desafiar\u00e1 a pensar en dise\u00f1os de software flexibles y mantenibles.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#solucion-refactorizada","title":"Soluci\u00f3n refactorizada:","text":"<p>Para aplicar el Principio de Abierto/Cerrado (OCP) usando gen\u00e9ricos en Kotlin, adaptaremos la soluci\u00f3n anterior considerando que <code>PedidoDigital</code>, <code>PedidoFisico</code>, y <code>PedidoSuscripcion</code> son <code>data class</code> con caracter\u00edsticas diferentes.  Esto nos permitir\u00e1 manejar distintos tipos de pedidos de forma m\u00e1s espec\u00edfica y extensible.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#paso-1-definir-las-clases-de-pedido","title":"Paso 1: Definir las Clases de Pedido","text":"<p>Primero, definimos las <code>data class</code> para cada tipo de pedido, con sus caracter\u00edsticas \u00fanicas:</p> <pre><code>data class PedidoDigital(val id: Int, val productoDigital: String, val urlDescarga: String)\ndata class PedidoFisico(val id: Int, val productoFisico: String, val direccionEnvio: String)\ndata class PedidoSuscripcion(val id: Int, val servicio: String, val duracionMeses: Int)\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#paso-2-definir-la-interfaz-procesadorpedido-con-genericos","title":"Paso 2: Definir la Interfaz <code>ProcesadorPedido</code> con Gen\u00e9ricos","text":"<p>A continuaci\u00f3n, definimos una interfaz gen\u00e9rica para procesar los pedidos. Esta interfaz aceptar\u00e1 cualquier tipo de pedido:</p> <pre><code>interface ProcesadorPedido&lt;T&gt; {\n    fun procesar(pedido: T)\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#paso-3-implementar-clases-concretas-de-procesamiento","title":"Paso 3: Implementar Clases Concretas de Procesamiento","text":"<p>Implementamos clases concretas que procesan cada tipo de pedido. Cada una implementar\u00e1 la interfaz <code>ProcesadorPedido</code> especificando el tipo de pedido correspondiente:</p> <pre><code>class ProcesadorPedidoDigital : ProcesadorPedido&lt;PedidoDigital&gt; {\n    override fun procesar(pedido: PedidoDigital) {\n        println(\"Procesando pedido digital '${pedido.productoDigital}' para descarga desde: ${pedido.urlDescarga}\")\n    }\n}\n\nclass ProcesadorPedidoFisico : ProcesadorPedido&lt;PedidoFisico&gt; {\n    override fun procesar(pedido: PedidoFisico) {\n        println(\"Procesando pedido f\u00edsico '${pedido.productoFisico}' para enviar a: ${pedido.direccionEnvio}\")\n    }\n}\n\nclass ProcesadorPedidoSuscripcion : ProcesadorPedido&lt;PedidoSuscripcion&gt; {\n    override fun procesar(pedido: PedidoSuscripcion) {\n        println(\"Procesando suscripci\u00f3n a '${pedido.servicio}' por ${pedido.duracionMeses} meses\")\n    }\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#paso-4-crear-un-gestor-de-pedidos-generico","title":"Paso 4: Crear un Gestor de Pedidos Gen\u00e9rico","text":"<p>Creamos una clase gen\u00e9rica <code>GestorPedidos</code> que pueda aceptar y procesar cualquier tipo de pedido utilizando el procesador adecuado:</p> <pre><code>class GestorPedidos&lt;T&gt;(private val procesador: ProcesadorPedido&lt;T&gt;) {\n    fun procesarPedido(pedido: T) {\n        procesador.procesar(pedido)\n    }\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej05_SOLID_OCP_Genericos/#paso-5-demostracion-del-uso","title":"Paso 5: Demostraci\u00f3n del Uso","text":"<p>Finalmente, mostramos c\u00f3mo utilizar esta estructura para procesar diferentes tipos de pedidos:</p> <pre><code>fun main() {\n    val pedidoDigital = PedidoDigital(1, \"Curso Online de Kotlin\", \"http://dcs-curso-kotlin.com\")\n    val gestorPedidoDigital = GestorPedidos(ProcesadorPedidoDigital())\n    gestorPedidoDigital.procesarPedido(pedidoDigital)\n\n    val pedidoFisico = PedidoFisico(2, \"Libro de Kotlin\", \"Calle Real 123, San Fernando\")\n    val gestorPedidoFisico = GestorPedidos(ProcesadorPedidoFisico())\n    gestorPedidoFisico.procesarPedido(pedidoFisico)\n\n    val pedidoSuscripcion = PedidoSuscripcion(3, \"Suscripci\u00f3n a Revista de Programaci\u00f3n\", 12)\n    val gestorPedidoSuscripcion = GestorPedidos(ProcesadorPedidoSuscripcion())\n    gestorPedidoSuscripcion.procesarPedido(pedidoSuscripcion)\n\n    //Con este c\u00f3digo no ser\u00eda posible crear un pedido misterioso con un tipo de procesamiento desconocido o no soportado.\n}\n</code></pre> <p>Esta soluci\u00f3n mantiene el sistema abierto para la extensi\u00f3n permitiendo la adici\u00f3n de nuevos tipos de pedidos y sus respectivos procesadores sin necesidad de modificar el c\u00f3digo existente  del gestor de pedidos, cumpliendo con el principio de estar abierto para la extensi\u00f3n pero cerrado para la modificaci\u00f3n. Al usar <code>data class</code> y gen\u00e9ricos, se facilita la implementaci\u00f3n de  un dise\u00f1o robusto y flexible.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej06_SOLID_LSP_ISP/","title":"ej06 SOLID LSP ISP","text":""},{"location":"section1/u06/practica/otrosRecursos/ej06_SOLID_LSP_ISP/#ejercicio-06-elementos-de-la-biblioteca","title":"Ejercicio 06: Elementos de la Biblioteca","text":""},{"location":"section1/u06/practica/otrosRecursos/ej06_SOLID_LSP_ISP/#contexto","title":"Contexto:","text":"<p>El siguiente c\u00f3digo ilustra una violaci\u00f3n del Principio de Sustituci\u00f3n de Liskov (LSP) utilizando una clase abstracta que incluye un m\u00e9todo que <code>ElementoDeReferencia</code> no puede implementar adecuadamente.</p> <pre><code>abstract class ElementoBiblioteca {\n    abstract fun mostrarInfo()\n    abstract fun catalogar()\n    abstract fun mostrarUbicacion()\n    abstract fun prestar()\n}\n\nclass Libro : ElementoBiblioteca() {\n    override fun mostrarInfo() {\n        println(\"Libro: Informaci\u00f3n detallada.\")\n    }\n\n    override fun catalogar() {\n        println(\"Libro: Catalogado en el sistema de la biblioteca.\")\n    }\n\n    override fun mostrarUbicacion() {\n        println(\"Libro: Disponible en la secci\u00f3n de literatura.\")\n    }\n\n    override fun prestar() {\n        println(\"Libro: Prestado a un lector.\")\n    }\n}\n\nclass Revista : ElementoBiblioteca() {\n    override fun mostrarInfo() {\n        println(\"Revista: Informaci\u00f3n detallada.\")\n    }\n\n    override fun catalogar() {\n        println(\"Revista: Catalogada en el sistema de la biblioteca.\")\n    }\n\n    override fun mostrarUbicacion() {\n        println(\"Revista: Disponible en la secci\u00f3n de revistas.\")\n    }\n\n    override fun prestar() {\n        println(\"Revista: Prestada a un lector.\")\n    }\n}\n\nclass ElementoDeReferencia : ElementoBiblioteca() {\n    override fun mostrarInfo() {\n        println(\"Elemento de Referencia: Informaci\u00f3n detallada.\")\n    }\n\n    override fun catalogar() {\n        println(\"Elemento de Referencia: Catalogado en el sistema de la biblioteca.\")\n    }\n\n    override fun mostrarUbicacion() {\n        println(\"Elemento de Referencia: Disponible en la secci\u00f3n de referencia.\")\n    }\n\n    override fun prestar() {\n        throw UnsupportedOperationException(\"Los elementos de referencia no se pueden prestar.\")\n    }\n}\n</code></pre> <p>El programa principal ser\u00eda de la siguiente manera:</p> <pre><code>fun main() {\n    val elementos: List&lt;ElementoBiblioteca&gt; = listOf(Libro(), Revista(), ElementoDeReferencia())\n\n    elementos.forEach { elemento -&gt;\n        try {\n            elemento.prestar()\n        } catch (e: UnsupportedOperationException) {\n            println(e.message)\n        }\n    }\n}\n</code></pre>"},{"location":"section1/u06/practica/otrosRecursos/ej06_SOLID_LSP_ISP/#tarea","title":"Tarea:","text":"<ul> <li>Refactoriza el c\u00f3digo para cumplir el principio SOLID de Sustituci\u00f3n de Liskov (LSP)</li> <li>Responde a la siguiente pregunta: \u00bfQu\u00e9 otro principio SOLID estamos aplicando a nuestra soluci\u00f3n para hacer cumplir el principio de Sustituci\u00f3n de Liskov?</li> </ul>"},{"location":"section1/u06/practica/otrosRecursos/ej06_SOLID_LSP_ISP/#solucion-refactorizada","title":"Soluci\u00f3n refactorizada:","text":"<p>Para solucionar la violaci\u00f3n del LSP y seguir el principio correctamente, podemos eliminar el m\u00e9todo <code>prestar()</code> de la clase abstracta <code>ElementoBiblioteca</code> y crear una interfaz separada <code>Prestable</code> para los elementos que  pueden ser prestados. <code>ElementoDeReferencia</code> no implementar\u00e1 esta interfaz, resolviendo as\u00ed el problema.</p> <pre><code>abstract class ElementoBiblioteca {\n    abstract fun mostrarInfo()\n    abstract fun catalogar()\n    abstract fun mostrarUbicacion()\n}\n</code></pre> <pre><code>interface Prestable {\n    fun prestar()\n}\n</code></pre> <pre><code>class Libro : ElementoBiblioteca(), Prestable {\n    override fun mostrarInfo() {\n        println(\"Libro: Informaci\u00f3n detallada.\")\n    }\n\n    override fun catalogar() {\n        println(\"Libro: Catalogado en el sistema de la biblioteca.\")\n    }\n\n    override fun mostrarUbicacion() {\n        println(\"Libro: Disponible en la secci\u00f3n de literatura.\")\n    }\n\n    override fun prestar() {\n        println(\"Libro prestado.\")\n    }\n}\n</code></pre> <pre><code>class Revista : ElementoBiblioteca(), Prestable {\n    override fun mostrarInfo() {\n        println(\"Revista: Informaci\u00f3n detallada.\")\n    }\n\n    override fun catalogar() {\n        println(\"Revista: Catalogada en el sistema de la biblioteca.\")\n    }\n\n    override fun mostrarUbicacion() {\n        println(\"Revista: Disponible en la secci\u00f3n de revistas.\")\n    }\n\n    override fun prestar() {\n        println(\"Revista prestada.\")\n    }\n}\n</code></pre> <pre><code>class ElementoDeReferencia : ElementoBiblioteca() {\n    override fun mostrarInfo() {\n        println(\"Elemento de Referencia: Informaci\u00f3n detallada.\")\n    }\n\n    override fun catalogar() {\n        println(\"Elemento de Referencia: Catalogado en el sistema de la biblioteca.\")\n    }\n\n    override fun mostrarUbicacion() {\n        println(\"Elemento de Referencia: Disponible en la secci\u00f3n de referencia.\")\n    }\n}\n</code></pre> <p>Demostraci\u00f3n de uso en el programa principal:</p> <pre><code>fun main() {\n    val prestables: List&lt;Prestable&gt; = listOf(Libro(), Revista())\n    prestables.forEach { prestable -&gt;\n        prestable.prestar()\n    }\n\n    val elementos: List&lt;ElementoBiblioteca&gt; = listOf(Libro(), Revista(), ElementoDeReferencia())\n    elementos.forEach { elemento -&gt;\n        elemento.mostrarInfo()\n        elemento.catalogar()\n        elemento.mostrarUbicacion()\n        println()\n    }\n}\n</code></pre> <p>En este caso, solo los elementos que implementan Prestable se incluyen en la lista de objetos a prestar, eliminando la posibilidad de un error en tiempo de ejecuci\u00f3n relacionado con intentar prestar un ElementoDeReferencia.  Todos los elementos, sin embargo, pueden mostrar su informaci\u00f3n, ser catalogados, y mostrar su ubicaci\u00f3n, lo cual demuestra el uso seguro y conforme al LSP de las abstracciones definidas.</p> <p>Este enfoque garantiza que el comportamiento de nuestro programa sea predecible y robusto, eliminando la necesidad de controles de errores espec\u00edficos para casos que no deber\u00edan ocurrir si se sigue el LSP correctamente.  Al adherirnos al principio, facilitamos la extensi\u00f3n y mantenimiento del sistema al tiempo que evitamos la propagaci\u00f3n de errores en tiempo de ejecuci\u00f3n.</p>"},{"location":"section1/u06/practica/otrosRecursos/ej06_SOLID_LSP_ISP/#respuesta-a-la-pregunta","title":"Respuesta a la pregunta:","text":"<p>Este ejercicio tambi\u00e9n aborda la soluci\u00f3n del Principio de Sustituci\u00f3n de Liskov (LSP) aplicando el Principio de Segregaci\u00f3n de la Interfaz (ISP), incluso cuando utilizamos una clase abstracta en combinaci\u00f3n con interfaces.  Aunque la implementaci\u00f3n espec\u00edfica involucre tanto clases abstractas como interfaces, el concepto subyacente de ISP a\u00fan se aplica y es relevante para nuestra soluci\u00f3n.</p> <p>El ISP establece que ninguna clase deber\u00eda verse forzada a implementar interfaces que no utiliza. En el caso de nuestra soluci\u00f3n refactorizada:</p> <ul> <li> <p>Para Libro y Revista: estas clases implementan tanto la clase abstracta <code>ElementoBiblioteca</code> como la interfaz <code>Prestable</code>. Esto se alinea con el <code>ISP</code> porque estas clases realmente necesitan y utilizan ambas abstracciones;   la interfaz <code>Prestable</code> para la acci\u00f3n de prestar y la clase abstracta <code>ElementoBiblioteca</code> para otras operaciones comunes de biblioteca.</p> </li> <li> <p>Para <code>ElementoDeReferencia</code>: esta clase solo implementa la clase abstracta <code>ElementoBiblioteca</code> y no la interfaz Prestable, ya que no se supone que los elementos de referencia se presten.   Esto cumple con el <code>ISP</code>, ya que ElementoDeReferencia no est\u00e1 forzado a implementar m\u00e9todos de la interfaz Prestable que no va a utilizar.</p> </li> </ul> <p>Aunque el principio se llama \"Segregaci\u00f3n de la Interfaz\", el esp\u00edritu del principio es evitar que las clases tengan que implementar comportamientos que no usan, independientemente de si estos comportamientos est\u00e1n definidos  en interfaces o clases abstractas. En este contexto, segregamos las responsabilidades de prestar (Prestable) de otras operaciones de elementos de la biblioteca (ElementoBiblioteca), lo cual permite una mejor organizaci\u00f3n del  c\u00f3digo, facilita su mantenibilidad y extensi\u00f3n, y asegura que las implementaciones espec\u00edficas de nuestras clases se adhieran solo a las abstracciones que necesitan.</p> <p>Por lo tanto, aunque el foco principal de este ejercicio era demostrar y resolver una violaci\u00f3n del LSP, el dise\u00f1o adoptado tambi\u00e9n aplica y beneficia de los principios del ISP, demostrando c\u00f3mo estos principios SOLID  frecuentemente se apoyan y refuerzan mutuamente en el dise\u00f1o de software efectivo y sostenible.</p>"},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/","title":"UD 6 - 6.1 Jerarqu\u00edas de clases","text":"","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#61-jerarquias-de-clases","title":"6.1. Jerarqu\u00edas de clases.","text":"<p>La jerarqu\u00eda de clases en Kotlin, dentro del contexto de la Programaci\u00f3n Orientada a Objetos (POO), se refiere a la organizaci\u00f3n estructurada de clases en una relaci\u00f3n de herencia, donde las clases pueden ser derivadas unas de otras para reutilizar c\u00f3digo, extender funcionalidades y proporcionar comportamientos espec\u00edficos.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#1-conceptos-de-herencia-superclase-y-subclase","title":"1. Conceptos de Herencia, Superclase y Subclase","text":"","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#11-herencia","title":"1.1. Herencia","text":"<p>La herencia es una de las caracter\u00edsticas clave que diferencian a la POO de otros paradigmas de programaci\u00f3n, permitiendo una mayor reutilizaci\u00f3n de c\u00f3digo, una mejor organizaci\u00f3n y una mayor facilidad para gestionar la complejidad de los sistemas de software.</p> <p>La herencia es un mecanismo de la POO que permite a una clase (llamada subclase o clase derivada) adquirir o heredar los atributos y m\u00e9todos de otra clase (llamada superclase o clase base).  Este mecanismo fomenta la reutilizaci\u00f3n de c\u00f3digo, ya que permite a los desarrolladores crear nuevas clases a partir de clases existentes, extendiendo o modificando su comportamiento seg\u00fan sea necesario.</p> <p>La herencia facilita la creaci\u00f3n de una jerarqu\u00eda de clases, donde las clases pueden ser organizadas en niveles, con clases m\u00e1s generales en la parte superior y clases m\u00e1s espec\u00edficas debajo.  Esta jerarqu\u00eda refleja las relaciones \"es un tipo de\" entre clases, lo que ayuda a representar conceptos y entidades del mundo real de manera m\u00e1s natural y eficiente en el c\u00f3digo.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#12-superclase-o-clase-base","title":"1.2. Superclase o Clase Base","text":"<p>Una superclase, tambi\u00e9n conocida como clase base o clase padre, es la clase de la cual otras clases derivan. En una jerarqu\u00eda de clases, la superclase se encuentra en un nivel superior y proporciona un conjunto  de atributos y m\u00e9todos que otras clases pueden heredar o sobrescribir. Las superclases suelen representar conceptos m\u00e1s generales o abstractos.</p> <p>Las superclases pueden ser: - Concretas: Clases que proporcionan implementaciones completas de sus m\u00e9todos, lo que permite crear instancias de ellas. - Abstractas: Clases declaradas espec\u00edficamente para ser extendidas, no se pueden instanciar directamente y pueden contener m\u00e9todos abstractos sin implementaci\u00f3n.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#13-subclase-o-clase-derivada","title":"1.3. Subclase o Clase Derivada","text":"<p>Una subclase, tambi\u00e9n conocida como clase derivada o clase hija, es una clase que hereda de una superclase. Las subclases pueden utilizar los atributos y m\u00e9todos heredados de sus superclases y tienen la capacidad de: - Extender la funcionalidad de la superclase agregando nuevos atributos y m\u00e9todos. - Modificar el comportamiento existente sobrescribiendo m\u00e9todos heredados. - Proporcionar implementaciones para m\u00e9todos abstractos definidos en superclases abstractas.</p> <p>Las subclases representan conceptos m\u00e1s espec\u00edficos o especializados en la jerarqu\u00eda de clases, y su creaci\u00f3n es un medio fundamental para lograr la especializaci\u00f3n y la extensi\u00f3n en la POO.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#14-ejemplo-conceptual","title":"1.4. Ejemplo Conceptual","text":"<p>Imaginemos una jerarqu\u00eda de clases en un sistema de gesti\u00f3n de veh\u00edculos:</p> <pre><code>// Superclase\nopen class Vehiculo(val marca: String, val modelo: String) {\n    fun describir() = println(\"Veh\u00edculo de marca $marca, modelo $modelo\")\n}\n\n// Subclase\nclass Coche(marca: String, modelo: String, val numPuertas: Int) : Vehiculo(marca, modelo) {\n    fun describirCoche() {\n        describir()\n        println(\"N\u00famero de puertas: $numPuertas\")\n    }\n}\n</code></pre> <p>En este ejemplo, <code>Vehiculo</code> es una superclase que proporciona propiedades y m\u00e9todos b\u00e1sicos comunes a todos los veh\u00edculos. <code>Coche</code> es una subclase que hereda de <code>Vehiculo</code> y extiende su funcionalidad al introducir  una nueva propiedad (<code>numPuertas</code>) y un nuevo m\u00e9todo (<code>describirCoche</code>).</p> <p>La herencia permite estructurar el c\u00f3digo de manera jer\u00e1rquica y l\u00f3gica, promoviendo la reutilizaci\u00f3n y la extensi\u00f3n de las funcionalidades de manera eficiente y efectiva.</p> <p>La herencia en POO no solo facilita la reutilizaci\u00f3n de c\u00f3digo y la organizaci\u00f3n jer\u00e1rquica de clases, sino que tambi\u00e9n permite la implementaci\u00f3n de diferentes funcionalidades y patrones de dise\u00f1o  que enriquecen el dise\u00f1o y la estructura de un programa:</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#15-especializacion-es-un","title":"1.5. Especializaci\u00f3n (\"Es un\")","text":"<p>La especializaci\u00f3n es quiz\u00e1s el uso m\u00e1s intuitivo de la herencia, donde una clase derivada representa una versi\u00f3n m\u00e1s espec\u00edfica de su clase base. Esta relaci\u00f3n se describe a menudo como \"es un\",  significando que la subclase es un tipo especializado de la superclase.</p> <ul> <li> <p>Concepto: La subclase hereda las propiedades y comportamientos de la superclase, pero tambi\u00e9n introduce caracter\u00edsticas \u00fanicas que la distinguen.</p> </li> <li> <p>Ejemplo: Consideremos una jerarqu\u00eda de clases donde <code>Figura</code> es una superclase que define un comportamiento b\u00e1sico com\u00fan a todas las figuras geom\u00e9tricas, como calcular el \u00e1rea o el per\u00edmetro.   La clase <code>Cuadrado</code> ser\u00eda una subclase que especializa a <code>Figura</code> definiendo c\u00f3mo estos comportamientos se aplican espec\u00edficamente a un cuadrado, aprovechando sus caracter\u00edsticas \u00fanicas como tener   todos sus lados de igual longitud.</p> </li> </ul> <p>En este otro ejemplo, definiremos una clase base <code>Empleado</code> y una subclase <code>Ingeniero</code> que especializa a <code>Empleado</code>.</p> <pre><code>open class Empleado(val nombre: String, val apellido: String) {\n    fun calcularSalario(): Double {\n        // Implementaci\u00f3n b\u00e1sica para calcular el salario\n        return 30000.0\n    }\n}\n\nclass Ingeniero(nombre: String, apellido: String, val especialidad: String): Empleado(nombre, apellido) {\n    fun trabajarEnProyecto() {\n        println(\"El ingeniero $nombre $apellido, especializado en $especialidad, est\u00e1 trabajando en un proyecto.\")\n    }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#16-extension-extiende-funcionalidad-heredada","title":"1.6. Extensi\u00f3n (Extiende Funcionalidad Heredada)","text":"<p>A trav\u00e9s de la extensi\u00f3n, una subclase a\u00f1ade nuevas funcionalidades a la clase base sin cambiar su comportamiento original. Esta relaci\u00f3n no implica necesariamente una especializaci\u00f3n,  sino una ampliaci\u00f3n de las capacidades.</p> <ul> <li> <p>Concepto: La subclase mantiene el comportamiento de la superclase y agrega nuevas caracter\u00edsticas o funcionalidades que extienden su uso o aplicabilidad.</p> </li> <li> <p>Ejemplo: Si tenemos una clase <code>Lista</code> que implementa las operaciones b\u00e1sicas de una lista, una clase <code>ListaSalvable</code> podr\u00eda heredar de <code>Lista</code> y extender su funcionalidad al a\u00f1adir m\u00e9todos para   guardar y cargar el estado de la lista desde un archivo, sin alterar las operaciones b\u00e1sicas de la lista.</p> </li> </ul> <p>En este otro ejemplo extendemos la funcionalidad de la clase <code>Controlador</code> mediante la creaci\u00f3n de una subclase <code>ControladorAutenticado</code>.</p> <pre><code>open class Controlador {\n    fun manejarSolicitud() {\n        println(\"Manejando solicitud b\u00e1sica.\")\n    }\n}\n\nclass ControladorAutenticado: Controlador() {\n    fun verificarAutenticacion() {\n        println(\"Verificando autenticaci\u00f3n del usuario.\")\n    }\n\n    override fun manejarSolicitud() {\n        verificarAutenticacion()\n        super.manejarSolicitud()\n    }\n}\n</code></pre> <p>La diferencia clave entre estos dos usos de la herencia es que la <code>Especializaci\u00f3n</code> se centra en el concepto de \"ser un tipo espec\u00edfico de\" una clase base,  introduciendo propiedades y comportamientos que son \u00fanicos para la subclase, lo que hace que esta subclase sea m\u00e1s espec\u00edfica o adecuada para tareas  detalladas dentro de la jerarqu\u00eda de la clase.</p> <p>Mientras que la <code>Extensi\u00f3n</code>, por otro lado, trata de a\u00f1adir nuevas funcionalidades a la clase base \"sin cambiar su comportamiento original\". La subclase  mantiene todas las capacidades de la clase base y agrega nuevas funcionalidades que ampl\u00edan su uso, pero no necesariamente cambia la naturaleza fundamental  de lo que la clase base representa.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#17-especificacion-define-interface","title":"1.7. Especificaci\u00f3n (Define Interface)","text":"<p>La especificaci\u00f3n, a trav\u00e9s de la herencia, se utiliza para definir una interfaz com\u00fan para un grupo de clases. La superclase (o interfaz) declara un conjunto de m\u00e9todos que todas las subclases  deben implementar, cada una a su manera.</p> <ul> <li> <p>Concepto: La superclase establece un contrato que sus subclases deben cumplir, especificando los m\u00e9todos que deben implementar sin necesariamente proporcionar una implementaci\u00f3n concreta.</p> </li> <li> <p>Ejemplo: <code>ObjetoGrafico</code> podr\u00eda ser una interfaz o clase abstracta que define operaciones comunes para objetos gr\u00e1ficos, como dibujar o mover. Las clases <code>Texto</code>, <code>Linea</code> y <code>Figura</code> implementar\u00edan   esta interfaz, proporcionando implementaciones espec\u00edficas para cada tipo de objeto gr\u00e1fico.</p> </li> </ul> <p>En este otro ejemplo, definimos una interfaz <code>ModuloCMS</code> y varias clases que la implementan, especificando distintas formas de renderizar y configurar m\u00f3dulos.</p> <pre><code>interface ModuloCMS {\n    fun renderizar()\n    fun configurar()\n}\n\nclass ModuloTexto: ModuloCMS {\n    override fun renderizar() {\n        println(\"Renderizando m\u00f3dulo de texto.\")\n    }\n\n    override fun configurar() {\n        println(\"Configurando m\u00f3dulo de texto.\")\n    }\n}\n\nclass ModuloImagen: ModuloCMS {\n    override fun renderizar() {\n        println(\"Renderizando m\u00f3dulo de imagen.\")\n    }\n\n    override fun configurar() {\n        println(\"Configurando m\u00f3dulo de imagen.\")\n    }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#18-construccion-usado-para-construir-la-subbase","title":"1.8. Construcci\u00f3n (Usado para Construir la Subbase)","text":"<p>La construcci\u00f3n se refiere al uso de la herencia para construir una nueva clase basada en la funcionalidad de una clase existente, aunque la relaci\u00f3n conceptual entre las dos clases no sea directa.</p> <ul> <li> <p>Concepto: La clase derivada utiliza la clase base como un punto de partida o una base sobre la cual construye su propia funcionalidad \u00fanica, posiblemente sin mantener una relaci\u00f3n conceptual \"es un\".</p> </li> <li> <p>Ejemplo: La clase <code>Pila</code> podr\u00eda heredar de la clase <code>Lista</code>. Aunque conceptualmente una pila no es una lista, esta herencia permite a <code>Pila</code> aprovechar la implementaci\u00f3n y la funcionalidad de <code>Lista</code>   para gestionar sus elementos internos, aplicando restricciones adicionales o m\u00e9todos espec\u00edficos de pilas, como operaciones LIFO (Last In, First Out).</p> </li> </ul> <p>Este otro ejemplo, se muestra c\u00f3mo la clase <code>Pila</code> puede ser construida usando la funcionalidad de una clase <code>Lista</code>, aunque conceptualmente no sean lo mismo.</p> <pre><code>open class Lista&lt;T&gt; {\n    private val elementos = mutableListOf&lt;T&gt;()\n\n    fun agregar(elemento: T) {\n        elementos.add(elemento)\n    }\n\n    fun remover(): T? = if (elementos.isNotEmpty()) elementos.removeAt(elementos.size - 1) else null\n}\n\nclass Pila&lt;T&gt;: Lista&lt;T&gt;() {\n    fun push(elemento: T) {\n        agregar(elemento)\n    }\n\n    fun pop(): T? {\n        return remover()\n    }\n}\n</code></pre> <p>Cada uno de estos usos de la herencia ofrece diferentes ventajas y se adapta a distintas necesidades en el dise\u00f1o de software. La elecci\u00f3n de cu\u00e1ndo y c\u00f3mo utilizar la herencia depende de los requisitos espec\u00edficos  del sistema que se est\u00e1 desarrollando, as\u00ed como de los principios de dise\u00f1o de software como el acoplamiento, la cohesi\u00f3n y la encapsulaci\u00f3n. La herencia, utilizada sabiamente, puede facilitar la creaci\u00f3n de sistemas  de software flexibles, mantenibles y escalables.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#19-bloquear-y-forzar-la-herencia-de-clases-y-metodos","title":"1.9. Bloquear y forzar la herencia de clases y m\u00e9todos","text":"<p>Es crucial comprender c\u00f3mo Kotlin, al igual que otros lenguajes de programaci\u00f3n orientada a objetos, maneja la herencia y la polimorfia a trav\u00e9s de diferentes constructos y modificadores de acceso.  Profundizaremos en los conceptos de clases abstractas e interfaces, as\u00ed como en el uso de los modificadores <code>open</code>, <code>final</code>, <code>abstract</code> para controlar la herencia y la sobrescritura.</p> <p>El uso adecuado de clases abstractas, interfaces, y los modificadores <code>open</code>, <code>final</code>, y <code>abstract</code> en Kotlin son fundamentales para dise\u00f1ar un c\u00f3digo robusto y flexible que aprovecha los principios de la Programaci\u00f3n Orientada a Objetos (POO). Estos elementos permiten a los desarrolladores construir jerarqu\u00edas de clases bien estructuradas, promover la reutilizaci\u00f3n de c\u00f3digo, y facilitar el mantenimiento y la escalabilidad del software.</p> <p>Para ilustrar c\u00f3mo bloquear y forzar la herencia de clases y m\u00e9todos en Kotlin, usaremos los modificadores <code>open</code>, <code>final</code>, y <code>abstract</code>. Kotlin trata todas las clases como <code>final</code> por defecto, lo que  significa que no se pueden heredar a menos que se marquen expl\u00edcitamente como <code>open</code> o sean <code>abstract</code>. Del mismo modo, los m\u00e9todos son tambi\u00e9n <code>final</code> por defecto y deben marcarse como <code>open</code> para  permitir que las subclases los sobrescriban, a menos que el m\u00e9todo pertenezca a una interfaz o a una clase abstracta.</p> <p>Ejemplos que demuestran estos conceptos:</p> <ul> <li>Clase Base y Herencia Bloqueada:</li> </ul> <pre><code>// Esta clase no puede ser heredada sin el modificador 'open'\nopen class Vehiculo(val marca: String, val modelo: String) {\n    open fun arrancar() {\n        println(\"El veh\u00edculo $marca $modelo est\u00e1 arrancando.\")\n    }\n\n    // Este m\u00e9todo no puede ser sobrescrito sin el modificador 'open'\n    open fun detener() {\n        println(\"El veh\u00edculo $marca $modelo se ha detenido.\")\n    }\n}\n</code></pre> <ul> <li>Herencia Permitida y Sobrescritura de M\u00e9todos:</li> </ul> <pre><code>class AutoDeportivo(marca: String, modelo: String, val velocidadMaxima: Int) : Vehiculo(marca, modelo) {\n    override fun arrancar() {\n        // Sobrescritura del m\u00e9todo arrancar\n        println(\"El auto deportivo $marca $modelo est\u00e1 arrancando a una velocidad m\u00e1xima de $velocidadMaxima km/h.\")\n    }\n\n    final override fun detener() {\n        // Sobrescritura del m\u00e9todo detener marcado como 'final' para prevenir m\u00e1s sobrescrituras\n        println(\"El auto deportivo $marca $modelo se ha detenido r\u00e1pidamente.\")\n    }\n}\n</code></pre> <ul> <li>Uso de Clase Abstracta e Interface:</li> </ul> <pre><code>abstract class DispositivoElectronico {\n    abstract fun encender()\n\n    // Este m\u00e9todo no puede ser sobrescrito ya que no est\u00e1 marcado como 'open'\n    fun apagar() {\n        println(\"El dispositivo electr\u00f3nico se est\u00e1 apagando.\")\n    }\n}\n\ninterface Conectividad {\n    fun conectar()\n    fun desconectar()\n}\n\nclass Smartphone(val marca: String, val modelo: String) : DispositivoElectronico(), Conectividad {\n    override fun encender() {\n        println(\"El smartphone $marca $modelo se est\u00e1 encendiendo.\")\n    }\n\n    override fun conectar() {\n        println(\"El smartphone $marca $modelo se est\u00e1 conectando a la red.\")\n    }\n\n    override fun desconectar() {\n        println(\"El smartphone $marca $modelo se ha desconectado de la red.\")\n    }\n}\n</code></pre> <p>C\u00f3mo se puede observar en estos dos ejemplos: </p> <ul> <li> <p>La clase base <code>Vehiculo</code> es una clase <code>open</code>, lo que permite que <code>AutoDeportivo</code> la herede. El m\u00e9todo <code>arrancar</code> es <code>open</code> y por lo tanto puede ser sobrescrito por <code>AutoDeportivo</code>,      que adem\u00e1s utiliza <code>final</code> en su sobrescritura de <code>detener</code> para prevenir m\u00e1s sobrescrituras.</p> </li> <li> <p>La clase <code>DispositivoElectronico</code> es abstracta, lo que obliga a cualquier subclase (como <code>Smartphone</code>) a implementar el m\u00e9todo <code>encender</code>. <code>Smartphone</code> tambi\u00e9n implementa la interfaz <code>Conectividad</code>.</p> </li> </ul> <p>Demostrando c\u00f3mo se puede usar la herencia y la implementaci\u00f3n de interfaces para forzar ciertas funcionalidades en las clases derivadas.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#2-clases-abstractas-e-interfaces-forzando-la-herencia-y-especificacion","title":"2. Clases Abstractas e Interfaces: Forzando la Herencia y Especificaci\u00f3n","text":"<p>Las clases abstractas e interfaces juegan roles cruciales en el dise\u00f1o de software orientado a objetos:</p> <ul> <li> <p>Clases Abstractas: Al forzar a las subclases a implementar m\u00e9todos abstractos espec\u00edficos, las clases abstractas establecen una base s\u00f3lida sobre la cual se puede construir una funcionalidad m\u00e1s detallada.   Permiten cierto grado de implementaci\u00f3n compartida gracias a la capacidad de contener m\u00e9todos con implementaciones por defecto, a la vez que dejan espacio para que las subclases personalicen o extiendan esas   implementaciones seg\u00fan sea necesario.</p> </li> <li> <p>Interfaces: Las interfaces llevan el concepto de herencia a un nivel de contrato, donde las clases pueden implementar m\u00faltiples interfaces para cumplir con varios contratos de comportamiento.   Esto brinda una flexibilidad incre\u00edble en el dise\u00f1o de sistemas, permitiendo combinaciones complejas de comportamientos a trav\u00e9s de la implementaci\u00f3n de m\u00faltiples interfaces, sin las limitaciones   impuestas por la herencia \u00fanica de clases.</p> </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#21-clases-abstractas","title":"2.1. Clases Abstractas","text":"<p>Las clases abstractas en Kotlin son clases que no pueden ser instanciadas por s\u00ed mismas. Esto significa que no puedes crear un objeto de una clase abstracta directamente. Est\u00e1n dise\u00f1adas para ser subclases,  permitiendo que otras clases hereden de ellas.</p> <ul> <li> <p>Forzando la herencia: Al definir una clase como <code>abstract</code>, est\u00e1s forzando a cualquier clase que quiera utilizar su funcionalidad a heredar de ella. Esto se debe a que una clase abstracta puede contener   uno o m\u00e1s m\u00e9todos <code>abstract</code> (sin implementaci\u00f3n), y cualquier clase hija debe proporcionar implementaciones concretas para todos esos m\u00e9todos abstractos.</p> </li> <li> <p>M\u00e9todos y propiedades en clases abstractas: Aunque las clases abstractas no pueden ser instanciadas, pueden tener m\u00e9todos con implementaciones completas (no abstractos) y propiedades. Esto permite a las   clases derivadas utilizar estos m\u00e9todos y propiedades directamente o sobrescribirlos si es necesario.</p> </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#22-interfaces","title":"2.2. Interfaces","text":"<p>Las interfaces en Kotlin definen un contrato que otras clases pueden implementar. A diferencia de las clases abstractas, las interfaces no pueden contener estado (variables de instancia con campos de respaldo)  y pueden ser implementadas por cualquier clase, independientemente de su lugar en la jerarqu\u00eda de clases.</p> <ul> <li>Herencia a trav\u00e9s de interfaces: Aunque t\u00e9cnicamente no se considera \"herencia\" en el sentido tradicional, las interfaces permiten a las clases adoptar un conjunto espec\u00edfico de comportamientos sin necesitar   una relaci\u00f3n \"es un\" directa. Una clase puede implementar m\u00faltiples interfaces, lo que ofrece una forma de polimorfismo y flexibilidad que no es posible mediante la herencia de clases debido a la restricci\u00f3n de   Kotlin (y Java) de herencia \u00fanica.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#3-modificadores-open-final-y-abstract-controlando-la-herencia-y-la-sobrescritura","title":"3. Modificadores <code>open</code>, <code>final</code>, y <code>abstract</code>: Controlando la Herencia y la Sobrescritura","text":"<p>La gesti\u00f3n cuidadosa de la herencia y la sobrescritura es crucial para la integridad del dise\u00f1o de clases:</p> <ul> <li> <p><code>open</code>: Al hacer que todas las clases y m\u00e9todos sean <code>final</code> por defecto, Kotlin promueve la inmutabilidad y la seguridad de dise\u00f1o. El modificador <code>open</code> es una herramienta poderosa para indicar expl\u00edcitamente   qu\u00e9 partes de una clase est\u00e1n disponibles para ser extendidas o sobrescritas, asegurando que la extensibilidad se otorgue de manera consciente y controlada. Esto proporciona un control fino sobre la herencia,   permitiendo a los dise\u00f1adores de clases decidir qu\u00e9 comportamientos pueden ser personalizados por las clases derivadas.</p> </li> <li> <p><code>final</code>: Si bien todo es <code>final</code> por defecto en Kotlin, cuando se utiliza el modificador <code>open</code>, puedes usar <code>final</code> en un m\u00e9todo sobrescrito para prevenir que sea sobrescrito nuevamente en subclases m\u00e1s derivadas.   Utilizar <code>final</code> para marcar m\u00e9todos en clases <code>open</code> que no deben ser sobrescritos en subclases adicionales ayuda a mantener la consistencia y prevenir modificaciones no deseadas del comportamiento de   la clase base. Esto es especialmente \u00fatil en contextos donde la extensi\u00f3n de ciertas funcionalidades podr\u00eda comprometer la l\u00f3gica o la seguridad del programa.</p> </li> <li> <p><code>abstract</code>: Los m\u00e9todos y clases <code>abstract</code> son el n\u00facleo de la herencia y la polimorfia en POO, obligando a las subclases a implementar comportamientos espec\u00edficos y permitiendo la variabilidad en c\u00f3mo se realizan   estas implementaciones. Los m\u00e9todos abstractos son inherentemente <code>open</code>, ya que su prop\u00f3sito es ser sobrescrito.</p> </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#31-ejemplo-practico","title":"3.1. Ejemplo Pr\u00e1ctico","text":"<p>Consideremos la clase <code>Employee</code> y su subclase <code>Teacher</code>:</p> <pre><code>abstract class Employee(val firstName: String, val lastName: String) {\n    val propFoo: String = \"bla bla\"\n\n    abstract fun earnings(): Double\n\n    open fun fullName(): String = \"$lastName $firstName\"\n}\n\nclass Teacher(firstName: String, lastName: String): Employee(firstName, lastName) {\n    override fun earnings(): Double = 50000.0\n\n    // Intento de sobrescribir fullName provocar\u00eda error si se marca como final en Employee\n    override fun fullName(): String = \"Prof. $lastName\"\n}\n</code></pre> <p>En este ejemplo, <code>Employee</code> es una clase abstracta que define una implementaci\u00f3n predeterminada para <code>fullName()</code> y declara un m\u00e9todo abstracto <code>earnings()</code>.  La clase <code>Teacher</code> hereda de <code>Employee</code> y proporciona implementaciones concretas para los m\u00e9todos abstractos. Si <code>fullName()</code> en <code>Employee</code> se marcara como <code>final</code>,  entonces <code>Teacher</code> no podr\u00eda sobrescribir ese m\u00e9todo, demostrando c\u00f3mo los modificadores controlan la herencia y la sobrescritura.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#32-conclusion","title":"3.2. Conclusi\u00f3n","text":"<p>La habilidad para forzar y bloquear la herencia y la sobrescritura en Kotlin a trav\u00e9s del uso estrat\u00e9gico de clases abstractas, interfaces, y modificadores espec\u00edficos es una herramienta poderosa en el arsenal de cualquier  desarrollador de software. No solo facilita la creaci\u00f3n de sistemas de software cohesivos y bien organizados, sino que tambi\u00e9n asegura que estos sistemas sean capaces de adaptarse y crecer con el tiempo sin comprometer su  integridad estructural o funcional.</p> <p>Al dise\u00f1ar y desarrollar con Kotlin, los principios de encapsulaci\u00f3n, abstracci\u00f3n, herencia, y polimorfismo se manifiestan a trav\u00e9s de estas construcciones de lenguaje, permitiendo a los desarrolladores abordar problemas  complejos de manera modular y mantenible. Entender y aplicar estos conceptos y herramientas de manera efectiva es fundamental para aprovechar plenamente las capacidades de Kotlin y desarrollar software de alta calidad que  sea f\u00e1cil de entender, extender y mantener.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#4-incidencia-de-los-constructores-en-la-herencia","title":"4. Incidencia de los constructores en la herencia","text":"<p>La incidencia de los constructores en la herencia es un aspecto fundamental en la Programaci\u00f3n Orientada a Objetos (POO), especialmente en lenguajes como Kotlin, donde la sintaxis y los mecanismos de herencia tienen  particularidades espec\u00edficas que influyen directamente en c\u00f3mo se dise\u00f1an y se implementan las jerarqu\u00edas de clases. Este criterio de evaluaci\u00f3n se centra en comprender c\u00f3mo los constructores de las clases base (superclases)  afectan y son afectados por las clases derivadas (subclases) durante el proceso de herencia.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#41-conceptos-basicos-de-constructores-en-kotlin","title":"4.1. Conceptos B\u00e1sicos de Constructores en Kotlin","text":"<p>En Kotlin, los constructores juegan un papel crucial en la inicializaci\u00f3n de objetos. Hay dos tipos de constructores:</p> <ul> <li>Constructor Primario: Se declara en la l\u00ednea de definici\u00f3n de la clase. Es compacto y se utiliza para inicializar la clase con menos c\u00f3digo.</li> <li>Constructores Secundarios: Permiten m\u00e1s l\u00f3gica de inicializaci\u00f3n y pueden llamar al constructor primario usando <code>this</code>. Tambi\u00e9n se utilizan para ofrecer m\u00e1s opciones de inicializaci\u00f3n.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#42-llamadas-al-constructor-de-la-superclase","title":"4.2. Llamadas al Constructor de la Superclase","text":"<p>Cuando una clase hereda de otra, Kotlin requiere que la subclase inicialice la superclase. Esto se hace mediante una llamada expl\u00edcita al constructor de la superclase, ya sea su constructor primario o uno de sus constructores secundarios.  Esta llamada asegura que todos los campos y bloques de inicializaci\u00f3n de la superclase se ejecuten antes de la subclase:</p> <pre><code>open class Persona(val nombre: String)\n\nclass Empleado(nombre: String, val empleadoId: Int) : Persona(nombre)\n</code></pre> <p>En este ejemplo, <code>Empleado</code> hereda de <code>Persona</code>, y el constructor de <code>Empleado</code> llama al constructor de <code>Persona</code> pasando el <code>nombre</code>, asegurando que la inicializaci\u00f3n de <code>Persona</code> se complete antes de proceder con <code>Empleado</code>.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#43-sobrecarga-de-constructores-y-herencia","title":"4.3. Sobrecarga de Constructores y Herencia","text":"<p>Las clases en Kotlin pueden tener m\u00faltiples constructores secundarios, cada uno con diferentes par\u00e1metros. La herencia de una clase con m\u00faltiples constructores introduce complejidad, ya que la subclase debe decidir expl\u00edcitamente  cu\u00e1l constructor de la superclase llamar, si es que hay m\u00e1s de uno disponible:</p> <pre><code>open class Persona(val nombre: String) {\n    constructor(nombre: String, edad: Int) : this(nombre) {\n        // L\u00f3gica adicional\n    }\n}\n\nclass Empleado(nombre: String) : Persona(nombre)\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#44-constructores-secundarios-en-subclases","title":"4.4. Constructores Secundarios en Subclases","text":"<p>Las subclases pueden tener sus propios constructores secundarios, pero cada uno de ellos debe delegar al constructor de la superclase, directa o indirectamente, a trav\u00e9s de otro constructor de la subclase utilizando <code>this</code>:</p> <pre><code>class Empleado : Persona {\n    constructor(nombre: String, empleadoId: Int) : super(nombre)\n    constructor(nombre: String, empleadoId: Int, edad: Int) : this(nombre, empleadoId)\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#45-consideraciones-especiales","title":"4.5. Consideraciones Especiales","text":"<ul> <li> <p>Inicializaci\u00f3n de Propiedades: Las propiedades declaradas en la superclase deben ser inicializadas antes de que la subclase pueda usarlas. Esto es crucial para evitar el acceso a estados no inicializados.</p> </li> <li> <p>Bloques de Inicializaci\u00f3n: Los bloques de inicializaci\u00f3n de la superclase se ejecutan antes de los bloques de inicializaci\u00f3n de la subclase. Esto es importante para la secuencia de inicializaci\u00f3n y la l\u00f3gica   de configuraci\u00f3n del objeto.</p> </li> <li> <p>Herencia de Interfaces y Constructores: Aunque las interfaces no tienen constructores, la implementaci\u00f3n de interfaces en una jerarqu\u00eda de clases no afecta la cadena de llamadas al constructor.   Sin embargo, las clases que implementan interfaces a\u00fan deben seguir las reglas de inicializaci\u00f3n de sus superclases.</p> </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#46-conclusion","title":"4.6. Conclusi\u00f3n","text":"<p>La correcta comprensi\u00f3n y manejo de los constructores en la herencia son esenciales para garantizar que los objetos se inicialicen de manera coherente y segura en Kotlin. La necesidad de llamar expl\u00edcitamente al  constructor de la superclase subraya la importancia de la secuencia de inicializaci\u00f3n en la herencia, asegurando que todas las propiedades y estados necesarios de las superclases est\u00e9n configurados antes de que se  ejecute cualquier l\u00f3gica espec\u00edfica de la subclase. Este mecanismo refuerza el encapsulamiento y la integridad de los objetos a lo largo de la jerarqu\u00eda de herencia, contribuyendo a la creaci\u00f3n de software robusto y mantenible.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#5-sobrescritura-de-metodos-en-clases-heredadas","title":"5. Sobrescritura de M\u00e9todos en Clases Heredadas","text":"<p>La sobrescritura de m\u00e9todos es una caracter\u00edstica esencial en la Programaci\u00f3n Orientada a Objetos que permite a una clase derivada ofrecer una implementaci\u00f3n espec\u00edfica de un m\u00e9todo que ya est\u00e1 definido en su clase base.  Esta capacidad es fundamental para modificar o extender el comportamiento de m\u00e9todos heredados seg\u00fan las necesidades espec\u00edficas de la subclase.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#51-principios-de-sobrescritura","title":"5.1. Principios de Sobrescritura","text":"<ul> <li>Uso de <code>override</code>: En Kotlin, para sobrescribir un m\u00e9todo de la clase base, el m\u00e9todo en la subclase debe estar precedido por el modificador <code>override</code>. Esto indica expl\u00edcitamente que el m\u00e9todo est\u00e1 sobrescribiendo uno de la superclase.</li> <li>Compatibilidad de Firmas: La firma del m\u00e9todo sobrescrito en la subclase debe coincidir con la firma del m\u00e9todo en la clase base. Esto incluye el nombre del m\u00e9todo, el n\u00famero y tipo de sus par\u00e1metros, y el tipo de retorno.</li> <li>Acceso a la Implementaci\u00f3n de la Superclase: La subclase puede llamar a la implementaci\u00f3n del m\u00e9todo de la superclase utilizando <code>super</code>.</li> </ul> <pre><code>open class Animal {\n    open fun emitirSonido() {\n        println(\"Este animal emite un sonido gen\u00e9rico.\")\n    }\n}\n\nclass Perro : Animal() {\n    override fun emitirSonido() {\n        super.emitirSonido()\n        println(\"El perro ladra.\")\n    }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#6-diseno-y-aplicacion-de-jerarquias-de-clases","title":"6. Dise\u00f1o y Aplicaci\u00f3n de Jerarqu\u00edas de Clases","text":"<p>El dise\u00f1o de jerarqu\u00edas de clases es un proceso que implica organizar las clases en una estructura de \u00e1rbol que refleje relaciones \"es un\" entre ellas, permitiendo la reutilizaci\u00f3n de c\u00f3digo y la extensibilidad del software.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#61-caracteristicas-de-una-buena-jerarquia-de-clases","title":"6.1. Caracter\u00edsticas de una Buena Jerarqu\u00eda de Clases","text":"<ul> <li>Claridad y Mantenibilidad: La jerarqu\u00eda debe ser f\u00e1cil de entender y mantener. Cada clase debe tener un prop\u00f3sito claro y estar bien definida.</li> <li>Reutilizaci\u00f3n de C\u00f3digo: Las clases base deben dise\u00f1arse con el objetivo de maximizar la reutilizaci\u00f3n de c\u00f3digo por parte de las subclases.</li> <li>Extensibilidad: La arquitectura debe permitir la f\u00e1cil extensi\u00f3n de clases y funcionalidades sin alterar significativamente la estructura existente.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#62-estrategias-para-el-diseno","title":"6.2. Estrategias para el Dise\u00f1o","text":"<ul> <li>Identificaci\u00f3n de Conceptos Comunes: Determinar las propiedades y comportamientos comunes que pueden ser abstractos en clases base.</li> <li>Uso de Abstracciones Adecuadas: Utilizar clases abstractas e interfaces para definir contratos y generalizaciones.</li> <li>Especializaci\u00f3n Progresiva: Derivar subclases que especialicen y extiendan las funcionalidades de las clases base.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#63-pruebas-y-depuracion-de-las-jerarquias-de-clases","title":"6.3. Pruebas y Depuraci\u00f3n de las Jerarqu\u00edas de Clases","text":"<p>Las pruebas y la depuraci\u00f3n son cruciales para asegurar la correcta implementaci\u00f3n y funcionamiento de las jerarqu\u00edas de clases. Esto implica verificar que cada clase y m\u00e9todo se comporten como se espera, tanto individualmente como en conjunto.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#64-pruebas","title":"6.4. Pruebas","text":"<ul> <li>Pruebas Unitarias: Escribir pruebas unitarias para cada clase y m\u00e9todo, asegurando que funcionan correctamente de forma aislada.</li> <li>Pruebas de Integraci\u00f3n: Realizar pruebas que involucren interacciones entre clases en la jerarqu\u00eda para asegurar que cooperen correctamente.</li> </ul> <p>Para ilustrar c\u00f3mo realizar pruebas unitarias y de integraci\u00f3n en el contexto de jerarqu\u00edas de clases en Kotlin, utilizaremos como ejemplo la jerarqu\u00eda de clases <code>Animal</code> y <code>Perro</code> definida anteriormente.  Asumiremos que estas clases forman parte de un proyecto Kotlin que utiliza JUnit para las pruebas.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#65-ejemplo-de-prueba-unitaria-para-perro","title":"6.5. Ejemplo de Prueba Unitaria para <code>Perro</code>","text":"<p>Las pruebas unitarias se centran en verificar la funcionalidad de una sola clase o m\u00e9todo en aislamiento. Para la clase <code>Perro</code>, una prueba unitaria podr\u00eda verificar que el m\u00e9todo <code>emitirSonido()</code> se comporta como se espera.</p> <pre><code>import org.junit.jupiter.api.Assertions.assertTrue\nimport org.junit.jupiter.api.Test\n\nclass PerroTest {\n\n    @Test\n    fun testEmitirSonido() {\n        val perro = Perro()\n        var sonido = \"\"\n\n        // Redirigir la salida est\u00e1ndar para capturar el texto impreso por emitirSonido()\n        val originalOut = System.out\n        try {\n            val outputStreamCaptor = ByteArrayOutputStream()\n            System.setOut(PrintStream(outputStreamCaptor))\n\n            perro.emitirSonido()\n            sonido = outputStreamCaptor.toString().trim()\n\n        } finally {\n            System.setOut(originalOut)\n        }\n\n        assertTrue(sonido.contains(\"El perro ladra\"), \"El sonido emitido por el perro debe contener 'El perro ladra'\")\n    }\n}\n</code></pre> <p>Este test verifica que al llamar a <code>emitirSonido()</code> en un objeto <code>Perro</code>, la salida incluye la cadena espec\u00edfica \"El perro ladra\". Se utiliza una redirecci\u00f3n de <code>System.out</code> para capturar la salida impresa y verificarla.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#66-ejemplo-de-prueba-de-integracion-para-la-jerarquia-de-animal-y-perro","title":"6.6. Ejemplo de Prueba de Integraci\u00f3n para la Jerarqu\u00eda de <code>Animal</code> y <code>Perro</code>","text":"<p>Las pruebas de integraci\u00f3n eval\u00faan c\u00f3mo diferentes partes del sistema trabajan juntas. En este caso, podr\u00edamos verificar c\u00f3mo la clase <code>Perro</code> interact\u00faa dentro del contexto m\u00e1s amplio de la jerarqu\u00eda de clases <code>Animal</code>.</p> <pre><code>import org.junit.jupiter.api.Test\nimport kotlin.test.assertNotNull\n\nclass IntegracionAnimalTest {\n\n    @Test\n    fun testCreacionPerro() {\n        val perro = Perro()\n        assertNotNull(perro, \"El objeto perro no deber\u00eda ser nulo\")\n\n        // Verificar que Perro es instancia de Animal\n        assertTrue(perro is Animal, \"Perro deber\u00eda ser instancia de Animal\")\n\n        // Verificar comportamiento heredado (como emitirSonido o cualquier otro m\u00e9todo relevante)\n        var sonido = \"\"\n        val originalOut = System.out\n        try {\n            val outputStreamCaptor = ByteArrayOutputStream()\n            System.setOut(PrintStream(outputStreamCaptor))\n\n            perro.emitirSonido()\n            sonido = outputStreamCaptor.toString().trim()\n\n        } finally {\n            System.setOut(originalOut)\n        }\n\n        assertTrue(sonido.contains(\"El perro ladra\"), \"Perro deber\u00eda emitir su sonido caracter\u00edstico al llamar a emitirSonido()\")\n    }\n}\n</code></pre> <p>Esta prueba de integraci\u00f3n verifica varios aspectos:</p> <ul> <li>La creaci\u00f3n de un objeto <code>Perro</code> y su no nulidad.</li> <li>Que un objeto <code>Perro</code> sea reconocido como una instancia de <code>Animal</code>, validando as\u00ed la relaci\u00f3n de herencia.</li> <li>Que el m\u00e9todo sobrescrito <code>emitirSonido()</code> funcione correctamente dentro del contexto de la jerarqu\u00eda de clases, manteniendo la coherencia del comportamiento esperado.</li> </ul> <p>Estos ejemplos demuestran c\u00f3mo se pueden implementar pruebas unitarias y de integraci\u00f3n para validar tanto el comportamiento espec\u00edfico de las subclases como su correcta integraci\u00f3n dentro de una jerarqu\u00eda de clases m\u00e1s amplia,  asegurando as\u00ed que el sistema funcione como se espera en conjunto.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#67-depuracion","title":"6.7. Depuraci\u00f3n","text":"<ul> <li>Uso de IDEs: Aprovechar las herramientas de depuraci\u00f3n integradas en los Entornos de Desarrollo Integrado (IDEs) para inspeccionar el estado y el flujo de ejecuci\u00f3n.</li> <li>Rastreo de Llamadas a M\u00e9todos: Prestar especial atenci\u00f3n a las llamadas a m\u00e9todos sobrescritos y a la ejecuci\u00f3n de constructores a lo largo de la jerarqu\u00eda.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-jerarquiaDeClases/#68-herramientas-y-tecnicas","title":"6.8. Herramientas y T\u00e9cnicas","text":"<ul> <li>Registro y Monitoreo: Utilizar registros (logging) para seguir el flujo de ejecuci\u00f3n y detectar anomal\u00edas.</li> <li>An\u00e1lisis Est\u00e1tico de C\u00f3digo: Emplear herramientas de an\u00e1lisis est\u00e1tico para identificar problemas comunes y potenciales errores en el dise\u00f1o de las clases.</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/","title":"UD 6 - 6.2 Ejemplo: Sistema de Gesti\u00f3n de Biblioteca de Medios","text":"","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#62-ejemplo-sistema-de-gestion-de-biblioteca-de-medios","title":"6.2. Ejemplo: Sistema de Gesti\u00f3n de Biblioteca de Medios.","text":"<p>Imaginemos un sistema que gestiona diferentes tipos de medios en una biblioteca, como libros y revistas. Para este prop\u00f3sito, definiremos una clase base <code>Medio</code> y dos subclases <code>Libro</code> y <code>Revista</code>.</p> <p>Este ejemplo involucra una jerarqu\u00eda de clases, incluyendo m\u00faltiples niveles de herencia y la implementaci\u00f3n de interfaces para gestionar una colecci\u00f3n de art\u00edculos de una biblioteca digital.  Esta biblioteca gestionar\u00e1 libros, revistas, y pel\u00edculas, pero tambi\u00e9n incluir\u00e1 funcionalidades para buscar y listar los art\u00edculos disponibles por tipo y categor\u00eda.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#1-jerarquia-de-clases","title":"1. Jerarqu\u00eda de Clases","text":"<ol> <li>Clase Base <code>Articulo</code>: Una clase abstracta con propiedades comunes como <code>titulo</code> y <code>autor</code>.</li> <li>Subclases <code>Libro</code>, <code>Revista</code>, y <code>Pelicula</code>: Clases derivadas que extienden <code>Articulo</code>.</li> <li>Interfaz <code>Buscable</code>: Define m\u00e9todos para buscar art\u00edculos por t\u00edtulo y listar art\u00edculos por categor\u00eda.</li> </ol>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#2-implementacion","title":"2. Implementaci\u00f3n","text":"<pre><code>// Clase base abstracta para art\u00edculos\nabstract class Articulo(val titulo: String, val autor: String) {\n    abstract fun descripcion()\n}\n\n// Interfaz para funcionalidades de b\u00fasqueda\ninterface Buscable {\n    fun buscarPorTitulo(titulo: String): List&lt;Articulo&gt;\n    fun listarPorCategoria(categoria: String): List&lt;Articulo&gt;\n}\n\n// Subclase para libros\nclass Libro(titulo: String, autor: String, val paginas: Int, val categoria: String) : Articulo(titulo, autor) {\n    override fun descripcion() {\n        println(\"Libro: '$titulo' por $autor, $paginas p\u00e1ginas, Categor\u00eda: $categoria\")\n    }\n}\n\n// Subclase para revistas\nclass Revista(titulo: String, autor: String, val edicion: String, val categoria: String) : Articulo(titulo, autor) {\n    override fun descripcion() {\n        println(\"Revista: '$titulo' por $autor, Edici\u00f3n: $edicion, Categor\u00eda: $categoria\")\n    }\n}\n\n// Subclase para pel\u00edculas\nclass Pelicula(titulo: String, autor: String, val duracion: Int, val genero: String, val categoria: String) : Articulo(titulo, autor) {\n    override fun descripcion() {\n        println(\"Pel\u00edcula: '$titulo' dirigida por $autor, Duraci\u00f3n: $duracion minutos, G\u00e9nero: $genero, Categor\u00eda: $categoria\")\n    }\n}\n\n// Implementaci\u00f3n de la interfaz Buscable\nclass BibliotecaDigital(val articulos: MutableList&lt;Articulo&gt;) : Buscable {\n    override fun buscarPorTitulo(titulo: String): List&lt;Articulo&gt; =\n        articulos.filter { it.titulo.contains(titulo, ignoreCase = true) }\n\n    override fun listarPorCategoria(categoria: String): List&lt;Articulo&gt; =\n        articulos.filter { it is Libro &amp;&amp; it.categoria == categoria || \n                            it is Revista &amp;&amp; it.categoria == categoria || \n                            it is Pelicula &amp;&amp; it.categoria == categoria }\n\n    fun mostrarDescripcionArticulos() {\n        articulos.forEach { it.descripcion() }\n    }\n}\n\n// Demostraci\u00f3n de uso\nfun main() {\n    val biblioteca = BibliotecaDigital(mutableListOf(\n        Libro(\"1984\", \"George Orwell\", 328, \"Distop\u00eda\"),\n        Revista(\"National Geographic\", \"Varios\", \"Enero 2024\", \"Naturaleza\"),\n        Pelicula(\"Interstellar\", \"Christopher Nolan\", 169, \"Ciencia Ficci\u00f3n\", \"Aventura\")\n    ))\n\n    biblioteca.mostrarDescripcionArticulos()\n    println(\"\\nBuscando por t\u00edtulo '1984':\")\n    biblioteca.buscarPorTitulo(\"1984\").forEach { it.descripcion() }\n\n    println(\"\\nListando art\u00edculos en la categor\u00eda 'Aventura':\")\n    biblioteca.listarPorCategoria(\"Aventura\").forEach { it.descripcion() }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#3-actividad-propuesta","title":"3. Actividad Propuesta","text":"<p>Objetivo: Ampliar la <code>BibliotecaDigital</code> para incluir funcionalidades de pr\u00e9stamo de art\u00edculos. Cada art\u00edculo debe tener un estado que indique si est\u00e1 disponible para pr\u00e9stamo.  Los usuarios pueden prestar y devolver art\u00edculos, cambiando su estado de disponibilidad.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#4-instrucciones","title":"4. Instrucciones","text":"<ol> <li>A\u00f1ade una propiedad <code>disponible</code> a la clase <code>Articulo</code> para indicar la disponibilidad.</li> <li>Implementa m\u00e9todos <code>prestarArticulo(titulo: String)</code> y <code>devolverArticulo(titulo: String)</code> en <code>BibliotecaDigital</code> que cambien el estado de disponibilidad del art\u00edculo correspondiente.</li> <li>Aseg\u00farate de manejar casos donde el art\u00edculo no est\u00e9 disponible para pr\u00e9stamo o ya haya sido prestado.</li> <li>Modifica <code>main</code> para demostrar las funcionalidades de pr\u00e9stamo y devoluci\u00f3n.</li> </ol>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#5-implementacion-de-una-posible-solucion","title":"5. Implementaci\u00f3n de una posible soluci\u00f3n.","text":"<p>Esta actividad proporciona una oportunidad para explorar conceptos avanzados de herencia y la implementaci\u00f3n de interfaces, al tiempo que se introducen nuevas funcionalidades que reflejan  operaciones del mundo real en sistemas de gesti\u00f3n de bibliotecas.</p> <p>Para completar la actividad propuesta y proporcionar una soluci\u00f3n detallada, vamos a expandir la funcionalidad de la <code>BibliotecaDigital</code> para incluir el pr\u00e9stamo de art\u00edculos, modificando la clase base <code>Articulo</code> para a\u00f1adir una propiedad que indique su disponibilidad y actualizando la l\u00f3gica de la biblioteca para gestionar el pr\u00e9stamo y la devoluci\u00f3n de art\u00edculos.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#no-sigas","title":"NO SIGAS...","text":"<p>IMPORTANTE</p> <pre><code>Aqu\u00ed deber\u00edas parar e intentar tu la soluci\u00f3n antes de seguir leyendo...\n</code></pre> <p>IMPORTANTE</p> <p>La soluci\u00f3n impica modificar la clase <code>Articulo</code> para incluir la propiedad <code>disponible</code> y actualizar <code>BibliotecaDigital</code> con los m\u00e9todos de pr\u00e9stamo y devoluci\u00f3n.  Despu\u00e9s, en <code>main</code>, se demostrar\u00edan estas nuevas funcionalidades prestando un libro y luego devolvi\u00e9ndolo, mostrando el cambio en su disponibilidad.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#51-paso-1-modificar-la-clase-base-articulo","title":"5.1. Paso 1: Modificar la Clase Base <code>Articulo</code>","text":"<p>Agregaremos una propiedad <code>disponible</code> a la clase <code>Articulo</code> para indicar si el art\u00edculo est\u00e1 disponible para pr\u00e9stamo.</p> <pre><code>abstract class Articulo(val titulo: String, val autor: String, var disponible: Boolean = true) {\n    abstract fun descripcion()\n    fun cambiarDisponibilidad() { disponible = !disponible }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#52-paso-2-implementar-metodos-de-prestamo-y-devolucion-en-bibliotecadigital","title":"5.2. Paso 2: Implementar M\u00e9todos de Pr\u00e9stamo y Devoluci\u00f3n en <code>BibliotecaDigital</code>","text":"<p>Actualizaremos <code>BibliotecaDigital</code> para incluir m\u00e9todos que permitan prestar y devolver art\u00edculos, modificando su estado de disponibilidad.</p> <pre><code>class BibliotecaDigital(val articulos: MutableList&lt;Articulo&gt;) : Buscable {\n    // M\u00e9todos existentes\n\n    fun prestarArticulo(titulo: String) {\n        articulos.find { it.titulo == titulo &amp;&amp; it.disponible }?.let {\n            it.cambiarDisponibilidad()\n            println(\"Art\u00edculo prestado: ${it.titulo}\")\n        } ?: println(\"Art\u00edculo no disponible para pr\u00e9stamo: $titulo\")\n    }\n\n    fun devolverArticulo(titulo: String) {\n        articulos.find { it.titulo == titulo &amp;&amp; !it.disponible }?.let {\n            it.cambiarDisponibilidad()\n            println(\"Art\u00edculo devuelto: ${it.titulo}\")\n        } ?: println(\"Error al intentar devolver el art\u00edculo: $titulo\")\n    }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.2.-ejemploYActividad/#53-paso-3-demostracion-de-prestamo-y-devolucion","title":"5.3. Paso 3: Demostraci\u00f3n de Pr\u00e9stamo y Devoluci\u00f3n","text":"<p>Finalmente, modificaremos la funci\u00f3n <code>main</code> para demostrar las funcionalidades de pr\u00e9stamo y devoluci\u00f3n, asegur\u00e1ndonos de que los art\u00edculos cambian su estado de disponibilidad adecuadamente.</p> <pre><code>fun main() {\n    val biblioteca = BibliotecaDigital(mutableListOf(\n        Libro(\"1984\", \"George Orwell\", 328, \"Distop\u00eda\"),\n        Revista(\"National Geographic\", \"Varios\", \"Enero 2024\", \"Naturaleza\"),\n        Pelicula(\"Interstellar\", \"Christopher Nolan\", 169, \"Ciencia Ficci\u00f3n\", \"Aventura\")\n    ))\n\n    println(\"Estado inicial de los art\u00edculos:\")\n    biblioteca.mostrarDescripcionArticulos()\n\n    // Prestar un art\u00edculo\n    println(\"\\nPrestar el libro '1984':\")\n    biblioteca.prestarArticulo(\"1984\")\n\n    // Intentar prestar el mismo art\u00edculo de nuevo\n    println(\"\\nIntentar prestar el libro '1984' otra vez:\")\n    biblioteca.prestarArticulo(\"1984\")\n\n    // Devolver el art\u00edculo\n    println(\"\\nDevolver el libro '1984':\")\n    biblioteca.devolverArticulo(\"1984\")\n\n    // Verificar el estado final de los art\u00edculos\n    println(\"\\nEstado final de los art\u00edculos:\")\n    biblioteca.mostrarDescripcionArticulos()\n}\n</code></pre> <p>Este flujo demuestra c\u00f3mo los art\u00edculos pueden ser prestados y devueltos, modificando su disponibilidad en la biblioteca digital. Al prestar el libro \"1984\", se marca como no disponible, y al intentar  prestarlo nuevamente, se muestra un mensaje indicando que el art\u00edculo no est\u00e1 disponible para pr\u00e9stamo. Al devolver el libro, su disponibilidad se restablece.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/","title":"UD 6 - 6.3 Principios de SOLID","text":"","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/#1-solid","title":"1. SOLID.","text":"<p>SOLID es el acr\u00f3nimo que acu\u00f1\u00f3 Michael Feathers, bas\u00e1ndose en los principios de la programaci\u00f3n orientada a objetos que Robert C. Martin hab\u00eda recopilado en el a\u00f1o 2000 en su paper \"Design Principles and Design Patterns\".</p> <p>Ocho a\u00f1os m\u00e1s tarde, el t\u00edo Bob sigui\u00f3 compendiando consejos y buenas pr\u00e1cticas de desarrollo y se convirti\u00f3 en el padre del c\u00f3digo limpio con su c\u00e9lebre libro \"Clean Code\".</p> <p>Entre los objetivos de tener en cuenta estos 5 principios a la hora de escribir c\u00f3digo encontramos:</p> <ul> <li> <p>Crear un software eficaz: que cumpla con su cometido y que sea robusto y estable.</p> </li> <li> <p>Escribir un c\u00f3digo limpio y flexible ante los cambios: que se pueda modificar f\u00e1cilmente seg\u00fan necesidad, que sea reutilizable y mantenible.</p> </li> <li> <p>Permitir escalabilidad: que acepte ser ampliado con nuevas funcionalidades de manera \u00e1gil.</p> </li> </ul> <p>En este sentido la aplicaci\u00f3n de los principios SOLID est\u00e1 muy relacionada con la comprensi\u00f3n y el uso de patrones de dise\u00f1o, que nos permitir\u00e1n mantener una alta cohesi\u00f3n y, por tanto, un bajo acoplamiento de software. En definitiva, desarrollar un software de calidad.</p> <p>El acoplamiento se refiere al grado de interdependencia que tienen dos unidades de software entre s\u00ed, entendiendo por unidades de software: clases, subtipos, m\u00e9todos, m\u00f3dulos, funciones, bibliotecas, etc.</p> <p>Si dos unidades de software son completamente independientes la una de la otra, decimos que est\u00e1n desacopladas.</p> <p>La cohesi\u00f3n de software es el grado en que elementos diferentes de un sistema permanecen unidos para alcanzar un mejor resultado que si trabajaran por separado. Se refiere a la forma en que podemos agrupar diversas unidades de software para crear una unidad mayor.</p> <p>Los principios SOLID son eso: principios, es decir, buenas pr\u00e1cticas que pueden ayudar a escribir un mejor c\u00f3digo... m\u00e1s limpio, mantenible y escalable.</p> <p>Como indica el propio Robert C. Martin en su art\u00edculo \u201cGetting a SOLID start\u201d no se trata de reglas, ni leyes, ni verdades absolutas, sino m\u00e1s bien soluciones de sentido com\u00fan a problemas comunes. Son heur\u00edsticos, basados en la experiencia: \u201cse ha observado que funcionan en muchos casos; pero no hay pruebas de que siempre funcionen, ni de que siempre se deban seguir.\u201d</p> <p>Dice el t\u00edo Bob, que SOLID nos ayuda a categorizar lo que es un buen o mal c\u00f3digo y es innegable que un c\u00f3digo limpio tender\u00e1 m\u00e1s a salir airoso del \u201ccontrol de calidad de c\u00f3digo\u201d WTFs/Minute. Consejo: cuando est\u00e9s revisando un c\u00f3digo, lleva la cuenta de cu\u00e1ntas veces por minuto sale de tu boca un WTF?.</p> <p></p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/#2-principios-de-solid","title":"2. Principios de SOLID.","text":"<p>Los principios SOLID son un conjunto de cinco principios de dise\u00f1o orientado a objetos introducidos por Robert C. Martin. Estos principios son fundamentales para escribir software limpio, mantenible y escalable.</p> <p>Los 5 principios SOLID son:</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/#21-s-principio-de-responsabilidad-unica-single-responsibility-principle-srp","title":"2.1. S - Principio de Responsabilidad \u00danica (\"**S**ingle Responsibility Principle\" - SRP)","text":"<p>Definici\u00f3n: Un m\u00f3dulo o clase debe tener solo una raz\u00f3n para cambiar, lo que significa que debe tener solo una tarea o responsabilidad.</p> <p>Este principio establece que cada m\u00f3dulo o clase debe tener responsabilidad sobre una sola parte de la funcionalidad proporcionada por el software y esta responsabilidad debe estar encapsulada en su totalidad por la clase. Todos sus servicios deben estar estrechamente alineados con esa responsabilidad.</p> <p>Ejemplo: Considera un m\u00f3dulo de sistema de gesti\u00f3n de pedidos que gestiona tanto los pedidos de los clientes como la log\u00edstica de los mismos. Seg\u00fan el SRP, debemos dividir este m\u00f3dulo en dos clases: una para gestionar los pedidos y otra para manejar la log\u00edstica.</p> <pre><code>// Antes: Violaci\u00f3n del SRP\nclass OrderManager {\n   fun processOrder(order: Order) {\n       // procesa el pedido\n   }\n   fun calculateShippingCosts(order: Order) {\n       // calcula los costes de env\u00edo\n   }\n}\n\n// Despu\u00e9s: Aplicando el SRP\nclass OrderProcessor {\n   fun processOrder(order: Order) {\n       // procesa el pedido\n   }\n}\n\nclass ShippingCalculator {\n   fun calculateShippingCosts(order: Order) {\n       // calcula los costes de env\u00edo\n   }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/#22-o-principio-de-abiertocerrado-openclosed-principle-ocp","title":"2.2. O - Principio de Abierto/Cerrado (\"**O**pen/Closed Principle\" - OCP)","text":"<p>Definici\u00f3n: Las entidades de software (clases, m\u00f3dulos, funciones, etc.) deben estar abiertas para la extensi\u00f3n, pero cerradas para la modificaci\u00f3n. Es decir, se debe poder extender el comportamiento de la entidad pero sin modificar su c\u00f3digo fuente.</p> <p>Ejemplo: Implementar un sistema de descuentos donde nuevos tipos de descuento puedan ser a\u00f1adidos sin cambiar el c\u00f3digo existente.</p> <pre><code>interface Discount {\n   fun applyDiscount(amount: Double): Double\n}\n\nclass ChristmasDiscount : Discount {\n   override fun applyDiscount(amount: Double): Double {\n       return amount * 0.90 // 10% de descuento\n   }\n}\n\nclass NewYearDiscount : Discount {\n   override fun applyDiscount(amount: Double): Double {\n       return amount * 0.85 // 15% de descuento\n   }\n}\n\n// La clase Checkout no necesita ser modificada para a\u00f1adir nuevos tipos de descuentos\nclass Checkout(private val discount: Discount) {\n   fun calculatePrice(originalAmount: Double): Double {\n       return discount.applyDiscount(originalAmount)\n   }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/#23-l-principio-de-substitucion-de-liskov-liskov-substitution-principle-lsp","title":"2.3. L - Principio de Substituci\u00f3n de Liskov (\"**L**iskov Substitution Principle\" - LSP)","text":"<p>Definici\u00f3n: Los objetos de una superclase deben poder ser reemplazados con objetos de sus subclases sin afectar la correctitud del programa.</p> <p>Este principo puede definirse como: \u00abcada clase que hereda de otra puede usarse como su padre sin necesidad de conocer las diferencias entre ellas\u00bb.</p> <p>Ejemplo: Extender la funcionalidad de una clase de veh\u00edculo asegurando que las subclases puedan sustituir a la superclase.</p> <pre><code>open class Vehicle {\n   open fun startEngine(): Boolean {\n       // l\u00f3gica para arrancar el motor\n       return true\n   }\n}\n\nclass ElectricCar : Vehicle() {\n   override fun startEngine(): Boolean {\n       // l\u00f3gica espec\u00edfica para arrancar un motor el\u00e9ctrico\n       return true\n   }\n}\n\nfun startVehicle(vehicle: Vehicle) {\n   if (vehicle.startEngine()) {\n       println(\"Veh\u00edculo arrancado.\")\n   } else {\n       println(\"Fall\u00f3 al arrancar el veh\u00edculo.\")\n   }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/#24-i-principio-de-segregacion-de-la-interfaz-interface-segregation-principle-isp","title":"2.4. I - Principio de Segregaci\u00f3n de la Interfaz (\"**I**nterface Segregation Principle\" - ISP)","text":"<p>Definici\u00f3n: Los clientes no deben ser forzados a depender de interfaces que no utilizan.</p> <p>Este principio establece que los clientes de un programa dado s\u00f3lo deber\u00edan conocer aquellos m\u00e9todos del programa que realmente usan, y no aquellos que no necesitan usar.</p> <p>Ejemplo: Dividir una interfaz grande en interfaces m\u00e1s peque\u00f1as y espec\u00edficas.</p> <pre><code>// Antes: Violaci\u00f3n del ISP\ninterface Worker {\n   fun work()\n   fun eat()\n}\n\n// Despu\u00e9s: Aplicando el ISP\ninterface Workable {\n   fun work()\n}\n\ninterface Eatable {\n   fun eat()\n}\n\nclass HumanWorker : Workable, Eatable {\n   override fun work() {\n       // trabajar\n   }\n   override fun eat() {\n       // comer\n   }\n}\n\nclass RobotWorker : Workable {\n   override fun work() {\n       // trabajar\n   }\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.3.-principiosSOLID/#25-d-principio-de-inversion-de-dependencias-dependency-inversion-principle-dip","title":"2.5. D - Principio de Inversi\u00f3n de Dependencias (\"**D**ependency Inversion Principle\" - DIP)","text":"<p>Definici\u00f3n: Este principio consta de dos partes:</p> <ul> <li>M\u00f3dulos de alto nivel no deben depender de m\u00f3dulos de bajo nivel. Ambos deben depender de abstracciones.</li> <li>Las abstracciones no deber\u00edan depender de detalles. Los detalles debieran depender de abstracciones.</li> </ul> <p>El principio de inversi\u00f3n de dependencia establece que nuestras clases deben depender de interfaces o clases abstractas en lugar de clases y funciones concretas.</p> <p>En su art\u00edculo (2000), el t\u00edo Bob resume este principio de la siguiente manera:</p> <p><code>\"Si el OCP establece el objetivo de la arquitectura OO, el DIP establece el mecanismo principal\"</code></p> <p>Ejemplo: Usar una interfaz para desacoplar la l\u00f3gica de notificaci\u00f3n de la implementaci\u00f3n concreta de env\u00edo de mensajes.</p> <pre><code>// C\u00f3digo que no cumple DIP...\n// NotificationService depende directamente de la implementaci\u00f3n concreta EmailSender en lugar de depender de una abstracci\u00f3n.\n// Esto hace que NotificationService est\u00e9 directamente acoplado a EmailSender, lo que reduce la flexibilidad y la capacidad de\n// extender el c\u00f3digo.\n\nclass EmailSender {\n    fun sendMessage(message: String) {\n        println(\"Enviando email: $message\")\n    }\n}\n\nclass NotificationService {\n    private val sender = EmailSender()\n\n    fun notifyUser(message: String) {\n        sender.sendMessage(message)\n    }\n}\n</code></pre> <pre><code>// Soluci\u00f3n para cumplir DIP...\n\ninterface MessageSender {\n  fun sendMessage(message: String)\n}\n\nclass EmailSender : MessageSender {\n  override fun sendMessage(message: String) {\n      println(\"Enviando email: $message\")\n  }\n}\n\nclass NotificationService(private val sender: MessageSender) {\n  fun notifyUser(message: String) {\n      sender.sendMessage(message)\n  }\n}\n</code></pre> <p>En este ejemplo, <code>NotificationService</code> depende de la abstracci\u00f3n <code>MessageSender</code>, no de su implementaci\u00f3n concreta, cumpliendo con el DIP. Esto permite cambiar f\u00e1cilmente la forma en que se env\u00edan  las notificaciones (por ejemplo, a SMS) sin modificar <code>NotificationService</code>.</p> <p>Si en un futuro quisi\u00e9ramos ampliar la funcionalidad y enviar notificaciones a trav\u00e9s de SMS o RRSS, tendr\u00edamos que modificar NotificationService directamente, lo cual va en contra del principio DIP.</p> <p>Para realizar este cambio en ambas versiones de la aplicaci\u00f3n tendr\u00edamos que realizar lo siguiente:</p> <pre><code>// Versi\u00f3n que viola DIP...\n// La ampliaci\u00f3n de la funcionalidad nos obligar\u00eda a modificar la clase NotificationService\n\nclass EmailSender {\n    fun sendMessage(message: String) {\n        println(\"Enviando email: $message\")\n    }\n}\n\nclass SmsSender {\n    fun sendMessage(message: String) {\n        println(\"Enviando SMS: $message\")\n    }\n}\n\nclass SocialMediaSender {\n    fun sendMessage(message: String) {\n        println(\"Publicando en redes sociales: $message\")\n    }\n}\n\nclass NotificationService {\n    private val emailSender = EmailSender()\n    private val smsSender = SmsSender()\n    private val socialMediaSender = SocialMediaSender()\n\n    fun notifyUserByEmail(message: String) {\n        emailSender.sendMessage(message)\n    }\n\n    fun notifyUserBySms(message: String) {\n        smsSender.sendMessage(message)\n    }\n\n    fun notifyUserOnSocialMedia(message: String) {\n        socialMediaSender.sendMessage(message)\n    }\n}\n</code></pre> <p>Sin embargo, nuestra nueva versi\u00f3n que si cumple DIP es m\u00e1s flexible y no tan dependiente, lo cu\u00e1l es una ventaja a la hora de escalar el c\u00f3digo y ampliar funcionalidades.</p> <pre><code>// Definimos la interfaz de abstracci\u00f3n\ninterface MessageSender {\n    fun sendMessage(message: String)\n}\n\n// Implementaci\u00f3n para enviar emails\nclass EmailSender : MessageSender {\n    override fun sendMessage(message: String) {\n        println(\"Enviando email: $message\")\n    }\n}\n\n// Implementaci\u00f3n para enviar SMS\nclass SmsSender : MessageSender {\n    override fun sendMessage(message: String) {\n        println(\"Enviando SMS: $message\")\n    }\n}\n\n// Implementaci\u00f3n para publicar en redes sociales\nclass SocialMediaSender : MessageSender {\n    override fun sendMessage(message: String) {\n        println(\"Publicando en redes sociales: $message\")\n    }\n}\n\n// Servicio de notificaci\u00f3n que depende de la abstracci\u00f3n, no de la implementaci\u00f3n\nclass NotificationService(private val sender: MessageSender) {\n    fun notifyUser(message: String) {\n        sender.sendMessage(message)\n    }\n}\n</code></pre> <p>Para usar NotificationService con diferentes m\u00e9todos de env\u00edo de mensajes en la versi\u00f3n que sigue el DIP, crear\u00edamos una instancia de NotificationService pasando el sender espec\u00edfico (por ejemplo, EmailSender, SmsSender, o SocialMediaSender) en el momento de la creaci\u00f3n. </p> <p>Esto permite cambiar el m\u00e9todo de env\u00edo de mensajes sin necesidad de modificar el c\u00f3digo de NotificationService, manteniendo las dependencias desacopladas y facilitando la extensi\u00f3n y  mantenimiento del sistema.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/","title":"UD 6 - 6.4 Se ha comentado y documentado el c\u00f3digo","text":"","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#64-se-ha-comentado-y-documentado-el-codigo","title":"6.4. Se ha comentado y documentado el c\u00f3digo.","text":"<p>Un c\u00f3digo bien documentado y comentado es esencial para asegurar la calidad, mantenibilidad y escalabilidad de cualquier proyecto de software. A continuaci\u00f3n, se detalla una gu\u00eda sobre c\u00f3mo abordar la documentaci\u00f3n y los comentarios en el c\u00f3digo, tomando en cuenta las pr\u00e1cticas recomendadas y la filosof\u00eda detr\u00e1s de un c\u00f3digo bien documentado.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#1-como-abordar-los-comentarios-en-el-codigo","title":"1. \u00bfC\u00f3mo Abordar los Comentarios en el C\u00f3digo?","text":"<p>A la hora de comentar, hay dos escuelas:</p> <ul> <li>Usar los comentarios para clarificar lo que quisiste expresar con tu c\u00f3digo.</li> <li>Evitarlos al m\u00e1ximo y que comentar tu c\u00f3digo es un mal necesario que s\u00f3lo denota tu falta de habilidad para no hacer c\u00f3digo lo suficientemente claro.</li> </ul> <p><code>\u00bfA cu\u00e1l de los dos consejos deber\u00edas hacerle caso?</code></p> <p>Existen gurus, como John Ousterhout, en \u201cA Philosophy of Software Design\u201d que recomienda empezar con los comentarios antes de programar. Pero, \u00bfpor qu\u00e9 lo recomienda?</p> <p>Escribir en un lenguaje humano c\u00f3mo funciona algo antes de implementarlo realmente, te da la capacidad de ver si es l\u00f3gico y suficiente, adem\u00e1s te permite ponerte en los zapatos del usuario para notar deficiencias sobre todo en la interfaz. Los comentarios de la interfaz es lo primero que deber\u00edas crear porque te servir\u00e1n de gu\u00eda para avanzar con tu dise\u00f1o y, sobre todo, que sea l\u00f3gico y f\u00e1cil de usar.</p> <p>Aunque existen diferentes opiniones sobre el uso de comentarios en el c\u00f3digo, es indiscutible que un sistema sin documentaci\u00f3n es incompleto. La documentaci\u00f3n y los comentarios bien pensados son cruciales para entender la raz\u00f3n de ser de ciertos m\u00f3dulos, funciones, y decisiones de dise\u00f1o dentro del sistema. </p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#2-directrices-sobre-como-y-cuando-usar-comentarios","title":"2. Directrices sobre c\u00f3mo y cu\u00e1ndo usar comentarios","text":"<ol> <li> <p>Documentar Decisiones de Dise\u00f1o y Arquitectura: Es importante usar comentarios para explicar el \"por qu\u00e9\" detr\u00e1s de decisiones de dise\u00f1o espec\u00edficas que no son obvias a trav\u00e9s del c\u00f3digo.    Esto incluye la raz\u00f3n de existir de ciertas clases, m\u00f3dulos o funciones, especialmente cuando estas decisiones afectan la arquitectura o el funcionamiento global del sistema.</p> </li> <li> <p>Comentarios sobre la Interfaz y Ejemplos de Uso: Los comentarios deben clarificar c\u00f3mo se utiliza una clase o funci\u00f3n, incluyendo ejemplos de uso cuando sea posible.    Esto es especialmente valioso para las interfaces y las clases abstractas, donde el comportamiento espec\u00edfico no se define completamente en el c\u00f3digo.</p> </li> <li> <p>Uso de TODO\u2019s para Indicar Mejoras y Trabajo Pendiente: Utilizar comentarios para marcar \u00e1reas del c\u00f3digo que requieren mejoras, trabajo pendiente o refactorizaci\u00f3n es una pr\u00e1ctica com\u00fan.    Sin embargo, es importante gestionar estos comentarios adecuadamente para asegurar que se atienden en el tiempo y no perduren en el c\u00f3digo de manera permanente sin resolver.</p> </li> <li> <p>Evitar Comentarios Obvios sobre la Implementaci\u00f3n: Los comentarios deben aportar valor y no simplemente reiterar lo que el c\u00f3digo ya expresa claramente.    En lugar de comentar cada l\u00ednea de c\u00f3digo, enf\u00f3cate en explicar complejidades, algoritmos no triviales o comportamientos que no son inmediatamente claros.</p> </li> </ol>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#3-herramientas-de-documentacion-dokka-y-kdoc","title":"3. Herramientas de Documentaci\u00f3n: DOKKA y KDoc","text":"<ul> <li>DOKKA: Es una herramienta de documentaci\u00f3n para Kotlin que permite generar documentaci\u00f3n de alta calidad directamente desde los comentarios del c\u00f3digo.   La configuraci\u00f3n b\u00e1sica en el fichero <code>build.gradle.kts</code> habilita nuevas tareas en Gradle para generar la documentaci\u00f3n en formatos accesibles.</li> </ul> <pre><code>  plugins {\n   id(\"org.jetbrains.dokka\") version \"1.6.10\"\n  } \n\n  repositories {\n   mavenCentral()\n  }\n</code></pre> <p>Enlace a la web oficial de DOKKA</p> <ul> <li>KDoc: Es el lenguaje de documentaci\u00f3n para Kotlin, similar a JavaDoc para Java. KDoc se utiliza para documentar la interfaz p\u00fablica de las clases, m\u00e9todos, propiedades, etc.   Permite a los desarrolladores escribir documentaci\u00f3n estructurada y rica directamente en el c\u00f3digo, la cual luego puede ser procesada por herramientas como DOKKA para generar documentaci\u00f3n externa.</li> </ul> <p>Document Kotlin code: KDoc</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#ejemplo-de-documentacion-con-kdoc","title":"Ejemplo de Documentaci\u00f3n con KDoc","text":"<pre><code>/**\n * Representa un art\u00edculo en una biblioteca digital.\n *\n * Esta clase es la base para diferentes tipos de medios como libros, revistas y pel\u00edculas.\n * @property titulo El t\u00edtulo del art\u00edculo.\n * @property autor El autor o director del art\u00edculo.\n * @property disponible Indica si el art\u00edculo est\u00e1 disponible para pr\u00e9stamo.\n */\nabstract class Articulo(val titulo: String, val autor: String, var disponible: Boolean = true) {\n    /**\n     * Proporciona una descripci\u00f3n detallada del art\u00edculo.\n     */\n    abstract fun descripcion()\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#4-consejos-a-la-hora-de-documentar-tu-proyecto","title":"4. Consejos a la hora de documentar tu proyecto","text":"<p>Ya hemos visto que un sistema sin documentaci\u00f3n est\u00e1 incompleto. Para tener un software de calidad, se necesita tener documentaci\u00f3n, pero esta tiene que tener sentido: es decir, informaci\u00f3n acerca del sistema que comunique cosas como la raz\u00f3n de existir de ciertos m\u00f3dulos, valores y funciones y c\u00f3mo usarlo.</p> <ul> <li> <p>La documentaci\u00f3n debe ubicarse lo m\u00e1s cerca posible del c\u00f3digo, para eso tenemos los comentarios, facilitar\u00e1 encontrarlos y mantenerlos.</p> </li> <li> <p>Los comentarios pueden ayudarte en el futuro.</p> </li> <li> <p>Estar\u00e1n ahi para recordarte lo que hiciste y por qu\u00e9.</p> </li> <li> <p>Seguramente tu mente haya borrado informaci\u00f3n valiosa de por qu\u00e9 una variable tiene un valor de inicio y no otro.</p> </li> <li> <p>Tu yo futuro y tu equipo te agradecer\u00e1n los comentarios aclaratorios de tomas de decisiones.</p> </li> <li> <p>Los comentarios son una buena herramienta de dise\u00f1o.</p> </li> <li> <p>Si no eres capaz de crear un comentario concreto y corto sobre c\u00f3mo funciona o por qu\u00e9 existe algo, lo m\u00e1s probable es que tengas que re-pensar tu dise\u00f1o.</p> </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#41-puedes-usar-los-comentarios-para-documentar","title":"4.1. Puedes usar los comentarios para documentar:","text":"<ol> <li> <p>Decisiones de dise\u00f1o.</p> </li> <li> <p>Explicaciones sobre la existencia, funcionamiento o raz\u00f3n de ser de cierta parte del c\u00f3digo.</p> </li> <li> <p>Las interfaces y su ejemplo de uso.</p> </li> <li> <p>Efectos de usar cierto c\u00f3digo.</p> </li> <li> <p>Partes no finalizadas o que se pueden mejorar (TODO\u2019s).</p> </li> </ol> <p>El lenguaje de programaci\u00f3n no es suficiente para expresar todo lo necesario.</p> <p>Todos los lenguajes de programaci\u00f3n est\u00e1n pensados para ser un subconjunto del lenguaje humano que elimine las ambig\u00fcedades, manteniendo el mayor poder expresivo posible. </p> <p>Esto nos lleva a sus limitaciones: es imposible, o por lo menos no muy pr\u00e1ctico, intentar expresar todas las ideas con el c\u00f3digo.</p> <p>En la pr\u00e1ctica, el tiempo y los recursos para lograr algo son limitados, por lo que a veces es m\u00e1s conveniente y f\u00e1cil para todos explicar con lenguaje humano algo que  intentar expresarlo con c\u00f3digo, como los puristas afirman.</p> <p>No te sientas mal si tienes que recurrir de vez en cuando a explicar la forma en que funciona algo, siempre y cuando no sea la pr\u00e1ctica com\u00fan.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#42-como-usar-los-comentarios-para-que-sean-valiosos","title":"4.2. \u00bfC\u00f3mo usar los comentarios para que sean valiosos?","text":"<ul> <li> <p>No todos los comentarios son valiosos, hay algunos que pueden estorbar m\u00e1s de lo que ayudan, por ejemplo, los que no aportan informaci\u00f3n a lo que es obvio en el c\u00f3digo.</p> </li> <li> <p>Una de las partes m\u00e1s importantes de los comentarios como documentaci\u00f3n es que deben ser concretos, cercanos a la realidad y que proporcionen la mayor cantidad de informaci\u00f3n \u00fatil posible.</p> </li> <li> <p>Para lograr esto, se tienen que crear lo m\u00e1s cerca que puedas a la creaci\u00f3n del c\u00f3digo.</p> </li> <li> <p>Pero como todos sabemos que despu\u00e9s de escribir y probar (b\u00e1sicamente) el c\u00f3digo vamos a sentir que ya est\u00e1 terminado, es buena pr\u00e1ctica obligarte a \"escribir los comentarios primero\".</p> </li> <li> <p>De esta manera te asegurar\u00e1s que tu c\u00f3digo est\u00e9 documentado incluso antes de escribirlo y te servir\u00e1n como una herramienta de dise\u00f1o que te ayudar\u00e1 a pensar mejor en la usabilidad de tus m\u00f3dulos y piezas de software.</p> </li> <li> <p>Crear comentarios sobre la interfaz.</p> </li> <li> <p>La interfaz es el medio de uso que tus m\u00f3dulos o funciones presentan para que las dem\u00e1s partes de tu sistema lo usen.</p> </li> <li> <p>Lo primero que deber\u00edas documentar y explicar es esta interfaz, para que m\u00e1s personas a parte de ti puedan usar este pedazo de c\u00f3digo.</p> </li> <li> <p>Debes escribir comentarios claros sobre:         * C\u00f3mo usar esa pieza de c\u00f3digo         * Por qu\u00e9 existe esa parte del sistema         * Qu\u00e9 efectos tiene usarla</p> </li> <li> <p>Este tipo de comentarios son los que aportan mayor valor al sistema y si est\u00e1n lo suficientemente completos, con ejemplos y explicaciones claras, son una documentaci\u00f3n v\u00e1lida que est\u00e1 en un muy buen lugar:      es f\u00e1cil de encontrar y no se va a perder enterrada entre otros documentes que despu\u00e9s nadie va a consultar.</p> </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#43-no-hacer-cuando-documentamos","title":"4.3. No hacer cuando documentamos","text":"<ul> <li> <p>Evita los comentarios sobre la implementaci\u00f3n.</p> </li> <li> <p>Los comentarios sobre la implementaci\u00f3n son aquellos que describen qu\u00e9 estas haciendo, como por ejemplo, sumar n\u00famero, abrir un archivo, etc.</p> </li> <li> <p>Estos comentarios normalmente son innecesarios, ya que lo que se est\u00e1 haciendo es obvio si el c\u00f3digo es lo suficientemente expresivo y siempre deber\u00edamos buscar que sea as\u00ed.</p> </li> <li> <p>De hecho, estos son los comentarios que hacen que la gente odie a los comentarios en general, pues en vez de proporcionar informaci\u00f3n extra son una carga que hay que mantener y pueden confundir si no son actualizados.</p> </li> <li> <p>Si realmente sientes que tienes que explicar qu\u00e9 est\u00e1s haciendo con cierta pieza de c\u00f3digo, primero preg\u00fantate si no hay una manera de reescribirlo para que sea obvio.</p> </li> <li> <p>Si no existe o no es pr\u00e1ctica esta soluci\u00f3n, entonces escribe el comentario de la manera m\u00e1s concisa posible, incluyendo la raz\u00f3n de la existencia de ese c\u00f3digo.</p> </li> <li> <p>Para hacer esto debes tomar muy en cuenta los recursos del proyecto: no te puedes tardar el triple del tiempo implementando la pieza de c\u00f3digo perfecta porque no quieres escribir un comentario que explique c\u00f3mo funciona.</p> </li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.4.-comentariosYDocumentacion/#5-conclusion","title":"5. Conclusi\u00f3n","text":"<p>Escribir comentarios es una de las grandes tareas que los programadores debemos dominar. Los lenguajes de programaci\u00f3n y los entornos de programaci\u00f3n cada vez le dan m\u00e1s poder a esta parte de los programas y permiten incluso escribir pruebas en ellos, generar documentaci\u00f3n autom\u00e1tica y listar tareas a partir de ellos. Si pones el suficiente esmero en aprender a escribir buenos comentarios y mantenerlos, ser\u00e1n una gran herramienta de dise\u00f1o y documentaci\u00f3n de tu software.</p> <p>La documentaci\u00f3n y los comentarios en el c\u00f3digo son herramientas indispensables para cualquier desarrollador. Facilitan la comprensi\u00f3n del sistema, ayudan en la futura mantenibilidad del c\u00f3digo y  mejoran la colaboraci\u00f3n dentro de equipos de desarrollo. Al seguir las pr\u00e1cticas recomendadas y utilizar herramientas como DOKKA y KDoc, puedes asegurar que tu documentaci\u00f3n sea \u00fatil, relevante y  f\u00e1cilmente accesible tanto para ti como para tus colegas en el futuro.</p>","tags":["Software","kotlin"]},{"location":"section1/u07/","title":"UD 7 - Interfaces texto y gr\u00e1fica. Entrada/Salida","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u07/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u07/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA5. Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases.</p>","tags":["Software"]},{"location":"section1/u07/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha utilizado la consola para realizar operaciones de entrada y salida de informaci\u00f3n.   </li> <li>b) Se han aplicado formatos en la visualizaci\u00f3n de la informaci\u00f3n.   </li> <li>c) Se han reconocido las posibilidades de entrada/salida del lenguaje y las librer\u00edas asociadas.   </li> <li>d) Se han utilizado ficheros para almacenar y recuperar informaci\u00f3n.   </li> <li>e) Se han creado programas que utilicen diversos m\u00e9todos de acceso al contenido de los ficheros   </li> <li>f) Se han utilizado las herramientas del entorno de desarrollo para crear interfaces gr\u00e1ficos de usuario simples.   </li> <li>g) Se han programado controladores de eventos.    </li> <li>h) Se han escrito programas que utilicen interfaces gr\u00e1ficos para la entrada y salida de informaci\u00f3n.    </li> </ul>","tags":["Software"]},{"location":"section1/u07/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque X</p> <ul> <li>U7: Entrada/Salida </li> </ul> <p>En la Unidad 7, veremos:   </p> <ol> <li>Fundamentos de sistema de archivos.      1.1. Archivos (Texto, Binarios)      1.2. Directorios.      1.3. Flujos de E/S (Texto, Bytes)   </li> <li>La consola y el teclado (RA5.a, b)      2.1. Escribir por consola     2.2. Lectura desde teclado       2.3. Formato a la informaci\u00f3n. (Scanner &amp; println)</li> <li>API para trabajar con ficheros (RA5.c)   </li> <li>Trabajar con ficheros (RA5.d, e)       4.1. Texto       4.2. Binarios   </li> </ol>","tags":["Software"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/","title":"UD 7 - 7.1 Sistemas de archivos","text":"","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#71-sistema-de-archivos","title":"7.1 Sistema de archivos","text":"<p>La principal funci\u00f3n de una aplicaci\u00f3n inform\u00e1tica es la manipulaci\u00f3n y transformaci\u00f3n de datos. Estos datos pueden representar cosas muy diferentes seg\u00fan el contexto del programa: notas de estudiantes, una recopilaci\u00f3n de temperaturas, las fechas de un calendario, etc. Las posibilidades son ilimitadas. Todas estas tareas de manipulaci\u00f3n y transformaci\u00f3n se llevan a cabo normalmente mediante el almacenamiento de los datos en variables, dentro de la memoria del ordenador, por lo que se pueden aplicar operaciones, ya sea mediante operadores o la invocaci\u00f3n de m\u00e9todos.</p> <p></p> <p>Desgraciadamente, todas estas variables solo tienen vigencia mientras el programa se est\u00e1 ejecutando. Una vez el programa finaliza, los datos que contienen desaparecen. Esto no es problema para programas que siempre tratan los mismos datos, que pueden tomar la forma de literales dentro del programa. O cuando el n\u00famero de datos a tratar es peque\u00f1o y se puede preguntar al usuario. Ahora bien, imag\u00ednate tener que introducir las notas de todos los estudiantes cada vez que se ejecuta el programa para gestionarlas. No tiene ning\u00fan sentido. Por tanto, en algunos casos, aparece la necesidad de poder registrar los datos en alg\u00fan soporte de memoria externa, para que se mantengan de manera persistente entre diferentes ejecuciones del programa, o incluso si se apaga el ordenador.</p> <p>La manera m\u00e1s sencilla de lograr este objetivo es almacenar la informaci\u00f3n aprovechando el sistema de archivos que ofrece el sistema operativo. Mediante este mecanismo, es posible tener los datos en un formato f\u00e1cil de manejar e independiente del soporte real, ya sea un soporte magn\u00e9tico como un disco duro, una memoria de estado s\u00f3lido, como un l\u00e1piz de memoria USB, un soporte \u00f3ptico, cinta, etc.</p> <p>En esta unidad se explican distintas clases de Kotlin que nos permiten crear, leer, escribir y eliminar desde distintas fuentes, tanto entrada/salida est\u00e1ndar como ficheros y directorios. Tambi\u00e9n se introduce la serializaci\u00f3n de objetos como mecanismo de gran utilidad para almacenar objetos en ficheros para luego recuperarlos en tiempo de ejecuci\u00f3n.</p>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#1-gestion-de-archivos","title":"1. Gesti\u00f3n de archivos","text":"<p>Entre las funciones de un sistema operativo est\u00e1 la de ofrecer mecanismos gen\u00e9ricos para gestionar sistemas de archivos. Normalmente, dentro de un sistema operativo moderno (o ya no tanto moderno), se espera disponer de alg\u00fan tipo de interfaz o explorador para poder gestionar archivos, ya sea gr\u00e1ficamente o usando una l\u00ednea de comandos de texto. Si bien la forma en que los datos se guardan realmente en los dispositivos f\u00edsicos de almacenamiento de datos puede ser muy diferente seg\u00fan cada tipo (magn\u00e9tico, \u00f3ptico, etc.), la manera de gestionar el sistema de archivos suele ser muy similar en la inmensa mayor\u00eda de los casos: una estructura jer\u00e1rquica con carpetas y ficheros.</p> <p></p> <p>Ahora bien, en realidad, la capacidad de operar con el sistema de archivos no es exclusiva de la interfaz ofrecida por el sistema operativo. Muchos lenguajes de programaci\u00f3n proporcionan bibliotecas que permiten acceder directamente a los mecanismos internos que ofrece el sistema, por lo que es posible crear c\u00f3digo fuente desde el que, con las instrucciones adecuadas, se pueden realizar operaciones t\u00edpicas de un explorador de archivos. De hecho, las interfaces como un explorador de archivos son un programa como cualquier otro, el cual, usando precisamente estas librer\u00edas, permite que el usuario gestione archivos f\u00e1cilmente. Pero es habitual encontrar otras aplicaciones con su propia interfaz para gestionar archivos, aunque solo sea para poder seleccionar qu\u00e9 hay que cargar o guardar en un momento dado: editores de texto, compresores, reproductores de m\u00fasica, etc.</p>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#11-flujos","title":"1.1. Flujos","text":"<p>En Kotlin, heredado de Java, se define la abstracci\u00f3n de stream (flujo) para tratar la comunicaci\u00f3n de informaci\u00f3n entre el programa y el exterior.</p> <p></p> <p>Las caracter\u00edsticas principales:    </p> <ul> <li>Entre una fuente y un destino fluye una secuencia de datos.</li> <li>Los flujos act\u00faan como interfaz con el dispositivo o clase asociada. Es decir, todo se trata como un flujo de datos.</li> <li>Las operaciones que se realizan son independientes del tipo de datos y del dispositivo: <code>Open, Close, Read, Write</code>.</li> <li>El uso de flujos proporciona mayor flexibilidad (p.e. redirecci\u00f3n, combinaci\u00f3n)</li> <li>El uso de flujos proporciona mayor diversidad de dispositivos (ficheros, entrada/salida est\u00e1ndar: teclado y pantalla, sockets en red, \u2026). Todo se maneja como un flujo de datos.</li> <li>El uso de flujos proporciona modos de acceso: secuencial, aleatorio.</li> <li>El uso de flujos proporciona intercambio de informaci\u00f3n en diferentes formatos: caracteres de texto, binario, objetos.</li> </ul>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#12-entradasalida-estandar","title":"1.2. Entrada/Salida est\u00e1ndar","text":"<p>Como en los sistemas Unix, existen 3 interfaces b\u00e1sicas para leer/escribir informaci\u00f3n:</p> <p></p> <ul> <li>Entrada est\u00e1ndar - habitualmente el teclado   </li> <li>Salida est\u00e1ndar - habitualmente la consola   </li> <li>Salida de error - habitualmente la consola   </li> </ul> <p>En Java se accede a la E/S est\u00e1ndar a trav\u00e9s de campos est\u00e1ticos de la clase <code>java.lang.System</code></p> <ul> <li><code>System.in</code> implementa la entrada est\u00e1ndar    </li> <li><code>System.out</code> implementa la salida est\u00e1ndar    </li> <li><code>System.err</code> implementa la salida de error    </li> </ul>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#13-apis-para-el-manejo-de-flujos-de-datos","title":"1.3. APIs para el manejo de flujos de datos","text":"<p>Kotlin no es ninguna excepci\u00f3n, y ofrece este tipo de biblioteca en forma del conjunto de clases dentro del <code>Package kotlin.io</code> (IO API for working with files and streams). En java, lo podemos encontrar en <code>package java.io</code>.   </p> <p></p> <p>Mediante la invocaci\u00f3n de los m\u00e9todos adecuados definidos en estas clases es posible llevar a cabo pr\u00e1cticamente cualquier tarea sobre el sistema de archivos.</p>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#fuente","title":"Fuente","text":"<ul> <li>Entra y salida</li> </ul>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/","title":"UD 7 - 7.2 Consola y teclado","text":"","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#72-lectura-y-escritura-en-entrada-y-salida-estandar","title":"7.2. Lectura y escritura en entrada y salida est\u00e1ndar","text":"<p>Dentro de la biblioteca est\u00e1ndar de Kotlin, el paquete <code>kotlin.io</code> proporciona elementos esenciales para trabajar con los flujos de entrada y salida est\u00e1ndar (Input/Output o I/O). Esta transmisi\u00f3n de informaci\u00f3n entre la memoria principal y los dispositivos de entrada y salida permite, entre otras cosas, leer y escribir datos.</p> <p>Vamos a ver c\u00f3mo se transfieren datos de entrada y salida en consola (el paquete <code>kotlin.io</code> tambi\u00e9n proporciona herramientas para trabajar con archivos, como veremos mas adelante), lo que es \u00fatil para mostrar una informaci\u00f3n en pantalla y para obtener informaci\u00f3n aportada por el usuario, habitualmente a trav\u00e9s de un dispositivo de entrada como el teclado.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#1-entrada-y-salida-estandar","title":"1. Entrada y salida est\u00e1ndar","text":"<p>A continuaci\u00f3n se muestra un esquema de las interfaces b\u00e1sicas para leer/escribir informaci\u00f3n:</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#11-output-escribir-en-consola","title":"1.1 Output: Escribir en consola","text":"<p>Como ya hemos visto en multitud de ejemplos previos durante el curso, para enviar un mensaje a la salida est\u00e1ndar (la pantalla) usamos habitualmente las funciones <code>print()</code> y <code>println()</code>, que se diferencian en que la segunda incluye un salto de l\u00ednea al final. Este salto de l\u00ednea es reproducible a trav\u00e9s del caracter especial <code>\\n</code>, de la siguiente forma <code>print(\"\\n\")</code></p> <pre><code>fun main(args: Array&lt;String&gt;) {\n    println(\"1. println \")\n    println(\"2. println \")\n\n    print(\"1. print \")\n    print(\"2. print \")\n}\n</code></pre> <p>El programa anterior obtiene este resultado:</p> <pre><code>1. println \n2. println \n1. print 2. print\n</code></pre> <p>Podemos a\u00f1adir un salto de l\u00ednea en la funci\u00f3n <code>print</code> (aunque para eso ya tenemos a <code>println</code>):</p> <pre><code>print(\"Funci\u00f3n print con salto de l\u00ednea\\n\")\n</code></pre> <p>Un ejemplo que utiliza la funci\u00f3n println para mostrar valores en consola:</p> <pre><code>val numero = 12.3\nprintln(\"numero\")               // numero\nprintln(numero)                 // 12.3\nprintln(\"$numero\")              // 12.3\nprintln(\"numero = $numero\")     // numero = 12.3\nprintln(\"${numero + numero}\")   // 24.6\nprintln(12.3)                   // 12.3\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#12-input-lectura-de-datos-en-consola","title":"1.2. Input: Lectura de datos en consola","text":"<p>Para la lectura de datos por teclado utilizamos la funci\u00f3n <code>readLine</code> y <code>readLn</code> (otra opci\u00f3n que no vamos a ver ahora es utilizar la clase <code>Scanner</code> importada desde la librer\u00eda est\u00e1ndar de Java con <code>import java.util.Scanner</code>):</p> <pre><code>fun main(args: Array&lt;String&gt;) {\n    print(\"Tu nombre: \")\n    val nombre = readLine()\n    println(\"Hola $nombre\")\n}\n</code></pre> <p>La funci\u00f3n <code>readLine()</code> convierte la entrada en un <code>String</code> (realmente devuelve un <code>String?</code> puesto que puede ser nulo) aunque es posible tomar la entrada y convertirla a otro tipo expl\u00edcitamente:</p> <pre><code>print(\"Nombre: \")\nval nombre = readLine()\nprint(\"Edad: \")\nval edad = Integer.valueOf(readLine()) // cuidad\u00edn!!   \nprintln(\"Tu nombre es $nombre y tienes $edad a\u00f1os.\")\n</code></pre> <p>El programa anterior funcionar\u00e1 bien mientras el usuario introduzca un entero como valor de edad, pero en caso contrario saltar\u00e1 un excepci\u00f3n durante la ejecuci\u00f3n (<code>NumberFormatException</code>). Una primera soluci\u00f3n podr\u00eda pasar por el uso del manejo de excepciones (que veremos en posteriores entradas) para capturar los casos problem\u00e1ticos:</p> <pre><code>print(\"Nombre: \")\nval nombre = readLine()\nprint(\"Edad: \")\ntry {\n    val edad = Integer.valueOf(readLine())\n    println(\"Tu nombre es $nombre y tienes $edad a\u00f1os.\")\n} catch (ex: NumberFormatException) {\n    println(\"Edad no v\u00e1lida\")\n}\n</code></pre> <p>A veces se pueden ver ejemplos de c\u00f3digo que intentan resolver este problema con el operador de aserci\u00f3n <code>!!</code> (revisar Gesti\u00f3n de tipos nulos en Kotlin), y de esta manera se le avisa al compilador que conf\u00ede que la funci\u00f3n <code>readLine</code> siempre retornar\u00e1 un <code>String</code>, pero en general no es una buena manera de validar la entrada de datos.</p> <pre><code>val num: Int\nprint(\"Introduce un n\u00famero entero: \")\nnum = readLine()!!.toInt() // prometemos algo que no podemos cumplir\nprintln(num)\n</code></pre> <p>A pesar de la pretendida seguridad del operador <code>!!</code>, seguimos sin escapar del <code>NumberFormatException</code>. Recuerda que adem\u00e1s de la funci\u00f3n <code>toInt()</code> tambi\u00e9n existen las funciones <code>toFloat()</code>, <code>toDouble()</code>, <code>toLong()</code>, <code>toShort()</code> y <code>toByte()</code> para la conversi\u00f3n de tipos (ver Tipos b\u00e1sicos de datos).</p> <p>Existen distintas formas de resolver \u00e9ste y otros problemas similares respecto a la entrada de datos por parte del usuario. Algunas soluciones pasan por combinar la funci\u00f3n <code>readLine</code> con el operador de llamada segura <code>?</code> y con la expresi\u00f3n <code>try</code> para devolver un valor (otras soluciones tambi\u00e9n utilizan el operador <code>as</code> que vimos en comprobaci\u00f3n y conversi\u00f3n de tipos con <code>is</code> y <code>as</code>). Un ejemplo:</p> <pre><code>val num: Int?\nprint(\"Introduce un n\u00famero entero: \")\nnum = try {\n    readLine()?.toInt()\n} catch (ex: NumberFormatException) {\n    null\n}\nif (num != null) {\n    println(\"El n\u00famero es: $num\")\n} else {\n    println(\"\u00a1Eso no es un n\u00famero entero!\")\n}\n</code></pre> <p>En este ejemplo el valor introducido es asignado a la variable anulable <code>num</code>, cuyo valor depende de que se procese el contenido de la expresi\u00f3n <code>try</code> (cuando se ingresa un entero) o de que, en caso contrario, se produzca un <code>NumberFormatException</code> que es capturado por <code>catch</code>, que retorna <code>null</code> que es asignado a la variable <code>num</code>.</p> <p>Pero podemos mejorarla prescindiendo de <code>try..catch</code> y sustituyendo la funci\u00f3n <code>toInt</code> por la funci\u00f3n <code>toIntOrNull</code>:</p> <pre><code>val num: Int?\nprint(\"Introduce un n\u00famero entero: \")\nnum = readLine()?.toIntOrNull()\nif (num != null) {\n    println(\"El n\u00famero es: $num\")\n} else {\n    println(\"\u00a1Eso no es un n\u00famero entero!\")\n}\n</code></pre> <p>En el ejemplo anterior llamamos a <code>readLine</code> con el operador <code>?</code> para realizar la conversi\u00f3n con <code>toIntOrNul</code> de forma segura. La funci\u00f3n <code>toIntOrNull()</code> requiere que la variable sea de tipo anulable (<code>val num: Int?</code>) porque si la conversi\u00f3n a entero falla, se retorna null, que es asignado a <code>num</code>. Igualmente contamos con las funciones <code>toFloatOrNull()</code>, <code>toDoubleOrNull()</code>, <code>toLongOrNull()</code>, <code>toShortOrNull()</code> y <code>toByteOrNull()</code> que en caso de no poder realizar la conversi\u00f3n de tipos devuelven <code>null</code>.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#13-mejorando-las-funciones","title":"1.3. Mejorando las funciones","text":"<p>Aqu\u00ed hay un grupo extendido (inspirado en el art\u00edculo) de funciones de ayuda para leer todos los tipos posibles, listas, arrays, arrays 2D, etc.:</p> <pre><code>// private fun readln() = readLine()!! //Ya disponib le en la versi\u00f3n 1.6\nprivate fun readlnByte() = readln().toByte()\nprivate fun readlnShort() = readln().toShort()\nprivate fun readlnInt() = readln().toInt()\nprivate fun readlnLong() = readln().toLong()\nprivate fun readlnFloat() = readln().toFloat()\nprivate fun readlnDouble() = readln().toDouble()\nprivate fun readlnBigInt(radix: Int = 10) = readln().toBigInteger(radix)\nprivate fun readlnBigDecimal() = readln().toBigDecimal()\n\nprivate fun lineSequence(limit: Int = Int.MAX_VALUE) = generateSequence { readLine() }.constrainOnce().take(limit)\nprivate fun readlnStrings() = readln().split(' ')\nprivate fun readlnBytes() = readlnStrings().map { it.toByte() }\nprivate fun readlnShorts() = readlnStrings().map { it.toShort() }\nprivate fun readlnInts() = readlnStrings().map { it.toInt() }\nprivate fun readlnLongs() = readlnStrings().map { it.toLong() }\nprivate fun readlnFloats() = readlnStrings().map { it.toFloat() }\nprivate fun readlnDoubles() = readlnStrings().map { it.toDouble() }\n\nprivate fun readByteArray() = readlnStrings().run { ByteArray(size) { get(it).toByte() } }\nprivate fun readShortArray() = readlnStrings().run { ShortArray(size) { get(it).toShort() } }\nprivate fun readIntArray() = readlnStrings().run { IntArray(size) { get(it).toInt() } }\nprivate fun readLongArray() = readlnStrings().run { LongArray(size) { get(it).toLong() } }\nprivate fun readFloatArray() = readlnStrings().run { FloatArray(size) { get(it).toFloat() } }\nprivate fun readDoubleArray() = readlnStrings().run { DoubleArray(size) { get(it).toDouble() } }\n\nprivate fun readlnByteArray(n: Int) = ByteArray(n) { readlnByte() }\nprivate fun readlnShortArray(n: Int) = ShortArray(n) { readlnShort() }\nprivate fun readlnIntArray(n: Int) = IntArray(n) { readlnInt() }\nprivate fun readlnLongArray(n: Int) = LongArray(n) { readlnLong() }\nprivate fun readlnFloatArray(n: Int) = FloatArray(n) { readlnFloat() }\nprivate fun readlnDoubleArray(n: Int) = DoubleArray(n) { readlnDouble() }\n\nprivate fun readByteArray2d(rows: Int, cols: Int) = Array(rows) { readByteArray().also { require(it.size == cols) } }\nprivate fun readShortArray2d(rows: Int, cols: Int) = Array(rows) { readShortArray().also { require(it.size == cols) } }\nprivate fun readLongArray2d(rows: Int, cols: Int) = Array(rows) { readLongArray().also { require(it.size == cols) } }\nprivate fun readIntArray2d(rows: Int, cols: Int) = Array(rows) { readIntArray().also { require(it.size == cols) } }\nprivate fun readFloatArray2d(rows: Int, cols: Int) = Array(rows) { readFloatArray().also { require(it.size == cols) } }\nprivate fun readDoubleArray2d(rows: Int, cols: Int) =\n    Array(rows) { readDoubleArray().also { require(it.size == cols) } }\n\nprivate fun isWhiteSpace(c: Char) = c in \" \\r\\n\\t\"\n\n// JVM-only targeting code follows next\n\n// readString() via sequence is still slightly faster than Scanner\nprivate fun readString() = generateSequence { System.`in`.read().toChar() }\n    .dropWhile { isWhiteSpace(it) }.takeWhile { !isWhiteSpace(it) }.joinToString(\"\")\nprivate fun readByte() = readString().toByte()\nprivate fun readShort() = readString().toShort()\nprivate fun readInt() = readString().toInt()\nprivate fun readLong() = readString().toLong()\nprivate fun readFloat() = readString().toFloat()\nprivate fun readDouble() = readString().toDouble()\nprivate fun readBigInt(radix: Int = 10) = readString().toBigInteger(radix)\nprivate fun readBigDecimal() = readString().toBigDecimal()\n\nprivate fun readBytes(n: Int) = generateSequence { readByte() }.take(n)\nprivate fun readShorts(n: Int) = generateSequence { readShort() }.take(n)\nprivate fun readInts(n: Int) = generateSequence { readInt() }.take(n)\nprivate fun readLongs(n: Int) = generateSequence { readLong() }.take(n)\nprivate fun readFloats(n: Int) = generateSequence { readFloat() }.take(n)\nprivate fun readDoubles(n: Int) = generateSequence { readDouble() }.take(n)\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#14-aplicando-formato-a-la-salida-estandar","title":"1.4. Aplicando formato a la salida est\u00e1ndar","text":"<p>A continuaci\u00f3n veremos como aplicar formato a las cadenas que se imprimen en salida estandar. La explicaci\u00f3n esta hecha en Kotlin pero en Java aplica pr\u00e1cticamente lo mismo.</p> <p>En Kotlin (Y la mayor\u00eda de los lenguajes de programaci\u00f3n) podemos utilizar formatos para reemplazar variables dentro de los String, supongamos que queremos imprimir nuestro nombre, edad y peso, podr\u00edamos hacer algo as\u00ed</p> <pre><code>val name: String = \"Walter White\"\nval age: Int = 50\nval weight: Double = 75.5\n\nval description = \"Me llamo \" + name + \", tengo \" + age + \" a\u00f1os y peso \" + weight + \" kg.\"\nprintln(description)\n\n// O mejor a\u00fan, en Kotlin podemos hacer esto\nval description = \"Me llamo $name, tengo $age a\u00f1os y peso $weight kg\"\nprintln(description)\n\n// Ahora, si usamos el String format\nval description = String.format(\"Me llamo %s, tengo %d a\u00f1os y peso %.2f kg\", name, age, weight)\nprintln(description)\n</code></pre> <p>Las 3 soluciones son correctas e imprimen lo mismo, pero la tercera es la m\u00e1s \u00fatil al usar <code>Strings</code> donde tendr\u00e1s que reemplazar variables porque te ayuda a tener c\u00f3digo m\u00e1s limpio y soportar diferentes idiomas.</p> <p>Si observas en la \u00faltima opci\u00f3n, lo que hacemos es poner ciertos formatos dentro del <code>String</code> y luego al final, separados por coma, ponemos las variables que queremos que se reemplacen en el <code>String</code>: <code>%s</code> para otros strings como <code>name</code>, <code>%d</code> para enteros como <code>age</code> y <code>%f</code> para <code>doubles</code> y <code>floats</code>, en el <code>.2</code> que ves en el <code>%f</code> el <code>2</code> es la cantidad de decimales que queremos que se impriman, as\u00ed por ejemplo en este caso se imprimir\u00eda el peso como <code>75.50</code>.</p> <p>Aqu\u00ed te dejo una tabla con los formatos m\u00e1s comunes, tambi\u00e9n pueden ser usados en Java:</p> Formato Tipo de**dato** %b Boolean %c Char %d Integer %e Float en notaci\u00f3n cient\u00edfica %f Float y Double (Agrega %**.n**f para forzar n decimales) %o Formato Octal %s Strings %x Formato Hexadecimal <p>Hay otros 3 o 4 formatos m\u00e1s pero son tan poco usuales que si los necesitas prefiero que los consultes tu en la documentaci\u00f3n.</p> <p>\u00bfQu\u00e9 muestra como salida el siguiente c\u00f3digo?</p> <pre><code> val str1 = String.format(\"%d\", 404) // Integer value  \nval str2 = String.format(\"%s\", \"Mehmet\") // String value  \nval str3 = String.format(\"%f\", 404.00) // Float value  \nval str4 = String.format(\"%x\", 404) // Hexadecimal value  \nval str5 = String.format(\"%c\", 'c') // Char value  \nprintln(str1)\nprintln(str2)\nprintln(str3)\nprintln(str4)\nprintln(str5)\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#15-ejemplo","title":"1.5. Ejemplo","text":"<p>Para mostrar una salida a consola tabulada que incluya fecha y hora, cantidades con tres decimales y texto, puedes aprovechar las capacidades de formateo de cadenas en Kotlin. Utilizar\u00e9 el formato de <code>String</code> con la funci\u00f3n <code>format</code> para lograr un alineamiento y formato adecuados para cada tipo de dato.</p> <p>Aqu\u00ed tienes un ejemplo en el que definimos una clase <code>Registro</code> para almacenar la informaci\u00f3n relevante y luego mostramos una lista de estos registros con el formato deseado:</p> <p><pre><code>import java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\n\ndata class Registro(val fechaHora: LocalDateTime, val cantidad: Double, val texto: String)\n\nfun main() {\n// Lista de registros para el ejemplo\nval registros = listOf(\nRegistro(LocalDateTime.now(), 1234.567, \"Texto de ejemplo 1\"),\nRegistro(LocalDateTime.now().minusDays(1), 89.1011, \"Texto de ejemplo 2\"),\nRegistro(LocalDateTime.now().minusHours(5), 12.345, \"Otro texto de ejemplo\")\n)\n\n    // Encabezado\n    println(\"Fecha y Hora         |   Cantidad | Texto\")\n    println(\"-------------------------------------------------------------\")\n\n    // Formato para fecha y hora\n    val formatoFechaHora = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")\n\n    // Imprimir cada registro con formato\n    registros.forEach { registro -&gt;\n        val fechaHora = registro.fechaHora.format(formatoFechaHora)\n        // Asegurando que la cantidad est\u00e9 justificada a la derecha con 10 caracteres de ancho\n        val cantidad = \"%10.3f\".format(registro.cantidad)\n        val texto = registro.texto\n        println(\"%-20s | %10s | %s\".format(fechaHora, cantidad, texto))\n    }\n}\n</code></pre> El c\u00f3digo anterior est\u00e1 dise\u00f1ado para trabajar con una lista de registros, cada uno representando datos que incluyen una fecha y hora, una cantidad num\u00e9rica y un texto. Vamos a desglosar y explicar cada parte relevante del c\u00f3digo:</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#151-formato-para-fecha-y-hora","title":"1.5.1. Formato para Fecha y Hora","text":"<pre><code>val formatoFechaHora = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")\n</code></pre> <p>Esta l\u00ednea crea un <code>DateTimeFormatter</code> con un patr\u00f3n espec\u00edfico. El patr\u00f3n <code>\"yyyy-MM-dd HH:mm\"</code> indica c\u00f3mo se debe formatear la fecha y hora:</p> <ul> <li><code>yyyy</code>: A\u00f1o completo.</li> <li><code>MM</code>: Mes en n\u00famero con dos d\u00edgitos.</li> <li><code>dd</code>: D\u00eda del mes con dos d\u00edgitos.</li> <li><code>HH</code>: Hora del d\u00eda (formato de 24 horas) con dos d\u00edgitos.</li> <li><code>mm</code>: Minuto de la hora con dos d\u00edgitos.</li> </ul> <p>Este formateador se utilizar\u00e1 para convertir objetos <code>LocalDateTime</code> a <code>String</code>, representando la fecha y hora en el formato especificado.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#152-iteracion-y-formateo-de-registros","title":"1.5.2. Iteraci\u00f3n y Formateo de Registros","text":"<pre><code>registros.forEach { registro -&gt;\n    val fechaHora = registro.fechaHora.format(formatoFechaHora)\n    val cantidad = \"%10.3f\".format(registro.cantidad)\n    val texto = registro.texto\n    println(\"%-20s | %10s | %s\".format(fechaHora, cantidad, texto))\n}\n</code></pre> <p>Esta secci\u00f3n del c\u00f3digo itera sobre cada <code>registro</code> en la lista <code>registros</code> y realiza las siguientes operaciones para cada uno:</p> <ol> <li> <p>Formateo de Fecha y Hora:     <pre><code>val fechaHora = registro.fechaHora.format(formatoFechaHora)\n</code></pre>    Aqu\u00ed, <code>registro.fechaHora.format(formatoFechaHora)</code> formatea el <code>LocalDateTime</code> de <code>registro</code> usando el <code>DateTimeFormatter</code> creado previamente. El resultado es una cadena (<code>String</code>) que representa la fecha y hora del registro en el formato definido (<code>\"yyyy-MM-dd HH:mm\"</code>).</p> </li> <li> <p>Formateo de la Cantidad:     <pre><code>val cantidad = \"%10.3f\".format(registro.cantidad)\n</code></pre>    Se formatea la <code>cantidad</code> num\u00e9rica del registro a una cadena con tres decimales (<code>%.3f</code>) y se asegura que tenga un ancho total de 10 caracteres, justificando el n\u00famero a la derecha. Esto significa que si el n\u00famero no ocupa los 10 caracteres, se a\u00f1adir\u00e1n espacios a la izquierda para cumplir con el ancho especificado.</p> </li> <li> <p>Preparaci\u00f3n del Texto:     <pre><code>val texto = registro.texto\n</code></pre>    Simplemente asigna el texto del registro a la variable <code>texto</code>, sin realizar ninguna transformaci\u00f3n o formateo adicional.</p> </li> <li> <p>Impresi\u00f3n con Formato:     <pre><code>println(\"%-20s | %10s | %s\".format(fechaHora, cantidad, texto))\n</code></pre>    Finalmente, se imprime una l\u00ednea para el registro actual, combinando <code>fechaHora</code>, <code>cantidad</code> y <code>texto</code> con un formato espec\u00edfico:</p> <ul> <li><code>%-20s</code> asegura que <code>fechaHora</code> tenga un ancho de 20 caracteres y est\u00e9 justificada a la izquierda.</li> <li><code>%10s</code> es para <code>cantidad</code>, la cual ya se formate\u00f3 para tener un ancho de 10 caracteres y justificada a la derecha.</li> <li><code>%s</code> para <code>texto</code>, que se imprimir\u00e1 tal cual sin un ancho fijo.</li> </ul> </li> </ol> <p>Esto resulta en una salida tabulada donde cada columna tiene un ancho fijo y los datos est\u00e1n alineados seg\u00fan lo especificado, facilitando la lectura y la comparaci\u00f3n de los registros.</p> <pre><code>Fecha y Hora         |   Cantidad | Texto\n-------------------------------------------------------------\n2024-03-30 00:30     |   1234.567 | Texto de ejemplo 1\n2024-03-29 00:30     |     89.101 | Texto de ejemplo 2\n2024-03-29 19:30     |     12.345 | Otro texto de ejemplo\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#2-otras-bibliotecas","title":"2. Otras Bibliotecas","text":"<p>Existen bibliotecas que intentan solucionar alguna necesidad que han encontrado en sus desarrollos. Algunas de ellas para trabajar con la consola:  - KFormat  - Mordant  - clikt  - kotlinx-cli </p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#21-kotlin-console-output-formatting","title":"2.1. Kotlin Console Output Formatting","text":"<p>KFormat es una peque\u00f1a biblioteca de Kotlin para la salida de texto con formato, como por ejemplo la impresi\u00f3n de valores en una tabla estructurada. Los casos de uso t\u00edpicos incluyen el desarrollo de herramientas CLI. (Command Line Interface)</p> <p>Un ejemplo: Dar formato a una tabla, incluido el cambio de tama\u00f1o de celda:</p> <pre><code>table {\n    header(\"A\", \"B\", \"C\", \"Long_Header\")\n\n    row(10, \"b...1\", 2.1f, \"foo\")\n    row(20, \"b2\", 1 / 3f, \"bar\")\n\n    hints {\n        alignment(\"A\", Hints.Alignment.LEFT)\n        precision(\"C\", 2)\n        postfix(\"C\", \"%\")\n        borderStyle = Table.BorderStyle.SINGLE_LINE // or NONE\n    }\n}.render(StringBuilder())\n</code></pre> <p>Genera la siguiente salida:</p> <pre><code>A  |     B |     C | Long_Header\n---|-------|-------|------------\n10 | b...1 | 2.10% |         foo\n20 |    b2 | 0.33% |         bar\n</code></pre> <p>Mordant es otra biblioteca que proporciona una API para dar formato a la salida de texto en la consola. Permite dar formato a texto en la consola, como colores, negritas, cursivas, subrayados, etc.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#22-kotlin-command-line-arguments","title":"2.2. Kotlin Command-Line Arguments","text":"<p>En Kotlin, los argumentos de la l\u00ednea de comandos se pasan a trav\u00e9s de la funci\u00f3n <code>main()</code>. En este apartado veremos c\u00f3mo leer y procesar los argumentos de la l\u00ednea de comandos en Kotlin.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#221-linea-de-comandos-en-main","title":"2.2.1. L\u00ednea de comandos en <code>Main</code>","text":"<p>Al invocar un programa desde la l\u00ednea de comandos, puedes pasarle un n\u00famero variable de argumentos. Por ej: <code>&gt; tar -vzf file.tar.gz</code></p> <p>Para capturar los argumentos de la l\u00ednea de comandos, debes proporcionar un par\u00e1metro predefinido a <code>main()</code>:</p> <pre><code>// MainArgs.kt\n\nfun main (args: Array &lt; String &gt;) {\n   for (a in args) {\n    imprimir (a)\n  }\n}\n</code></pre> <p>El par\u00e1metro se llama tradicionalmente <code>args</code> aunque puede llamarlo de cualquier manera, y el tipo de <code>args</code> solo puede ser <code>Array&lt;String&gt;</code> (Array of String).</p> <p>Tambi\u00e9n se puede usar el compilador kotlinc para crear un programa que se ejecuta desde l\u00ednea de comandos.</p> <p>Una vez que haya creado y guardado y compilado el c\u00f3digo para un programa llamado <code>MainArgs.kt</code>, escriba lo siguiente en el s\u00edmbolo del sistema:</p> <pre><code>&gt; kotlinc MainArgsKt\n</code></pre> <p>Puedes proporcionar los argumentos de la l\u00ednea de comandos despu\u00e9s de la invocaci\u00f3n del programa, as\u00ed:</p> <p><pre><code>&gt; kotlin MainArgsKt aaa 42 3.14159.\n</code></pre> Y por salida estandar, saldr\u00e1 lo siguiente:</p> <pre><code>aaa\n42\n3.14159\n</code></pre> <p>Si una vez le\u00eddos los par\u015bmetros quieres convertir un par\u00e1metro <code>String</code> en un tipo espec\u00edfico, Kotlin proporciona funciones de conversi\u00f3n, como<code>toInt()</code> para convertir a <code>Int</code> y <code>toFloat()</code> para convertir a <code>Float</code>...</p> <p>El uso de estos m\u00e9todos supone que los argumentos de la l\u00ednea de comandos aparecen en un orden particular.</p> <p>Por ejemplo, en el siguiente c\u00f3digo, el programa espera un <code>String</code>, seguido de algo convertible a <code>Int</code>, seguido de algo convertible a <code>Float</code>:</p> <pre><code>// MainArgConversion.kt`\n\nfun main (args: Array &lt; String &gt;) {\n   if (args.size &lt; 3) return \n    val primero = args[0]\n    val segundo = args[1].toInt ()\n    val tercero = args[2].toFloat ()\n    println( \"$primero $segundo $tercero\" )\n}\n</code></pre> <p>La primera l\u00ednea de <code>main()</code> cierra el programa si no hay suficientes argumentos.</p> <p>Si no proporciona algo convertible a <code>Int</code> y <code>Float</code> como segundo y tercer argumento de la l\u00ednea de comandos, ver\u00e1 errores de tiempo de ejecuci\u00f3n.</p> <p>Si compilas y ejecutas <code>MainArgConversion.kt</code> con los mismos argumentos de l\u00ednea de comandos que usamos antes, ver\u00e1s la siguiente salida:</p> <pre><code>aaa 42 3.14159\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#actividad-1-bibliotecas-para-formateo-de-salida-adaptando-el-codigo-del-15-ejemplo","title":"Actividad 1: Bibliotecas para formateo de salida: Adaptando el c\u00f3digo del 1.5. Ejemplo","text":"<p>Pregunta: \u00bfC\u00f3mo harias el ejemplo 1.5 utilizando las bibliotecas  KFormat y Mordant?</p> <p>Visita las paginas web de las bibliotecas y investiga como usarlas para realizar la misma tabla que se muestra en el ejemplo 1.5.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#222-bibliotecas-para-manejar-argumentos-de-la-linea-de-comandos","title":"2.2.2. Bibliotecas para manejar argumentos de la l\u00ednea de comandos","text":"<p>clikt y kotlinx-cli son dos bibliotecas que facilitan el manejo de los argumentos que facilita el parseo y procesado de los argumentos que se le pasan al programa. Aunque podemos realizarlo nosotros mismos.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#actividad-2-bibliotecas-para-parseo-de-parametros-de-entrada-adaptando-el-codigo-del-15-ejemplo","title":"Actividad 2: Bibliotecas para parseo de par\u00e1metros de entrada: Adaptando el c\u00f3digo del 1.5. Ejemplo","text":"<p>Pregunta: Imag\u00ednate que quieres poder indicarle a tu programa, que use una de las 3 posibles implementaciones de la tabla \u00bfC\u00f3mo lo har\u00edas haciendo uso de - clikt o kotlinx-cli?</p> <p>Visita las p\u00e1ginas web de las bibliotecas y investiga como usarlas para poder indicarle a trav\u00e9s de l\u00ednea de comandos que versi\u00f3n de la tabla quieres que se muestre.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#fuente","title":"Fuente","text":"<ul> <li>Formatos de String en Kotlin </li> <li>Kotlin String Formatting </li> <li>Format </li> <li>Add padding to a string in Kotlin </li> <li>padStart </li> <li>IO Entra y salida de datos en consola </li> <li>Kotlin command line arguments </li> </ul>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/","title":"UD 7 - 7.2 Consola y teclado","text":"","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#721-lectura-de-datos-desde-teclado-en-kotlin","title":"7.2.1  Lectura de Datos desde Teclado en Kotlin","text":"<p>En Kotlin, la captura y manejo de datos introducidos por el usuario se realiza de manera eficiente y segura. </p> <p>A diferencia de Java, Kotlin ofrece un mecanismo simplificado para leer datos del teclado a trav\u00e9s de la funci\u00f3n <code>readLine()</code>. Esta funci\u00f3n es parte de la biblioteca est\u00e1ndar de Kotlin y devuelve un valor de tipo <code>String?</code>, lo que indica que el resultado puede ser una cadena de texto o un valor nulo (<code>null</code>).</p> <p>La lectura de datos desde el teclado es una tarea com\u00fan en aplicaciones de consola, donde se requiere interactuar con el usuario solicitando y procesando su entrada. Kotlin maneja esta tarea de forma concisa, pero poderosa, permitiendo el manejo de diferentes tipos de datos con facilidad y seguridad.</p> <p>Para realizar la lectura de datos desde el teclado en Kotlin, se emplea la siguiente sintaxis b\u00e1sica:</p> <pre><code>fun main() {\n    println(\"Introduce un dato:\")\n    val dato: String? = readLine()\n    println(\"Dato introducido: $dato\")\n}\n</code></pre> <p>Este enfoque b\u00e1sico se puede expandir para leer diferentes tipos de datos, como n\u00fameros enteros, decimales, entre otros, mediante la conversi\u00f3n del texto le\u00eddo a los tipos de datos deseados. Es importante destacar que, al trabajar con <code>readLine()</code>, siempre debemos considerar la posibilidad de que el resultado sea <code>null</code>, especialmente si se espera realizar conversiones de tipo.</p> <p>En los siguientes puntos, exploraremos c\u00f3mo leer tipos espec\u00edficos de datos desde el teclado y c\u00f3mo utilizar <code>readLine()</code> y <code>readln()</code> en conjunci\u00f3n con conversiones de tipo para manejar entradas num\u00e9ricas y otros tipos de datos de manera segura en Kotlin.</p> <p>Este marco general proporciona la base para entender c\u00f3mo Kotlin facilita la interacci\u00f3n con el usuario a trav\u00e9s de la entrada de datos en aplicaciones de consola, manteniendo al mismo tiempo las pr\u00e1cticas de seguridad de tipo que son fundamentales en Kotlin.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#1-lectura-de-texto-en-kotlin","title":"1. Lectura de Texto en Kotlin","text":"<p>La lectura de texto del usuario es una tarea com\u00fan en muchas aplicaciones de consola. Kotlin simplifica esta operaci\u00f3n con el uso de la funci\u00f3n <code>readLine()</code>, que lee una l\u00ednea completa de entrada hasta que se encuentra un salto de l\u00ednea (por ejemplo, cuando el usuario presiona Enter). Esta funci\u00f3n devuelve un <code>String?</code>, lo que significa que el resultado puede ser una cadena de caracteres o un valor nulo (<code>null</code>). Esto \u00faltimo ocurre si se alcanza el final del flujo de entrada sin leer ning\u00fan dato.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#11-ejemplo-basico-de-lectura-de-texto","title":"1.1. Ejemplo B\u00e1sico de Lectura de Texto:","text":"<pre><code>fun main() {\n    println(\"Por favor, introduce tu nombre:\")\n    val nombre: String? = readLine()\n    if (nombre != null) {\n        println(\"Hola, $nombre!\")\n    } else {\n        println(\"No se ha introducido ning\u00fan nombre.\")\n    }\n}\n</code></pre> <pre><code>fun main() {\n    println(\"Por favor, introduce tu nombre:\")\n    val nombre: String? = readLine()\n    nombre?.let { unNombre -&gt;\n        println(\"Hola, $unNombre!\")\n    } ?: println(\"No se ha introducido ning\u00fan nombre.\")\n}\n</code></pre> <p>En este ejemplo, se solicita al usuario que introduzca su nombre. Usamos <code>readLine()</code> para leer esta entrada desde el teclado. La comprobaci\u00f3n <code>if (nombre != null)</code> es necesaria porque, aunque es raro en aplicaciones interactivas, <code>readLine()</code> puede devolver <code>null</code> si no hay m\u00e1s datos para leer, se llega a <code>EOF</code> (esto podr\u00eda suceder, por ejemplo, si la entrada se redirige desde un archivo que termina).</p> <p>EOF: End of File. Fin de archivo. Acr\u00f3nimo que se usa para indicar que no hay m\u00e1s datos para leer.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#12-consideraciones-de-seguridad-tipo","title":"1.2. Consideraciones de Seguridad Tipo:","text":"<p>Dado que <code>readLine()</code> devuelve un <code>String?</code>, el manejo de <code>null</code> es una parte crucial de la lectura segura de entradas en Kotlin. Kotlin introduce el concepto de seguridad de tipo nulo en el nivel del lenguaje, lo que significa que debemos tratar expl\u00edcitamente la posibilidad de valores nulos. Esto ayuda a prevenir errores comunes como <code>NullPointerException</code> que son frecuentes en otros lenguajes de programaci\u00f3n.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#13-conversion-segura-de-tipos","title":"1.3. Conversi\u00f3n Segura de Tipos:","text":"<p>En ocasiones, adem\u00e1s de leer texto, querr\u00e1s convertir esa entrada a un tipo espec\u00edfico, como un n\u00famero. Kotlin facilita esto con funciones como <code>toIntOrNull()</code> que se puede usar en cadena con <code>readLine()</code> para una conversi\u00f3n segura:</p> <pre><code>fun main() {\n    println(\"Introduce tu edad:\")\n    val edad: Int? = readLine()?.toIntOrNull()\n    if (edad != null) {\n        println(\"Tienes $edad a\u00f1os.\")\n    } else {\n        println(\"Edad no v\u00e1lida.\")\n    }\n}\n</code></pre> <p>Este enfoque garantiza que tu programa maneje de manera segura tanto las entradas nulas como las que no son convertibles al tipo deseado, evitando as\u00ed excepciones en tiempo de ejecuci\u00f3n.</p> <p>En resumen, la lectura de texto en Kotlin es simple y segura, gracias a la funci\u00f3n <code>readLine()</code> y al sistema de tipos de Kotlin que maneja <code>null</code> de forma expl\u00edcita, evitando errores comunes en la entrada de datos.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#2-lectura-de-numeros-en-kotlin","title":"2. Lectura de N\u00fameros en Kotlin","text":"<p>La lectura de datos num\u00e9ricos desde el teclado es una tarea frecuente en aplicaciones de consola. Kotlin maneja la lectura de n\u00fameros de una manera segura y eficiente, permitiendo la conversi\u00f3n de la entrada de texto a diversos tipos num\u00e9ricos como <code>Int</code>, <code>Double</code>, <code>Float</code>, etc.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#21-ejemplo-basico-de-lectura-de-un-entero","title":"2.1. Ejemplo B\u00e1sico de Lectura de un Entero","text":"<pre><code>fun main() {\n    println(\"Introduce un n\u00famero entero:\")\n    val numero: Int? = readLine()?.toIntOrNull()\n\n    numero.?let { unNumero -&gt;\n        println(\"El n\u00famero introducido es $unNumero.\")\n    } ?: println(\"No se ha introducido un n\u00famero entero v\u00e1lido.\")\n\n}\n</code></pre> <p>Este ejemplo solicita al usuario que introduzca un n\u00famero entero. Utiliza <code>readLine()</code> para leer la entrada como texto y luego <code>toIntOrNull()</code> para intentar convertir esa entrada en un <code>Int</code>. Si la conversi\u00f3n falla (por ejemplo, si el usuario introduce texto que no se puede interpretar como un entero), <code>toIntOrNull()</code> devuelve <code>null</code>.</p> <p>Seguidamente, <code>let { unNumero -&gt; ... }</code> es una forma de ejecutar un bloque de c\u00f3digo si el valor no es nulo. En este caso, si el n\u00famero no es nulo, se imprime en la consola. De lo contrario, se muestra un mensaje de error.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#22-lectura-de-otros-tipos-numericos","title":"2.2. Lectura de Otros Tipos Num\u00e9ricos","text":"<p>De manera similar, se pueden leer otros tipos num\u00e9ricos usando las funciones de conversi\u00f3n correspondientes, como <code>toDoubleOrNull()</code> para <code>Double</code>, <code>toFloatOrNull()</code> para <code>Float</code>, etc. Estas funciones siguen el mismo patr\u00f3n que <code>toIntOrNull()</code>, proporcionando una forma segura de intentar convertir la entrada de texto en el tipo num\u00e9rico deseado.</p> <pre><code>fun main() {\n    println(\"Introduce un n\u00famero decimal:\")\n    val decimal: Double? = readLine()?.toDoubleOrNull()\n\n    if (decimal != null) {\n        println(\"El n\u00famero decimal introducido es $decimal.\")\n    } else {\n        println(\"No se ha introducido un n\u00famero decimal v\u00e1lido.\")\n    }\n}\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#23-consideraciones-importantes","title":"2.3. Consideraciones Importantes","text":"<ul> <li>Manejo de <code>null</code>: Es crucial manejar el caso de <code>null</code> al leer n\u00fameros para evitar <code>NullPointerException</code>. La utilizaci\u00f3n de <code>toIntOrNull()</code>, <code>toDoubleOrNull()</code>, etc., y verificar el resultado antes de usarlo, es una pr\u00e1ctica recomendada.</li> <li>Validaci\u00f3n de Entrada: Cuando se solicitan datos num\u00e9ricos espec\u00edficos, es importante validar la entrada para asegurarse de que cumple con los requisitos esperados (por ejemplo, un n\u00famero dentro de un rango espec\u00edfico).</li> <li>Usabilidad: Para mejorar la experiencia del usuario, considera proporcionar mensajes de error claros o instrucciones en caso de entradas inv\u00e1lidas.</li> </ul> <p>El manejo seguro y eficiente de la entrada num\u00e9rica en Kotlin ayuda a crear aplicaciones robustas y amigables para el usuario, aprovechando las ventajas del sistema de tipos de Kotlin y su tratamiento de los valores nulos.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#3-uso-de-la-clase-scanner-en-kotlin-para-la-lectura-de-datos","title":"3. Uso de la Clase Scanner en Kotlin para la Lectura de Datos","text":"<p>Aunque Kotlin proporciona <code>readLine()</code> para leer datos del teclado, en ciertos casos, cuando necesitamos leer diferentes tipos de datos de manera secuencial o realizar lecturas m\u00e1s complejas, todav\u00eda podemos beneficiarnos del uso de <code>Scanner</code> de Java. Esto demuestra la potente interoperabilidad de Kotlin con Java, permiti\u00e9ndonos acceder a todo el ecosistema de bibliotecas de Java.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#31-ejemplo-de-uso-de-scanner-en-kotlin","title":"3.1. Ejemplo de Uso de Scanner en Kotlin","text":"<p>Para utilizar <code>Scanner</code> en Kotlin, primero debemos importar la clase de Java:</p> <pre><code>import java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n\n    println(\"Introduce tu nombre:\")\n    val nombre = scanner.nextLine()\n    println(\"Hola, $nombre.\")\n\n    println(\"Introduce tu edad:\")\n    val edad = scanner.nextInt()\n    // Consumir la l\u00ednea restante despu\u00e9s de un n\u00famero entero\n    scanner.nextLine()\n\n    println(\"Introduce tu ciudad:\")\n    val ciudad = scanner.nextLine()\n\n    println(\"Tu nombre es $nombre, tienes $edad a\u00f1os y vives en $ciudad.\")\n}\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#32-detalles-importantes","title":"3.2. Detalles Importantes","text":"<ul> <li>Consumir la Nueva L\u00ednea: Despu\u00e9s de leer un dato num\u00e9rico (como <code>nextInt()</code>), es importante llamar a <code>nextLine()</code> para consumir el resto de la l\u00ednea (incluido el salto de l\u00ednea) antes de la pr\u00f3xima llamada a <code>nextLine()</code>. Si no lo hacemos, <code>nextLine()</code> podr\u00eda no funcionar como se espera, ya que leer\u00e1 el salto de l\u00ednea restante en lugar de la pr\u00f3xima entrada del usuario.</li> <li>Interoperabilidad con Java: Este ejemplo muestra c\u00f3mo Kotlin puede usar sin problemas las clases y m\u00e9todos disponibles en Java, lo que ampl\u00eda significativamente las capacidades de Kotlin al proporcionar acceso a una vasta cantidad de bibliotecas existentes.</li> <li>Manejo de Excepciones: Al igual que en Java, al usar <code>Scanner</code> en Kotlin, debemos estar conscientes de las posibles excepciones que pueden ocurrir durante la lectura de datos, especialmente cuando los tipos de datos de entrada no coinciden con lo que esperamos.</li> </ul> <p>La capacidad de utilizar <code>Scanner</code> de Java en Kotlin para leer datos del teclado es un excelente ejemplo de c\u00f3mo Kotlin no solo simplifica el desarrollo sino que tambi\u00e9n mantiene la compatibilidad con Java, permiti\u00e9ndonos elegir la herramienta m\u00e1s adecuada para cada tarea.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#4-actualizacion","title":"4. Actualizaci\u00f3n","text":"<p>En versiones recientes de Kotlin (a partir de Kotlin 1.6), se introdujo la funci\u00f3n <code>readln()</code> como una alternativa a <code>readLine()</code>. La principal diferencia entre <code>readln()</code> y <code>readLine()</code> es que <code>readln()</code> nunca devuelve <code>null</code>. Si el flujo de entrada est\u00e1ndar est\u00e1 cerrado o llega a su fin, <code>readln()</code> lanzar\u00e1 una excepci\u00f3n (<code>NoSuchElementException</code>), en lugar de devolver <code>null</code> como lo hace <code>readLine()</code>.</p> <p>Esto hace que <code>readln()</code> sea m\u00e1s conveniente para los casos en los que est\u00e1s seguro de que la entrada estar\u00e1 disponible y prefieres manejar una posible falta de entrada mediante excepciones en lugar de comprobar <code>null</code>. Esta funci\u00f3n simplifica el c\u00f3digo en muchos casos de uso, eliminando la necesidad de comprobaciones nulas expl\u00edcitas despu\u00e9s de cada llamada a <code>readLine()</code>.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#41-ejemplo-de-uso-de-readln","title":"4.1. Ejemplo de Uso de <code>readln()</code>","text":"<pre><code>fun main() {\n    println(\"Introduce tu nombre:\")\n    val nombre = readln() // No requiere comprobaci\u00f3n de null\n\n    println(\"Hola, $nombre\")\n}\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#42-ejemplo-con-conversion-de-tipo","title":"4.2. Ejemplo con Conversi\u00f3n de Tipo","text":"<p>Junto con <code>readln()</code>, Kotlin 1.6 tambi\u00e9n introdujo las funciones <code>readlnOrNull()</code> para casos en los que pueda ser aceptable recibir un <code>null</code> (aunque su uso es menos com\u00fan que <code>readln()</code>), y funciones de extensi\u00f3n como <code>toIntOrNull()</code> que pueden ser encadenadas directamente despu\u00e9s de <code>readln()</code> para la conversi\u00f3n de tipos.</p> <pre><code>fun main() {\n    println(\"Introduce tu edad:\")\n    val edad = readln().toIntOrNull() // Convierte la entrada a Int, con manejo seguro de errores\n\n    if (edad != null) {\n        println(\"Tu edad es $edad\")\n    } else {\n        println(\"No has introducido una edad v\u00e1lida.\")\n    }\n}\n</code></pre> <p>Estas adiciones a Kotlin simplifican la lectura y el manejo de la entrada del usuario, permitiendo escribir c\u00f3digo m\u00e1s claro y directo para la interacci\u00f3n con el usuario a trav\u00e9s de la consola.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#5-ejercicios-de-lectura-de-datos-en-kotlin","title":"5. Ejercicios de Lectura de Datos en Kotlin","text":"<p>Los siguientes ejercicios en Kotlin est\u00e1n dise\u00f1ados para reforzar el aprendizaje sobre la lectura de datos desde el teclado, abarcando desde la lectura de tipos de datos simples hasta el manejo de entrada m\u00e1s compleja.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#51-ejercicio-1-lectura-de-un-numero-y-calculo-de-su-cuadrado","title":"5.1. Ejercicio 1: Lectura de un N\u00famero y C\u00e1lculo de su Cuadrado","text":"<p>Este ejercicio pide al usuario que introduzca un n\u00famero entero y calcula el cuadrado de este n\u00famero.</p> <pre><code>fun main() {\n    println(\"Introduce un n\u00famero entero:\")\n    val numero = readLine()?.toIntOrNull()\n\n    if (numero != null) {\n        val cuadrado = numero * numero\n        println(\"El cuadrado de $numero es $cuadrado\")\n    } else {\n        println(\"Entrada no v\u00e1lida\")\n    }\n}\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#52-ejercicio-2-lectura-de-datos-personales","title":"5.2. Ejercicio 2: Lectura de Datos Personales","text":"<p>Solicita al usuario que introduzca su nombre, edad y pa\u00eds de origen, y luego imprime esta informaci\u00f3n en un formato estructurado.</p> <pre><code>fun main() {\n    println(\"Introduce tu nombre:\")\n    val nombre = readLine()\n    println(\"Introduce tu edad:\")\n    val edad = readLine()?.toIntOrNull()\n    println(\"Introduce tu pa\u00eds de origen:\")\n    val pais = readLine()\n\n    if (nombre != null &amp;&amp; edad != null &amp;&amp; pais != null) {\n        println(\"Nombre: $nombre, Edad: $edad, Pa\u00eds de origen: $pais\")\n    } else {\n        println(\"Alguna de las entradas es inv\u00e1lida.\")\n    }\n}\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#53-ejercicio-3-calculadora-simple","title":"5.3. Ejercicio 3: Calculadora Simple","text":"<p>Implementa una calculadora simple que lee dos n\u00fameros y un operador (+, -, *, /) desde el teclado, y muestra el resultado de la operaci\u00f3n.</p> <pre><code>import java.util.Scanner\n\nfun main() {\n    val scanner = Scanner(System.`in`)\n\n    println(\"Introduce el primer n\u00famero:\")\n    val numero1 = scanner.nextDouble()\n    println(\"Introduce el operador (+, -, *, /):\")\n    val operador = scanner.next()[0]\n    println(\"Introduce el segundo n\u00famero:\")\n    val numero2 = scanner.nextDouble()\n\n    val resultado = when (operador) {\n        '+' -&gt; numero1 + numero2\n        '-' -&gt; numero1 - numero2\n        '*' -&gt; numero1 * numero2\n        '/' -&gt; numero1 / numero2\n        else -&gt; \"Operador no v\u00e1lido\"\n    }\n\n    println(\"Resultado: $resultado\")\n}\n</code></pre> <p>Estos ejercicios cubren aspectos b\u00e1sicos de la lectura de datos en Kotlin y demuestran c\u00f3mo manejar diferentes tipos de entrada de manera efectiva. A trav\u00e9s de la pr\u00e1ctica con estos ejemplos, se puede obtener una comprensi\u00f3n s\u00f3lida de c\u00f3mo procesar la entrada del usuario en aplicaciones Kotlin.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.1.-ConsolaTecladoExpansion/#fuente","title":"Fuente","text":"<ul> <li>Kotlin Programming Language</li> <li>Kotlin Reference</li> <li>Java Scanner Class</li> <li>ReadLine Function in Kotlin </li> </ul>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/","title":"UD 7 - 7.3 Manejo de archivos: File","text":"","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#73-manejo-de-archivos-file","title":"7.3 Manejo de archivos: File","text":"<p>La clase <code>File</code> de Java y Kotlin permite manipular cualquier aspecto vinculado al sistema de archivos. Su nombre (\"archivo\", en ingl\u00e9s) es un poco enga\u00f1oso, ya que no se refiere exactamente a un archivo. Sirve para realizar operaciones tanto sobre rutas al sistema de archivos que ya existan como no existentes. Adem\u00e1s, se puede usar tanto para manipular archivos como directorios.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#1-la-clase-file","title":"1. La clase <code>File</code>","text":"<p>La pieza m\u00e1s b\u00e1sica para poder operar con archivos, independientemente de su tipo, en un programa Java es la clase <code>File</code> . Esta clase pertenece al <code>package java.io</code> de Java. Por lo tanto ser\u00e1 necesario importarla antes de poder usarla.</p> <pre><code>import java.io.File\n</code></pre> <p>Esta clase permite manipular cualquier aspecto vinculado al sistema de archivos. Su nombre (\"archivo\", en ingl\u00e9s) es un poco enga\u00f1oso, ya que no se refiere exactamente a un archivo.</p> <p> La clase <code>File</code> representa una ruta dentro del sistema de archivos</p> <p>Sirve para realizar operaciones tanto sobre rutas al sistema de archivos que ya existan como no existentes. Adem\u00e1s, se puede usar tanto para manipular archivos como directorios.</p> <p>Como cualquier otra clase hay que instanciarla para que sea posible invocar sus m\u00e9todos . El constructor de <code>File</code> recibe como argumento una cadena de texto correspondiente a la ruta sobre la que se quieren llevar a cabo las operaciones.</p> <pre><code>val ruta = \"data.txt\"\nval f = File(ruta)\n</code></pre> <p>Una ruta, path en ingl\u00e9s, es la forma general de un nombre de archivo o carpeta , por lo que identifica \u00fanicamente su localizaci\u00f3n en el sistema de archivos.</p> <p>Cada uno de los elementos de la ruta pueden existir realmente o no, pero esto no impide en modo poder inicializar File. En realidad, su comportamiento es como una declaraci\u00f3n de intenciones sobre qu\u00e9 ruta del sistema de archivos se quiere interactuar. No es hasta que se llaman los diferentes m\u00e9todos definidos en File, o hasta que se escriben o se leen datos, que realmente se accede al sistema de archivos y se procesa la informaci\u00f3n.</p> <p>Un aspecto importante a tener presente al inicializar <code>File</code> es tener siempre presente que el formato de la cadena de texto que conforma la ruta puede ser diferente seg\u00fan el sistema operativo sobre el que se ejecuta la aplicaci\u00f3n. Por ejemplo, el sistema operativo Windows inicia las rutas por un nombre de unidad (C :, D :, etc.), mientras que los sistemas operativos basados en Unix comienzan directamente con una barra (\"/\"). Adem\u00e1s, los diferentes sistemas operativos usan diferentes separadores dentro de las rutas. Por ejemplo, los sistemas Unix usan la barra (\"/\") mientras que el Windows la inversa (\"\\\").</p> <ul> <li>Ejemplo de ruta Unix: <code>/usr/bin</code></li> <li>Ejemplo de ruta Windows: <code>C:\\Windows\\System32</code></li> </ul> <p>De todos modos Java y Kotlin nos permite utilizar la barra de Unix (\"/\") para representar rutas en sistemas Windows. Por lo tanto, es posible utilizar siempre este tipo de barra independientemente del sistema, por simplicidad.</p> <p>Es importante entender que un objeto representa una \u00fanica ruta del sistema de archivos. Para operar con diferentes rutas habr\u00e1 que crear y manipular varios objetos. Por ejemplo, en el siguiente c\u00f3digo se instancian tres objetos <code>File</code> diferentes.</p> <pre><code>var carpetaFotos: File = File(\"C:/Fotos\")\nvar unaFoto: File = File(\"C:/Fotos/Foto1.png\")\nvar otraFoto: File = File(\"C:/Fotos/Foto2.png\")\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#2-rutas-absolutas-y-relativas","title":"2. Rutas absolutas y relativas","text":"<p>En los ejemplos empleados hasta el momento para crear objetos de la clase <code>File</code> se han usado rutas absolutas, ya que es la manera de dejar m\u00e1s claro a qu\u00e9 elemento dentro del sistema de archivos, ya sea archivo o carpeta, se est\u00e1 haciendo referencia.</p> <p> Una ruta absoluta es aquella que se refiere a un elemento a partir del ra\u00edz del sistema de archivos.</p> <p>Por ejemplo <code>C:/Fotos/Foto1.png</code></p> <p>Las rutas absolutas se distinguen f\u00e1cilmente, ya que el texto que las representa comienza de una manera muy caracter\u00edstica dependiendo del sistema operativo del ordenador. En el caso de los sistemas operativos Windows a su inicio siempre se pone el nombre de la unidad ( \"C:\", \"D:\", etc.), mientras que en el caso de los sistemas operativos Unix, estas comienzan siempre por una barra (\"/\").</p> <p>Por ejemplo, las cadenas de texto siguientes representan rutas absolutas en un sistema de archivos de Windows:</p> <ul> <li><code>C:\\Fotos\\Viajes</code> (ruta a una carpeta)</li> <li><code>M:\\Documentos\\Unitat11\\apartado1</code> (ruta a una carpeta)</li> <li><code>N:\\Documentos\\Unitat11\\apartado1\\Actividades.txt</code> (ruta a un archivo)</li> </ul> <p>En cambio, en el caso de una jerarqu\u00eda de archivos bajo un sistema operativo Unix, un conjunto de rutas podr\u00edan estar representadas de la siguiente forma:</p> <ul> <li><code>/Fotos/Viajes</code> (ruta a una carpeta)</li> <li><code>/Documentos/Unidad11/apartado1</code> (ruta a una carpeta)</li> <li><code>/Documentos/Unidad11/Apartado1/Actividades.txt</code> (ruta a un archivo)</li> </ul> <p>Al instanciar objetos de tipo <code>File</code> usando una ruta absoluta siempre hay que usar la representaci\u00f3n correcta seg\u00fan el sistema en que se ejecuta el programa.</p> <p>Si bien el uso de rutas absolutas resulta \u00fatil para indicar con toda claridad qu\u00e9 elemento dentro del sistema de archivos se est\u00e1 manipulando, hay casos que su uso conlleva ciertas complicaciones. Suponga que ha hecho un programa en el que se llevan a cabo operaciones sobre el sistema de archivos. Una vez funciona, le deja el proyecto Kotlin a un amigo que lo copia en su ordenador dentro de una carpeta cualquiera y la abre con su entorno de trabajo. Para que el programa le funcione perfectamente antes ser\u00e1 necesario que en su ordenador haya exactamente las mismas carpetas que usa en su m\u00e1quina, tal como est\u00e1n escritas en el c\u00f3digo fuente de su programa. De lo contrario, no funcionar\u00e1, ya que las carpetas y archivos esperados no existir\u00e1n, y por tanto, no se encontrar\u00e1n. Usar rutas absolutas hace que un programa siempre tenga que trabajar con una estructura del sistema de archivos exactamente igual donde quiera que se ejecute, lo cual no es muy c\u00f3modo.</p> <p>Para resolver este problema, a la hora de inicializar una variable de tipo <code>File</code>, tambi\u00e9n se puede hacer referencia a una ruta relativa.</p> <p> Una ruta relativa es aquella que no incluye el ra\u00edz y por ello se considera que parte desde el directorio de trabajo de la aplicaci\u00f3n. Esta carpeta puede ser diferente cada vez que se ejecuta el programa.</p> <p>Cuando un programa se ejecuta por defecto se le asigna una carpeta de trabajo. Esta carpeta suele ser la carpeta desde donde se lanza el programa. En el caso de un programa en Kotlin ejecutado a trav\u00e9s de un IDE (como IntelliJ IDEA), la carpeta de trabajo suele ser la misma carpeta donde se ha elegido guardar los archivos del proyecto.</p> <p>El formato de una ruta relativa es similar a una ruta absoluta, pero nunca se indica la ra\u00edz del sistema de archivos. Directamente se empieza por el primer elemento escogido dentro de la ruta. Por ejemplo:</p> <ul> <li>Viajes</li> <li>Unidad11\\apartado1</li> <li>Unidad11\\apartado1\\Actividades.txt</li> </ul> <p>Una ruta relativa siempre incluye el directorio de trabajo de la aplicaci\u00f3n como parte inicial a pesar de no haberse escrito. El rasgo distintivo es que el directorio de trabajo puede variar. Por ejemplo, el elemento al que se refiere el siguiente objeto <code>File</code> var\u00eda seg\u00fan el directorio de trabajo.</p> <pre><code>val f = File(\"Unidad11/apartado1/Actividades.txt\")\n</code></pre> Directorio de trabajo Ruta real <code>C:/Proyectos/Java</code> <code>C:/Proyectos/Java/Unidad11/apartado1/Actividades.txt</code> <code>X:/Unidades</code> <code>X:/Unidades/Unidad11/apartado1/Actividades.txt</code> <code>/Programas</code> <code>/Programas/Unidad11/apartado1/Actividades.txt</code> <p>Este mecanismo permite facilitar la portabilidad del software entre distintos ordenadores y sistemas operativos, ya que solo es necesario que los archivos y carpetas permanezcan en la misma ruta relativa al directorio de trabajo. Ve\u00e1moslo con un ejemplo:</p> <pre><code>val f = File(\"Activdades.txt\")\n</code></pre> <p>Dada esta ruta relativa, basta garantizar que el archivo <code>Activdades.txt</code> est\u00e9 siempre en el mismo directorio de trabajo de la aplicaci\u00f3n, cualquiera que sea \u00e9ste e independientemente del sistema operativo utilizado (en un ordenador puede ser <code>C:\\Programas</code> y en otro <code>/Kotlin</code>). En cualquiera de todos estos casos, la ruta siempre ser\u00e1 correcta. De hecho, a\u00fan m\u00e1s. N\u00f3tese como las rutas relativas a Kotlin permiten crear c\u00f3digo independiente del sistema operativo, ya que no es necesario especificar un formato de ra\u00edz ligada a un sistema de archivos concreto ( \"C:\", \"D:\", \"/\", etc.).</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#3-metodos-de-la-clase-file","title":"3. M\u00e9todos de la clase File","text":"<p><code>File</code> ofrece varios m\u00e9todos para poder manipular el sistema de archivos u obtener informaci\u00f3n a partir de su ruta. Algunos de los m\u00e1s significativos para entender las funcionalidades se muestran a continuaci\u00f3n, ordenados por tipo de operaci\u00f3n.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#31-obtencion-de-la-ruta","title":"3.1. Obtenci\u00f3n de la ruta","text":"<p>Una vez se ha instanciado un objeto de tipo <code>File</code>, puede ser necesario recuperar la informaci\u00f3n empleada durante su inicializaci\u00f3n y conocer en formato texto a qu\u00e9 ruta se est\u00e1 refiriendo, o al menos parte de ella.</p> <ul> <li><code>fun getParent():String</code> devuelve la ruta de la carpeta del elemento referido por esta ruta. B\u00e1sicamente la cadena de texto resultante es id\u00e9ntica a la ruta original, eliminando el \u00faltimo elemento. Si la ruta tratada se refiere a la carpeta ra\u00edz de un sistema de archivos (\"C:\\\",   \"/\", etc.), este m\u00e9todo devuelve <code>null</code>. En el caso de tratarse de una ruta relativa, este m\u00e9todo no incluye la parte de la carpeta de trabajo.</li> <li><code>fun getName():String</code> devuelve el nombre del elemento que representa la ruta, ya sea una carpeta o un archivo. Es el caso inverso del m\u00e9todo <code>getParent()</code>, ya que el texto resultante es solo el \u00faltimo elemento.</li> <li><code>fun getAbsolutePath():String</code> devuelve la ruta absoluta. Si el objeto <code>File</code> se inicializ\u00f3 usando una ruta relativa, el resultado incluye tambi\u00e9n la carpeta de trabajo.</li> </ul> <p>Veamos un ejemplo de c\u00f3mo funcionan estos tres m\u00e9todos. Obs\u00e9rvese que las rutas relativas se a\u00f1aden a la ruta de la carpeta de trabajo (donde se encuentra el proyecto):</p> <pre><code>import kotlin.jvm.JvmStatic\nimport java.io.File\n\nobject Pruebasarchivos {\n    @JvmStatic\n    fun main(args: Array&lt;String&gt;) {\n        // Dos rutas absolutas\n        val carpetaAbs = File(\"/home/lionel/fotos\")\n        val archivoAbs = File(\"/home/lionel/fotos/albania1.jpg\")\n\n        // Dos rutas relativas\n        val carpetaRel = File(\"trabajos\")\n        val fitxerRel = File(\"trabajos/documento.txt\")\n\n        // Mostremos sus rutas\n        mostrarRutas(carpetaAbs)\n        mostrarRutas(archivoAbs)\n        mostrarRutas(carpetaRel)\n        mostrarRutas(fitxerRel)\n    }\n\n    fun mostrarRutas(f: File) {\n        println(\"getParent(): \" + f.parent)\n        println(\"getName(): \" + f.name)\n        println(\"getAbsolutePath(): \" + f.absolutePath)\n    }\n}\n</code></pre> <p>Este programa produce la salida:</p> <pre><code>getParent()     :   /home/lionel\ngetName()       :   fotos\ngetAbsolutePath():  /home/lionel/fotos\n\ngetParent()     :   /home/lionel/fotos\ngetName()       :   albania1.jpg\ngetAbsolutePath():  /home/lionel/fotos/albania1.jpg\n\ngetParent()     :   null\ngetName()       :   trabajos\ngetAbsolutePath():  /home/lionel/NetBeans/archivos/trabajos\n\ngetParent()     :   trabajos\ngetName()       :   documento.txt\ngetAbsolutePath():  /home/lionel/NetBeans/archivos/trabajos/documento.txt\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#32-comprobaciones-de-estado","title":"3.2. Comprobaciones de estado","text":"<p>Dada la ruta empleada para inicializar una variable de tipo File, esta puede que realmente exista dentro del sistema de archivos o no, ya sea en forma de archivo o carpeta. La clase <code>File</code> ofrece un conjunto de m\u00e9todos que permiten hacer comprobaciones sobre su estado y saber si es as\u00ed.</p> <ul> <li><code>fun exists(): Boolean</code> comprueba si la ruta existe dentro del sistema de archivos. Devolver\u00e1 <code>true</code> si existe   y <code>false</code> en caso contrario. Normalmente los archivos incorporan en su nombre una extensi\u00f3n (.txt, .jpg, .mp4, etc.).   A\u00fan as\u00ed, hay que tener en cuenta que la extensi\u00f3n no es un elemento obligatorio en el nombre de un archivo, s\u00f3lo se usa como mecanismo para que tanto el usuario como algunos programas puedan discriminar m\u00e1s f\u00e1cilmente el tipo de archivos. Por lo tanto, solo con el texto de una ruta no se puede estar 100% seguro de si esta se refiere a un archivo   o una carpeta. Para poder estar realmente seguros se pueden usar los m\u00e9todos siguientes:</li> <li><code>fun isFile(): Boolean</code> comprueba el sistema de archivos en busca de la ruta y devuelve true si existe y es un archivo. Devolver\u00e1 <code>false</code> si no existe, o si existe pero no es un archivo.</li> <li><code>fun isDirectory():Boolean</code> funciona como el anterior pero comprueba si es una carpeta.</li> </ul> <p>Por ejemplo, el siguiente c\u00f3digo hace una serie de comprobaciones sobre un conjunto de rutas. Para poder probarlo puedes crear la carpeta <code>Temp</code> en la ra\u00edz <code>C:</code> (si estas en Windows). Dentro, un archivo llamado <code>Document.txt</code> (puede estar vac\u00edo) y una carpeta llamada <code>Fotos</code>. Despu\u00e9s de probar el programa puedes eliminar alg\u00fan elemento y volver a probar para ver la diferencia.</p> <pre><code>import kotlin.jvm.JvmStatic\nimport un7.PruebaExiste\nimport java.io.File\n\nobject PruebaExiste {\n    @JvmStatic\n    fun main(args: Array&lt;String&gt;) {\n        val temp = File(\"C:/Temp\")\n        val fotos = File(\"C:/Temp/Fotos\")\n        val document = File(\"C:/Temp/Documento.txt\")\n        println(temp.absolutePath + \" \u00bfexiste? \" + temp.exists())\n        mostrarEstado(fotos)\n        mostrarEstado(document)\n    }\n\n    fun mostrarEstado(f: File) {\n        println(f.absolutePath + \" \u00bfarchivo? \" + f.isFile)\n        println(f.absolutePath + \" \u00bfcarpeta? \" + f.isDirectory)\n    }\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#33-propiedades-de-archivos","title":"3.3. Propiedades de archivos","text":"<p>El sistema de archivos de un sistema operativo almacena diversidad de informaci\u00f3n sobre los archivos y carpetas que puede resultar \u00fatil conocer: sus atributos de acceso, su tama\u00f1o, la fecha de modificaci\u00f3n, etc. En general, todos los datos mostrados en acceder a las propiedades del archivo. Esta informaci\u00f3n tambi\u00e9n puede ser consultada usando los m\u00e9todos adecuados. Entre los m\u00e1s populares hay los siguientes:</p> <ul> <li><code>fun length(): Long</code> devuelve el tama\u00f1o de un archivo en bytes. Este m\u00e9todo solo puede ser llamado sobre una ruta que represente un archivo, de lo contrario no se puede garantizar que el resultado sea v\u00e1lido.</li> <li><code>fun lastModified(): Long</code> devuelve la \u00faltima fecha de edici\u00f3n del elemento representado por esta ruta. El resultado se codifica en un \u00fanico n\u00famero entero cuyo valor es el n\u00famero de milisegundos que han pasado desde el 1 de junio de 1970.</li> </ul> <p>El ejemplo siguiente muestra c\u00f3mo funcionan estos m\u00e9todos. Para probarlos crea el archivo <code>Documento.txt</code> en la carpeta <code>C:\\Temp</code>. Primero deja el archivo vac\u00edo y ejecuta el programa. Luego, con un editor de texto, escribe cualquier cosa, guarda los cambios y vuelve a ejecutar el programa. Observa c\u00f3mo el resultado es diferente. Como curiosidad, f\u00edjate en el uso de la clase <code>Date</code> para poder mostrar la fecha en un formato legible.</p> <pre><code>import java.io.File\nimport java.util.*\nimport kotlin.jvm.JvmStatic\n\nobject PruebaPropiedades {\n    @JvmStatic\n    fun main(args: Array&lt;String&gt;) {\n        val documento = File(\"C:/Temp/Documento.txt\")\n        println(documento.absolutePath)\n        val milisegundos = documento.lastModified()\n        val fecha = Date(milisegundos)\n        println(\"\u00daltimamodificaci\u00f3n (ms)   : $milisegundos\")\n        println(\"\u00daltimamodificaci\u00f3n (fecha): $fecha\")\n        println(\"Tama\u00f1odel archivo: \" + documento.length())\n    }\n}\n</code></pre> <p>Primera salida:</p> <pre><code>C:/Temp/Documento.txt\n\u00daltimamodificaci\u00f3n (ms)   : 1583025735411\n\u00daltimamodificaci\u00f3n (fecha): Sun Mar 01 02:22:15 CET 2020\nTama\u00f1odel archivo: 0\n</code></pre> <p>Segunda salida:</p> <pre><code>C:/Temp/Documento.txt\n\u00daltimamodificaci\u00f3n (ms)   : 1583025944088\n\u00daltimamodificaci\u00f3n (fecha): Sun Mar 01 02:25:44 CET 2020\nTama\u00f1odel archivo: 7\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#34-gestion-de-los-archivos","title":"3.4. Gesti\u00f3n de los archivos","text":"<p>El conjunto de operaciones m\u00e1s habituales al acceder a un sistema de archivos de un ordenador son las vinculadas a su gesti\u00f3n directa: renombrar archivos, borrarlos, copiarlos o moverlos. Dado el nombre de una ruta, Java y kotlin tambi\u00e9n permite realizar estas acciones.</p> <ul> <li><code>fun mkdir(): Boolean</code> permite crear la carpeta indicada en la ruta. La ruta debe indicar el nombre de una carpeta que no existe en el momento de invocar el m\u00e9todo. Por ejemplo, dado un objeto <code>File</code>  instanciado con la ruta <code>C: /Fotos/Albania</code> que no existe, el m\u00e9todo <code>mkdir()</code> crear\u00e1 la carpeta <code>Albania</code> dentro de <code>C:/Fotos</code>. Devuelve <code>true</code> si se ha creado correctamente, en caso contrario devuelve <code>false</code> (por ejemplo si la ruta es incorrecta, la carpeta ya existe o el usuario no tiene permisos de escritura).</li> <li><code>fun delete(): Boolean</code> borra el archivo o carpeta indicada en la ruta. La ruta debe indicar el nombre de un archivo o carpeta que s\u00ed existe en el momento de invocar el m\u00e9todo. Se podr\u00e1 borrar una carpeta solo si est\u00e1 vac\u00eda (no contiene ni carpetas ni archivos). Devuelve <code>true</code> o <code>false</code> seg\u00fan si la operaci\u00f3n se ha podido llevar a cabo.</li> </ul> <p>Para probar el ejemplo que se muestra a continuaci\u00f3n de manera que se pueda ver c\u00f3mo funcionan estos m\u00e9todos, primero aseg\u00farate de que en la ra\u00edz de la unidad <code>C:</code> no hay ninguna carpeta llamada <code>Temp</code> y ejecute el programa. Todo fallar\u00e1, ya que las rutas son incorrectas (no existe <code>Temp</code>). Luego, crea la carpeta <code>Temp</code> y en su interior crea un nuevo documento llamado <code>Documento.txt</code> (puede estar vac\u00edo). Ejecuta el programa y ver\u00e1s que se habr\u00e1 creado una nueva carpeta llamada <code>Fotos</code>. Si lo vuelves a ejecutar por tercera vez podr\u00e1s comprobar que se habr\u00e1 borrado.</p> <pre><code>import java.io.File\nimport kotlin.jvm.JvmStatic\n\nobject PruebasGestionarchivos {\n    @JvmStatic\n    fun main(args: Array&lt;String&gt;) {\n        val fotos = File(\"C:/Temp/Fotos\")\n        val doc = File(\"C:/Temp/Documento.txt\")\n        val mkdirFot: Boolean = fotos.mkdir()\n        if (mkdirFot) {\n            println(\"Creada carpeta \" + fotos.getName().toString() + \"? \" + mkdirFot)\n        } else {\n            val delCa: Boolean = fotos.delete()\n            println(\"Borrada carpeta \" + fotos.getName().toString() + \"? \" + delCa)\n            val delAr: Boolean = doc.delete()\n            println(\"Borrado archivo \" + doc.getName().toString() + \"? \" + delAr)\n        }\n    }\n}\n</code></pre> <p>Desde el punto de vista de un sistema operativo la operaci\u00f3n de <code>mover</code> un archivo o carpeta no es m\u00e1s que cambiar su nombre desde su ruta original hasta una nueva ruta destino. Para hacer esto tambi\u00e9n hay un m\u00e9todo.</p> <ul> <li><code>fun renameTo(File destino): Boolean</code> el nombre de este m\u00e9todo es algo enga\u00f1oso (\"renombrar\", en ingl\u00e9s), ya que su funci\u00f3n real no es simplemente cambiar el nombre de un archivo o carpeta, sino cambiar la ubicaci\u00f3n completa. El m\u00e9todo se invoca el objeto <code>File</code> con la ruta origen (donde se encuentra el archivo o carpeta), y se le da como argumento otro objeto <code>File</code> con la ruta destino. Devuelve <code>true</code> o <code>false</code> seg\u00fan si la operaci\u00f3n se ha podido llevar a cabo correctamente o no (la ruta origen y destino son correctos, no existe ya un archivo con este nombre en el destino, etc.). N\u00f3tese que, en el caso de carpetas, es posible moverlas aunque contengan archivos.</li> </ul> <p>Una vez m\u00e1s, veamos un ejemplo. Dentro de la carpeta <code>C:/Temp</code> crea una carpeta llamada <code>Media</code> y otra llamada <code>Fotos</code>.</p> <p>Dentro de la carpeta<code>Fotos</code> crea dos documentos llamados <code>Documento.txt</code> y <code>Fotos.txt</code>. Despu\u00e9s de ejecutar el programa, observa como la carpeta <code>Fotos</code> se ha movido y ha cambiado de nombre, pero mantiene en su interior el archivo <code>Fotos.txt</code>. El archivo <code>Documento.txt</code> se ha movido hasta la carpeta <code>Temp</code>.</p> <pre><code>import java.io.File\nimport kotlin.jvm.JvmStatic\n\nobject PruebasGestionarchivos2 {\n    @JvmStatic\n    fun main(args: Array&lt;String&gt;) {\n        val origenDir = File(\"C:/Temp/Fotos\")\n        val destinoDir = File(\"C:/Temp/Media/Fotografies\")\n        val origenDoc = File(\"C:/Temp/Media/Fotografies/Document.txt\")\n        val destinoDoc = File(\"C:/Temp/Document.txt\")\n        var res = origenDir.renameTo(destinoDir)\n        println(\"Se ha movido y renombrado la carpeta? $res\")\n        res = origenDoc.renameTo(destinoDoc)\n        println(\"Se ha movido el documento? $res\")\n    }\n}\n</code></pre> <p>Como ya se ha comentado este m\u00e9todo tambi\u00e9n sirve, impl\u00edcitamente, para renombrar archivos o carpetas. Si el elemento final de las rutas origen y destino son diferentes, el nombre del elemento, sea archivo o carpeta, cambiar\u00e1. Para simplemente renombrar un elemento sin moverlo de lugar, simplemente su ruta padre sea exactamente la misma. El resultado es que el elemento de la ruta origen \"se mueve\" en la misma carpeta donde est\u00e1 ahora, pero con un nombre diferente.</p> <p>Por ejemplo, si utilizamos <code>C:/Trabajos/Doc.txt</code> como ruta origen y <code>C:/Trabajos/File.txt</code> como ruta destino, el archivo <code>Doc.txt</code> cambiar\u00e1 de nombre a <code>File.txt</code> pero permanecer\u00e1 en la misma carpeta <code>C:/Trabajos</code>.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#35-listado-de-archivos","title":"3.5. Listado de archivos","text":"<p>Finalmente, s\u00f3lo en el caso de las carpetas, es posible consultar cu\u00e1l es el listado de archivos y carpetas que contiene.</p> <ul> <li><code>fun listFiles(): Array&lt;File&gt;</code> devuelve un vector de objectos <code>File</code> con todos los elementos contenidos en la carpeta (representados por objetos <code>File</code>, uno por elemento). Para que se ejecute correctamente la ruta debe indicar una carpeta. El tama\u00f1o del vector ser\u00e1 igual al n\u00famero de elementos que contiene la carpeta. Si el tama\u00f1o es <code>0</code>, el valor devuelto ser\u00e1 <code>null</code> y toda operaci\u00f3n posterior sobre el vector ser\u00e1 err\u00f3nea. El orden de los elementos es aleatorio (al contrario que en el explorador de archivos del sistema operativo, no se ordena autom\u00e1ticamente por tipo ni alfab\u00e9ticamente).</li> </ul> <p>Veamos un ejemplo. Antes de ejecutarlo, crea una carpeta <code>Temp</code> en la ra\u00edz de la unidad <code>C:</code>. Dentro crea o copia cualquier cantidad de carpetas o archivos.</p> <pre><code>import java.io.File\nimport kotlin.jvm.JvmStatic\n\nobject PruebasGestionarchivos3 {\n    @JvmStatic\n    fun main(args: Array&lt;String&gt;) {\n        val dir = File(\"C:/Temp\")\n        val lista = dir.listFiles()\n        println(\"Contenido de \" + dir.absolutePath + \" :\")\n\n        // Recorremos el array y mostramos el nombre de cada elemento\n        for (i in lista.indices) {\n            val f = lista[i]\n            if (f.isDirectory) {\n                println(\"[DIR] \" + f.name)\n            } else {\n                println(\"[ARX] \" + f.name)\n            }\n        }\n    }\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#36-creacion-de-archivos","title":"3.6. Creaci\u00f3n de archivos","text":"<p>En Kotlin, se puede crear un nuevo archivo usando <code>File.createNewFile()</code>, <code>File.writeText(text :String)</code>, <code>Files.writeBytes()</code>, etc. Hay muchas otras formas de crear un archivo en Kotlin. Examinaremos la implementaci\u00f3n del c\u00f3digo para algunos de ellos utilizando programas Kotlin de ejemplo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#361-crear-archivo-usando-filecreatenewfile","title":"3.6.1. Crear archivo usando <code>File.createNewFile()</code>","text":"<p><code>File.createNewFile()</code> crea un nuevo archivo si a\u00fan no existe y devuelve el valor booleano de <code>true</code>. Si el archivo ya existe en la ruta proporcionada, el m\u00e9todo devuelve <code>false</code>. El archivo creado est\u00e1 vac\u00edo y tiene cero bytes escritos.</p> <p>Usar <code>File.createNewFile()</code> es el mejor procedimiento y el m\u00e1s seguro para crear un nuevo archivo. La mayor\u00eda de los otros m\u00e9todos, sobrescribir\u00edan el archivo si existe, lo que puede resultar en la p\u00e9rdida de los datos existentes en el archivo, y puede ser que no se desee este efecto.</p> <p>En el siguiente ejemplo, intentamos crear un nuevo archivo con el nombre <code>data.txt</code>. La primera vez se crea el archivo y se devuelve <code>true</code>. Cuando intentamos crear el archivo por segunda vez, como el archivo <code>data.txt</code> ya se cre\u00f3, obtenemos <code>false</code>.</p> <pre><code>import java.io.File\n\nfun main(args: Array&lt;String&gt;) {\n\n    val fileName = \"data.txt\"\n    var file = File(fileName)\n\n    // create a new file\n    val isNewFileCreated: Boolean = file.createNewFile()\n\n    if (isNewFileCreated) {\n        println(\"$fileName is created successfully.\")\n    } else {\n        println(\"$fileName already exists.\")\n    }\n\n    // try creating a file that already exists\n    val isFileCreated: Boolean = file.createNewFile()\n\n    if (isFileCreated) {\n        println(\"$fileName is created successfully.\")\n    } else {\n        println(\"$fileName already exists.\")\n    }\n\n}\n</code></pre> <p>mostrar\u00e1 como salida:</p> <pre><code>data.txt is created successfully.\ndata.txt already exists.\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#362-crear-archivo-usando-filewritetext","title":"3.6.2. Crear archivo usando <code>File.writeText()</code>","text":"<p><code>File.writeText()</code> crea un nuevo archivo si a\u00fan no existe y escribe el texto (argumento de cadena) en el archivo. Si se proporciona una cadena vac\u00eda, se crea el archivo y no se escribe nada en \u00e9l. De forma predeterminada, el archivo est\u00e1 codificado como UTF-8. Pasar cualquier otro conjunto de caracteres como segundo argumento codifica el archivo en consecuencia.</p> <p> En caso de que el archivo ya exista, se sobrescribe y los datos existentes se pierden</p> <p>Utilice este m\u00e9todo si est\u00e1 seguro de que el archivo a\u00fan no existe o si sobrescribir los datos existentes no afecta a su aplicaci\u00f3n.</p> <p>En este ejemplo, usaremos <code>File.writeText()</code> para crear un nuevo archivo.</p> <pre><code>import java.io.File\n\nfun main(args: Array&lt;String&gt;) {\n\n    val fileName = \"data.txt\"\n\n    var file = File(fileName)\n\n    // create a new file\n    file.writeText(\"\")\n\n}\n</code></pre> <p>Al m\u00e9todo <code>writeText()</code> se le puede proporcionar como argumento la cadena que le gustar\u00eda escribir en este archivo. Le hemos pasado una cadena vac\u00eda, como dato a escribir en el archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#363-crear-archivo-usando-filewritebytes","title":"3.6.3. Crear archivo usando <code>File.writeBytes()</code>","text":"<p><code>File.writeBytes()</code> crea un nuevo archivo si a\u00fan no existe y escribe los bytes del <code>ByteArray</code> proporcionado sin ning\u00fan formato. Si se proporciona un <code>ByteArray</code> vac\u00edo, se crea el archivo y no se escribe nada en \u00e9l.</p> <p> En caso de que el archivo ya exista, se sobrescribe y los datos existentes se pierden</p> <p>Utilice este m\u00e9todo si est\u00e1 seguro de que el archivo a\u00fan no existe o si sobrescribir los datos existentes no afecta a su aplicaci\u00f3n.</p> <p>En este ejemplo, usaremos <code>File.writeBytes()</code> para crear un nuevo archivo.</p> <pre><code>import java.io.File\n\nfun main(args: Array&lt;String&gt;) {\n\n    val fileName = \"data.txt\"\n\n    var file = File(fileName)\n\n    // create a new file\n    file.writeBytes(ByteArray(0))\n}\n</code></pre> <p>Al m\u00e9todo <code>writeBytes()</code> se le puede proporcionar como argumento el vector de Bytes que le gustar\u00eda escribir en este archivo. Le hemos pasado un vector vac\u00edo, como dato a escribir en el archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#fuente","title":"Fuente","text":"<ul> <li>Writing to a File in kotlin</li> <li>Reading from a File in kotlin</li> <li>Baeldung Kotlin IO</li> <li>Book: The joy of kotlin</li> <li>Kotlin IO</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/","title":"UD 7 - 7.4 Lectura y escritura de archivos","text":"","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#74-lectura-y-escritura-de-archivos","title":"7.4. Lectura y escritura de archivos","text":"<p>Normalmente las aplicaciones que utilizan archivos no est\u00e1n centradas en la gesti\u00f3n del sistema de archivos del ordenador. El objetivo principal de usar archivos es poder almacenar datos de modo que entre diferentes ejecuciones del programa, incluso en diferentes equipos, sea posible recuperar los datos almacenados. El caso m\u00e1s t\u00edpico es un editor de documentos, que mientras se ejecuta se encarga de gestionar los datos relativos al texto que est\u00e1 escribiendo, pero en cualquier momento puede guardarlo en un archivo para poder recuperar este texto cuando se desee, y a\u00f1adir otros nuevos si fuera necesario. El archivo con los datos del documento lo puede abrir tanto en el editor de su ordenador como en el de otro compa\u00f1ero.</p> <p>Para saber c\u00f3mo tratar los datos de un archivo en un programa, hay que tener muy claro c\u00f3mo se estructuran. Dentro de un archivo se pueden almacenar todo tipo de valores de cualquier tipo de datos. La parte m\u00e1s importante es que estos valores se almacenan en forma de secuencia, uno tras otro. Por lo tanto, como pronto ver\u00e9is, la forma m\u00e1s habitual de tratar archivos es secuencialmente, de forma parecida a como se hace para leer los datos desde teclado, mostrarlas por pantalla o recorrer las posiciones de un array.</p> <p> Se denomina acceso secuencial al procesamiento de un conjunto de elementos de manera que s\u00f3lo es posible acceder a ellos de acuerdo a su orden de aparici\u00f3n. Para procesar un elemento es necesario procesar primero todos los elementos anteriores.</p> <p>Kotlin, junto con otros lenguajes de programaci\u00f3n, diferencia entre dos tipos de archivos seg\u00fan c\u00f3mo se representan los valores almacenados en un archivo.</p> <p> En los archivos orientados a car\u00e1cter, los datos se representan como una secuencia de cadenas de texto, donde cada valor se  diferencia del otro usando un delimitador. En cambio, en los archivos orientados a byte, los datos se representan directamente de acuerdo a su formato en binario, sin ninguna separaci\u00f3n. Estos \u00faltimos archivos son no son legibles a simple vista, y son interpretados por programas que entienden su formato. Por ejemplo, pdf, doc, xls.</p> <p>Nos centraremos principalmente en el procesamiento de archivos orientados a car\u00e1cter.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#1-archivos-orientados-a-caracter","title":"1. Archivos orientados a car\u00e1cter","text":"<p>Un archivo orientado a car\u00e1cter no es m\u00e1s que un documento de texto, como el que podr\u00eda generar con cualquier editor de texto simple. Los valores est\u00e1n almacenados seg\u00fan su representaci\u00f3n en cadena de texto, exactamente en el mismo formato que ha usado hasta ahora para entrar datos desde el teclado. Del mismo modo, los diferentes valores se distinguen al estar separados entre ellos con un delimitador, que por defecto es cualquier conjunto de espacios en blanco o salto de l\u00ednea. Aunque estos valores se puedan distribuir en l\u00edneas de texto diferentes, conceptualmente, se puede considerar que est\u00e1n organizados uno tras otro, secuencialmente, como las palabras en la p\u00e1gina de un libro.</p> <p>El siguiente podr\u00eda ser el contenido de un archivo orientado a car\u00e1cter donde hay diez valores de tipo <code>float</code>, 7 en la primera l\u00ednea y 3 en la segunda:</p> <pre><code>1,5 0,75 \u22122,35 18,0 9,4 3,1416 \u221215,785\n\u2212200,4 2,56 9,3785\n</code></pre> <p>Y este el de un archivo con 3 valores de tipo <code>String</code>: <code>\"Hab\u00eda\"</code>, <code>\"una\"</code> y <code>\"vez...\"</code> en una l\u00ednea.</p> <pre><code>Hab\u00eda una vez...\n</code></pre> <p>En un archivo orientado a car\u00e1cter es posible almacenar cualquier combinaci\u00f3n de datos de cualquier tipo (<code>int</code> , <code>double</code>, <code>boolean</code>, <code>String</code>, etc.).</p> <pre><code>7 10 20,51 6,99\nHab\u00eda una vez...\ntrue false 2020 0,1234\n</code></pre> <p>La principal ventaja de un archivo de este tipo es que resulta muy sencillo inspeccionar su contenido y generarlos de acuerdo a nuestras necesidades.</p> <p>Para el caso de los archivos orientados a car\u00e1cter, hay que usar dos clases diferentes seg\u00fan si lo que se quiere es leer o escribir datos en un archivo. Normalmente esto no es muy problem\u00e1tico, ya que en un bloque de c\u00f3digo dado solo se llevar\u00e1n a cabo operaciones de lectura o de escritura sobre un mismo archivo, pero no los dos tipos de operaciones a la vez.</p> <p>Una diferencia importante a la hora de tratar con archivos respecto a leer datos del teclado es que las operaciones de lectura no son producto de una interacci\u00f3n directa con el usuario, que es quien escribe los datos. Solo se puede trabajar con los datos que hay en el archivo y nada m\u00e1s. Esto tiene dos efectos sobre el proceso de lectura:</p> <ol> <li>Por un lado, recuerda que cuando se lleva a cabo el proceso de lectura de una secuencia de valores, siempre hay que tener cuidado de usar el m\u00e9todo adecuado al tipo de valor que se espera que venga a continuaci\u00f3n . Qu\u00e9 tipo de valor se espera es algo que habr\u00e9is decidido vosotros a la hora de hacer el programa que escribi\u00f3 ese archivo, por lo que es vuestra responsabilidad saber qu\u00e9 hay que leer en cada momento. De todos modos nada garantiza que no se haya cometido alg\u00fan error o que el archivo haya sido manipulado por otro programa o usuario. Como operamos con archivos y no por el teclado, no existe la opci\u00f3n de pedir al usuario que vuelva a escribir el dato. Por lo tanto, el programa deber\u00eda decir que se ha producido un error ya que el archivo no tiene el formato correcto y finalizar el proceso de lectura.</li> <li>Por otra parte, tambi\u00e9n es necesario controlar que nunca se lean m\u00e1s valores de los que hay disponibles para leer. En el caso de la entrada de datos por el teclado el programa simplemente se bloqueaba y espera a que el usuario escribiera nuevos valores. Pero con archivos esto no sucede. Intentar leer un nuevo valor cuando el apuntador ya ha superado el \u00faltimo disponible se considera err\u00f3neo y lanzar\u00e1 una excepci\u00f3n. Para evitarlo, habr\u00e1 que utilizar alg\u00fan procedimiento que nos permita saber si se ha llegado al final de archivo en vez de suponer que siguen existiendo datos que leer.</li> </ol>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#11-lectura-de-archivo","title":"1.1. Lectura de archivo","text":"<p>En Kotlin demos leer el contenido de un archivo utilizando los m\u00e9todos est\u00e1ndar de la clase <code>java.io.File</code> o los m\u00e9todos que proporciona Kotlin como una extensi\u00f3n de <code>java.io.File</code>.</p> <p>Examinaremos programas de ejemplo para los m\u00e9todos de extensi\u00f3n, proporcionados por Kotlin a la clase <code>java.io.File</code> de Java, para leer el contenido de un archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofilebufferedreader-de-java","title":"Usar <code>java.io.File.bufferedReader()</code> de Java","text":"<p><code>BufferedReader</code> lee texto desde un flujo de entrada de caracteres, almacenando los caracteres para proporcionar una lectura eficiente de caracteres, arreglos y l\u00edneas.</p> <p>Se puede configurar espec\u00edficamente el tama\u00f1o del buffer, o usar el que se otorga por default, el cual es suficientemente grande para la mayor\u00eda de los casos.</p> <p>Dado que esta clase extiende de <code>Reader</code>, cada petici\u00f3n de lectura causa una petici\u00f3n de lectura del flujo de entrada, por lo que es aconsejable envolverla con la clase <code>InputStreamReader</code> o <code>FileReader</code>, seg\u00fan el prop\u00f3sito de la lectura.</p> <p>A continuaci\u00f3n podemos ver c\u00f3mo leer el contenido de un archivo en <code>BufferedReader</code>, El proceso es el siguiente:</p> <ol> <li>Prepare el objeto <code>File</code> con la ubicaci\u00f3n del archivo pasado como argumento al constructor de la clase de <code>File</code>.</li> <li><code>File.bufferedReader</code> devuelve un nuevo <code>BufferedReader</code> para leer el contenido del archivo.</li> <li>Utilice <code>BufferedReader.readLines()</code> para leer el contenido del archivo.</li> </ol> <p>Un ejemplo</p> <pre><code>import java.io.File\n\nfun main(args: Array&lt;String&gt;) {\n    val file = File(\"input\" + File.separator + \"contents.txt\")\n    val bufferedReader = file.bufferedReader()\n    val text: List&lt;String&gt; = bufferedReader.readLines()\n    for (line in text) {\n        println(line)\n    }\n}\n</code></pre> <p>El contenido del archivo se imprime en la consola.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofileforeachline-de-kotlin","title":"Usar <code>java.io.File.forEachLine()</code> de Kotlin","text":"<p>Lee un archivo l\u00ednea por l\u00ednea en Kotlin. El proceso es el siguiente:</p> <ol> <li>Prepare el objeto <code>File</code> con la ubicaci\u00f3n pasada como argumento al constructor de la clase de <code>File</code>.</li> <li>Use la funci\u00f3n <code>File.forEachLine</code> y lea cada l\u00ednea del archivo.</li> </ol> <p>Un ejemplo</p> <pre><code>import java.io.File\n\nfun main(args: Array&lt;String&gt;) {\n    val file = File(\"input\" + File.separator + \"contents.txt\")\n    file.forEachLine { println(it) }\n}\n</code></pre> <p>El contenido del archivo se imprime en la consola.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#oros-metodos-de-lectura","title":"Oros m\u00e9todos de lectura","text":"<p>Existen otras formas de leer archivos:</p> <ul> <li><code>File.inputStream().readBytes()</code>: Lee el contenido del archivo en InputStream</li> <li><code>File.readBytes()</code>: devuelve todo el contenido del archivo como ByteArray</li> <li><code>File.readLines()</code>: devuelve todo el contenido del archivo como una lista de l\u00edneas</li> <li><code>File.readText()</code>: devuelve todo el contenido del archivo como una sola cadena</li> <li><code>java.util.Scanner</code>: permite leer indicando el tipo de dato a leer.</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#12-escritura-en-archivo","title":"1.2. Escritura en archivo","text":"<p>Con en el lenguaje de programaci\u00f3n Kotlin tambien se puede escribir en un archivo. Por lo general, en los archivos orientados a caracteres se escriben cadenas de texto.</p> <p>Igual que para la lectura, haciendo uso de Kotlin podremos escribir en un archivo usando las funciones de extensi\u00f3n proporcionadas por Kotlin o tambi\u00e9n puede usar el c\u00f3digo Java existente que escribe contenido en un archivo.</p> <p>A continuaci\u00f3n veremos ejemplos de c\u00f3mo usar clases de Java como <code>PrintWriter</code> para escribir en un archivo y m\u00e1s ejemplos usando funciones de extensi\u00f3n de Kotlin.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofilebufferedwriter","title":"Usar <code>java.io.File.bufferedWriter</code>","text":"<p>Podemos usar la funci\u00f3n de extensi\u00f3n <code>java.io.File.bufferedWriter()</code> para obtener el objeto de escritura y luego usar la funci\u00f3n <code>write()</code> en el objeto de escritura para escribir contenido en el archivo.</p> <ol> <li>Tenga su contenido como una cadena.</li> <li>Pase el nombre del archivo al constructor de archivos (<code>File</code>).</li> <li>Luego llame al m\u00e9todo <code>bufferedWriter()</code> de la clase <code>File</code>.</li> <li>Haciendo uso de la funci\u00f3n <code>use()</code> (Veremos que ventajas nos proporciona hacer uso de ella), llama al m\u00e9todo <code>writer(content)</code> del bufer escritor devuelto por <code>bufferedWriter()</code>, y que se encarga de escribir el contenido en el archivo.</li> </ol> <pre><code>import java.io.File\n\n/**\n * Example to use File.bufferedWriter() in Kotlin to write content to a text file\n */\nfun main(args: Array&lt;String&gt;) {\n    // content to be written to file\n    var content = \"Hello World. Welcome to Kotlin!!\"\n\n    // write content to file\n    File(\"file.txt\").bufferedWriter().use { out -&gt;\n        out.write(content)\n    }\n}\n</code></pre> <p> Aplicamos la funci\u00f3n <code>use()</code> para garantizar que todos los recursos se liberen correctamente cuando hayamos terminado</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofilewritetext","title":"Usar <code>java.io.File.writeText()</code>","text":"<p>Si est\u00e1 escribiendo exclusivamente texto en un archivo, puede usar la funci\u00f3n de extensi\u00f3n <code>java.io.File.writeText()</code>.</p> <p>En el siguiente ejemplo, hemos usado esta funci\u00f3n de extensi\u00f3n de kotlin para escribir texto en un archivo.</p> <pre><code>import java.io.File\n\n/**\n * Example to use File.writeText in Kotlin to write text to a file\n */\nfun main(args: Array&lt;String&gt;) {\n    // content to be written to file\n    var content = \"Hello World. Welcome to Kotlin!!\"\n\n    // write content to file\n    File(\"file.txt\").writeText(content)\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofileprintwriter","title":"Usar <code>java.io.File.printWriter</code>","text":"<p>En este ejemplo, usaremos la funci\u00f3n de extensi\u00f3n de Kotlin <code>printWriter()</code> para la clase <code>java.io.File</code>. El siguiente es el proceso para escribir en el archivo.</p> <ol> <li>Tenga su contenido como una cadena.</li> <li>Pase el nombre del archivo al constructor de archivos (<code>File</code>).</li> <li>Luego llame al m\u00e9todo <code>printWriter()</code> de la clase <code>File</code>.</li> <li>Haciendo uso de la funci\u00f3n <code>use()</code>(Veremos que ventajas nos proporciona hacer uso de ella), llama al m\u00e9todo <code>println(content)</code> del escritor devuelto por <code>printWriter()</code>, y que se encarga de escribir el contenido en el archivo.</li> </ol> <pre><code>import java.io.File\n\n/**\n * Example to use File.printWriter in Kotlin to write content to a text file\n */\nfun main(args: Array&lt;String&gt;) {\n    // content to be written to file\n    var content = \"Hello World. Welcome to Kotlin!!\"\n\n    // write content to file\n    File(\"file.txt\").printWriter().use { out -&gt;\n        out.println(content)\n    }\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaioprintwriter","title":"Usar <code>java.io.PrintWriter</code>","text":"<p>En este ejemplo, tomamos una cadena y la escribimos en un archivo usando la clase <code>java.io.PrintWriter</code>. Para ello se siguen los siguientes pasos.</p> <ol> <li>Tenga sus datos listos como una cadena en una variable.</li> <li>Inicialice un objeto escritor de la clase <code>PrintWriter</code>.</li> <li>Agregue la cadena al archivo usando la funci\u00f3n <code>PrintWriter.append()</code>.</li> <li>Cerrar el escritor.</li> </ol> <pre><code>import java.io.PrintWriter\n\n/**\n * Example to use standard Java method in Kotlin to write content to a text file\n */\nfun main(args: Array&lt;String&gt;) {\n    // content to be written to file\n    var content = \"Hello World. Welcome to Kotlin!!\"\n\n    // using java class java.io.PrintWriter\n    val writer = PrintWriter(\"file.txt\")\n    writer.append(content)\n    writer.close()\n}\n</code></pre> <p>En los ejemplso, se crear\u00e1 un nuevo archivo con el nombre <code>file.txt</code>, como se especifica para el argumento de <code>PrintWriter()</code>, con el contenido. Si el archivo ya est\u00e1 presente, primero se borra el contenido del archivo y luego se escribe el nuevo contenido en el archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#oros-metodos-de-escritura","title":"Oros m\u00e9todos de escritura","text":"<p>Existen otras formas de leer archivos:</p> <ul> <li><code>java.io.FileWriter</code>: Escribe en un archivo haciendo uso del m\u00e9todo <code>writer()</code>.</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#2-archivos-binarios","title":"2. Archivos binarios.","text":"<p>Los Data Stream (Flujos de datos) se utilizan para escribir datos binarios. <code>DataOutputStream</code> escribe datos binarios de tipos primitivos(<code>Int</code>, <code>Long</code>, <code>String</code>) mientras que <code>DataInputStream</code> lee datos del flujo binario y los convierte en tipos primitivos.</p> <p>A continuaci\u00f3n veremos un programa de ejemplo que escribe datos en un archivo y luego los vuelve a leer a memoria para finalmente imprimirlos por salida est\u00e1ndar.</p> <pre><code>import java.io.DataInputStream\nimport java.io.DataOutputStream\nimport java.io.FileInputStream\nimport java.io.FileOutputStream\n\nfun main(args : Array&lt;String&gt;){\n    val burgers = \"data.burgers\"\n\n    //Open the file in binary mode\n    DataOutputStream(FileOutputStream(burgers)).use { dos -&gt;\n        with(dos){\n            //Notice we have to write our data types\n            writeInt(\"Bob is Great\\n\".length) //Record length of the array\n            writeChars(\"Bob is Great\\n\") //Write the array\n            writeBoolean(true) //Write a boolean\n\n            writeInt(\"How many burgers can Bob cook?\\n\".length) //Record length of array\n            writeBytes(\"How many burgers can Bob cook?\\n\") //Write the array\n            writeInt(Int.MAX_VALUE) //Write an int\n\n            for (i in 0..5){\n                writeByte(i) //Write a byte\n                writeDouble(i.toDouble()) //Write a double\n                writeFloat(i.toFloat()) //Write a float\n                writeInt(i) //Write an int\n                writeLong(i.toLong()) //Write a long\n            }\n        }\n    }\n\n    //Open a binary file in read mode. It has to be read in the same order\n    //in which it was written\n    DataInputStream(FileInputStream(burgers)).use {dis -&gt;\n        with (dis){\n            val bobSize = readInt() //Read back the size of the array\n            for (i in 0 until bobSize){\n                print(readChar()) //Print the array one character at a time\n            }\n            println(readBoolean()) //Read a boolean\n\n            val burgerSize = readInt() //Length of the next array\n            for (i in 0 until burgerSize){\n                print(readByte().toChar()) //Print array one character at a time\n            }\n            println(readInt()) //Read an int\n\n            for (i in 0..5){\n                println(readByte()) //Read a byte\n                println(readDouble()) //Read a double\n                println(readFloat()) //Read a float\n                println(readInt()) //Read an int\n                println(readLong()) //Read a long\n            }\n        }\n\n    }\n}\n</code></pre> <p>El programa crea un objeto <code>FileOutputStream</code>, para ello pasa el nombre del archivo a su constructor. Luego, el objeto <code>FileOutputStream</code> se pasa como par\u00e1metro al constructor de <code>DataOutputStream</code>. </p> <p>Hacemos uso de la funci\u00f3n <code>use()</code> para garantizar que todos los recursos se liberen correctamente cuando hayamos terminado. El archivo ahora est\u00e1 abierto para escritura en modo binario.</p> <p>Cuando deseamos usar el mismo objeto repetidamente, podemos pasarlo a la funci\u00f3n <code>with()</code>. En nuestro caso, tenemos la intenci\u00f3n de seguir usando nuestro objeto <code>DataOutputStream</code>, por lo que en la l\u00ednea 11, lo pasamos a la funci\u00f3n <code>with()</code>. Dentro de la funci\u00f3n <code>with()</code>, todas las llamadas a m\u00e9todos apuntar\u00e1n al objeto <code>dos</code> ya que se proporcion\u00f3 a <code>with()</code> como par\u00e1metro.</p> <p> Cuando deseamos usar un mismo objeto repetidamente, podemos pasarlo a la funci\u00f3n <code>with()</code>. Cuando un objeto es pasado a la funci\u00f3n <code>with()</code>, dentro de esta, todas las llamadas a m\u00e9todos apuntar\u00e1n al objeto que se le ha pasado por par\u00e1metro.</p> <p>Siguiendo con el ejemplo, dado que tenemos la intenci\u00f3n de escribir un <code>String</code> en el archivo, necesitamos registrar la longitud de la cadena, ya que de otra forma no sabriamos cuantos bytes se han escrito. Hacemos esto usando la funci\u00f3n <code>writeInt</code> y pas\u00e1ndole la longitud de nuestra cadena. Luego podemos usar <code>writeChars()</code> para escribir un string, puesto que el argumento <code>String</code> se convierte en una matriz de caracteres. Finalmente, llamamos a <code>writeBoolean()</code> para escribir valores <code>true</code>/<code>false</code> en el archivo.</p> <p>La siguiente secci\u00f3n es una repetici\u00f3n de la primera. Tenemos la intenci\u00f3n de escribir otro <code>String</code> en el archivo, pero al hacerlo, necesitamos registrar la longitud en el archivo. Una vez m\u00e1s, recurrimos a <code>writeInt()</code> para registrar un valor <code>int</code>. En la siguiente l\u00ednea, usamos <code>writeBytes()</code> en lugar de <code>writeChars()</code> para demostrar c\u00f3mo podemos escribir una matriz de bytes en lugar de una cadena. La clase <code>DataOutputStream</code> se ocupa de los detalles de convertir un <code>String</code> en una matriz de bytes. Finalmente, escribimos otro valor int en la secuencia.</p> <p>A continuaci\u00f3n, se ejecuta un ciclo <code>for</code> en la l\u00ednea 21. Dentro del ciclo <code>for</code>, demostramos como escribir diferentes tipos primitivos en el archivo. Podemos usar <code>writeByte()</code> para un <code>byte</code>, <code>writeDouble()</code> para un <code>double</code>, y as\u00ed sucesivamente para cada tipo primitivo. La clase <code>DataOutputStream</code> conoce el tama\u00f1o de cada tipo primitivo y escribe el n\u00famero correcto de bytes para cada primitivo.</p> <p>Cuando terminamos de escribir el objeto, lo abrimos nuevamente para leerlo. La l\u00ednea 33 crea un objeto <code>FileInputStream</code> que acepta la ruta al archivo en su constructor. El objeto <code>FileInputStream</code> est\u00e1 encadenado a <code>DataInputStream</code> pas\u00e1ndolo al constructor de <code>DataInputStream</code>. Aplicamos la funci\u00f3n <code>use()</code> para garantizar que todos los recursos est\u00e9n correctamente cerrados.</p> <p>La lectura del archivo requiere que el archivo se lea en el mismo orden en que se escribe. Nuestra primera orden por tanto, deber\u00eda ser tomar el tama\u00f1o de la matriz de caracteres que escribimos en el archivo anteriormente. Usamos <code>readInt()</code> en la l\u00ednea 35 seguido de un ciclo <code>for</code> que termina en el tama\u00f1o de la matriz en la l\u00ednea 36. Cada iteraci\u00f3n del ciclo <code>for</code> llama a <code>readChar()</code> y la cadena se imprime en la consola. Cuando terminamos, leemos un booleano en la l\u00ednea 39.</p> <p>Nuestra siguiente matriz fue una matriz de bytes. Una vez m\u00e1s, necesitamos su tama\u00f1o final, por lo que llamamos a <code>readInt()</code> en la l\u00ednea 41. Las l\u00edneas 42-44 recorren la matriz y llaman a <code>readByte()</code> hasta que finaliza el bucle. Cada <code>byte</code> se convierte en un objeto de car\u00e1cter mediante <code>toChar()</code>. En la l\u00ednea 45, leemos un <code>int</code> usando <code>readInt()</code>.</p> <p>La parte final del programa repite el ciclo for encontrado anteriormente. En este caso, se hace uso de un bucle <code>for</code> que termina despu\u00e9s de cinco iteraciones (l\u00ednea 47). Dentro de este, se llama a los m\u00e9todos <code>readByte()</code>, <code>readDouble()</code>, <code>readFloat()</code>, y as\u00ed sucesivamente. Despu\u00e9s de cada llamada se imprime el valor recuperado en la consola.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de programaci\u00f3n de Joan Arnedo Moreno (Institut Obert de Catalunya, IOC)</li> <li>Apuntes de programaci\u00f3n de Natividad Prieto, Francisco Marqu\u00e9s y Javier Piris (E.T.S. de Inform\u00e1tica, Universidad Polit\u00e9cnica de Valencia).</li> <li>Apuntes de programaci\u00f3n de Jose Luis Comesa\u00f1a.</li> <li>Create File</li> <li>Kotlinn data streams</li> <li>Read File</li> <li>Inputstream to String</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/","title":"UD 7 - 7.4.1 Text File","text":"","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#741-text-file","title":"7.4.1 Text File","text":"<p>En esta secci\u00f3n se proporciona una gu\u00eda detallada sobre c\u00f3mo trabajar con ficheros de texto en Kotlin, incluyendo c\u00f3mo escribir y leer ficheros, manejar caracteres especiales y consideraciones importantes al trabajar con ficheros de texto. Se incluyen ejemplos pr\u00e1cticos y recomendaciones para facilitar el manejo eficiente y seguro de ficheros en Kotlin.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#1-introduccion-a-ficheros-de-texto-en-kotlin","title":"1. Introducci\u00f3n a Ficheros de Texto en Kotlin","text":"<p>El trabajo con ficheros de texto es una capacidad esencial en la programaci\u00f3n que permite a las aplicaciones leer y escribir datos persistentes. Kotlin, gracias a su interoperabilidad con Java y sus propias abstracciones de alto nivel, facilita considerablemente estas tareas, proporcionando un conjunto de herramientas eficaces y sencillas de usar que mejoran tanto la productividad del desarrollador como la seguridad del c\u00f3digo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#11-por-que-ficheros-de-texto","title":"1.1. \u00bfPor Qu\u00e9 Ficheros de Texto?","text":"<p>Los ficheros de texto se utilizan ampliamente para almacenar y transferir datos debido a su simplicidad, interoperabilidad entre diferentes sistemas y facilidad de edici\u00f3n y visualizaci\u00f3n. Desde la configuraci\u00f3n de aplicaciones hasta el almacenamiento de grandes vol\u00famenes de datos, los ficheros de texto ofrecen una forma flexible y accesible de manejar informaci\u00f3n.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#12-ventajas-de-kotlin","title":"1.2. Ventajas de Kotlin","text":"<p>Kotlin se destaca en el manejo de ficheros de texto por varias razones:</p> <ul> <li>Sintaxis Concisa: Kotlin reduce la verbosidad t\u00edpica de Java, permitiendo realizar operaciones complejas con ficheros en menos l\u00edneas de c\u00f3digo y de manera m\u00e1s legible.</li> <li>Seguridad de Tipos: Kotlin maneja la nulidad a nivel del sistema de tipos, lo que reduce el riesgo de errores comunes como <code>NullPointerException</code>.</li> <li>Interoperabilidad con Java: Kotlin puede utilizar todas las bibliotecas de Java para manejar ficheros, incluyendo <code>java.io.File</code>, proporcionando una gran cantidad de funcionalidades mientras se a\u00f1aden mejoras espec\u00edficas de Kotlin.</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#13-operaciones-basicas-con-ficheros","title":"1.3. Operaciones B\u00e1sicas con Ficheros","text":"<p>En Kotlin, las operaciones m\u00e1s comunes con ficheros de texto incluyen:</p> <ul> <li>Lectura de ficheros: Puede realizarse de manera simple con funciones como <code>readText()</code> para leer el contenido completo del fichero en una cadena de texto, o <code>readLines()</code> para obtener una lista de todas las l\u00edneas del fichero.</li> <li>Escritura en ficheros: Con <code>writeText()</code>, se puede escribir una cadena de texto en un fichero, sobrescribiendo su contenido anterior, o <code>appendText()</code> para a\u00f1adir texto al final del fichero existente.</li> <li>Manejo de ficheros y directorios: Kotlin permite crear, borrar, y verificar la existencia de ficheros y directorios con m\u00e9todos como <code>createNewFile()</code>, <code>delete()</code>, y <code>exists()</code>.</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#14-ejemplo-introductorio","title":"1.4. Ejemplo Introductorio","text":"<pre><code>import java.io.File\n\nfun main() {\n    // Crear o abrir un fichero\n    val miFichero = File(\"miArchivo.txt\")\n\n    // Escribir en el fichero\n    miFichero.writeText(\"Hola, Kotlin.\\n\")\n\n    // Leer del fichero\n    val contenido = miFichero.readText()\n    println(contenido)\n}\n</code></pre> <p>Este ejemplo demuestra c\u00f3mo crear un fichero, escribir un simple mensaje y luego leer el mensaje del fichero, todo ello con pocas l\u00edneas de c\u00f3digo gracias a las funciones de Kotlin dise\u00f1adas para trabajar de forma eficiente con ficheros de texto.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#2-escribir-en-un-fichero-de-texto-en-kotlin","title":"2. Escribir en un Fichero de Texto en Kotlin","text":"<p>Escribir en ficheros de texto es una operaci\u00f3n fundamental en la mayor\u00eda de las aplicaciones, desde el registro de eventos (logging) hasta la generaci\u00f3n de reportes. Kotlin ofrece m\u00e9todos directos y seguros para escribir en ficheros, facilitando esta tarea con su sintaxis concisa y expresiva.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#21-abrir-o-crear-un-fichero-para-escritura","title":"2.1. Abrir o Crear un Fichero para Escritura","text":"<p>Antes de escribir en un fichero, primero debemos tener una referencia a este fichero. En Kotlin, esto se hace instanciando un objeto de la clase <code>File</code> del paquete <code>java.io</code>, que es totalmente accesible gracias a la interoperabilidad de Kotlin con Java.</p> <pre><code>import java.io.File\n\nval miFichero = File(\"miArchivo.txt\")\n</code></pre> <p>Si el fichero especificado no existe, se crear\u00e1 uno nuevo al realizar la escritura. Si ya existe, su contenido puede ser sobrescrito o complementado, dependiendo del m\u00e9todo que se utilice.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#22-escribir-texto-en-el-fichero","title":"2.2. Escribir Texto en el Fichero","text":"<p>Kotlin simplifica la escritura en ficheros con el m\u00e9todo <code>writeText()</code>, que toma una cadena de caracteres como argumento y la escribe en el fichero, sobrescribiendo cualquier contenido previo.</p> <pre><code>miFichero.writeText(\"Este es un nuevo contenido.\\n\")\n</code></pre> <p>Para a\u00f1adir texto a un fichero existente sin sobrescribir su contenido, se puede usar <code>appendText()</code>:</p> <pre><code>miFichero.appendText(\"Este texto se a\u00f1ade al final.\\n\")\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#23-cerrar-el-fichero","title":"2.3. Cerrar el Fichero","text":"<p>Una de las ventajas de trabajar con ficheros en Kotlin es que no es necesario cerrarlos expl\u00edcitamente cuando se usan <code>writeText()</code> o <code>appendText()</code>. Estas funciones se encargan del manejo de recursos autom\u00e1ticamente, asegurando que el fichero se cierre adecuadamente despu\u00e9s de la operaci\u00f3n.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#24-ejemplo-practico-registro-de-eventos","title":"2.4. Ejemplo Pr\u00e1ctico: Registro de Eventos","text":"<p>A continuaci\u00f3n, se muestra un ejemplo pr\u00e1ctico de c\u00f3mo podr\u00edas usar la escritura en ficheros para implementar un simple sistema de registro de eventos (logging).</p> <pre><code>import java.io.File\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\n\nfun registrarEvento(evento: String) {\n    val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\n    val timestamp = LocalDateTime.now().format(formatter)\n    File(\"registroDeEventos.txt\").appendText(\"[$timestamp] $evento\\n\")\n}\n\nfun main() {\n    registrarEvento(\"Inicio de la aplicaci\u00f3n\")\n    // Simular otras operaciones...\n    registrarEvento(\"Operaci\u00f3n realizada correctamente\")\n}\n</code></pre> <p>Este c\u00f3digo a\u00f1ade entradas de registro a un fichero, incluyendo una marca de tiempo para cada evento, demostrando c\u00f3mo <code>appendText()</code> puede ser especialmente \u00fatil para mantener un historial de eventos sin sobrescribir los registros anteriores.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#3-leer-de-un-fichero-de-texto-en-kotlin","title":"3. Leer de un Fichero de Texto en Kotlin","text":"<p>La lectura de ficheros de texto en Kotlin es una operaci\u00f3n que se beneficia de la simplicidad y potencia del lenguaje, permitiendo procesar contenidos de archivos de manera eficiente y segura.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#31-abrir-el-fichero-para-lectura","title":"3.1. Abrir el Fichero para Lectura","text":"<p>Al igual que para la escritura, la lectura de un fichero comienza por obtener una referencia al archivo deseado mediante la clase <code>File</code>. No es necesario abrir expl\u00edcitamente el fichero en un modo de lectura; el acceso se determina por la funci\u00f3n que se utilice para leer el contenido.</p> <pre><code>import java.io.File\n\nval miFichero = File(\"miArchivo.txt\")\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#32-leer-el-contenido-completo-del-fichero","title":"3.2. Leer el Contenido Completo del Fichero","text":"<p>Kotlin proporciona el m\u00e9todo <code>readText()</code> para leer el contenido completo de un fichero de texto en una sola operaci\u00f3n, devolviendo todo el texto como una cadena (<code>String</code>).</p> <pre><code>val contenido = miFichero.readText()\nprintln(contenido)\n</code></pre> <p>Este m\u00e9todo es conveniente cuando se necesita trabajar con el texto completo del fichero, pero puede ser ineficiente con archivos muy grandes debido a las limitaciones de memoria.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#33-leer-el-fichero-linea-por-linea","title":"3.3. Leer el Fichero L\u00ednea por L\u00ednea","text":"<p>Para ficheros grandes o cuando se necesita procesar el archivo l\u00ednea por l\u00ednea, Kotlin ofrece <code>readLines()</code>, que devuelve una lista de todas las l\u00edneas del fichero como cadenas (<code>List&lt;String&gt;</code>).</p> <pre><code>val lineas = miFichero.readLines()\nfor (linea in lineas) {\n    println(linea)\n}\n</code></pre> <p>Leer el fichero de esta manera puede ser m\u00e1s eficiente para procesar archivos grandes, ya que permite iterar sobre las l\u00edneas del fichero sin cargar todo el contenido en memoria a la vez.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#34-uso-de-uselines-para-una-gestion-de-recursos-eficiente","title":"3.4. Uso de <code>useLines</code> para una Gesti\u00f3n de Recursos Eficiente","text":"<p>Kotlin tambi\u00e9n proporciona una manera eficiente y segura de manejar la lectura de archivos grandes a trav\u00e9s del m\u00e9todo <code>useLines</code>, que abre un flujo de todas las l\u00edneas del archivo, permitiendo procesar cada una de ellas de manera secuencial. Este m\u00e9todo asegura que el fichero se cierre correctamente una vez que se completa el procesamiento, incluso si ocurre una excepci\u00f3n.</p> <pre><code>miFichero.useLines { lineas -&gt;\n    lineas.forEach { linea -&gt;\n        println(linea)\n    }\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#35-ejemplo-practico-contar-lineas-de-un-fichero","title":"3.5. Ejemplo Pr\u00e1ctico: Contar L\u00edneas de un Fichero","text":"<p>Un caso de uso com\u00fan es contar el n\u00famero de l\u00edneas de un fichero, lo cual se puede hacer eficientemente de la siguiente manera:</p> <pre><code>val numeroDeLineas = miFichero.useLines { it.count() }\nprintln(\"El fichero tiene $numeroDeLineas l\u00edneas.\")\n</code></pre> <p>Este ejemplo demuestra c\u00f3mo se puede usar <code>useLines</code> para realizar operaciones m\u00e1s complejas sobre el contenido del fichero de manera eficiente y segura.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#4-caracteres-especiales-en-ficheros-de-texto","title":"4. Caracteres Especiales en Ficheros de Texto","text":"<p>Al trabajar con ficheros de texto, es crucial entender el papel que juegan ciertos caracteres especiales. Estos caracteres pueden afectar el formato del texto y son esenciales para el procesamiento correcto de los datos.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#41-eof-end-of-file-fin-de-archivo","title":"4.1. EOF (End of File / Fin de Archivo)","text":"<ul> <li>Nombre en ingl\u00e9s: End of File (EOF)</li> <li>Nombre en espa\u00f1ol: Fin de Archivo</li> <li>Descripci\u00f3n: EOF no es un car\u00e1cter visible dentro del texto del fichero pero es una condici\u00f3n importante que indica el final del contenido de un fichero.</li> <li>Ejemplo:     <pre><code>val reader = File(\"miArchivo.txt\").bufferedReader()\nvar linea: String?\nwhile (reader.readLine().also { linea = it } != null) {\n    println(linea)\n}\n// Al llegar al EOF, la lectura se detiene.\n</code></pre></li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#42-salto-de-linea-n-lf-line-feed","title":"4.2. Salto de L\u00ednea (\\n / LF - Line Feed)","text":"<ul> <li>Nombre en ingl\u00e9s: Line Feed (LF)</li> <li>Nombre en espa\u00f1ol: Salto de L\u00ednea</li> <li>Descripci\u00f3n: Representa el final de una l\u00ednea de texto y el inicio de otra. Esencial para estructurar el contenido en l\u00edneas separadas.</li> <li>Ejemplo:     <pre><code>val texto = \"Primera l\u00ednea\\nSegunda l\u00ednea\"\nprintln(texto) // Imprime el texto en dos l\u00edneas separadas.\n</code></pre></li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#43-retorno-de-carro-r-cr-carriage-return","title":"4.3. Retorno de Carro (\\r / CR - Carriage Return)","text":"<ul> <li>Nombre en ingl\u00e9s: Carriage Return (CR)</li> <li>Nombre en espa\u00f1ol: Retorno de Carro</li> <li>Descripci\u00f3n: En los sistemas basados en Windows, se utiliza junto con \\n para crear un salto de l\u00ednea (\\r\\n). Solo o en otros contextos, mueve el cursor al inicio de la l\u00ednea actual.</li> <li>Ejemplo:     <pre><code>val textoWindows = \"Primera l\u00ednea\\r\\nSegunda l\u00ednea\"\nprintln(textoWindows) // Funciona como salto de l\u00ednea en Windows.\n</code></pre></li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#44-espacio-en-blanco-space","title":"4.4. Espacio en Blanco (' ' / Space)","text":"<ul> <li>Nombre en ingl\u00e9s: Space</li> <li>Nombre en espa\u00f1ol: Espacio</li> <li>Descripci\u00f3n: Un car\u00e1cter que crea una separaci\u00f3n horizontal entre caracteres o palabras.</li> <li>Ejemplo:     <pre><code>val textoConEspacios = \"Kotlin es incre\u00edble\"\nprintln(textoConEspacios) // Muestra el texto con espacios entre palabras.\n</code></pre></li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#45-tabulador-t-tab","title":"4.5. Tabulador (\\t / Tab)","text":"<ul> <li>Nombre en ingl\u00e9s: Horizontal Tab (HT)</li> <li>Nombre en espa\u00f1ol: Tabulador</li> <li>Descripci\u00f3n: Proporciona una separaci\u00f3n horizontal m\u00e1s significativa que un espacio, com\u00fanmente utilizado para alinear texto o datos en columnas.</li> <li>Ejemplo:     <pre><code>val textoConTabs = \"Nombre:\\tJohn Doe\\nEdad:\\t30\"\nprintln(textoConTabs)\n// Imprime el texto con tabulaciones, alineando las columnas.\n</code></pre></li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#46-consideraciones-adicionales","title":"4.6. Consideraciones Adicionales","text":"<p>El manejo adecuado de estos caracteres especiales es fundamental para la correcta lectura, escritura y presentaci\u00f3n de los datos de un fichero de texto. Algunas funciones de Kotlin, como <code>print()</code> y <code>println()</code>, interpretan estos caracteres autom\u00e1ticamente, mientras que en otras situaciones, puede ser necesario gestionarlos de manera expl\u00edcita para lograr el formato deseado.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#5-recomendaciones-finales-y-consideraciones-al-trabajar-con-ficheros-de-texto","title":"5. Recomendaciones Finales y Consideraciones al Trabajar con Ficheros de Texto","text":"<p>Manejar ficheros de texto en Kotlin, aunque es una tarea simplificada gracias a las funcionalidades del lenguaje, requiere atenci\u00f3n a ciertos detalles para asegurar que el proceso sea eficiente, seguro y acorde a las necesidades de la aplicaci\u00f3n.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#51-verificar-la-existencia-del-fichero","title":"5.1. Verificar la Existencia del Fichero","text":"<p>Antes de intentar leer o escribir en un fichero, es una buena pr\u00e1ctica verificar si el fichero existe para evitar errores en tiempo de ejecuci\u00f3n.</p> <pre><code>val miFichero = File(\"miArchivo.txt\")\nif (!miFichero.exists()) {\n    println(\"El fichero no existe.\")\n    return\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#52-manejo-eficiente-de-ficheros-grandes","title":"5.2. Manejo Eficiente de Ficheros Grandes","text":"<p>Para ficheros grandes, es recomendable utilizar m\u00e9todos que lean o escriban de manera secuencial y no carguen todo el contenido en memoria a la vez. Kotlin ofrece varias funciones, como <code>useLines</code>, para manejar eficientemente grandes vol\u00famenes de datos.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#53-tratamiento-de-caracteres-especiales","title":"5.3. Tratamiento de Caracteres Especiales","text":"<p>Ser consciente de c\u00f3mo los caracteres especiales (\\n, \\r, \\t, etc.) afectan el contenido y formato de tu fichero. Aseg\u00farate de manejarlos adecuadamente seg\u00fan el contexto de tu aplicaci\u00f3n.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#54-seguridad-y-excepciones","title":"5.4. Seguridad y Excepciones","text":"<p>Al trabajar con entrada/salida de ficheros, siempre existe el riesgo de enfrentarse a excepciones. Kotlin facilita el manejo de estas a trav\u00e9s de bloques <code>try-catch</code>.</p> <pre><code>try {\n    val contenido = File(\"miArchivo.txt\").readText()\n    println(contenido)\n} catch (e: Exception) {\n    println(\"Ocurri\u00f3 un error al leer el fichero: ${e.message}\")\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#55-ejemplo-integrado-aplicacion-de-registro-de-eventos","title":"5.5. Ejemplo Integrado: Aplicaci\u00f3n de Registro de Eventos","text":"<p>A continuaci\u00f3n, se presenta un ejemplo que combina la lectura, escritura y manejo de caracteres especiales en una aplicaci\u00f3n simple de registro de eventos. Este ejemplo tambi\u00e9n ilustra c\u00f3mo verificar la existencia de un fichero y manejar posibles excepciones.</p> <pre><code>import java.io.File\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\n\nfun registrarEvento(fichero: File, evento: String) {\n    if (!fichero.exists()) {\n        println(\"Creando fichero de registro...\")\n        fichero.createNewFile()\n    }\n\n    try {\n        val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"))\n        fichero.appendText(\"[$timestamp] $evento\\n\")\n    } catch (e: Exception) {\n        println(\"Error al registrar evento: ${e.message}\")\n    }\n}\n\nfun main() {\n    val miFicheroDeRegistro = File(\"registroDeEventos.txt\")\n\n    registrarEvento(miFicheroDeRegistro, \"Inicio de la aplicaci\u00f3n\")\n    // Simula m\u00e1s operaciones...\n    registrarEvento(miFicheroDeRegistro, \"Operaci\u00f3n realizada correctamente\")\n\n    println(\"Eventos registrados:\\n${miFicheroDeRegistro.readText()}\")\n}\n</code></pre> <p>Este c\u00f3digo crea un fichero de registro si no existe, registra eventos con marcas de tiempo y finalmente lee y muestra todos los eventos registrados. Demuestra un manejo efectivo y seguro de ficheros en Kotlin, considerando las pr\u00e1cticas recomendadas y las consideraciones necesarias para trabajar con archivos de texto.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.1.-TextFile/#fuente","title":"Fuente","text":"<ul> <li>Writing to a File in kotlin</li> <li>Reading from a File in kotlin</li> <li>Baeldung Kotlin IO</li> <li>Book: The joy of kotlin</li> <li>Kotlin IO</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/","title":"7.5.-GUI","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#interface-grafica-de-usuario-vs-cli","title":"Interface gr\u00e1fica de usuario vs CLI","text":"<p>La Interfaz gr\u00e1fica de usuario o GUI (Graphic User Interface) es el entorno visual de im\u00e1genes y objetos mediante el cual una m\u00e1quina y un usuario interact\u00faan. A mediados de los setentas las GUI comenzaron a sustituir a las interfaces de l\u00ednea de comando (CLI), y esto permiti\u00f3 que la interacci\u00f3n con las computadoras fuera m\u00e1s sencilla e intuitiva.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#para-que-sirven-las-interfaces-graficas-de-usuario","title":"\u00bfPara qu\u00e9 sirven las Interfaces gr\u00e1ficas de usuario?","text":"<p>Su funci\u00f3n principal es simplificar la comunicaci\u00f3n entre una m\u00e1quina o un sistema operativo y un usuario. Antes de que se desarrollaran y popularizaron las GUI, solo las personas con conocimientos profundos de inform\u00e1tica pod\u00edan usar un computador, pero las interfaces gr\u00e1ficas sustituyeron la complejidad de los comandos por acciones predeterminadas simbolizadas por elementos visuales muy sencillos de comprender. A mediados de los ochentas, Mac se convirti\u00f3 en el referente de las interfaces gr\u00e1ficas amigables desarrollando equipos con funciones muy complejas pero \u201ctan f\u00e1ciles de usar como una tostadora\u201d, y por esas mismas fechas Microsoft lanz\u00f3  Windows 1.0, un sistema operativo que se caracterizaba por tener una interfaz gr\u00e1fica similar, lo que le vali\u00f3 una demanda millonaria de parte de Apple. Una buena GUI no solo es importante para los programas, sistemas operativos y aplicaciones. Se estima que el 68% de los visitantes que abandonan un sitio web lo hacen debido a que la experiencia de usuario, incluyendo la Interfaz, no est\u00e1 optimizada para sus necesidades y expectativas.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#cuales-son-los-elementos-de-la-interfaz-grafica-de-usuario","title":"\u00bfCu\u00e1les son los elementos de la Interfaz gr\u00e1fica de usuario?","text":"<p>Las interfaces gr\u00e1ficas de usuario integraron en sus inicios una novedad que hoy en d\u00eda es de uso corriente: el mouse o rat\u00f3n, que fung\u00eda como puntero para se\u00f1alar y seleccionar los diferentes elementos de la GUI, que tradicionalmente se categorizaron como ventanas, iconos o carpetas. Hoy en d\u00eda los elementos visuales (widgets) de una interfaz son muy similares en esencia, s\u00f3lo que cada d\u00eda los dise\u00f1adores tratan de hacerlos m\u00e1s amigables e intuitivos. Adem\u00e1s, los dispositivos m\u00f3viles no requieren de rat\u00f3n o puntero pues cuentan con pantallas t\u00e1ctiles. </p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#como-crear-una-buena-interfaz-grafica-de-usuario","title":"\u00bfC\u00f3mo crear una buena Interfaz gr\u00e1fica de usuario?","text":"<p>Una buena GUI se caracteriza por:</p> <ul> <li>Ser sencilla de comprender y usar</li> <li>La curva de aprendizaje es acelerada y es f\u00e1cil recordar su funcionamiento</li> <li>Los elementos principales son muy identificables</li> <li>Facilitar y predecir las acciones m\u00e1s comunes del usuario</li> <li>La informaci\u00f3n est\u00e1 adecuadamente ordenada mediante men\u00fas, iconos, barras, etc.</li> <li>Las operaciones son r\u00e1pidas, intuitivas y reversibles</li> <li>La interfaz expresa claramente el estado del sistema o las operaciones, y brinda elementos de ayuda.</li> <li>La navegabilidad y la usabilidad son \u00f3ptimas.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#caracteristicas-generales-de-la-gui","title":"Caracter\u00edsticas generales de la GUI:","text":"<ul> <li>Facilidad</li> <li>Dise\u00f1o ergon\u00f3mico mediante el uso de men\u00fas, barras de acciones o \u00edconos</li> <li>Operaciones r\u00e1pidas, reversibles; que sea de cambios inmediatos</li> <li>Contiene herramientas de ayuda que orientan al usuario.</li> </ul> <p>Para la realizaci\u00f3n de un buen desarrollo GUI, se debe tener en cuenta:</p> <ul> <li>Consistencia:  Todos los elementos de la GUI se deben regir por las mismas normas</li> <li>Palabras y legibilidad:  Uso de colores y fuentes adecuadas, uso correcto de may\u00fasculas y min\u00fasculas</li> <li>Color: Tener en cuenta el significado de los colores, que \u00e9stos permitan la legibilidad y que den una buena apariencia en la pantalla</li> <li>Accesibilidad:  Debe ser accesible en lo posible a todos teniendo en cuenta discapacidades</li> <li>Necesidades de los usuarios:  Los usuarios deben encontrar lo que buscan</li> <li>Contenidos:  Deben ser fiables</li> <li>Funcionalidad:  Debe reducir los pasos para la realizaci\u00f3n de una acci\u00f3n</li> <li>Sistema de b\u00fasqueda: Debe contar con diferentes maneras de realizar la b\u00fasqueda</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#quienes-son-responsables-de-la-interfaz-grafica-de-usuario","title":"\u00bfQui\u00e9nes son responsables de la Interfaz gr\u00e1fica de usuario?","text":"<p>Detr\u00e1s de cualquier Interfaz gr\u00e1fica de usuario existe un programa, sistema operativo o aplicaci\u00f3n. Por eso, la GUI suele ser un trabajo en conjunto entre desarrolladores y dise\u00f1adores que buscan la mejor manera de que el usuario pueda interactuar con el programa mediante elementos visuales f\u00e1ciles de comprender.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#entornos-graficos","title":"Entornos gr\u00e1ficos","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-multiplataforma","title":"Aplicaciones multiplataforma","text":"<p>Las aplicaciones multiplataforma son aquellas destinadas a dispositivos m\u00f3viles,  aplicaciones de escritorio u otro tipos de sistemas embebidos.</p> <p>Para programar los entornos gr\u00e1ficos de estas aplicaciones es necesario un Software Development Kit o SDK, que es un conjunto de herramientas que, entre otras cosas, hacen posible la creaci\u00f3n de los elementos necesarios para una interfaz. Estos SDK pueden ser:</p> <ul> <li>Oficiales: los proporcionan los fabricantes, como por ejemplo iOS SDK de Apple.</li> <li>Alternativos: desarrollados por terceros, como GTK+ o Qt.</li> <li>Multiplataforma: tambi\u00e9n desarrollado por terceros, algunos disponen de bindings para que se usen en varios sistemas como GTK+ o Qt o nativos al lenguajes como Swing de Java.</li> </ul> <p>En los siguientes apartados destacaremos algunos de los lenguajes y librer\u00edas que se utilizan actualmente en estas plataformas.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-moviles","title":"Aplicaciones m\u00f3viles","text":"<p>Android tiene como lenguaje oficial para crear sus aplicaciones Java (JVM), lo que hace que este sea uno de los lenguajes m\u00e1s utilizados para el desarrollo en este sistema. Aunque Kotlin, creado por JetBrains es 100% compatible con la JVM y todas las librer\u00edas, ha sido nombrado por google lenguaje cooficial aportando adem\u00e1s simplicidad en el c\u00f3digo.</p> <p>Por otro lado, las aplicaciones desarrolladas para iOS pueden utilizar Objetive-C o Swift, una alternativa al primero creado por Apple, con mejor rendimiento y totalmente compatible con todos los dispositivos de Apple.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-de-escritorio-y-sistemas-embebidos","title":"Aplicaciones de escritorio y sistemas embebidos","text":"<p>Este tipo de aplicaciones se suelen desarrollar con Java o C++ generalmente.</p> <p>Java junto con la librer\u00eda gr\u00e1fica Swing que ya viene incluida en su JDK, forman un combo con el que podemos desarrollar este tipo de aplicaciones.</p> <p>C++ junto con Qt tambi\u00e9n son utilizados de forma nativa para crear interfaces gr\u00e1ficas en varias plataformas, adem\u00e1s destacar que es utilizado por el entorno de escritorio GNU/Linux: KDE.</p> <p>Python es un lenguaje emergente que se est\u00e1 imponiendo en muchos \u00e1mbitos de la programaci\u00f3n, entre ellos las aplicaciones de escritorio y sistemas embebidos. Este lenguaje dispone de una comunidad muy grande y activa que desarrolla binding para poder utilizar las librer\u00edas gr\u00e1ficas como GTK, Qt y Swing.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#videojuegos","title":"Videojuegos","text":"<p>Los videojuegos son un tipo de aplicaci\u00f3n muy demandada en la actualidad, con suficiente entidad como para distinguirlos de los tipos de aplicaciones anteriores.</p> <p>Uno de los lenguajes m\u00e1s utilizados en este sector es C# junto con la herramienta Unity, que proporciona un editor, un motor para la f\u00edsica 2D y la f\u00edsica 3D, renderizado, animaci\u00f3n, audio, etc. Esta potente herramienta no solo se utiliza para el desarrollo de videojuegos, sino para crear experiencias en realidad virtual y cortos animados. Unity adem\u00e1s permite la exportaci\u00f3n del trabajo a multitud de plataformas, como m\u00f3viles, videoconsolas, ordenadores, etc.</p> <p>Otro de los lenguajes m\u00e1s utilizados para este prop\u00f3sito es Java junto con frameworks como LibGDX o JMonkeyEngine y Python con el framework Pygame.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-web","title":"Aplicaciones web","text":"<p>Aunque en el mundo web los primeros navegadores eran en modo texto y a\u00fan siguen existiendo (como Lynx), la web en s\u00ed es gr\u00e1fica. Se suele emplear el t\u00e9rmino front-end para la parte del cliente, es decir, el entorno gr\u00e1fico de una aplicaci\u00f3n web y back-end para la parte del servidor con la que se gestionan todos los datos. Centr\u00e1ndonos en el front-end, podremos distinguir tres pilares b\u00e1sicos que pasamos a definir a continuaci\u00f3n:</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#contenido-html","title":"Contenido: HTML","text":"<p>HTML (Hypertext Markup Languaje) es un lenguaje de marcado o etiquetado, el cual sirve para definir estructuras y contenido en la web. La diferencia con un lenguaje de programaci\u00f3n es que no dispone de las variables ni estructuras que afectan al comportamiento como condicionales, bucles etc.</p> <p>Al igual que otros lenguajes, HTML tambi\u00e9n ha evolucionado con el paso del tiempo, siendo la versi\u00f3n actual HTML5, que incorpora algunos elementos respecto a su versi\u00f3n anterior que hace que las aplicaciones web sean m\u00e1s diversas y funcionales, a\u00f1adiendo tambi\u00e9n sem\u00e1ntica a algunos de sus elementos.</p> <p>Por ejemplo, en HTML5 algunas de las estructuras para definir los elementos gr\u00e1ficos del entorno son:</p> <ul> <li>Radio button: <code>&lt;input type=\u201dradio\u201d&gt;</code></li> <li>Listas desplegables: <code>&lt;select&gt;&lt;option&gt;...&lt;/option&gt;...&lt;/select&gt;</code></li> <li>Bot\u00f3n: <code>&lt;button&gt;&lt;/button&gt;</code></li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#estilos-css","title":"Estilos: CSS","text":"<p>CSS (Cascading Style Sheets) es un lenguaje de dise\u00f1o gr\u00e1fico que permite personalizar la presentaci\u00f3n de un documento escrito en un lenguaje de marcado, como HTML, al cual est\u00e1 muy ligado.</p> <p>Estos dos lenguajes se almacenan en ficheros alojados en un servidor. Cuando alg\u00fan cliente como un navegador hace una consulta a una p\u00e1gina web, el servidor devuelve estos ficheros y es el navegador, cuando los recibe, el que se encarga de interpretar el contenido de ambos lenguajes para mostrar la p\u00e1gina tal y como la vemos.</p> <p>La versi\u00f3n actual es CSS3, la cual destaca respecto de su versi\u00f3n anterior en incorporar algunos estilos muy demandados por la comunidad como el redondeo de esquinas en los elementos, gradiente, transiciones, animaciones y las Media-Queries, muy populares actualmente para satisfacer la cantidad de tama\u00f1os y resoluciones de pantallas en las que una aplicaci\u00f3n web puede cargarse (m\u00f3viles, tablets, pcs, etc) y conseguir un dise\u00f1o responsivo.</p> <p>Por \u00faltimo, destacamos Bootstrap, un framework front-end para CSS utilizado en las empresas que se dedican al desarrollo web con el que poder construir interfaces responsivas.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#logica-javascript","title":"L\u00f3gica: JavaScript","text":"<p>JavaScript es un lenguaje de alto nivel que aporta l\u00f3gica y dinamismo a la parte front-end de las aplicaciones web, por ejemplo, las acciones que se desencadenan en la aplicaci\u00f3n cuando un usuario utiliza un buscador, un formulario, un calendario, etc. Adem\u00e1s, juega un papel muy importante a la hora de validar datos antes de enviarlos al servidor, evitando la carga excesiva de este.</p> <p>La librer\u00eda jQuery es \u00e1mpliamente utilizada en el mundo web ya que a trav\u00e9s de ella se simplifica mucho el c\u00f3digo nativo que escribimos con JavaScript, por lo que escribiendo el mismo c\u00f3digo en jQuery conseguimos el mismo resultado.</p> <p>Por otro lado, encontramos la librer\u00eda React, creada por Facebook, que se centra en la creaci\u00f3n de interfaces de usuario interactivas de forma sencilla.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#compose-introduccion","title":"Compose: Introducci\u00f3n","text":"<p>Jetpack Compose es la nueva forma de programar interfaces de usuario propuesta por Google en 2019.</p> <p>Google liber\u00f3 su versi\u00f3n Beta en Febrero de 2021. Podemos empezar ya a incluir Jetpack Compose en nuestras apps ya que Google ha anunciado que la especificaci\u00f3n del API no variar\u00e1.</p> <p>Esta tecnolog\u00eda sigue la misma direcci\u00f3n que Swift UI o Flutter usando un paradigma declarativo. Esto es un buen s\u00edntoma, ya que diferentes plataformas siguen una misma direcci\u00f3n.</p> <p>Jetpack Compose se convertir\u00e1 en el nuevo est\u00e1ndar de desarrollo de interfaces de usuario en Android. Jetbrains ha trabajado para traer este mismo est\u00e1ndar:</p> <ul> <li>Al Escritorio con Compose for Desktop, con ejemplos de c\u00f3digo en github.</li> <li>A la web, con Compose for Web, con ejemplos de c\u00f3digo en github.</li> </ul> <p>Las ventajas principales de Jetpack Compose son:</p> <ul> <li>Menos c\u00f3digo para construir interfaces.</li> <li>C\u00f3digo mucho m\u00e1s intuitivo.</li> <li>Facilidad a la hora de reutilizar componentes.</li> <li>Programaci\u00f3n de vistas en Kotlin.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#programacion-imperativa-vs-declarativa","title":"Programaci\u00f3n Imperativa vs Declarativa","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#imperativa","title":"Imperativa:","text":"<p>Se define paso a paso la casu\u00edstica de la aplicaci\u00f3n, es decir, cuando se pinta algo, cuando cambia de color, etc.... Se indica a trav\u00e9s del c\u00f3digo lo que tiene que hacer y como tiene que hacerlo.</p> <p>Manipular las vistas de forma manual</p> <ul> <li>Aumenta la probabilidad de errores:</li> <li>Es f\u00e1cil olvidarse de actualizar estados de vistas.</li> <li>Es f\u00e1cil crear estados ilegales (conflicto de actualizaciones)</li> <li>El mantenimiento de los estados de las vistas se hace complejo.</li> </ul> <p>La mayor\u00eda de las veces usamos un paradigma imperativo a la hora de programar aplicaciones, aunque la industria est\u00e1 migrando a un modelo de UI declarativo:</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#declarativa","title":"Declarativa:","text":"<p>Con Jetpack Compose tenemos que cambiar nuestra mentalidad para empezar a utilizar un paradigma declarativo:</p> <ul> <li>Nuestra interfaz de usuario estar\u00e1 controlada por distintos estados que se ir\u00e1n actualizando.</li> <li>Cada vez que un estado cambie, la interfaz se refrescar\u00e1 y se producir\u00e1 una recomposici\u00f3n.</li> <li>Para lidiar con la recomposici\u00f3n, tendremos que contemplar todos los posibles estados con anterioridad.</li> <li>Es costoso en t\u00e9rminos computacionales: Recomposici\u00f3n.</li> <li>Aunque al principio parezca m\u00e1s complicado, este paradigma reduce la inconsistencia de estados, favorece la legibilidad del c\u00f3digo y la reutilizaci\u00f3n de los componentes.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#composicion","title":"Composici\u00f3n","text":"<p>La composici\u00f3n consiste en la reconstrucci\u00f3n de los componentes que forma la interface de usuario hasta reconstruir la interface completa. En Compose, las funciones que se encargan de esta reconstrucci\u00f3n se anotan con <code>@Composable</code>, es decir, todas las funciones que admiten composici\u00f3n deben ser anotadas con <code>@Composable</code>.</p> <p>Las funciones @Composable:</p> <ul> <li>Son funciones que reciben datos y emiten elementos de UI</li> <li>Pueden usar sentencias <code>for</code>, <code>if</code>, etc. para genera la potencia del lenguaje.</li> <li>Pueden aceptar par\u00e1metros. La l\u00f3gica de la aplicaci\u00f3n describe la UI.</li> <li>No est\u00e1n ligadas a ninguna clase, pueden ser definidas en cualquier sitio.</li> <li>Deben empezar por letra may\u00fascula, ya que estas funciones act\u00faan como widgets.</li> </ul> <p>Por ejemplo, <code>Text()</code> es tambi\u00e9n una funci\u00f3n que admite composici\u00f3n y que se encarga de crear el elemento caja de texto en la UI.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#modo-preview","title":"Modo Preview","text":"<p>En Android existe una vista previa para los ficheros XML de Android que representan la interface gr\u00e1fica. En compose tambi\u00e9n existe un modo preview para el c\u00f3digo que construimos <code>@Preview</code>. El funcionamiento del modo preview puede varias entre Jetpack Compose y Compose Desktop.</p> <p>IntelliJ IDEA facilitar\u00e1 el preview de las vistas marcadas con esta anotaci\u00f3n. Tenemos tres tipos de modo de maquetaci\u00f3n: Code, Split (vista recomendada) y Design. Split y Design incorporan un modo interactivo (Interactive) que permite al desarrollador interactuar con la interfaz al igual que si estuviese interactuando con la aplicaci\u00f3n.</p> <p>Por tanto, para que nuestra interfaz aparezca en el modo interactivo tenemos que crear una funci\u00f3n <code>@Composable</code> y anotarla con la anotaci\u00f3n <code>@Preview</code>.</p> <pre><code>@Preview(showBackground = true)  \n@Composable  \nfun DefaultPreview() {  \n    MyApplicationTheme {  \n      Greeting(\"mates!!\")\n    }  \n}\n</code></pre> <p>Recuerda anotar con <code>@Preview</code> el mismo c\u00f3digo que le pasas a la funci\u00f3n <code>setContent</code> o en la funci\u00f3n <code>application</code>/<code>singleWindowApplication</code> dependiendo de si es Android o Desktop respectivamente. De esta forma siempre podr\u00e1s ver en la previsualizaci\u00f3n el contenido final de la pantalla.</p> <pre><code>setContent {  \n  MyApplicationTheme {  \n      Surface(color = MaterialTheme.colors.background) {  \n          Greeting(\"mates!!\")  \n      }  \n  }\n}\n</code></pre> <p>Si la pantalla de preview desaparece, recuerda cerrar la clase y volver a abrirla. El IDE realiza un an\u00e1lisis de c\u00f3digo sobre la clase en busca de una funci\u00f3n marcada con <code>@Preview</code> para lanzar la previsualizaci\u00f3n.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#primeros-componentes","title":"Primeros componentes","text":"<p>Como hemos comentado, Jetpack Compose se basa en funciones \"componibles\", anotadas con <code>@Composable</code>. Estas funciones permiten definir la interfaz de usuario de tu aplicaci\u00f3n mediante la descripci\u00f3n de c\u00f3mo deber\u00eda verse y proporcionando dependencias de datos, en lugar de centrarse en el proceso de construcci\u00f3n de la interfaz de usuario (inicializar un elemento, adjuntarlo a un padre, etc.).</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#mostrar-etiquetas","title":"Mostrar etiquetas:","text":"<p>Como se puede observar en el c\u00f3digo de abajo, la funci\u00f3n <code>Greeting()</code> contiene un elemento  <code>Text()</code>, y esta tambi\u00e9n es una funci\u00f3n etiquetada con <code>@Composable</code>.</p> <pre><code>@Composable  \nfun Greeting(name: String) {  \n    Text(text = \"Hello $name!\")  \n}\n</code></pre> <p>Repecto al c\u00f3digo anterior, podemos decir:</p> <ul> <li><code>Text()</code> es una funci\u00f3n propia del SDK de Android que admite composici\u00f3n.</li> <li><code>Text()</code> admite por par\u00e1metro argumentos como  <code>text</code>, <code>modifier</code>, <code>color</code>, <code>fontSize</code> , etc.</li> <li>Dichos par\u00e1metros pueden ser requeridos (como en el caso de  <code>text</code>) o no requeridos con valores por defecto (<code>color</code>, <code>modifier</code>). Consulta los par\u00e1metros de la funci\u00f3n <code>Text()</code>.</li> </ul> <p>Siempre que cambiemos valores de la interfaz, recuerda usar la opci\u00f3n Build Refresh para actualizar los valores en la Preview.</p> <p>Se pueden incluir las funciones Compose definidas directamente en la funci\u00f3n <code>setContent</code> y en Desktop en la funci\u00f3n <code>application</code>/<code>singleWindowApplication</code>. El bloque <code>setContent</code>/<code>application</code>/<code>singleWindowApplication</code> define el dise\u00f1o de la interface, por tanto, en este bloque, llamaremos a las funciones componibles. Las funciones componibles solo se pueden llamar desde otras funciones componibles.</p> <pre><code>class MainActivity : ComponentActivity() {  \n    override fun onCreate(savedInstanceState: Bundle?) {  \n        super.onCreate(savedInstanceState)  \n        setContent {  \n          Text(text = \"Hello mates!!\")  \n        }  \n    }  \n}\n</code></pre> <p>En Compose Desktop, el contenido tendr\u00e1 que ir dentro de la funci\u00f3n <code>application</code>, punto de entrada para la aplicaci\u00f3n, y que a la vez recibe un componente <code>@Composable</code>, normalmente un componente <code>Window</code>. Como puedes apreciar no hay rastros de <code>Activity</code>, ni de <code>setContent</code>.</p> <p>Un Ejemplo de lo anterior:</p> <pre><code>fun main() = application {\n    Window(onCloseRequest = ::exitApplication) {\n        App()\n    }\n}\n</code></pre> <p>y la funci\u00f3n <code>App</code> estar\u00e1 definida como <code>@Composable</code>.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#creacion-de-un-boton-y-manejo-de-eventos","title":"Creaci\u00f3n de un bot\u00f3n y manejo de eventos","text":"<p>Al igual que <code>Text()</code> , <code>Button()</code> es otra funci\u00f3n composable ofrecida por el SDK de Android.</p> <pre><code>@Composable  \nfun GreetingButton() {  \n    Button(onClick = {  \n        // Do something  \n    }) {\n\n    }  \n}\n</code></pre> <p>Uno de los par\u00e1metros que recibe la funci\u00f3n <code>Button()</code> es la funci\u00f3n bajo el argumento <code>onClick</code>, que act\u00faa como callback, y que ser\u00e1 notificado cada vez que se produzca un evento click sobre el bot\u00f3n.</p> <p>Button tiene como argumento una funci\u00f3n lambda, que admite composici\u00f3n, llamada <code>RowScope</code>. Mediante esta funci\u00f3n podemos a\u00f1adir textos, iconos, im\u00e1genes, etc, ya que <code>Button()</code> no tiene ning\u00fan contenido por defecto.</p> <pre><code>@Composable  \nfun GreetingButton() {  \n    Button(onClick = {  \n      // Do something  \n    }) {  \n      GreetingText(name = \"mates!\")  \n    }  \n}\n</code></pre> <p><code>RowScope</code> es un contenedor de elementos de forma horizontal. Si a\u00f1adimos m\u00e1s componentes al<code>RowScope</code> del componente <code>Button()</code> \u00e9stos se alinear\u00e1n consecutivamente de forma horizontal.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#modificar-componentes","title":"Modificar componentes","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#modifiers","title":"Modifiers","text":"<p>Todos los elementos Composable que ofrece el SDK de Android aceptan un par\u00e1metro llamado <code>modifier</code>.</p> <p><code>Modifier</code> es una clase est\u00e1tica a la que se puede acceder sin necesidad de ser instanciada y desde cualquier lugar de nuestra aplicaci\u00f3n. Tiene funciones para especificar par\u00e1metros como la anchura, altura, el tama\u00f1o total, padding, etc, de un componente.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier.width(80.dp))  \n}\n</code></pre> <p>Los m\u00e9todos de <code>Modifier()</code> implementan method chaining pattern de forma que permiten concatenar varias llamadas a m\u00e9todos en la misma cadena pudiendo establecer varios par\u00e1metros en una \u00fanica expresi\u00f3n.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier  \n            .width(80.dp)  \n            .height(240.dp))  \n}\n</code></pre> <p>Los valores para <code>width()</code>, <code>height()</code>, y otras funciones, se establece en <code>DP</code>. Los <code>DP</code> son objetos de la inline class <code>DP</code>.</p> <p>Como alternativa, usando el m\u00e9todo <code>size()</code> podemos establecer valores para la anchura y para la altura de un componente, pas\u00e1ndole valores DP.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier  \n            .size(width = 80.dp, height = 240.dp))  \n}\n</code></pre> <p>Si no se indican los par\u00e1metros de <code>width()</code>, <code>height()</code>, el mismo valor ser\u00e1 aplicado para ambos par\u00e1metros haciendo que el componente sea cuadrado.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier  \n            .size(80.dp))  \n}\n</code></pre> <p><code>fillMaxSize</code> permite al componente ocupar todo el espacio que ocupa su componente padre.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier  \n            .fillMaxSize())  \n}\n</code></pre> <p><code>fillMaxHeight</code> permite al componente ocupar todo el espacio en altura que ocupa su componente padre. La anchura se mantiene como <code>wrap_content</code>.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier  \n            .fillMaxHeight())  \n}\n</code></pre> <p><code>fillMaxWidth</code> permite al componente ocupar todo el espacio en anchura que ocupa su componente padre. La altura se mantiene como <code>wrap_content</code>.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier  \n            .fillMaxWidth())  \n}\n</code></pre> <p><code>fillMaxWidth()</code> y <code>fillMaxHeight()</code> aceptan como argumento fracciones (de <code>0</code> a <code>1</code>) que indican el m\u00e1ximo espacio que queremos que ocupe nuestro componente dentro de su componente padre.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n      modifier = Modifier  \n            .fillMaxWidth(0.5f))  \n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#eventos-de-click-padding-y-orden-de-modificadores","title":"Eventos de click, padding y orden de modificadores","text":"<p>La clase <code>Modifier</code> permite hacer cualquier componente Compose clickable. Al igual que en el caso del componente  <code>Button()</code> , <code>Modifier</code> acepta una funci\u00f3n como par\u00e1metro del m\u00e9todo <code>clickeable()</code> que se invocar\u00e1 cada vez que se produzca un evento de click sobre el componente.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n        modifier = Modifier  \n            .width(80.dp)  \n            .height(240.dp)  \n            .clickable {  \n              //Do something  \n            })  \n}\n</code></pre> <p>Recuerda que activando la opci\u00f3n Interactive Mode de la preview de Compose (en la ruta: <code>File -&gt; Settings -&gt; Experimental</code>, al ser experimental puede no aparecer o fallar) podr\u00e1s ver c\u00f3mo tu elemento ahora se resalta cuando es seleccionado indicando que se puede hacer click sobre \u00e9l.</p> <p>Puedes a\u00f1adir padding (El padding es un espacio situado entre los bordes de la vista y su contenido) a tu componente usando el m\u00e9todo <code>padding()</code> del <code>Modifier</code>. El valor se establece en <code>DP</code>.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n          modifier = Modifier  \n            .padding(all = 20.dp)  \n    )  \n}\n</code></pre> <p>El m\u00e9todo <code>padding()</code> puede ser aplicado a todos los lados del componente usando all o indicar el lado o los lados espec\u00edficos:  top ,  start , bottom y end donde se desee aplicar.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n        modifier = Modifier  \n            .width(80.dp)  \n            .height(240.dp)  \n            .clickable {  \n              //Do something  \n            })\n            .padding(top = 20.dp)\n}\n</code></pre> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n        modifier = Modifier  \n            .width(80.dp)  \n            .height(240.dp)  \n            .clickable {  \n              //Do something  \n            })\n            .padding(top = 20.dp, bottom = 20.dp)\n}\n</code></pre> <p>El orden de los modificadores importa. Si se aplica el m\u00e9todo <code>padding()</code> como \u00faltimo elemento de la cadena el componente <code>Text()</code>* ser\u00e1 clickable en su totalidad, incluyendo las dimensiones del padding. Si el m\u00e9todo es aplicado antes que el m\u00e9todo <code>clickeable()</code> la zona clickable del componente excluir\u00e1 el padding indicado.</p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello $name!\",  \n        modifier = Modifier  \n            .width(80.dp)  \n            .height(240.dp)\n            .padding(top = 20.dp, bottom = 20.dp)  \n            .clickable {  \n                  //Do something  \n                })\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#customizar-un-componente","title":"Customizar un componente","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#textstyle","title":"TextStyle","text":"<p>La clase <code>TextStyle</code> permite customizar aspectos de un componente Composable:</p> <ul> <li>Color del texto.</li> <li>Tama\u00f1o del texto.</li> <li>Tipograf\u00eda.</li> <li>Espacio entre letras.</li> <li>Indentaci\u00f3n.</li> <li>etc.</li> </ul> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello: $name\",  \n        style = TextStyle(  \n            color = Color.Red,  \n            fontWeight = FontWeight.SemiBold,  \n            fontSize = 18.sp)  \n    )  \n}\n</code></pre> <p>Jetpack Compose ya provee de estilos, llamados Material Design (consulta la URL), y como hemos comentado ya est\u00e1n predefinidos para poder usar en nuestros componentes a trav\u00e9s de la clase <code>MatherialTheme</code>. Los siguientes estilos son de la clase <code>TextStyle</code>:</p> <ul> <li><code>h1</code>.</li> <li><code>h2</code>.</li> <li><code>button</code>.</li> <li><code>caption</code>.</li> <li><code>body</code>.</li> <li>etc.</li> </ul> <p>Podemos aplicar un <code>style</code> de tipo <code>TextStyle</code> predefinido como por ejemplo <code>MaterialTheme.typography.h5</code> y sobrescribir alg\u00fan par\u00e1metro concreto por ejemplo el <code>fontWeight</code> haciendo uso de los valores ya predefinidos como <code>FontWeight.SemiBold</code></p> <pre><code>@Composable  \nfun GreetingText(name: String) {  \n    Text(text = \"Hello: $name\",  \n        style = MaterialTheme.typography.h5,  \n        fontWeight = FontWeight.SemiBold  \n    )  \n}\n</code></pre> <p><code>FontWeight</code> y <code>MatherialTheme</code> son una clase companion object de Kotlin, en las que todos sus componentes son est\u00e1ticos y accesible desde los componentes.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#contenedores","title":"Contenedores","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#layouts-el-componente-surface","title":"Layouts: El componente <code>Surface</code>","text":"<p>El componente <code>Surface()</code> es un componente <code>@Componsable</code> que representa un bloque de UI que podemos a\u00f1adir a nuestra interfaz y que puede tener color, modificadores, etc. y contener otros componentes, en concreto uno, a trav\u00e9s de una lamda. Si no le aplicamos modificadores no tendr\u00e1 dimensiones y no podr\u00e1 verse en la pantalla, por tanto aplicamos <code>fillMaxWidth()</code>. Este componente puede formar nuestro componente principal <code>MainScreen</code> <code>@Composable</code> en la que ir colocando otros componentes.</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {\n        //Aqu\u00ed un componente\n    }  \n}\n</code></pre> <p>Podemos a\u00f1adir otros componentes dentro de <code>Surface()</code>.</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        Text(  \n            text = \"Hi mates!!\",  \n            style = MaterialTheme.typography.h5,  \n            modifier = Modifier.wrapContentSize()  \n        )  \n    }  \n}\n</code></pre> <p><code>Text()</code> utiliza el m\u00e9todo <code>wrapContentSize()</code> como modificador que indica que use solo el espacio necesario para pintar su contenido, en este caso <code>Hi mates!</code>. <code>wrapContentSize()</code> aplicar\u00e1 una alineaci\u00f3n autom\u00e1tica en <code>Surface()</code>, <code>Alignment.Center</code>, y situar\u00e1 el componente <code>Text()</code>en el centro del componente. Aunque esto se puede cambiar haciendo uso de la clase <code>Alignment</code>, ya que tiene multitud de valores para posicionar un componente dentro de su componente padre.</p> <p>Tambi\u00e9n podemos anidar componentes <code>Surface()</code>.</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n          Surface(  \n              color = Color.Green,  \n              modifier = Modifier.wrapContentSize(Alignment.TopEnd)  \n          ) {  \n              Text(  \n                  text = \"Hi mates!!\",  \n                  style = MaterialTheme.typography.h5,\n                  modifier = Modifier.padding(20.dp)\n              )  \n          }  \n    }\n}\n</code></pre> <p>Anidando componentes de esta forma se puede establecer un background para el componente <code>Text()</code>. El modificador <code>wrapContentSize()</code> puede moverse ahora al componente padre <code>Surface()</code>, y por tanto, este componente <code>Surface()</code> ocupar\u00e1 solo lo que ocupe el componente <code>Text()</code> que contiene.</p> <p>Recordamos que el componente <code>Surface()</code> acepta un solo componente hijo. M\u00e1s adelante veremos c\u00f3mo a\u00f1adir varios componentes dentro de un componente padre.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#otros-contenedores","title":"Otros contenedores","text":"<p>Para situaciones en las que se tengan m\u00e1s de un componente hijo, Jetpack Compose ofrece los componentes: Row, Column y Box :</p> <ul> <li>Row: Componente que puede albergar contenido de forma horizontal.</li> <li>Column: Componente que puede albergar contenido de forma vertical.</li> <li>Box: Componente que permite tener componentes encima o debajo de otros componentes de forma sencilla.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#row","title":"Row","text":"<p>Al igual que  Button, Row contiene un RowScope que nos indica que podemos a\u00f1adir componentes que admiten composici\u00f3n en su interior. Como indicamos anteriormente, dichos componentes se alinear\u00e1n de forma horizontal.</p> <p>A continuaci\u00f3n, se muestra un ejemplo de componente Row con dos componentes Surface cuadrados que se alinean horizontalmente:</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n      Row {  \n        Surface(  \n            color = Color.Green,  \n            modifier = Modifier.size(60.dp)  \n        ) {}  \n        Surface(  \n            color = Color.Black,  \n            modifier = Modifier.size(60.dp)  \n        ) {}  \n } }}\n</code></pre> <p>Si vemos los argumentos que acepta el componente Row podemos observar dos muy interesantes: verticalAlignment y horizontalArrangement .</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#verticalalignment","title":"verticalAlignment","text":"<p>Mediante este argumento podemos indicar c\u00f3mo queremos posicionar los hijos de nuestro componente Row con respecto a la l\u00ednea vertical. Este argumento solo acepta par\u00e1metros del tipo Alignment.Vertical (valores como: Top, CenterVertically y Bottom ).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos de posicionan centrados verticalmente con CenterVertically :</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        Row(verticalAlignment = Alignment.CenterVertically) {  \n            Surface(  \n                color = Color.Green,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n            Surface(  \n                color = Color.Black,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n        }\n    }\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#horizontalarrangement","title":"<code>horizontalArrangement</code>","text":"<p>Este argumento nos permite indicar c\u00f3mo disponer los elementos hijos en la l\u00ednea horizontal. Acepta valores de la clase <code>Arrangement.Horizontal</code> (valores como: <code>Start</code>, <code>End</code> o <code>Center</code>).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos se posicionan centrados verticalmente y horizontalmente con <code>Arrangement.Center</code>:</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        Row(  \n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.Center  \n        ) {  \n            Surface(  \n                color = Color.Green,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n            Surface(  \n                color = Color.Black,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n        }\n    }\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#column","title":"<code>Column</code>","text":"<p>Como indicamos anteriormente, el componente <code>Column</code> alberga hijos de forma vertical.</p> <p>A continuaci\u00f3n, se muestra un ejemplo de componente <code>Column</code> con dos componentes <code>Surface</code> cuadrados que se alinean verticalmente:</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        Column {  \n            Surface(  \n                color = Color.Green,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n            Surface(  \n                color = Color.Black,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n        } \n    }\n}\n</code></pre> <p>De forma similar al componente <code>Row</code>, <code>Column</code> acepta los siguientes argumentos: <code>horizontalAlignment</code> y <code>verticalArrangement</code>.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#horizontalalignment","title":"<code>horizontalAlignment</code>","text":"<p>Mediante este argumento podemos indicar c\u00f3mo queremos posicionar los hijos de nuestro componente <code>Column</code> con respecto a la l\u00ednea horizontal. Este argumento solo acepta par\u00e1metros del tipo <code>Alignment.Horizontal</code> (valores como: <code>Start</code>, <code>CenterHorizontally</code> y <code>End</code>).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos se posicionan centrados horizontalmente con <code>CenterHorizontally</code>:</p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        Column(  \n            horizontalAlignment = Alignment.CenterHorizontally  \n        ) {  \n            Surface(  \n                color = Color.Green,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n            Surface(  \n                color = Color.Black,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n         } \n    }\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#verticalarrangement","title":"<code>verticalArrangement</code>","text":"<p>Este argumento permite indicar c\u00f3mo disponer los elementos hijos en la l\u00ednea vertical. Acepta valores de la clase <code>Arrangement.Vertical</code> (valores como: <code>Top</code>, <code>Bottom</code>o<code>Center</code>).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos se posicionan centrados verticalmente y horizontalmente con <code>Arrangement.Center</code></p> <pre><code>@Composable  \nfun MainScreen() {  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        Column(  \n            horizontalAlignment = Alignment.CenterHorizontally,  \n            verticalArrangement = Arrangement.Center  \n        ) {  \n            Surface(  \n                color = Color.Green,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n            Surface(   \n                color = Color.Black,  \n                modifier = Modifier.size(60.dp)  \n            ) {}  \n        }\n    }\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#reusar-componentes","title":"Reusar componentes","text":"<p>Tomando como ejemplo uno de los c\u00f3digos vistos anteriormente, podemos observar que los hijos de <code>Column</code> son dos cuadrados representados con un componte <code>Surface</code> que son iguales y estamos a\u00f1adiendo c\u00f3digo repetitivo.</p> <pre><code>@Composable\nfun MainScreen() {\n    Surface(\n        color = Color.LightGray,\n        modifier = Modifier.fillMaxSize()\n    ) {\n      Column {\n          Surface(\n              color = Color.Green,\n              modifier = Modifier.size(60.dp)\n          ) {}\n          Surface(\n              color = Color.Black,\n              modifier = Modifier.size(60.dp)\n          ) {}\n        }\n    }\n}\n</code></pre> <p>El componente <code>Surface</code> puede abstraerse en una funci\u00f3n de composici\u00f3n espec\u00edfica y ser reutilizado de una forma mucho m\u00e1s sencilla.</p> <p>Abstracci\u00f3n en componente <code>MySquare</code>:</p> <pre><code> @Composable\nfun MySquare() {\n    Surface(\n        color = Color.Green,\n        modifier = Modifier.size(60.dp)\n    ) {}\n}\n</code></pre> <p>Utilizaci\u00f3n de componente <code>MySquare</code>:</p> <pre><code>@Composable\nfun MainScreen() {\n    Surface(\n        color = Color.LightGray,\n        modifier = Modifier.fillMaxSize()\n    ) {\n        Column {\n            MySquare()\n            MySquare()\n            MySquare()\n        }\n }}\n</code></pre> <p>Podemos parametrizar nuestro nuevo componente <code>MySquare</code> pas\u00e1ndole como argumento el color.</p> <pre><code>@Composable\nfun MySquare(color: Color) {\n    Surface(\n        color = color,\n        modifier = Modifier.size(60.dp)\n    ) {}\n}\n\n@Composable\nfun MainScreen() {\n    Surface(\n        color = Color.LightGray,\n        modifier = Modifier.fillMaxSize()\n    ) {\n        Column {\n            MySquare(Color.Red)\n            MySquare(Color.Yellow)\n            MySquare(Color.Green)\n        }\n    }\n }\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#como-funciona-state","title":"C\u00f3mo funciona State","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#recomposicion","title":"Recomposici\u00f3n","text":"<p>La recomposici\u00f3n es el proceso que se encarga de actualizar la pantalla, en concreto, los componentes que admiten composici\u00f3n.</p> <p>Para lanzar la recomposici\u00f3n es indispensable tener una implementaci\u00f3n de <code>State</code>  para cada componente composable, al menos para los que tienen un estado que cambia o puede cambiar a lo largo del tiempo.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#state","title":"State","text":"<p>El <code>State</code> de una aplicaci\u00f3n se puede definir como cualquier valor o dato que puede cambiar a lo largo del tiempo, ya sea por un evento click en una lista, una entrada de datos en un formulario de texto, etc.</p> <p>En Jetpack Compose <code>State</code> es un componente m\u00e1s del propio componente composable.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#flujo-de-datos-unidireccional","title":"Flujo de datos unidireccional","text":"<p>El flujo de UI en Jetpack Compose puede pensarse como un bucle en el que se dispara un evento que actualiza un <code>State</code>, por ejemplo, un click a un bot\u00f3n que desencadena la actualizaci\u00f3n de una lista. Este nuevo valor de <code>State</code> pasa por todo el \u00e1rbol de la UI de elementos composables vinculados a ese <code>State</code>, es decir, que deben tener en cuenta los posibles valores de dicho <code>State</code> y actualizar la UI.</p> <p>.</p> <p>Este flujo de <code>Event</code> - <code>State</code> es unidireccional lo que proporciona ciertas ventajas como:</p> <ul> <li>Mayor testeabilidad : <code>State</code> est\u00e1 desacoplado de la UI, es muy f\u00e1cil hacer tests de ambas partes de forma aislada.</li> <li>Mayor consistencia en la UI : Este flujo obliga a que todos los <code>State</code> sean reflejados en la UI de forma continua eliminando las posibles inconsistencias entre los componentes visuales y los estados.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#controlar-state-en-una-lista","title":"Controlar State en una lista","text":"<p>Partimos de un componente <code>MainScreen</code> que contiene una lista <code>StudentList</code> de componentes <code>StudentText</code> y un <code>Button</code> que a\u00f1ade nuevos elementos a la lista de estudiantes.</p> <p><code>MainScreen</code></p> <pre><code>@Composable\nfun MainScreen() {\n    Surface(\n        color = Color.LightGray,\n        modifier = Modifier.fillMaxSize()\n    ) {\n        StudentList()\n    }\n}\n</code></pre> <p><code>StudentList</code></p> <pre><code>@Composable\nfun StudentList() {\n    val students = mutableListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\")\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        for (student in students) {\n            StudentText(name = student)\n        }\n        Button(\n            onClick = { students.add(\"Miguel\") },\n        ) {\n            Text(text = \"Add new student\")\n        }\n    }\n}\n</code></pre> <p><code>StudentText</code></p> <pre><code>@Composable\nfun StudentText(name: String) {\n    Text(\n        text = name,\n        style = MaterialTheme.typography.h5,\n        modifier = Modifier.padding(10.dp)\n    )\n}\n</code></pre> <p>Si activamos el modo interactivo y pulsamos el bot\u00f3n a\u00f1adir podemos observar c\u00f3mo la lista no a\u00f1ade el nuevo valor aunque modifiquemos la lista de estudiantes. Esto es debido a que no se ha implementado ning\u00fan <code>State</code> a la lista de datos que dispare la recomposici\u00f3n.</p> <p>Para a\u00f1adir <code>State</code> a la lista es necesario crear la lista del tipo <code>SnapshotStateList</code> a trav\u00e9s del m\u00e9todo <code>mutableStateListOf</code></p> <pre><code>val studentsState = mutableStateListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\")\n</code></pre> <p>Observamos que el compilador nos obliga a utilizar el bloque <code>remember</code>. Este bloque permite que el estado sea recordado durante la recomposici\u00f3n y que no desaparezca despu\u00e9s.</p> <pre><code>val studentsState = remember { mutableStateListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\") }\n</code></pre> <p>Finalmente, la funci\u00f3n StudentList queda de esta forma:</p> <pre><code>@Composable\nfun StudentList() {\n    val studentsState = remember { mutableStateListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\") }\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        for (student in studentsState) {\n            StudentText(name = student)\n        }\n        Button(\n            onClick = { studentsState.add(\"Miguel\") },\n        ) {\n            Text(text = \"Add new student\")\n        }\n    }\n}\n</code></pre> <p>Si activamos ahora el modo interactivo y pulsamos el bot\u00f3n a\u00f1adir vemos c\u00f3mo el nuevo elemento se a\u00f1ade de forma satisfactoria al final de la lista.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-patron-state-hoisting","title":"El patr\u00f3n State Hoisting","text":"<p>El patr\u00f3n State Hosting consiste en mover los estados al componente padre de tal forma que los hijos nunca tengan que manejarlos.</p> <p>El principal objetivo es reemplazar la variable de estado por dos argumentos en cada funci\u00f3n composable hija:</p> <ul> <li><code>value: T</code> El valor para mostrar.</li> <li><code>onValueChange: (T) -&gt; Unit</code> Evento (lambda) que dispara la modificaci\u00f3n del <code>State</code>.</li> </ul> <p>El patr\u00f3n State Hosting ofrece las siguientes ventajas:</p> <ul> <li>Manejar los estados de forma \u00fanica y centralizada.</li> <li>Solo las funciones que manejan estados pueden modificarlos.</li> <li>Funciones composable hijas no tienen que preocuparse por manejar estados, solo:</li> <li>pintar informaci\u00f3n: Los datos tiene un flujo top-down</li> <li>elevar eventos: Los eventos tiene un flujo bottom-up.</li> </ul> <p></p> <p>Mas informacion</p> <p>A continuaci\u00f3n, vamos a aplicar el patr\u00f3n State Hosting a la aplicaci\u00f3n de alumnos de la lecci\u00f3n anterior. Para ello, seguiremos los siguientes pasos:</p> <ul> <li>Mover la lista de estudiantes al punto de entrada <code>MainScreen</code>.</li> <li>Parametrizar la funci\u00f3n <code>StudentList</code> con el valor a mostrar y la funci\u00f3n lambda de eventos de click.</li> </ul> <p>Modificamos la funci\u00f3n:</p> <pre><code>@Composable\nfun StudentList(students: List&lt;String&gt;, onButtonClick: () -&gt; Unit) {\n    Column(\n        modifier = Modifier.fillMaxSize(),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        for(student in students) {\n            StudentText(name = student)\n        }\n        Button(\n            onClick = onButtonClick,\n        ) {\n            Text(text = \"Add new student\")\n        }\n    }\n}\n</code></pre> <p>Y modificamos el c\u00f3digo en la que se hace uso de esta funci\u00f3n:</p> <pre><code>@Composable  \nfun MainScreen() {  \n    val studentsState = remember { mutableStateListOf(\"Esther\", \"Jaime\") }  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        StudentList(studentsState) {  \n            studentsState.add(\"Miguel\")  \n        }  \n    }\n }\n</code></pre> <p>Como podemos observar en el c\u00f3digo, el componente <code>StudentList</code> ya no sabe nada sobre estados. Le hemos aplicado las dos premisas del patr\u00f3n State Hoisting la parametrizaci\u00f3n de la lista de estudiantes y la funci\u00f3n para elevar los eventos de click del bot\u00f3n a\u00f1adir. Ahora es el componente <code>MainScreen</code> el encargado de manejar estados y de modificarlos.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-componente-textfield-con-state","title":"El componente <code>TextField</code> con State","text":"<p>El componente <code>TextField</code> es el equivalente al componente <code>EditText</code> de Android tradicional.</p> <p>En esta lecci\u00f3n veremos c\u00f3mo manejar correctamente el estado de este componente a trav\u00e9s de <code>State</code>.</p> <p>Vamos a iterar nuestra aplicaci\u00f3n de a\u00f1adir alumnos incorporando un campo de introducci\u00f3n de texto <code>TextField</code> que permita al usuario escribir el nombre del alumno.</p> <p>Cuando usamos <code>TextField</code>, es pr\u00e1cticamente obligatorio hacerlo de la mano de <code>State</code> de forma que podamos ver c\u00f3mo el valor del componente cambia cada vez que se introduce texto tal y como se muestra a continuaci\u00f3n:</p> <pre><code>val newStudentState = remember { mutableStateOf(\"\")}  \nTextField(  \n    value = newStudentState.value,  \n    onValueChange = {  \n        newInput -&gt; newStudentState.value = newInput  \n    }  \n)\n</code></pre> <p>Como vemos en el c\u00f3digo anterior, se usa <code>mutableStateOf</code> para guardar el estado del componente <code>TextField</code>.</p> <p>Podr\u00edamos incorporar este snippet de c\u00f3digo en nuestro componente <code>StudentList</code> pero implementaremos State Hoisting para no manejar estados en componentes internos y elevarlos al componente <code>MainScreen</code>.</p> <pre><code>@Composable  \nfun StudentList(\n    students: List&lt;String&gt;,  \n    onButtonClick: () -&gt; Unit,  \n    studentName: String,  \n    onStudentNameChange: (String) -&gt; Unit  \n) {  \n    Column(  \n        modifier = Modifier.fillMaxSize(),  \n        horizontalAlignment = Alignment.CenterHorizontally  \n    ) {  \n        for (student in students) {  \n            StudentText(name = student)  \n        }  \n        TextField(  \n            value = studentName,  \n            onValueChange = onStudentNameChange  \n        )  \n        Button(  \n            onClick = onButtonClick\n        ) {  \n            Text(text = \"Add new student\")  \n        } \n    }\n}\n</code></pre> <p>En el c\u00f3digo anterior se puede observar como parametrizamos <code>StudentList</code> con los siguientes argumentos:</p> <ul> <li><code>studentName: String</code> Contiene el valor del <code>TextField</code>. Como veremos en <code>MainScreen</code> a continuaci\u00f3n, hace referencia a un <code>State</code>.</li> <li><code>onStudentNameChange: (String)-&gt;Unit</code> lambda que eleva el valor del componente <code>TextField</code> cuando cambia.</li> </ul> <pre><code>@Composable  \nfun MainScreen() {  \n    val studentsState = remember { mutableStateListOf(\"Esther\", \"Jaime\") }  \n    val newStudentState = remember { mutableStateOf(\"\") }  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        StudentList(  \n            studentsState,  \n            { studentsState.add(newStudentState.value) },  \n            newStudentState.value,  \n            { newStudent -&gt; newStudentState.value = newStudent }  \n        )  \n    }  \n}\n</code></pre> <ul> <li><code>newStudentState: MutableState</code> el valor de <code>TextField</code> es un <code>State</code> y todas las variaciones que se produzcan sobre \u00e9l disparar\u00e1n la recomposici\u00f3n.</li> <li>Vemos como en las lambdas <code>onButtonClick</code> y <code>onStudentNameChange</code> se inserta un valor en la lista de estudiantes y se modifica el valor del componente <code>TextField</code> respectivamente.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#viewmodel-y-livedata-dam","title":"<code>ViewModel</code> y <code>LiveData</code> (DAM)","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#introduccion-a-viewmodel-y-livedata","title":"Introducci\u00f3n a <code>ViewModel</code> y <code>LiveData</code>","text":"<p>En lecciones anteriores vimos el patr\u00f3n State Hoisting y c\u00f3mo elevar los estados lo m\u00e1s arriba posible dentro de la jerarqu\u00eda de componentes composables.</p> <p>El siguiente objetivo es evitar que nuestras vistas (<code>Fragments</code> y <code>Activities</code>) sean las encargadas de manejar estados y trasladar dicha responsabilidad al componente <code>ViewModel</code></p> <p><code>Fragments</code> y <code>Activities</code> son vistas usadas en Jetpack Compose Android.</p> <p><code>ViewModel</code> y <code>LiveData</code> son componentes de Jetpack y forman parte de la arquitectura Model View-View Model (MVVM) propuesta por Google para el desarrollo de aplicaciones Android.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#viewmodel","title":"<code>ViewModel</code>","text":"<ul> <li>Es responsable de preparar y manejar estados para la UI (<code>Fragments</code> y <code>Activities</code>). Tiene una relaci\u00f3n directa con la vista para mostrar los datos.</li> <li>Mediante el uso de <code>ViewModel</code> seremos capaces de desacoplar la l\u00f3gica de presentaci\u00f3n de los componentes de UI.</li> <li><code>ViewModel</code> est\u00e1 directamente relacionado con el modelo de los datos que se van a mostrar en la vista. Esto es debido a que <code>ViewModel</code> es parte de la arquitectura  MVVM .</li> <li>La vista espera un estado de UI proporcionado por <code>ViewModel</code> y, a su vez, <code>ViewModel</code> podr\u00e1 actualizar dicho estado de UI si se producen eventos desde la vista.</li> <li>En resumen, la vista podr\u00e1 recibir actualizaciones del estado de UI desde el <code>ViewModel</code>.</li> <li>En esta arquitectura, la vista no pregunta por el estado de la UI al <code>ViewModel</code> continuamente. Tiene la posibilidad de subscribirse al componente <code>LiveData</code> dentro de <code>ViewModel</code></li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#livedata","title":"<code>LiveData</code>","text":"<ul> <li><code>LiveData</code> es un componente observable, permite que otros componentes se suscriban a \u00e9l con el fin de ser notificados si se produce alg\u00fan cambio.</li> <li><code>LiveData</code> contiene un estado y su principal responsabilidad es avisar a sus suscriptores cuando dicho estado cambie.</li> <li><code>Fragments</code> y <code>Activities</code> pueden suscribirse a un componente <code>LiveData</code> para ser notificados siempre que se produzca una actualizaci\u00f3n sobre un <code>State</code>.</li> <li>Si se produce un evento y el <code>State</code> relacionado con el componente <code>LiveData</code> cambia, los <code>Fragments</code> y <code>Activities</code> suscritos a \u00e9l ser\u00e1n notificados al mismo tiempo.</li> <li><code>LiveData</code> est\u00e1 pendiente del ciclo de vida de <code>Fragments</code> y <code>Activities</code>. Si estos van a un estado <code>onDestroy</code> el componente <code>LiveData</code> cierra y destruye la conexi\u00f3n con ellos autom\u00e1ticamente.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#state-en-viewmodel","title":"<code>State</code> en <code>ViewModel</code>","text":"<p>Partimos de una aplicaci\u00f3n que contiene un componente <code>TextField()</code> y un componente <code>Text()</code> que refleja los cambios que se producen en <code>TextField()</code> cuando el usuario introduce texto en \u00e9l.</p> <p><code>MainScreen</code></p> <pre><code>@Composable  \nfun MainScreen() {  \n    val nameState = remember { mutableStateOf(\"\") }  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        MainLayout(  \n            nameState.value  \n        ) { newName -&gt; nameState.value = newName }  \n    }\n}\n</code></pre> <p><code>MainLayout</code></p> <pre><code>@Composable  \nfun MainLayout(  \n    name: String,  \n    onTextFieldChange: (String) -&gt; Unit  \n) {  \n    Column(  \n        modifier = Modifier.fillMaxSize(),  \n        horizontalAlignment = Alignment.CenterHorizontally  \n    ) {  \n        TextField(  \n            value = name,  \n            onValueChange = onTextFieldChange  \n        )  \n        Text(text = name)  \n    }  \n}\n</code></pre> <p>El siguiente paso ser\u00e1 mover <code>nameState</code> a un componente <code>ViewModel</code>. Para ello, creamos una nueva clase <code>MainViewModel</code> que herede de <code>ViewModel</code> como se muestra a continuaci\u00f3n:</p> <pre><code>class MainViewModel: ViewModel() {  \n\n    val textFieldState = MutableLiveData(\"\")  \n\n    fun onTextChange(newText: String) {  \n        textFieldState.value = newText  \n    }  \n}\n</code></pre> <p><code>textFieldState: MutableLiveData</code> refleja ahora el estado del dato al cual nuestra UI tendr\u00e1 que suscribirse para recibir actualizaciones.</p> <p>A trav\u00e9s del m\u00e9todo p\u00fablico <code>onTextChange</code>, la UI mandar\u00e1 el evento de cambio de texto que genere el componente <code>TextField</code>.</p> <p>Para leer los datos de nuestro nuevo <code>MainViewModel</code> desde la vista <code>MainScreen</code> tendremos que modificar el componente de la siguiente forma:</p> <pre><code>@Composable  \nfun MainScreen(viewModel: MainViewModel = MainViewModel()) {  \n    val nameState = viewModel.textFieldState.observeAsState(\"\")  \n    Surface(  \n        color = Color.LightGray,  \n        modifier = Modifier.fillMaxSize()  \n    ) {  \n        MainLayout(  \n            nameState.value  \n        ) { newName -&gt; viewModel.onTextChange(newName) }  \n    }\n}\n</code></pre> <p>El valor de <code>nameState</code> proviene ahora del componente <code>LiveData</code> definido en nuestro nuevo <code>MainViewModel</code>.</p> <p>Necesitamos que <code>nameState</code> sea un <code>State</code> y no un <code>LiveData</code>. Para conseguir esto, hay que a\u00f1adir una nueva dependencia a nuestro fichero <code>build.gradle</code>, permitiendo el uso del m\u00e9todo <code>observeAsState</code> encargado de la conversi\u00f3n a <code>State</code>:</p> <pre><code>implementation \"androidx.compose.runtime:runtime-livedata:$compose_version\"\n</code></pre> <p>Los eventos de <code>TextField</code> recogidos en la lambda son enviados ahora a nuestro <code>MainViewModel</code> y a su vez notificados a <code>LiveData</code> a trav\u00e9s del m\u00e9todo <code>onTextChange</code>.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#listas-y-theming","title":"Listas y Theming","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#listas-con-lazy-composable","title":"Listas con Lazy Composable","text":"<p>En lecciones anteriores vimos c\u00f3mo implementar listas de elementos a trav\u00e9s de los componentes Column y  Row .</p> <p>Cuando el n\u00famero de elementos a mostrar es grande, es preferible usar componentes Lazy Composable como LazyColumn o  LazyRow . Las ventajas de usar estos componentes son:</p> <ul> <li>Implementaci\u00f3n de scroll de forma autom\u00e1tica.</li> <li>Reciclaje de elementos de la lista.</li> <li>Mismos principios que el componente  RecyclerView .</li> </ul> <p>La diferencia entre LazyColumn y LazyRow es la orientaci\u00f3n en la que se integran sus elementos y se desplazan.</p> <p>LazyColumn produce un desplazamiento vertical mientras que LazyRow produce un desplazamiento horizontal.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#lazylistscope","title":"LazyListScope","text":"<p>Al igual que Column y  Row , los componentes Lazy Composable ofrecen un Scope para a\u00f1adir contenido.</p> <p>En el caso de  LazyListScope , se ofrece un conjunto de funciones para a\u00f1adir elementos a la lista.</p> <pre><code>LazyColumn {  \n    // Add a single item  \n    item {  \n        Text(text = \"First item\")  \n    }  \n    // Add 3 items  \n    items(3) { index -&gt;  \n        Text(text = \"Item: $index\")  \n    }  \n    // Add another single item  \n    item {  \n        Text(text = \"Last item\")  \n    }  \n}\n</code></pre> <ul> <li>item : Agrega un solo elemento a la lista.</li> <li>items(N) : Agrega varios elementos a la lista.</li> </ul> <pre><code>@Composable  \nfunMessageList(messages: List&lt;String&gt;) {  \n    LazyColumn {  \n        items(messages) { message -&gt;  \n            MessageRow(message)  \n        }\n    }\n}  \n\n@Composable  \nfunMessageRow(message: String) {  \n    Text(text = message)  \n}\n</code></pre> <p>Como vemos en el c\u00f3digo anterior, existen funciones de extensi\u00f3n que permiten agregar colecciones de elementos como  List .</p> <p>Para agregar padding alrededor de los bordes del contenido de la lista, el componente permite a\u00f1adir par\u00e1metros del tipo PaddingValues al par\u00e1metro contentPadding como se muestra a continuaci\u00f3n:</p> <pre><code>LazyColumn(  \n    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),  \n) {  \n    // ...  \n}\n</code></pre> <p>En este ejemplo, se agregan 16.dp de padding a los bordes horizontales (izquierda y derecha) y 8.dp al principio y al final del contenido.</p> <p>Para agregar espaciado entre elementos, puede usarse  Arrangement.spacedBy . En el siguiente ejemplo, se agregan 4.dp de espacio entre cada elemento:</p> <pre><code>LazyColumn(  \n    verticalArrangement = Arrangement.spacedBy(4.dp),  \n) {  \n  // ...  \n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#card-image-y-coil","title":"Card, Image y Coil","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-componente-card","title":"El componente Card","text":"<p>El componente Card es el equivalente del componente  CardView . Este componente sirve para mostrar contenido y acciones de un tema determinado aceptando para ello elementos como im\u00e1genes o texto. Puedes visitar la documentaci\u00f3n de Material Design para obtener m\u00e1s informaci\u00f3n sobre el uso de este componente.</p> <p>Card acepta un atributo elevation que hace que el componente tenga una elevaci\u00f3n sobre el eje Z dando una sensaci\u00f3n de profundidad y estableciendo un sombreado sobre su vista padre.</p> <pre><code>@Composable  \nfun CardItem() {  \n    Card(  \n        Modifier\n            .padding(10.dp)  \n            .fillMaxWidth(),  \n        elevation = 10.dp\n    ) {  \n        Column(  \n            Modifier.padding(10.dp)  \n        ) {  \n            Text(text = \"Hello OpenWebinars\")  \n            Text(text = \"This is a card test\")  \n        }  \n    }\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-componente-image","title":"El componente Image","text":"<p>El componente Image es el equivalente de  ImageView . Permite cargar im\u00e1genes en Android. Recibe por par\u00e1metro:</p> <ul> <li>painter : Recurso gr\u00e1fico que se pintar\u00e1 en el componente.</li> <li>contentDescription : Corresponde con la descripci\u00f3n de la imagen. Ser\u00e1 le\u00eddo por herramientas de accesibilidad.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#coil","title":"Coil","text":"<p>Coil es una librer\u00eda de carga de im\u00e1genes para Android. Est\u00e1 implementada usando coroutines y es muy ligera y f\u00e1cil de integrar en Jetpack Compose.</p> <p>Para su integraci\u00f3n hay que incluir la dependencia: implementation(\u201cio.coil-kt::coil-compose::1.3.2\u201d)</p> <p>Como es una librer\u00eda que permite la carga de im\u00e1genes de red es indispensable a\u00f1adir el permiso de **INTERNET al fichero AndroidManifest.xml.**</p> <pre><code>Image(  \n    painter = rememberImagePainter(\"https://images.dog.ceo/breeds/bulldog-boston/n02096585_1761.jpg\"),  \n    contentDescription = \"This is a beautiful dog\",  \n)</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#theming","title":"Theming","text":"<p>En esta lecci\u00f3n se explica c\u00f3mo estilizar una aplicaci\u00f3n Android de forma sencilla usando Jetpack Compose con la ayuda de  Material Theming .</p> <p>Tradicionalmente, para definir temas en Android, se usa el fichero themes.xml pero con Jetpack Compose todo se resuelve a nivel de clases Kotlin.</p> <p>A continuaci\u00f3n, se detalla c\u00f3mo customizar colores, tipograf\u00edas y formas de manera sencilla con solo unas pocas l\u00edneas de c\u00f3digo.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#materialtheme","title":"MaterialTheme","text":"<p>La clase MaterialTheme define estilos bas\u00e1ndose en los principios de Material Design. En Jetpack Compose, esta clase est\u00e1 disponible como una funci\u00f3n que admite composici\u00f3n en la cual se pueden customizar los valores por defecto.</p> <pre><code>@Composable\nfun MaterialTheme(\n    colors: Colors = MaterialTheme.colors,\n    typography: Typography = MaterialTheme.typography,\n    shapes: Shapes = MaterialTheme.shapes,\n    content: @Composable () -&gt; Unit\n)\n</code></pre> <p>Tal y como se muestra en el c\u00f3digo anterior, se pueden modificar los siguientes atributos:  colors , typography y  shapes . A continuaci\u00f3n, se explica detalladamente cada uno de los siguientes atributos con el objetivo de entender mejor c\u00f3mo modificarlos para obtener una customizaci\u00f3n espec\u00edfica.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#color","title":"Color","text":"<p>Antes de explicar la clase Colors es importante saber c\u00f3mo se utiliza la clase  Color . Jetpack Compose utiliza Color para representar un color. Hay dos formas b\u00e1sicas de definir un color mediante esta clase:</p> <ul> <li>Hexadecimal:</li> </ul> <pre><code>val red = Color(0xffff0000)\n</code></pre> <ul> <li>RGB:</li> </ul> <pre><code>val red = Color(red = 1f, green = 0f, blue = 0f)\n</code></pre> <p>Es una buena pr\u00e1ctica definir los colores de la aplicaci\u00f3n en un fichero  Color.kt .</p> <pre><code>import androidx.compose.ui.graphics.Color  \n\nval brown = Color(0xECE1D0)  \nval yellow = Color(0xFFDAA95E)\n</code></pre> <p>Y acceder a ellos como se indica a continuaci\u00f3n:</p> <pre><code>Text(\"Hello Openwebinars\", color = brown)\n</code></pre> <p>Para soportar un estilo Material Design, es importante definir un conjunto de colores en un tema referenci\u00e1ndolos despu\u00e9s desde ah\u00ed. A continuaci\u00f3n, se muestra c\u00f3mo hacerlo.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#colors","title":"Colors","text":"<p>La clase Colors es provista por Jetpack Compose y facilita la definici\u00f3n de dicho conjunto de colores para soportar el sistema Material Design.</p> <pre><code>class Colors(\n    primary: Color,\n    primaryVariant: Color,\n    secondary: Color,\n    secondaryVariant: Color,\n    background: Color,\n    surface: Color,\n    error: Color,\n    onPrimary: Color,\n    onSecondary: Color,\n    onBackground: Color,\n    onSurface: Color,\n    onError: Color,\n    isLight: Boolean\n)\n</code></pre> <p>El objetivo de esta lecci\u00f3n no es definir a qu\u00e9 aspecto de una aplicaci\u00f3n corresponde cada atributo de la clase  Colors , sin embargo, toda esta informaci\u00f3n puede consultarse en la documentaci\u00f3n de Material Design sobre el sistema de colores.</p> <p>Jetpack Compose cuenta por defecto con funciones de tipo builder para crear conjuntos de temas predefinidos del tipo light y dark: lightColors y  darkColors . A continuaci\u00f3n, se muestra la funci\u00f3n  darkColors .</p> <pre><code>fun darkColors(  \n    primary: Color = Color(0xFFBB86FC),  \n    primaryVariant: Color = Color(0xFF3700B3),  \n    secondary: Color = Color(0xFF03DAC6),  \n    secondaryVariant: Color = secondary,  \n    background: Color = Color(0xFF121212),  \n    surface: Color = Color(0xFF121212),  \n    error: Color = Color(0xFFCF6679),  \n    onPrimary: Color = Color.Black,  \n    onSecondary: Color = Color.Black,  \n    onBackground: Color = Color.White,  \n    onSurface: Color = Color.White,  \n    onError: Color = Color.Black  \n): Colors = Colors(  \n    primary,  \n    primaryVariant,  \n    secondary,  \n    secondaryVariant,  \n    background,  \n    surface,  \n    error,  \n    onPrimary,  \n    onSecondary,  \n    onBackground,  \n    onSurface,  \n    onError,  \n    false)\n</code></pre> <p>Se considera una buena pr\u00e1ctica definir las paletas de colores de una aplicaci\u00f3n, usando las funciones builder mencionadas anteriormente, en un fichero Theme.kt tal y como se muestra a continuaci\u00f3n:</p> <pre><code>private val DarkColorPalette = darkColors(  \n    primary = Purple200,  \n    primaryVariant = Purple700,  \n    secondary = Teal200  \n)  \n\nprivate val LightColorPalette = lightColors(  \n    primary = Purple500,  \n    primaryVariant = Purple700,  \n    secondary = Teal200  \n )\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#typography","title":"Typography","text":"<p>La clase  Typography , provista por Jetpack Compose, es la encargada de ayudar a crear estilos para etiquetas de texto. A trav\u00e9s de dicha clase podemos definir el estilo de cada tipo de texto reflejado en Material Design (h1, h2, button, caption, body1, body2, etc). A continuaci\u00f3n, se muestra el constructor por defecto de dicha clase para ayudar a comprender mejor su funcionamiento.</p> <pre><code>constructor(  \n    defaultFontFamily: FontFamily = FontFamily.Default,  \n    h1: TextStyle = TextStyle(  \n        fontWeight = FontWeight.Light,  \n        fontSize = 96.sp,  \n        letterSpacing = (-1.5).sp  \n    ),  \n    h2: TextStyle = TextStyle(  \n        fontWeight = FontWeight.Light,  \n        fontSize = 60.sp,  \n        letterSpacing = (-0.5).sp  \n    ),  \n\n    .... \n\n    subtitle1: TextStyle = TextStyle(  \n        fontWeight = FontWeight.Normal,  \n        fontSize = 16.sp,  \n        letterSpacing = 0.15.sp  \n    ),  \n    subtitle2: TextStyle = TextStyle(  \n        fontWeight = FontWeight.Medium,  \n        fontSize = 14.sp,  \n        letterSpacing = 0.1.sp  \n    ),  \n    body1: TextStyle = TextStyle(  \n        fontWeight = FontWeight.Normal,  \n        fontSize = 16.sp,  \n        letterSpacing = 0.5.sp  \n    ),  \n    button: TextStyle = TextStyle(  \n        fontWeight = FontWeight.Medium,  \n        fontSize = 14.sp,  \n        letterSpacing = 1.25.sp  \n    ),\n\n    ....\n\n  )\n</code></pre> <p>Para conocer en detalle la escala de cada valor de cada tipo se recomienda visitar la documentaci\u00f3n de Material Design.</p> <p>Para customizar los atributos de texto de la aplicaci\u00f3n se recomienda como buena pr\u00e1ctica crear un objeto de la clase Typography en un fichero Type.kt y sobrescribir los tipos de texto que se deseen tal y como se muestra en el ejemplo a continuaci\u00f3n.</p> <pre><code>val Typography = Typography(  \n    body1 = TextStyle(  \n        fontFamily = FontFamily.Default,  \n        fontWeight = FontWeight.Normal,  \n        fontSize = 16.sp  \n    ),  \n    button = TextStyle(  \n        fontFamily = FontFamily.Default,  \n        fontWeight = FontWeight.W500,  \n        fontSize = 14.sp  \n    ),  \n    caption = TextStyle(  \n        fontFamily = FontFamily.Default,  \n        fontWeight = FontWeight.Normal,  \n        fontSize = 12.sp \n    )  \n)\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#shapes","title":"Shapes","text":"<p>En muchas ocasiones, durante el desarrollo de una aplicaci\u00f3n, es necesario definir formas que act\u00faen como background de vistas con el objetivo de redondear bordes, establecer apariencias circulares, cuadradas, etc.</p> <p>Tradicionalmente, las formas se definen en un fichero XML bajo el tag  shape . Crear formas con Jetpack Compose es m\u00e1s sencillo y, adem\u00e1s, pueden ser provistas a la funci\u00f3n MaterialTheme haciendo que los componentes nativos como Button o TextField var\u00eden su aspecto por defecto.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#uso-de-matherialtheme","title":"Uso de MatherialTheme","text":"<p>Despu\u00e9s de describir todos los par\u00e1metros que puede recibir  MaterialTheme , se recomienda crear una funci\u00f3n que admita composici\u00f3n y que aplique las sobrescrituras previas definidas de cada uno de ellos tal y como se muestra a continuaci\u00f3n.</p> <pre><code>@Composable  \nfun AppTheme(darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable() () -&gt; Unit) {  \n    val colors = if (darkTheme) {  \n        DarkColorPalette  \n    } else {  \n        LightColorPalette  \n    }  \n    MaterialTheme(  \n        colors = colors,  \n        typography = Typography,  \n        shapes = Shapes,  \n        content = content  \n    )  \n}\n</code></pre> <p>Un punto muy importante de esta funci\u00f3n es la comprobaci\u00f3n sobre si el sistema est\u00e1 en modo oscuro mediante la utilidad  isSystemInDarkTheme . Con el uso de esta funci\u00f3n, pueden aplicarse paletas de colores distintas si el modo oscuro est\u00e1 activo o no.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#fuente-y-bibliografia","title":"Fuente y Bibliograf\u00eda","text":"<ul> <li>https://github.com/JetBrains/compose-jb/tree/master/tutorials - Tutorial sobre los principales componentes de Jetpack Compose Desktop</li> <li>https://www.tutorialesprogramacionya.com/composeya/ - Conceptos de compose</li> <li>https://www.develou.com/category/android/ - Articulos sobre compose</li> <li>https://www.develou.com/android-estado-en-compose/ - Estado en compose</li> <li>https://github.com/jamesreve/android-jetpack-compose - Ejemplos de Jetpack compose</li> <li>https://medium.com/droid-latam/jetpack-compose-i-motivaci%C3%B3n-50e085543923 - Que es Jetpack Compose</li> <li>https://medium.com/@facundomr/jetpack-compose-ii-funciones-composable-8d4d1d40ed44 - Funciones @Composables</li> <li>https://medium.com/@facundomr/jetpack-compose-iii-flujo-de-datos-y-eventos-e62d5f8bce6f - Arquitectura de la IU, flujo de informacion y eventos.</li> <li>https://plugins.jetbrains.com/plugin/10942-kotlin-fill-class - Plugin para rellenar los  argumentos de clases, muy util en Jetpack Compose</li> </ul>"},{"location":"section1/u09/","title":"UD 9 - Acceso a base de datos relacionales","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software","BBDD"]},{"location":"section1/u09/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software","BBDD"]},{"location":"section1/u09/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA5. Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases.</p>","tags":["Software","BBDD"]},{"location":"section1/u09/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>...CE</p>","tags":["Software","BBDD"]},{"location":"section1/u09/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque X</p> <ul> <li>U9: Acceso a BBDD Relacionales </li> </ul> <p>En la Unidad 9, veremos:   </p> <p>...Contenidos</p>","tags":["Software","BBDD"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/","title":"UD 9 - 9.1 Acceso a BBDD","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#91-acceso-a-bases-de-datos","title":"9.1. Acceso a bases de datos","text":"<p>A lo largo de este tema, se abordar\u00e1 el acceso a bases de datos relacionales desde aplicaciones desarrolladas en Kotlin. Se explicar\u00e1 qu\u00e9 es una base de datos y su importancia en el desarrollo de software, se describir\u00e1 el lenguaje de programaci\u00f3n Kotlin y su uso en la programaci\u00f3n de aplicaciones que acceden a bases de datos, y se detallar\u00e1n las caracter\u00edsticas y m\u00e9todos de acceso a sistemas gestores de bases de datos relacionales. Adem\u00e1s, se explicar\u00e1 c\u00f3mo programar conexiones con bases de datos, c\u00f3mo almacenar, recuperar, mostrar, borrar y modificar informaci\u00f3n almacenada, y c\u00f3mo crear aplicaciones para posibilitar la gesti\u00f3n de informaci\u00f3n en bases de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En el desarrollo de aplicaciones de software, es com\u00fan la necesidad de almacenar y acceder a grandes cantidades de informaci\u00f3n de manera eficiente y segura. Para ello, se utilizan bases de datos, que son sistemas de almacenamiento de informaci\u00f3n que permiten organizar, gestionar y recuperar datos de manera estructurada. Las bases de datos son fundamentales en el desarrollo de aplicaciones empresariales, sitios web, aplicaciones m\u00f3viles y otros tipos de software, ya que permiten almacenar y acceder a informaci\u00f3n de manera eficiente y escalable.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#11-que-es-una-base-de-datos-y-su-importancia-en-el-desarrollo-de-software","title":"1.1. Qu\u00e9 es una base de datos y su importancia en el desarrollo de software.","text":"<p>Una base de datos es un conjunto organizado de informaci\u00f3n que se almacena y se gestiona en un sistema inform\u00e1tico. Est\u00e1 dise\u00f1ada para almacenar, recuperar y gestionar grandes cantidades de datos de manera eficiente y confiable. Las bases de datos se utilizan en una amplia variedad de aplicaciones inform\u00e1ticas, desde simples aplicaciones de escritorio hasta sistemas empresariales complejos.  Adem\u00e1s, las bases de datos permiten que varios usuarios accedan a los mismos datos al mismo tiempo, lo que es especialmente importante en entornos empresariales donde muchos usuarios necesitan acceder a la misma informaci\u00f3n.</p> <p>La importancia de las bases de datos en el desarrollo de software radica en que permiten a los desarrolladores crear aplicaciones que pueden manejar grandes cantidades de informaci\u00f3n de manera eficiente y escalable. Las bases de datos tambi\u00e9n permiten a los desarrolladores implementar una l\u00f3gica de negocio m\u00e1s sofisticada, lo que les permite crear aplicaciones m\u00e1s robustas y flexibles.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#12-kotlin-y-su-uso-para-acceder-a-bases-de-datos","title":"1.2. Kotlin y su uso para acceder a bases de datos.","text":"<p>En la programaci\u00f3n de aplicaciones que acceden a bases de datos, Kotlin al igual que Java, es un lenguaje de programaci\u00f3n muy \u00fatil, ya que tiene soporte integrado para la conexi\u00f3n y el acceso a bases de datos a trav\u00e9s del API JDBC (Java Database Connectivity). Adem\u00e1s, Kotlin tiene una sintaxis concisa y expresiva, lo que facilita la creaci\u00f3n de c\u00f3digo que interact\u00faa con las bases de datos.</p> <p>El uso de Kotlin en la programaci\u00f3n de aplicaciones que acceden a bases de datos permite a los desarrolladores crear aplicaciones m\u00e1s seguras, confiables y escalables. Kotlin ofrece caracter\u00edsticas de seguridad como la prevenci\u00f3n de nulos y la inmutabilidad, lo que reduce la posibilidad de errores y mejora la confiabilidad del c\u00f3digo. Adem\u00e1s, Kotlin es altamente escalable y f\u00e1cil de mantener, lo que lo hace ideal para proyectos empresariales complejos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#2-sistema-gestor-de-bases-de-datos-relacional-y-sus-caracteristicas","title":"2. Sistema gestor de bases de datos relacional y sus caracter\u00edsticas","text":"<p>Un sistema gestor de bases de datos relacional (RDBMS, por sus siglas en ingl\u00e9s) es un tipo de software que se utiliza para almacenar, organizar y manipular datos en una base de datos relacional. Este tipo de sistema gestor de bases de datos utiliza un modelo de datos relacional para organizar los datos en tablas con filas y columnas, y utiliza claves primarias y for\u00e1neas para establecer relaciones entre las tablas.</p> <p>Entre las caracter\u00edsticas principales de los sistemas gestores de bases de datos relacionales, podemos destacar las siguientes:</p> <ul> <li>Estructura basada en tablas: Los datos se almacenan en tablas con filas y columnas. Cada columna tiene un nombre y un tipo de datos que define el tipo de informaci\u00f3n que se puede almacenar.  </li> <li>Relaciones entre tablas: Los sistemas gestores de bases de datos relacionales permiten establecer relaciones entre las tablas utilizando claves primarias y for\u00e1neas. Esto permite que los datos se puedan relacionar entre s\u00ed de manera efectiva y eficiente.  </li> <li>Consultas complejas: Los sistemas gestores de bases de datos relacionales permiten realizar consultas complejas utilizando el lenguaje SQL (Structured Query Language). Esto permite que los datos se puedan buscar, filtrar y ordenar de manera efectiva y eficiente.  </li> <li>Integridad de los datos: Los sistemas gestores de bases de datos relacionales tienen mecanismos integrados para garantizar la integridad de los datos, como las restricciones de integridad referencial y las validaciones de datos.  </li> <li>Escalabilidad: Los sistemas gestores de bases de datos relacionales son altamente escalables y se pueden utilizar para gestionar grandes vol\u00famenes de datos.</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#3-metodos-de-acceso-a-bases-de-datos-relacionales","title":"3. M\u00e9todos de acceso a bases de datos relacionales","text":"<p>Existen varios m\u00e9todos para acceder a bases de datos relacionales desde aplicaciones de software. Algunos de los m\u00e9todos m\u00e1s comunes son:</p> <ul> <li>JDBC (Java Database Connectivity): JDBC es una API est\u00e1ndar de Java que permite a las aplicaciones Java acceder a bases de datos relacionales. Proporciona una interfaz com\u00fan para que las aplicaciones se conecten a bases de datos, realicen consultas y actualicen datos. JDBC es ampliamente utilizado y est\u00e1 soportado por la mayor\u00eda de los sistemas gestores de bases de datos relacionales.  </li> <li>ORM (Object-Relational Mapping): Los ORM son frameworks que se construyen sobre JDBC y que permite mapear objetos de una aplicaci\u00f3n a tablas de una base de datos relacional. Esto permite acceder a la base de datos utilizando objetos y m\u00e9todos, en lugar de utilizar SQL directamente. El ORM proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos. El ORM utiliza un lenguaje de consulta espec\u00edfico del ORM (como HQL en Hibernate) que se traduce autom\u00e1ticamente en SQL para interactuar con la base de datos. El ORM es una t\u00e9cnica popular para el acceso a bases de datos en las aplicaciones actuales, por ejemplo: Hibernate en Java o Exposed en Kotlin.  </li> <li>JPA (Java Persistence API): JPA es una API de persistencia est\u00e1ndar de Java que permite a las aplicaciones Java acceder a bases de datos relacionales. JPA es una especificaci\u00f3n que define una interfaz com\u00fan para interactuar con diferentes sistemas gestores de bases de datos. JPA utiliza el ORM para mapear objetos de una aplicaci\u00f3n a tablas de una base de datos relacional.  </li> <li>Spring Data: Spring Data es un proyecto de Spring Framework que proporciona una abstracci\u00f3n de acceso a datos para aplicaciones Java. Spring Data utiliza diferentes tecnolog\u00edas de acceso a bases de datos, como JDBC, JPA y el ORM. Spring Data proporciona una interfaz com\u00fan para acceder a diferentes sistemas gestores de bases de datos relacionales.</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#31-ventajas-y-desventajas-de-cada-metodo-de-acceso-a-bases-de-datos-relacionales","title":"3.1. Ventajas y desventajas de cada m\u00e9todo de acceso a bases de datos relacionales.","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#311-jdbc-java-database-connectivity","title":"3.1.1. JDBC (Java Database Connectivity):","text":"<p>Ventajas:  - Es una API est\u00e1ndar de Java y est\u00e1 soportada por la mayor\u00eda de los sistemas gestores de bases de datos relacionales. - Proporciona una interfaz com\u00fan para que las aplicaciones se conecten a bases de datos, realicen consultas y actualicen datos. - Permite un control m\u00e1s granular sobre las consultas y las transacciones.    </p> <p>Desventajas:  - Requiere una cantidad significativa de c\u00f3digo para interactuar con la base de datos.   - Puede ser propenso a errores si se maneja incorrectamente.  - No proporciona una abstracci\u00f3n de acceso a datos orientada a objetos.   </p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#312-orm-object-relational-mapping","title":"3.1.2. ORM (Object-Relational Mapping):","text":"<p>Ventajas:  - Proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos.  - Reduce significativamente la cantidad de c\u00f3digo requerido para interactuar con la base de datos.  - Proporciona una abstracci\u00f3n de acceso a datos orientada a objetos.   </p> <p>Desventajas:  - Puede haber una sobrecarga de rendimiento debido al mapeo de objetos a tablas de base de datos.  - El ORM puede generar consultas SQL sub\u00f3ptimas.  - La curva de aprendizaje inicial puede ser empinada.   </p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#313-jpa-java-persistence-api","title":"3.1.3. JPA (Java Persistence API):","text":"<p>Ventajas:  - Proporciona una interfaz de persistencia est\u00e1ndar de Java para acceder a bases de datos relacionales.  - Abstrae las diferencias entre los sistemas gestores de bases de datos subyacentes.   - Proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos.   </p> <p>Desventajas:  - Puede ser m\u00e1s lento que JDBC si se requiere un control granular sobre las consultas y las transacciones. - El ORM utilizado por JPA puede generar consultas SQL sub\u00f3ptimas.  - La curva de aprendizaje inicial puede ser empinada.   </p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#314-spring-data","title":"3.1.4. Spring Data:","text":"<p>Ventajas:  - Proporciona una abstracci\u00f3n de acceso a datos para aplicaciones Java.  - Abstrae las diferencias entre los sistemas gestores de bases de datos subyacentes.  - Proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos.   </p> <p>Desventajas:  - Puede ser m\u00e1s lento que JDBC si se requiere un control granular sobre las consultas y las transacciones.  - La curva de aprendizaje inicial puede ser empinada.  - La configuraci\u00f3n inicial puede ser m\u00e1s compleja que con JDBC.   </p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#4-trabajar-con-base-de-datos","title":"4. Trabajar con base de datos","text":"<p>Para trabajar con bases de datos en Kotlin, es necesario utilizar una librer\u00eda que permita la conexi\u00f3n y el acceso a la base de datos. Una de las librer\u00edas m\u00e1s comunes para trabajar con bases de datos en Kotlin es JDBC (Java Database Connectivity), que es una API est\u00e1ndar de Java que permite a las aplicaciones Java acceder a bases de datos relacionales.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#41-conectarnos-a-bases-de-datos","title":"4.1. Conectarnos a bases de datos","text":"<p>El establecimiento de conexiones con bases de datos es la primera tarea en el desarrollo de aplicaciones con acceso a datos. Para que una aplicaci\u00f3n pueda interactuar con una base de datos, primero debe establecer una conexi\u00f3n con ella. Esta operaci\u00f3n es una de las m\u00e1s costosas, y por eso existen varias implementaciones de los llamados pools de conexiones (por ejemplo HikariCP) que nos permiten optimizar esta tarea.</p> <p>Para establecer una conexi\u00f3n con una base de datos utilizando Kotlin y JDBC, se requiere importar la librer\u00eda JDBC en el proyecto. Luego, se debe cargar el driver JDBC espec\u00edfico para el gestor de base de datos que se va a utilizar, mediante la funci\u00f3n <code>Class.forName(\"nombre_del_controlador\")</code>. A continuaci\u00f3n, se crea una instancia de la clase <code>Connection</code> que representa la conexi\u00f3n con la base de datos, mediante la funci\u00f3n <code>DriverManager.getConnection(url, usuario, contrase\u00f1a)</code>.</p> <p>Para configurar la conexi\u00f3n, se deben proporcionar tres par\u00e1metros:   </p> <ol> <li>la URL de la base de datos, que incluye el nombre del servidor, el puerto y el nombre de la base de datos.   </li> <li>el nombre de usuario para acceder a la base de datos.    </li> <li>la contrase\u00f1a correspondiente.    </li> <li>otras opciones de configuraci\u00f3n.   </li> </ol> <p>La URL puede variar dependiendo del gestor de base de datos que se est\u00e9 utilizando y del tipo de conexi\u00f3n (por ejemplo, si se usa SSL o no).</p> <p>Un ejemplo de c\u00f3digo en Kotlin para establecer una conexi\u00f3n con una base de datos MySQL ser\u00eda:</p> <pre><code>import java.sql.*\n\nfun main() {\n    val url = \"jdbc:mysql://localhost:3306/mydatabase\"\n    val usuario = \"usuario\"\n    val contrase\u00f1a = \"contrase\u00f1a\"\n\n    try {\n        Class.forName(\"com.mysql.cj.jdbc.Driver\")\n        val conexion = DriverManager.getConnection(url, usuario, contrase\u00f1a)\n        println(\"Conexi\u00f3n exitosa\")\n        conexion.close()\n    } catch (e: SQLException) {\n        println(\"Error en la conexi\u00f3n: ${e.message}\")\n    } catch (e: ClassNotFoundException) {\n        println(\"No se encontr\u00f3 el driver JDBC: ${e.message}\")\n    }\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#42-almacenar-informacion","title":"4.2. Almacenar informaci\u00f3n","text":"<p>La inserci\u00f3n de registros en una base de datos, cuando estamos programando en un lenguaje orientado a objetos, suele coincidir con la inserci\u00f3n de la informaci\u00f3n de un objeto en una tabla. </p> <p>El proceso mediante el cual se inserta la informaci\u00f3n de un objeto que represente un registro en la tabla y utilizar el m\u00e9todo de inserci\u00f3n de JDBC para agregarlo a la tabla, se puede ver en los siguientes pasos:</p> <ol> <li>Crear una clase que represente la tabla y sus columnas.   </li> <li>Crear una instancia de la clase y establecer los valores de las propiedades.   </li> <li>Crear una conexi\u00f3n con la base de datos.   </li> <li>Crear una sentencia <code>SQL INSERT</code> que especifique la tabla y los valores a insertar.   </li> <li>Crear el objeto <code>PreparedStatement</code> para insertar la instancia en la tabla.   </li> <li>Ejecutar la sentencia SQL utilizando un objeto <code>PreparedStatement</code>.   </li> </ol> <p>A continuaci\u00f3n se muestra un ejemplo de c\u00f3mo insertar un registro en una tabla <code>mytable</code> utilizando un objeto instanciado de la clase <code>MyTable</code> que representa la tabla:</p> <pre><code>data class MyTable(val column1: String, val column2: Int, val column3: Double)\n\nval myRecord = MyTable(\"value1\", 2, 3.14)\n\nval conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydatabase\", \"username\", \"password\")\nval stmt = conn.prepareStatement(\"INSERT INTO mytable (column1, column2, column3) VALUES (?, ?, ?)\")\n\nstmt.setString(1, myRecord.column1)\nstmt.setInt(2, myRecord.column2)\nstmt.setDouble(3, myRecord.column3)\n\nstmt.executeUpdate()\n</code></pre> <p>En este ejemplo, se crea una conexi\u00f3n con la base de datos utilizando el m\u00e9todo <code>DriverManager.getConnection</code>. Luego, se crea una sentencia <code>SQL INSERT</code> utilizando un objeto <code>PreparedStatement</code>. Se crea una clase <code>MyTable</code> que representa la tabla y sus columnas, se crea una instancia de la clase . Se utiliza un objeto <code>PreparedStatement</code> para especificar los valores a insertar en las columnas de la tabla usando los m\u00e9todos <code>setString</code>, <code>setInt</code> y <code>setDouble</code>. Finalmente, se ejecuta la sentencia utilizando el m\u00e9todo <code>executeUpdate</code>.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#43-recuperar-y-mostrar-informacion","title":"4.3. Recuperar y mostrar informaci\u00f3n.","text":"<p>En el desarrollo de aplicaciones, es com\u00fan necesitar recuperar y mostrar informaci\u00f3n almacenada en una base de datos. Para ello, se requiere conocer las t\u00e9cnicas y herramientas necesarias para conectarse a la base de datos, ejecutar consultas SQL y mapear los resultados a objetos en el lenguaje de programaci\u00f3n utilizado.</p> <p>En este punto, nos enfocaremos en c\u00f3mo crear programas en Kotlin, aspecto que no difiere de como se hace en java, para recuperar informaci\u00f3n almacenada en bases de datos relacionales utilizando JDBC. Explicaremos c\u00f3mo ejecutar consultas SQL y mapear los resultados a objetos Kotlin para que puedan ser mostrados al usuario. Adem\u00e1s, tambi\u00e9n hablaremos sobre c\u00f3mo manejar errores y excepciones que puedan surgir durante el proceso.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#431-recuperar-registros-de-la-base-de-datos","title":"4.3.1. Recuperar registros de la base de datos.","text":"<p>Para recuperar registros de una tabla de la base de datos utilizando Kotlin y JDBC, necesitamos ejecutar una consulta SQL que seleccione los registros que deseamos recuperar. Esta consulta se puede ejecutar mediante un objeto <code>Statement</code> de JDBC, que se crea a partir de la conexi\u00f3n a la base de datos:</p> <pre><code>val statement = connection.createStatement()\nval query = \"SELECT id, nombre, email FROM usuario\"\nval resultSet = statement.executeQuery(query)\n</code></pre> <p>Una vez que tenemos los resultados de la consulta en un objeto <code>ResultSet</code>, podemos mapearlos a objetos en Kotlin. Para hacer esto, necesitamos iterar sobre los resultados y crear un objeto para cada registro. Por ejemplo, si tenemos una tabla usuarios con columnas <code>id</code>, <code>nombre</code> y <code>email</code>, podemos crear una clase <code>Usuario</code> en Kotlin y mapear cada registro de la siguiente manera:</p> <pre><code>data class Usuario(val id: Int, val nombre: String, val email: String)\n\nval usuarios = mutableListOf&lt;Usuario&gt;()\nwhile (resultSet.next()) {\n    val id = resultSet.getInt(\"id\")\n    val nombre = resultSet.getString(\"nombre\")\n    val email = resultSet.getString(\"email\")\n    usuarios.add(Usuario(id, nombre, email))\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#432-mostrar-los-resultados-al-usuario","title":"4.3.2. Mostrar los resultados al usuario.","text":"<p>A la hora de trabajar con la informaci\u00f3n y mostrarla al usuario final, es importante tener en cuenta la sensibilidad de la informaci\u00f3n almacenada en la base de datos y asegurarnos de cumplir con las normas de privacidad y seguridad de la informaci\u00f3n.</p> <p>Para mostrar los resultados al usuario, podemos imprimirlos en la consola, mostrarlos en una interfaz de usuario o hacer cualquier otra cosa que queramos con ellos, dependiendo del tipo de aplicaci\u00f3n que estemos desarrollando y de las necesidades del usuario. Algunas opciones comunes incluyen:</p> <ul> <li>Mostrar los resultados en una tabla: podemos crear una tabla en la interfaz de usuario de nuestra aplicaci\u00f3n y agregar cada registro como una fila en la tabla. Esto permite al usuario ver todos los datos de una manera clara y ordenada.    </li> <li>Mostrar los resultados en una lista: si la cantidad de registros es peque\u00f1a, podemos mostrarlos en una lista simple. Esto es especialmente \u00fatil si solo necesitamos mostrar algunos datos de cada registro, como el nombre y la fecha.    </li> <li>Mostrar los resultados en un gr\u00e1fico: si los datos son num\u00e9ricos, podemos mostrarlos en un gr\u00e1fico para que el usuario pueda ver visualmente las tendencias y las comparaciones entre los registros.   </li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#44-eliminar-y-actualizar-la-informacion-almacenada","title":"4.4. Eliminar y actualizar la informaci\u00f3n almacenada.","text":"<p>En el desarrollo de aplicaciones, es muy com\u00fan la necesidad de modificar o eliminar informaci\u00f3n almacenada en una base de datos. Para ello, es necesario contar con los conocimientos y herramientas adecuadas para realizar estas operaciones de manera segura y eficiente.</p> <p>En este sentido, el lenguaje de programaci\u00f3n Kotlin y la API JDBC ofrecen una serie de funcionalidades para llevar a cabo operaciones de modificaci\u00f3n y eliminaci\u00f3n en bases de datos relacionales. Es importante conocer c\u00f3mo funcionan estos m\u00e9todos para poder implementarlos correctamente en nuestras aplicaciones y evitar errores o problemas de seguridad en el manejo de la informaci\u00f3n almacenada.</p> <p>En este apartado se abordar\u00e1n los aspectos fundamentales de la realizaci\u00f3n de modificaciones y eliminaciones en una base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#441-eliminar-registros","title":"4.4.1. Eliminar registros.","text":"<p>Para eliminar registros de una tabla en una base de datos utilizando Kotlin y JDBC, es necesario construir y ejecutar una consulta SQL de eliminaci\u00f3n. Por ejemplo, si queremos eliminar un registro de la tabla <code>usuarios</code> que tenga un cierto identificador \u00fanico. Hay que tener cuidado con la cl\u00e1usula <code>WHERE</code>, ya que podemos tener un problema si no se establece adecuadamente. La consulta SQL podr\u00eda ser algo como:</p> <p><pre><code>DELETE FROM usuarios WHERE id = ?\n</code></pre> Luego, en Kotlin, podemos crear una conexi\u00f3n a la base de datos y ejecutar la consulta utilizando la interfaz <code>PreparedStatement</code> de JDBC, como se explic\u00f3 en puntos anteriores. La diferencia aqu\u00ed es que en lugar de utilizar un m\u00e9todo <code>executeQuery()</code>, utilizaremos el m\u00e9todo <code>executeUpdate()</code> que indica que estamos realizando una operaci\u00f3n de actualizaci\u00f3n. Adem\u00e1s, deberemos proporcionar el valor del identificador \u00fanico como par\u00e1metro en el objeto <code>PreparedStatement</code>.</p> <p><pre><code>val id = 1\nval query = \"DELETE FROM usuarios WHERE id = ?\"\nval preparedStatement = connection.prepareStatement(query)\npreparedStatement.setInt(1, id)\nval rowsDeleted = preparedStatement.executeUpdate()\n</code></pre> Estas operaciones tienen la clave en la sintaxis correcta de la consulta SQL y en la configuraci\u00f3n correcta de los par\u00e1metros en el objeto <code>PreparedStatement</code>. Una vez que se tiene la conexi\u00f3n a la base de datos, se puede crear un objeto <code>PreparedStatement</code> con la consulta SQL y los par\u00e1metros correspondientes. Luego, se utiliza el m\u00e9todo <code>executeUpdate()</code> para ejecutar la consulta y eliminar los registros. </p> <p>Por \u00faltimo, siempre ser\u00e1 importante comprobar el resultado de la ejecuci\u00f3n del m\u00e9todo<code>executeUpdate()</code> y hacer el tratamiento que se estime oporturno en funci\u00f3n del resultado obtenido. Por ejemplo, en este caso, el m\u00e9todo <code>executeUpdate()</code> devuelve la cantidad de filas afectadas por la sentencia ejecutada, que en este caso deber\u00eda ser <code>1</code> si se encontr\u00f3 y elimin\u00f3 el registro correspondiente.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#442-actualizar-registros","title":"4.4.2. Actualizar registros.","text":"<p>Para actualizar registros en una tabla de la base de datos utilizando Kotlin y JDBC, primero es necesario establecer una conexi\u00f3n a la base de datos y crear una declaraci\u00f3n SQL que actualice los campos necesarios. La declaraci\u00f3n SQL debe incluir la cl\u00e1usula <code>WHERE</code> para identificar los registros que se deben actualizar.</p> <p>Por ejemplo, si tenemos una tabla llamada <code>usuarios</code> con los campos <code>nombre</code>, <code>apellido</code> y <code>email</code>, y queremos actualizar el email de un usuario en particular, podemos crear una declaraci\u00f3n SQL como la siguiente:</p> <p><pre><code>UPDATE usuarios SET email = 'nuevo_email@example.com' WHERE nombre = 'Juan' AND apellido = 'P\u00e9rez';\n</code></pre> Una vez que se tiene la declaraci\u00f3n SQL, se debe utilizar el objeto <code>Statement</code> de JDBC para ejecutarla. El m\u00e9todo <code>executeUpdate()</code> se utiliza para ejecutar la declaraci\u00f3n y actualizar los registros correspondientes.</p> <pre><code>val statement = connection.createStatement()\nval updateCount = statement.executeUpdate(sql)\n</code></pre> <p>Como comentamos anteriormente, el m\u00e9todo <code>executeUpdate()</code> devuelve la cantidad de filas afectadas por la sentencia ejecutada, que en este caso deber\u00eda ser <code>1</code> si se encontr\u00f3 y actualiz\u00f3 el registro correspondiente. Siempre ser\u00e1 importante comprobar el resultado de la ejecuci\u00f3n del m\u00e9todo<code>executeUpdate()</code> y hacer el tratamiento que se estime oporturno en funci\u00f3n del resultado obtenido.</p> <p>Para realizar un ejemplo m\u00e1s completo de c\u00f3mo utilizar una consulta SQL para actualizar registros. Supongamos que queremos actualizar un registro en la tabla <code>users</code>:</p> <pre><code>// Establecer una conexi\u00f3n con la base de datos\nval connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydatabase\", \"root\", \"password\")\n\n// Crear una consulta SQL para actualizar el nombre del usuario con id = 1\nval sql = \"UPDATE users SET name = ? WHERE id = ?\"\n\n// Crear un objeto que represente los valores actualizados\nval name = \"John\"\nval id = 1\n\n// Utilizar el m\u00e9todo \"prepareStatement\" de la conexi\u00f3n para crear un objeto PreparedStatement\nval statement = connection.prepareStatement(sql)\n\n// Establecer los valores de los par\u00e1metros de la consulta utilizando los m\u00e9todos set correspondientes de la clase PreparedStatement\nstatement.setString(1, name)\nstatement.setInt(2, id)\n\n// Ejecutar la consulta utilizando el m\u00e9todo \"executeUpdate\" de la clase PreparedStatement\nval rowsUpdated = statement.executeUpdate()\n\n// Verificar si se ha actualizado alg\u00fan registro\nif (rowsUpdated &gt; 0) {\n    println(\"El registro ha sido actualizado exitosamente.\")\n} else {\n    println(\"No se ha actualizado ning\u00fan registro.\")\n}\n\n// Cerrar la conexi\u00f3n a la base de datos\nstatement.close()\nconnection.close()\n</code></pre> <p>En este ejemplo, primero se establece una conexi\u00f3n con la base de datos utilizando los detalles de conexi\u00f3n adecuados. Luego, se crea una consulta SQL para actualizar el nombre del usuario con <code>id = 1</code> en la tabla <code>users</code>. Sobre el objeto conexi\u00f3n se utiliza el m\u00e9todo <code>prepareStatement</code> para crear un objeto <code>PreparedStatement</code>. Luego, se establecen los valores de los par\u00e1metros de la consulta utilizando los m\u00e9todos set correspondientes de la clase <code>PreparedStatement</code> y se ejecuta la consulta utilizando el m\u00e9todo <code>executeUpdate</code> de la clase <code>PreparedStatement</code>. Se verifica si se ha actualizado alg\u00fan registro y se la sentencia y la conexi\u00f3n a la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#45-consulta-de-informacion-almacenada","title":"4.5. Consulta de informaci\u00f3n almacenada.","text":"<p>Al desarrollar una aplicaci\u00f3n que requiere acceder y manipular datos almacenados en una base de datos, es com\u00fan que necesitemos realizar consultas m\u00e1s complejas para obtener la informaci\u00f3n requerida. Las consultas pueden involucrar operadores l\u00f3gicos para filtrar resultados y funciones de agregaci\u00f3n para realizar c\u00e1lculos en los datos. Es importante que los programadores tengan conocimientos s\u00f3lidos en la creaci\u00f3n y ejecuci\u00f3n de consultas SQL utilizando JDBC en Kotlin para obtener resultados precisos y eficientes. En esta secci\u00f3n, se explicar\u00e1 c\u00f3mo crear consultas m\u00e1s complejas utilizando Kotlin y JDBC y se demostrar\u00e1 c\u00f3mo utilizar operadores l\u00f3gicos y funciones de agregaci\u00f3n en las consultas SQL.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#451-consultas-complejas","title":"4.5.1. Consultas complejas.","text":"<p>Para crear consultas m\u00e1s complejas utilizando Kotlin y JDBC, se pueden concatenar distintas cl\u00e1usulas de SQL en una sola sentencia. Por ejemplo, para realizar una consulta que seleccione registros de una tabla que cumplan ciertas condiciones y los ordene por un campo en particular, se puede utilizar la siguiente sintaxis:</p> <p><pre><code>val query = \"SELECT * FROM tabla WHERE condicion ORDER BY campo\"\nval statement = connection.createStatement()\nval resultSet = statement.executeQuery(query)\n</code></pre> En este ejemplo, <code>tabla</code> es el nombre de la tabla que se desea consultar, <code>condicion</code> es una expresi\u00f3n que define las condiciones que deben cumplir los registros seleccionados, y <code>campo</code> es el nombre del campo por el cual se deben ordenar los resultados. La consulta se ejecuta mediante el m\u00e9todo <code>executeQuery()</code> del objeto <code>Statement</code>.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#452-utilizar-operadores-logicos-y-funciones-de-agregacion-en-las-consultas","title":"4.5.2. Utilizar operadores l\u00f3gicos y funciones de agregaci\u00f3n en las consultas.","text":"<p>Para utilizar operadores l\u00f3gicos y funciones de agregaci\u00f3n en las consultas SQL, se puede utilizar la sintaxis est\u00e1ndar de SQL en la cadena de consulta. Por ejemplo, para realizar una consulta que seleccione registros de una tabla que cumplan ciertas condiciones y calcule la suma de los valores de un campo en particular, se puede utilizar la siguiente sintaxis:</p> <p>Supongamos que tenemos una tabla llamada \"ventas\" que contiene informaci\u00f3n sobre las ventas realizadas en una tienda, con las siguientes columnas:</p> <ul> <li><code>id</code>: identificador \u00fanico de la venta.</li> <li><code>fecha</code>: fecha en que se realiz\u00f3 la venta.</li> <li><code>monto</code>: monto total de la venta.</li> <li><code>tipo</code>: tipo de venta, puede ser \"efectivo\" o \"tarjeta\".</li> <li><code>sucursal</code>: sucursal en la que se realiz\u00f3 la venta.</li> </ul> <p>Supongamos que queremos obtener el monto total de las ventas realizadas en la sucursal \"A\" durante el mes de enero, y que fueron pagadas con tarjeta de cr\u00e9dito. Para hacer esto, podemos utilizar una consulta SQL con operadores l\u00f3gicos y funciones de agregaci\u00f3n, de la siguiente manera:</p> <pre><code>val consulta = \"SELECT SUM(monto) FROM ventas WHERE sucursal = 'A' AND tipo = 'tarjeta' AND MONTH(fecha) = 1\"\n\ntry {\n    val statement = conexion.createStatement()\n    val resultados = statement.executeQuery(consulta)\n\n    while (resultados.next()) {\n        val montoTotal = resultados.getDouble(1)\n        println(\"Monto total de ventas en sucursal A pagadas con tarjeta en enero: $montoTotal\")\n    }\n\n    resultados.close()\n    statement.close()\n} catch (ex: SQLException) {\n    println(\"Error al ejecutar consulta: ${ex.message}\")\n}\n</code></pre> <p>En este ejemplo, la consulta SQL utiliza el operador l\u00f3gico <code>AND</code> para combinar varias condiciones en la cl\u00e1usula <code>WHERE</code>: la <code>sucursal</code> debe ser <code>A</code>, el <code>tipo</code> de venta debe ser <code>tarjeta</code>, y el <code>mes</code> de la fecha debe ser <code>1</code> (que representa el mes de enero). Adem\u00e1s, la funci\u00f3n de agregaci\u00f3n <code>SUM</code> se utiliza para sumar los montos totales de todas las ventas que cumplen con estas condiciones.</p> <p>Si la consulta se ejecuta correctamente, el resultado se muestra por consola. Si ocurre un error, se muestra un mensaje de error.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#5-crear-aplicaciones-para-posibilitar-la-gestion-de-informacion","title":"5. Crear aplicaciones para posibilitar la gesti\u00f3n de informaci\u00f3n","text":"<p>Al desarrollar aplicaciones que requieren almacenamiento de datos, es fundamental comprender c\u00f3mo interactuar con bases de datos para almacenar informaci\u00f3n de manera efectiva y segura.</p> <p>Un ejemplo de aplicaci\u00f3n que permite la gesti\u00f3n de informaci\u00f3n en una base de datos podr\u00eda ser un sistema de gesti\u00f3n de inventario para una tienda. La interfaz de usuario podr\u00eda permitir al usuario agregar nuevos productos al inventario, actualizar la informaci\u00f3n de los productos existentes, eliminar productos, y realizar consultas para buscar productos por nombre, categor\u00eda, precio, etc.</p> <p>Para implementar estas funcionalidades, se podr\u00eda utilizar JDBC para establecer la conexi\u00f3n con la base de datos y ejecutar consultas SQL para agregar, actualizar o eliminar registros. Adem\u00e1s, se podr\u00eda utilizar una librer\u00eda de UI como JavaFX para dise\u00f1ar la interfaz de usuario y permitir al usuario interactuar con la base de datos de manera sencilla y visual.</p> <p>Para manejar errores en la aplicaci\u00f3n, se podr\u00eda implementar validaciones en la interfaz de usuario para asegurarse de que los datos ingresados por el usuario son correctos y cumplen con las restricciones de la base de datos. Adem\u00e1s, se podr\u00edan implementar mecanismos de manejo de excepciones en el c\u00f3digo para manejar errores que puedan surgir durante la ejecuci\u00f3n de consultas o actualizaciones en la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#51-gestion-de-informacion","title":"5.1. Gesti\u00f3n de informaci\u00f3n.","text":"<p>Para crear aplicaciones que permitan la gesti\u00f3n de informaci\u00f3n en una base de datos, es necesario dise\u00f1ar una interfaz de usuario que permita al usuario interactuar con la base de datos de manera intuitiva y eficiente. La interfaz debe permitir realizar operaciones b\u00e1sicas como crear, leer, actualizar y eliminar registros.</p> <p>Una vez que se ha dise\u00f1ado la interfaz, se puede utilizar Kotlin y JDBC para implementar las funcionalidades. Por ejemplo, se puede utilizar JDBC para establecer la conexi\u00f3n con la base de datos y realizar consultas y actualizaciones en la misma.</p> <p>CRUD es un acr\u00f3nimo que se utiliza para describir las cuatro operaciones b\u00e1sicas de la gesti\u00f3n de datos: Crear, Leer, Actualizar y Eliminar (en ingl\u00e9s, Create, Read, Update, Delete).</p> <p>Por lo tanto, al crear una aplicaci\u00f3n para la gesti\u00f3n de la informaci\u00f3n presente en bases de datos relacionales, es com\u00fan que se implementen estas cuatro operaciones CRUD para permitir al usuario realizar acciones como crear nuevos registros, leer la informaci\u00f3n almacenada, actualizar registros existentes o eliminar datos no deseados. A trav\u00e9s de una interfaz de usuario adecuada, estas operaciones se pueden realizar de manera sencilla y eficiente, lo que mejora la experiencia del usuario y facilita la gesti\u00f3n de la informaci\u00f3n en la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#52-un-crud-para-gestionar-la-informacion","title":"5.2. Un CRUD para gestionar la informaci\u00f3n","text":"<p>Las operaciones del CRUD son fundamentales en la mayor\u00eda de las aplicaciones de gesti\u00f3n de bases de datos, ya que permiten al usuario interactuar con los datos de una manera intuitiva y eficiente. Un ejemplo de un CRUD para gestionar el acceso a una tabla <code>users</code></p> <pre><code>import java.sql.*\n\n// Definir constantes para la conexi\u00f3n\nconst val DB_URL = \"jdbc:mysql://localhost:3306/mydatabase\"\nconst val USER = \"root\"\nconst val PASS = \"mypassword\"\n\n// Funci\u00f3n para establecer una conexi\u00f3n a la base de datos\nfun getConnection(): Connection? {\n    var conn: Connection? = null\n    try {\n        conn = DriverManager.getConnection(DB_URL, USER, PASS)\n    } catch (ex: SQLException) {\n        ex.printStackTrace()\n    }\n    return conn\n}\n\n// Funci\u00f3n para cerrar una conexi\u00f3n a la base de datos\nfun closeConnection(conn: Connection?) {\n    try {\n        conn?.close()\n    } catch (ex: SQLException) {\n        ex.printStackTrace()\n    }\n}\n\n// Funci\u00f3n para crear un nuevo registro en la tabla de la base de datos\nfun createRecord(name: String, email: String) {\n    val conn = getConnection()\n    val sql = \"INSERT INTO users (name, email) VALUES (?, ?)\"\n    try {\n        val stmt = conn?.prepareStatement(sql)\n        stmt?.setString(1, name)\n        stmt?.setString(2, email)\n        stmt?.executeUpdate()\n        stmt?.close()\n    } catch (ex: SQLException) {\n        ex.printStackTrace()\n    } finally {\n        closeConnection(conn)\n    }\n}\n\n// Funci\u00f3n para leer todos los registros de la tabla de la base de datos\nfun readAllRecords(): List&lt;User&gt; {\n    val conn = getConnection()\n    val sql = \"SELECT * FROM users\"\n    val userList = mutableListOf&lt;User&gt;()\n    try {\n        val stmt = conn?.createStatement()\n        val rs = stmt?.executeQuery(sql)\n        while (rs?.next() == true) {\n            val id = rs.getInt(\"id\")\n            val name = rs.getString(\"name\")\n            val email = rs.getString(\"email\")\n            userList.add(User(id, name, email))\n        }\n        rs?.close()\n        stmt?.close()\n    } catch (ex: SQLException) {\n        ex.printStackTrace()\n    } finally {\n        closeConnection(conn)\n    }\n    return userList\n}\n\n// Funci\u00f3n para actualizar un registro existente en la tabla de la base de datos\nfun updateRecord(id: Int, name: String, email: String) {\n    val conn = getConnection()\n    val sql = \"UPDATE users SET name = ?, email = ? WHERE id = ?\"\n    try {\n        val stmt = conn?.prepareStatement(sql)\n        stmt?.setString(1, name)\n        stmt?.setString(2, email)\n        stmt?.setInt(3, id)\n        stmt?.executeUpdate()\n        stmt?.close()\n    } catch (ex: SQLException) {\n        ex.printStackTrace()\n    } finally {\n        closeConnection(conn)\n    }\n}\n\n// Funci\u00f3n para eliminar un registro existente en la tabla de la base de datos\nfun deleteRecord(id: Int) {\n    val conn = getConnection()\n    val sql = \"DELETE FROM users WHERE id = ?\"\n    try {\n        val stmt = conn?.prepareStatement(sql)\n        stmt?.setInt(1, id)\n        stmt?.executeUpdate()\n        stmt?.close()\n    } catch (ex: SQLException) {\n        ex.printStackTrace()\n    } finally {\n        closeConnection(conn)\n    }\n}\n\n// Clase para representar un registro de la tabla de la base de datos\ndata class User(val id: Int, val name: String, val email: String)\n\nfun main() {\n    // Crear un nuevo registro en la tabla de la base de datos\n    createRecord(\"Juan\", \"juan@example.com\")\n\n    // Leer todos los registros de la tabla de la base de datos\n    val userList = readAllRecords()\n    for (user in userList) {\n        println(user)\n    }\n\n    // Actualizar un registro existente en la tabla de la base de datos\n    updateRecord(1, \"Juan Perez\", \"juan.perez@example.com\")\n\n    // Leer todos los registros de la tabla de la base de datos nuevamente\n    val updatedUserList = readAllRecords()\n    for (user in updatedUserList) {\n        println(user)\n    }\n\n    // Eliminar un registro existente en la tabla de la base de datos\n    deleteRecord(1)\n\n    // Leer todos los registros de la tabla de la base de datos nuevamente\n    val finalUserList = readAllRecords()\n    for (user in finalUserList) {\n        println(user)\n    }\n}\n</code></pre> <p>Para empezar, la funci\u00f3n <code>getConnection()</code> se utiliza para establecer una conexi\u00f3n con la base de datos. Esta funci\u00f3n utiliza los valores de las constantes <code>DB_URL</code>, <code>USER</code> y <code>PASS</code> para conectarse a la base de datos mydatabase. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo:</p> <pre><code>val conn = getConnection()\n</code></pre> <p>La funci\u00f3n <code>closeConnection()</code> se utiliza para cerrar la conexi\u00f3n con la base de datos. Esta funci\u00f3n se llama al final de cada operaci\u00f3n de base de datos para asegurarse de que se cierra la conexi\u00f3n y se liberan los recursos utilizados. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle la conexi\u00f3n como argumento:</p> <pre><code>closeConnection(conn)\n</code></pre> <p>La funci\u00f3n <code>createRecord()</code> se utiliza para crear un nuevo registro en la tabla de la base de datos. Esta funci\u00f3n toma dos par\u00e1metros: name y email, que son los valores que se insertar\u00e1n en la tabla users. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle los valores que quieres insertar:</p> <pre><code>createRecord(\"John Doe\", \"john.doe@example.com\")\n</code></pre> <p>La funci\u00f3n <code>readAllRecords()</code> se utiliza para leer todos los registros de la tabla de la base de datos y devolver una lista de objetos User. Esta funci\u00f3n no toma ning\u00fan par\u00e1metro. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo:</p> <pre><code>val userList = readAllRecords()\n</code></pre> <p>La funci\u00f3n <code>updateRecord()</code> se utiliza para actualizar un registro existente en la tabla de la base de datos. Esta funci\u00f3n toma tres par\u00e1metros: id, name y email, que son los nuevos valores que se actualizar\u00e1n en la tabla users. id es el identificador del registro que se va a actualizar. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle los valores que quieres actualizar:</p> <pre><code>updateRecord(1, \"Jane Doe\", \"jane.doe@example.com\")\n</code></pre> <p>La funci\u00f3n <code>deleteRecord()</code> se utiliza para eliminar un registro existente en la tabla de la base de datos. Esta funci\u00f3n toma un par\u00e1metro: id, que es el identificador del registro que se va a eliminar. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle el valor que quieres eliminar:</p> <pre><code>deleteRecord(1)\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#53-manejar-los-errores","title":"5.3. Manejar los errores.","text":"<p>Al trabajar con JDBC es importante tener en cuenta que pueden ocurrir diversas excepciones durante todo el proceso de establecimiento de conexi\u00f3n, ejecuci\u00f3n de sentencia, recuperaci\u00f3n de resultados, etc, y que indicar\u00e1n distintos tipos de errores, como falta de conexi\u00f3n con el servidor, credenciales incorrectas, error de tipos, errores propios de base de datos por inconsistencias, etc. Por lo tanto, se debe utilizar una estructura <code>try-catch</code> para manejar estas excepciones. En los ejemplos anteriores se han podido ver como se han utilizado estos bloques try-catch para encerrar las operaciones relacionadas con JDBC.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#531-manejar-errores-de-conexion","title":"5.3.1. Manejar errores de conexi\u00f3n","text":"<p>Para manajar los posibles errores que se puedan producir al realizar la conexi\u00f3n tendremos que manejar las excepciones <code>SQLException</code> y <code>ClassNotFoundException</code>, que pueden ocurrir al intentar establecer la conexi\u00f3n o cargar el driver JDBC correspondiente. Adem\u00e1s, se imprime un mensaje de error para cada una de estas excepciones. En la pr\u00e1ctica, es importante identificar las excepciones que pueden ocurrir espec\u00edficamente para el gestor de base de datos que se est\u00e9 utilizando, y manejarlas adecuadamente.</p> <p>Para manejar errores de conexi\u00f3n de una manera m\u00e1s efectiva, podemos utilizar un bloque <code>try-catch-finally</code> para asegurarnos de <code>Statements</code>, <code>ResultSets</code>, y <code>Connections</code> se cierre correctamente, incluso si se produce un error al establecer la conexi\u00f3n. Adem\u00e1s, podemos lanzar una excepci\u00f3n personalizada en caso de que se produzca un error para informar al usuario del problema. Aqu\u00ed te presento una \u1e55osible funci\u00f3n para obtener una conexi\u00f3n <code>getConnection</code> que utiliza este enfoque:</p> <pre><code>import java.sql.Connection\nimport java.sql.DriverManager\nimport java.sql.SQLException\n\n// Datos de conexi\u00f3n a la base de datos\nval url = \"jdbc:mysql://localhost:3306/nombre_de_la_base_de_datos\"\nval user = \"usuario\"\nval password = \"contrase\u00f1a\"\n\n// Funci\u00f3n para establecer la conexi\u00f3n\nfun getConnection(): Connection {\n    var connection: Connection? = null\n    try {\n        connection = DriverManager.getConnection(url, user, password)\n    } catch (e: SQLException) {\n        throw SQLException(\"Error al establecer la conexi\u00f3n con la base de datos: ${e.message}\")\n    } finally {\n        if (connection != null) {\n            try {\n                connection.close()\n            } catch (e: SQLException) {\n                throw SQLException(\"Error al cerrar la conexi\u00f3n con la base de datos: ${e.message}\")\n            }\n        }\n    }\n    return connection\n}\n</code></pre> <p>En este ejemplo, utilizamos un bloque <code>try-catch</code> para capturar la excepci\u00f3n <code>SQLException</code> si se produce un error al establecer la conexi\u00f3n. Si se produce un error, lanzamos una excepci\u00f3n personalizada con un mensaje de error descriptivo para informar al usuario del problema.</p> <p>En el bloque <code>finally</code>, cerramos la conexi\u00f3n utilizando el m\u00e9todo <code>close</code> y tambi\u00e9n capturamos la excepci\u00f3n <code>SQLException</code> en caso de que se produzca un error al cerrar la conexi\u00f3n.</p> <p>Con este c\u00f3digo, hemos mejorado el manejo de errores de conexi\u00f3n en nuestro programa, lo que nos permite informar al usuario de los problemas que puedan surgir al interactuar con la base de datos.</p> <p>You should explicitly close <code>Statements</code>, <code>ResultSets</code>, and <code>Connections</code> when you no longer need them,</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#532-manejo-de-errores-en-la-insercion","title":"5.3.2. Manejo de errores en la inserci\u00f3n","text":"<p>Es importante manejar los errores de inserci\u00f3n de datos en una base de datos para garantizar la integridad de la informaci\u00f3n. Para manejar estos errores en Kotlin y JDBC, podemos utilizar bloques <code>try-catch</code>.</p> <p>Por ejemplo, si estamos insertando un registro en una tabla que tiene una restricci\u00f3n de clave primaria y el registro que estamos intentando insertar ya existe en la tabla, JDBC lanzar\u00e1 una <code>SQLException</code> indicando que se viola la restricci\u00f3n de clave primaria. En este caso, podemos capturar la excepci\u00f3n y mostrar un mensaje al usuario inform\u00e1ndole del error y pidi\u00e9ndole que modifique los datos del registro.</p> <p>Un ejemplo de manejo de errores de inserci\u00f3n en Kotlin y JDBC podr\u00eda ser el siguiente:</p> <pre><code>try {\n    val statement = connection.createStatement()\n    val query = \"INSERT INTO customers (name, email) VALUES ('John Doe', 'johndoe@email.com')\"\n    statement.executeUpdate(query)\n} catch (e: SQLException) {\n    when (e.errorCode) {\n        1062 -&gt; {\n            // Violation of unique key constraint\n            println(\"Error: The email address is already registered.\")\n        }\n        else -&gt; {\n            // Other SQL exceptions\n            println(\"Error: ${e.message}\")\n        }\n    }\n}\n</code></pre> <p>En este ejemplo, estamos insertando un registro en la tabla <code>customers</code> con los valores <code>John Doe</code> y <code>johndoe@email.com</code>. Si se produce un error durante la inserci\u00f3n, capturamos la excepci\u00f3n <code>SQLException</code> y comprobamos el c\u00f3digo de error devuelto por la base de datos.</p> <p>Si el c\u00f3digo de error es <code>1062</code>, significa que se ha violado una restricci\u00f3n de clave \u00fanica, en este caso, la restricci\u00f3n de correo electr\u00f3nico \u00fanico. Mostramos un mensaje de error indicando que el correo electr\u00f3nico ya est\u00e1 registrado. Estos c\u00f3digos de error son espec\u00edficos de cada DBMS, por tanto hay que consultar la documetnaci\u00f3n del motor de base de datos para identificar los posibles c\u00f3digos de error.</p> <p>Si se produce cualquier otro tipo de excepci\u00f3n, mostramos un mensaje gen\u00e9rico con el mensaje de error devuelto por la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#533-manejo-de-errores-de-eliminacion","title":"5.3.3. Manejo de errores de eliminaci\u00f3n.","text":"<p>Para manejar errores de eliminaci\u00f3n, podemos utilizar las mismas t\u00e9cnicas que se describieron para manejar errores de inserci\u00f3n. Es importante tener en cuenta que si se intenta eliminar un registro que no existe, la consulta SQL no afectar\u00e1 ninguna fila y el m\u00e9todo <code>executeUpdate()</code> devolver\u00e1 <code>0</code>. Por lo tanto, es una buena pr\u00e1ctica verificar el valor devuelto por este m\u00e9todo y manejar el caso en el que se intenta eliminar un registro que no existe.</p> <p>Un ejemplo completo podr\u00eda ser:    </p> <pre><code>//Eliminar un registro de la tabla\ntry {\n    // Crear la conexi\u00f3n\n    val connection = DriverManager.getConnection(url, user, password)\n\n    // Crear la sentencia SQL para eliminar el registro\n    val sql = \"DELETE FROM usuarios WHERE id = ?\"\n\n    // Crear el objeto PreparedStatement y establecer el valor del par\u00e1metro\n    val statement = connection.prepareStatement(sql)\n    statement.setInt(1, 1)\n\n    // Ejecutar la sentencia y obtener el n\u00famero de registros eliminados\n    val rowsDeleted = statement.executeUpdate()\n\n    // Comprobar si se ha eliminado el registro correctamente\n    if (rowsDeleted &gt; 0) {\n        println(\"El usuario ha sido eliminado correctamente.\")\n    } else {\n        println(\"No se ha eliminado ning\u00fan usuario.\")\n    }\n\n    // Cerrar la conexi\u00f3n\n    statement.close()\n    connection.close()\n\n} catch (e: SQLException) {\n    println(\"Se ha producido un error al intentar eliminar el usuario.\")\n    println(\"Mensaje de error: ${e.message}\")\n}\n</code></pre> <p>En este ejemplo, se utiliza un bloque <code>try-catch</code> para manejar cualquier excepci\u00f3n de SQL que pueda ocurrir al intentar eliminar un registro de la tabla usuarios. Dentro del bloque <code>try</code>, se establece la conexi\u00f3n con la base de datos, se crea una sentencia SQL para eliminar el registro con <code>id</code> <code>1</code> y se crea un objeto <code>PreparedStatement</code> para ejecutar la sentencia. A continuaci\u00f3n, se utiliza la funci\u00f3n <code>executeUpdate()</code> para eliminar el registro y se obtiene el n\u00famero de registros eliminados. Si se ha eliminado el registro correctamente, se muestra un mensaje indicando que el registro ha sido eliminado. De lo contrario, se muestra un mensaje indicando que no se ha eliminado ning\u00fan registro. Finalmente, se cierra la conexi\u00f3n y se maneja cualquier excepci\u00f3n de SQL que pueda ocurrir en el bloque <code>catch</code>.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#534-manejar-errores-de-actualizacion","title":"5.3.4. Manejar errores de actualizaci\u00f3n.","text":"<p>Al igual que en el caso de la eliminaci\u00f3n de registros, es importante manejar correctamente los errores que puedan surgir al actualizar registros en una base de datos. Algunos de los errores m\u00e1s comunes son la falta de permisos para realizar la actualizaci\u00f3n, el incumplimiento de restricciones de integridad referencial o de validaci\u00f3n, o la falta de conexi\u00f3n a la base de datos.</p> <p>Dentro del bloque <code>catch</code>, se puede proporcionar informaci\u00f3n sobre el error al usuario o registrar el error en un archivo de registro para su posterior an\u00e1lisis. Es importante asegurarse de que el usuario sea informado adecuadamente sobre los errores que puedan ocurrir durante la actualizaci\u00f3n de registros.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#6-un-crud-aplicando-el-patron-dao","title":"6. Un CRUD aplicando el patr\u00f3n DAO","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#61-patron-dao","title":"6.1. Patr\u00f3n DAO","text":"<p>El patr\u00f3n DAO (Data Access Object) es un patr\u00f3n de dise\u00f1o que se utiliza para abstraer la capa de acceso a datos de una aplicaci\u00f3n. El objetivo principal del patr\u00f3n DAO es separar la l\u00f3gica de acceso a datos de la l\u00f3gica de negocio de la aplicaci\u00f3n, lo que permite una mayor flexibilidad y mantenibilidad del c\u00f3digo.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#62-ejemplo","title":"6.2. Ejemplo","text":"<p>A continuaci\u00f3n veremos un ejemplo en Kotlin de una implementaci\u00f3n b\u00e1sica de un sistema CRUD (Create, Read, Update, Delete) usando un patr\u00f3n DAO (Data Access Object) y servicios. Este c\u00f3digo implementa una arquitectura b\u00e1sica de DAO y servicios para interactuar con una base de datos H2 y realizar operaciones CRUD en una tabla de usuarios. Se puede resumir en el siguiente extracto:</p> <p>La clase <code>UserEntity</code> define el modelo de datos para el usuario con tres atributos: <code>id</code> (de tipo <code>UUID</code>), <code>name</code> y <code>email</code>.</p> <p>La interfaz <code>UserDAO</code> define las operaciones que se pueden realizar con la base de datos para los usuarios, como crear (<code>create</code>), obtener todos los usuarios (<code>getAll</code>), obtener un usuario por su id (<code>getById</code>), actualizar (<code>update</code>) y eliminar (<code>delete</code>) un usuario. Se podr\u00edan crear m\u00e1s metodos en funci\u00f3n de las necesidades, por ejemplo <code>getByEmail</code>.</p> <p>La clase <code>UserDAOH2</code> implementa la interfaz <code>UserDAO</code> y define las operaciones de base de datos espec\u00edficas de la implementaci\u00f3n de H2. La clase tiene una dependencia de <code>DataSource</code>, que es una fuente de conexi\u00f3n de base de datos que se utiliza para realizar operaciones en la base de datos.</p> <p>La interfaz <code>UserService</code> define las operaciones que se pueden realizar con los usuarios a nivel de servicio, que son crear (<code>create</code>), obtener todos los usuarios (<code>getAll</code>), obtener un usuario por su id (<code>getById</code>), actualizar (<code>update</code>) y eliminar (<code>delete</code>) un usuario. Igualmente, se podr\u00edan crear m\u00e1s metodos en funci\u00f3n de las necesidades, por ejemplo <code>getByEmail</code>.</p> <p>La clase <code>UserServiceImpl</code> implementa la interfaz <code>UserService</code> y utiliza un objeto de la clase <code>UserDAOH2</code> para interactuar con la base de datos.</p> <p>La clase <code>DataSourceFactory</code> es una factor\u00eda que proporciona instancias de <code>DataSource</code> seg\u00fan el tipo de fuente de datos especificado.</p> <p>En la funci\u00f3n <code>main</code> se prueba todo el c\u00f3digo, para ello se crea una instancia de la base de datos, se crea una instancia de <code>UserDAOH2</code>, se crea una instancia de <code>UserServiceImpl</code> y se realizan algunas operaciones CRUD en la base de datos utilizando <code>UserServiceImpl</code>. La salida se imprime en la consola.</p> <p>Ver el c\u00f3digo aqu\u00ed: Servicio de usuario, haciendo uso del patron DAO</p> <p>Mas informaci\u00f3n en CRUD</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#7-resumiendo","title":"7. Resumiendo","text":"<ul> <li>Las bases de datos son una herramienta crucial para el desarrollo de software, ya que permiten a los desarrolladores almacenar y gestionar grandes cantidades de informaci\u00f3n de manera eficiente y confiable. La capacidad de almacenar y acceder a informaci\u00f3n de manera eficiente es una necesidad en cualquier aplicaci\u00f3n de software moderna, y las bases de datos son la soluci\u00f3n m\u00e1s com\u00fan y eficaz para esta necesidad.    </li> <li>Kotlin es un lenguaje de programaci\u00f3n moderno y seguro que se utiliza cada vez m\u00e1s en el desarrollo de aplicaciones inform\u00e1ticas. En la programaci\u00f3n de aplicaciones que acceden a bases de datos, Kotlin es una opci\u00f3n popular y efectiva debido a su soporte integrado para el acceso a bases de datos y su sintaxis concisa y expresiva. El uso de Kotlin en la programaci\u00f3n de aplicaciones que acceden a bases de datos permite a los desarrolladores crear aplicaciones m\u00e1s seguras, confiables y escalables.    </li> <li>Un sistema gestor de bases de datos relacional es un software utilizado para almacenar, organizar y manipular datos en una base de datos relacional. Los sistemas gestores de bases de datos relacionales tienen caracter\u00edsticas como una estructura basada en tablas, relaciones entre tablas, consultas complejas, integridad de los datos y escalabilidad. Los m\u00e9todos de acceso a sistemas gestores de bases de datos relacionales incluyen la API JDBC y el ORM.    </li> <li>Los m\u00e9todos de acceso a bases de datos incluyen JDBC, ORM, JPA y Spring Data. JDBC proporciona una interfaz com\u00fan para acceder a bases de datos relacionales desde aplicaciones Java. El ORM y JPA proporcionan una interfaz orientada a objetos para acceder a los datos de la base de datos. Spring Data proporciona una abstracci\u00f3n de acceso a datos para aplicaciones Java. Los diferentes m\u00e9todos de acceso a bases de datos tienen sus propias ventajas y desventajas. Es importante elegir el m\u00e9todo adecuado seg\u00fan las necesidades de la aplicaci\u00f3n. Si se requiere un control m\u00e1s granular sobre las consultas y las transacciones, JDBC puede ser la mejor opci\u00f3n. Si se busca una abstracci\u00f3n de acceso a datos orientada a objetos, ORM, JPA o Spring Data pueden ser la mejor opci\u00f3n.    </li> <li>Debemos elegir la forma de mostrar los resultados que mejor se adapte a las necesidades de nuestros usuarios y al tipo de aplicaci\u00f3n que estamos desarrollando. Es importante que la presentaci\u00f3n de los datos sea clara y f\u00e1cil de entender para que los usuarios puedan interactuar con ellos de manera efectiva.     </li> <li>Es importante manejar adecuadamente los errores que se producen durante la interaci\u00f3n de base de datos, por ejemplo al conectarnos, al inserci\u00f3n de datos, etc. Podemos utilizar bloques try-catch en Kotlin y JDBC para capturar y manejar estas excepciones de forma adecuada.    </li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#8-ejemplo","title":"8. Ejemplo","text":"<ul> <li>Servicio de usuario, haciendo uso del patron DAO</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#fuente-y-bibliografia","title":"Fuente y bibliograf\u00eda","text":"<ul> <li>The DTO Pattern</li> <li>Programaci\u00f3n - 08 Programaci\u00f3n con Bases de Datos - Jos\u00e9 Luis Gonz\u00e1lez</li> <li>[Librer\u00eda SQLDeLight]https://github.com/joseluisgs/Programacion-08-2022-2023#sqldelight</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/","title":"C\u00f3mo acceder a una base de datos con Kotlin usando JDBC: los fundamentos","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#1-aprenda-como-se-accede-a-las-bases-de-datos-a-bajo-nivel-usando-jdbc","title":"1. Aprenda c\u00f3mo se accede a las bases de datos a bajo nivel usando JDBC","text":"<p>Acceder a las bases de datos es una tarea com\u00fan en el desarrollo de aplicaciones. Todas las aplicaciones del lado del servidor acceden a las bases de datos de una forma u otra. En lo que respecta a Kotlin, hereda un rico conjunto de bibliotecas del mundo Java, gracias a la interoperabilidad. Estas bibliotecas brindan caracter\u00edsticas deslumbrantes como ORM, SQL con seguridad de tipos, etc.</p> <p>Sin embargo, si est\u00e1s haciendo esto por primera vez, es posible que todas las bibliotecas sofisticadas no tengan mucho sentido ahora mismo. Para ponerlo en marcha, haremos una introducci\u00f3n a JDBC.</p> <p>En este punto, trabajaremos sobre:</p> <ol> <li>\u00bfQu\u00e9 es JDBC? \u00bfY c\u00f3mo usarlo con Kotlin?</li> <li>\u00bfQu\u00e9 es una URL de JDBC?</li> <li>C\u00f3mo establecer una conexi\u00f3n con una base de datos y ejecutar consultas SQL.</li> <li>\u00bfQu\u00e9 es la agrupaci\u00f3n de conexiones y c\u00f3mo implementarla con HikariCP?</li> </ol>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#11-que-es-jdbc","title":"1.1. \u00bfQu\u00e9 es JDBC?","text":"<p>JDBC significa Conectividad de base de datos Java. Es una biblioteca de bajo nivel que proporciona funcionalidad para interactuar con una base de datos. Para usar JDBC no tienes que depender de ninguna biblioteca de terceros. Viene incluido con todos los JDK que existen.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#12-como-usar-jdbc-con-kotlin","title":"1.2. \u00bfC\u00f3mo usar JDBC con Kotlin?","text":"<p>Los pasos para trabajar con JDBC son los siguientes:</p> <ul> <li>Paso 1: Prepara una tabla en tu base de datos</li> <li>Paso 2: Encuentre el controlador JDBC de su base de datos y agr\u00e9guelo a su proyecto</li> <li>Paso 3: Establecer una conexi\u00f3n mediante una URL de JDBC</li> <li>Paso 4: Escribir y ejecutar consultas SQL</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#121-prepara-una-tabla","title":"1.2.1. Prepara una tabla","text":"<p>Vamos a crear una tabla llamada <code>users</code> y llenarla con algunos datos. En el ejemplo usaremos PostgreSQL, pero puedes utilizar la base de datos que sea m\u00e1s de tu agrado.</p> <p>crear una tabla</p> <pre><code>-- SERIAL is similar to INTEGER AUTOINCREMENT\nCREATE TABLE  users (id SERIAL PRIMARY KEY, name VARCHAR(20));\nview rawjdbc.sql hosted with \u2764 by GitHub\n</code></pre> <p>llenarlo con datos</p> <pre><code>INSERT INTO users (name) VALUES\n  ('Kohli'),\n  ('Rohit'),\n  ('Bumrah'),\n  ('Dhawan');\n</code></pre> <p>Ahora el resultado de una consulta <code>SELECT * FROM users</code> se parece a esto.</p> <pre><code>SELECT * FROM users;\n\n id |  name  \n----+--------\n  1 | Kohli\n  2 | Rohit\n  3 | Bumrah\n  4 | Dhawan\n(4 rows)\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#122-agregue-el-controlador-jdbc-a-su-proyecto","title":"1.2.2. Agregue el controlador JDBC a su proyecto","text":"<p>Para acceder a estos datos desde su c\u00f3digo Kotlin, debe incluir el controlador JDBC de su base de datos como una dependencia de Gradle. Usaremos el DBMS PostgreSQL. Si no est\u00e1 usando PostgreSQL, deber\u00e1s encontrar el controlador JDBC de la base de datos que est\u00e1s utilizando. Una simple b\u00fasqueda en Google ser\u00eda suficiente.</p> <pre><code>dependencies {\n  implementation(\"org.postgresql:postgresql:42.3.1\")\n}\n</code></pre> <p>Ahora, veremos c\u00f3mo recuperar los datos de la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#123-establecer-una-conexion-de-base-de-datos-a-traves-de-una-url-de-jdbc","title":"1.2.3 Establecer una conexi\u00f3n de base de datos a trav\u00e9s de una URL de JDBC","text":"<p>Para crear una conexi\u00f3n a la base de datos, necesitaremos una URL de JDBC como la siguiente:</p> <pre><code>fun main(){\n    val jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n}\n</code></pre> <p>Como se puede ver, la URL de JDBC consta de tres componentes principales. A continuaci\u00f3n vemos una versi\u00f3n desglosada de una URL de JDBC</p> <ol> <li>El <code>host name</code> = <code>localhost</code></li> <li>El <code>port number</code> = <code>5432</code></li> <li>El <code>database name</code> = <code>example</code></li> </ol> <p></p> <p>Para crear una conexi\u00f3n, usa el m\u00e9todo <code>DriverManager.getConnection</code>, pasando la URl y el login y password para conectar a la base de datos.</p> <pre><code>import java.sql.DriverManager\n\n// the model class\ndata class User(val id: Int, val name: String)\n\nfun main(){\n\n    val jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n\n    // get the connection\n    val connection = DriverManager\n        .getConnection(jdbcUrl, \"postgres\", \"postgres\")\n}\n</code></pre> <p>Como coment\u00e1bamos:</p> <ol> <li>el primer argumento del m\u00e9todo <code>DriverManager.getConnection</code> es la <code>URL JDBC</code>.</li> <li>el segundo argumento es el <code>username</code> de la base de datos.</li> <li>el \u00faltimo argumento es el <code>password</code>de ese usuario en particular.</li> </ol> <p>El m\u00e9todo <code>DriverManager.getConnection</code> devolver\u00e1 un objeto <code>Connection</code>. Podremos verificar si la conexi\u00f3n es v\u00e1lida o no usando el m\u00e9todo <code>isValid()</code> del objeto <code>Connection</code>.</p> <pre><code>import java.sql.DriverManager\n\n// the model class\ndata class User(val id: Int, val name: String)\n\nfun main(){\n\n    val jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n\n    // get the connection\n    val connection = DriverManager\n        .getConnection(jdbcUrl, \"postgres\", \"postgres\")\n\n    // prints true if the connection is valid\n    println(connection.isValid(0))\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#124-escribir-y-ejecutar-consultas-sql","title":"1.2.4. Escribir y ejecutar consultas SQL","text":"<p>Antes de ejecutar las consultas, tendremos que creear las clases que almacenar\u00e1n los resultados.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#crear-una-clase-para-el-modelo","title":"Crear una clase para el modelo","text":"<p>Primero, cree una clase modelo para representar los datos que estamos a punto de recibir de la base de datos.</p> <pre><code>// create a model class\ndata class User(val id: Int, val name: String)\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#escribir-y-ejecutar-consultas-sql","title":"Escribir y ejecutar consultas SQL","text":"<p>Ahora, puedes escribir y ejecutar consultas SQL usando la conexi\u00f3n. Pero como JDBC es una biblioteca de bajo nivel, todo debe hacerse a mano.</p> <p>Para ejecutar una consulta <code>SELECT</code> usando la conexi\u00f3n necesitas:</p> <ol> <li>Preparar una sentencia SQL: <code>Statement</code></li> <li>Ejecutar la <code>Statement</code>, que devolver\u00e1 un objeto <code>ResultSet</code></li> <li>Iterar a trav\u00e9s de <code>ResultSet</code>y recuperar valores con m\u00e9todos como <code>getInt</code>o<code>getString</code></li> </ol> <p>Considera el siguiente ejemplo:</p> <pre><code>import java.sql.DriverManager\n\n// the model class\ndata class User(val id: Int, val name: String)\n\nfun main(){\n\n    val jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n\n    // get the connection\n    val connection = DriverManager\n        .getConnection(jdbcUrl, \"postgres\", \"postgres\")\n\n    // prints true if the connection is valid\n    println(connection.isValid(0))\n\n    // the query is only prepared not executed\n    val query = connection.prepareStatement(\"SELECT * FROM users\")\n\n    // the query is executed and results are fetched\n    val result = query.executeQuery()\n\n    // an empty list for holding the results\n    val users = mutableListOf&lt;User&gt;()\n\n    while(result.next()){\n\n        // getting the value of the id column\n        val id = result.getInt(\"id\")\n\n        // getting the value of the name column\n        val name = result.getString(\"name\")\n\n        /*\n        constructing a User object and\n        putting data into the list\n         */\n        users.add(User(id, name))\n    }\n    /*\n    [User(id=1, name=Kohli), User(id=2, name=Rohit),\n    User(id=3, name=Bumrah), User(id=4, name=Dhawan)]\n     */\n    println(users)\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#2-que-es-una-agrupacion-de-conexiones-connection-pooling","title":"2. \u00bfQu\u00e9 es una agrupaci\u00f3n de conexiones (connection pooling)?","text":"<p>No se puede realizar una introducci\u00f3n a las bases de datos sin hablar de la agrupaci\u00f3n de conexiones o pool de conexiones.</p> <p>Imag\u00ednate que est\u00e1s escribiendo una aplicaci\u00f3n del lado del servidor. Cada vez que un usuario necesita acceder a la base de datos, abrir\u00e1 una nueva conexi\u00f3n de base de datos para obtener datos. Esto es ineficiente porque abrir una conexi\u00f3n a la base de datos es una tarea costosa y no debe hacerse una y otra vez. Este es exactamente el problema que puede resolver el pool de conexiones.</p> <p>Al utilizar un pool de conexiones, puedes abrir m\u00faltiples conexiones que estar\u00e1n activas durante la vida \u00fatil de la aplicaci\u00f3n. Estas conexiones se encapsular\u00e1n en un archivo <code>DataSource</code>. Siempre que necesites acceder a la base de datos, en lugar de crear una nueva conexi\u00f3n, le pedir\u00e1s al <code>DataSource</code> una conexi\u00f3n. El <code>DataSource</code> te ceder\u00e1 una conexi\u00f3n desde el pool de conexiones. Cuando termines la operaci\u00f3n sobre la base de datos, la conexi\u00f3n retornar\u00e1 al pool de conexiones y volver\u00e1 a estar disponible para su uso.</p> <p>La mayor\u00eda de las bibliotecas y marcos de trabajo que te facilitan la conexi\u00f3n a las base de datos ya traen consigo una API adecuada para solucionar este problema. HikariCP es una de las mejores bibliotecas que satisface este problema. Por defecto, utiliza 10 conexiones como l\u00edmite m\u00e1ximo, y es f\u00e1cilmente modificable. Si quieres obtener m\u00e1s informaci\u00f3n sobre la configuraci\u00f3n del tama\u00f1o del pool, consulta esta gu\u00eda: Sobre la modificaci\u00f3n del tama\u00f1o del pool .</p> <p>Veamos un ejemplo r\u00e1pido de agrupaci\u00f3n de conexiones usando HikariCP.</p> <p>Comienza agregando la dependencia a tu archivo <code>build.gradle.kts</code>.</p> <pre><code>dependencies {\n    implementation (\"com.zaxxer:HikariCP:5.0.0\")\n}\n</code></pre> <p>Para inicializar un <code>DataSource</code> realiza los siguientes pasos:</p> <ol> <li>Crea un objeto dataSource con el m\u00e9todo <code>HikariDataSource()</code></li> <li>Establece en el objeto dataSource la URL de JDBC</li> <li>Establece en el objeto dataSource el nombre de usuario</li> <li>Establece en el objeto dataSource la contrase\u00f1a</li> <li>Obt\u00e9n la conexi\u00f3n de la <code>DataSource</code></li> <li>Usa la conexi\u00f3n de la manera que hemos visto.</li> </ol> <p>Aqu\u00ed hay un ejemplo de los pasos anteriores:</p> <pre><code>fun main(){\n\n    // create a dataSource\n    val dataSource = HikariDataSource()\n\n    // set the jdbcUrl\n    dataSource.jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n\n    // set the username\n    dataSource.username = \"postgres\"\n\n    // set the password\n    dataSource.password = \"postgres\"\n\n    println(dataSource.maximumPoolSize)\n\n    // get a connection\n    val connection = dataSource.connection\n\n    // the query is only prepared not executed\n    val query = connection.prepareStatement(\"SELECT * FROM users\")\n\n    // the query is executed and results are fetched\n    val result = query.executeQuery()\n\n    // an empty list for holding the results\n    val users = mutableListOf&lt;User&gt;()\n\n    while (result.next()) {\n\n        // getting the value of the id column\n        val id = result.getInt(\"id\")\n\n        // getting the value of the name column\n        val name = result.getString(\"name\")\n\n        /*\n        constructing a User object and\n        putting data into the list\n         */\n        users.add(User(id, name))\n    }\n\n    /*\n    [User(id=1, name=Kohli), User(id=2, name=Rohit),\n    User(id=3, name=Bumrah), User(id=4, name=Dhawan)]\n     */\n    println(users)\n\n}\n</code></pre> <p>Nota: Hay varias formas de inicializar un <code>DataSource</code> con <code>HikariCP</code>. Lee la secci\u00f3n de inicializaci\u00f3n del archivo README del Repositorio HikariCP Github .</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#3-por-que-necesitamos-abstraccion-adicional-sobre-jdbc","title":"3. \u00bfPor qu\u00e9 necesitamos abstracci\u00f3n adicional sobre JDBC?","text":"<p>Como has podido comprobar si has intentado adaptarlo a alguna consultar de una tabla que tu tengas, acceder a las bases de datos haciendo uso de <code>JDBC</code> puro puede convertirse r\u00e1pidamente en una tarea engorrosa. El proceso es propenso a errores y se requiere mucho trabajo pesado y disciplina por parte del desarrollador. Aqu\u00ed es donde las bibliotecas y los marcos de trabajo son \u00fatiles.</p> <p>Cuando se trata de bibliotecas y marcos de trabajo para acceder a bases de datos, hay una variedad de opciones para elegir. Puede optar por usar un ORM completo como Hibernate, o puede usar algo de bajo nivel como JDBI. JDBI proporciona una capa de abstracci\u00f3n sobre JDBC. Tambi\u00e9n hay algunas bibliotecas Kotlin-first. La m\u00e1s popular es la biblioteca Exposed de Jetbrains, que veremos m\u00e1s adelante. Exposed viene en dos sabores. Un lenguaje espec\u00edfico del dominio, (en ingl\u00e9s domain-specific language, DSL) con seguridad de tipos que hace de envoltorio a SQL y una capa liguera en la que se facilita la implementaci\u00f3n de objetos de acceso a datos (en ingl\u00e9s data access objects, DAO).</p> <p>Para obtener una descripci\u00f3n general completa de todas las bibliotecas de bases de datos en el mundo de Java, puedes leer el art\u00edculo siguiente: Java y bases de datos: una descripci\u00f3n general de las bibliotecas y las API por Marco Behler</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#4-conclusiones","title":"4. Conclusiones","text":"<ol> <li>Puedes acceder a una base de datos a trav\u00e9s de la biblioteca de bajo nivel JDBC, que viene incluido con todos los JDK que existen. Entonces, no hay necesidad de otra dependencia.</li> <li>Para conectarse con una base de datos en particular, necesita el controlador JDBC para esa base de datos en particular.</li> <li>Todas las bibliotecas para bases de datos en el mundo JVM est\u00e1n construidas sobre JDBC.</li> <li>Mientras trabaja en un proyecto real, debes utilizar alg\u00fan mecanismo que te facilite el uso de un pool de conexiones. La agrupaci\u00f3n de conexiones le permite mantener viva una peque\u00f1a cantidad de conexiones de bases de datos, en lugar de crear una conexi\u00f3n nueva cada vez, (re)utiliza una conexi\u00f3n del pool.</li> <li>HikariCP es una buena opci\u00f3n para usar un pool de conexiones. Por defecto, utiliza 10 conexiones como l\u00edmite m\u00e1ximo. Y es f\u00e1cilmente modificable.</li> </ol> <p>Independientemente de la biblioteca que uses, ahora tienes una comprensi\u00f3n b\u00e1sica de lo que sucede debajo del cap\u00f3 mientras consulta su base de datos desde la capa de aplicaci\u00f3n.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#5-bibliografia","title":"5. Bibliograf\u00eda","text":"<ul> <li>El articulo original</li> <li>El repositorio original</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.3.-JDBC-2/","title":"JDBC Prepared Statement y su manejo","text":"<p>El uso de JDBC Prepared Statement es hoy en d\u00eda pr\u00e1cticamente obligatorio. A\u00fan as\u00ed hay muchas veces que nos olvidamos de de como usarlos ya que son los frameworks de persistencia los que los utilizan de forma transparente por  nosotros. A\u00fan as\u00ed hay situaciones en las cuales nos podemos encontrar con la necesidad de hacer uso de ellos de forma directa. \u00bfC\u00f3mo funcionan exactamente los JDBC Prepared Statement ?</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.3.-JDBC-2/#utilizando-jdbc-prepared-statement","title":"Utilizando JDBC Prepared Statement","text":"<p>Lo primero que tenemos que entender es cual es la diferencia  entre un Statement de JDBC y un Prepared Statement . Cuando nosotros construimos una consulta normal de JDBC utilizamos un Statement, este Statement o sentencia lo que se encarga es de definir una consulta SQL a ejecutar contra el motor de la base de datos.</p> <pre><code>Connection conexion = DriverManager.getConnection(\"jdbc:mysql://localhost/prueba\", \"root\",\"root\");\nStatement sentencia = conexion.createStatement();\nString nombre=\"pepe\";\nString consulta = \"select * from Persona where nombre='\"+nombre+\"'\";\nResultSet rs=sentencia.executeQuery(consulta);\n</code></pre> <p>En este caso estamos construyendo una sentencia y aportando  un par\u00e1metro a la consulta de forma din\u00e1mica . Esto b\u00e1sicamente se convierte en una consulta SQL que nosotros ejecutamos v\u00eda el driver JDBC contra la base de datos.</p> <p></p> <p>Muchas veces se nos olvida que para cada consulta SQL que construimos contra la base de datos se construye un plan de ejecuci\u00f3n en el que la base de datos decide como esa consulta se ejecuta.</p> <p></p> <p>A dos consultas diferentes se crean dos planes de ejecuci\u00f3n diferentes aunque ambas consultas sean realmente muy similares y \u00fanicamente entre e**n juego el valor del par\u00e1metro que las pasamos**. Para solventar este problema existen los JDBC Prepared statement. Estas estructuras permiten mantener las consultas neutras sin tener en cuenta los par\u00e1metros que se las pasa ya que realiza un binding de ellos</p> <p></p> <p>De esta forma cuando la base de datos genera un hash para el plan de ejecuci\u00f3n ambas consultas, la que consulta por pepe y la que consulta por ana devuelven el mismo hash y comparten el plan de ejecuci\u00f3n. Vamos a ver esto en c\u00f3digo: <pre><code>String consulta = \"select * from Persona where nombre = ? \";\nConnection conexion= DriverManager.getConnection(\"jdbc:mysql://localhost/prueba\", \"root\", \"root\");\nPreparedStatement sentencia= conexion.prepareStatement(consulta);\nsentencia.setString(1, \"pepe\");\nResultSet rs = sentencia.executeQuery();\n</code></pre></p> <p>No solo nos estaremos ahorrando la construcci\u00f3n de planes de ejecuci\u00f3n sino que tambi\u00e9n de la misma manera estamos evitando que nos inyecten SQL ya que al parametrizar la consulta el API de JDBC nos protege contra este tipo de ataques. Normalmente el uso de consultas parametrizadas mejora el rendimiento entre un 20 y un 30 % a nivel de base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.3.-JDBC-2/#jdbc-prepared-statement-y-logs","title":"JDBC Prepared Statement y Logs","text":"<p>Hay situaciones en las que necesitamos realizar un log de la consulta SQL , al tratarse de una sentencia preparada solemos hacer un log del String algo como por ejemplo</p> <pre><code>String consulta = \"select * from Persona where nombre = ? \";\nlog(consulta);\n</code></pre> <p>Esto a veces puede ser un problema ya que perdemos los par\u00e1metros que se pasan . Sin embargo muchos drivers soportan el log de la propia consulta SQL con los par\u00e1metros ya aplicados realizando un log de la propia sentencia</p> <pre><code>String consulta = \"select * from Persona where nombre = ? \";\n        PreparedStatement ps = con.prepareStatement(consulta);\n        ps.setString(1, nombre);\n        log(ps);\n</code></pre> <p>Teng\u00e1moslo en cuenta, en este caso podremos ver salir por la consola algo del siguiente estilo: <pre><code>com.mysql.jdbc.JDBC42PreparedStatement@67424e82: select * from Persona where nombre=\u2019juan\u2019\n</code></pre> El par\u00e1metro aparece.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/","title":"UD 9 - 9.3 Patron DAO","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#94-data-access-object-dao-pattern","title":"9.4. Data Access Object (DAO) Pattern","text":"<p>Pr\u00e1cticamente todas las aplicaciones de hoy en d\u00eda, requiere acceso al menos a una fuente de datos, dichas fuentes son por lo general base de datos relacionales, por lo que muchas veces no tenemos problema en acceder a los datos, sin embargo, hay ocasiones en las que necesitamos tener m\u00e1s de una fuente de datos o la fuente de datos que tenemos puede variar, lo que nos obligar\u00eda a refactorizar gran parte del c\u00f3digo. Para esto, tenemos el patr\u00f3n Arquitect\u00f3nico Data Access Object (DAO), el cual permite separar la l\u00f3gica de acceso a datos de los Bussines Objects u Objetos de negocios, de tal forma que el DAO encapsula toda la l\u00f3gica de acceso de datos al resto de la aplicaci\u00f3n.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#1-problematica","title":"1. Problem\u00e1tica","text":"<p>Una de las grandes problem\u00e1ticas al momento de acceder a los datos, es que la implementaci\u00f3n y formato de la informaci\u00f3n puede variar seg\u00fan la fuente de los datos. Implementar la l\u00f3gica de acceso a datos en la capa de l\u00f3gica de negocio puedes ser un gran problema, pues tendr\u00edamos que lidiar con la l\u00f3gica de negocio en s\u00ed, m\u00e1s la implementaci\u00f3n para acceder a los datos, adicional, si tenemos m\u00faltiples fuentes de datos o estas pueden variar, tendr\u00edamos que implementar las diferentes l\u00f3gicas para acceder las diferentes fuentes de datos, como podr\u00edan ser: bases de datos relacionales, No SQL, XML, archivos planos, Webservices, etc).</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#2-solucion","title":"2. Soluci\u00f3n","text":"<p>Dado lo anterior, el patr\u00f3n DAO propone separar por completo la l\u00f3gica de negocio de la l\u00f3gica para acceder a los datos, de esta forma, el DAO proporcionar\u00e1 los m\u00e9todos necesarios para insertar, actualizar, borrar y consultar la informaci\u00f3n; por otra parte, la capa de negocio solo se preocupa por l\u00f3gica de negocio y utiliza el DAO para interactuar con la fuente de datos.</p> <p></p> <p>Los compones que conforman el patr\u00f3n son:</p> <ul> <li><code>BusinessObject</code> : representa un objeto con la l\u00f3gica de negocio.    </li> <li><code>DataAccessObject</code> : representa una capa de acceso a datos que oculta la fuente y los detalles t\u00e9cnicos para recuperar los datos.    </li> <li><code>TransferObject</code> : este es un objeto plano que implementa el patr\u00f3n Data Transfer Object (DTO), el cual sirve para transmitir la informaci\u00f3n entre el DAO y el Business Service.     </li> <li><code>DataSource</code> : representa de forma abstracta la fuente de datos, la cual puede ser una base de datos, Webservices, LDAP, archivos de texto, etc.    </li> </ul> <p>El siguiente diagrama muestra mejor la forma en que funciona el patr\u00f3n, pues muestra de forma secuencial la forma en que se ejecutar\u00eda el patr\u00f3n.</p> <p></p> <p>El diagrama se interpreta de la siguiente manera:</p> <ol> <li>El <code>BusinessObject</code> creo u obtiene una referencia al  <code>DataAccessObject</code>.   </li> <li>El <code>BusinessObject</code> solicita informaci\u00f3n al <code>DataAccessObject</code> <ul> <li>El <code>DataAccessObject</code> solicita la informaci\u00f3n al <code>DataSource</code> </li> <li>El <code>DataAccessObject</code> crea una instancia del TransferObject con los datos recuperados del <code>DataSource</code> </li> <li>El <code>DataAccessObject</code> response con el <code>TransferObject</code> creado en los pasos anteriores.    </li> </ul> </li> <li>El <code>BusinessObject</code> actualiza alg\u00fan valor del <code>TransferObject</code> <ul> <li>M\u00e1s actualizaciones   </li> </ul> </li> <li>El <code>BusinessObject</code> solicita el guardado de los datos actualizados al  <code>DataAccessObject</code>.    <ul> <li>El <code>DataAccessObject</code> guarda los datos en el  <code>DataSource</code>.    </li> </ul> </li> </ol> <p>Como hemos podido ver, el <code>BusinessService</code> no se preocupa de donde vengan los datos ni c\u00f3mo deben de ser guardados en el <code>DataSource</code>, el solo se preocupa por conocer el <code>TransferObject</code>. Un error com\u00fan al implementar este patr\u00f3n es no utilizar <code>TransferObject</code> y en su lugar, regresar los objetos que regresan las mismas API\u2019s de las fuentes de datos, ya que esto obliga al <code>BusinessService</code> tener una dependencia con estas librer\u00edas, adem\u00e1s, si la fuente de datos cambia, tambi\u00e9n cambiar\u00e1n estas clases, lo que provocar\u00eda una afectaci\u00f3n directa al <code>BusinessService</code>.</p> <p>Hace unos d\u00edas escribir sobre el patr\u00f3n Data Transfer Object (DTO) por si quieres profundizar en el tema.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#3-dao-y-el-patron-abstract-factory","title":"3. DAO y el patr\u00f3n Abstract Factory","text":"<p>Hasta este punto solo hemos analizado como trabajar\u00edamos si solo tuvi\u00e9ramos una fuente de datos, sin embargo, existe ocasiones donde requerimos obtener datos de m\u00e1s de una fuente, y es all\u00ed donde entra el patr\u00f3n de dise\u00f1o Abstract Factory</p> <p>Mediante el patr\u00f3n Abstract Factory podemos definir una serie de familias de clases que permitan conectarnos a las diferentes fuentes de datos. Para esto, examinaremos un sistema de autenticaci\u00f3n de usuarios, el cual puede leer los usuarios en una base de datos o sobre un XML, adicional, el sistema generara registros de login que podr\u00e1n ser utilizados para auditorias.</p> <p>Lo primero ser\u00eda implementar las clases para acceder de las dos fuentes:</p> <p></p> <p>En la imagen anterior podemos apreciar dos familias de clases, con las cuales podemos obtener los Usuarios y los registros de auditoria, sin embargo, estas clases por separado no ayudan mucho, pues no implementan una misma interface que permita la variaci\u00f3n entre ellas, por lo que el siguiente paso es crear estas interfaces:</p> <p></p> <p>En este punto, los DAO ya implementan una interfaz com\u00fan, lo que permite intercambiar la implementaci\u00f3n sin afectar al Business Object. Sin embargo, ahora solo falta resolver la forma en que el Business Service obtendr\u00e1 la familiar de interfaces, es por ello que deberemos crear un Factory para cada familia de interfaces:</p> <p></p> <p>En esta nueva configuraci\u00f3n, podemos ver que tenemos un Factory para cada familia, y los dos factorys implementan una interfaz en com\u00fan, adicional, tenemos la interface <code>IDAOFactory</code> necesaria para que el factory de cada familia implementen una interface en com\u00fan.</p> <p></p> <p>Analicemos como quedar\u00eda la secuencia de ejecuci\u00f3n</p> <ol> <li>El <code>BusinessObject</code> solicita la creaci\u00f3n de un <code>DAOFactory</code> para SQL <ul> <li>El <code>DAOFactory</code> crea una instancia de la clase SQLDAOFactory y la retorna    </li> </ul> </li> <li>El <code>BusinessObject</code> solicita al <code>SQLDAOFactory</code> la creaci\u00f3n del <code>SQLUserDAO</code> para interactuar con los usuarios.   </li> <li>El <code>SQLDAOFactory</code> crea una nueva instancia del <code>SQLUserDAO</code> </li> <li>El <code>SQLDAOFactory</code> retorna la instancia creada del <code>SQLUserDAO</code> </li> <li>El <code>BusinessObject</code> solicita el listado de todos los usuarios registrados al <code>SQLUserDAO</code> <ul> <li>El <code>SQLUserDAO</code> recupera los usuarios del SQLDataSource </li> <li>El <code>SQLUserDAO</code> crea un <code>TransferObject</code> con los datos recuperados del paso anterior.    </li> <li>El <code>SQLUserDAO</code> retorna el <code>TransferObject</code> creado en el paso anterior.    </li> </ul> </li> </ol> <p>Adicional a los pasos que hemos listado aqu\u00ed, podr\u00edamos solicitar al <code>SQLDAOFactory</code> la creaci\u00f3n del <code>SQLAuditDAO</code> o incluso, solicitar al <code>DAOFactory</code> la creaci\u00f3n del <code>XMLFactory</code> para interactuar con la fuente de datos en XML.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#4-conclusiones","title":"4. Conclusiones","text":"<p>El patr\u00f3n DAO es sin lugar a duda, unos de los m\u00e1s utilizados en la actualidad, ya que es f\u00e1cil de implementar y proporciona claros beneficios, incluso, si solo tenemos una fuente de datos y esta no cambia, pues permite separar por completo la l\u00f3gica de acceso a datos en una capa separada y as\u00ed solo nos preocupamos por la l\u00f3gica de negocio sin preocuparnos de donde viene los datos o los detalles t\u00e9cnicos para consultarlos o actualizarlos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#fuente-y-bibliografia","title":"Fuente y Bibliograf\u00eda","text":"<ul> <li>Patr\u00f3n de dise\u00f1o DTO</li> <li>Patr\u00f3n de dise\u00f1o Abstract Factory</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/","title":"UD 9 - 9.5 Otros aspectos","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#otros-aspectos-a-tener-en-cuenta","title":"Otros aspectos a tener en cuenta","text":"<p>Supongamos que est\u00e1s desarrollando una aplicaci\u00f3n de comercio electr\u00f3nico que necesita una base de datos para almacenar informaci\u00f3n de productos, pedidos, usuarios y pagos. La aplicaci\u00f3n debe ser capaz de mostrar la informaci\u00f3n de productos a los usuarios, permitirles agregar productos a su carrito de compras, realizar pagos y gestionar los pedidos realizados.</p> <p>Para interactuar con la base de datos, puedes utilizar un lenguaje de programaci\u00f3n como Java o Kotlin y un sistema de gesti\u00f3n de bases de datos como MySQL o PostgreSQL, entre otros...</p> <p>Al dise\u00f1ar la base de datos, debes tener en cuenta la relaci\u00f3n entre los objetos de la aplicaci\u00f3n y las tablas de la base de datos. En este caso, por ejemplo, la tabla de productos debe contener informaci\u00f3n como el nombre, la descripci\u00f3n, el precio y la cantidad disponible, mientras que la tabla de pedidos debe contener informaci\u00f3n sobre los productos comprados, la direcci\u00f3n de env\u00edo, el estado del pedido, etc.</p> <p>Para simplificar la interacci\u00f3n con la base de datos, puedes utilizar un ORM (Object-Relational Mapping) como Hibernate o Spring Data JPA, que te permitir\u00e1 mapear las clases de la aplicaci\u00f3n con las tablas de la base de datos y realizar operaciones CRUD (Create, Read, Update, Delete) sobre los objetos de la aplicaci\u00f3n sin tener que escribir SQL directamente.</p> <p>Para garantizar la integridad de los datos, es importante definir restricciones de integridad en la base de datos, como claves primarias, claves for\u00e1neas y restricciones de unicidad. Adem\u00e1s, se debe decidir si la gesti\u00f3n de la integridad se delegar\u00e1 completamente a la base de datos o si se realizar\u00e1 por c\u00f3digo en la aplicaci\u00f3n.</p> <p>En cuanto a la generaci\u00f3n de identificadores, se puede optar por utilizar identificadores autonum\u00e9ricos (como la columna id con AUTO_INCREMENT en MySQL) o identificadores UUID (Universally Unique Identifier), que son cadenas de caracteres aleatorias y \u00fanicas. La elecci\u00f3n depende del caso de uso espec\u00edfico y de la preferencia del desarrollador.</p> <p>Es importante cerrar adecuadamente las conexiones y otros objetos relacionados con la base de datos, como los Statement y ResultSet, para evitar fugas de memoria y mejorar el rendimiento de la aplicaci\u00f3n. Para ello, se pueden utilizar bloques try-catch-finally o recursos try-with-resources.</p> <p>En cuanto a la gesti\u00f3n de transacciones, se puede optar por utilizar transacciones expl\u00edcitas, que son creadas y gestionadas por la aplicaci\u00f3n, o transacciones impl\u00edcitas, que son gestionadas por la base de datos. En cualquier caso, es importante garantizar que las operaciones se realicen en una transacci\u00f3n \u00fanica y que se gestionen correctamente las excepciones.</p> <p>Por \u00faltimo, en aplicaciones de alta concurrencia o gran carga de trabajo, es importante utilizar un pool de conexiones para optimizar el uso de los recursos de la base de datos y evitar el exceso de conexiones abiertas. El pool de conexiones es un conjunto de conexiones preestablecidas y listas para su uso, que se gestionan autom\u00e1ticamente y se reutilizan para minimizar el tiempo de espera y mejorar el rendimiento de la aplicaci\u00f3n.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#profundizamos-en-los-puntos-anteriores","title":"Profundizamos en los puntos anteriores","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#desfase-objeto-relacional-orm","title":"Desfase Objeto-Relacional (ORM):","text":"<p>El desfase objeto-relacional (ORM) se refiere a la discrepancia entre los objetos utilizados en la programaci\u00f3n orientada a objetos y las relaciones utilizadas en los sistemas de bases de datos relacionales. Para manejar esta discrepancia, se han desarrollado herramientas ORM que permiten mapear objetos a relaciones de base de datos y viceversa. Algunas herramientas ORM populares incluyen Hibernate, Entity Framework, SQLAlchemy y Sequelize. En kotlin la mas conoc\u00edada se llama Exposed.</p> <p>Desfase objeto-relacional</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#gestion-de-la-integridad-por-codigo-o-delegacion-a-base-de-datos","title":"Gesti\u00f3n de la integridad, por c\u00f3digo o delegaci\u00f3n a base de datos:","text":"<p>La integridad referencial se refiere a la consistencia de los datos almacenados en la base de datos. Puede ser gestionada por el c\u00f3digo de la aplicaci\u00f3n o delegada a la base de datos. La gesti\u00f3n de la integridad referencial por c\u00f3digo implica que la aplicaci\u00f3n es responsable de mantener la consistencia de los datos, mientras que la delegaci\u00f3n a la base de datos significa que la base de datos se encarga de hacer cumplir las restricciones de integridad. Ambos enfoques tienen ventajas y desventajas, y la elecci\u00f3n depende del contexto de la aplicaci\u00f3n.</p> <p>Gesti\u00f3n de integridad</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#identificadores-autonumericos-vs-uuid","title":"Identificadores: autonum\u00e9ricos vs UUID:","text":"<p>Los identificadores son una parte importante de cualquier sistema de bases de datos, ya que se utilizan para identificar de forma \u00fanica cada fila en una tabla. Los identificadores pueden ser autonum\u00e9ricos, lo que significa que la base de datos genera un valor \u00fanico autom\u00e1ticamente cada vez que se inserta una nueva fila en la tabla. Otra opci\u00f3n son los identificadores UUID, que son identificadores \u00fanicos universalmente y generados por software. Ambos enfoques tienen ventajas y desventajas, es cuesti\u00f3n de dise\u00f1o.</p> <p>A\u00f1utonum\u00e9ricos vs UIDS</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#cierre-de-objetos-conexiones-statement-conexiones-a-base-de-datos","title":"Cierre de objetos: Conexiones, Statement, conexiones a base de datos:","text":"<p>Es importante cerrar correctamente los objetos de base de datos como conexiones y declaraciones (Statement) para evitar fugas de memoria y problemas de rendimiento. En algunos lenguajes de programaci\u00f3n como Java, se utiliza la cl\u00e1usula try-with-resources para asegurarse de que los objetos se cierren correctamente. En kotlin se usa <code>use{}</code> para asegurarnos que estos elementos quedan cerrados.</p> <p>Conexi\u00f3n/Desconexi\u00f3n a base de datos</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#gestion-de-transacciones","title":"Gesti\u00f3n de transacciones:","text":"<p>Las transacciones se utilizan para garantizar que las operaciones en la base de datos se completen de forma coherente. Las transacciones permiten que varias operaciones se agrupen en una sola unidad l\u00f3gica, lo que significa que si una operaci\u00f3n falla, todas las operaciones realizadas en la transacci\u00f3n se deshacen. La gesti\u00f3n de transacciones es una parte importante del dise\u00f1o de cualquier sistema de bases de datos, y se pueden utilizar diferentes enfoques como transacciones expl\u00edcitas, transacciones impl\u00edcitas y transacciones distribuidas.</p> <p>Transacciones</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#pool-de-conexiones","title":"Pool de conexiones:","text":"<p>El pool de conexiones es una t\u00e9cnica utilizada para mejorar el rendimiento de las aplicaciones que interact\u00faan con una base de datos. En lugar de crear una nueva conexi\u00f3n cada vez que se necesita acceder a la base de datos, se utiliza un pool de conexiones predefinido que permite reutilizar las conexiones existentes. Esto reduce la sobrecarga de la creaci\u00f3n y eliminaci\u00f3n de conexiones y mejora el rendimiento general del sistema.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#sqldelight","title":"SQLDeLight","text":"<p>SqlDeLight es una librer\u00eda que nos permite generar c\u00f3digo Kotlin para realizar operaciones CRUD sobre una base de datos.</p> <ul> <li>Librer\u00eda SQLDeLight</li> <li>SQLDelight on the Server</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#fuente-y-bibliografia","title":"Fuente y bibliograf\u00eda","text":"<ul> <li>Programaci\u00f3n - 08 Programaci\u00f3n con Bases de Datos - Jos\u00e9 Luis Gonz\u00e1lez</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section2/","title":"Incidentes de ciberseguridad","text":"<p>Se describe el m\u00f3dulo profesional de Incidentes de ciberseguridad. Esta informaci\u00f3n se divide en: </p> <ul> <li>Una primera secci\u00f3n de Informaci\u00f3n general en la que se hace una propuesta de temario, con la relaci\u00f3n de unidades y los resultados de aprendizaje asociados, asi como las posibles fechas en las que se impartir\u00edan. </li> <li>Una segunda secci\u00f3n con Materiales relacionados con el modulo, como Fuentes de informaci\u00f3n, libros recomendados, recursos y herramientas para aplicar conceptos. </li> </ul> <p>Todo el contenido est\u00e1 supeditado a mejora, pues es solo una propuesta que ir\u00e1 cambiando, espero que a mejor. Si tienes una propuesta de mejora, no te cortes y pasamela ;-).</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#informacion","title":"Informaci\u00f3n","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#propuesta-de-temario","title":"Propuesta de temario","text":"<p>En los siguientes enlaces se encuentran los contenidos, resultados de aprendizaje, criterios de evaluaci\u00f3n y herramientas para trabajarlos y poder evaluarlos. Es solo una propuesta, pero puede servir de punto de partida inicial.</p> <ol> <li>Planes de ciberseguridad</li> <li>An\u00e1lisis de incidentes de ciberseguridad</li> <li>Construcci\u00f3n de un CyberSOC</li> <li>Investigaci\u00f3n de incidentes de ciberseguridad</li> <li>Implementaci\u00f3n de medidas</li> <li>Documentaci\u00f3n y notificaci\u00f3n de incidentes</li> </ol>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#relacion-de-unidades-y-resultados-de-aprendizaje","title":"Relaci\u00f3n de unidades y resultados de aprendizaje","text":"Unidad UD 1 UD 2 UD 3 UD 4 UD 5 UD 6 RA 1 X RA 2 X X RA 3 X RA 4 X RA 5 X","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#relacion-de-unidades-y-fechas","title":"Relaci\u00f3n de unidades y fechas","text":"<p>El curso tiene un total de 24 semanas (720 horas). La relaci\u00f3n propuesta entre unidades y semanas es la siguiente:</p> Unidad Semanas 1 Semana 1 - 4 2 Semana 5 - 7 3 Semana 8 - 12 4 Semana 13 - 16 5 Semana 17 - 20 6 Semana 21 - 24","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#materiales","title":"Materiales","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#fuentes","title":"Fuentes","text":"<ul> <li>Parte de la organizaci\u00f3n/contenido esta tomado de Rafael del Rio</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#libros","title":"Libros","text":"<ul> <li>El libro de Ra-Ma de gesti\u00f3n de incidentes puede ser un buen punto de partida para organizar la estructura del temario.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#recursos","title":"Recursos","text":"<ul> <li>Incibe: el instituto nacional de ciberseguridad pone a nuestra disposici\u00f3n bastantes materiales para la gesti\u00f3n de incidentes de ciberseguridad.</li> <li>Awesome Incident Response: repositorio de github con muchas herramientas para la detecci\u00f3n y gesti\u00f3n de incidentes.</li> <li>Cyberdefenders</li> <li>Let's Defend</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#herramientas","title":"Herramientas","text":"<ul> <li>Gophish: nos permite realizar entrenamientos para mejorar la concienciaci\u00f3n frente a ataques de phishing.</li> <li>Suite ELK con docker: nos permite montar un SIEM de forma sencilla. Para recolectar datos para el SIEM podemos emplear Filebeat, Winlogbeat, Heartbeat, Metricbeat, Packetbeat, etc...</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#contenido","title":"Contenido","text":"<p>T\u00edpicamente se intenta tener los siguientes apartados en cada uno de los m\u00f3dulos profesionales:</p> <ul> <li>Teor\u00eda: en formato editable (como libreoffice, un .odt), o en documentos PDF</li> <li>Presentaciones: en formato editable (como libreoffice, un .odp), o en documentos PDF</li> <li>Ejercicios: un bolet\u00edn de ejercicios para practicar en clases.</li> <li>Pr\u00e1cticas evaluables: una serie de pr\u00e1cticas evaluables.</li> <li>Ex\u00e1menes: una serie de ex\u00e1menes</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/page-n/","title":"Page n","text":"<p>hola pagen</p>"},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/","title":"Din\u00e1mica de presentaci\u00f3n","text":"","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#dinamica-icebreakers","title":"Din\u00e1mica icebreakers","text":"<p>\u00bfC\u00f3mo podemos lograr que un grupo se conozca mejor y favorecer un buen ambiente? \u00bfC\u00f3mo podemos experimentarlo mediante algunas t\u00e9cnicas de rompehielos? Los rompehielos (icebreakers) son t\u00e9cnicas muy utilizadas y que consisten b\u00e1sicamente en fomentar un buen ambiente de un grupo que comparte o va a compartir un espacio com\u00fan. Los hay de muchos tipos y con cientos de variantes que pueden ser introducidas a su vez en diferentes contextos profesionales, educativos o l\u00fadicos. En nuestro caso vamos a implementar una mezcla entre La entrevista y Los aviones de papel.</p>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#pasos-a-seguir","title":"PASOS A SEGUIR:","text":"<ul> <li>Entregar a cada participante una hoja de papel y un rotulador.</li> <li>Pedirles que debajo del papel escriban sus nombres y varias cuestiones con las instrucciones que se considere oportuno para el grupo o contexto donde se lleva a cabo.</li> <li>Despu\u00e9s les pedimos que hagan un avi\u00f3n de papel a su gusto. Si no saben podemos mostrarles un modelo sencillo con este:</li> </ul> Un avi\u00f3n sencillo <ul> <li>Es importante que una vez realizados, lancen los aviones todos a la vez. Una vez caigan cada uno recogerlos y volverlos a lanzar para que se mezclen por la sala. As\u00ed durante un ratito. Aqu\u00ed se genera un ambiente divertido. \u00a1Retornamos a la infancia!</li> <li>Despu\u00e9s de este periodo de tiempo, pedimos que cada uno coja uno (que no sea el suyo) y como escribieron el nombre deben buscar al due\u00f1o de ese avi\u00f3n y hacerle las preguntas.</li> <li> <p>Despu\u00e9s de haber recogido las respuestas a las preguntas, **cada participante debe de anotar esta informaci\u00f3n en Mural, sin dejar datos que puedan identificar a la persona.</p> </li> <li> <p>El Facilitador (o personas aleatorias del grupo) iran leyendo y presentando los profiles, y entre todos se intentar\u00e1n asignar a los participantes. Las personas que participaron en la entrevista deber\u00e1n votar a otros candidatos.</p> </li> <li>Finalmente habr\u00e1 otra ronda en la que se iran descubriendo finalmente la persona de la que se habla en el profile.</li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#preguntas","title":"PREGUNTAS:","text":"<p>Es importante hacer hincapi\u00e9 y hacerles valorar que se puede ir desde preguntas m\u00e1s cl\u00e1sicas: \u00bfQu\u00e9 has estudiado? \u00bfCu\u00e1nto tiempo llevas estudiando aqu\u00ed? o \u00bfCu\u00e1l es tu experiencia profesional?. Otras tal vez m\u00e1s personales como: \u00bfCu\u00e1les son tus aficiones? \u00bfCu\u00e1ntos hijos tienes? \u00bfCu\u00e1l es tu plato favorito? \u00bfD\u00f3nde te gustan pasar las vacaciones?. Hasta otras m\u00e1s divertidas para pasar de un territorio m\u00e1s informativo y de conocimiento a un territorio m\u00e1s distendido. \u00bfQu\u00e9 te llevar\u00edas a una isla desierta? Si te reencarnaras en un animal \u00bfCu\u00e1l te gustar\u00eda ser? Si pudieras ser un personaje de ficci\u00f3n \u00bfQui\u00e9n te gustar\u00eda ser?.</p> <p>Una buena recomendaci\u00f3n podr\u00eda ser: 3 b\u00e1sicas y personales, 4 profesionales y 3 m\u00e1s divertidas.</p> <p> </p> Ejemplo de preguntas.","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#tiempos","title":"TIEMPOS:","text":"<ul> <li>5 minutos para poner el nombre, pensar las preguntas y escribirlas en el folio.</li> <li>3 minutos para hacer el avi\u00f3n.</li> <li>3 minutos para lanzar el avi\u00f3n varias veces y conformar las parejas.</li> <li>15 minutos por entrevista, anotando los resultados.</li> <li>5 minutos presentaci\u00f3n de profiles y asignaci\u00f3n de candidatos.</li> <li>3 por identificaci\u00f3n de profile.</li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#material","title":"MATERIAL:","text":"<ul> <li>Una hoja de papel por persona.</li> <li>Un rotulador por persona.</li> <li>Una aplicaci\u00f3n como Mural. https://app.mural.co/ para resumir los profiles. </li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#consejos-y-anotaciones","title":"CONSEJOS Y ANOTACIONES:","text":"<p>Este rompehielos no es ninguna competici\u00f3n, nadie gana ni pierde. La idea de esta actividad es conocerse mejor de forma divertida y las instrucciones para las preguntas dependen de donde se quiera poner el foco de la actividad de cara a la actividad general que se va a llevar a cabo.</p>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#fuentes","title":"FUENTES:","text":"<ul> <li>https://www.aprendercolaborando.com/3-rompehielos-para-conocerse/</li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u01/","title":"UD 1 - Planes de ciberseguridad","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 1 - Desarrollo de planes de prevenci\u00f3n y concienciaci\u00f3n en ciberseguridad:</p> <ul> <li>Principios generales en materia de ciberseguridad.</li> <li>Normativa de protecci\u00f3n del puesto del trabajo.</li> <li>Plan de formaci\u00f3n y concienciaci\u00f3n en materia de ciberseguridad.</li> <li>Materiales de formaci\u00f3n y concienciaci\u00f3n.</li> <li>Auditor\u00edas internas de cumplimiento en materia de prevenci\u00f3n.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 1. Desarrolla planes de prevenci\u00f3n y concienciaci\u00f3n en ciberseguridad, estableciendo normas y medidas de protecci\u00f3n</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han definido los principios generales de la organizaci\u00f3n en materia de ciberseguridad, que deben ser conocidos y apoyados por la direcci\u00f3n de la misma.</li> <li>b) Se ha establecido una normativa de protecci\u00f3n del puesto de trabajo.</li> <li>c) Se ha definido un plan de concienciaci\u00f3n de ciberseguridad dirigido a los empleados.</li> <li>d) Se ha desarrollado el material necesario para llevar a cabo las acciones de concienciaci\u00f3n dirigidas a los empleados.</li> <li>e) Se ha realizado una auditor\u00eda para verificar el cumplimiento del plan de prevenci\u00f3n y concienciaci\u00f3n de la organizaci\u00f3n</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n b: se puede emplear las gu\u00edas de Incibe para pymes para trabajar la normativa de protecci\u00f3n del puesto de trabajo.</li> <li>Criterio de evaluaci\u00f3n c: se puede emplear la herramienta gophish para trabajar la concienciaci\u00f3n de phishing.</li> <li>Criterios de evaluaci\u00f3n d: se puede emplear el material de incibe como inspiraci\u00f3n para el trabajo con el alumnado.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/","title":"UD 1 - 1.1.1 Principios generales","text":"","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#111-principios-generales","title":"1.1.1. Principios generales","text":"<p>Antes de comenzar a trabajar en la ciberseguridad de una organizaci\u00f3n, es importante tener en cuenta los principios generales que rigen la seguridad de la informaci\u00f3n. Estos principios son la base sobre la que se construye cualquier estrategia de ciberseguridad y deben ser conocidos y apoyados por la direcci\u00f3n de la organizaci\u00f3n.</p> <p> </p> Principios generales","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#1-cibserseguridad-de-sistemas-informaticos","title":"1. Cibserseguridad de sistemas inform\u00e1ticos","text":"<p>La ciberseguridad es un campo complejo que abarca una amplia gama de temas y tecnolog\u00edas. Antes de profundizar en los detalles, es importante comprender algunos conceptos b\u00e1sicos que son fundamentales para entender la ciberseguridad.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#11-ciberseguridad","title":"1.1. Ciberseguridad","text":"<p>Imagina que la ciberseguridad es como poner cerraduras, alarmas y c\u00e1maras en una casa. Su objetivo es proteger todo lo que hay dentro y evitar que alguien no autorizado entre, da\u00f1e o robe algo. En el mundo digital, la ciberseguridad protege nuestros ordenadores, tel\u00e9fonos, redes y la informaci\u00f3n que almacenamos en ellos de ataques, robos de datos o virus.</p> <p>Ejemplo pr\u00e1ctico: Cuando configuras una contrase\u00f1a en tu correo electr\u00f3nico, est\u00e1s usando ciberseguridad para proteger tu informaci\u00f3n personal.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#12-ciberdefensa","title":"1.2. Ciberdefensa","text":"<p>Si la ciberseguridad es poner cerraduras en la casa, la ciberdefensa ser\u00eda contratar a un guardia de seguridad para vigilar y estar preparado por si alguien intenta entrar. La ciberdefensa se enfoca en responder a ataques que ya est\u00e1n ocurriendo o evitar que vuelvan a suceder. Incluye monitorear las redes, detectar comportamientos sospechosos y reaccionar r\u00e1pidamente.</p> <p>Ejemplo pr\u00e1ctico: Si una empresa detecta un ataque en su sistema, la ciberdefensa entra en acci\u00f3n para detenerlo, buscar de d\u00f3nde vino y mejorar la seguridad para que no vuelva a pasar.</p> <p>la ciberseguridad y la ciberdefensa son dos caras de la misma moneda. La ciberseguridad se enfoca en prevenir ataques, mientras que la ciberdefensa se enfoca en responder a ellos. Ambas son esenciales para proteger los sistemas de informaci\u00f3n de una organizaci\u00f3n.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#13-sistemas-de-informacion","title":"1.3. Sistemas de informaci\u00f3n","text":"<p>Los sistemas de informaci\u00f3n son el conjunto de datos, procesos, personas y tecnolog\u00edas que gestionan y manejan la informaci\u00f3n en una organizaci\u00f3n. Se enfocan en c\u00f3mo se organiza, almacena, procesa y usa la informaci\u00f3n para apoyar la toma de decisiones y las operaciones.</p> <p>Los sistemas de informaci\u00f3n incluyen:</p> <ul> <li>Datos: Informaci\u00f3n almacenada, como registros de empleados, ventas, o datos financieros.</li> <li>Procesos: Procedimientos que determinan c\u00f3mo se recolecta, organiza y utiliza esa informaci\u00f3n.</li> <li>Personas: Usuarios que interact\u00faan con los sistemas para obtener y procesar la informaci\u00f3n.</li> <li>Tecnolog\u00eda: Los sistemas inform\u00e1ticos (hardware y software) que permiten gestionar los datos.</li> </ul> <p>Ejemplos:</p> <ul> <li>Un sistema de gesti\u00f3n de inventario que controla las existencias en un almac\u00e9n.</li> <li>Un sistema de n\u00f3mina en una empresa, que gestiona los pagos a los empleados.</li> <li>Un CRM (Customer Relationship Management), que almacena datos sobre los clientes y ayuda a las empresas a gestionar sus interacciones.</li> </ul> <p>Proteger los sistemas de informaci\u00f3n implica proteger no solo el hardware y software (que forman parte de los sistemas inform\u00e1ticos), sino tambi\u00e9n la informaci\u00f3n y los procesos que los utilizan. Esto incluye:</p> <ul> <li>Confidencialidad de los datos: Proteger la informaci\u00f3n sensible para que solo quienes est\u00e9n autorizados puedan acceder.</li> <li>Integridad de los datos: Asegurar que la informaci\u00f3n no sea alterada sin permiso.</li> <li>Disponibilidad: Garantizar que los sistemas est\u00e9n operativos cuando los usuarios los necesiten.</li> </ul> <p> </p> Sistema de informaci\u00f3n <p>Si bien los sistemas inform\u00e1ticos no tiene por que contener elementos inform\u00e1ticos, en la actualidad se hace dif\u00edcil imaginarse esta situaci\u00f3n. Se tratar\u00e1 la seguridad de los sistemas de informaci\u00f3n en general, y los sistemas inform\u00e1ticos en particular.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#14-sistema-informatico","title":"1.4. Sistema inform\u00e1tico","text":"<p>Los sistemas inform\u00e1ticos se refieren al hardware y software que permiten procesar, almacenar y transmitir informaci\u00f3n. Incluyen todos los dispositivos f\u00edsicos y los programas que gestionan datos.</p> <p>Los sistemas de informaci\u00f3n incluyen:</p> <ul> <li>Hardware: Computadoras, servidores, dispositivos m\u00f3viles, routers, etc.</li> <li>Software: Sistemas operativos, aplicaciones, programas, bases de datos.</li> </ul> <p>Ejemplos:</p> <ul> <li>Tu computadora personal, con su sistema operativo (Windows, Linux, macOS) y los programas que usas (Microsoft Word, Google Chrome).</li> <li>Un servidor en una empresa que procesa y almacena los datos de los empleados.</li> <li>El router que utilizas para conectarte a Internet.</li> </ul> <p>Proteger los sistemas inform\u00e1ticos significa garantizar que el hardware (dispositivos) y el software (programas) est\u00e9n seguros y funcionen correctamente. Esto incluye:</p> <ul> <li>Actualizaci\u00f3n de software.</li> <li>Mantenimiento de hardware.</li> <li>Uso de antivirus y firewalls para evitar que el hardware y software sean comprometidos.</li> </ul> <p> </p> Sistema inform\u00e1tico <p>Analog\u00eda para visualizarlo mejor:</p> <ul> <li>Sistemas inform\u00e1ticos son como los veh\u00edculos en una flota de autos de una empresa (los autos, motores, llantas, etc.). Se trata de la tecnolog\u00eda f\u00edsica y los programas que permiten el funcionamiento.</li> <li>Sistemas de informaci\u00f3n son como todo el sistema de log\u00edstica de la empresa que usa esos veh\u00edculos. Incluyen los autos (sistemas inform\u00e1ticos), pero tambi\u00e9n el proceso de entrega, los conductores (personas), y la informaci\u00f3n de cada paquete o env\u00edo (datos). En este caso, proteger los sistemas de informaci\u00f3n no solo significa cuidar los veh\u00edculos, sino tambi\u00e9n asegurar que los paquetes lleguen a tiempo, sin da\u00f1os, y que los conductores sigan los procedimientos correctos. *</li> </ul> <p>Ejemplo pr\u00e1ctico:</p> <ul> <li>Sistema inform\u00e1tico: La red de computadoras en una empresa, junto con los servidores que ejecutan el sistema operativo y los programas de software.<ul> <li>Ciberseguridad: Asegurar que los servidores y computadoras est\u00e9n protegidos frente a malware, actualizados y funcionando correctamente.</li> </ul> </li> <li>Sistema de informaci\u00f3n: El sistema que gestiona las ventas en esa misma empresa, incluyendo las bases de datos que almacenan las transacciones, los procesos que generan reportes financieros, y los empleados que analizan esos datos para tomar decisiones.<ul> <li>Ciberseguridad: Proteger no solo los servidores y computadoras, sino tambi\u00e9n la informaci\u00f3n sensible de los clientes, la confidencialidad de los registros de ventas, y la integridad de los reportes financieros para que no sean alterados sin autorizaci\u00f3n.</li> </ul> </li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#2-seguridad-vs-fiabilidad","title":"2. Seguridad vs fiabilidad","text":"<p>La frase \u201cLa seguridad total es imposible de conseguir, por tanto hablaremos m\u00e1s de fiabilidad\u201d nos ayuda a entender una verdad clave en ciberseguridad y en la gesti\u00f3n de sistemas: la seguridad perfecta no existe. Vamos a desglosarla paso a paso y explicar por qu\u00e9 la fiabilidad se convierte en un enfoque m\u00e1s realista.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#21-imposibilidad-de-la-seguridad-total","title":"2.1. Imposibilidad de la seguridad total","text":"<ul> <li>La seguridad total es inalcanzable porque siempre habr\u00e1 nuevas amenazas, errores humanos y vulnerabilidades desconocidas. Por m\u00e1s que una empresa implemente controles, firewalls, pol\u00edticas y medidas avanzadas, siempre existe el riesgo de que algo no salga como se esperaba.</li> <li>Los sistemas inform\u00e1ticos y de informaci\u00f3n son complejos y din\u00e1micos: constantemente se introducen nuevos componentes, actualizaciones y tecnolog\u00edas que pueden abrir nuevas brechas. Adem\u00e1s, los atacantes tambi\u00e9n est\u00e1n en evoluci\u00f3n constante, encontrando nuevas formas de vulnerar los sistemas.</li> <li>Ejemplo en la vida real: Piensa en una casa. Aunque pongas puertas blindadas, c\u00e1maras de seguridad, y alarmas, siempre puede haber un ladr\u00f3n que descubra una nueva forma de entrar o que se aproveche de un peque\u00f1o descuido, como una ventana abierta por error. Lo mismo sucede en ciberseguridad: siempre hay un margen de vulnerabilidad.</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#22-el-enfoque-en-la-fiabilidad","title":"2.2. El enfoque en la fiabilidad","text":"<ul> <li>Dado que la seguridad perfecta no es posible, se pone mayor \u00e9nfasis en la fiabilidad. En lugar de intentar lograr una protecci\u00f3n 100% segura, el objetivo es hacer que los sistemas sean confiables y resilientes. Esto significa que, si ocurre un incidente o un fallo, los sistemas puedan seguir funcionando, recuperarse r\u00e1pidamente, y los da\u00f1os se minimicen.</li> <li>Fiabilidad no significa que los sistemas sean invulnerables, sino que son capaces de funcionar correctamente incluso en situaciones de fallo o ataque. La fiabilidad se basa en conceptos como:<ul> <li>Alta disponibilidad: Asegurar que los sistemas est\u00e9n disponibles para los usuarios, incluso ante fallos.</li> <li>Resiliencia: Capacidad del sistema de recuperarse despu\u00e9s de un incidente (por ejemplo, un ataque cibern\u00e9tico o un fallo t\u00e9cnico).</li> <li>Tolerancia a fallos: Los sistemas est\u00e1n dise\u00f1ados de manera que puedan seguir funcionando o minimizar el impacto ante un fallo de componentes.</li> </ul> </li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#23-como-se-conectan-seguridad-y-fiabilidad-en-esta-frase","title":"2.3. C\u00f3mo se conectan seguridad y fiabilidad en esta frase","text":"<p>Al aceptar que la seguridad total es inalcanzable, las organizaciones se enfocan en c\u00f3mo hacer que los sistemas sean m\u00e1s confiables. Esto significa que, en lugar de poner todos los esfuerzos en proteger el sistema contra absolutamente todas las amenazas posibles (lo cual no es realista), se trabaja para minimizar las consecuencias de los incidentes y mantener los sistemas operativos y estables.</p> <p>Por ejemplo, en lugar de intentar detener todos los ciberataques, una empresa podr\u00eda invertir en sistemas de respaldo, planes de recuperaci\u00f3n y tolerancia a fallos para asegurar que, si un ataque compromete un servidor, los datos se puedan recuperar r\u00e1pidamente y los sistemas vuelvan a estar en l\u00ednea sin interrupciones significativas.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#24-por-que-enfocarse-en-la-fiabilidad-es-mas-realista","title":"2.4. Por qu\u00e9 enfocarse en la fiabilidad es m\u00e1s realista","text":"<p>La fiabilidad es un enfoque m\u00e1s realista y efectivo que la seguridad total. Algunas razones por las que se prefiere la fiabilidad sobre la seguridad perfecta son:</p> <ul> <li>Adaptaci\u00f3n al cambio: Los sistemas pueden seguir operando de manera confiable a pesar de los fallos o ataques, adapt\u00e1ndose a nuevos problemas sin colapsar.</li> <li>Minimizaci\u00f3n del impacto: Si ocurre una vulneraci\u00f3n de seguridad, la organizaci\u00f3n no se queda paralizada; los sistemas son capaces de recuperarse r\u00e1pidamente. Esto minimiza las p\u00e9rdidas y reduce el tiempo de inactividad.</li> <li>Protecci\u00f3n ante lo inesperado: Nadie puede prever todas las amenazas futuras. En lugar de intentar anticiparlas todas, se asegura que los sistemas puedan seguir funcionando de manera predecible y estable a pesar de los desaf\u00edos.</li> <li>Costos y recursos: Intentar alcanzar una seguridad perfecta ser\u00eda muy costoso y agotador. En cambio, mejorar la fiabilidad suele ser una inversi\u00f3n m\u00e1s equilibrada que ofrece mayores beneficios en t\u00e9rminos de continuidad operativa.</li> </ul> <p>Ejemplo pr\u00e1ctico en ciberseguridad:</p> <p>Imagina una peque\u00f1a empresa que almacena datos importantes en sus servidores. En lugar de invertir en una seguridad \"perfecta\" (lo que implicar\u00eda un gasto alt\u00edsimo en tecnolog\u00edas de punta, personal especializado, y auditor\u00edas constantes), la empresa decide focalizarse en la fiabilidad:</p> <ul> <li>Respaldo diario de datos: Si alguien logra vulnerar el sistema y borra o cifra la informaci\u00f3n, se puede restaurar r\u00e1pidamente desde el \u00faltimo respaldo.</li> <li>Redundancia de sistemas: Si un servidor falla, otro toma su lugar para asegurar la continuidad.</li> <li>Monitoreo constante: Si hay un ataque, se detecta r\u00e1pidamente y se toman acciones antes de que el da\u00f1o sea irreparable.</li> </ul> <p>Este enfoque permite que, aunque haya un incidente de seguridad (lo que es inevitable a largo plazo), los sistemas puedan seguir funcionando y las operaciones no se detengan por completo.</p> <p>La clave es asegurar la continuidad del negocio, no la seguridad perfecta.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#3-los-principios-generales-de-la-ciberseguridad","title":"3. Los principios generales de la ciberseguridad","text":"<p>Los principios generales de la ciberseguridad son los pilares sobre los que se construye cualquier estrategia de protecci\u00f3n de la informaci\u00f3n. Estos principios son universales y aplicables a cualquier organizaci\u00f3n, independientemente de su tama\u00f1o o sector. Algunos de los principios m\u00e1s importantes son los siguientes</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#31-triada-cia","title":"3.1. Triada CIA","text":"<ul> <li>Confidencialidad: Solo las personas autorizadas pueden acceder a la informaci\u00f3n.</li> <li>Integridad: La informaci\u00f3n debe mantenerse exacta y completa, sin modificaciones no autorizadas.</li> <li>Disponibilidad: La informaci\u00f3n y los sistemas deben estar disponibles cuando se necesiten.</li> </ul> <p>Ejemplo pr\u00e1ctico integrando CIA: Imagina que trabajas en una empresa financiera y tienes acceso a informaci\u00f3n sobre las cuentas de los clientes:</p> <ol> <li>Confidencialidad: Solo t\u00fa, como empleado autorizado, puedes acceder a esos datos financieros. Para protegerlos, los sistemas utilizan cifrado y contrase\u00f1as seguras.</li> <li>Integridad: Los registros de las cuentas no deben ser alterados sin permiso. Si alguien intenta modificar los datos sin autorizaci\u00f3n, el sistema detectar\u00e1 el cambio y activar\u00e1 alertas para corregirlo. Tambi\u00e9n se usan copias de seguridad para asegurar que los datos originales pueden ser restaurados.</li> <li>Disponibilidad: Cuando los clientes intenten acceder a su cuenta bancaria en l\u00ednea, el sistema debe estar activo y funcional, permiti\u00e9ndoles realizar transacciones en cualquier momento sin interrupciones.</li> </ol> <p> </p> Triada CIA","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#311-confidencialidad-confidentiality","title":"3.1.1 Confidencialidad (Confidentiality)","text":"<p>La confidencialidad asegura que solo las personas o sistemas autorizados puedan acceder a la informaci\u00f3n sensible. Esto protege la informaci\u00f3n de accesos no autorizados.</p> <ul> <li>Objetivo: Evitar que personas no autorizadas accedan, lean o vean datos privados o confidenciales.</li> <li>Ejemplos:<ul> <li>Cifrado de datos: Cuando env\u00edas un mensaje cifrado, solo el receptor autorizado puede leerlo.</li> <li>Contrase\u00f1as seguras: Solo los usuarios que conocen la contrase\u00f1a correcta pueden acceder a una cuenta o sistema.</li> <li>Autenticaci\u00f3n multifactor (MFA): Requiere m\u00e1s de un m\u00e9todo de verificaci\u00f3n (por ejemplo, una contrase\u00f1a y un c\u00f3digo en el m\u00f3vil) para acceder a una cuenta.</li> </ul> </li> <li>Analog\u00eda: Imagina que tienes un diario privado con un candado. Solo t\u00fa tienes la llave, por lo que nadie m\u00e1s puede leer tus escritos. Esto es confidencialidad: proteger tu informaci\u00f3n para que solo quienes tengan acceso autorizado puedan verla.</li> </ul> <p> </p> Confidencialidad","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#312-integridad-integrity","title":"3.1.2. Integridad (Integrity)","text":"<p>La integridad garantiza que los datos no sean alterados o modificados de manera no autorizada o accidental. Asegura que la informaci\u00f3n se mantenga exacta y completa desde su creaci\u00f3n hasta su destino.</p> <ul> <li>Objetivo: Proteger los datos de modificaciones no autorizadas o da\u00f1os, ya sea intencionales (como ataques) o accidentales.</li> <li>Ejemplos:<ul> <li>Firmas digitales: Se utilizan para asegurar que los documentos o archivos no han sido alterados durante su transmisi\u00f3n.</li> <li>Controles de acceso: Solo personas autorizadas pueden modificar los datos en una base de datos.</li> <li>Hashing: Utilizar algoritmos de hash para asegurar que un archivo o mensaje no ha sido modificado. Si el contenido cambia, el hash tambi\u00e9n cambiar\u00e1, lo que indicar\u00eda que la integridad se ha comprometido.</li> </ul> </li> <li>Analog\u00eda: Es como enviar una carta sellada. Si la carta llega con el sello roto, sabes que alguien ha abierto la carta o modificado su contenido. La integridad asegura que la carta (o los datos) llegue tal como fue enviada, sin que nadie la haya alterado en el camino.</li> </ul> <p> </p> Integridad","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#313-disponibilidad-availability","title":"3.1.3. Disponibilidad (Availability)","text":"<p>La disponibilidad asegura que los sistemas y datos est\u00e9n accesibles y operativos cuando los usuarios autorizados los necesiten. Esto implica que los sistemas deben funcionar de manera continua y estar disponibles para su uso.</p> <ul> <li>Objetivo: Garantizar que la informaci\u00f3n y los recursos est\u00e9n siempre accesibles en el momento en que sean requeridos.</li> <li>Ejemplos:<ul> <li>Redundancia de sistemas: Tener servidores duplicados (o en la nube) para que si uno falla, otro lo reemplace autom\u00e1ticamente.</li> <li>Planes de recuperaci\u00f3n ante desastres: En caso de que ocurra un incidente (como un incendio o un ataque), el sistema puede ser restaurado y volver a estar operativo r\u00e1pidamente.</li> <li>Mantenimiento regular: Actualizar y hacer mantenimiento a los sistemas para prevenir fallos y evitar que se caigan en momentos cr\u00edticos.</li> </ul> </li> <li>Analog\u00eda: Piensa en un cajero autom\u00e1tico que necesitas usar. La disponibilidad significa que el cajero est\u00e9 funcionando cuando llegues, sin interrupciones. Si est\u00e1 fuera de servicio cuando lo necesitas, se compromete la disponibilidad.</li> </ul> <p> </p> Disponibilidad","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#32-otros-principios","title":"3.2. Otros principios","text":"<p>Existen principios adicionales que complementan el enfoque de seguridad de la informaci\u00f3n y que son igualmente importantes en muchos contextos, como son: fiabilidad, autenticidad y no repudio. Vamos a explicarlos de manera did\u00e1ctica para que quede todo claro.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#321-fiabilidad-reliability","title":"3.2.1. Fiabilidad (Reliability)","text":"<p>La fiabilidad garantiza que el sistema funcione de manera correcta y predecible, de acuerdo con lo que se espera de \u00e9l, sin errores o fallos inesperados.</p> <ul> <li>En seguridad de la informaci\u00f3n: La fiabilidad implica que tanto los sistemas como los datos pueden ser usados sin problemas, y que el sistema es capaz de funcionar correctamente incluso bajo condiciones de estr\u00e9s o cuando hay fallos.</li> <li>Ejemplo:<ul> <li>Piensa en un sistema bancario: si haces una transferencia, esperas que el sistema funcione correctamente y que el dinero llegue a su destino sin errores. Si el sistema tiene problemas y las transacciones fallan o los datos se pierden, no ser\u00eda confiable.</li> <li>En ciberseguridad, un sistema confiable evita interrupciones inesperadas y asegura que las operaciones se realicen seg\u00fan lo previsto.</li> </ul> </li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#322-autenticidad-authenticity","title":"3.2.2. Autenticidad (Authenticity)","text":"<p>La autenticidad asegura que la informaci\u00f3n o el usuario es quien dice ser, y que la informaci\u00f3n no ha sido manipulada por nadie m\u00e1s durante su transmisi\u00f3n o almacenamiento.</p> <ul> <li>En seguridad de la informaci\u00f3n: Garantiza que tanto los datos como las identidades sean verificables. Un mensaje o documento es aut\u00e9ntico si proviene de una fuente confiable, y los sistemas de autenticaci\u00f3n aseguran que los usuarios son quienes dicen ser (por ejemplo, usando contrase\u00f1as, biometr\u00eda, o certificados digitales).</li> <li>Ejemplo:<ul> <li>Cuando accedes a tu cuenta de correo electr\u00f3nico, el sistema te autentica usando tu usuario y contrase\u00f1a. Esto asegura que t\u00fa eres el verdadero due\u00f1o de la cuenta.</li> <li>Si recibes un mensaje firmado digitalmente, la firma asegura la autenticidad del remitente, de modo que puedes estar seguro de que el mensaje viene de quien dice ser y no ha sido alterado.</li> </ul> </li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#323-no-repudio-non-repudiation","title":"3.2.3. No repudio (Non-repudiation)","text":"<p>El no repudio significa que ninguna de las partes involucradas en una comunicaci\u00f3n o transacci\u00f3n puede negar que esa acci\u00f3n ocurri\u00f3. En otras palabras, el emisor no puede negar que envi\u00f3 un mensaje, ni el receptor puede negar que lo recibi\u00f3.</p> <ul> <li>En seguridad de la informaci\u00f3n: Se utiliza para garantizar la responsabilidad en las transacciones digitales. T\u00e9cnicas como las firmas digitales y los logs (registros de eventos) se utilizan para asegurar que las personas no puedan negar haber realizado una acci\u00f3n determinada.</li> <li>Ejemplo:<ul> <li>Si firmas un contrato digitalmente, el sistema garantiza que no puedas negar haber firmado dicho contrato en el futuro. La firma digital proporciona evidencia de que t\u00fa (el remitente) lo hiciste, y esta evidencia puede ser verificada.</li> <li>En una transacci\u00f3n bancaria en l\u00ednea, el no repudio asegura que si transfieres dinero a alguien, no puedas negar que hiciste esa transacci\u00f3n, y el banco puede probarlo si fuera necesario.</li> </ul> </li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#33-ejemplo-practico-integrando-todo","title":"3.3. Ejemplo pr\u00e1ctico integrando todo","text":"<p>Imagina que est\u00e1s comprando algo en l\u00ednea:</p> <ol> <li>Confidencialidad: Tu informaci\u00f3n de pago (como el n\u00famero de tu tarjeta de cr\u00e9dito) est\u00e1 cifrada para que nadie m\u00e1s la vea.</li> <li>Integridad: El pedido que haces no puede ser modificado por nadie durante su procesamiento. Lo que env\u00edas al vendedor es lo que llega.</li> <li>Disponibilidad: El sistema de pago y la tienda en l\u00ednea deben estar disponibles para que puedas hacer la compra cuando lo necesites.</li> <li>Fiabilidad: El sistema de pago funciona correctamente y tu transacci\u00f3n se realiza sin problemas.</li> <li>Autenticidad: Sabes que est\u00e1s comprando en la tienda leg\u00edtima (gracias a la autenticaci\u00f3n del sitio web), y ellos pueden verificar que el pago proviene de ti.</li> <li>No repudio: Despu\u00e9s de la compra, ni t\u00fa puedes negar haber hecho la transacci\u00f3n, ni la tienda puede negar que recibi\u00f3 tu pago, gracias a los registros y las firmas digitales.</li> </ol> <p>La ciberseguridad se basa en estos principios fundamentales para garantizar la protecci\u00f3n y confiabilidad de los sistemas y la informaci\u00f3n. Adem\u00e1s de la triada CIA (Confidencialidad, Integridad y Disponibilidad), los principios de fiabilidad, autenticidad y no repudio ampl\u00edan la seguridad y aseguran que los sistemas sean confiables, que los datos y personas sean verificables y que todas las acciones sean responsables.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#4-decalogo-de-la-ciberseguridad","title":"4. Dec\u00e1logo de la ciberseguridad","text":"<p>Este Dec\u00e1logo de Ciberseguridad ofrece 10 principios clave que cubren tanto la prevenci\u00f3n de amenazas como la protecci\u00f3n activa de los datos y sistemas. Aplicando estas medidas, puedes reducir considerablemente el riesgo de sufrir ciberataques y mantener seguros los activos digitales de tu organizaci\u00f3n.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#41-cultura-de-la-ciberseguridad-y-concienciacion-del-empleado","title":"4.1. Cultura de la ciberseguridad y concienciaci\u00f3n del empleado","text":"<p>La cultura de ciberseguridad es vital en cualquier organizaci\u00f3n. No solo se trata de instalar herramientas de protecci\u00f3n, sino tambi\u00e9n de educar a los empleados para que sepan c\u00f3mo actuar frente a posibles amenazas.</p> <ul> <li>Relaci\u00f3n con CIA: Este principio refuerza todos los aspectos de la triada (Confidencialidad, Integridad y Disponibilidad), ya que empleados bien capacitados son menos propensos a cometer errores que comprometan la seguridad. La concienciaci\u00f3n previene el acceso no autorizado (confidencialidad), el manejo incorrecto de datos (integridad), y garantiza que los sistemas se usen de manera segura (disponibilidad).    </li> <li>Ejemplo: Si un empleado recibe un correo sospechoso, debe saber que no debe abrir los enlaces ni descargar archivos hasta que confirme que es leg\u00edtimo. La formaci\u00f3n es clave para que todos en la organizaci\u00f3n contribuyan a la seguridad.</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#42-no-abrir-enlaces-ni-descargar-archivos-sospechosos","title":"4.2. No abrir enlaces ni descargar archivos sospechosos","text":"<p>Nunca debemos abrir enlaces ni descargar archivos adjuntos de correos electr\u00f3nicos que nos parezcan sospechosos. Este tipo de correos puede contener malware o llevarnos a sitios fraudulentos.</p> <ul> <li>Relaci\u00f3n con CIA: Este principio refuerza la confidencialidad y integridad.    <ol> <li>Confidencialidad: Al evitar hacer clic en enlaces sospechosos o descargar archivos potencialmente maliciosos, se protege la informaci\u00f3n sensible de caer en manos equivocadas.    </li> <li>Integridad: Impide la descarga de malware que podr\u00eda modificar o corromper los datos.    </li> </ol> </li> <li>Ejemplo: Si recibes un correo que parece raro, aunque parezca que viene de un amigo o compa\u00f1ero, es mejor verificar antes de hacer clic o descargar algo. Los ciberataques, como el phishing, suelen empezar con un correo aparentemente inocente.</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#43-usar-software-de-seguridad","title":"4.3. Usar software de seguridad","text":"<p>Siempre debemos usar software de seguridad como antivirus, cortafuegos (firewalls), y herramientas antimalware. Estas herramientas ayudan a detectar y bloquear amenazas antes de que lleguen a nuestros sistemas.</p> <ul> <li>Relaci\u00f3n con CIA: Apoya los tres principios de la CIA<ol> <li>Confidencialidad: El uso de antivirus y cortafuegos ayuda a bloquear accesos no autorizados a los datos.    </li> <li>Integridad: Los antivirus evitan que el malware modifique o da\u00f1e archivos y sistemas.    </li> <li>Disponibilidad: Mantener los sistemas libres de amenazas asegura que los recursos est\u00e9n disponibles para su uso cuando sea necesario.   </li> </ol> </li> <li>Ejemplo: Tener un antivirus actualizado nos protege de virus conocidos, mientras que un cortafuegos limita el acceso no autorizado a tu red. Tambi\u00e9n es \u00fatil tener herramientas de borrado seguro para eliminar completamente archivos confidenciales.**</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#44-limitar-la-superficie-de-exposicion-a-amenazas","title":"4.4. Limitar la superficie de exposici\u00f3n a amenazas","text":"<p>No es suficiente solo implementar medidas de seguridad, tambi\u00e9n debemos reducir la cantidad de servicios expuestos al m\u00ednimo necesario. Cuantos m\u00e1s servicios tengamos abiertos en nuestra red, m\u00e1s oportunidades tienen los atacantes de encontrar una brecha.</p> <ul> <li>Relaci\u00f3n con CIA: Refuerza la disponibilidad y la confidencialidad.<ol> <li>Confidencialidad: Limitar los servicios y accesos minimiza el riesgo de que los atacantes accedan a informaci\u00f3n confidencial.</li> <li>Disponibilidad: Al reducir la cantidad de servicios innecesarios, se minimiza el riesgo de ataques que puedan comprometer la operatividad de los sistemas.    </li> </ol> </li> <li>Ejemplo: Si tienes un servidor que ofrece varios servicios, desactiva aquellos que no uses o que no sean necesarios para la operaci\u00f3n diaria. Esto reduce el n\u00famero de \"puertas\" que los atacantes pueden intentar abrir.</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#45-cifrar-la-informacion-sensible","title":"4.5. Cifrar la informaci\u00f3n sensible","text":"<p>Toda la informaci\u00f3n sensible o confidencial debe estar cifrada. Esto significa que, incluso si alguien accede a los datos sin permiso, no podr\u00e1 leerlos sin la clave para descifrarlos.</p> <ul> <li>Relaci\u00f3n con CIA: Directamente relacionado con la confidencialidad.<ol> <li>Confidencialidad: El cifrado asegura que, aunque alguien acceda a los datos, no podr\u00e1 entenderlos sin la clave correcta. Protege la informaci\u00f3n frente a accesos no autorizados.    </li> </ol> </li> <li>Ejemplo: Cuando enviamos datos personales o financieros por Internet, deben estar cifrados para que, si son interceptados, no puedan ser le\u00eddos. Usar cifrado es esencial para proteger la privacidad de la informaci\u00f3n.**</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#46-borrado-seguro-de-informacion","title":"4.6. Borrado seguro de informaci\u00f3n","text":"<p>Cuando ya no necesitas un archivo o cuando vas a deshacerte de un dispositivo, debes asegurarte de que los datos se eliminen completamente. Un simple \"borrado\" puede dejar rastros de informaci\u00f3n que un atacante podr\u00eda recuperar.</p> <ul> <li>Relaci\u00f3n con CIA: Refuerza la confidencialidad y la integridad.<ol> <li>Confidencialidad: El borrado seguro evita que los datos sensibles que ya no son necesarios puedan ser recuperados por personas no autorizadas.</li> <li>Integridad: Garantiza que los datos eliminados no puedan ser restaurados o manipulados indebidamente.    </li> </ol> </li> <li>Ejemplo: Antes de vender o desechar un ordenador o tel\u00e9fono, debes usar una herramienta de borrado seguro que sobrescriba los datos varias veces, para que no puedan recuperarse.</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#47-realizar-copias-de-seguridad-periodicas","title":"4.7. Realizar copias de seguridad peri\u00f3dicas","text":"<p>Las copias de seguridad son esenciales para proteger tus datos contra fallos o ataques, como el ransomware. Las copias deben ser frecuentes y seguras, y es importante asegurarse de que no est\u00e1s respaldando tambi\u00e9n malware accidentalmente.</p> <ul> <li>Relaci\u00f3n con CIA: Este principio se relaciona principalmente con la disponibilidad y tambi\u00e9n con la integridad.   <ol> <li>Disponibilidad: Las copias de seguridad permiten recuperar los sistemas r\u00e1pidamente despu\u00e9s de un fallo o ataque, asegurando que la informaci\u00f3n est\u00e9 siempre disponible.</li> <li>Integridad: Las copias de seguridad peri\u00f3dicas aseguran que se pueda restaurar la informaci\u00f3n tal como estaba en el momento de la copia, preservando su exactitud.    </li> </ol> </li> <li>Ejemplo: Imagina que tu empresa es v\u00edctima de un ataque que borra o cifra todos los archivos. Sin copias de seguridad, podr\u00edas perderlo todo. Si tienes una copia reciente, puedes recuperar los datos r\u00e1pidamente y minimizar el impacto.**</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#48-mantener-actualizados-los-sistemas-y-aplicaciones","title":"4.8. Mantener actualizados los sistemas y aplicaciones","text":"<p>Mantener el sistema operativo y las aplicaciones actualizadas es crucial para evitar vulnerabilidades. Las actualizaciones suelen incluir parches de seguridad que corrigen errores que los atacantes podr\u00edan explotar.</p> <ul> <li>Relaci\u00f3n con CIA: Apoya los tres principios.   <ol> <li>Confidencialidad: Mantener el software actualizado cierra vulnerabilidades que los atacantes podr\u00edan usar para acceder a datos sensibles.    </li> <li>Integridad: Evita que malware o exploits da\u00f1en o alteren los datos al aprovechar fallos no corregidos.    </li> <li>Disponibilidad: Las actualizaciones de seguridad evitan que los sistemas sean comprometidos, lo que puede llevar a interrupciones en el servicio.    </li> </ol> </li> <li>Ejemplo: Si est\u00e1s usando una versi\u00f3n desactualizada de una aplicaci\u00f3n, los hackers podr\u00edan aprovechar una vulnerabilidad conocida. Al actualizarla, cierras esa puerta y proteges tu sistema.</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#49-revisar-regularmente-la-configuracion-de-seguridad","title":"4.9. Revisar regularmente la configuraci\u00f3n de seguridad","text":"<p>Es importante revisar y ajustar regularmente la configuraci\u00f3n de seguridad de los sistemas y las aplicaciones. Esto incluye revisar los permisos y las opciones de seguridad para asegurarse de que est\u00e1n configuradas correctamente y de acuerdo con las mejores pr\u00e1cticas.</p> <ul> <li>Relaci\u00f3n con CIA: Apoya la confidencialidad, integridad y disponibilidad.      <ol> <li>Confidencialidad: Revisar la configuraci\u00f3n de seguridad asegura que los permisos y accesos est\u00e9n correctamente establecidos, evitando accesos no autorizados.    </li> <li>Integridad: Una configuraci\u00f3n revisada y adecuada previene cambios o manipulaciones no deseadas en los sistemas.    </li> <li>Disponibilidad: Mantener la configuraci\u00f3n de seguridad actualizada evita que el sistema sea vulnerable a fallos o ataques que podr\u00edan causar interrupciones.    </li> </ol> </li> <li>Ejemplo: Revisar los permisos de las aplicaciones para asegurarse de que no tienen m\u00e1s acceso del necesario. Una aplicaci\u00f3n que no necesita acceder a tu ubicaci\u00f3n o contactos no deber\u00eda tener ese permiso. Tambi\u00e9n es bueno revisar los ajustes de seguridad de tus redes y sistemas para asegurarte de que est\u00e1n actualizados y ajustados a las \u00faltimas amenazas.</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#5-activos-vulnerabilidades-amenazas-y-riesgos","title":"5. Activos, vulnerabilidades, amenazas y riesgos","text":"<p>En ciberseguridad, es fundamental comprender los conceptos de activos, vulnerabilidades, amenazas y riesgos. Estos elementos son la base para identificar y proteger los sistemas y datos de una organizaci\u00f3n.</p> <p>Hasta ahora, hemos hablado de los principios generales de ciberseguridad, conocidos como Confidencialidad, Integridad y Disponibilidad (CIA), junto con otros principios clave como la fiabilidad, la autenticidad y el no repudio. Estos pilares son fundamentales para garantizar que nuestros sistemas y datos est\u00e9n bien protegidos, accesibles solo para personas autorizadas, y disponibles cuando los necesitamos.</p> <p>Sin embargo, para proteger de manera efectiva la informaci\u00f3n y los sistemas, tambi\u00e9n debemos ser capaces de entender los peligros a los que nos enfrentamos y c\u00f3mo esas amenazas pueden comprometer la seguridad. Aqu\u00ed es donde entran en juego tres conceptos cruciales: amenaza, vulnerabilidad y riesgo.</p> <p>Estos conceptos nos permiten ver c\u00f3mo y por qu\u00e9 los sistemas pueden fallar o ser atacados, y nos ayudan a identificar los puntos d\u00e9biles en nuestra infraestructura que podr\u00edan ser aprovechados por actores malintencionados. Ahora que entendemos los principios que debemos proteger, el siguiente paso es analizar qu\u00e9 factores pueden poner en peligro esos principios y c\u00f3mo podemos enfrentarlos.</p> <p>Amenaza, vulnerabilidad y riesgo: Las piezas clave del rompecabezas de la seguridad</p> <ol> <li>Amenaza:<ul> <li>Una amenaza es cualquier evento o acci\u00f3n que tiene el potencial de causar da\u00f1o a nuestros sistemas de informaci\u00f3n o comprometer la confidencialidad, integridad o disponibilidad de los datos. Las amenazas pueden provenir de factores externos como ataques cibern\u00e9ticos (hackers, malware) o de factores internos como errores humanos o fallos de software. Por ejemplo, un ataque de phishing es una amenaza dise\u00f1ada para enga\u00f1ar a los usuarios y obtener informaci\u00f3n confidencial.</li> </ul> </li> <li> <p>Vulnerabilidad:</p> <ul> <li>Las vulnerabilidades son las debilidades o fallos que existen en nuestros sistemas y que pueden ser explotados por una amenaza. Estas vulnerabilidades pueden encontrarse en software desactualizado, configuraciones incorrectas o incluso en la falta de concienciaci\u00f3n de los usuarios. Si no se corrigen, las vulnerabilidades dejan nuestras infraestructuras expuestas a las amenazas, como una puerta abierta que facilita el acceso a un atacante.</li> </ul> </li> <li> <p>Riesgo:</p> <ul> <li>El riesgo es la combinaci\u00f3n de una amenaza que intenta aprovechar una vulnerabilidad. Se puede definir como la probabilidad de que una amenaza tenga \u00e9xito y cause un impacto negativo en el sistema. La gesti\u00f3n del riesgo implica identificar las vulnerabilidades y amenazas para minimizar el da\u00f1o potencial. Por ejemplo, si un sistema cr\u00edtico est\u00e1 desactualizado (vulnerabilidad) y sabemos que los atacantes buscan activamente explotar esa falla (amenaza), el riesgo de un ataque es elevado.</li> </ul> </li> </ol> <p>Estos tres conceptos son fundamentales porque nos permiten anticipar los problemas y tomar medidas antes de que un incidente ocurra. Ahora, vamos a explorar cada uno de ellos en detalle y c\u00f3mo se interrelacionan para ayudarnos a proteger mejor nuestros sistemas.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#51-activos","title":"5.1. Activos","text":"<p>Antes de hablar de amenazas, vulnerabilidades y riesgos, es esencial que primero entendamos qu\u00e9 son los activos en el contexto de la ciberseguridad. Los activos son todos los elementos valiosos para una organizaci\u00f3n que deben ser protegidos, ya que un ataque o incidente podr\u00eda afectar su funcionamiento, productividad o incluso la reputaci\u00f3n de la empresa.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#511-que-es-un-activo","title":"5.1.1. \u00bfQu\u00e9 es un activo?","text":"<p>Un activo es cualquier recurso o bien que tiene valor para la empresa. En el \u00e1mbito de la ciberseguridad, se refiere a cualquier cosa que pueda afectar la seguridad o el funcionamiento de los sistemas de informaci\u00f3n si se viera comprometido. Los activos pueden ser tangibles (como equipos o edificios) o intangibles (como datos o software), y su protecci\u00f3n es el objetivo principal de la ciberseguridad.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#512-ejemplo-practico","title":"5.1.2. Ejemplo pr\u00e1ctico","text":"<p>Imagina que trabajas en una empresa que gestiona datos financieros. Los activos m\u00e1s importantes de esa empresa ser\u00edan:</p> <ul> <li>Los datos financieros de los clientes.</li> <li>Las aplicaciones que gestionan esos datos.</li> <li>Los servidores donde se almacenan.</li> </ul> <p>Cada uno de estos activos necesita ser protegido porque su p\u00e9rdida o da\u00f1o podr\u00eda afectar gravemente a la empresa.</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#513-tipos-de-activos","title":"5.1.3. Tipos de activos","text":"<p>Para hacer m\u00e1s f\u00e1cil su gesti\u00f3n y protecci\u00f3n, los activos se clasifican en diferentes categor\u00edas seg\u00fan su naturaleza:</p> <ol> <li> <p>Datos: Son todos los datos e informaci\u00f3n que maneja la empresa en cualquier formato (digital, f\u00edsico, en la nube, etc.). Estos datos pueden ser personales, financieros, de clientes, operacionales y m\u00e1s.   </p> <ul> <li>Ejemplos:<ul> <li>Bases de datos de clientes o ventas.</li> <li>Documentaci\u00f3n importante como contratos, manuales, normativas o informes.</li> </ul> </li> <li>Importancia: La confidencialidad y integridad de los datos son esenciales, ya que su p\u00e9rdida o alteraci\u00f3n puede da\u00f1ar gravemente la empresa.</li> </ul> </li> <li> <p>Aplicaciones: Son los programas y software que utiliza la organizaci\u00f3n para gestionar y operar su negocio. Incluyen tanto aplicaciones comerciales como sistemas personalizados desarrollados espec\u00edficamente para la empresa.</p> <ul> <li>Ejemplos:<ul> <li>Sistemas SCADA (usados en procesos industriales).</li> <li>Software operativo como sistemas operativos, firmware, aplicaciones de gesti\u00f3n de usuarios o recursos (ERP, CRM).</li> </ul> </li> <li>Importancia: La disponibilidad y seguridad de las aplicaciones son clave para garantizar que los sistemas y procesos funcionen sin interrupciones.</li> </ul> </li> <li> <p>Hardware industrial: Se refiere a los equipos f\u00edsicos que son necesarios para el funcionamiento de la empresa, especialmente en industrias o sectores que dependen de tecnolog\u00eda avanzada.</p> <ul> <li>Ejemplos:<ul> <li>PLC (Controladores L\u00f3gicos Programables), que automatizan procesos industriales.</li> <li>Servidores y terminales remotas en f\u00e1bricas.</li> <li>Dispositivos m\u00f3viles usados para gestionar procesos.</li> </ul> </li> <li>Importancia: El hardware es cr\u00edtico para las operaciones diarias, y si falla, puede causar p\u00e9rdidas operativas significativas.</li> </ul> </li> <li> <p>Red: Son los dispositivos y equipos que permiten la conectividad y comunicaci\u00f3n entre los sistemas, usuarios y procesos.</p> <ul> <li>Ejemplos:<ul> <li>Routers, switches y firewalls que mantienen la red segura y operativa.</li> <li>Pasarelas que permiten la conexi\u00f3n entre diferentes sistemas.</li> </ul> </li> <li>Importancia: La disponibilidad y seguridad de las redes son fundamentales para que los sistemas de la empresa se mantengan conectados y puedan compartir informaci\u00f3n de manera eficiente y segura.</li> </ul> </li> <li> <p>Tecnolog\u00eda: Son otros equipos tecnol\u00f3gicos necesarios para el funcionamiento empresarial. Son m\u00e1s generales que el hardware industrial, pero siguen siendo cr\u00edticos para la gesti\u00f3n diaria.</p> <ul> <li>Ejemplos:<ul> <li>Servidores que alojan los sistemas y aplicaciones empresariales.</li> <li>Tel\u00e9fonos, impresoras y routers.</li> </ul> </li> <li>Importancia: La disponibilidad de estos equipos es vital para la operatividad y la comunicaci\u00f3n interna y externa de la empresa.</li> </ul> </li> <li> <p>Personal: El personal es un activo clave, ya que son quienes manejan los sistemas y toman decisiones sobre la informaci\u00f3n y los procesos de la empresa.</p> <ul> <li>Ejemplos:<ul> <li>Plantilla propia de la organizaci\u00f3n.</li> <li>Personal subcontratado o de mantenimiento.</li> </ul> </li> <li>Importancia: La concienciaci\u00f3n y capacitaci\u00f3n en ciberseguridad del personal son fundamentales para evitar errores humanos, que muchas veces son la principal causa de vulnerabilidades.</li> </ul> </li> <li> <p>Instalaciones: Son los lugares f\u00edsicos donde la organizaci\u00f3n aloja sus sistemas y operaciones.</p> <ul> <li>Ejemplos:<ul> <li>Edificios, oficinas, instalaciones el\u00e9ctricas.</li> <li>Centros de datos y servidores f\u00edsicos.</li> </ul> </li> <li>Importancia: Las instalaciones deben estar protegidas f\u00edsicamente para evitar acceso no autorizado o da\u00f1os f\u00edsicos, como incendios o robos.</li> </ul> </li> <li> <p>Equipamiento auxiliar: Son los equipos de soporte que ayudan a mantener el funcionamiento de los sistemas de informaci\u00f3n, aunque no son parte del n\u00facleo principal de operaci\u00f3n.</p> <ul> <li>Ejemplos:<ul> <li>Equipos de destrucci\u00f3n de datos, climatizaci\u00f3n o SAI (Sistemas de  Alimentaci\u00f3n Ininterrumpida) que mantienen los servidores funcionando incluso en caso de fallos el\u00e9ctricos.</li> </ul> </li> <li>Importancia: Aseguran que los sistemas cr\u00edticos sigan operando bajo condiciones adversas o en situaciones de emergencia.</li> </ul> </li> </ol> <p> </p> Activos","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#514-por-que-es-importante-clasificar-los-activos","title":"5.1.4. \u00bfPor qu\u00e9 es importante clasificar los activos?","text":"<p>Clasificar los activos es un paso fundamental en la gesti\u00f3n de la ciberseguridad, ya que permite identificar y priorizar los activos m\u00e1s cr\u00edticos para la organizaci\u00f3n. Al clasificar los activos, podemos:</p> <ol> <li>Priorizar la protecci\u00f3n: No todos los activos son iguales. Algunos, como los datos confidenciales de los clientes o los servidores cr\u00edticos, requieren m\u00e1s protecci\u00f3n que otros.   </li> <li>Gestionar los riesgos: Al identificar qu\u00e9 activos son los m\u00e1s valiosos o vulnerables, podemos entender mejor qu\u00e9 amenazas podr\u00edan afectarlos y c\u00f3mo mitigar esos riesgos.   </li> <li>Facilitar la respuesta: En caso de un incidente de seguridad, saber qu\u00e9 activos se han visto comprometidos permite actuar con rapidez y minimizar el impacto.</li> </ol> <p>Ahora que hemos entendido qu\u00e9 son los activos y c\u00f3mo clasificarlos, podemos avanzar a entender las amenazas, vulnerabilidades y riesgos que pueden afectar estos activos.</p> <p>**</p> <p>**</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#-","title":"--","text":"","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#activos","title":"Activos","text":"<p>Activo: cualquier recurso de la empresa necesario para desempe\u00f1ar las actividades diarias y cuya no disponibilidad o deterioro supone un agravio o coste.</p> <p></p> <p>Intenta definirlas</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#vulnerabilidad-vs-amenaza","title":"Vulnerabilidad vs Amenaza","text":"<p>La diferencia entre vulnerabilidad y amenaza es muy interesante\\, aunque son t\u00e9rminos que se confunden a menudo.</p> <p></p> <p>Intenta definirlas</p> <p>Las  vulnerabilidades  son las condiciones y caracter\u00edsticas propias de los sistemas de una organizaci\u00f3n\\, de los  activos \\, que la hacen susceptible a las  amenazas .</p> <p>Las amenazas atentan contra la seguridad\\, por tanto\\,   se incumplir\u00e1n los principios generales de la seguridad de la __   __organizaci\u00f3n  . <p>Problema : si existe una vulnerabilidad\\, siempre existir\u00e1 alguien que intentar\u00e1 explotarla\\, es decir\\, sacar provecho de su existencia.</p> <p></p> <p></p> <p></p> <p>\u00bfejemplos de vulnerabilida?</p> <p>Vulnerabilidad propia del sistema</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#vulnerabilidad","title":"Vulnerabilidad","text":"<p>Una __ vulnerabilidad __ es una debilidad o fallo en un sistema de informaci\u00f3n que pone en riesgo la seguridad de la informaci\u00f3n pudiendo permitir que un atacante pueda comprometer la  integridad \\,  disponibilidad  o  confidencialidad  de la misma\\, por lo que es necesario encontrarlas y eliminarlas lo antes posible.</p> <p></p> <p>No nos olvidemos de la:</p> <p>Autenticidad</p> <p>Fiabilidad</p> <p>No repudio</p> <p>Vulnerabilidades en TCP/IP en Microsoft</p> <p></p> <p>N\u00famero total de vulnerabilidades: 56</p> <p>11 __  __cr\u00edticas</p> <p>43 altas</p> <p>2 medias</p> <p></p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#amenaza","title":"Amenaza","text":"<p>__Amenaza: __ toda acci\u00f3n que aprovecha una vulnerabilidad para atentar contra la seguridad de un sistema de informaci\u00f3n. Es decir\\, que podr\u00eda tener un potencial efecto negativo sobre alg\u00fan elemento de nuestros sistemas. Desde el punto de vista de una organizaci\u00f3n pueden ser tanto internas como externas.</p> <p></p> <ul> <li>Amenaza: naturaleza de a lo que afecta:</li> <li>L\u00f3gica</li> <li>F\u00edsica</li> <li>Amenaza: como interfiere</li> <li>Interrupci\u00f3n</li> <li>Interceptaci\u00f3n</li> <li>Modificaci\u00f3n</li> <li>Fabricaci\u00f3n</li> </ul> <p></p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#riesgo","title":"Riesgo","text":"<p>El riesgo es la probabilidad de que se produzca un incidente de seguridad\\, materializandose una amenaza y causando p\u00e9rdidas o da\u00f1os.</p> <p>El riesgo depende entonces de los siguientes factores:  la probabilidad de que la __  amenaza  __ se materialice aprovechando una __  vulnerabilidad  __ y produciendo un da\u00f1o o impacto . El producto de estos factores representa el riesgo existir\u00e1 alguien que intentar\u00e1 explotarla\\, es decir\\, sacar provecho de su existencia.</p> <p>PROBABILIDAD DE QUE OCURRA</p> <p></p> <p>El riesgo  es la probabilidad de que una amenaza se materialice por el impacto que provocar\u00eda la explotaci\u00f3n de una vulnerabilidad.</p> <p>Podemos  identificar  los  activos cr\u00edticos  de los sistemas de informaci\u00f3n que pueden suponer un  riesgo \\, realizando un\u00a0 an\u00e1lisis  de riesgos</p> <p>__Este an\u00e1lisis nos llevar\u00e1 a obtener una imagen rigurosa de los riesgos a los que se encuentra expuesta una organizaci\u00f3n. __</p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#medidas-de-seguridad","title":"Medidas de seguridad","text":"<p>El  tratamiento  del riesgo \\(control\\) supone unos claros beneficios para la \u00absalud\u00bb de la ciberseguridad.</p> <p>De esta manera mantendremos protegida nuestra informaci\u00f3n confidencial frente a la mayor\u00eda de amenazas y vulnerabilidades detectadas \\(o no\\)\\, evitando robos y fugas de informaci\u00f3n.</p> <p></p> <p></p> <p></p> <p>Con el  an\u00e1lisis  del riesgo averiguamos  la magnitud y la gravedad de las consecuencias del riesgo  a la que est\u00e1 expuesta la organizaci\u00f3n.</p> <p>Para ello tendremos que definir un  umbral  que determine los riesgos asumibles de los que no lo son.</p> <p>En funci\u00f3n de la relevancia de los riegos podremos optar por:</p> <p>Evitar  el riesgo eliminando su causa\\, por ejemplo\\, cuando sea viable optar por no implementar una actividad o proceso que pudiera implicar un riesgo.</p> <p>Adoptar  medidas  que  mitiguen  el impacto o la probabilidad del riesgo a trav\u00e9s de la implementaci\u00f3n y monitorizaci\u00f3n de controles.</p> <p>Compartir o  transferir  el riesgo con terceros a trav\u00e9s de seguros\\, contratos etc.</p> <p>Aceptar  la existencia del riesgo y monitorizarlo.</p> <p>A los procedimientos utilizados para reducir los riesgos o minimizar su impacto se les denomina __ \u201cmecanismos o medidas de seguridad\u201d.__</p> <p>Se dividen en tres grandes grupos:</p> <p>Controles preventivos : eliminan o reducen la posibilidad de que las amenazas lleguen a materializarse. Por ejemplo: un firewall o un sistema de autenticaci\u00f3n.</p> <p>Medidas de reacci\u00f3n y recuperaci\u00f3n:  reducen el impacto en caso de haberse materializado las amenazas.</p> <p>A los procedimientos utilizados para reducir los riesgos o minimizar su impacto se les denomina  \u201cmecanismos o medidas de seguridad\u201d.</p> <p>Se dividen en tres grandes grupos:</p> <p>Controles de detecci\u00f3n : permiten detectar un suceso no deseado. Por ejemplo un IDS \\(Sistema de Detecci\u00f3n de Intrusos\\)</p> <p>Mecanismos o medidas de seguridad\\, ejemplos:</p> <p>Disponer de dispositivos redundantes \\(duplicado\\) para poder sustituirlo en caso de un problema.</p> <p>Recuperar un sistema al estado m\u00e1s pr\u00f3ximo previo a la ocurrencia de una amenaza.</p> <p>Realizar un backup\\, o copia de seguridad de nuestros datos.</p> <p>Entonces \u00bf C\u00f3mo  __ realizamos este __  an\u00e1lisis  que nos permita  __identificar las Medidas de Seguridad __ de un sistema?</p> <p>Fase 1:  Definir el alcance del an\u00e1lisis . Es decir\\, si nos centramos en un servicio\\, departamento y actividades o alguno en concreto.</p> <p>Fase 2:  Identificar qu\u00e9 activos  de qu\u00e9 sistema\\, departamento\\, servicio\\, etc participar\u00e1n en el estudio y su valoraci\u00f3n.</p> <p>Fase 3: Identificar las  medidas de seguridad existentes \\, es decir. Si no hay\\, entonces hay puntos d\u00e9biles.</p> <p>\u00bfC\u00f3mo actuamos para solventar las principales riesgos de un sistema?</p> <p>Fase 4:  Descubrir los puntos d\u00e9biles o vulnerabilidades  que afectan a los activos.</p> <p>Fase 5: Valorar las  __posibles amenazas __ que pueden afectar a los activos.</p> <p>Fase 6: Obtener __ el riesgo para cada activo/amenaza__ \\, valorar la probabilidad y el impacto sobre el negocio que producir\u00eda un ataque..</p> <p>\u00bfC\u00f3mo actuamos para solventar las principales riesgos de un sistema?</p> <p>Fase 7: Establecer los  objetivos de seguridad de la organizaci\u00f3n . El umbral por encima del cual la organizaci\u00f3n tomar\u00e1 medidas.</p> <p>Fase 8:  Seleccionar las medidas de protecci\u00f3n  posibles.</p> <p></p> <p></p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#todo-junto","title":"Todo junto","text":"","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#indice","title":"\u00cdNDICE","text":"<ul> <li>\u00bfQue es la Ciberseguridad?</li> <li>Sistema de informaci\u00f3n e inform\u00e1tico</li> <li>Principios generales</li> <li>Confidencialidad</li> <li>Integridad</li> <li>Disponibilidad</li> <li>Otros</li> <li>A que nos enfrentamos</li> <li>Activos</li> <li>Vulnerabilidad</li> <li>Amenaza</li> <li>Riesgos</li> <li>Medidas de seguridad</li> <li>Todo junto</li> <li>\u00bfQu\u00e9 hacer?</li> <li>Plan director</li> </ul>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#seguridad-informatica","title":"Seguridad inform\u00e1tica","text":"<p>Mediante la  seguridad inform\u00e1tica \\, se definir\u00e1n las normas\\, procedimientos\\, m\u00e9todos y t\u00e9cnicas destinados a conseguir un  sistema de informaci\u00f3n seguro y confiable :</p> <p></p> <p></p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#planes-politicas-normativas","title":"Planes, pol\u00edticas, normativas","text":"<p>Un  Plan Director de Seguridad  consiste en la definici\u00f3n y priorizaci\u00f3n de un conjunto de proyectos en materia de seguridad de la informaci\u00f3n con el objetivo de  reducir los _  _riesgos  a los que est\u00e1 expuesta la organizaci\u00f3n hasta unos niveles aceptables.</p> <p></p> <p>Plan director</p> <p>Plan Director de Seguridad | INCIBE</p> <p>Plan Director de Seguridad \u00bfC\u00f3mo implantarlo en tu empresa?</p> <p>Pol\u00edticas</p> <p>Pol\u00edticas de seguridad para la pyme | INCIBE</p> <p>Anexo 5 - ISO 27001</p> <p>Conoce tus riesgos</p> <p></p> <p></p> <p></p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#sistema-de-gestion-de-seguridad-de-la-informacion","title":"Sistema de gestion de seguridad de la informaci\u00f3n","text":"<p>Un  Sistema de Gesti\u00f3n de la Seguridad de la Informaci\u00f3n \\( __SGSI__ \\) \\(en ingl\u00e9s: Information Security Management System\\, ISMS\\)  es\\, como el nombre lo sugiere\\, un conjunto de pol\u00edticas de administraci\u00f3n de la informaci\u00f3n. El t\u00e9rmino es utilizado principalmente por la  ISO/IEC 27001 \\,1 aunque no es la \u00fanica normativa que utiliza este t\u00e9rmino o concepto.</p> <p>Un SGSI es para una organizaci\u00f3n el dise\u00f1o\\, implantaci\u00f3n\\, mantenimiento de un conjunto de procesos para gestionar eficientemente la accesibilidad de la informaci\u00f3n\\, buscando asegurar la confidencialidad\\, integridad y disponibilidad de los activos de informaci\u00f3n minimizando a la vez los riesgos de seguridad de la informaci\u00f3n.</p> <p></p>","tags":["principios"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/","title":"UD 1 - 2.1 Plan director de seguridad - Ejemplo","text":"","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#plan-director-de-seguridad","title":"Plan director de seguridad","text":"<p>En esta era de la digitalizaci\u00f3n y el mundo conectado, la seguridad de la informaci\u00f3n se ha vuelto un elemento clave y estrat\u00e9gico para muchas empresas. Proteger los sistemas inform\u00e1ticos que usan para desarrollar la actividad diaria de la empresa no solo es una forma de asegurar la continuidad del negocio y reducir posibles p\u00e9rdidas, tambi\u00e9n es una forma m\u00e1s de cumplir con las exigencias legales de la normativa de protecci\u00f3n de datos. Por todo esto, cualquier empresa deber\u00eda considerar la elaboraci\u00f3n e implantaci\u00f3n de un Plan Director de Seguridad; en esta entrada os explicamos todo cuanto necesit\u00e1is saber sobre ello.</p> <ul> <li>\u00bfQu\u00e9 es el Plan Director de Seguridad?</li> <li>Objetivos generales de un Plan Director de Seguridad</li> <li>C\u00f3mo implantar un Plan Director de Seguridad en una empresa. Pasos a seguir</li> <li>Definici\u00f3n de la pol\u00edtica de seguridad de la empresa</li> <li>Conocimiento de la estrategia de la empresa</li> <li>Definir los proyectos e iniciativas</li> <li>Clasificar y priorizar los proyectos a realizar</li> <li>Aprobaci\u00f3n</li> <li>Puesta en marcha del plan</li> <li>Ejemplos</li> </ul>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#que-es-el-plan-director-de-seguridad","title":"\u00bfQu\u00e9 es el Plan Director de Seguridad?","text":"<p>Empecemos por saber qu\u00e9 es un Plan Director de Seguridad (PDS); se trata de la planificaci\u00f3n de actividades enfocadas a implantar o mejorar las medidas de ciberseguridad de una empresa, marcando las prioridades a corto, medio y largo plazo, eligiendo a los responsables de su implantaci\u00f3n y seguimiento y determinando los recursos que ser\u00e1n necesarios para conseguirlo.</p> <p>El Plan Director de Seguridad inform\u00e1tica es, pues, una serie de proyectos tanto t\u00e9cnicos como de contenido legal y organizativo, que se planifican tras la realizaci\u00f3n de una evaluaci\u00f3n y an\u00e1lisis previo de la situaci\u00f3n de la empresa en materia de seguridad de la informaci\u00f3n.</p> <p>Adem\u00e1s, cualquier Plan Director de Seguridad debe estar alineado con los objetivos estrat\u00e9gicos de la empresa, contar con el compromiso de la direcci\u00f3n y ser comunicado a los empleados, par asegurarnos de que todo el personal comprende los riesgos y amenazas digitales a los que se enfrenta la empresa, las posibles consecuencias de los mismos y c\u00f3mo se deben evitar.</p> <p>As\u00ed, un Plan Director de Seguridad incluye desde la contrataci\u00f3n de servicios o productos destinados a mejoras la seguridad, proyectos destinados a cumplir con la normativa de privacidad y protecci\u00f3n de datos, hasta la formaci\u00f3n de empleados y la creaci\u00f3n de pol\u00edticas internas en materia de seguridad de la informaci\u00f3n.</p>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#objetivos-generales-de-un-plan-director-de-seguridad","title":"Objetivos generales de un Plan Director de Seguridad","text":"<p>Puesto que cada empresa debe afrontar diferentes niveles de riesgos y amenazas digitales, el Plan Director de Seguridad nunca ser\u00e1 igual para unas que para otras, ya que se debe considerar el sector de actividad, la informaci\u00f3n que se maneja, la cantidad de datos que se tratan, el tama\u00f1o de la compa\u00f1\u00eda, etc. Sin embargo, s\u00ed podemos decir que existen una serie de objetivos generales comunes a cualquier tipo de empresa.</p> <p>As\u00ed, los objetivos generales que cualquier Plan Director de Seguridad de la informaci\u00f3n debe contemplar son:</p> <ul> <li>La evoluci\u00f3n inicial de la situaci\u00f3n y el entorno, con la que se podr\u00e1n identificar los riesgos para la seguridad digital de la compa\u00f1\u00eda.</li> <li>La identificaci\u00f3n de aquellas \u00e1reas de la empresa que m\u00e1s expuestas est\u00e1n a esos riegos, en base a la gravedad del impacto y la probabilidad de que ocurran.</li> <li>Crear e implantar las medidas de seguridad pertinentes que ayuden a reducir al m\u00ednimo aceptable o residual esos riesgos.</li> <li>Realizar un seguimiento de las medidas implementadas y los resultados obtenidos, \u00bfse ha mejorado la seguridad?, \u00bfse han evitado ataques y p\u00e9rdidas de informaci\u00f3n?</li> <li>Realizar una mejora continua del Plan, volviendo a evaluar y analizar la situaci\u00f3n y mejorar las medidas adoptadas o aplicar nuevas.</li> </ul>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#como-implantar-un-plan-director-de-seguridad-en-una-empresa-pasos-a-seguir","title":"C\u00f3mo implantar un Plan Director de Seguridad en una empresa. Pasos a seguir","text":"<p>Ahora que ya que sabemos en qu\u00e9 consiste un Plan Director de Seguridad y qu\u00e9 objetivos se buscan conseguir con un elaboraci\u00f3n e implantaci\u00f3n, veamos qu\u00e9 pasos debemos seguir para implementarlo en nuestra empresa, sin perder de vista que se trata de un proceso c\u00edclico, es decir, que se debe evaluar de forma anual para comprobar sus resultados y su efectividad, si bien es cierto que la duraci\u00f3n de estos planes est\u00e1 entre los 2 y los 4 a\u00f1os (siempre que no haya cambios sustanciales en la empresa que puedan tener un impacto en la ciberseguridad de la misma).</p> <p></p>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#definicion-de-la-politica-de-seguridad-de-la-empresa","title":"Definici\u00f3n de la pol\u00edtica de seguridad de la empresa","text":"<p>El primer paso que debemos realizar a la hora de elaborar el Plan Director de Seguridad es definir la pol\u00edtica de seguridad de la empresa, determinando el punto de partida de nuestro nivel de seguridad digital y fijando el objetivo al que queremos llegar. Debemos determinar qu\u00e9 se va a proteger, c\u00f3mo llevaremos a cabo la prevenci\u00f3n de los riesgos, los posibles incidentes o problemas que podemos sufrir, c\u00f3mo los vamos afrontar, etc. Es decir, marcaremos tanto los objetivos que se quieren alcanzar como aquellos que se deben mejorar.</p> <p>En esta fase tambi\u00e9n se debe fijar qui\u00e9n tiene la responsabilidad sobre la gesti\u00f3n de los activos de la empresa (equipos, instalaciones, servicios, personal\u2026), si se llevar\u00e1 a cabo de manera interna o se contratar\u00e1 un servicio externo. En ese sentido, tambi\u00e9n habr\u00e1 que establecer los perfiles del responsable de seguridad, del responsable de informaci\u00f3n y de los responsables de \u00e1mbito (seg\u00fan proceda o sea necesario).</p> <p>Para poder llevar a cabo todo esto, es necesario realizar un an\u00e1lisis previo de la situaci\u00f3n de la que parte la empresa, llevando a cabo tanto un an\u00e1lisis t\u00e9cnico de seguridad como un an\u00e1lisis de los riesgos existentes.</p> <p>Una buena gu\u00eda para desarrollar esta primera fase la encontramos en las directrices recogidas por la norma ISO/IEC 27002:2013 en materia de buenas pr\u00e1cticas de seguridad de la informaci\u00f3n.</p>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#conocimiento-de-la-estrategia-de-la-empresa","title":"Conocimiento de la estrategia de la empresa","text":"<p>Como se\u00f1al\u00e1bamos antes, el Plan Director de Seguridad debe estar en consonancia con los objetivos estrat\u00e9gicos de la empresa, por lo tanto, a la hora de elaborarlo se deben conocer los planes a corto, medio y largo plazo de la empresa, incluyendo la previsi\u00f3n de crecimiento, los cambios que se plantean llevar a cabo a lo largo del tiempo, las posibles reorganizaciones, etc. Igualmente, hay que tener en cuenta si la empresa forma parte de un grupo empresarial mayor, as\u00ed como el sector al que se dedica su actividad, puesto que pueden existir requisitos legales adicionales.</p> <p>En este punto tambi\u00e9n se debe saber ya qu\u00e9 tipo de estrategia de servicios TIC tenemos pensando implementar en la empresa; se dedicar\u00e1 un departamento interno a crear y mantener la infraestructura de los sistemas inform\u00e1ticos o contrataremos un servicio externo de cloud computing.</p> <p>Todo lo referente a la estrategia de la empresa afectar\u00e1 al enfoque de las medidas de seguridad que se deban implantar, as\u00ed como el peso e importancia de cada una de ellas. Por ello es importante que se implique ya no solo la direcci\u00f3n de la compa\u00f1\u00eda, sino tambi\u00e9n a los responsables de aquellos departamentos implicados en la seguridad de la informaci\u00f3n.</p> <p>En esta fase el objetivo es alinear la estrategia de seguridad con la estrategia TIC y la estrategia general de negocio de la compa\u00f1\u00eda.</p>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#definir-los-proyectos-e-iniciativas","title":"Definir los proyectos e iniciativas","text":"<p>En las fases anteriores habremos recabado informaci\u00f3n que en este siguiente paso usaremos para definir las acciones, iniciativas y proyectos necesarios para alcanzar el nivel de seguridad que hemos fijado para la empresa.</p> <p>Hay que tener en cuenta que el Plan Director de Seguridad se realiza para todos los \u00e1mbitos o \u00e1reas que formen la empresa, por lo que las medias que se decidan implantar tambi\u00e9n ser\u00e1n diferentes en funci\u00f3n de a qu\u00e9 \u00e1rea afecten.</p> <p>As\u00ed que, primero definiremos las medidas dirigidas a mejorar los m\u00e9todos de trabajo actuales, es decir, determinar aquellos controles necesarios para cumplir con las normativas y regulaciones vigentes.</p> <p>Segundo, en base a las carencias detectadas en los an\u00e1lisis y evaluaciones de riesgos y situaci\u00f3n, estableceremos aquellas medidas o acciones relacionadas con los controles t\u00e9cnicos y f\u00edsicos que sea necesario poner en marcha.</p> <p>Y tercero, definiremos tanto la estrategia de seguridad a seguir como los proyectos m\u00e1s adecuados para gestionar aquellos riesgos que est\u00e1n por encima del nivel de riesgo aceptable para la empresa.</p> <p>En esta fase tambi\u00e9n se debe estimar el coste que supondr\u00e1 la puesta en marcha de estas medidas y proyectos, tanto en t\u00e9rminos econ\u00f3micos como temporales y ponerlo en relaci\u00f3n con los recursos humanos y materiales que ser\u00e1 necesario destinar a ello, tanto internos como externos.</p> <p>A continuaci\u00f3n os dejamos unas medidas o proyectos que figuran habitualmente en el Plan Director de Seguridad como ejemplo ilustrativo:</p> <ol> <li>Desarrollar e implementar una pol\u00edtica de seguridad:</li> <li>Compromiso de la Direcci\u00f3n</li> <li>Utilizaci\u00f3n del email e Internet</li> <li>Utilizaci\u00f3n de dispositivos m\u00f3viles</li> <li>Aspectos de protecci\u00f3n de datos</li> <li>Desplegar un plan de concienciaci\u00f3n en materia de seguridad de la informaci\u00f3n.</li> <li>Mejora en la gesti\u00f3n de incidentes y atenci\u00f3n al usuario.</li> <li>Adecuaci\u00f3n al RGPD.</li> <li>Mejorar la coordinaci\u00f3n entre el departamento de RRHH y el departamento TIC.</li> <li>Desarrollar un plan de continuidad TIC.</li> <li>Mejoras en la seguridad de la red corporativa.</li> <li>Pol\u00edtica de copias de seguridad.</li> <li>Clasificaci\u00f3n de la informaci\u00f3n (p\u00fablica, privada y confidencial).</li> <li>Regulaci\u00f3n de los servicios TIC prestado por terceros.</li> </ol>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#clasificar-y-priorizar-los-proyectos-a-realizar","title":"Clasificar y priorizar los proyectos a realizar","text":"<p>Con una bater\u00eda de proyectos e iniciativas listos para ponerse en marcha, llegamos al siguiente paso de creaci\u00f3n e implantaci\u00f3n del Plan Director de Seguridad, clasificarlos y priorizarlos, porque no todos los proyectos o medidas tendr\u00e1n el mismo peso e importancia, ni el mismo coste.</p> <p>La agrupaci\u00f3n o clasificaci\u00f3n de los proyectos puede llevarse a cabo en base a diferentes criterios, por ejemplo, pueden agruparse en base a su origen (cumplimiento normativo y regulatorio, an\u00e1lisis t\u00e9cnico o an\u00e1lisis de riesgo), o al tipo de acci\u00f3n a llevar a cabo.</p> <p>Independientemente de c\u00f3mo las agrupemos, siempre procurando que cada grupo de proyectos o medidas mantengan cierto nivel de homogeneidad, debemos priorizarlos en base al coste temporal y el esfuerzo requerido para implantarlos y ponerlos en marcha, de manera que estableceremos proyectos a corto, medio y largo plazo.</p> <p>Se recomienda, adem\u00e1s, crear un grupo que recoja los proyectos cuya implantaci\u00f3n necesite un esfuerzo menor, pero cuyo resultado producir\u00e1 mejoras importantes para la seguridad de la informaci\u00f3n en la empresa. Este tipo de proyectos reciben el nombre de \u00abquick wins\u00bb.</p>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#aprobacion","title":"Aprobaci\u00f3n","text":"<p>Con una primera versi\u00f3n del Plan Director de Seguridad \u00absobre la mesa\u00bb, el siguiente paso es enviarlo a la direcci\u00f3n de la compa\u00f1\u00eda para su aprobaci\u00f3n.</p> <p>La direcci\u00f3n revisar\u00e1 el plan en su conjunto y podr\u00e1 modificar su alcance, duraci\u00f3n o la prioridad de cada proyecto. Si es necesario hacer cambios, se volver\u00e1n a dar los mismos pasos que hemos descrito hasta ahora (o aquellos que sea necesario en funci\u00f3n de las partes del plan que necesiten ser revisadas), hasta lograr un Plan Director de Seguridad que cuente con la aprobaci\u00f3n formal de la direcci\u00f3n</p> <p>Esta aprobaci\u00f3n y respaldo del Plan deber\u00e1 hacerse llegar a todos los empleados de la compa\u00f1\u00eda, bien a trav\u00e9s de sus jefes de departamento o a trav\u00e9s de circulares mediante correo electr\u00f3nico. As\u00ed mismo, se deber\u00e1 reforzar la idea de la importancia de que todos deben colaborar para la implantaci\u00f3n del Plan.</p>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#puesta-en-marcha-del-plan","title":"Puesta en marcha del plan","text":"<p>Llegamos a la fase final del Plan Director de Seguridad, su puesta en marcha. Cada empresa podr\u00e1 optar por gestionarlo como considere oportuno, pero no deber\u00edan perderse de vista los siguientes aspectos para asegurar la consecuci\u00f3n de los objetivos marcados en cada proyecto del Plan y el \u00e9xito del mismo:</p> <ul> <li>Realizar una presentaci\u00f3n general del Plan Director de Seguridad a aquellas personas que estar\u00e1n implicadas en la realizaci\u00f3n de los diferentes proyectos, inform\u00e1ndoles de los trabajos a realizar y los resultados que se desean obtener.</li> <li>Cada proyecto debe tener asignado un responsable o coordinador, as\u00ed como tener los recursos humanos y materiales necesarios para llevarlo a cabo.</li> <li>Establecer un seguimiento individual de cada proyecto y uno general del Plan, algo que deber\u00e1 hacerse con una periodicidad fija (cada mes, cada 6 meses, cada a\u00f1o\u2026). Adem\u00e1s, en caso de que se produzcan cambios significativos en la empresa que puedan modificar el enfoque estrat\u00e9gico, se deber\u00e1 revisar el Plan para comprobar si todav\u00eda es v\u00e1lido y coincidente con la estrategia de la compa\u00f1\u00eda.</li> <li>Cada vez que se alcance un objetivo previsto, se debe confirmar que las deficiencias o problemas que se identificaron en la evaluaci\u00f3n y an\u00e1lisis previos, han sido realmente subsanados.</li> </ul>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#ejemplos","title":"Ejemplos","text":"<p>A continuaci\u00f3n os dejamos una infograf\u00eda con un ejemplo de Plan de Seguridad (simplificado) de una editorial y librer\u00eda electr\u00f3nica, siguiendo los pasos que hemos indicado m\u00e1s arriba.</p> <p></p>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad-ejemplo/#fuente","title":"Fuente","text":"<ul> <li>Ayuda ley protecci\u00f3n de datos: Plan director de seguridad</li> </ul>","tags":["IS"]},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/","title":"IS U1.2.1. PlanDirectorDeSeguridad","text":"<p>1.1 Plan director de seguridad</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#ra1","title":"RA1","text":"<p>a) Se han definido los principios generales de la organizaci\u00f3n en materia de ciberseguridad, que deben ser conocidos y apoyados por la direcci\u00f3n de la misma.</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#indice","title":"\u00cdNDICE","text":"Punto Slide numero La informaci\u00f3n y los sistemas de informaci\u00f3n 5 Plan director de seguridad 8 PDS. Situaci\u00f3n actual 11 PDS. Estrategia de la empresa 24 PDS. Definir proyectos e iniciativas 28 PDS. Clasificar y priorizar los proyectos 29 PDS. Aprobaci\u00f3n por la direcci\u00f3n 30 PDS. Puesta en marcha 31"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#la-informacion-y-los-sistemas-de-informacion","title":"La informaci\u00f3n y los sistemas de informaci\u00f3n","text":"<p>La informaci\u00f3n es un activo fundamental para el funcionamiento de las empresas.</p> <p>Las empresas basan su actividad en sistemas de informaci\u00f3n con soporte tecnol\u00f3gico \\(ordenadores\\, tabletas\\, p\u00e1gina web\\,\u2026\\)</p> <p></p> <p>Proteger los sistemas de informaci\u00f3n es proteger el negocio</p> <p></p> <p></p> <p>\u00bfQu\u00e9 pasa si nos encontramos antes un incidente?</p> <p>\u00bfQu\u00e9 riesgos estamos asumiendo?</p> <p>\u00bfSabemos c\u00f3mo dar respuesta?</p> <p>Se necesita llevar a cabo una __  __gesti\u00f3n planificada  __ __  de  __ __  actuaciones  __ __  en materia de Ciberseguridad</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#plan-director-de-seguridad","title":"Plan director de seguridad","text":"<p>Si las  herramientas  tecnol\u00f3gicas y la  informaci\u00f3n</p> <p>que dan soporte a los servicios y procesos productivos de la organizaci\u00f3n  son de gran valor para nuestra organizaci\u00f3n \\,</p> <p>debemos empezar a pensar en poner en pr\u00e1ctica un</p> <p>Plan Director de Seguridad .</p> <p>Definici\u00f3n  y  __priorizaci\u00f3n __</p> <p>de un</p> <p>_conjunto de proyectos _</p> <p>en materia de</p> <p>seguridad de la informaci\u00f3n con el objetivo de</p> <p>_reducir los riesgos _</p> <p>a los que est\u00e1 expuesta la organizaci\u00f3n hasta unos niveles aceptables\\,</p> <p>a partir de un</p> <p>an\u00e1lisis de la situaci\u00f3n inicial</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#plan","title":"Plan","text":"<p>director de seguridad</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#plan-director-de-seguridad_1","title":"Plan director de seguridad","text":"<p>Existen distintos factores que determinan la magnitud y complejidad del PDS. No obstante la elaboraci\u00f3n y puesta en marcha siguen las fases siguientes:</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-situacion-actual","title":"PDS. Situaci\u00f3n actual","text":"<p>1.- Situaci\u00f3n actual</p> <p>An\u00e1lisis considerando aspectos t\u00e9cnicos\\, organizativos\\, regulatorios y normativos\\, entre otros</p> <p>1.1 Actividades previas</p> <p>Antes de comenzar con el primer paso del an\u00e1lisis\\, debemos realizar varias actividades previas:</p> <p></p> <p>a)  Definir el alcance \\, qu\u00e9 departamento\\, y qu\u00e9 activos y procesos\\, teniendo en cuenta los negocios cr\u00edticos.</p> <p>b) Identificar el responsable de gesti\u00f3n de activos: Identificar los  activos  y definir las  responsabilidades  sobre los activos</p> <p>c) Valoraci\u00f3n inicial:  Valoraci\u00f3n preliminar  de la situaci\u00f3n actual de la organizaci\u00f3n para determinar los  controles \\(medidas de todo tipo que implementa para contrarrestar los riesgos de seguridad\\) y requisitos que son de aplicaci\u00f3n.</p> <p></p> <p>Por lo general\\, se puede usar para la evaluaci\u00f3n de aspectos normativos y regulatorios el  est\u00e1ndar 27002:2017\\,  dise\u00f1ada para ser utilizada a la hora de designar controles  para la selecci\u00f3n e implantaci\u00f3n de un Sistema de Seguridad de la Informaci\u00f3n\\,</p> <p>Solo  aplicar los \u00e1mbitos que se crean convenientes  dependiendo de la magnitud de la empresa\\, es decir\\, no es necesaria la implementaci\u00f3n de todos los controles que se indican en la norma 27002:2017\\, sino s\u00f3lo aquellos que sean de aplicaci\u00f3n a la empresa..</p> <p>Elaborar un documento \u201c Documento de Selecci\u00f3n de Controles \u201d\\, con los controles o medidas de seguridad que se aplican a la organizaci\u00f3n y su grado de madurez\\, es decir\\, si est\u00e1n implantados y en qu\u00e9 estado est\u00e1n.</p> <p></p> <p></p> <p>Norma par identificar los controles implantados.</p> <p></p> <p></p> <p>Modelo de madurez.</p> <p></p> <p>d) An\u00e1lisis de cumplimiento:  Reuniones con los departamentos  para evaluar el cumplimiento de los controles de seguridad.</p> <p>Tambi\u00e9n se requiere la inspecci\u00f3n de la seguridad f\u00edsica\\, por tanto es necesario una  inspecci\u00f3n in-situ de las instalaciones .Es \u00fatil para la __ recogida de problemas y evidencias el uso de checklist__  que incluyan los aspectos a revisar y comprobar.Analizar los resultados\\, y  establecer el cumplimiento de cada control en una escala nivel de o porcentaje madurez</p> <p></p> <p></p> <p>e) Establecer objetivo a cumplir en materia de ciberseguridad en la empresa\\, determinando los \u00e1mbitos a mejorar e identificar los aspectos en los que focalizar esfuerzos</p> <p>Adem\u00e1s de la ISO 27000\\, otros est\u00e1ndares:</p> <p>RGPD: Protecci\u00f3n de informaci\u00f3n y cumplimiento legal</p> <p>PCI-DSS: Tarjetas de cr\u00e9dito</p> <p>COBIT: Buenas pr\u00e1cticas de gobernanza</p> <p>ENS: Esquema nacional de seguridad\\, en la Administraci\u00f3n p\u00fablica</p> <p></p> <p>1.2 An\u00e1lisis t\u00e9cnico de seguridad</p> <p>Queda cubierto por la valoraci\u00f3n del grado de implantaci\u00f3n y madurez de los controles</p> <p>No obstante  podemos realizar un trabajo de auditor\u00eda  para valorar el grado de implantaci\u00f3n de determinados controles e identificar deficiencias en cortafuegos\\, antivirus\\, sistema de detecci\u00f3n de intrusos\\, niveles de parcheado\\, pol\u00edticas de contrase\u00f1as\\, etc.</p> <p>El grado y nivel de esta auditor\u00eda depender\u00e1 de la empresa y antecedentes. Muchas veces este trabajo se externaliza.</p> <p></p> <p>1.3 An\u00e1lisis de riesgos</p> <p>A los que est\u00e1 expuesta nuestra organizaci\u00f3n\\, siguiendo las siguientes etapas:</p> <p></p> <p></p> <p>1.3 An\u00e1lisis de riesgos</p> <p>Definir el  alcance del an\u00e1lisis de riesgos \\, que vendr\u00e1 definido por el alcance del PDS.</p> <p>Identificar los activos : Aquellos m\u00e1s importantes que guardan relaci\u00f3n con el departamento/proceso objeto del estudio.</p> <p>Identificar/seleccionar las amenazas  a los que est\u00e1n expuestos.</p> <p>Evaluar el riesgo para cada par activo-amenaza \\, estimaremos la probabilidad de que la amenaza impacte sobre el negocio: probabilidad x impacto.</p> <p>Identificar vulnerabilidades y salvaguardas : Las vulnerabilidades penalizar\u00e1n a la hora de evaluar el riesgo\\, de la misma forma que las salvaguardas aplicadas contribuir\u00e1n a reducir el riesgo. Iniciativas para implantar controles o salvaguardas.</p> <p>Tratar el riesgo . Tomar una estrategias y obtener riesgo residual tras aplicar estrategia.</p> <p></p> <p></p> <p>Elementos que participan durante la gesti\u00f3n del an\u00e1lisis de riesgos.</p> <p></p> <p>Elementos que participan durante la gesti\u00f3n del an\u00e1lisis de riesgos.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Se tendr\u00e1 que establecer un nivel de riesgo aceptable\\, que ser\u00e1 el  umbral  que determina los riesgos que deben ser tratados y los riesgos que son asumibles.</p> <p>Para cada uno de los riesgos se tendr\u00e1 que definir una de estrategias principales:</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-estrategia-de-la-empresa","title":"PDS. Estrategia de la empresa","text":"<p>Esto implica  considerar los proyectos en curso y futuros\\, cambios\\, reorganizaciones \\, etc.</p> <p>Tambi\u00e9n es importante t ener en cuenta si la organizaci\u00f3n opta por una estrategia de centralizaci\u00f3n de servicios\\, por la externalizaci\u00f3n de los servicios TIC \\, si forma parte de un grupo empresarial mayor o si va a iniciar la actividad en alg\u00fan sector distinto del actual que pueda generar requisitos legales adicionales.</p> <p>Esta fase es fundamental para implantar medidas de seguridad acorde a la naturaleza de nuestra organizaci\u00f3n.</p> <p>Alinear estrategia de seguridad\\, estrategia TIC y __  __estrategia  __ general del negocio.__</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-definir-proyectos-e-iniciativas","title":"PDS. Definir proyectos e iniciativas","text":"<p>A partir de la informaci\u00f3n obtenida hasta el momento debemos definir las acciones e iniciativas.</p> <p>Los \u00e1mbitos tratados son distintos\\, por tanto las iniciativas ser\u00e1n diversas</p> <p>Definir iniciativas  dirigidas a mejorar los trabajos actuales para que contemplen los marcos normativos y regulatorios.</p> <p>Conjunto de  acciones relacionadas con los controles t\u00e9cnicos f\u00edsicos  cuya  ausencia o insuficiencia hemos detectado</p> <p>Definir  la  estrategia  a seguir as\u00ed como los proyectos m\u00e1s adecuados para  gestionar los riesgos  por encima del riesgo aceptable.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Es clave tener en cuenta la estrategia de la empresa a la hora de indicar las acciones a llevar a cabo.</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-clasificar-y-priorizar-los-proyectos","title":"PDS. Clasificar y priorizar los proyectos","text":"<p>Clasificar las iniciativas\\, por ejemplo en base al criterio de origen de las mismas:</p> <p>Derivadas de la evaluaci\u00f3n del cumplimiento normativo y regulatorio</p> <p>an\u00e1lisis t\u00e9cnico</p> <p>an\u00e1lisis de riesgos</p> <p>El tipo de acci\u00f3n</p> <p>t\u00e9cnica</p> <p>organizativa</p> <p>regulatoria</p> <p>Tambi\u00e9n en  base al esfuerzo y coste temporal : proyectos a corto\\, medio y largo plazo.</p> <p>Tambi\u00e9n usar regla parto 20/80\\, para con poco esfuerzo producir mejoras sustanciales:  quick win .</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-aprobacion-por-la-direccion","title":"PDS. Aprobaci\u00f3n por la direcci\u00f3n","text":"<p>Una vez se tenga un  borrador \\, debe ser  revisado y aprobado por la direcci\u00f3n .</p> <p>Una vez  aprobada \\, debe  trasladarse a todos los empleados .</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-puesta-en-marcha","title":"PDS. Puesta en marcha","text":"<p>Implementar la metodolog\u00eda de proyectos para  llevar a cabo el plan .</p> <p>Realizar una __ presentaci\u00f3n general del proyecto__  a las personas implicadas.</p> <p>Asignar los responsables/coordinadores  de los proyectos.</p> <p>Establecer la  periodicidad con la que se debe llevar a cabo el seguimiento . Si cambia la estrategia se tendr\u00e1 que revisar el plan para comprobar si sigue siendo v\u00e1lido.</p> <p>Conforme se vayan alcanzando los hitos previstos\\,  confirmar  que las  deficiencias  encontradas en las auditor\u00edas y gesti\u00f3n de  riesgos  han sido  subsanadas .</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/","title":"UD 1 - 1.2.2 An\u00e1lisis de riesgos","text":"","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#122-analisis-de-riesgos","title":"1.2.2. An\u00e1lisis de riesgos","text":"","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>El an\u00e1lisis de riesgos es un proceso que permite identificar, evaluar y priorizar los riesgos que afectan a una organizaci\u00f3n. Este proceso es fundamental para la gesti\u00f3n de la seguridad de la informaci\u00f3n y la ciberseguridad. A trav\u00e9s del an\u00e1lisis de riesgos, las organizaciones pueden identificar los activos m\u00e1s valiosos, las amenazas a las que est\u00e1n expuestos y las vulnerabilidades que pueden ser explotadas por los atacantes. Con esta informaci\u00f3n, las organizaciones pueden tomar decisiones informadas sobre c\u00f3mo mitigar los riesgos y proteger sus activos.</p> <p></p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#2-analisis-de-riesgos-en-el-pds","title":"2. An\u00e1lisis de riesgos en el PDS","text":"<p>Sin duda alguna, si queremos \u00abempezar por el principio\u00bb en materia de ciberseguridad en nuestra empresa, el an\u00e1lisis de riesgos es uno de los trabajos m\u00e1s importantes a la hora de definir proyectos e iniciativas para la mejora de la seguridad de la informaci\u00f3n. Si consideramos que las herramientas tecnol\u00f3gicas y la informaci\u00f3n que manejamos son de gran valor para nuestra organizaci\u00f3n debemos empezar a pensar en poner en pr\u00e1ctica un Plan Director de Seguridad.</p> <p>El Plan Director de Seguridad (PDS) se puede simplificar como la definici\u00f3n y priorizaci\u00f3n de un conjunto de proyectos en materia de seguridad de la informaci\u00f3n, dirigido a reducir los riesgos a los que est\u00e1 expuesta la organizaci\u00f3n hasta unos niveles aceptables a partir de un an\u00e1lisis de la situaci\u00f3n inicial. Llevar a cabo un buen an\u00e1lisis nos permitir\u00e1 centrar nuestro foco de atenci\u00f3n en los riesgos asociados a los sistemas, procesos y elementos dentro del alcance del PDS. De esta forma mitigaremos la posibilidad de tener alg\u00fan tipo de incidente de ciberseguridad. Por otra parte, tambi\u00e9n podemos obtener beneficios si realizamos un an\u00e1lisis de riesgos de forma aislada en lugar de llevarlo a cabo dentro de un contexto mayor como es el del desarrollo de un PDS.</p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#3-fases-del-analisis-de-riesgos","title":"3. Fases del an\u00e1lisis de riesgos","text":"<p>A continuaci\u00f3n veremos de forma sencilla las principales tareas del an\u00e1lisis de riesgos, aportando recomendaciones pr\u00e1cticas sobre c\u00f3mo llevarlo a cabo, y considerando algunas particularidades a tener en cuenta para que aporte el m\u00e1ximo valor al PDS. Cabe se\u00f1alar que las fases o etapas que componen un an\u00e1lisis de riesgos dependen de la metodolog\u00eda escogida. En el caso que nos ocupa, hemos seleccionado un conjunto de fases que son comunes en la mayor parte de las metodolog\u00edas para el an\u00e1lisis de riesgos.</p> <p></p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#31-fase-1-definir-el-alcance","title":"3.1. Fase 1. Definir el alcance","text":"<p>El primer paso a la hora de llevar a cabo el an\u00e1lisis de riesgos, es establecer el alcance del estudio. Vamos a considerar que este an\u00e1lisis de riesgos forma parte del Plan Director de Seguridad. Por lo tanto, recomendamos que el an\u00e1lisis de riesgos cubra la totalidad del alcance del PDS, d\u00f3nde se han seleccionado las \u00e1reas estrat\u00e9gicas sobre las que mejorar la seguridad. Por otra parte, tambi\u00e9n es posible definir un alcance m\u00e1s limitado atendiendo a departamentos, procesos o sistemas. Por ejemplo, an\u00e1lisis de riesgos sobre los procesos del departamento Administraci\u00f3n, an\u00e1lisis de riesgos sobre los procesos de producci\u00f3n y gesti\u00f3n de almac\u00e9n o an\u00e1lisis de riesgos sobre los sistemas TIC relacionados con la p\u00e1gina web de la empresa, etc. En este caso pr\u00e1ctico consideramos que el alcance escogido para el an\u00e1lisis de riesgos es \u201cLos servicios y sistemas del Departamento Inform\u00e1tica\u201d.</p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#32-fase-2-identificar-los-activos","title":"3.2. Fase 2. Identificar los activos","text":"<p>Una vez definido el alcance, debemos identificar los activos m\u00e1s importantes que guardan relaci\u00f3n con el departamento, proceso, o sistema objeto del estudio. Para mantener un inventario de activos sencillo puede ser suficiente con hacer uso de una hoja de c\u00e1lculo o tabla como la que se muestra a continuaci\u00f3n a modo de ejemplo:</p> <p></p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#33-fase-3-identificar-seleccionar-las-amenazas","title":"3.3. Fase 3. Identificar / seleccionar las amenazas","text":"<p>Habiendo identificado los principales activos, el siguiente paso consiste en identificar las amenazas a las que estos est\u00e1n expuestos. Tal y como imaginamos, el conjunto de amenazas es amplio y diverso por lo que debemos hacer un esfuerzo en mantener un enfoque pr\u00e1ctico y aplicado. Por ejemplo, si nuestra intenci\u00f3n es evaluar el riesgo que corremos frente a la destrucci\u00f3n de nuestro servidor de ficheros, es conveniente, considerar las aver\u00edas del servidor, la posibilidad de da\u00f1os por agua (rotura de una ca\u00f1er\u00eda) o los da\u00f1os por fuego, en lugar de plantearnos el riesgo de que el CPD sea destruido por un meteorito.</p> <p>A la hora de identificar las amenazas, puede ser \u00fatil tomar como punto de partida el cat\u00e1logo de amenazas que incluye la metodolog\u00eda MAGERIT v3.</p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#34-fase-4-identificar-vulnerabilidades-y-salvaguardas","title":"3.4. Fase 4. Identificar vulnerabilidades y salvaguardas","text":"<p>La siguiente fase consiste en estudiar las caracter\u00edsticas de nuestros activos para identificar puntos d\u00e9biles o vulnerabilidades. Por ejemplo, una posible vulnerabilidad puede ser identificar un conjunto de ordenadores o servidores cuyo sistemas antivirus no est\u00e1n actualizados o una serie de activos para los que no existe soporte ni mantenimiento por parte del fabricante. Posteriormente, a la hora de evaluar el riesgo aplicaremos penalizaciones para reflejar las vulnerabilidades identificadas.</p> <p></p> <p>Por otra parte, tambi\u00e9n analizaremos y documentaremos las medidas de seguridad implantadas en nuestra organizaci\u00f3n. Por ejemplo, es posible que hayamos instalado un sistema SAI (Sistema de Alimentaci\u00f3n Ininterrumpida) o un grupo electr\u00f3geno para abastecer de electricidad a los equipos del CPD. Ambas medidas de seguridad (tambi\u00e9n conocidas como salvaguardas) contribuyen a reducir el riesgo de las amenazas relacionadas con el corte de suministro el\u00e9ctrico.</p> <p>Estas consideraciones (vulnerabilidades y salvaguardas) debemos tenerlas en cuenta cuando vayamos a estimar la probabilidad y el impacto como veremos en la siguiente fase.</p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#35-fase-5-evaluar-el-riesgo","title":"3.5.  Fase 5. Evaluar el riesgo","text":"<p>Llegado a este punto disponemos de los siguientes elementos:</p> <ul> <li>Inventario de activos.   </li> <li>Conjunto de amenazas a las que est\u00e1 expuesta cada activo.   </li> <li>Conjunto de vulnerabilidades asociadas a cada activo (si corresponde).    </li> <li>Conjunto de medidas de seguridad implantadas.   </li> </ul> <p>Con esta informaci\u00f3n, nos encontramos en condiciones de calcular el riesgo. Para cada par activo-amenaza, estimaremos la probabilidad de que la amenaza se materialice y el impacto sobre el negocio que esto producir\u00eda. El c\u00e1lculo de riesgo se puede realizar usando tanto criterios cuantitativos como cualitativos. Pero para entenderlo mejor, veremos a modo de ejemplo las tablas para estimar los factores probabilidad e impacto.</p> <p>Tabla para el c\u00e1lculo de la probabilidad</p> <p></p> <p>Tabla para el c\u00e1lculo del impacto</p> <p></p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#calculo-del-riesgo","title":"C\u00e1lculo del riesgo","text":"<p>A la hora de calcular el riesgo, si hemos optado por hacer el an\u00e1lisis cuantitativo, calcularemos multiplicando los factores probabilidad e impacto:</p> <p>RIESGO = PROBABILIDAD x IMPACTO.</p> <p>Si por el contrario hemos optado por el an\u00e1lisis cualitativo, haremos uso de una matriz de riesgo como la que se muestra a continuaci\u00f3n:</p> <p></p> <p>Tal y como indic\u00e1bamos en el apartado anterior, cuando vayamos a estimar la probabilidad y el impacto debemos tener en cuenta las vulnerabilidades y salvaguardas existentes. Por ejemplo, la ca\u00edda del servidor principal podr\u00eda tener un impacto alto para el negocio. Sin embargo, si existe una soluci\u00f3n de alta disponibilidad (Ej. Servidores redundados), podemos considerar que el impacto ser\u00e1 medio ya que estas medidas de seguridad har\u00e1n que los procesos de negocio no se vean gravemente afectados por la ca\u00edda del servidor. Si por el contrario hemos identificado vulnerabilidades asociadas al activo, aplicaremos una penalizaci\u00f3n a la hora de estimar el impacto. Por ejemplo, si los equipos de climatizaci\u00f3n del CPD no han recibido el mantenimiento recomendado por el fabricante, incrementaremos el impacto de amenazas como \u201ccondiciones ambientales inadecuadas\u201d o \u201cmalfuncionamiento de los equipos debido a altas temperaturas\u201d.</p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#36-fase-6-tratar-el-riesgo","title":"3.6. Fase 6. Tratar el riesgo","text":"<p>Una vez calculado el riesgo, debemos tratar aquellos riesgos que superen un l\u00edmite que nosotros mismos hayamos establecido. Por ejemplo, trataremos aquellos riesgos cuyo valor sea superior a \u201c4\u201d o superior a \u201cMedio\u201d en caso de que hayamos hecho el c\u00e1lculo en t\u00e9rminos cualitativos. A la hora de tratar el riesgo, existen cuatro estrategias principales:</p> <ul> <li>Transferir el riesgo a un tercero. Por ejemplo, contratando un seguro que cubra los da\u00f1os a terceros ocasionados por fugas de informaci\u00f3n.   </li> <li>Eliminar el riesgo. Por ejemplo, eliminando un proceso o sistema que est\u00e1 sujeto a un riesgo elevado. En el caso pr\u00e1ctico que hemos expuesto, podr\u00edamos eliminar la wifi de cortes\u00eda para dar servicio a los clientes si no es estrictamente necesario.    </li> <li>Asumir el riesgo, siempre justificadamente. Por ejemplo, el coste de instalar un grupo electr\u00f3geno puede ser demasiado alto y por tanto, la organizaci\u00f3n puede optar por asumir.   </li> <li>Implantar medidas para mitigarlo. Por ejemplo, contratando un acceso a internet de respaldo para poder acceder a los servicios en la nube en caso de que la l\u00ednea principal haya ca\u00eddo.   </li> </ul> <p>Por \u00faltimo, cabe se\u00f1alar que como realizamos este an\u00e1lisis de riesgos en el contexto de un PDS, las acciones e iniciativas para tratar los riesgos pasar\u00e1n a formar parte del mismo. Por lo tanto, deberemos clasificarlas y priorizarlas considerando el resto de proyectos que forman parte del PDS. Asimismo, tal y como indic\u00e1bamos en la introducci\u00f3n, llevar a cabo un an\u00e1lisis de riesgos nos proporciona informaci\u00f3n de gran valor y contribuye en gran medida a mejorar la seguridad de nuestra organizaci\u00f3n. Dada esta situaci\u00f3n, es muy recomendable llevar a cabo este tipo de proyectos ya bien sea de forma aislada o dentro del contexto de un proyecto mayor como es el caso del Plan Director de Seguridad.</p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#4-conclusiones","title":"4. Conclusiones","text":"<p>El an\u00e1lisis de riesgos es un proceso fundamental para la gesti\u00f3n de la seguridad de la informaci\u00f3n y la ciberseguridad. A trav\u00e9s del an\u00e1lisis de riesgos, las organizaciones pueden identificar los activos m\u00e1s valiosos, las amenazas a las que est\u00e1n expuestas y las vulnerabilidades que pueden ser explotadas por los atacantes. Con esta informaci\u00f3n, las organizaciones pueden tomar decisiones informadas sobre c\u00f3mo mitigar los riesgos y proteger sus activos. Por tanto, es fundamental que las organizaciones realicen an\u00e1lisis de riesgos de forma regular y sistem\u00e1tica para garantizar la seguridad de la informaci\u00f3n y la ciberseguridad.</p>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.2.2.-AnalisiDeRiesgos/#fuentes","title":"Fuentes","text":"<ul> <li>https://www.incibe.es/empresas/blog/analisis-riesgos-pasos-sencillo</li> </ul>","tags":["incidentes","riesgos"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/","title":"UD 1 - 1.3.1 Normativa de protecci\u00f3n del puesto de trabajo","text":"","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#131-normativa-de-proteccion-del-puesto-de-trabajo","title":"1.3.1. Normativa de protecci\u00f3n del puesto de trabajo","text":"<p>El puesto de usuario es el lugar donde se realiza el trabajo diario con los sistemas de informaci\u00f3n. Es el lugar donde se almacena la informaci\u00f3n y se accede a los sistemas de informaci\u00f3n. Por tanto, es un lugar cr\u00edtico en la seguridad de la informaci\u00f3n.</p> <p> </p> Puesto de trabajo","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#1-politicas-en-el-puesto-de-trabajo","title":"1. Pol\u00edticas en el puesto de trabajo","text":"<p>Ya que el puesto de trabajo es el lugar donde se almacena y se accede a la informaci\u00f3n, es un lugar cr\u00edtico en la seguridad de la informaci\u00f3n. Por tanto, es necesario establecer una normativa de protecci\u00f3n del puesto de trabajo. Haremos una introducci\u00f3n a lo que es un puesto de trabajo y a la importancia de establecer una normativa de protecci\u00f3n del puesto de trabajo.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#11-puesto-de-trabajo","title":"1.1 Puesto de trabajo","text":"<p>El puesto de trabajo del usuario es el lugar desde el cual un empleado com\u00fan realiza su trabajo diario, accediendo a sistemas, aplicaciones y datos que necesita para cumplir con sus tareas. Este puesto puede ser f\u00edsico (una computadora de escritorio en la oficina) o remoto (una laptop desde casa o un caf\u00e9). El \u201cusuario\u201d suele ser un empleado no especializado en tecnolog\u00eda, que accede a los recursos de la empresa principalmente para realizar su funci\u00f3n laboral, sin responsabilidad directa en el manejo de la infraestructura o la seguridad de TI.</p> <p>Ejemplo de puesto de usuario: Una asistente administrativa que trabaja en las instalaciones de la empresa, desde una computadora de escritorio, accediendo al sistema de gesti\u00f3n de documentos de la empresa, el correo electr\u00f3nico y una plataforma de mensajer\u00eda interna para coordinarse con su equipo.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#111-elementos-de-un-puesto-de-trabajo","title":"1.1.1 Elementos de un puesto de trabajo","text":"<p>En el entorno de seguridad inform\u00e1tica, el puesto de trabajo es mucho m\u00e1s que el lugar f\u00edsico donde una persona se sienta a trabajar. Representa el conjunto de elementos que un empleado utiliza para realizar sus tareas. Algunos son: dispositivos, software, acceso a redes, instalaciones f\u00edsicas, acceso a datos y el propio empleado.</p> <p>Algunos ejemplos de un puesto de trabajo pueden incluir:</p> <ul> <li>Dispositivos hardware: Computadoras de escritorio, laptops, tabletas y tel\u00e9fonos inteligentes que usa el empleado.</li> <li>Software: Aplicaciones necesarias para realizar tareas, desde procesadores de texto hasta herramientas especializadas.</li> <li>Comunicaci\u00f3n y acceso a la red: Conexiones a internet, VPNs (Redes Privadas Virtuales) para trabajar de forma remota, y acceso a servidores internos de la organizaci\u00f3n.</li> <li>Instalaciones f\u00edsicas: Dependenc\u00edas f\u00edsicas de la empresa, como oficinas, salas de reuniones o \u00e1reas de trabajo compartidas.</li> <li>Acceso a datos: Permisos para ver, editar o compartir documentos, bases de datos o aplicaciones internas que contienen informaci\u00f3n valiosa o sensible.</li> <li>Personal: El propio empleado, sus h\u00e1bitos de trabajo y su conocimiento de las pol\u00edticas de seguridad.</li> </ul> <p>Cada uno de estos elementos, si no se protege correctamente, puede ser una v\u00eda de ataque o de fuga de informaci\u00f3n, por lo que la protecci\u00f3n del puesto de trabajo es esencial para reducir riesgos de seguridad.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#12-que-es-una-normativa-y-por-que-es-importante","title":"1.2. \u00bfQu\u00e9 es una normativa y por qu\u00e9 es importante?","text":"<p>Una normativa en lo referente al puesto de trabajo, es un conjunto de reglas y requisitos espec\u00edficos que deben cumplirse para garantizar un ambiente de trabajo seguro. En el caso de la protecci\u00f3n del puesto de trabajo, estas reglas indican c\u00f3mo debe gestionarse y asegurarse cada aspecto del puesto para proteger tanto la informaci\u00f3n como los sistemas de la empresa. La normativa de protecci\u00f3n del puesto de trabajo tiene en cuenta las amenazas y posibles vulnerabilidades para definir pautas que protejan los elementos comentados anteriormente, ayudando a minimizar riesgos y mejorar la seguridad general de la organizaci\u00f3n.</p> <p>Por ejemplo, una normativa de protecci\u00f3n del puesto de trabajo incluir\u00e1 mayoritariamente medidas preventivas, dejando las de monitorizaci\u00f3n y correctivas para otras fases del proceso de seguridad. Algunos ejemplos de medidas que pueden incluirse en una normativa de protecci\u00f3n del puesto de trabajo son:</p> <ul> <li>Restricciones de acceso: Especificar qui\u00e9n puede acceder a qu\u00e9 tipo de informaci\u00f3n o sistema.</li> <li>Medidas de seguridad f\u00edsica y digital: Uso de cerraduras f\u00edsicas en escritorios, contrase\u00f1as complejas, y autenticaci\u00f3n multifactor (MFA).</li> <li>Procedimientos de actualizaci\u00f3n y parches: Asegurarse de que todo el software est\u00e9 al d\u00eda con las \u00faltimas actualizaciones de seguridad.</li> <li>Buenas pr\u00e1cticas de uso diario: Como bloquear la pantalla al ausentarse, evitar conexiones a redes p\u00fablicas no seguras, y mantener la informaci\u00f3n confidencial fuera del alcance de terceros.</li> </ul>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#121-por-que-necesitamos-una-normativa-de-proteccion-del-puesto-de-trabajo","title":"1.2.1. \u00bfPor qu\u00e9 necesitamos una normativa de protecci\u00f3n del puesto de trabajo?","text":"<p>En cualquier organizaci\u00f3n, los empleados interact\u00faan con datos y sistemas sensibles a diario. Si el puesto de trabajo no est\u00e1 protegido adecuadamente, podr\u00eda convertirse en un punto de entrada para ataques cibern\u00e9ticos o en un riesgo de fuga de informaci\u00f3n. La normativa establece las reglas que todos los empleados deben seguir para proteger estos recursos y reducir riesgos, no solo para proteger la informaci\u00f3n de la organizaci\u00f3n, sino tambi\u00e9n la privacidad de los empleados y clientes.</p> <p>Al implementar una normativa de protecci\u00f3n del puesto de trabajo, la organizaci\u00f3n busca:</p> <ol> <li>Establecer un est\u00e1ndar de seguridad que todos los empleados deben cumplir.</li> <li>Proteger los datos y la infraestructura tecnol\u00f3gica frente a amenazas externas e internas.</li> <li>Asegurar la continuidad del negocio al reducir la probabilidad de incidentes de seguridad que puedan interrumpir las operaciones.</li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#13-politicas-normativas-y-procedimientos","title":"1.3. Pol\u00edticas, normativas y procedimientos","text":"<p>Relacionados con la normativa de protecci\u00f3n del puesto de trabajo, es importante entender la diferencia entre pol\u00edticas, normativas y procedimientos, ya que cada uno juega un papel distinto en la estructura de seguridad de una organizaci\u00f3n.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#131-politica-declaracion-de-intenciones","title":"1.3.1. Pol\u00edtica (Declaraci\u00f3n de Intenciones)","text":"<p>Una pol\u00edtica es una declaraci\u00f3n general que define la intenci\u00f3n y los principios de una organizaci\u00f3n respecto a un tema espec\u00edfico. En seguridad, una pol\u00edtica marca el rumbo y establece el marco de referencia que gu\u00eda las acciones para proteger los activos.</p> <ul> <li>Ejemplo: Imagina que una empresa crea una pol\u00edtica de seguridad de la informaci\u00f3n que dice: \"La empresa XYZ se compromete a proteger la confidencialidad, integridad y disponibilidad de toda la informaci\u00f3n almacenada y procesada en sus sistemas, de acuerdo con los principios de seguridad y las normativas legales\".</li> <li>En la pr\u00e1ctica: Esta pol\u00edtica no da detalles espec\u00edficos ni instrucciones concretas sobre c\u00f3mo proteger la informaci\u00f3n, sino que establece el compromiso general de la empresa hacia la seguridad.</li> <li>Importancia de la pol\u00edtica: Sirve como \"declaraci\u00f3n de intenciones\" para la organizaci\u00f3n. Define las bases sobre las cuales se desarrollar\u00e1n normativas y procedimientos m\u00e1s detallados.</li> </ul> <p>Por tanto, la pol\u00edtica es la visi\u00f3n o intenci\u00f3n general, como un \"norte\" o l\u00ednea gu\u00eda que orienta las decisiones sobre seguridad.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#132-normativa-que","title":"1.3.2. Normativa (Qu\u00e9)","text":"<p>Una normativa traduce la pol\u00edtica en reglas y requisitos m\u00e1s concretos que deben cumplirse para seguir esa pol\u00edtica. Es decir, establece qu\u00e9 se debe hacer o cumplir para mantener la seguridad, y a veces qui\u00e9n es responsable de llevarlo a cabo.</p> <ul> <li>Ejemplo: Siguiendo la pol\u00edtica de seguridad de la informaci\u00f3n, una normativa espec\u00edfica puede ser la normativa de protecci\u00f3n del puesto de trabajo. Esta normativa podr\u00eda incluir medidas como:<ul> <li>\"Todo empleado debe bloquear su pantalla al ausentarse del escritorio\".   </li> <li>\"Se requiere que todas las contrase\u00f1as de usuario tengan al menos 10 caracteres e incluyan letras, n\u00fameros y s\u00edmbolos\".   </li> <li>\"Los empleados deben realizar un curso b\u00e1sico de seguridad inform\u00e1tica cada seis meses\".   </li> </ul> </li> <li>En la pr\u00e1ctica: La normativa detalla requisitos claros en base a medidas que los empleados y los sistemas deben cumplir. No describe c\u00f3mo hacerlo (ese es el trabajo del procedimiento), sino que define las condiciones que deben cumplirse.</li> <li>Importancia de la normativa: Proporciona una capa de control y direcci\u00f3n m\u00e1s concreta que la pol\u00edtica, ayudando a mantener una estructura de cumplimiento y a reducir riesgos.</li> </ul> <p>Por tanto, la normativa establece medidas espec\u00edficas y requisitos que deben cumplirse para estar alineados con la pol\u00edtica de seguridad.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#133-procedimiento-como","title":"1.3.3. Procedimiento (C\u00f3mo)","text":"<p>Un procedimiento detalla los pasos espec\u00edficos que deben seguirse para cumplir con la normativa y, por ende, con la pol\u00edtica. Responde a la pregunta de c\u00f3mo hacer algo. Los procedimientos suelen ser detallados y pr\u00e1cticos, y pueden incluir capturas de pantalla, ejemplos o listas paso a paso.</p> <ul> <li>Ejemplo: Si la normativa de protecci\u00f3n del puesto de trabajo exige \"bloquear la pantalla al ausentarse\", el procedimiento explicar\u00e1 c\u00f3mo hacerlo en diferentes sistemas operativos:<ul> <li>Windows: \u201cPresiona <code>Win + L</code> para bloquear la pantalla\u201d.   </li> <li>MacOS: \u201cPresiona <code>Control + Command + Q</code> o configura el bloqueo autom\u00e1tico desde Preferencias del Sistema\u201d.   </li> <li>Linux: \u201cConfigura el bloqueo de pantalla en las preferencias o presiona <code>Super + L</code>\u201d.   </li> </ul> </li> <li>En la pr\u00e1ctica: Este procedimiento ofrece las instrucciones detalladas de c\u00f3mo cada usuario puede cumplir con el requisito de la normativa.   </li> <li>Importancia del procedimiento: Los procedimientos eliminan la ambig\u00fcedad sobre c\u00f3mo realizar una tarea espec\u00edfica. Son muy \u00fatiles para nuevos empleados, para procesos de auditor\u00eda y para asegurar que todos los empleados tengan claridad sobre las acciones que deben seguir.</li> </ul> <p>Por lo tanto, los procedimientos son gu\u00edas pr\u00e1cticas y detalladas sobre c\u00f3mo realizar acciones espec\u00edficas para cumplir con la normativa.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#134-medidas-de-seguridad","title":"1.3.4. Medidas de Seguridad","text":"<p>Para implementar una protecci\u00f3n efectiva en cualquier organizaci\u00f3n, es importante entender c\u00f3mo se clasifican las medidas de seguridad en funci\u00f3n de su nivel de complejidad y su alcance. Este enfoque permite aplicar controles de manera eficiente, adapt\u00e1ndolos a las necesidades espec\u00edficas de cada \u00e1rea y personal.</p> <p>Un enfoque equilibrado y bien estructurado, donde medidas b\u00e1sicas y avanzadas se combinen a trav\u00e9s de procesos, tecnolog\u00eda y personas, contribuye a la creaci\u00f3n de un entorno de trabajo seguro y eficiente.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#niveles-de-complejidad-de-las-medidas-de-seguridad","title":"Niveles de Complejidad de las Medidas de Seguridad","text":"<p>Las medidas de seguridad pueden clasificarse en dos niveles de complejidad, que determinan el esfuerzo y los recursos necesarios para su implementaci\u00f3n:</p> <ol> <li> <p>B\u00e1sico (B): Este nivel es asequible y relativamente sencillo de implementar.     </p> <ul> <li>Las medidas de nivel b\u00e1sico requieren pocos recursos y suelen aplicarse mediante funcionalidades ya incorporadas en herramientas y aplicaciones comunes.       </li> <li>Son ideales para proteger datos y activos sin necesidad de configuraciones avanzadas o personal altamente especializado.      </li> </ul> <p>Ejemplo de medida b\u00e1sica (B):        - Bloqueo de pantalla: Configurar el bloqueo autom\u00e1tico de los dispositivos tras un breve periodo de inactividad. Esta funcionalidad est\u00e1 incluida en la mayor\u00eda de sistemas operativos (Windows, MacOS) y no requiere un esfuerzo adicional considerable.        - Pol\u00edtica de escritorio limpio: Consiste en pedir a los empleados que mantengan sus escritorios libres de documentos o dispositivos con informaci\u00f3n sensible cuando no est\u00e1n presentes. Esta medida es f\u00e1cil de implementar y solo requiere concienciaci\u00f3n del personal.      </p> </li> <li> <p>Avanzado (A): Este nivel requiere una inversi\u00f3n significativa en t\u00e9rminos de recursos, esfuerzo y conocimientos t\u00e9cnicos.</p> <ul> <li>Las medidas avanzadas suelen involucrar configuraciones complejas y, a veces, herramientas adicionales de seguridad. Tambi\u00e9n pueden incluir mecanismos de recuperaci\u00f3n ante fallos, como sistemas de respaldo y restauraci\u00f3n.    </li> <li>Son esenciales en \u00e1reas de alto riesgo o donde la protecci\u00f3n de datos cr\u00edticos es una prioridad.    </li> </ul> <p>Ejemplo de medida avanzada (A):        - Cifrado de disco completo: En sistemas que almacenan datos confidenciales, se configura el cifrado de disco completo (como BitLocker en Windows o FileVault en MacOS) para proteger la informaci\u00f3n ante un posible robo o p\u00e9rdida del dispositivo.        - Pol\u00edtica de copias de seguridad: Aplicar una pol\u00edtica de copias de seguridad automatizada, que incluya la configuraci\u00f3n de respaldos regulares y la verificaci\u00f3n de la integridad de las copias de seguridad. Esto implica conocimientos t\u00e9cnicos y una configuraci\u00f3n detallada.     </p> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#alcance-de-las-medidas-de-seguridad","title":"Alcance de las Medidas de Seguridad","text":"<p>Las medidas de seguridad tambi\u00e9n pueden clasificarse seg\u00fan el alcance o el tipo de destinatario al que se aplican, en tres grandes categor\u00edas: Procesos (PRO), Tecnolog\u00eda (TEC) y Personas (PER).</p> <ol> <li> <p>Procesos (PRO): Las medidas de procesos son aquellas que aplican principalmente a la direcci\u00f3n o al personal de gesti\u00f3n. Estas medidas aseguran que se establezcan procedimientos y pol\u00edticas claras para proteger la informaci\u00f3n en toda la organizaci\u00f3n.</p> <p>Ejemplo de medida de proceso (PRO):        - Procedimiento de verificaci\u00f3n de pagos: Antes de aprobar el pago de una factura, el equipo de gesti\u00f3n debe validar los datos del proveedor. Esta medida implica la creaci\u00f3n de un proceso seguro que controle el flujo de pagos para evitar fraudes.        - Revisi\u00f3n de permisos de acceso: La direcci\u00f3n revisa peri\u00f3dicamente los permisos de acceso del personal para asegurarse de que cada empleado tenga solo los permisos necesarios para su rol, limitando as\u00ed el riesgo de acceso no autorizado a informaci\u00f3n sensible.    </p> </li> <li> <p>Tecnolog\u00eda (TEC): Las medidas tecnol\u00f3gicas est\u00e1n dirigidas al personal t\u00e9cnico y requieren conocimientos avanzados. Estas medidas implican el uso de herramientas, configuraciones especializadas o sistemas de seguridad que protegen la infraestructura y los datos.</p> <p>Ejemplo de medida de tecnolog\u00eda (TEC):        - Implementaci\u00f3n de un firewall: El equipo de TI instala y configura un firewall para controlar el tr\u00e1fico de red y evitar accesos no autorizados a la red corporativa. Esto requiere conocimientos t\u00e9cnicos para su configuraci\u00f3n y monitoreo.        - Pol\u00edtica de copias de seguridad: Se establece un sistema de copias de seguridad peri\u00f3dicas, que el equipo de TI gestiona y verifica para asegurar la recuperaci\u00f3n de datos en caso de fallos o incidentes.        3. Personas (PER): Estas medidas est\u00e1n orientadas a todo el personal de la organizaci\u00f3n y suelen ser sencillas de aplicar. A trav\u00e9s de estas, los empleados se conciencian sobre buenas pr\u00e1cticas de seguridad y sobre c\u00f3mo contribuir a la protecci\u00f3n de la informaci\u00f3n.</p> <p>Ejemplo de medida para personas (PER):        - Pol\u00edtica de escritorio limpio: Los empleados deben asegurarse de no dejar documentos o dispositivos con informaci\u00f3n sensible desatendidos en sus escritorios al finalizar su jornada laboral o al ausentarse.        - Capacitaci\u00f3n en seguridad de la informaci\u00f3n: Todos los empleados reciben capacitaci\u00f3n anual sobre buenas pr\u00e1cticas de seguridad y c\u00f3mo identificar amenazas comunes, como el phishing.     </p> </li> </ol> <p>Por lo general, las medidas orientadas a las personas (PER) est\u00e1n complementadas por medidas de procesos (PRO) y tecnolog\u00eda (TEC), asegurando que se implemente una protecci\u00f3n completa y eficaz en toda la organizaci\u00f3n. Por ejemplo, una capacitaci\u00f3n sobre ciberseguridad (PER) puede ir acompa\u00f1ada de un procedimiento de auditor\u00eda de accesos (PRO) y el uso de autenticaci\u00f3n multifactor (TEC) en sistemas cr\u00edticos.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#135-ejemplo-completo","title":"1.3.5. Ejemplo Completo:","text":"<p>Cada nivel aporta un grado de especificidad creciente y va dirigido a distintos aspectos de la estructura organizativa de seguridad.</p> <ul> <li>Pol\u00edtica de Seguridad de la Informaci\u00f3n: \"XYZ se compromete a proteger la informaci\u00f3n de acuerdo con altos est\u00e1ndares de seguridad\".</li> <li>Normativa de Protecci\u00f3n del Puesto de Trabajo: \"Todos los empleados deben bloquear sus equipos al ausentarse\".</li> <li>Procedimiento de Bloqueo de Pantalla: \"Para bloquear la pantalla, usa <code>Win + L</code> en Windows, <code>Control + Command + Q</code> en MacOS, y <code>Super + L</code> en Linux\".</li> </ul>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#14-estandares-a-aplicar","title":"1.4. Est\u00e1ndares a aplicar","text":"<p>Cuando hablamos de normativas de protecci\u00f3n del puesto de trabajo, es importante tener en cuenta que existen diferentes est\u00e1ndares y regulaciones que pueden influir en la definici\u00f3n de estas normativas, por tanto, las compa\u00f1\u00edas deben conocerlas. Algunas de las normativas m\u00e1s comunes en el \u00e1mbito de la seguridad de la informaci\u00f3n son:</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#141-isoiec-27001-estandarizacion-en-la-seguridad-del-puesto-de-trabajo","title":"1.4.1. ISO/IEC 27001: Estandarizaci\u00f3n en la Seguridad del Puesto de Trabajo","text":"<p>La ISO/IEC 27001 es el est\u00e1ndar internacional para la gesti\u00f3n de la seguridad de la informaci\u00f3n, aplicable a todos los aspectos de la seguridad en la organizaci\u00f3n, incluidos los puestos de trabajo.</p> <p>\u00bfC\u00f3mo ayuda con la pol\u00edtica del puesto de trabajo?</p> <ul> <li>Estructura de gesti\u00f3n de la seguridad: ISO/IEC 27001 proporciona una gu\u00eda para crear un Sistema de Gesti\u00f3n de Seguridad de la Informaci\u00f3n (SGSI), que asegura la protecci\u00f3n de todos los elementos del puesto de trabajo (dispositivos, software, accesos) dentro de un marco estandarizado.</li> <li>Control de acceso y uso seguro: Dentro de su Anexo A, el est\u00e1ndar incluye controles como la seguridad en las estaciones de trabajo y el control de accesos, lo que es fundamental para definir c\u00f3mo los empleados deben proteger sus dispositivos y datos.</li> <li>Evaluaci\u00f3n y mitigaci\u00f3n de riesgos: Este est\u00e1ndar promueve el an\u00e1lisis y gesti\u00f3n de riesgos espec\u00edficos de cada puesto, permitiendo identificar y tratar amenazas en el puesto de trabajo, como el uso no autorizado de dispositivos, la conexi\u00f3n en redes inseguras o el acceso a informaci\u00f3n sensible.</li> </ul> <p>Ejemplo pr\u00e1ctico: Siguiendo ISO 27001, puedes establecer una pol\u00edtica que obligue a los usuarios a bloquear sus pantallas al dejar su escritorio o que requiera autenticaci\u00f3n multifactor en los dispositivos de trabajo.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#142-gdpr-general-data-protection-regulation-proteccion-de-datos-personales-en-el-puesto-de-trabajo","title":"1.4.2. GDPR (General Data Protection Regulation): Protecci\u00f3n de Datos Personales en el Puesto de Trabajo","text":"<p>El GDPR es la regulaci\u00f3n de protecci\u00f3n de datos de la Uni\u00f3n Europea, centrada en proteger la privacidad y los datos personales de los ciudadanos.</p> <p>\u00bfC\u00f3mo ayuda con la pol\u00edtica del puesto de trabajo?</p> <ul> <li>Confidencialidad y seguridad de datos: El GDPR establece que cualquier puesto de trabajo que maneje datos personales debe protegerlos, lo que implica pol\u00edticas para limitar el acceso solo a quienes realmente lo necesitan y medidas de seguridad como el cifrado y el uso de contrase\u00f1as seguras.</li> <li>Seguridad en el acceso y almacenamiento de datos: Exige que la informaci\u00f3n personal se almacene y procese de forma segura, promoviendo pol\u00edticas que regulen c\u00f3mo los empleados deben acceder, compartir y proteger la informaci\u00f3n desde sus puestos.</li> <li>Gesti\u00f3n de incidentes: Incluye requisitos sobre c\u00f3mo notificar y responder a incidentes de seguridad que afecten datos personales, lo cual es esencial en la pol\u00edtica de uso y protecci\u00f3n de los dispositivos de trabajo.</li> </ul> <p>Ejemplo pr\u00e1ctico: Puedes desarrollar pol\u00edticas para asegurar que los empleados manejen los datos personales de forma segura, como el uso obligatorio de conexiones VPN para acceder remotamente a los sistemas de la empresa, cumpliendo as\u00ed con el GDPR.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#143-lopdgdd-ley-organica-de-proteccion-de-datos-y-garantia-de-derechos-digitales-cumplimiento-en-espana-para-el-puesto-de-trabajo","title":"1.4.3. LOPDGDD (Ley Org\u00e1nica de Protecci\u00f3n de Datos y Garant\u00eda de Derechos Digitales): Cumplimiento en Espa\u00f1a para el Puesto de Trabajo","text":"<p>La LOPDGDD es la ley espa\u00f1ola que complementa al GDPR y que regula el tratamiento de los datos personales en Espa\u00f1a, incorporando derechos y regulaciones adicionales.</p> <p>\u00bfC\u00f3mo ayuda con la pol\u00edtica del puesto de trabajo?</p> <ul> <li>Protecci\u00f3n de la privacidad del empleado y cliente: La LOPDGDD establece requisitos para garantizar la privacidad y el manejo seguro de los datos personales tanto de empleados como de clientes, lo cual es crucial para los usuarios en sus puestos de trabajo.</li> <li>Derechos digitales de los empleados: La LOPDGDD tambi\u00e9n incluye derechos espec\u00edficos, como el derecho a la desconexi\u00f3n digital, lo que puede traducirse en pol\u00edticas de horario de acceso y uso de dispositivos de trabajo para respetar el equilibrio laboral y personal.</li> <li>Pol\u00edticas de acceso a datos sensibles: Exige pol\u00edticas claras sobre qui\u00e9n puede acceder a qu\u00e9 tipo de datos personales, lo que se puede aplicar en el puesto de trabajo asegurando que solo quienes tengan autorizaci\u00f3n accedan a informaci\u00f3n confidencial.</li> </ul> <p>Ejemplo pr\u00e1ctico: Con la LOPDGDD, puedes crear pol\u00edticas para limitar el acceso a datos personales a usuarios espec\u00edficos seg\u00fan sus funciones, y tambi\u00e9n definir pol\u00edticas de desconexi\u00f3n digital para proteger los derechos de los empleados.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#2-escenarios-de-riesgos-y-medidas-de-seguridad","title":"2. Escenarios de riesgos y medidas de seguridad","text":"<p>Comprender los elementos clave de un puesto de trabajo, nos ayudan a entender los factores vulnerables de un puesto de trabajo y, por tanto, identificar los escenarios de riesgo y asi dise\u00f1ar normativas en base a medidas de seguridad efectivas.</p> <p>Las medidas de seguridad que se establecen en la normativa de protecci\u00f3n del puesto de trabajo deben ser proporcionales a los riesgos identificados y deben ser claras y f\u00e1ciles de seguir para los empleados. Estas estar\u00e1n formadas por un conjunto de pautas aplicables a los sistemas de la organizaci\u00f3n y de m\u00e9todos utilizados para monitorizar su eficacia en la protecci\u00f3n de los activos y el cumplimiento por parte de los empleados.</p> <p>Las medidas de seguridad se pueden clasificar en:</p> <ul> <li>Preventivas: Aquellas que buscan evitar que ocurran incidentes de seguridad.</li> <li>Monitorizaci\u00f3n: Aquellas que buscan identificar incidentes de seguridad en el momento en que ocurren.</li> <li>Correctivas: Aquellas que buscan corregir los incidentes de seguridad una vez que han ocurrido, y restaurar la operatividad normal de los sistemas.</li> </ul> <p>En el caso de la protecci\u00f3n del puesto de trabajo, las medidas de seguridad preventivas son las m\u00e1s comunes, ya que buscan evitar que los incidentes de seguridad ocurran en primer lugar.</p> <p>A continuaci\u00f3n, desglosaremos estos elementos componentes del puesto de trabajo y mostraremos c\u00f3mo cada uno se relaciona con los distintos escenarios de riesgo y con la necesidad de establecer pol\u00edticas, normativas y procedimientos claros.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#21-dispositivos-de-hardware","title":"2.1 Dispositivos de Hardware","text":"<p>Los dispositivos de hardware son los equipos f\u00edsicos que los empleados utilizan para realizar su trabajo y acceder a los sistemas de la organizaci\u00f3n. Dado que son el punto de acceso principal a la informaci\u00f3n corporativa, representan un componente cr\u00edtico en la seguridad de la informaci\u00f3n y un punto vulnerable si no est\u00e1n adecuadamente protegidos.</p> <p>Elementos incluidos: Computadoras de escritorio, laptops, tabletas, tel\u00e9fonos inteligentes y cualquier otro dispositivo f\u00edsico utilizado en el entorno de trabajo.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#211-escenarios-de-riesgo-asociados","title":"2.1.1 Escenarios de Riesgo Asociados","text":"<ol> <li> <p>P\u00e9rdida o Robo de Dispositivos </p> <ul> <li>Riesgo: La p\u00e9rdida o el robo de un dispositivo f\u00edsico puede exponer datos confidenciales y credenciales de acceso si cae en manos de personas no autorizadas. Esto es especialmente cr\u00edtico si el dispositivo se utiliza fuera de las instalaciones de la empresa y no cuenta con medidas de seguridad avanzadas, como el cifrado.</li> <li>Consecuencias: Una persona no autorizada con acceso f\u00edsico al dispositivo puede recuperar informaci\u00f3n confidencial, acceder a sistemas de la organizaci\u00f3n o modificar datos importantes.</li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger todos los dispositivos de trabajo con medidas de seguridad que garanticen la integridad, confidencialidad y disponibilidad de la informaci\u00f3n almacenada y procesada ante cualquier incidente.    </p> <p>Normativa:    </p> <ul> <li>Todos los dispositivos deben estar protegidos mediante autenticaci\u00f3n segura, como contrase\u00f1as complejas y, cuando sea posible, autenticaci\u00f3n multifactor (MFA).     </li> <li>Los dispositivos deben configurarse para bloquearse autom\u00e1ticamente tras un periodo de inactividad de 5 minutos.     </li> <li>Todo dispositivo de trabajo que contenga datos confidenciales debe contar con cifrado de disco.</li> </ul> <p>Procedimiento:</p> <ul> <li>Activaci\u00f3n del bloqueo autom\u00e1tico: Instrucciones detalladas para configurar el bloqueo autom\u00e1tico en dispositivos con diferentes sistemas operativos, como Windows, MacOS y dispositivos m\u00f3viles.    </li> <li>Configuraci\u00f3n del cifrado de disco: Pasos para activar el cifrado de disco en dispositivos compatibles (Windows BitLocker, MacOS FileVault) y verificar su estado de activaci\u00f3n.     </li> <li>Reporte de p\u00e9rdida o robo de dispositivos: Proceso para notificar al departamento de TI en caso de p\u00e9rdida o robo, incluyendo informaci\u00f3n relevante del dispositivo y las acciones inmediatas que deben seguirse para mitigar el riesgo.    </li> </ul> </li> <li> <p>Acceso No Autorizado </p> <ul> <li>Riesgo: Si un dispositivo queda desbloqueado cuando el usuario se ausenta o si no cuenta con autenticaci\u00f3n robusta, personas no autorizadas pueden acceder a informaci\u00f3n confidencial o realizar acciones no autorizadas.    </li> <li>Consecuencias: Esto podr\u00eda comprometer la confidencialidad y seguridad de la informaci\u00f3n, permitiendo que personas sin autorizaci\u00f3n accedan o manipulen datos en el sistema de la organizaci\u00f3n.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger todos los dispositivos de trabajo con medidas de seguridad que garanticen la integridad, confidencialidad y disponibilidad de la informaci\u00f3n almacenada y procesada ante cualquier incidente.    </p> <p>Normativa:    </p> <ul> <li>Los dispositivos de trabajo deben configurarse para bloquearse autom\u00e1ticamente despu\u00e9s de un breve periodo de inactividad.      </li> <li>Los usuarios deben autenticar su identidad mediante contrase\u00f1as seguras y, siempre que sea posible, activar la autenticaci\u00f3n biom\u00e9trica (como huellas dactilares o reconocimiento facial).    </li> </ul> <p>Procedimiento:     </p> <ul> <li>Establecimiento de contrase\u00f1as seguras: Instrucciones para crear contrase\u00f1as que cumplan con los requisitos de seguridad, como una longitud m\u00ednima y combinaci\u00f3n de caracteres especiales.    </li> <li>Configuraci\u00f3n de autenticaci\u00f3n biom\u00e9trica: Gu\u00eda para activar y utilizar autenticaci\u00f3n biom\u00e9trica en dispositivos compatibles.     </li> <li>Bloqueo manual del dispositivo: Recordatorio para bloquear manualmente el dispositivo cuando el usuario se ausente, con pasos espec\u00edficos sobre c\u00f3mo hacerlo en diferentes sistemas operativos.     </li> </ul> </li> <li> <p>Falta de Cifrado en el Dispositivo</p> <ul> <li>Riesgo: Si el almacenamiento en el dispositivo no est\u00e1 cifrado, los datos pueden ser f\u00e1cilmente extra\u00eddos o manipulados por cualquier persona con acceso f\u00edsico al dispositivo en caso de p\u00e9rdida o robo.     </li> <li>Consecuencias: La informaci\u00f3n almacenada sin cifrado queda expuesta y puede ser le\u00edda o modificada sin autorizaci\u00f3n, lo que aumenta el riesgo de fuga de datos confidenciales.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger todos los dispositivos de trabajo con medidas de seguridad que garanticen la integridad, confidencialidad y disponibilidad de la informaci\u00f3n almacenada y procesada ante cualquier incidente.    </p> <p>Normativa:     </p> <ul> <li>Todos los dispositivos de trabajo que almacenen datos sensibles deben estar cifrados completamente.     </li> <li>No se permite almacenar informaci\u00f3n confidencial en dispositivos que no est\u00e9n cifrados ni en dispositivos personales no autorizados.        </li> </ul> <p>Procedimiento:    </p> <ul> <li>Activaci\u00f3n de cifrado en diferentes plataformas: Instrucciones detalladas para activar el cifrado en dispositivos Windows (BitLocker), MacOS (FileVault) y en dispositivos m\u00f3viles con Android e iOS.        </li> <li>Verificaci\u00f3n del cifrado de disco: Pasos para comprobar que el cifrado est\u00e9 activado correctamente en cada dispositivo.           </li> <li>Reporte de excepciones: Procedimiento para informar al departamento de TI si un empleado detecta que el cifrado no est\u00e1 activado en su dispositivo de trabajo.        </li> </ul> </li> <li> <p>Infecci\u00f3n de Malware o Software Malicioso</p> <ul> <li>Riesgo: Los dispositivos de hardware pueden infectarse con malware o software malicioso si el usuario descarga archivos de fuentes inseguras, visita sitios web maliciosos o utiliza medios externos no verificados, como memorias USB.    </li> <li>Consecuencias: La infecci\u00f3n con malware puede comprometer el dispositivo, capturar informaci\u00f3n confidencial, o incluso propagarse a otros dispositivos dentro de la red corporativa, incrementando los riesgos de seguridad.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger todos los dispositivos de trabajo con medidas de seguridad que garanticen la integridad, confidencialidad y disponibilidad de la informaci\u00f3n almacenada y procesada ante cualquier incidente.    </p> <p>Normativa:      </p> <ul> <li>Todos los dispositivos deben tener un antivirus y firewall activos y actualizados para protecci\u00f3n contra malware.       </li> <li>No se permite la descarga ni instalaci\u00f3n de software que no est\u00e9 previamente autorizado por el departamento de TI.       </li> </ul> <p>Procedimiento:     </p> <ul> <li>Instalaci\u00f3n y actualizaci\u00f3n de antivirus: Pasos para instalar el antivirus aprobado por la organizaci\u00f3n y c\u00f3mo activar las actualizaciones autom\u00e1ticas.     </li> <li>Activaci\u00f3n de firewall: Gu\u00eda para configurar y activar el firewall en sistemas operativos Windows, MacOS y dispositivos m\u00f3viles.     </li> <li>Buenas pr\u00e1cticas de navegaci\u00f3n segura: Pautas para evitar hacer clic en enlaces desconocidos, no descargar archivos de fuentes no verificadas y recomendaciones para identificar correos electr\u00f3nicos sospechosos.      </li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#22-software-y-aplicaciones","title":"2.2 Software y Aplicaciones","text":"<p>El software y las aplicaciones son herramientas esenciales para que los empleados realicen sus tareas diarias. Incluyen desde aplicaciones de oficina hasta herramientas de gesti\u00f3n, comunicaci\u00f3n, y plataformas espec\u00edficas de la organizaci\u00f3n. Debido a que estos programas procesan y almacenan informaci\u00f3n sensible, es fundamental proteger su uso y mantenimiento.</p> <p>Elementos incluidos: Aplicaciones de oficina (procesadores de texto, hojas de c\u00e1lculo), software de gesti\u00f3n (CRM, ERP), plataformas de comunicaci\u00f3n (correo electr\u00f3nico, mensajer\u00eda), navegadores web y herramientas personalizadas.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#221-escenarios-de-riesgo-asociados","title":"2.2.1 Escenarios de Riesgo Asociados","text":"<ol> <li> <p>Descarga o Uso de Software No Autorizado</p> <ul> <li>Riesgo: La instalaci\u00f3n o uso de software no autorizado puede incluir programas maliciosos que comprometan la seguridad del sistema y expongan los datos de la organizaci\u00f3n.    </li> <li>Consecuencias: El uso de software no autorizado aumenta el riesgo de infecciones de malware, p\u00e9rdida de datos y vulnerabilidades que pueden explotarse para acceder a informaci\u00f3n sensible.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad y el uso controlado del software y las aplicaciones para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n en todos los sistemas corporativos.    </p> <p>Normativa:    </p> <ul> <li>Solo se permite la instalaci\u00f3n de software autorizado y aprobado previamente por el departamento de TI.     </li> <li>Los empleados deben obtener la aprobaci\u00f3n de TI antes de instalar cualquier aplicaci\u00f3n o herramienta en dispositivos de trabajo.    </li> </ul> <p>Procedimiento:     </p> <ul> <li>Solicitud de instalaci\u00f3n de software: Pasos para que los empleados soliciten la instalaci\u00f3n de software no disponible, enviando la solicitud al departamento de TI y justificando su necesidad.</li> <li>Verificaci\u00f3n del software autorizado: Instrucciones para que el empleado consulte y verifique qu\u00e9 aplicaciones est\u00e1n aprobadas por TI antes de descargarlas.</li> </ul> </li> <li> <p>Uso de Software Desactualizado</p> <ul> <li>Riesgo: El uso de software desactualizado aumenta la posibilidad de que existan vulnerabilidades no parcheadas, que pueden ser explotadas por atacantes para acceder a sistemas o datos de la organizaci\u00f3n.      </li> <li>Consecuencias: Las vulnerabilidades en software desactualizado pueden comprometer la seguridad de la informaci\u00f3n, facilitando ataques como la ejecuci\u00f3n remota de c\u00f3digo o el robo de datos.      </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad y el uso controlado del software y las aplicaciones para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n en todos los sistemas corporativos.    </p> <p>Normativa:    </p> <ul> <li>Todo el software utilizado en dispositivos de trabajo debe estar actualizado y contar con los \u00faltimos parches de seguridad.    </li> <li>Los usuarios deben permitir las actualizaciones autom\u00e1ticas de software, siempre que sea posible.    </li> </ul> <p>Procedimiento:    </p> <ul> <li>Proceso de actualizaci\u00f3n de software: Instrucciones para realizar actualizaciones peri\u00f3dicas de las aplicaciones y activar la opci\u00f3n de actualizaci\u00f3n autom\u00e1tica.    </li> <li>Notificaci\u00f3n de software desactualizado: Proceso para que los empleados informen al departamento de TI si detectan que una aplicaci\u00f3n en su dispositivo necesita actualizarse o tiene problemas de seguridad.     </li> </ul> </li> <li> <p>Falta de Control en los Permisos de Acceso a Aplicaciones </p> <ul> <li>Riesgo: La falta de un control adecuado de los permisos puede permitir que usuarios no autorizados accedan a funciones o datos confidenciales a trav\u00e9s de aplicaciones.    </li> <li>Consecuencias: Los accesos no controlados pueden exponer la informaci\u00f3n sensible a personas que no tienen autorizaci\u00f3n, lo cual representa un riesgo de fugas de datos y de uso indebido de la informaci\u00f3n.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad y el uso controlado del software y las aplicaciones para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n en todos los sistemas corporativos.    </p> <p>Normativa:</p> <ul> <li>Los permisos de acceso a aplicaciones deben configurarse y revisarse de acuerdo con los roles y funciones de cada usuario.     </li> <li>El acceso a aplicaciones cr\u00edticas debe estar limitado y controlado por el departamento de TI.    </li> </ul> <p>Procedimiento:    </p> <ul> <li>Asignaci\u00f3n y revisi\u00f3n de permisos: Pasos para que el departamento de TI otorgue, revise o revoque permisos de acceso a aplicaciones, asegur\u00e1ndose de que se mantengan los principios de m\u00ednimo privilegio. En la medida de lo posible se debe automatizar este proceso, incrustando la revisi\u00f3n de permisos en el ciclo de vida del empleado.        </li> <li>Solicitud de permisos de acceso: Proceso para que los empleados soliciten acceso a una aplicaci\u00f3n espec\u00edfica, justificando la necesidad y obteniendo la autorizaci\u00f3n correspondiente.    </li> </ul> </li> <li> <p>Riesgo de Fugas de Informaci\u00f3n a Trav\u00e9s de Aplicaciones en la Nube o Compartidas</p> <ul> <li>Riesgo: Algunas aplicaciones en la nube o compartidas pueden tener configuraciones de privacidad inadecuadas, lo cual facilita la transferencia o acceso no autorizado a los datos de la organizaci\u00f3n.     </li> <li>Consecuencias: Las fugas de informaci\u00f3n a trav\u00e9s de aplicaciones pueden exponer datos sensibles a personas no autorizadas o incluso al p\u00fablico si la configuraci\u00f3n de privacidad no est\u00e1 debidamente gestionada.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad y el uso controlado del software y las aplicaciones para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n en todos los sistemas corporativos.</p> <p>Normativa:    </p> <ul> <li>Las aplicaciones en la nube deben configurarse con controles de acceso adecuados para limitar el acceso a informaci\u00f3n sensible.    </li> <li>La informaci\u00f3n confidencial no debe compartirse a trav\u00e9s de aplicaciones que no cuenten con la aprobaci\u00f3n de seguridad del departamento de TI.    </li> </ul> <p>Procedimiento:     </p> <ul> <li>Configuraci\u00f3n de privacidad y acceso en aplicaciones en la nube: Instrucciones para configurar la privacidad y los permisos de acceso en las aplicaciones en la nube.    </li> <li>Proceso de revisi\u00f3n de seguridad en aplicaciones compartidas: Pasos que debe seguir el departamento de TI para revisar y verificar que las aplicaciones en la nube cumplen con los requisitos de seguridad antes de ser utilizadas.     </li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#23-comunicacion-y-acceso-a-la-red","title":"2.3 Comunicaci\u00f3n y Acceso a la Red","text":"<p>La comunicaci\u00f3n y acceso a la red incluye todas las conexiones necesarias para que los empleados puedan acceder a internet, intranet, servidores internos y servicios en la nube, tanto desde la oficina como desde ubicaciones remotas. Estos accesos son esenciales para la operatividad diaria, pero tambi\u00e9n representan riesgos importantes que deben gestionarse adecuadamente.</p> <p>Elementos incluidos: Conexiones a internet, redes de la empresa, VPNs (Redes Privadas Virtuales), aplicaciones en la nube y acceso remoto.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#231-escenarios-de-riesgo-asociados","title":"2.3.1 Escenarios de Riesgo Asociados","text":"<ol> <li> <p>Acceso No Seguro a Redes P\u00fablicas </p> <ul> <li>Riesgo: Conectar dispositivos de trabajo a redes Wi-Fi p\u00fablicas o no seguras puede facilitar la interceptaci\u00f3n de datos sensibles por parte de terceros.    </li> <li>Consecuencias: La informaci\u00f3n transmitida a trav\u00e9s de redes inseguras puede ser capturada y utilizada sin autorizaci\u00f3n, comprometiendo la confidencialidad de los datos de la empresa.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad de la comunicaci\u00f3n y acceso a la red, protegiendo la confidencialidad, integridad y disponibilidad de la informaci\u00f3n en todas las conexiones y puntos de acceso.    </p> <p>Normativa:    </p> <ul> <li>Todos los accesos remotos deben realizarse \u00fanicamente a trav\u00e9s de una VPN (Red Privada Virtual) aprobada por el departamento de TI.    </li> <li>Est\u00e1 prohibido el uso de redes p\u00fablicas o inseguras sin medidas de protecci\u00f3n adicionales.    </li> </ul> <p>Procedimiento:     </p> <ul> <li>Conexi\u00f3n a la VPN: Instrucciones detalladas para que los empleados configuren y utilicen la VPN aprobada en dispositivos de trabajo.     </li> <li>Verificaci\u00f3n de seguridad de la red: Pasos para que los empleados comprueben la seguridad de la red antes de conectarse y consejos para identificar redes seguras.    </li> </ul> </li> <li> <p>Acceso No Autorizado a la Red Corporativa </p> <ul> <li>Riesgo: Sin controles de acceso adecuados, personas no autorizadas podr\u00edan intentar conectarse a la red corporativa, exponiendo la red a ataques y posibles accesos a datos internos.      </li> <li>Consecuencias: El acceso no autorizado puede comprometer la seguridad de la red, permitir la entrada de malware o robo de datos, y facilitar ataques internos.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad de la comunicaci\u00f3n y acceso a la red, protegiendo la confidencialidad, integridad y disponibilidad de la informaci\u00f3n en todas las conexiones y puntos de acceso.</p> <p>Normativa:</p> <ul> <li>Todo acceso a la red corporativa debe estar protegido por autenticaci\u00f3n multifactor (MFA).     </li> <li>Solo los dispositivos autorizados por el departamento de TI pueden conectarse a la red interna de la empresa.    </li> </ul> <p>Procedimiento:</p> <ul> <li>Implementaci\u00f3n de autenticaci\u00f3n multifactor (MFA): Instrucciones para activar y usar MFA en todos los dispositivos y accesos a la red corporativa.     </li> <li>Registro y autorizaci\u00f3n de dispositivos: Procedimiento para registrar dispositivos en la red corporativa, asegurando que solo los equipos aprobados puedan conectarse.      </li> </ul> </li> <li> <p>Fugas de Datos a Trav\u00e9s de Aplicaciones en la Nube </p> <ul> <li>Riesgo: El uso de aplicaciones en la nube puede facilitar la transferencia de datos fuera de la red segura de la organizaci\u00f3n, aumentando el riesgo de fuga de informaci\u00f3n y acceso no autorizado.      </li> <li>Consecuencias: La informaci\u00f3n confidencial podr\u00eda ser expuesta o manipulada por personas sin permisos adecuados si las aplicaciones en la nube no est\u00e1n configuradas con los controles de acceso y seguridad apropiados.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad de la comunicaci\u00f3n y acceso a la red, protegiendo la confidencialidad, integridad y disponibilidad de la informaci\u00f3n en todas las conexiones y puntos de acceso.</p> <p>Normativa:</p> <ul> <li>El uso de aplicaciones en la nube debe estar aprobado por el departamento de TI y configurado con controles de acceso adecuados.     </li> <li>Los empleados deben evitar compartir informaci\u00f3n sensible a trav\u00e9s de aplicaciones en la nube que no cumplan con los est\u00e1ndares de seguridad de la organizaci\u00f3n.    </li> </ul> <p>Procedimiento:</p> <ul> <li>Configuraci\u00f3n de privacidad en aplicaciones en la nube: Instrucciones para ajustar los permisos de acceso y privacidad en aplicaciones en la nube aprobadas.</li> <li>Proceso de autorizaci\u00f3n de aplicaciones en la nube: Pasos que debe seguir el departamento de TI para revisar y aprobar aplicaciones en la nube antes de su uso en la organizaci\u00f3n.</li> </ul> </li> <li> <p>Intercepci\u00f3n de Datos Sensibles Durante la Comunicaci\u00f3n </p> <ul> <li>Riesgo: La informaci\u00f3n confidencial transmitida sin cifrado, como correos electr\u00f3nicos o transferencias de archivos, puede ser interceptada y utilizada por personas no autorizadas.    </li> <li>Consecuencias: La intercepci\u00f3n de datos confidenciales puede llevar a la exposici\u00f3n de informaci\u00f3n sensible, afectando la seguridad y privacidad de los datos corporativos.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar la seguridad de la comunicaci\u00f3n y acceso a la red, protegiendo la confidencialidad, integridad y disponibilidad de la informaci\u00f3n en todas las conexiones y puntos de acceso.</p> <p>Normativa:</p> <ul> <li>Toda la informaci\u00f3n confidencial transmitida por la red debe estar cifrada, tanto en tr\u00e1nsito como en reposo.</li> <li>Los correos electr\u00f3nicos que contengan datos sensibles deben enviarse utilizando cifrado de extremo a extremo o una plataforma segura aprobada.</li> </ul> <p>Procedimiento:</p> <ul> <li>Activaci\u00f3n de cifrado en correos y transferencias de archivos: Gu\u00eda para que los empleados configuren el cifrado en los correos y archivos que contengan informaci\u00f3n confidencial.</li> <li>Uso de plataformas seguras para el env\u00edo de datos: Instrucciones para utilizar las plataformas aprobadas por la organizaci\u00f3n para enviar datos sensibles y asegurar su protecci\u00f3n.</li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#24-instalaciones-fisicas","title":"2.4 Instalaciones F\u00edsicas","text":"<p>Las instalaciones f\u00edsicas comprenden las \u00e1reas donde los empleados realizan su trabajo, acceden a sistemas y manejan informaci\u00f3n confidencial. Las \u00e1reas f\u00edsicas de trabajo representan un componente clave en la seguridad de la informaci\u00f3n, ya que permiten el acceso directo a documentos, dispositivos y otros recursos cr\u00edticos.</p> <p>Elementos incluidos: Oficinas, salas de reuniones, \u00e1reas de trabajo compartidas, centros de datos y cualquier otro espacio f\u00edsico de la empresa.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#241-escenarios-de-riesgo-asociados","title":"2.4.1 Escenarios de Riesgo Asociados","text":"<ol> <li> <p>Acceso No Autorizado a \u00c1reas Restringidas </p> <ul> <li>Riesgo: Personas no autorizadas podr\u00edan entrar en \u00e1reas restringidas de la organizaci\u00f3n, exponiendo dispositivos y documentos confidenciales a riesgos de seguridad.     </li> <li>Consecuencias: El acceso f\u00edsico no autorizado puede llevar a la manipulaci\u00f3n, robo o destrucci\u00f3n de informaci\u00f3n o dispositivos sensibles de la organizaci\u00f3n.      </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger la seguridad de las instalaciones f\u00edsicas mediante medidas de control de acceso y vigilancia, para garantizar la integridad, confidencialidad y disponibilidad de los recursos corporativos.     </p> <p>Normativa:     </p> <ul> <li>Solo el personal autorizado podr\u00e1 acceder a \u00e1reas restringidas de la empresa, como centros de datos y oficinas de alto nivel.      </li> <li>Todo acceso a estas \u00e1reas debe ser registrado y monitoreado mediante sistemas de control de acceso y c\u00e1maras de seguridad.    </li> </ul> <p>Procedimiento:     </p> <ul> <li>Registro de acceso a \u00e1reas restringidas: Instrucciones para el uso adecuado de tarjetas de acceso o credenciales biom\u00e9tricas para ingresar a \u00e1reas protegidas.    </li> <li>Monitoreo de c\u00e1maras de seguridad: Procedimiento para que el personal de seguridad revise regularmente los videos de las c\u00e1maras y alerte sobre cualquier actividad sospechosa.      </li> <li>Solicitud de acceso autorizado: Pasos para que los empleados soliciten acceso temporal o permanente a \u00e1reas restringidas, incluyendo la autorizaci\u00f3n de un supervisor o el departamento de seguridad.    </li> </ul> </li> <li> <p>Exposici\u00f3n de Informaci\u00f3n Confidencial en \u00c1reas Compartidas </p> <ul> <li>Riesgo: Documentos confidenciales o dispositivos con informaci\u00f3n sensible pueden quedar expuestos en \u00e1reas compartidas, como salas de reuniones o espacios de trabajo abiertos, accesibles a personas no autorizadas.     </li> <li>Consecuencias: La exposici\u00f3n de informaci\u00f3n en \u00e1reas comunes puede llevar a la fuga de datos confidenciales y al acceso indebido a documentos sensibles de la organizaci\u00f3n.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger la seguridad de las instalaciones f\u00edsicas mediante medidas de control de acceso y vigilancia, para garantizar la integridad, confidencialidad y disponibilidad de los recursos corporativos.    </p> <p>Normativa:     </p> <ul> <li>Los empleados deben evitar dejar documentos o dispositivos desatendidos en \u00e1reas compartidas.    </li> <li>La informaci\u00f3n confidencial debe almacenarse en espacios seguros, como archivadores con llave, cuando no est\u00e9 en uso.</li> </ul> <p>Procedimiento:</p> <ul> <li>Almacenamiento seguro de documentos: Instrucciones para el uso de archivadores y otras \u00e1reas de almacenamiento seguras para guardar documentos y dispositivos fuera de las horas de trabajo.     </li> <li>Retiro de documentos de \u00e1reas compartidas: Gu\u00eda para que los empleados revisen y aseguren sus documentos y dispositivos antes de abandonar cualquier \u00e1rea compartida.     </li> <li>Uso de lockers y armarios: Proceso para que el personal almacene de manera segura sus objetos personales y documentos en \u00e1reas designadas.    </li> </ul> </li> <li> <p>P\u00e9rdida o Robo de Dispositivos en las Instalaciones </p> <ul> <li>Riesgo: Dispositivos de trabajo, como laptops, tel\u00e9fonos m\u00f3viles o memorias USB, pueden extraviarse o ser robados dentro de las instalaciones de la empresa.     </li> <li>Consecuencias: La p\u00e9rdida o robo de dispositivos en las instalaciones puede exponer la informaci\u00f3n almacenada en ellos a personas no autorizadas, comprometiendo la seguridad de los datos.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger la seguridad de las instalaciones f\u00edsicas mediante medidas de control de acceso y vigilancia, para garantizar la integridad, confidencialidad y disponibilidad de los recursos corporativos.</p> <p>Normativa:</p> <ul> <li>Los dispositivos deben estar asegurados con contrase\u00f1as y, cuando sea posible, con cifrado de disco para proteger la informaci\u00f3n en caso de p\u00e9rdida o robo.    </li> <li>Es obligatorio que los empleados guarden dispositivos port\u00e1tiles en cajones con llave o lockers cuando no los utilicen.    </li> </ul> <p>Procedimiento:</p> <ul> <li>Cifrado y contrase\u00f1as en dispositivos port\u00e1tiles: Instrucciones para configurar contrase\u00f1as seguras y cifrado de disco en dispositivos port\u00e1tiles de la organizaci\u00f3n.    </li> <li>Almacenamiento seguro de dispositivos en las instalaciones: Pasos para asegurar laptops y otros dispositivos en lugares cerrados con llave o en lockers asignados.    </li> <li>Reporte de dispositivos extraviados o robados: Proceso para que los empleados notifiquen de inmediato al departamento de TI y de seguridad en caso de p\u00e9rdida o robo de dispositivos.    </li> </ul> </li> <li> <p>Descuido en la Gesti\u00f3n de Residuos de Documentaci\u00f3n Confidencial </p> <ul> <li>Riesgo: Documentos confidenciales pueden ser desechados sin los procedimientos de destrucci\u00f3n adecuados, exponiendo informaci\u00f3n sensible a personas no autorizadas que podr\u00edan acceder a ellos.    </li> <li>Consecuencias: La eliminaci\u00f3n no segura de documentos confidenciales puede llevar a la fuga de informaci\u00f3n sensible y comprometer la seguridad de la organizaci\u00f3n.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a proteger la seguridad de las instalaciones f\u00edsicas mediante medidas de control de acceso y vigilancia, para garantizar la integridad, confidencialidad y disponibilidad de los recursos corporativos.    </p> <p>Normativa:    </p> <ul> <li>Todos los documentos confidenciales que ya no se necesiten deben ser destruidos adecuadamente, utilizando trituradoras de papel o servicios de destrucci\u00f3n de documentos.     </li> <li>Est\u00e1 prohibido desechar documentos confidenciales en cestos de basura comunes sin haberlos destruido previamente.    </li> </ul> <p>Procedimiento:     </p> <ul> <li>Uso de trituradoras de papel: Instrucciones para utilizar las trituradoras de papel disponibles en las instalaciones de la organizaci\u00f3n.    </li> <li>Procedimiento de destrucci\u00f3n de documentos: Pasos para solicitar la destrucci\u00f3n segura de documentos mediante servicios especializados, si es necesario.    </li> <li>Revisi\u00f3n peri\u00f3dica de residuos de documentaci\u00f3n: Gu\u00eda para que los empleados revisen y clasifiquen los documentos antes de desecharlos, asegurando la correcta destrucci\u00f3n de los materiales sensibles.    </li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#25-acceso-a-datos","title":"2.5 Acceso a Datos","text":"<p>El acceso a datos se refiere a los permisos otorgados a los empleados para ver, editar o compartir documentos, bases de datos y aplicaciones internas que contienen informaci\u00f3n valiosa o sensible de la organizaci\u00f3n. Una adecuada gesti\u00f3n de los permisos de acceso es fundamental para proteger la informaci\u00f3n y evitar que personas no autorizadas tengan acceso a datos confidenciales.</p> <p>Elementos incluidos: Documentos electr\u00f3nicos y f\u00edsicos, bases de datos, archivos compartidos, aplicaciones internas y cualquier otro recurso de la organizaci\u00f3n que contenga informaci\u00f3n sensible.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#251-escenarios-de-riesgo-asociados","title":"2.5.1 Escenarios de Riesgo Asociados","text":"<ol> <li> <p>Permisos Excesivos o Inadecuados</p> <ul> <li>Riesgo: Dar a un empleado permisos de acceso que exceden los necesarios para su funci\u00f3n laboral puede permitirle acceder a datos o recursos sensibles sin autorizaci\u00f3n real.     </li> <li>Consecuencias: Los permisos inadecuados aumentan el riesgo de acceso no autorizado a informaci\u00f3n sensible, lo que puede llevar a la filtraci\u00f3n o modificaci\u00f3n indebida de datos confidenciales.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar el acceso seguro y controlado a los datos, aplicando el principio de m\u00ednimo privilegio para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.     </p> <p>Normativa:     </p> <ul> <li>Los permisos de acceso a datos deben otorgarse seg\u00fan el principio de m\u00ednimo privilegio, limitando los accesos al m\u00ednimo necesario para cumplir con las responsabilidades del puesto.</li> <li>Los permisos deben revisarse regularmente, especialmente cuando un empleado cambia de rol o funci\u00f3n en la organizaci\u00f3n. Este proceso debe ser automatizado en la medida de lo posible, y debe incluir la revisi\u00f3n de permisos en el ciclo de vida del empleado.        </li> </ul> <p>Procedimiento:     </p> <ul> <li>Asignaci\u00f3n de permisos m\u00ednimos: Gu\u00eda para que el departamento de TI configure permisos que se ajusten estrictamente a las necesidades del rol de cada empleado.    </li> <li>Revisi\u00f3n peri\u00f3dica de permisos: Pasos para realizar revisiones regulares de permisos, asegurando que se ajusten a las responsabilidades actuales del empleado.    </li> <li>Revocaci\u00f3n de permisos tras cambio de rol: Procedimiento para actualizar o revocar permisos cuando un empleado cambia de puesto o funci\u00f3n.    </li> </ul> </li> <li> <p>Acceso No Autorizado a Informaci\u00f3n Confidencial </p> <ul> <li>Riesgo: Sin un control adecuado de los accesos, personas no autorizadas podr\u00edan visualizar o modificar informaci\u00f3n confidencial de la organizaci\u00f3n.    </li> <li>Consecuencias: El acceso no autorizado compromete la confidencialidad y seguridad de la informaci\u00f3n, exponi\u00e9ndola a personas sin los permisos adecuados y aumentando el riesgo de fuga o manipulaci\u00f3n de datos.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar el acceso seguro y controlado a los datos, aplicando el principio de m\u00ednimo privilegio para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.         </p> <p>Normativa:    </p> <ul> <li>El acceso a informaci\u00f3n confidencial debe estar protegido mediante autenticaci\u00f3n multifactor (MFA) para verificar la identidad del usuario.    </li> <li>Los registros de acceso a informaci\u00f3n confidencial deben ser monitoreados y auditados regularmente para detectar accesos inusuales o no autorizados.    </li> </ul> <p>Procedimiento:    </p> <ul> <li>Activaci\u00f3n de autenticaci\u00f3n multifactor (MFA): Instrucciones para que los empleados configuren y utilicen MFA para acceder a informaci\u00f3n confidencial.    </li> <li>Monitoreo de registros de acceso: Procedimiento para que el equipo de TI audite los registros de acceso y detecte actividades sospechosas o no autorizadas.    </li> <li>Proceso de solicitud de acceso a datos sensibles: Pasos que deben seguir los empleados para solicitar acceso a informaci\u00f3n confidencial, justificando la necesidad y obteniendo la aprobaci\u00f3n correspondiente.     </li> </ul> </li> <li> <p>Compartici\u00f3n Insegura de Informaci\u00f3n Sensible </p> <ul> <li>Riesgo: La informaci\u00f3n sensible puede compartirse de manera insegura, ya sea a trav\u00e9s de canales no autorizados o sin las medidas de protecci\u00f3n adecuadas, lo cual incrementa el riesgo de fuga de datos.    </li> <li>Consecuencias: La compartici\u00f3n insegura de informaci\u00f3n sensible puede llevar a la exposici\u00f3n o manipulaci\u00f3n indebida de datos cr\u00edticos para la organizaci\u00f3n.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar el acceso seguro y controlado a los datos, aplicando el principio de m\u00ednimo privilegio para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.</p> <p>Normativa:    </p> <ul> <li>La informaci\u00f3n sensible solo debe compartirse a trav\u00e9s de canales aprobados y con medidas de protecci\u00f3n, como el cifrado.    </li> <li>Est\u00e1 prohibido utilizar servicios o plataformas no autorizadas para compartir informaci\u00f3n confidencial.    </li> </ul> <p>Procedimiento:</p> <ul> <li>Uso de canales seguros para compartici\u00f3n de informaci\u00f3n: Instrucciones para que los empleados utilicen canales aprobados para compartir informaci\u00f3n sensible, como plataformas de transferencia de archivos cifradas.     </li> <li>Activaci\u00f3n de cifrado en comunicaciones: Gu\u00eda para cifrar documentos y correos electr\u00f3nicos antes de compartirlos con usuarios autorizados.     </li> <li>Solicitud de acceso compartido: Proceso para solicitar acceso compartido a informaci\u00f3n confidencial, especificando los destinatarios y el prop\u00f3sito de la compartici\u00f3n.     </li> </ul> </li> <li> <p>Falta de Seguimiento y Auditor\u00eda de los Accesos a Datos </p> <ul> <li>Riesgo: Sin una auditor\u00eda regular de los accesos, puede ser dif\u00edcil detectar el uso inadecuado o indebido de los permisos de acceso a informaci\u00f3n sensible.     </li> <li>Consecuencias: La falta de auditor\u00eda de accesos puede permitir que accesos no autorizados o usos indebidos de informaci\u00f3n confidencial pasen desapercibidos, comprometiendo la seguridad de los datos.   </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a garantizar el acceso seguro y controlado a los datos, aplicando el principio de m\u00ednimo privilegio para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.     </p> <p>Normativa:    </p> <ul> <li>Los accesos a informaci\u00f3n sensible deben ser auditados regularmente para identificar y mitigar posibles abusos o accesos no autorizados.     </li> <li>Todo acceso a datos confidenciales debe registrarse autom\u00e1ticamente en un sistema de monitoreo.     </li> </ul> <p>Procedimiento:     </p> <ul> <li>Revisi\u00f3n peri\u00f3dica de registros de acceso: Instrucciones para que el equipo de seguridad revise los registros de acceso en busca de patrones inusuales o accesos no autorizados.     </li> <li>Monitoreo autom\u00e1tico de accesos: Configuraci\u00f3n de un sistema de monitoreo que registre y alerte sobre intentos de acceso a datos sensibles.     </li> <li>Informe de auditor\u00eda de acceso a datos: Pasos para generar y documentar informes de auditor\u00eda de accesos a informaci\u00f3n confidencial, incluyendo observaciones y acciones correctivas.      </li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#26-personal","title":"2.6 Personal","text":"<p>El personal de la organizaci\u00f3n es fundamental para la seguridad de la informaci\u00f3n, ya que sus h\u00e1bitos de trabajo y su conocimiento de las pol\u00edticas de seguridad son factores cr\u00edticos para proteger los datos y recursos corporativos. La formaci\u00f3n y concienciaci\u00f3n del empleado en temas de seguridad contribuyen significativamente a reducir los riesgos de incidentes de seguridad.</p> <p>Elementos incluidos: El propio empleado, sus pr\u00e1cticas de trabajo diarias, su familiaridad con las pol\u00edticas de seguridad y su capacidad para reconocer y actuar frente a amenazas de seguridad.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#261-escenarios-de-riesgo-asociados","title":"2.6.1 Escenarios de Riesgo Asociados","text":"<ol> <li> <p>Falta de Concienciaci\u00f3n en Seguridad de la Informaci\u00f3n </p> <ul> <li>Riesgo: La falta de conocimientos de seguridad en el personal puede llevar a errores que comprometan la confidencialidad, integridad y disponibilidad de los datos.</li> <li>Consecuencias: Sin una adecuada concienciaci\u00f3n, el personal es m\u00e1s vulnerable a ataques como el phishing, la manipulaci\u00f3n social y otros tipos de amenazas que pueden comprometer la seguridad de la organizaci\u00f3n.    </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a fomentar una cultura de seguridad a trav\u00e9s de la capacitaci\u00f3n y la concienciaci\u00f3n, asegurando que todo el personal tenga el conocimiento necesario para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.    </p> <p>Normativa:    </p> <ul> <li>Todo el personal debe participar en sesiones de capacitaci\u00f3n en seguridad de la informaci\u00f3n al menos una vez al a\u00f1o.    </li> <li>Los empleados deben demostrar conocimiento b\u00e1sico de las pol\u00edticas de seguridad y los riesgos asociados a sus funciones.    </li> </ul> <p>Procedimiento:    </p> <ul> <li>Programaci\u00f3n de capacitaciones en seguridad: Instrucciones para el departamento de recursos humanos y TI sobre la organizaci\u00f3n de sesiones de capacitaci\u00f3n anuales para todo el personal.     </li> <li>Evaluaci\u00f3n de conocimientos en seguridad: Gu\u00eda para realizar evaluaciones de conocimientos b\u00e1sicos en seguridad de la informaci\u00f3n tras cada sesi\u00f3n de capacitaci\u00f3n.    </li> <li>Registro de asistencia y resultados: Procedimiento para llevar un registro de la asistencia y resultados de los empleados en las capacitaciones y evaluaciones de seguridad.    </li> </ul> </li> <li> <p>H\u00e1bitos Inseguros de Trabajo </p> <ul> <li>Riesgo: Los empleados pueden desarrollar h\u00e1bitos de trabajo inseguros, como dejar dispositivos desbloqueados, usar contrase\u00f1as d\u00e9biles o compartir informaci\u00f3n sensible de manera informal, lo cual aumenta el riesgo de incidentes de seguridad.    </li> <li>Consecuencias: Los malos h\u00e1bitos de seguridad pueden resultar en el acceso no autorizado a informaci\u00f3n confidencial, la filtraci\u00f3n de datos sensibles y un mayor riesgo de ataques internos o externos.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a fomentar una cultura de seguridad a trav\u00e9s de la capacitaci\u00f3n y la concienciaci\u00f3n, asegurando que todo el personal tenga el conocimiento necesario para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.     </p> <p>Normativa:    </p> <ul> <li>Los empleados deben mantener sus dispositivos bloqueados cuando no los est\u00e9n utilizando activamente.    </li> <li>Est\u00e1 prohibido compartir contrase\u00f1as o informaci\u00f3n sensible sin autorizaci\u00f3n y sin las medidas de seguridad adecuadas.    </li> </ul> <p>Procedimiento:     </p> <ul> <li>Bloqueo manual de dispositivos: Instrucciones para que los empleados bloqueen manualmente sus dispositivos cuando se ausenten, especificando c\u00f3mo hacerlo en diferentes sistemas operativos.     </li> <li>Uso de contrase\u00f1as seguras: Gu\u00eda para que los empleados establezcan contrase\u00f1as seguras y \u00fanicas para cada sistema o aplicaci\u00f3n.    </li> <li>Revisi\u00f3n peri\u00f3dica de h\u00e1bitos de seguridad: Proceso de auditor\u00eda para verificar que los empleados cumplan con los h\u00e1bitos de seguridad recomendados, y revisi\u00f3n con el supervisor en caso de incumplimiento.     </li> </ul> </li> <li> <p>Exposici\u00f3n a Amenazas de Ingenier\u00eda Social (Phishing, Vishing, Smishing) </p> <ul> <li>Riesgo: Los empleados pueden ser blanco de ataques de ingenier\u00eda social, como phishing, vishing (llamadas telef\u00f3nicas fraudulentas) o smishing (mensajes SMS fraudulentos), que buscan enga\u00f1arlos para que divulguen informaci\u00f3n confidencial o realicen acciones no autorizadas.    </li> <li>Consecuencias: Si los empleados caen en estos ataques, podr\u00edan revelar informaci\u00f3n sensible, comprometer cuentas o permitir la entrada de malware en el sistema de la organizaci\u00f3n.      </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a fomentar una cultura de seguridad a trav\u00e9s de la capacitaci\u00f3n y la concienciaci\u00f3n, asegurando que todo el personal tenga el conocimiento necesario para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.</p> <p>Normativa:     </p> <ul> <li>Los empleados deben estar capacitados para reconocer correos electr\u00f3nicos, mensajes y llamadas sospechosas, y seguir los protocolos de reporte en caso de detecci\u00f3n.     </li> <li>Todo intento de phishing, vishing o smishing debe ser reportado inmediatamente al departamento de TI.    </li> </ul> <p>Procedimiento:</p> <ul> <li>Identificaci\u00f3n y reporte de mensajes sospechosos: Gu\u00eda para que los empleados reconozcan los signos de ataques de phishing y los reporten al departamento de TI.     </li> <li>Simulaciones de ataques de ingenier\u00eda social: Instrucciones para el departamento de TI sobre c\u00f3mo realizar pruebas peri\u00f3dicas de phishing y vishing para evaluar la preparaci\u00f3n del personal.     </li> <li>Proceso de reporte de intentos de ingenier\u00eda social: Procedimiento para que los empleados notifiquen de manera r\u00e1pida y segura cualquier intento de ingenier\u00eda social, incluyendo detalles del ataque y acciones tomadas.     </li> </ul> </li> <li> <p>Desconocimiento o Incumplimiento de Pol\u00edticas de Seguridad </p> <ul> <li>Riesgo: El desconocimiento o incumplimiento de las pol\u00edticas de seguridad puede llevar a que los empleados tomen decisiones o realicen acciones que expongan a la organizaci\u00f3n a riesgos de seguridad.    </li> <li>Consecuencias: El incumplimiento de pol\u00edticas de seguridad puede resultar en accesos no autorizados, p\u00e9rdida de datos o errores operativos que afecten la integridad de los sistemas y datos de la organizaci\u00f3n.     </li> </ul> <p>Pol\u00edtica: La organizaci\u00f3n se compromete a fomentar una cultura de seguridad a trav\u00e9s de la capacitaci\u00f3n y la concienciaci\u00f3n, asegurando que todo el personal tenga el conocimiento necesario para proteger la integridad, confidencialidad y disponibilidad de la informaci\u00f3n.    </p> <p>Normativa:    </p> <ul> <li>Los empleados deben leer y firmar un compromiso de cumplimiento de las pol\u00edticas de seguridad de la informaci\u00f3n al inicio de su contrataci\u00f3n y tras cada actualizaci\u00f3n importante de las pol\u00edticas.    </li> <li>Se realizar\u00e1n auditor\u00edas peri\u00f3dicas para verificar el cumplimiento de las pol\u00edticas de seguridad en todas las \u00e1reas de trabajo.     </li> </ul> <p>Procedimiento:</p> <ul> <li>Firma de compromiso de seguridad: Pasos para que los nuevos empleados revisen y firmen el compromiso de cumplimiento de las pol\u00edticas de seguridad.     </li> <li>Actualizaci\u00f3n de pol\u00edticas y notificaci\u00f3n: Proceso para que el departamento de TI comunique y capacite a los empleados sobre cualquier cambio importante en las pol\u00edticas de seguridad.    </li> <li>Auditor\u00edas de cumplimiento de pol\u00edticas: Procedimiento para realizar auditor\u00edas regulares, revisar el cumplimiento y documentar cualquier incidencia o incumplimiento de las pol\u00edticas de seguridad.    </li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#3-politicas-de-seguridad-de-incibe","title":"3. Pol\u00edticas de seguridad de INCIBE","text":"<p>Para que las peque\u00f1as y medianas empresas (PYMEs) puedan mejorar su ciberseguridad y gestionar los riesgos de manera m\u00e1s organizada, el Instituto Nacional de Ciberseguridad (INCIBE) ha desarrollado una serie de pol\u00edticas de seguridad. Estas pol\u00edticas son documentos que gu\u00edan a la empresa en los procesos internos necesarios para proteger la informaci\u00f3n y la infraestructura digital. Puede acceder a estas pol\u00edticas consultando los enlaces de la Fuentes de Informaci\u00f3n que hay al final de este documento.</p>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#31-que-contienen-estas-politicas","title":"3.1. \u00bfQu\u00e9 Contienen Estas Pol\u00edticas?","text":"<ol> <li> <p>Aspectos y Elementos de Seguridad Esenciales:    </p> <ul> <li>Cada pol\u00edtica abarca aspectos fundamentales de la seguridad que deben ser supervisados y gestionados activamente. Estos elementos van desde la protecci\u00f3n de los equipos y el control de accesos, hasta la gesti\u00f3n de aplicaciones y el almacenamiento de datos.    </li> <li>La idea es que toda PYME, sin importar su tama\u00f1o, identifique \u00e1reas clave donde aplicar controles y pueda adaptarlos seg\u00fan sus necesidades.   </li> </ul> </li> <li> <p>Roles y Responsabilidades Claras:    </p> <ul> <li>Estas pol\u00edticas est\u00e1n dise\u00f1adas para que el empresario, el equipo t\u00e9cnico y todos los empleados conozcan y sigan las pr\u00e1cticas de seguridad.     </li> <li>Incluyen una checklist o lista de verificaci\u00f3n con acciones espec\u00edficas para cada grupo:    <ul> <li>Para el empresario: decisiones sobre pol\u00edticas de acceso o configuraci\u00f3n de copias de seguridad.    </li> <li>Para el equipo t\u00e9cnico: implementaci\u00f3n de medidas t\u00e9cnicas como la configuraci\u00f3n de redes y el cifrado de datos.     </li> <li>Para los empleados: pr\u00e1cticas de seguridad diarias, como el bloqueo de pantallas y el uso de software autorizado.      </li> </ul> </li> </ul> </li> <li> <p>Formatos Editables y Listos para Usar:    </p> <ul> <li>Las pol\u00edticas est\u00e1n disponibles en versiones PDF y Word para que cada empresa pueda personalizarlas y adaptarlas a su contexto.     </li> <li>Tambi\u00e9n incluyen una checklist editable digitalmente, donde se pueden registrar las acciones que ya se han completado y aquellas que quedan pendientes. Esto ayuda a la empresa a realizar un seguimiento del cumplimiento de las pol\u00edticas y a identificar \u00e1reas donde a\u00fan hay margen de mejora.</li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#32-estructura-de-los-documentos","title":"3.2. Estructura de los Documentos","text":"<p>Los documentos de pol\u00edticas de seguridad de INCIBE siguen una estructura com\u00fan que facilita su lectura y comprensi\u00f3n. A continuaci\u00f3n, se describen los elementos clave de cada documento:</p> <ol> <li> <p>Antecedentes </p> <ul> <li>Descripci\u00f3n: Los documentos comienzan con una secci\u00f3n de antecedentes que justifica la necesidad de la pol\u00edtica. Por ejemplo, en el documento sobre \u201cAplicaciones permitidas\u201d se justifica por la obligaci\u00f3n de utilizar software legal para evitar sanciones y reducir riesgos de malware. En el caso de \u201cProtecci\u00f3n del puesto de trabajo\u201d, se destacan riesgos tanto tecnol\u00f3gicos como no tecnol\u00f3gicos que justifican la necesidad de proteger el entorno de trabajo. Por tanto, esta secci\u00f3n establece el contexto y la importancia de la pol\u00edtica en base a los riesgos identificados.</li> <li>Relaci\u00f3n con los conceptos vistos: Esta secci\u00f3n se vincula con la identificaci\u00f3n de factores vulnerables o elementos asociados al puesto de trabajo y sus escenarios de riesgos, que justifican la implementaci\u00f3n de la pol\u00edtica. Tambi\u00e9n sirve de introducci\u00f3n para contextualizar la importancia de implementar medidas a nivel de personas, tecnolog\u00eda y procesos.</li> </ul> </li> <li> <p>Objetivos </p> <ul> <li>Descripci\u00f3n: Los objetivos establecen qu\u00e9 busca lograr la pol\u00edtica, generalmente expresado en t\u00e9rminos de seguridad, control y prevenci\u00f3n. Por ejemplo, los objetivos de la pol\u00edtica de almacenamiento se centran en mantener la informaci\u00f3n segura y gestionar adecuadamente su almacenamiento en dispositivos.</li> <li>Relaci\u00f3n con los conceptos vistos: Los objetivos conectan directamente con la pol\u00edtica como declaraci\u00f3n de intenciones generales, ya que definen el marco y el \u201cnorte\u201d que se persigue. Adem\u00e1s, cada objetivo suele guiar el desarrollo de normativas y procedimientos espec\u00edficos.</li> </ul> </li> <li> <p>Checklist (Lista de Verificaci\u00f3n)</p> <ul> <li>Descripci\u00f3n: La checklist es una lista de controles (medidas) espec\u00edficos que ayudan a verificar el cumplimiento de la pol\u00edtica. Cada control est\u00e1 clasificado por nivel de complejidad (B\u00e1sico o Avanzado) y alcance (Procesos, Tecnolog\u00eda o Personas). Por ejemplo, el documento de \u201cProtecci\u00f3n del puesto de trabajo\u201d incluye controles como el bloqueo de sesi\u00f3n o la desactivaci\u00f3n de puertos USB por defecto.</li> <li>Relaci\u00f3n con los conceptos vistos: Aqu\u00ed se aplica la clasificaci\u00f3n de niveles de complejidad. Las medidas b\u00e1sicas son aquellas que pueden aplicarse con poco esfuerzo y recursos, mientras que las avanzadas requieren configuraciones m\u00e1s complejas. Tambi\u00e9n se utiliza el alcance para definir si la medida afecta a procesos (PRO), tecnolog\u00eda (TEC) o personas (PER), lo que ayuda a entender el tipo de personal involucrado en cada medida. El checklist es una herramienta clave para evaluar y medir el cumplimiento de la pol\u00edtica, y por tanto el nivel de madurez en seguridad de la empresa, en relaci\u00f3n a la pol\u00edtica tratada.</li> </ul> </li> <li> <p>Puntos Clave</p> <ul> <li>Descripci\u00f3n: Esta secci\u00f3n resume las pr\u00e1cticas o reglas esenciales que todos deben cumplir para que la pol\u00edtica sea efectiva. En el documento de \u201cAlmacenamiento en los equipos de trabajo\u201d, se destacan puntos clave como el cifrado de la informaci\u00f3n y la normativa sobre lo que puede almacenarse en los equipos. En \u201cAplicaciones permitidas\u201d, se detalla la importancia del repositorio de software y la auditor\u00eda de aplicaciones instaladas.</li> <li>Relaci\u00f3n con los conceptos vistos: Los puntos clave funcionan como normativas que definen lo que debe cumplirse en detalle. Aqu\u00ed se incluyen las reglas y requisitos espec\u00edficos necesarios para cumplir con la pol\u00edtica general de seguridad. Cada punto clave ayuda a reducir los riesgos identificados, tanto para personas como para tecnolog\u00eda.</li> </ul> </li> <li> <p>Referencias</p> <ul> <li>Descripci\u00f3n: Cada documento finaliza con una lista de referencias que enlazan a normativas o gu\u00edas externas relevantes. Esto facilita la consulta de fuentes adicionales o normativas legales aplicables.</li> <li>Relaci\u00f3n con los conceptos vistos: Las referencias fortalecen la pol\u00edtica al alinearla con regulaciones externas y buenas pr\u00e1cticas, como la protecci\u00f3n de datos personales bajo el GDPR. Este punto es clave para asegurar que la pol\u00edtica cumple con regulaciones y est\u00e1ndares externos.</li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#33-como-utilizar-estas-politicas-en-un-supuesto-practico","title":"3.3.  \u00bfC\u00f3mo Utilizar Estas Pol\u00edticas en un Supuesto Pr\u00e1ctico?","text":"<p>Para un supuesto pr\u00e1ctico, los estudiantes pueden seguir estos pasos para aplicar una pol\u00edtica de seguridad en una PYME:</p> <ol> <li> <p>Identificar los Elementos de Seguridad Esenciales:</p> <ul> <li>Revisen los puntos clave de cada pol\u00edtica, identificando cu\u00e1les son los aspectos de seguridad que deben estar bajo control. Esto les ayudar\u00e1 a comprender la relevancia de cada medida y a priorizar qu\u00e9 proteger en cada \u00e1rea.   </li> </ul> </li> <li> <p>Asignar Roles y Responsabilidades:</p> <ul> <li>Dividan las responsabilidades entre el empresario (o direcci\u00f3n), el equipo t\u00e9cnico y el resto de los empleados, para que cada grupo conozca claramente sus funciones. Esto permite que cada persona entienda su rol en la seguridad de la empresa y que todos participen activamente en proteger la informaci\u00f3n.    </li> </ul> </li> <li> <p>Adaptar las Pol\u00edticas a Necesidades Espec\u00edficas:</p> <ul> <li>Utilicen el formato editable de la pol\u00edtica para personalizar las medidas seg\u00fan el contexto del ejercicio, ajustando las normas, los procesos y los procedimientos para reflejar una situaci\u00f3n realista. Por ejemplo, si el supuesto incluye el uso de aplicaciones en la nube, se pueden a\u00f1adir controles de seguridad espec\u00edficos para el acceso y la protecci\u00f3n de estos servicios.    </li> </ul> </li> <li> <p>Usar la Checklist para Seguimiento:</p> <ul> <li>Utilicen la checklist para registrar qu\u00e9 medidas se han implementado y cu\u00e1les siguen pendientes. Esto les permitir\u00e1 visualizar el progreso y tomar decisiones sobre los siguientes pasos en la protecci\u00f3n de la empresa.</li> </ul> </li> </ol>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#fuentes","title":"Fuentes","text":"<ul> <li>https://www.incibe.es/empresas/que-te-interesa/proteccion-puesto-trabajo</li> <li>https://www.incibe.es/sites/default/files/contenidos/dosieres/metad_proteccion_del_puesto_de_trabajo.pdf</li> <li>https://www.incibe.es/empresas/herramientas/politicas</li> <li>https://files.incibe.es/incibe/politicas/politicas-pyme.zip</li> </ul>","tags":["pol\u00edtica","normativa","Puesto de trabajo"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/","title":"UD 1 - 4.1 Plan de concienciaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#411-ejemplo-de-plan-de-formacion-y-concienciacion-en-ciberseguridad","title":"4.1.1 Ejemplo de Plan de Formaci\u00f3n y Concienciaci\u00f3n en Ciberseguridad","text":"<p>La formaci\u00f3n y concienciaci\u00f3n complementan las medidas t\u00e9cnicas de seguridad, permitiendo que los empleados sean un eslab\u00f3n fuerte en la protecci\u00f3n de la organizaci\u00f3n. Todas la medidas de seguridad, como cortafuegos, antivirus o sistemas de detecci\u00f3n de intrusos, pol\u00edticas de seguridad, etc., pueden ser in\u00fatiles si los empleados no est\u00e1n formados y concienciados en ciberseguridad.</p> <p> </p> Ciclo Plan de Formaci\u00f3n y Concienciaci\u00f3n","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#ejemplo-del-indice-de-un-plan-de-formacion-y-concienciacion-en-ciberseguridad","title":"Ejemplo del \u00edndice de un Plan de Formaci\u00f3n y Concienciaci\u00f3n en Ciberseguridad","text":"<p>No pretende ser un \u00edndice exhaustivo, sino una gu\u00eda para estructurar un plan de formaci\u00f3n y concienciaci\u00f3n en ciberseguridad en un entorno corporativo. El objetivo es abordar los riesgos identificados mediante contenidos formativos y estrategias adaptadas a cada grupo, con ejemplos pr\u00e1cticos y metodolog\u00edas din\u00e1micas.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#1-introduccion","title":"1. Introducci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#11-justificacion-del-plan","title":"1.1. Justificaci\u00f3n del Plan","text":"<ul> <li>Resultado esperado: Explicaci\u00f3n clara del prop\u00f3sito del plan, destacando la importancia de la formaci\u00f3n y concienciaci\u00f3n en ciberseguridad para proteger los activos digitales y minimizar los riesgos.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#12-objetivos-del-plan","title":"1.2. Objetivos del Plan","text":"<ul> <li>Resultado esperado: Definici\u00f3n de objetivos generales y espec\u00edficos, como fomentar una cultura de seguridad, reducir incidentes y mejorar el cumplimiento normativo.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#13-alcance-del-plan","title":"1.3. Alcance del Plan","text":"<ul> <li>Resultado esperado: Delimitaci\u00f3n de qu\u00e9 \u00e1reas, roles y niveles de la organizaci\u00f3n est\u00e1n incluidos en el plan, especificando tambi\u00e9n cualquier exclusi\u00f3n.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#2-diagnostico-inicial","title":"2. Diagn\u00f3stico Inicial","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#21-evaluacion-de-necesidades-formativas","title":"2.1. Evaluaci\u00f3n de Necesidades Formativas","text":"<ul> <li>Resultado esperado: Identificaci\u00f3n de brechas en conocimientos, \u00e1reas cr\u00edticas y pr\u00e1cticas actuales. Activos en riesto (documentaci\u00f3n importante). Uso de formularios para encuestas y cuestionarios iniciales.     </li> <li>Formulario sugerido: Preguntas como: \"\u00bfSabes identificar un correo de phishing?\" o \"\u00bfC\u00f3mo crear\u00edas una contrase\u00f1a segura?\".</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#22-analisis-de-riesgos-y-amenazas","title":"2.2. An\u00e1lisis de Riesgos y Amenazas","text":"<ul> <li>Resultado esperado: Identificaci\u00f3n de las principales amenazas a las que se enfrenta la organizaci\u00f3n.     </li> <li>Herramientas: Matrices de riesgos y ejemplos de amenazas reales relacionadas con roles espec\u00edficos.     </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#23-segmentacion-de-empleados-por-roles-y-niveles","title":"2.3. Segmentaci\u00f3n de Empleados por Roles y Niveles","text":"<ul> <li>Resultado esperado: Clasificaci\u00f3n de empleados seg\u00fan sus responsabilidades y conocimientos previos.   </li> <li>Tabla sugerida:</li> </ul> Rol Nivel de conocimientos Principales riesgos T\u00e9cnico de TI Avanzado Gesti\u00f3n de vulnerabilidades, respuesta a incidentes Administrativo B\u00e1sico Phishing, contrase\u00f1as d\u00e9biles Gerente Intermedio Toma de decisiones ante incidentes","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#3-diseno-del-plan-de-formacion-y-concienciacion","title":"3. Dise\u00f1o del Plan de Formaci\u00f3n y Concienciaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#31-definicion-de-contenidos-formativos","title":"3.1. Definici\u00f3n de Contenidos Formativos","text":"<ul> <li>Resultado esperado: Listado de temas clave, adaptados a los roles y riesgos identificados.   </li> <li> <p>Ejemplo de contenidos:    </p> <ul> <li>B\u00e1sicos: Phishing, uso de contrase\u00f1as seguras, pol\u00edticas de mesa limpia, protecci\u00f3n de dispositivos. Entrega de peque\u00f1as guias.</li> <li>Avanzados: Gesti\u00f3n de firewalls, an\u00e1lisis de vulnerabilidades, uso de VPN.</li> </ul> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#32-asociacion-de-roles-contenidos-y-materiales","title":"3.2. Asociaci\u00f3n de Roles, Contenidos y Materiales","text":"<ul> <li>Resultado esperado: Tabla que relacione cada grupo con los contenidos y materiales correspondientes.</li> <li>Tabla sugerida:    </li> </ul> Rol/Grupo Contenidos Materiales Administrativos Phishing, pol\u00edticas de mesa limpia Infograf\u00edas, simulaciones T\u00e9cnicos Gesti\u00f3n de incidentes, firewalls Talleres pr\u00e1cticos, manuales Comerciales Uso seguro de Wi-Fi, 2FA Gu\u00edas digitales, videos","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#33-metodologias-formativas","title":"3.3. Metodolog\u00edas Formativas","text":"<ul> <li>Resultado esperado: Selecci\u00f3n de metodolog\u00edas adecuadas para cada grupo, como talleres, simulaciones, m\u00f3dulos online y jornadas presenciales.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#4-ejecucion-del-plan","title":"4. Ejecuci\u00f3n del Plan","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#41-cronograma-de-actividades","title":"4.1. Cronograma de Actividades","text":"<ul> <li>Resultado esperado: Planificaci\u00f3n detallada con las fechas y objetivos de cada actividad formativa.   </li> <li>Ejemplo de cronograma:    </li> </ul> Fecha Actividad Objetivo Enero (Semana 1) Evaluaci\u00f3n inicial Medir conocimientos actuales Febrero (Semana 2) Taller de phishing para administrativos Reconocer correos maliciosos Marzo (Semana 3) Simulaci\u00f3n de ransomware para t\u00e9cnicos Evaluar respuesta a incidentes","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#42-distribucion-de-materiales","title":"4.2. Distribuci\u00f3n de Materiales","text":"<ul> <li>Resultado esperado: Detalle de los canales y m\u00e9todos de entrega de los materiales (correo, intranet, impresiones en espacios comunes).</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#43-roles-en-la-ejecucion","title":"4.3. Roles en la Ejecuci\u00f3n","text":"<ul> <li>Resultado esperado: Definici\u00f3n de responsables para cada actividad, como instructores internos, proveedores externos o l\u00edderes de equipo.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#5-evaluacion-del-plan","title":"5. Evaluaci\u00f3n del Plan","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#51-metricas-de-evaluacion","title":"5.1. M\u00e9tricas de Evaluaci\u00f3n","text":"<ul> <li> <p>Resultado esperado: Lista de indicadores clave para medir el \u00e9xito del plan, como:    </p> <ul> <li>Tasa de participaci\u00f3n en formaciones.</li> <li>Resultados en simulaciones de phishing.</li> <li>Reducci\u00f3n en incidentes reales reportados.</li> </ul> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#52-formularios-de-evaluacion","title":"5.2. Formularios de Evaluaci\u00f3n","text":"<ul> <li> <p>Resultado esperado: Herramientas para recopilar datos sobre el impacto del plan, como:</p> <ul> <li>Encuestas de satisfacci\u00f3n.</li> <li>Cuestionarios post-formaci\u00f3n.</li> </ul> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#53-revision-de-resultados","title":"5.3. Revisi\u00f3n de Resultados","text":"<ul> <li>Resultado esperado: Informe consolidado con los resultados de las m\u00e9tricas y recomendaciones para mejorar.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#6-mejora-continua-y-actualizacion","title":"6. Mejora Continua y Actualizaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#61-revision-periodica","title":"6.1. Revisi\u00f3n Peri\u00f3dica","text":"<ul> <li>Resultado esperado: Plan para actualizar los contenidos y m\u00e9todos seg\u00fan amenazas emergentes y resultados obtenidos. </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#62-integracion-de-sugerencias","title":"6.2. Integraci\u00f3n de Sugerencias","text":"<ul> <li>Resultado esperado: Incorporaci\u00f3n de comentarios y retroalimentaci\u00f3n de los empleados para refinar el plan.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#63-preparacion-para-nuevas-amenazas","title":"6.3. Preparaci\u00f3n para Nuevas Amenazas","text":"<ul> <li>Resultado esperado: Plan de contingencia para incluir temas emergentes, como ataques de inteligencia artificial o deepfakes.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#contenido-esperado-al-completar-el-plan","title":"Contenido esperado al completar el plan","text":"<ul> <li>Formularios: Encuestas iniciales y de evaluaci\u00f3n, pruebas de conocimiento.</li> <li>Tablas: Relaci\u00f3n de roles con contenidos y materiales; cronograma detallado.</li> <li>Cronograma: Fechas claras para la ejecuci\u00f3n de cada actividad formativa.</li> <li>Materiales: Gu\u00edas, infograf\u00edas, Presentaciones, Posters, Videos, etc.</li> <li>Informe de evaluaci\u00f3n: M\u00e9tricas clave y an\u00e1lisis de resultados.</li> <li>Plan de actualizaci\u00f3n: Estrategias para mantener el plan relevante y efectivo.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#indice-adaptado-para-un-plan-de-formacion-y-concienciacion-en-un-instituto-de-ensenanza-secundaria","title":"\u00cdndice Adaptado para un Plan de Formaci\u00f3n y Concienciaci\u00f3n en un Instituto de Ense\u00f1anza Secundaria","text":"<p>Este \u00edndice es un ejemplo de como se podr\u00eda a justar a las necesidades espec\u00edficas de un instituto, teniendo en cuenta las preocupaciones de alumnos, profesores y familias. El objetivo es abordar los riesgos identificados mediante contenidos formativos y estrategias adaptadas a cada grupo, con ejemplos pr\u00e1cticos y metodolog\u00edas din\u00e1micas.</p> <p>No pretende ser un \u00edndice exhaustivo, sino una gu\u00eda para estructurar un plan de formaci\u00f3n y concienciaci\u00f3n en ciberseguridad en un entorno educativo.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#1-introduccion-y-contexto","title":"1. Introducci\u00f3n y Contexto","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#11-justificacion-del-plan_1","title":"1.1. Justificaci\u00f3n del Plan","text":"<ul> <li> <p>Contenido esperado: Explicaci\u00f3n de los riesgos espec\u00edficos en el \u00e1mbito educativo (uso excesivo del m\u00f3vil, ciberbullying, p\u00e9rdida de contrase\u00f1as) y c\u00f3mo afectan a alumnos, profesores y familias. En general aquello que han trasladado las responsables, respecto a sus precoupaciones.</p> </li> <li> <p>Ejemplo: Un caso real de ciberbullying que resalta la importancia de la formaci\u00f3n para prevenir y actuar ante estas situaciones.</p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#12-objetivos-del-plan_1","title":"1.2. Objetivos del Plan","text":"<ul> <li> <p>Contenido esperado: Definici\u00f3n de objetivos espec\u00edficos para cada grupo:</p> <ul> <li>Alumnos: Fomentar un uso responsable de dispositivos y redes sociales.</li> <li>Profesores: Proteger materiales cr\u00edticos y datos personales de los estudiantes.</li> <li>Familias: Comprender los riesgos digitales y c\u00f3mo guiar a sus hijos.</li> </ul> </li> <li> <p>Ejemplo: \u201cReducir incidentes de ciberbullying en un 50% mediante talleres y campa\u00f1as de sensibilizaci\u00f3n.\u201d</p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#13-alcance-del-plan_1","title":"1.3. Alcance del Plan","text":"<ul> <li>Contenido esperado: Delimitaci\u00f3n de las actividades que se centrar\u00e1n en cada grupo y el entorno (aulas, redes escolares, hogares).</li> <li>Ejemplo: Aclarar que el plan se centrar\u00e1 respecto al alumnado, en el uso adecuado del movil y posibles problemas por el uso continuado de este. POr otra parte cubrir\u00e1 el uso seguro de dispositivos personales y herramientas digitales de la escuela.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#2-diagnostico-inicial_1","title":"2. Diagn\u00f3stico Inicial","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#21-evaluacion-de-necesidades-por-grupo","title":"2.1. Evaluaci\u00f3n de Necesidades por Grupo","text":"<ul> <li>Contenido esperado: Encuestas espec\u00edficas para identificar los conocimientos, actitudes y preocupaciones de cada grupo, malas pr\u00e1cticas y riesgos percibidos.</li> <li> <p>Formulario sugerido:</p> <ul> <li>Alumnos: \u201c\u00bfSabes qu\u00e9 es el ciberbullying? \u00bfConoces c\u00f3mo proteger tu contrase\u00f1a?\u201d \"\u00bfCuantas horas al d\u00eda usas el m\u00f3vil?\"</li> <li>Profesores: \u201c\u00bfQu\u00e9 medidas tomas para proteger los documentos que usas en clase?\u201d \"\u00bfQu\u00e9 medidas tomas para proteger tus dispositivos?\"</li> <li>Familias: \u201c\u00bfSabes qu\u00e9 hacen tus hijos en redes sociales? \u00bfQu\u00e9 preocupaciones tienes sobre el mundo digital?\u201d</li> </ul> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#22-identificacion-de-riesgos-especificos","title":"2.2. Identificaci\u00f3n de Riesgos Espec\u00edficos","text":"<ul> <li>Contenido esperado: Listado de riesgos para cada grupo, basado en las encuestas y an\u00e1lisis de incidentes previos.</li> <li>Ejemplo:<ul> <li>Alumnos: Ciberbullying, p\u00e9rdida de dispositivos, huella digital.</li> <li>Profesores: P\u00e9rdida de material cr\u00edtico, sesiones abiertas en ordenadores compartidos.</li> <li>Familias: Desconexi\u00f3n generacional, desconocimiento de plataformas usadas por los hijos.</li> </ul> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#23-segmentacion-de-grupos-y-niveles","title":"2.3. Segmentaci\u00f3n de Grupos y Niveles","text":"<ul> <li>Contenido esperado: Clasificaci\u00f3n de grupos seg\u00fan nivel de conocimiento y riesgo.</li> <li> <p>Ejemplo:     </p> <ul> <li>Alumnos: Dividir en niveles de edad (menores de 14 a\u00f1os vs mayores) (ESO, Ciclos.</li> <li>Familias: Diferenciar por niveles de conocimiento digital.</li> <li>Profesores: Diferenciar por niveles de conocimiento digital.</li> </ul> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#3-diseno-del-plan-de-formacion-y-concienciacion_1","title":"3. Dise\u00f1o del Plan de Formaci\u00f3n y Concienciaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#31-definicion-de-contenidos-por-grupo","title":"3.1. Definici\u00f3n de Contenidos por Grupo","text":"<ul> <li> <p>Contenido esperado: Temas espec\u00edficos para cada grupo, adaptados a sus necesidades y riesgos.    </p> <ul> <li>Alumnos: Uso responsable del m\u00f3vil, evitar descargas ilegales, proteger contrase\u00f1as, gestionar su huella digital.</li> <li>Profesores: Protecci\u00f3n de documentos, pol\u00edticas de contrase\u00f1as, sesiones seguras en equipos compartidos.</li> <li>Familias: C\u00f3mo orientar a sus hijos, configuraciones de seguridad b\u00e1sica en dispositivos.</li> </ul> </li> <li> <p>Ejemplo de contenido para alumnos: \u201cUn taller sobre c\u00f3mo identificar mensajes peligrosos en redes sociales.\u201d</p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#32-asociacion-de-roles-contenidos-y-materiales_1","title":"3.2. Asociaci\u00f3n de Roles, Contenidos y Materiales","text":"<ul> <li>Contenido esperado: Tabla que relacione grupos con contenidos y materiales.</li> <li>Tabla sugerida:  </li> </ul> Grupo Contenidos Materiales Alumnos Ciberbullying, uso del m\u00f3vil V\u00eddeos, juegos interactivos Profesores Protecci\u00f3n de documentos Gu\u00edas, talleres pr\u00e1cticos Familias Huella digital de los hijos Tr\u00edpticos, presentaciones","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#33-metodologias-formativas_1","title":"3.3. Metodolog\u00edas Formativas","text":"<ul> <li>Contenido esperado: Estrategias espec\u00edficas para cada grupo, como talleres din\u00e1micos para alumnos, sesiones pr\u00e1cticas para profesores y charlas informativas para familias.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#4-ejecucion-del-plan_1","title":"4. Ejecuci\u00f3n del Plan","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#41-cronograma-de-actividades_1","title":"4.1. Cronograma de Actividades","text":"<ul> <li>Contenido esperado: Calendario con las fechas y actividades planificadas para cada grupo.</li> <li>Ejemplo de cronograma:  </li> </ul> Mes Actividad Grupo Enero Taller: Uso responsable del m\u00f3vil Alumnos Febrero Sesi\u00f3n: Protecci\u00f3n de documentos Profesores Marzo Charla: Huella digital de los hijos Familias","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#42-distribucion-de-materiales_1","title":"4.2. Distribuci\u00f3n de Materiales","text":"<ul> <li>Contenido esperado: Detalle de c\u00f3mo se entregar\u00e1n materiales a cada grupo (por correo, plataformas escolares, impresiones).</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#43-roles-en-la-ejecucion_1","title":"4.3. Roles en la Ejecuci\u00f3n","text":"<ul> <li>Contenido esperado: Asignaci\u00f3n de responsabilidades, como un coordinador TIC para supervisar el plan y profesores responsables de cada actividad.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#5-evaluacion-del-plan_1","title":"5. Evaluaci\u00f3n del Plan","text":"<p>5.1. M\u00e9tricas de Evaluaci\u00f3n - Contenido esperado: Indicadores clave, como:   </p> <pre><code>- Tasa de participaci\u00f3n en actividades.\n- Reducci\u00f3n de incidentes reportados (ciberbullying, p\u00e9rdida de dispositivos).\n</code></pre> <p>5.2. Formularios de Evaluaci\u00f3n - Contenido esperado: Encuestas de satisfacci\u00f3n para alumnos, profesores y familias tras cada actividad.</p> <p>5.3. Revisi\u00f3n de Resultados y Acciones Correctivas - Contenido esperado: Informe con an\u00e1lisis de resultados y recomendaciones para ajustar el plan.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#6-mejora-continua-y-actualizacion_1","title":"6. Mejora Continua y Actualizaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#61-revision-periodica_1","title":"6.1. Revisi\u00f3n Peri\u00f3dica","text":"<ul> <li>Contenido esperado: Proceso para actualizar los contenidos y m\u00e9todos cada semestre, integrando las \u00faltimas tendencias y tecnolog\u00edas educativas.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#62-integracion-de-sugerencias_1","title":"6.2. Integraci\u00f3n de Sugerencias","text":"<ul> <li>Contenido esperado: Incorporar el feedback de encuestas y reuniones con los grupos objetivo.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion-Eje/#elementos-clave-de-la-adaptacion-para-el-instituto","title":"Elementos Clave de la Adaptaci\u00f3n para el Instituto","text":"<ol> <li> <p>Formularios de recogida de informaci\u00f3n y evaluaci\u00f3n:</p> <ul> <li>Encuestas iniciales para identificar necesidades y preocupaciones.</li> <li>Encuestas de satisfacci\u00f3n para evaluar la efectividad del plan.</li> </ul> </li> <li> <p>Tablas resumenes de contenidos y materiales:</p> <ul> <li>Relaci\u00f3n clara de qu\u00e9 se ense\u00f1ar\u00e1 a cada grupo y qu\u00e9 materiales se utilizar\u00e1n. -.  Cronograma detallado con fechas y actividades planificadas.</li> </ul> </li> <li> <p>Enfocarse en ejemplos pr\u00e1cticos y cercanos:</p> <ul> <li>Alumnos: V\u00eddeos sobre las consecuencias de compartir contrase\u00f1as o descargar software pirata.</li> <li>Profesores: Taller sobre el uso seguro de dispositivos compartidos.</li> <li>Familias: Charla sobre c\u00f3mo supervisar el uso de redes sociales sin invadir la privacidad de los hijos.</li> </ul> </li> <li> <p>Metodolog\u00edas atractivas:</p> <ul> <li>Juegos para alumnos, como identificar amenazas en un entorno simulado.</li> <li>Talleres interactivos para profesores, usando casos reales de p\u00e9rdida de datos.</li> <li>Sesiones informativas sencillas para familias, con ejemplos claros y aplicaciones pr\u00e1cticas.</li> </ul> </li> <li> <p>Cronograma ajustado al calendario escolar:</p> <ul> <li>Integrar las actividades en reuniones de padres, sesiones de tutor\u00eda y d\u00edas de formaci\u00f3n del profesorado.</li> </ul> </li> <li> <p>Materiales que cubran las necesidades de cada grupo:</p> <ul> <li>Gu\u00edas para padres sobre control parental y configuraci\u00f3n de dispositivos.</li> <li>Infograf\u00edas para alumnos sobre c\u00f3mo proteger su informaci\u00f3n personal.</li> <li>Presentaciones para profesores sobre buenas pr\u00e1cticas en ciberseguridad.</li> </ul> </li> <li> <p>Informes de evaluaci\u00f3n claros y concisos:</p> <ul> <li>M\u00e9tricas clave para cada grupo, como tasa de participaci\u00f3n y reducci\u00f3n de incidentes.</li> <li>An\u00e1lisis de resultados con recomendaciones para futuras acciones.</li> </ul> </li> <li> <p>Plan de actualizaci\u00f3n y mejora continua: </p> <ul> <li>Estrategias para mantener el plan relevante y efectivo, como encuestas peri\u00f3dicas y seguimiento de tendencias educativas.</li> <li>Integraci\u00f3n de sugerencias y feedback de los participantes para refinar el plan y adaptarlo a las necesidades cambiantes.</li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/","title":"UD 1 - 4.1 Plan de concienciaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#41-plan-de-formacion-y-concienciacion-en-ciberseguridad","title":"4.1. Plan de Formaci\u00f3n y Concienciaci\u00f3n en Ciberseguridad","text":"<p>La formaci\u00f3n y concienciaci\u00f3n complementan las medidas t\u00e9cnicas de seguridad, permitiendo que los empleados sean un eslab\u00f3n fuerte en la protecci\u00f3n de la organizaci\u00f3n. Todas la medidas de seguridad, como cortafuegos, antivirus o sistemas de detecci\u00f3n de intrusos, pol\u00edticas de seguridad, etc., pueden ser in\u00fatiles si los empleados no est\u00e1n formados y concienciados en ciberseguridad.</p> <p> </p> Plan de Formaci\u00f3n y Concienciaci\u00f3n","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#1-introduccion-al-plan-de-formacion-y-concienciacion","title":"1. Introducci\u00f3n al plan de formaci\u00f3n y concienciaci\u00f3n","text":"<p>La ciberseguridad no solo depende de tecnolog\u00edas avanzadas, sino tambi\u00e9n del personal que las utiliza. Un Plan de Formaci\u00f3n y Concienciaci\u00f3n busca capacitar a los empleados para prevenir, mitigar o responder a posibles amenazas que puedan afectar a la organizaci\u00f3n. Este enfoque integral permite que todos, desde t\u00e9cnicos hasta personal administrativo, desempe\u00f1en un papel activo en la protecci\u00f3n de los activos digitales.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#11-mision-del-plan-de-formacion-y-concienciacion","title":"1.1. Misi\u00f3n del Plan de Formaci\u00f3n y Concienciaci\u00f3n","text":"<p>El objetivo principal del plan es crear una fuerza laboral consciente y preparada. Esto significa que cada empleado debe ser capaz de:</p> <ul> <li>Identificar amenazas potenciales, como correos de phishing o enlaces sospechosos.</li> <li>Mitigar riesgos, tomando decisiones informadas al interactuar con los sistemas corporativos.</li> <li>Responder adecuadamente en caso de un incidente, como notificar a los equipos de seguridad o desconectar dispositivos afectados.</li> </ul> <p>Una organizaci\u00f3n con empleados formados y concienciados no solo mejora su postura de seguridad, sino que tambi\u00e9n reduce significativamente la posibilidad de incidentes.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#12-inclusividad-de-la-formacion-y-concienciacion","title":"1.2. Inclusividad de la formaci\u00f3n y concienciaci\u00f3n","text":"<p>El Plan de Formaci\u00f3n y Concienciaci\u00f3n debe estar dise\u00f1ado para ser inclusivo y continuo</p> <p>. En lo que respecta a la inclusividad, tenemos que asegurarnos que todos los niveles de la organizaci\u00f3n est\u00e9n alineados en t\u00e9rminos de seguridad.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#121-formacion-para-todo-el-personal","title":"1.2.1. Formaci\u00f3n para todo el personal","text":"<p>La formaci\u00f3n inicial es crucial para que todos los empleados comiencen con un conocimiento b\u00e1sico de seguridad. Seg\u00fan los roles, esta formaci\u00f3n se divide en:</p> <ol> <li> <p>Formaci\u00f3n t\u00e9cnica:    </p> <ul> <li>Dirigida al personal especializado, como administradores de sistemas y t\u00e9cnicos de TI.    </li> <li>Enfocada en temas como configuraci\u00f3n segura de sistemas, gesti\u00f3n de vulnerabilidades y respuesta a incidentes.   </li> <li>Ejemplo: Un t\u00e9cnico debe aprender a aplicar parches de seguridad en los sistemas cr\u00edticos para prevenir exploits.   </li> </ul> </li> <li> <p>Formaci\u00f3n b\u00e1sica:    </p> <ul> <li>Dise\u00f1ada para el resto del personal, enfoc\u00e1ndose en temas como el reconocimiento de correos de phishing, uso seguro de contrase\u00f1as y manejo responsable de dispositivos corporativos.    </li> <li>Ejemplo: Ense\u00f1ar a los empleados a detectar correos maliciosos bas\u00e1ndose en errores de gram\u00e1tica o URLs sospechosas.</li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#122-concienciacion-general-para-todos-los-empleados","title":"1.2.2. Concienciaci\u00f3n general para todos los empleados","text":"<p>La concienciaci\u00f3n no requiere conocimientos t\u00e9cnicos avanzados, pero busca garantizar que todos los empleados comprendan la importancia de la seguridad y c\u00f3mo su comportamiento puede influir en el bienestar de la organizaci\u00f3n. En difinitiva, generar una cultura de seguridad.</p> <ul> <li> <p>Temas clave:    </p> <ul> <li>No hacer clic en enlaces o descargar archivos de correos desconocidos.   </li> <li>Mantener los dispositivos bloqueados cuando no est\u00e1n en uso.   </li> <li>Utilizar redes Wi-Fi p\u00fablicas de manera segura (por ejemplo, mediante una VPN).   </li> </ul> </li> <li> <p>Ejemplo: Un empleado que se quiere conectar para trabajar desde la Wi-Fi de una cafeter\u00eda, deber\u00eda confirmar con el establecimiento el nombre de la red Wi-Fi antes de conectarse.</p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#13-continuidad-de-la-formacion-y-concienciacion","title":"1.3. Continuidad de la formaci\u00f3n y concienciaci\u00f3n","text":"<p>En cuanto a la continuidad, la formaci\u00f3n y la concienciaci\u00f3n no son actividades de una sola vez. La repetici\u00f3n y actualizaci\u00f3n son esenciales para garantizar que el personal est\u00e9 al d\u00eda con las amenazas y medidas m\u00e1s recientes.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#131-formacion-tecnica-actualizada","title":"1.3.1. Formaci\u00f3n t\u00e9cnica actualizada","text":"<p>Cada vez que se introducen cambios significativos en los sistemas de TI, se debe impartir formaci\u00f3n espec\u00edfica al personal t\u00e9cnico.</p> <ul> <li>Motivo: Los atacantes evolucionan constantemente, por lo que el personal t\u00e9cnico debe conocer las nuevas configuraciones o herramientas de seguridad implementadas.     </li> <li>Ejemplo: Si se instala un nuevo sistema de detecci\u00f3n de intrusos (IDS), los t\u00e9cnicos deben ser formados para configurarlo, interpretar sus alertas y responder a posibles incidentes.    </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#132-refresco-de-normativas-de-seguridad","title":"1.3.2. Refresco de normativas de seguridad","text":"<p>Incluso si no se producen incidentes, ni cambios tecnol\u00f3gicos, es fundamental reforzar peri\u00f3dicamente las normativas de seguridad para todo el personal.</p> <ul> <li>Beneficio: Mantener la seguridad como una prioridad diaria y no algo que se deje en segundo plano.     </li> <li>Ejemplo: Enviar recordatorios trimestrales sobre la pol\u00edtica de uso responsable de contrase\u00f1as, junto con ejemplos de c\u00f3mo crear una contrase\u00f1a segura.     </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#14-ejemplo-final-un-dia-en-la-vida-de-un-empleado-concienciado","title":"1.4. Ejemplo final: Un d\u00eda en la vida de un empleado concienciado","text":"<p>Imaginemos a Laura, que trabaja en el departamento de Recursos Humanos. Durante su formaci\u00f3n inicial, aprendi\u00f3 a identificar correos de phishing. Un d\u00eda recibe un correo que parece provenir de su jefe con un archivo adjunto titulado \u201cSalarios_2024.xlsx\u201d. Aunque el correo tiene apariencia leg\u00edtima, Laura nota que el remitente utiliza un dominio extra\u00f1o. Gracias a su formaci\u00f3n, no abre el archivo, notifica al equipo de TI y evita un ataque que podr\u00eda haber comprometido datos sensibles de la empresa.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#2-criterios-para-el-diseno-del-plan-de-formacion-y-concienciacion","title":"2. Criterios para el Dise\u00f1o del Plan de Formaci\u00f3n y Concienciaci\u00f3n","text":"<p>El dise\u00f1o de un Plan de Formaci\u00f3n y Concienciaci\u00f3n en ciberseguridad debe garantizar que todos los empleados est\u00e9n capacitados y preparados para proteger los activos de la organizaci\u00f3n. Este proceso requiere establecer criterios claros en el dise\u00f1o del plan,  para que cada persona:</p> <ul> <li>Conozca y entienda las normativas y medidas de seguridad.    </li> <li>Sea capaz de identificar comportamientos sospechosos o incidentes. </li> <li>Notifique de manera efectiva al personal especializado cualquier anomal\u00eda.   </li> </ul> <p>Por otra parte, el dise\u00f1o debe adaptarse a las caracter\u00edsticas de la organizaci\u00f3n, sus empleados y los servicios que utiliza, asegurando que sea pr\u00e1ctico, comprensible y aplicable para todos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#21-nivel-de-inicio","title":"2.1. Nivel de inicio","text":"<p>Antes de desarrollar los contenidos de formaci\u00f3n, es necesario evaluar los niveles de conocimiento de los empleados para dise\u00f1ar una capacitaci\u00f3n adecuada. Esto evita que sea demasiado b\u00e1sica para algunos o compleja para otros, promoviendo el inter\u00e9s y la efectividad.</p> <p>Para lograr esto, se realiza una evaluaci\u00f3n inicial con preguntas como:    </p> <ul> <li>\u00bfSaben reconocer un correo de phishing?</li> <li>\u00bfConocen las buenas pr\u00e1cticas para crear contrase\u00f1as seguras?</li> <li>\u00bfEst\u00e1n familiarizados con los procedimientos para reportar un incidente?</li> </ul> <p>Estas evaluaciones iniciales se pueden realizar mediante cuestionarios, pruebas de conocimiento o simulaciones de ataques, y permiten adaptar la formaci\u00f3n a las necesidades reales de los empleados, y particularizando tanto a empleados con conocimientos b\u00e1sicos como a aquellos con experiencia t\u00e9cnica.</p> <p>Por ejemplo, si en una empresa se detecta que el 70% de los empleados no sabe c\u00f3mo verificar la autenticidad de un enlace en un correo, la formaci\u00f3n inicial incluir\u00e1 ejercicios pr\u00e1cticos como analizar correos falsos y aprender a identificar se\u00f1ales de phishing.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#22-factores-clave-en-el-diseno","title":"2.2. Factores clave en el dise\u00f1o","text":"<p>El dise\u00f1o de la formaci\u00f3n debe considerar varios elementos que influyen en las necesidades espec\u00edficas de formaci\u00f3n de los empleados de la organizaci\u00f3n.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#221-roles-existentes-en-la-organizacion","title":"2.2.1. Roles existentes en la organizaci\u00f3n","text":"<p>Cada rol tiene responsabilidades y necesidades diferentes seg\u00fan las tareas que realiza y la informaci\u00f3n que maneja. La formaci\u00f3n debe adaptarse para que sea relevante para cada grupo de empleados.</p> <p>Por ejemplo:    </p> <ul> <li>El personal t\u00e9cnico, como administradores de sistemas, necesitar\u00e1 formaci\u00f3n avanzada en \u00e1reas como gesti\u00f3n de vulnerabilidades o an\u00e1lisis de incidentes. Un t\u00e9cnico aprender\u00e1 a configurar cortafuegos para bloquear ataques entrantes.     </li> <li>El personal administrativo recibir\u00e1 formaci\u00f3n b\u00e1sica orientada a evitar errores comunes como el uso de contrase\u00f1as d\u00e9biles o la apertura de archivos adjuntos sospechosos. Un empleado de oficina puede aprender c\u00f3mo verificar el remitente de un correo antes de abrir un archivo adjunto.     </li> <li>Los gerentes ser\u00e1n capacitados en la gesti\u00f3n de incidentes, para que sepan c\u00f3mo coordinar una respuesta eficaz si ocurre una brecha de seguridad.    </li> </ul> <p>Es fundamental evitar el uso de jerga t\u00e9cnica con empleados no especializados. Por ejemplo, en lugar de explicar que \u201cun ransomware cifra archivos utilizando un algoritmo de clave asim\u00e9trica\u201d, se puede decir: \u201cUn ataque ransomware bloquea tus archivos y exige un pago para desbloquearlos\u201d.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#223-tipos-de-informacion-en-la-organizacion","title":"2.2.3. Tipos de informaci\u00f3n en la organizaci\u00f3n","text":"<p>Adem\u00e1s de contrase\u00f1as y credenciales, las organizaciones manejan diferentes tipos de informaci\u00f3n confidencial que deben protegerse, como:</p> <ul> <li>Documentos financieros, como balances o presupuestos.</li> <li>Datos de RR.HH., como n\u00f3minas y contratos de empleados.</li> <li>Informaci\u00f3n sobre salud, en caso de manejar historiales m\u00e9dicos o datos sensibles.</li> <li>Proyectos de infraestructuras cr\u00edticas, como planos o especificaciones t\u00e9cnicas.</li> <li>Datos confidenciales, como estrategias de negocio o propiedad intelectual.</li> </ul> <p>Por ejemplo, en un hospital, los empleados deben ser entrenados para evitar compartir informaci\u00f3n m\u00e9dica de los pacientes por canales no seguros, como correos sin cifrar o mensajes instant\u00e1neos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#224-servicios-disponibles-en-la-organizacion","title":"2.2.4.  Servicios disponibles en la organizaci\u00f3n","text":"<p>Los servicios que utiliza la organizaci\u00f3n tambi\u00e9n deben considerarse en el dise\u00f1o de la formaci\u00f3n. Esto incluye herramientas como:</p> <ul> <li>P\u00e1ginas web corporativas: Capacitar al personal de TI en la protecci\u00f3n contra ataques como inyecciones SQL o DDoS.    </li> <li>Almacenamiento en la nube: Ense\u00f1ar a los empleados c\u00f3mo gestionar permisos en plataformas como Google Drive o OneDrive, asegur\u00e1ndose de no compartir documentos confidenciales p\u00fablicamente.     </li> <li>Redes sociales corporativas: Entrenar a los encargados de gestionar redes sociales para detectar intentos de suplantaci\u00f3n de identidad o manipulaci\u00f3n de cuentas oficiales.     </li> </ul> <p>Un Ejemplo ser\u00eda ense\u00f1ar a un empleado que gestiona las redes sociales de la empresa a reconocer mensajes maliciosos dirigidos a hackear la cuenta oficial, como correos falsos de \"verificaci\u00f3n de cuenta\".</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#225-politicas-de-la-empresa","title":"2.2.5.  Pol\u00edticas de la empresa","text":"<p>Las pol\u00edticas internas tambi\u00e9n afectan c\u00f3mo se dise\u00f1a la formaci\u00f3n. Dos aspectos clave son:</p> <ol> <li> <p>Trabajo presencial y remoto:    </p> <ul> <li>En el caso de empleados remotos, se debe incluir formaci\u00f3n en el uso de redes Wi-Fi seguras y herramientas como VPN para proteger las conexiones.</li> <li>Ejemplo: Un empleado que trabaja desde casa debe aprender a identificar redes Wi-Fi p\u00fablicas inseguras y c\u00f3mo evitar conectarse sin usar una VPN.</li> </ul> </li> <li> <p>Uso de dispositivos corporativos o personales (BYOD):    </p> <ul> <li>Para dispositivos personales, es importante ense\u00f1ar pr\u00e1cticas de seguridad como mantener los sistemas actualizados y utilizar herramientas de cifrado.</li> <li>Ejemplo: Si un empleado usa su m\u00f3vil para acceder al correo corporativo, debe saber configurar la autenticaci\u00f3n de dos factores y evitar almacenar contrase\u00f1as en aplicaciones no autorizadas.</li> </ul> </li> </ol> <p>Para mas informaci\u00f3n sobre pol\u00edticas de seguridad, puedes consultar el punto Pol\u00edtica de puesto de usuario.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#226-caracteristicas-especificas-del-negocio","title":"2.2.6. Caracter\u00edsticas espec\u00edficas del negocio","text":"<p>Las caracter\u00edsticas propias de la organizaci\u00f3n tambi\u00e9n influyen en el dise\u00f1o del plan:</p> <ul> <li> <p>Tama\u00f1o de la empresa:    </p> <ul> <li>En organizaciones grandes, se pueden realizar capacitaciones en grupos separados por departamentos o roles.    </li> <li>En empresas peque\u00f1as, se pueden realizar talleres personalizados y m\u00e1s interactivos.    </li> </ul> </li> <li> <p>\u00c1mbito de negocio:     </p> <ul> <li>Una empresa de e-commerce necesitar\u00e1 priorizar la seguridad en transacciones y protecci\u00f3n de datos de clientes, mientras que una compa\u00f1\u00eda de transporte p\u00fablico se centrar\u00e1 en proteger sistemas cr\u00edticos como el control de flotas.    </li> </ul> </li> <li> <p>Horarios y turnos de trabajo:     </p> <ul> <li>Para empleados con turnos nocturnos o roles de atenci\u00f3n 24/7, es ideal implementar capacitaciones en l\u00ednea que puedan realizarse de manera flexible.</li> </ul> </li> <li> <p>Ubicaci\u00f3n y sedes:     </p> <ul> <li>Empresas con oficinas en diferentes pa\u00edses deben ajustar la formaci\u00f3n para cumplir con normativas locales, como el GDPR en Europa o la CCPA en EE.UU.</li> </ul> </li> </ul> <p>Por ejemplo, una empresa multinacional que opera en Europa debe capacitar a su personal sobre el manejo adecuado de datos personales seg\u00fan el Reglamento General de Protecci\u00f3n de Datos (GDPR).</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#23-ejemplo-del-diseno-del-plan","title":"2.3. Ejemplo del dise\u00f1o del plan","text":"<p>Imaginemos una empresa que maneja informaci\u00f3n financiera y tiene tanto personal administrativo como t\u00e9cnico, adem\u00e1s de una pol\u00edtica de trabajo h\u00edbrido. El dise\u00f1o del plan incluir\u00eda:</p> <ol> <li>Evaluaci\u00f3n inicial: Una encuesta para identificar el conocimiento actual del personal, detectando que la mayor\u00eda tiene problemas para identificar correos de phishing.     </li> <li> <p>Formaci\u00f3n por roles:    </p> <ul> <li>El equipo t\u00e9cnico recibe capacitaci\u00f3n sobre c\u00f3mo gestionar actualizaciones y proteger servidores.     </li> <li>El equipo administrativo aprende a manejar documentos financieros de manera segura y a reconocer intentos de phishing.    </li> </ul> </li> <li> <p>Pol\u00edticas de trabajo h\u00edbrido: Se les ense\u00f1a a los empleados remotos a usar VPN, evitar redes Wi-Fi p\u00fablicas y almacenar informaci\u00f3n en plataformas corporativas seguras.    </p> </li> <li>Adaptaci\u00f3n a horarios: Se ofrecen talleres en l\u00ednea para que los empleados con turnos nocturnos puedan acceder a la formaci\u00f3n en horarios flexibles. </li> <li>Actualizaci\u00f3n continua: Cada seis meses, se realizan simulacros de phishing para evaluar si los empleados aplican lo aprendido y refrescar los contenidos.</li> </ol> <p>Con estos criterios, el dise\u00f1o del plan ser\u00e1 inclusivo, continuo, efectivo y orientado a las necesidades reales de la organizaci\u00f3n y su personal.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#3-contenidos-de-la-formacion","title":"3. Contenidos de la Formaci\u00f3n","text":"<p>La formaci\u00f3n en ciberseguridad debe partir de los conocimientos previos de los empleados para asegurar que todos comprendan los conceptos b\u00e1sicos antes de profundizar en aspectos m\u00e1s avanzados. Esto permite adaptar la capacitaci\u00f3n a los niveles de experiencia detectados durante la evaluaci\u00f3n inicial y mantenerla relevante y efectiva.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#31-conceptos-basicos","title":"3.1. Conceptos b\u00e1sicos","text":"<p>La formaci\u00f3n comenzar\u00e1 con temas esenciales que son comunes a todos los empleados, independientemente de su rol. Estos contenidos se centran en comportamientos seguros y buenas pr\u00e1cticas que reducen los riesgos de seguridad en la organizaci\u00f3n. Algunos temas a trabajar son:</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#311-uso-de-contrasenas-y-sistemas-de-verificacion","title":"3.1.1. Uso de contrase\u00f1as y sistemas de verificaci\u00f3n","text":"<ul> <li>Objetivo: Ense\u00f1ar a los empleados a crear y gestionar contrase\u00f1as seguras y a utilizar sistemas de autenticaci\u00f3n de m\u00faltiples factores (MFA).</li> <li>Ejemplo: Aprender a generar una contrase\u00f1a usando las iniciales de una frase, como \u201cMe gusta el caf\u00e9 con leche\u201d \u2192 MgECCL2024!.</li> <li>Consejo: Introducir administradores de contrase\u00f1as para evitar contrase\u00f1as repetidas o d\u00e9biles.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#312-reconocimiento-de-phishing","title":"3.1.2. Reconocimiento de phishing","text":"<ul> <li>Objetivo: Capacitar a los empleados para identificar correos electr\u00f3nicos y mensajes sospechosos que intenten robar informaci\u00f3n confidencial.</li> <li>Ejemplo: Presentar simulacros de correos de phishing con errores comunes, como un dominio falso (empresaa.com en lugar de empresa.com).</li> <li>Consejo: Enfatizar la importancia de no hacer clic en enlaces o descargar archivos de remitentes desconocidos.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#313-peligros-de-descargas-y-uso-de-software-no-autorizado","title":"3.1.3. Peligros de descargas y uso de software no autorizado","text":"<ul> <li>Objetivo: Concienciar sobre los riesgos de instalar software no aprobado, que podr\u00eda contener malware o comprometer la seguridad de la red.</li> <li>Ejemplo: Mostrar casos reales donde programas descargados de sitios no oficiales infectaron sistemas empresariales.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#314-uso-apropiado-de-internet","title":"3.1.4. Uso apropiado de internet","text":"<ul> <li>Objetivo: Establecer normas para navegar de manera segura y evitar visitar sitios web sospechosos o inapropiados.</li> <li>Ejemplo: Ense\u00f1ar a verificar certificados de seguridad en p\u00e1ginas web para compras en l\u00ednea o transferencias bancarias.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#315-ingenieria-social","title":"3.1.5. Ingenier\u00eda social","text":"<ul> <li>Objetivo: Detectar y prevenir intentos de manipulaci\u00f3n psicol\u00f3gica dise\u00f1ados para obtener informaci\u00f3n confidencial.</li> <li>Ejemplo: Relatar un escenario donde una llamada telef\u00f3nica pretende ser del soporte t\u00e9cnico para obtener credenciales.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#316-uso-de-dispositivos-de-almacenamiento-externos","title":"3.1.6. Uso de dispositivos de almacenamiento externos","text":"<ul> <li>Objetivo: Capacitar sobre los riesgos de conectar dispositivos externos no verificados, como pendrives, a los sistemas corporativos.</li> <li>Ejemplo: Explicar c\u00f3mo un USB infectado podr\u00eda contener un malware capaz de robar informaci\u00f3n.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#317-politicas-de-trabajo-remoto","title":"3.1.7. Pol\u00edticas de trabajo remoto","text":"<ul> <li>Objetivo: Ense\u00f1ar pr\u00e1cticas seguras para trabajar desde casa o en ubicaciones externas.</li> <li>Ejemplo: Mostrar c\u00f3mo usar una VPN para proteger las conexiones a la red corporativa.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#318-uso-de-redes-inalambricas","title":"3.1.8. Uso de redes inal\u00e1mbricas","text":"<ul> <li>Objetivo: Prevenir conexiones inseguras a redes Wi-Fi p\u00fablicas.</li> <li>Ejemplo: Ense\u00f1ar a verificar el nombre del punto de acceso con el establecimiento antes de conectarse.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#319-actualizacion-del-software","title":"3.1.9. Actualizaci\u00f3n del software","text":"<ul> <li>Objetivo: Fomentar la instalaci\u00f3n de actualizaciones y parches para reducir vulnerabilidades en sistemas y aplicaciones.</li> <li>Ejemplo: Explicar c\u00f3mo un sistema desactualizado puede ser vulnerable a exploits conocidos, como ocurri\u00f3 en el caso del ransomware WannaCry.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#3110-copias-de-seguridad","title":"3.1.10. Copias de seguridad","text":"<ul> <li>Objetivo: Capacitar sobre la importancia de realizar copias de seguridad regularmente para proteger la informaci\u00f3n ante incidentes.</li> <li>Ejemplo: Mostrar c\u00f3mo una copia de seguridad bien hecha puede salvar datos tras un ataque de ransomware.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#3111-notificacion-de-incidentes","title":"3.1.11. Notificaci\u00f3n de incidentes","text":"<ul> <li>Objetivo: Establecer procedimientos claros para reportar incidentes de seguridad.</li> <li>Ejemplo: Instruir a los empleados sobre c\u00f3mo contactar al equipo de TI si detectan un correo malicioso o actividad sospechosa.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#3112-leyes-y-normativas-rgpd-lopd-gdd","title":"3.1.12. Leyes y normativas (RGPD, LOPD GDD)","text":"<ul> <li>Objetivo: Proporcionar una visi\u00f3n general de las leyes de protecci\u00f3n de datos relevantes para la organizaci\u00f3n.</li> <li>Ejemplo: Explicar c\u00f3mo manejar datos personales de acuerdo con el RGPD, como obtener el consentimiento expl\u00edcito antes de recopilar informaci\u00f3n de clientes.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#3113-politicas-de-mesa-limpia","title":"3.1.13. Pol\u00edticas de \u201cmesa limpia\u201d","text":"<ul> <li>Objetivo: Promover el h\u00e1bito de mantener los escritorios y estaciones de trabajo libres de documentos o dispositivos confidenciales cuando no est\u00e9n en uso.</li> <li>Ejemplo: Ense\u00f1ar a guardar contratos, informes u otros materiales sensibles en armarios cerrados al final de la jornada laboral.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#32-personalizacion-y-profundizacion","title":"3.2. Personalizaci\u00f3n y profundizaci\u00f3n","text":"<p>A medida que los empleados dominen los conceptos b\u00e1sicos, la formaci\u00f3n podr\u00e1 incluir contenidos m\u00e1s avanzados basados en sus roles o departamentos.</p> <p>Por ejemplo: - Equipo de TI: Profundizaci\u00f3n en an\u00e1lisis forense, gesti\u00f3n de firewalls y detecci\u00f3n de intrusos. - RR.HH.: Manejo de datos personales de empleados seg\u00fan el RGPD. - Finanzas: Identificaci\u00f3n de fraudes en transferencias bancarias y medidas para proteger sistemas de pago.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#33-ejemplo-de-capacitacion","title":"3.3. Ejemplo de capacitaci\u00f3n","text":"<p>Escenario 1: Se realiza una sesi\u00f3n de formaci\u00f3n donde los empleados reciben ejemplos de correos de phishing reales. Aprenden a identificar se\u00f1ales sospechosas, como direcciones de remitente inusuales o errores gramaticales. Despu\u00e9s, los empleados participan en un simulacro donde deben responder si un correo es leg\u00edtimo o fraudulento.</p> <p>Escenario 2: En una capacitaci\u00f3n sobre dispositivos de almacenamiento externos, se entrega a cada participante un USB ficticio con etiquetas llamativas como \u201cConfidencial \u2013 N\u00f3minas\u201d. Se simula c\u00f3mo un empleado curioso podr\u00eda introducirlo en un ordenador, y se explica el riesgo de esta acci\u00f3n.</p> <p>Con esta estructura, la formaci\u00f3n ser\u00e1 pr\u00e1ctica, accesible y efectiva para crear una cultura de seguridad s\u00f3lida dentro de la organizaci\u00f3n.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#4-elaboracion-del-plan-de-formacion-y-concienciacion","title":"4. Elaboraci\u00f3n del Plan de Formaci\u00f3n y Concienciaci\u00f3n","text":"Ciclo Plan de Formaci\u00f3n y Concienciaci\u00f3n <p>La elaboraci\u00f3n de un Plan de Formaci\u00f3n y Concienciaci\u00f3n es el primer paso hacia la creaci\u00f3n de una cultura de ciberseguridad en la organizaci\u00f3n. Este proceso debe ser estrat\u00e9gico, considerando los objetivos generales, las necesidades espec\u00edficas de formaci\u00f3n y la variedad de roles dentro de la empresa.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#41-objetivos-del-plan","title":"4.1. Objetivos del Plan","text":"<p>El principal objetivo del plan es fomentar una cultura de ciberseguridad, es decir, lograr que los empleados no solo sigan pol\u00edticas de seguridad, sino concienciar, es decir, que entiendan y valoren su importancia. Esto ayuda a minimizar el riesgo de incidentes y fortalece la protecci\u00f3n de los activos corporativos.</p> <p>Objetivos espec\u00edficos:     </p> <ol> <li> <p>Proteger los datos corporativos: Reducir la exposici\u00f3n de informaci\u00f3n sensible a amenazas internas y externas.    </p> <ul> <li>Ejemplo: Asegurar que los empleados sepan cifrar documentos antes de compartirlos externamente.   </li> </ul> </li> <li> <p>Promover pr\u00e1cticas seguras: Ense\u00f1ar h\u00e1bitos cotidianos que reduzcan riesgos, como el uso de contrase\u00f1as robustas y la identificaci\u00f3n de correos maliciosos.    </p> <ul> <li>Ejemplo: Realizar un taller pr\u00e1ctico para que cada empleado configure autenticaci\u00f3n de dos factores (2FA) en sus cuentas laborales.      </li> </ul> </li> <li> <p>Concienciar sobre amenazas potenciales: Hacer que los empleados sean capaces de reconocer t\u00e1cticas de ingenier\u00eda social, intentos de phishing y otras amenazas.    </p> <ul> <li>Ejemplo: Mostrar ejemplos reales de ataques a empresas similares para enfatizar los riesgos.</li> </ul> </li> </ol> <p>Un plan con estos objetivos no solo refuerza la seguridad, sino que tambi\u00e9n crea empleados m\u00e1s conscientes y responsables.</p> <p>Resultado esperado: Los objetivos claros y medibles que gu\u00eden el dise\u00f1o y la implementaci\u00f3n del plan, asegurando que cada actividad formativa contribuya a la seguridad de la organizaci\u00f3n.   </p> <ul> <li>Objetivo centrados en la protecci\u00f3n de los datos corporativos, promover pr\u00e1cticas seguras y concienciar sobre amenazas potenciales.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#42-evaluacion-de-las-necesidades-de-formacion","title":"4.2. Evaluaci\u00f3n de las Necesidades de Formaci\u00f3n","text":"<p>Antes de dise\u00f1ar los contenidos y estrategias formativas, como ya comentamos anteriormente, es imprescindible realizar una evaluaci\u00f3n inicial que permita identificar:     </p> <ul> <li>\u00c1reas de debilidad: \u00bfD\u00f3nde existen brechas en el conocimiento o la pr\u00e1ctica de la ciberseguridad?    </li> <li>Recursos necesarios: \u00bfQu\u00e9 materiales, herramientas o tiempo se requieren para abordar estas debilidades?     </li> </ul> <p>Los pasos para la evaluaci\u00f3n:</p> <ol> <li> <p>Realizar encuestas y pruebas de conocimiento:     </p> <ul> <li>Aplicar cuestionarios para medir el nivel de comprensi\u00f3n sobre temas clave, como phishing o uso de contrase\u00f1as.     </li> <li>Ejemplo: Una encuesta revela que solo el 40% de los empleados sabe c\u00f3mo verificar un enlace en un correo electr\u00f3nico.     </li> </ul> </li> <li> <p>Entrevistas con l\u00edderes de equipos y responsables t\u00e9cnicos:      </p> <ul> <li>Recopilar informaci\u00f3n sobre incidentes pasados o puntos cr\u00edticos en la seguridad de cada departamento.     </li> <li>Ejemplo: El equipo de TI reporta que muchos empleados no actualizan sus sistemas, lo que expone la organizaci\u00f3n a vulnerabilidades conocidas.     </li> </ul> </li> <li> <p>Simulaciones de ataques:    </p> <ul> <li>Realizar pruebas pr\u00e1cticas, como una campa\u00f1a de phishing simulada, para medir el comportamiento real de los empleados frente a amenazas.     </li> <li>Ejemplo: Enviar un correo simulado con un enlace sospechoso y registrar cu\u00e1ntos empleados hacen clic en \u00e9l.     </li> </ul> </li> </ol> <p>Resultado esperado: Una evaluaci\u00f3n inicial, que nos proporcionar\u00e1 datos concretos para:</p> <ul> <li>Una lista de debilidades, que nos permitir\u00e1 contenidos enfocados en las \u00e1reas de mayor riesgo. Ej:      </li> <li>Una priorizaci\u00f3n sobre \u00e1reas cr\u00edticas, como la capacitaci\u00f3n en la identificaci\u00f3n de amenazas comunes o la protecci\u00f3n de datos sensibles.</li> <li>La identificaci\u00f3n de recursos necesarios, como herramientas de formaci\u00f3n, tiempo de los empleados y apoyo de los l\u00edderes de equipo.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#43-roles-incluidos-en-el-plan-de-formacion-y-concienciacion","title":"4.3. Roles Incluidos en el Plan de Formaci\u00f3n y Concienciaci\u00f3n","text":"<p>Cada empleado tiene un papel importante en la seguridad de la organizaci\u00f3n. Por ello, el plan debe segmentar los contenidos y estrategias seg\u00fan los roles, departamentos y caracter\u00edsticas espec\u00edficas de los empleados.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#431-inclusion-por-roles-y-departamentos","title":"4.3.1. Inclusi\u00f3n por roles y departamentos","text":"<ol> <li> <p>Empleados t\u00e9cnicos:</p> <ul> <li>Requieren formaci\u00f3n avanzada en \u00e1reas como gesti\u00f3n de vulnerabilidades, configuraci\u00f3n de firewalls, y respuesta a incidentes.    </li> <li>Ejemplo: Un administrador de sistemas debe aprender a aplicar parches de seguridad en servidores cr\u00edticos de manera eficiente y sin afectar la operaci\u00f3n.     </li> </ul> </li> <li> <p>Personal administrativo:</p> <ul> <li>Necesitan formaci\u00f3n b\u00e1sica en el manejo seguro de datos, como evitar compartir informaci\u00f3n sensible por correo no cifrado.     </li> <li>Ejemplo: Un empleado de RR.HH. aprende a proteger datos de n\u00f3minas utilizando contrase\u00f1as cifradas para archivos adjuntos.     </li> </ul> </li> <li> <p>Gerentes y l\u00edderes:</p> <ul> <li>Deben ser capacitados en la toma de decisiones en caso de incidentes y en la supervisi\u00f3n del cumplimiento de pol\u00edticas.     </li> <li>Ejemplo: Un gerente debe saber c\u00f3mo coordinar con el equipo de TI si se detecta un ataque de ransomware.     </li> </ul> </li> <li> <p>Empleados con trabajo remoto:     </p> <ul> <li>Formaci\u00f3n espec\u00edfica en el uso de redes Wi-Fi seguras y herramientas como VPN.     </li> <li>Ejemplo: Un comercial remoto aprende a identificar redes Wi-Fi p\u00fablicas falsas que podr\u00edan ser utilizadas para interceptar su tr\u00e1fico.     </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#432-adaptacion-por-caracteristicas-logisticas","title":"4.3.2. Adaptaci\u00f3n por caracter\u00edsticas log\u00edsticas","text":"<p>La segmentaci\u00f3n del plan tambi\u00e9n debe considerar factores como:    </p> <ul> <li>Geograf\u00eda: Formaci\u00f3n adaptada a normativas locales, como el RGPD en Europa o la CCPA en EE.UU.</li> <li>Horarios y turnos: Asegurarse de que los empleados en diferentes horarios puedan acceder a las formaciones, ya sea en vivo o grabadas.</li> </ul> <p>Ejemplo: Un comercial remoto en otra zona horaria recibe formaci\u00f3n asincr\u00f3nica sobre pr\u00e1cticas de seguridad al usar dispositivos m\u00f3viles en viajes internacionales.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#433-subdivision-de-grupos-segun-necesidades-especificas","title":"4.3.3. Subdivisi\u00f3n de grupos seg\u00fan necesidades espec\u00edficas","text":"<p>La subdivisi\u00f3n puede hacerse para personalizar los contenidos seg\u00fan el nivel de exposici\u00f3n a riesgos o las responsabilidades del rol. Ejemplo:    </p> <ul> <li>Grupo 1: T\u00e9cnicos que manejan sistemas cr\u00edticos \u2192 Formaci\u00f3n sobre detecci\u00f3n de intrusiones.    </li> <li>Grupo 2: Empleados administrativos \u2192 Talleres sobre phishing e ingenier\u00eda social.    </li> </ul> <p>Al estructurar el plan de esta manera, se asegura que todos los empleados reciban la capacitaci\u00f3n que realmente necesitan para su funci\u00f3n, maximizando la efectividad del programa.       </p> <p>Resultado esperado: El conjunto de de los roles y caracter\u00edsticas de los empleados, caracter\u00edsticas log\u00edsticas y necesidades espec\u00edficas, que nos permitir\u00e1n identificar los grupos de empleados que requieren formaci\u00f3n y concienciaci\u00f3n espec\u00edfica, adaptada a sus responsabilidades y riesgos:</p> <ul> <li>Los diferentes roles y departamentos de la organizaci\u00f3n, incluyendo t\u00e9cnicos, administrativos, gerentes y empleados remotos.</li> <li>Las caracter\u00edsticas log\u00edsticas, como la geograf\u00eda, los horarios y los turnos de trabajo.</li> <li>La subdivisi\u00f3n de grupos seg\u00fan necesidades espec\u00edficas, como la exposici\u00f3n a riesgos o las responsabilidades del rol.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#44-contenidos-del-plan","title":"4.4. Contenidos del Plan","text":"<p>Los contenidos del Plan de Formaci\u00f3n y Concienciaci\u00f3n deben ser relevantes, pr\u00e1cticos y adaptados a las necesidades de la organizaci\u00f3n. El prop\u00f3sito es involucrar a los empleados, garantizar que comprendan la situaci\u00f3n actual en materia de seguridad y ense\u00f1arles c\u00f3mo proteger los activos y servicios de la empresa frente a amenazas cibern\u00e9ticas.</p> <p>Los tipos de contenidos pueden variar seg\u00fan los objetivos del plan y los roles de los empleados, pero es fundamental que sean claros, comprensibles y aplicables a la vida laboral diaria. Estos contenidos versar\u00e1n sobre:     </p> <ol> <li> <p>Involucrar y notificar: Explicar de manera clara y directa cu\u00e1l es la situaci\u00f3n de la organizaci\u00f3n en t\u00e9rminos de seguridad, destacando incidentes pasados, vulnerabilidades conocidas o tendencias de amenazas actuales.    </p> <ul> <li>Ejemplo: Mostrar un caso donde la empresa sufri\u00f3 una brecha de datos debido a un correo de phishing.</li> </ul> </li> <li> <p>Formar y concienciar sobre amenazas: Proveer informaci\u00f3n sobre las amenazas m\u00e1s relevantes, como phishing, ransomware, ataques por ingenier\u00eda social o malware.     </p> <ul> <li>Ejemplo: Simular un correo que intenta obtener credenciales para demostrar c\u00f3mo los ciberdelincuentes enga\u00f1an a las v\u00edctimas.</li> </ul> </li> <li> <p>Relacionados con pol\u00edticas corporativas: Detallar las normativas internas que los empleados deben cumplir, como el uso de contrase\u00f1as, pol\u00edticas de mesa limpia o la prohibici\u00f3n de instalar software no autorizado.     </p> <ul> <li>Ejemplo: Explicar la pol\u00edtica de actualizaci\u00f3n de software, mostrando c\u00f3mo un sistema sin parches puede ser explotado.</li> </ul> </li> <li> <p>Protecci\u00f3n de activos y servicios: Ense\u00f1ar c\u00f3mo proteger datos y sistemas espec\u00edficos de la organizaci\u00f3n, como documentos financieros, datos de clientes o sistemas cr\u00edticos.</p> <ul> <li>Ejemplo: Capacitar al equipo financiero en la validaci\u00f3n de transferencias electr\u00f3nicas para evitar fraudes.</li> </ul> </li> </ol> <p>Resultado esperado: Una lista de los contenidos que permitan a los empleados comprender la situaci\u00f3n actual de la organizaci\u00f3n en materia de seguridad, las amenazas m\u00e1s relevantes, las pol\u00edticas corporativas y c\u00f3mo proteger los activos y servicios de la empresa frente a amenazas cibern\u00e9ticas:</p> <ul> <li>Informaci\u00f3n de la organizaci\u00f3n sobre incidentes pasados, vulnerabilidades conocidas y tendencias de amenazas actuales.     </li> <li>Amenazas m\u00e1s relevantes, como phishing, ransomware, ingenier\u00eda social y malware, en funci\u00f3n de la evaluaci\u00f3n de necesidades, y las amenazas m\u00e1s comunes en la organizaci\u00f3n.     </li> <li>Formaci\u00f3n sobre normativas internas, como el uso de contrase\u00f1as, pol\u00edticas de mesa limpia y prohibici\u00f3n de software no autorizado.     </li> <li>Formaci\u00f3n espec\u00edfica sobre la protecci\u00f3n de activos y servicios cr\u00edticos, como documentos financieros, datos de clientes o sistemas clave.    </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#45-asociacion-de-roles-y-contenidos","title":"4.5. Asociaci\u00f3n de Roles y Contenidos","text":"<p>La efectividad del plan depende de su capacidad para adaptarse a las necesidades de cada rol en la organizaci\u00f3n. Esto implica asociar/adaptar los contenidos a los grupos de empleados seg\u00fan sus responsabilidades, niveles de conocimiento y riesgos espec\u00edficos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#451-criterios-de-diseno","title":"4.5.1. Criterios de dise\u00f1o","text":"<ol> <li> <p>Adaptaci\u00f3n por rol: Los contenidos deben ser relevantes para las tareas y riesgos de cada grupo.     </p> <p>Ejemplo:     </p> <ul> <li>Empleados en general: Phishing, ingenier\u00eda social, uso b\u00e1sico de contrase\u00f1as.</li> <li>T\u00e9cnicos: Gesti\u00f3n de firewalls, an\u00e1lisis de vulnerabilidades, respuesta a incidentes.</li> </ul> </li> <li> <p>Lenguaje y ejemplos claros: Usar un lenguaje comprensible para cada grupo, evitando jerga t\u00e9cnica innecesaria con empleados no t\u00e9cnicos.    </p> <p>Ejemplo: Explicar a los empleados administrativos que \"ransomware bloquea tus archivos hasta que se paga un rescate\", en lugar de usar t\u00e9rminos t\u00e9cnicos como \"cifrado sim\u00e9trico\".     </p> </li> <li> <p>Escenarios espec\u00edficos: Presentar situaciones pr\u00e1cticas relacionadas con el entorno laboral.      </p> <p>Ejemplo: Para el equipo comercial remoto, simular un intento de suplantaci\u00f3n de identidad mientras usan una red Wi-Fi p\u00fablica.</p> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#452-ejemplo-de-asociacion-adaptacion-de-contenidos","title":"4.5.2. Ejemplo de asociaci\u00f3n/ adaptaci\u00f3n de contenidos","text":"Rol/Grupo Contenidos clave Ejemplo Administrativos Phishing, pol\u00edticas de mesa limpia Identificar errores en un correo sospechoso o simular cierre de sesi\u00f3n diaria. T\u00e9cnicos Configuraci\u00f3n segura, respuesta a incidentes Taller pr\u00e1ctico para configurar firewalls o analizar alertas de un IDS. Comerciales remotos Uso seguro de redes Wi-Fi Mostrar c\u00f3mo verificar un punto de acceso antes de conectarse. Gerentes Gesti\u00f3n de incidentes Simulaci\u00f3n de toma de decisiones frente a un ransomware que afecta datos clave. <p>Resultado esperado: Los contenidos asociados/adaptados a las necesidades de cada grupo de empleados, garantizando que la formaci\u00f3n sea relevante, efectiva y aplicable a su entorno laboral espec\u00edfico</p> <ul> <li>Contenidos clave para cada grupo de empleados, como phishing, pol\u00edticas de mesa limpia, configuraci\u00f3n segura, respuesta a incidentes, uso seguro de redes Wi-Fi y gesti\u00f3n de incidentes.</li> <li>Adaptando la formaci\u00f3n a las necesidades de cada grupo (lenguaje, conocimiento, rol) y garantizando su relevancia y efectividad.</li> <li>Ejemplos pr\u00e1cticos espec\u00edficos para cada grupo, como identificar errores en un correo sospechoso, configurar firewalls, verificar un punto de acceso o tomar decisiones frente a un ransomware.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#46-metodologias-formativas","title":"4.6. Metodolog\u00edas Formativas","text":"<p>Para alcanzar los objetivos del plan, las estrategias formativas deben ser viables, din\u00e1micas y adaptadas a las caracter\u00edsticas de la organizaci\u00f3n. La clave es combinar diferentes metodolog\u00edas para maximizar el impacto y garantizar que todos los empleados participen activamente.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#461-estrategias-formativas","title":"4.6.1. Estrategias formativas","text":"<ol> <li> <p>Divisi\u00f3n por grupos o subgrupos:    </p> <ul> <li>Separar a los empleados en grupos seg\u00fan sus roles, horarios o ubicaciones para personalizar las sesiones.    </li> <li>Ejemplo: Un equipo t\u00e9cnico recibe formaci\u00f3n presencial sobre gesti\u00f3n de vulnerabilidades, mientras los empleados administrativos acceden a un m\u00f3dulo online sobre phishing.      </li> </ul> </li> <li> <p>Variedad de materiales: (Ver el punto 5)    </p> <ul> <li>Infograf\u00edas: Res\u00famenes visuales de conceptos clave, como uso de contrase\u00f1as seguras o detecci\u00f3n de phishing.    </li> <li>Manuales: Gu\u00edas detalladas sobre procedimientos de seguridad, como respuesta a incidentes o configuraci\u00f3n de redes.    </li> <li>Simulaciones: Pruebas pr\u00e1cticas de ataques, como phishing o ransomware, para evaluar la respuesta de los empleados.  </li> <li>M\u00f3dulos online: Cursos interactivos que permitan a los empleados aprender a su propio ritmo y en cualquier momento.</li> <li>Estudios de caso: An\u00e1lisis de incidentes reales o simulados para que los empleados aprendan de experiencias pasadas.</li> </ul> </li> <li> <p>Variedad de metodolog\u00edas:     </p> <ul> <li>Jornadas presenciales o virtuales: Sesiones interactivas que incluyan preguntas, ejemplos y ejercicios pr\u00e1cticos.     </li> <li>Correos educativos: Mensajes regulares con consejos pr\u00e1cticos y recordatorios.     </li> <li>Simulacros: Realizar campa\u00f1as de phishing simuladas o simulaciones de ataques de ransomware.     </li> <li>Materiales de apoyo: Gu\u00edas, infograf\u00edas y v\u00eddeos que refuercen los conceptos.     </li> </ul> </li> <li> <p>Calendario de implementaci\u00f3n:     </p> <ul> <li>Establecer una periodicidad para las formaciones (mensual, trimestral o anual).</li> <li>Ejemplo:     <ul> <li>Enero: Taller pr\u00e1ctico de phishing para empleados generales.     </li> <li>Marzo: Simulaci\u00f3n de ransomware para t\u00e9cnicos.     </li> <li>Junio: Evaluaci\u00f3n general y retroalimentaci\u00f3n.     </li> </ul> </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#462-ejemplo-de-planificacion","title":"4.6.2. Ejemplo de planificaci\u00f3n","text":"Roles/Grupo Contenidos Materiales Metodolog\u00edas Calendario Administrativos Uso de contrase\u00f1as seguras, phishing Infograf\u00edas, simulaciones Taller interactivo Enero, Julio T\u00e9cnicos Respuesta a incidentes, VPN Manuales, laboratorios pr\u00e1cticos Simulaci\u00f3n t\u00e9cnica Marzo, Septiembre Comerciales remotos Redes Wi-Fi seguras, 2FA Gu\u00edas digitales, ejemplos pr\u00e1cticos M\u00f3dulo online Febrero, Agosto Gerentes Gesti\u00f3n de incidentes, supervisi\u00f3n Estudios de caso Simulaci\u00f3n de decisi\u00f3n Abril, Octubre <p>Resultado esperado: Una personalizaci\u00f3n de la formaci\u00f3n a los distintos grupos de empleados, con una variedad de metodolog\u00edas y un calendario de implementaci\u00f3n que garantice la efectividad y el impacto del plan. Por cada contenidos clave y  grupo:  </p> <ul> <li>Materiales de apoyo, como infograf\u00edas, simulaciones, manuales, laboratorios pr\u00e1cticos, gu\u00edas digitales y ejemplos pr\u00e1cticos.</li> <li>Metodolog\u00edas formativas variadas, como talleres interactivos, simulaciones, m\u00f3dulos online, estudios de caso y simulaciones de decisi\u00f3n.</li> <li>Calendario de implementaci\u00f3n con sesiones mensuales, trimestrales o semestrales, adaptado a las necesidades de cada grupo de empleados.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#47-evaluacion-y-actualizacion-del-plan-de-concienciacion","title":"4.7. Evaluaci\u00f3n y actualizaci\u00f3n del Plan de Concienciaci\u00f3n","text":"<p>El Plan de Formaci\u00f3n y Concienciaci\u00f3n debe ser din\u00e1mico y evolutivo, adapt\u00e1ndose a los cambios en el entorno de amenazas y a las necesidades internas de la organizaci\u00f3n. Para asegurar su efectividad, es fundamental evaluar el plan y ajustarlo seg\u00fan los resultados obtenidos.</p> <p>La evaluaci\u00f3n del Plan de Formaci\u00f3n y Concienciaci\u00f3n es fundamental para medir su impacto, identificar \u00e1reas de mejora y asegurar que los objetivos de seguridad se est\u00e9n alcanzando. Una evaluaci\u00f3n bien dise\u00f1ada permite ajustar el plan, teniendo presente los resultados obtenidos, las necesidades cambiantes de la organizaci\u00f3n y  las amenazas emergentes. Para mas informaci\u00f3n sobre la evaluaci\u00f3n del plan, ver el punto 6.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#471-objetivos-de-la-evaluacion","title":"4.7.1. Objetivos de la Evaluaci\u00f3n","text":"<p>La evaluaci\u00f3n del plan tiene varios objetivos:</p> <ol> <li>Comprobar resultados: Verificar si los empleados han adquirido los conocimientos y habilidades necesarios para prevenir y responder a incidentes de seguridad.     </li> <li>Identificar brechas: Detectar grupos o \u00e1reas que requieran formaci\u00f3n adicional o refuerzo espec\u00edfico.</li> <li>Actualizar el plan: Adaptar los contenidos y metodolog\u00edas seg\u00fan los resultados de la evaluaci\u00f3n y las nuevas necesidades de seguridad.      </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#472-metodos-de-evaluacion","title":"4.7.2. M\u00e9todos de Evaluaci\u00f3n","text":"<p>La evaluaci\u00f3n puede realizarse a trav\u00e9s de diferentes m\u00e9todos, como:</p> <ol> <li> <p>Pruebas de conocimiento: Cuestionarios dise\u00f1ados para medir la comprensi\u00f3n de los conceptos clave.</p> <p>Ejemplo: Una prueba que eval\u00fae si los empleados pueden identificar caracter\u00edsticas de un correo de phishing.      </p> </li> <li> <p>Encuestas de opini\u00f3n: Solicitar retroalimentaci\u00f3n sobre la calidad, relevancia y utilidad de la formaci\u00f3n.     </p> <p>Ejemplo: Preguntar si los empleados se sienten m\u00e1s preparados para reconocer amenazas despu\u00e9s de la capacitaci\u00f3n.     </p> </li> <li> <p>Simulaciones pr\u00e1cticas: Realizar simulacros de ataques, como phishing o ransomware, para evaluar el comportamiento real de los empleados.   </p> <p>Ejemplo: Enviar correos simulados con enlaces maliciosos para medir cu\u00e1ntos empleados caen en la trampa.     </p> </li> <li> <p>Enfoques pr\u00e1cticos avanzados:</p> <ul> <li>Campa\u00f1as de phishing simuladas: Monitorear la cantidad de empleados que hacen clic en correos maliciosos.     </li> <li>Ataques simulados: Simular una intrusi\u00f3n en la red para medir la respuesta del equipo t\u00e9cnico.    </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#473-mejora-continua","title":"4.7.3. Mejora continua","text":"<p>Tras la evaluaci\u00f3n, el plan debe ser actualizado para mejorar su efectividad y adaptarse a las necesidades cambiantes de la organizaci\u00f3n. La mejora continua garantiza que la formaci\u00f3n siga siendo relevante y \u00fatil en un entorno de amenazas en constante evoluci\u00f3n.</p> <ol> <li> <p>Adaptar seg\u00fan resultados de evaluaciones: Si un simulacro muestra que los empleados caen f\u00e1cilmente en ataques de ingenier\u00eda social, se refuerza este tema en la pr\u00f3xima capacitaci\u00f3n.</p> </li> <li> <p>Integraci\u00f3n de retroalimentaci\u00f3n: Incorporar las sugerencias de los empleados para mejorar la experiencia formativa.</p> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#474-formacion-de-refuerzo","title":"4.7.4. Formaci\u00f3n de refuerzo","text":"<p>De nuevo, tras la evaluaci\u00f3n, es importante ofrecer formaci\u00f3n adicional adaptada a sus deficiencias a los empleados que no hayan alcanzado los objetivos esperados. Esto garantiza que todos los miembros de la organizaci\u00f3n est\u00e9n alineados con las pol\u00edticas de seguridad y preparados para enfrentar amenazas.</p> <ul> <li>Ejemplo: Si un empleado no puede identificar enlaces sospechosos en una prueba, participar\u00e1 en un taller intensivo sobre phishing.</li> </ul> <p>Resultado esperado: Una evaluaci\u00f3n del plan de formaci\u00f3n y concienciaci\u00f3n que permita medir su impacto, identificar \u00e1reas de mejora y ajustar los contenidos y metodolog\u00edas seg\u00fan los resultados obtenidos:</p> <ul> <li>Los resultados a medir en funci\u00f3n de los objetivos, como la comprensi\u00f3n de conceptos clave, la retroalimentaci\u00f3n de los empleados y la efectividad de las simulaciones pr\u00e1cticas.</li> <li>Preguntas claves para obtener la actualizaci\u00f3n del plan, como la calidad, relevancia y utilidad de la formaci\u00f3n.</li> <li>Preguntas claves para identificar brechas en la formaci\u00f3n, como el cumplimiento de pol\u00edticas y normativas de seguridad.</li> <li>M\u00e9todos de evaluaci\u00f3n variados, como pruebas de conocimiento, encuestas de opini\u00f3n, simulaciones pr\u00e1cticas, revisiones peri\u00f3dicas y enfoques pr\u00e1cticos avanzados.</li> <li>Formaci\u00f3n de refuerzo para los empleados que no hayan alcanzado los objetivos esperados, adaptada a sus deficiencias y necesidades espec\u00edficas.</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#49-planificacion-y-revision-periodica-del-plan-de-formacion-y-concienciacion","title":"4.9. Planificaci\u00f3n y revisi\u00f3n peri\u00f3dica del Plan de Formaci\u00f3n y Concienciaci\u00f3n","text":"<p>Un buen plan debe ser constante y recurrente. La aplicaci\u00f3n y revisi\u00f3n peri\u00f3dica del plan asegura que se mantenga actualizado y relevante en un entorno de amenazas en constante evoluci\u00f3n, que la concienciaci\u00f3n y formaci\u00f3n no pierdan vigencia y que los empleados mantengan una postura activa frente a la seguridad.</p> <p>La revisi\u00f3n debe incluir la incorporaci\u00f3n de nuevas amenazas, la adaptaci\u00f3n a cambios internos y la mejora continua de los contenidos y metodolog\u00edas.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#491-frecuencia-de-la-formacion-y-revision","title":"4.9.1. Frecuencia de la formaci\u00f3n y revisi\u00f3n","text":"<p>La formaci\u00f3n  deben ser continuas y adaptativas, con diferentes tipos de actividades y una frecuencia de revisi\u00f3n que garantice la efectividad y la actualizaci\u00f3n constante del plan.</p> <ol> <li> <p>Formaci\u00f3n inicial: Impartida a nuevos empleados como parte de su incorporaci\u00f3n.    </p> <ul> <li>Ejemplo: Un m\u00f3dulo introductorio sobre pol\u00edticas de seguridad y pr\u00e1cticas b\u00e1sicas, como contrase\u00f1as seguras.    </li> </ul> </li> <li> <p>Refrescos regulares: Sesiones trimestrales o semestrales para reforzar conceptos clave y abordar nuevas amenazas.</p> <ul> <li>Ejemplo: Taller de actualizaci\u00f3n sobre los \u00faltimos tipos de ransomware y c\u00f3mo prevenirlos.     </li> </ul> </li> <li> <p>Formaciones especiales: Impartidas en respuesta a cambios importantes, como una actualizaci\u00f3n masiva de sistemas o la implementaci\u00f3n de nuevas normativas. </p> <ul> <li>Ejemplo: Capacitar a los empleados sobre c\u00f3mo usar un nuevo software de cifrado implementado por la empresa.     </li> </ul> </li> <li> <p>Frecuencia de revisi\u00f3n: Realizar revisiones tras cada ejecuci\u00f3n regular, para asegurar que los contenidos y metodolog\u00edas sigan siendo relevantes.</p> <ul> <li>Ejemplo: Tras la evaluaci\u00f3n de una formaci\u00f3n regular, revisar los resultados y ajustar el plan seg\u00fan las necesidades identificadas.</li> </ul> </li> <li> <p>Incorporaci\u00f3n de nuevas amenazas: Actualizar el plan para incluir temas emergentes, es responsabilidad de la organizaci\u00f3n mantenerse al d\u00eda con las \u00faltimas tendencias en ciberseguridad.    </p> <ul> <li>Ejemplo: Introducir formaci\u00f3n sobre c\u00f3mo detectar v\u00eddeos falsificados que intenten manipular decisiones empresariales.</li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#492-continuidad-en-la-concienciacion","title":"4.9.2. Continuidad en la concienciaci\u00f3n","text":"<p>La concienciaci\u00f3n en ciberseguridad debe ser un proceso continuo y constante, no un evento puntual. La organizaci\u00f3n debe mantener la ciberseguridad presente en el d\u00eda a d\u00eda de los empleados, reforzando los conceptos clave y fomentando una cultura de seguridad.</p> <ol> <li> <p>Campa\u00f1as informativas: Correos electr\u00f3nicos, infograf\u00edas y alertas peri\u00f3dicas para mantener la ciberseguridad presente en el d\u00eda a d\u00eda de los empleados.  </p> <ul> <li>Ejemplo: Enviar un correo semanal con consejos de seguridad y recordatorios sobre pol\u00edticas internas.</li> </ul> </li> <li> <p>Gamificaci\u00f3n y competencias: Organizar concursos para reforzar conceptos de seguridad de manera divertida.    </p> <ul> <li>Ejemplo: Una competencia donde los empleados ganen puntos por identificar correos de phishing en simulaciones.     </li> </ul> </li> </ol> <p>Con estos pasos, la evaluaci\u00f3n, actualizaci\u00f3n y aplicaci\u00f3n peri\u00f3dica del plan se convierten en un ciclo continuo que refuerza la postura de seguridad de la organizaci\u00f3n y mejora su resiliencia frente a amenazas.</p> <p>Resultado esperado: Una planificaci\u00f3n peri\u00f3dica de ejecuci\u00f3n del plan de formaci\u00f3n y concienciaci\u00f3n y de revisi\u00f3n de este, que garantice la continuidad y efectividad de las actividades formativas:    </p> <ul> <li>Temporizaci\u00f3n de ejecuci\u00f3n del Plan de formaci\u00f3n regular para mantener a los empleados actualizados sobre las \u00faltimas tendencias en ciberseguridad y c\u00f3mo detectar nuevas amenazas.    </li> <li>Temporizaci\u00f3n del Plan de concienciaci\u00f3n con campa\u00f1as informativas, gamificaci\u00f3n y competencias para mantener la ciberseguridad presente en el d\u00eda a d\u00eda de los empleados.     </li> <li>Plan de formaci\u00f3n inicial para nuevos empleados, refrescos regulares trimestrales o semestrales, formaciones especiales en respuesta a cambios importantes y revisiones peri\u00f3dicas para ajustar el plan seg\u00fan las necesidades identificadas.   </li> <li>Frecuencia de revisi\u00f3n de plan e inclusi\u00f3n de nuevas amenazas, para asegurar que los contenidos y metodolog\u00edas sigan siendo relevantes y que asi garantice la efectividad y la adaptabilidad del plan de formaci\u00f3n y concienciaci\u00f3n.    </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#5-tipos-de-materiales-para-la-formacion-y-concienciacion","title":"5. Tipos de Materiales para la Formaci\u00f3n y Concienciaci\u00f3n","text":"<p>La efectividad de un Plan de Formaci\u00f3n y Concienciaci\u00f3n depende en gran medida de los materiales utilizados para transmitir los contenidos. Estos materiales deben ser atractivos, claros y pr\u00e1cticos, adapt\u00e1ndose a las necesidades y perfiles de los empleados. Adem\u00e1s, deben basarse en informaci\u00f3n actualizada sobre las amenazas cibern\u00e9ticas y los contenidos previstos en el plan.</p> <p>A continuaci\u00f3n, se describen los tipos de materiales m\u00e1s comunes y su utilidad dentro del proceso formativo.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#51-posteres-y-carteles","title":"5.1. P\u00f3steres y Carteles","text":"<p>Los p\u00f3steres son ideales para comunicaciones r\u00e1pidas y visuales. Sus mensajes breves y dise\u00f1os llamativos captan la atenci\u00f3n de los empleados y refuerzan conceptos clave de seguridad.</p> <ul> <li> <p>Caracter\u00edsticas esenciales:    </p> <ul> <li>Un t\u00edtulo breve y atractivo.    </li> <li>Im\u00e1genes impactantes que refuercen el mensaje.    </li> </ul> </li> <li> <p>Ejemplo: Un cartel en la sala com\u00fan con el mensaje \u201c\u00a1No caigas en el anzuelo! Aprende a identificar correos de phishing\u201d acompa\u00f1ado de ejemplos visuales.</p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#52-presentaciones-multimedia","title":"5.2. Presentaciones Multimedia","text":"<p>Las presentaciones son herramientas \u00fatiles para profundizar en temas espec\u00edficos durante jornadas de formaci\u00f3n o reuniones.</p> <ul> <li> <p>Caracter\u00edsticas esenciales:     </p> <ul> <li>Incluyen diapositivas din\u00e1micas con gr\u00e1ficos y ejemplos.   </li> <li>Ideales para acompa\u00f1ar sesiones presenciales o virtuales.    </li> </ul> </li> <li> <p>Ejemplo: Una presentaci\u00f3n para una jornada formativa sobre ingenier\u00eda social que incluya v\u00eddeos breves mostrando intentos de manipulaci\u00f3n realista.     </p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#53-tripticos","title":"5.3. Tr\u00edpticos","text":"<p>Los tr\u00edpticos combinan la atracci\u00f3n visual de un p\u00f3ster con la capacidad de resumir informaci\u00f3n clave en su interior. Son vers\u00e1tiles y f\u00e1ciles de distribuir.</p> <ul> <li> <p>Caracter\u00edsticas esenciales:    </p> <ul> <li>Portada llamativa para captar la atenci\u00f3n.    </li> <li>Informaci\u00f3n resumida y clara en su interior, como consejos o pasos para reconocer amenazas.    </li> <li>Contraportada con datos de contacto o recursos adicionales.    </li> </ul> </li> <li> <p>Ejemplo: Un tr\u00edptico titulado \u201c10 pasos para mantener tus datos seguros\u201d que se entregue a los empleados durante su incorporaci\u00f3n.</p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#54-ataques-simulados-de-malware","title":"5.4. Ataques Simulados de Malware","text":"<p>Estas simulaciones permiten que los empleados experimenten c\u00f3mo ser\u00eda un ataque real y aprendan a responder de manera segura.</p> <ul> <li> <p>Caracter\u00edsticas esenciales:    </p> <ul> <li>Uso de entornos controlados para realizar simulaciones seguras.    </li> <li>M\u00e9todos variados para replicar ataques comunes, como infecciones por USB o descargas sospechosas.    </li> </ul> </li> <li> <p>Ejemplo: Dejar un USB con etiquetas llamativas como \u201cConfidencial \u2013 N\u00f3minas\u201d en un espacio com\u00fan y observar cu\u00e1ntos empleados lo conectan sin verificar su procedencia.    </p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#55-campanas-de-simulacion-de-phishing","title":"5.5. Campa\u00f1as de Simulaci\u00f3n de Phishing","text":"<p>Las simulaciones de phishing son una de las herramientas m\u00e1s efectivas para evaluar y reforzar la capacidad de los empleados para reconocer correos maliciosos. Existen herramientas para realizar este tipo de simulacros. </p> <ul> <li> <p>Caracter\u00edsticas esenciales:    </p> <ul> <li>Env\u00edo de correos simulados que imitan t\u00e1cticas reales de phishing.    </li> <li>An\u00e1lisis de las respuestas para identificar empleados que necesitan refuerzo.   </li> </ul> </li> <li> <p>Ejemplo: Enviar un correo con el asunto \u201cActualizaci\u00f3n urgente de contrase\u00f1a\u201d y analizar cu\u00e1ntos empleados intentan acceder al enlace proporcionado.    </p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#56-otros-materiales-complementarios","title":"5.6. Otros Materiales Complementarios","text":"<ol> <li> <p>V\u00eddeos y salvapantallas: Material audiovisual que refuerza conceptos clave de manera breve y visual.     </p> <ul> <li>Ejemplo: Un v\u00eddeo corto que explica c\u00f3mo detectar un ataque de ransomware.    </li> </ul> </li> <li> <p>Plataformas de entrenamiento: Portales interactivos, gratuitos o de pago, que permiten a los empleados practicar en simulaciones de amenazas.     </p> <ul> <li>Ejemplo: Un curso en l\u00ednea sobre \u201cC\u00f3mo protegerse frente al malware\u201d con ejercicios interactivos.     </li> </ul> </li> <li> <p>Boletines informativos: Res\u00famenes peri\u00f3dicos con actualizaciones sobre nuevas amenazas y consejos pr\u00e1cticos.</p> <ul> <li>Ejemplo: Un bolet\u00edn mensual que detalla los ataques m\u00e1s comunes detectados recientemente por INCIBE.     </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#57-encuestas-de-satisfaccion-se-hablara-mas-en-el-punto-6","title":"5.7. Encuestas de Satisfacci\u00f3n (Se hablar\u00e1 m\u00e1s en el punto 6)","text":"<p>Las encuestas son una herramienta valiosa para recopilar opiniones y sugerencias de los empleados sobre el plan de formaci\u00f3n.</p> <ul> <li> <p>Caracter\u00edsticas esenciales:</p> <ul> <li>Preguntas claras y directas sobre la utilidad de la formaci\u00f3n.</li> <li>Espacios para comentarios o recomendaciones.</li> </ul> </li> <li> <p>Ejemplo: Una encuesta posterior a una jornada de formaci\u00f3n preguntando: \u201c\u00bfTe sientes m\u00e1s preparado para reconocer un ataque de phishing despu\u00e9s de la capacitaci\u00f3n?\u201d</p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#58-distribucion-de-materiales","title":"5.8. Distribuci\u00f3n de Materiales","text":"<p>Los materiales deben llegar a los empleados a trav\u00e9s de canales accesibles y efectivos:   - Correo electr\u00f3nico: Ideal para boletines, tr\u00edpticos digitales y encuestas.   - Intranet corporativa: Publicaci\u00f3n de presentaciones y v\u00eddeos para acceso continuo.   - Espacios comunes: Carteles, p\u00f3steres y salvapantallas.    - Talleres presenciales o virtuales: Presentaciones multimedia y simulaciones pr\u00e1cticas.    </p> <p>Ejemplo: Publicar un cartel sobre el uso de contrase\u00f1as seguras en las salas de descanso y enviar un bolet\u00edn con ejemplos de contrase\u00f1as robustas por correo electr\u00f3nico.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#59-recursos-para-autoaprendizaje","title":"5.9. Recursos para Autoaprendizaje","text":"<p>Dado que la ciberseguridad tambi\u00e9n se aplica al \u00e1mbito personal, es \u00fatil ofrecer a los empleados recursos para autoaprendizaje:    </p> <ul> <li>Cursos sobre ciberseguridad personal.     </li> <li>Gu\u00edas para navegar de forma segura desde casa.      </li> <li>Enlaces a plataformas de entrenamiento en l\u00ednea.     </li> </ul> <p>Ejemplo: Compartir un curso gratuito sobre protecci\u00f3n de dispositivos personales para que los empleados refuercen su seguridad fuera del trabajo.     </p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#510-fuentes-y-recursos-para-acceder-a-los-materiales","title":"5.10. Fuentes y Recursos para Acceder a los Materiales","text":"<p>Los materiales para el Plan de Formaci\u00f3n y Concienciaci\u00f3n pueden obtenerse de diversas fuentes confiables, que proporcionan contenidos actualizados, adaptables y orientados a la sensibilizaci\u00f3n en ciberseguridad. Estas fuentes incluyen organismos especializados, plataformas de formaci\u00f3n y recursos internos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#5101-fuentes-oficiales","title":"5.10.1. Fuentes Oficiales","text":"<ol> <li> <p>INCIBE (Instituto Nacional de Ciberseguridad): El kit de concienciaci\u00f3n de INCIBE incluye carteles, tr\u00edpticos, v\u00eddeos y campa\u00f1as de simulaci\u00f3n de ataques.   </p> <ul> <li>P\u00e1gina web de INCIBE: https://www.incibe.es </li> <li>Recursos gratuitos para empresas, disponibles en la secci\u00f3n \u201cConcienciaci\u00f3n\u201d.         </li> </ul> </li> <li> <p>ENISA (European Union Agency for Cybersecurity): ENISA ofrece p\u00f3steres, ilustraciones, gu\u00edas y plataformas de formaci\u00f3n para fomentar la ciberseguridad en las organizaciones.     </p> <ul> <li>P\u00e1gina oficial de ENISA: https://www.enisa.europa.eu </li> <li>Secci\u00f3n de materiales educativos y gu\u00edas pr\u00e1cticas.     </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#5102-plataformas-de-entrenamiento","title":"5.10.2. Plataformas de Entrenamiento","text":"<ol> <li> <p>Plataformas de formaci\u00f3n en ciberseguridad:</p> <ul> <li>Hay recursos tanto gratuitos como de pago, dise\u00f1ados para capacitar a empleados en simulaciones pr\u00e1cticas y temas espec\u00edficos.       </li> <li>Ejemplo: Plataformas como Cyber Awareness Platform, KnowBe4, o plataformas de e-learning como Coursera y Udemy.     </li> </ul> </li> <li> <p>Recursos interactivos gratuitos:    </p> <ul> <li>Desaf\u00edos en l\u00ednea como CyberSecChallenge (INCIBE) o Cybersecurity Labs de la Universidad de Stanford.     </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#5103-recursos-internos","title":"5.10.3. Recursos Internos","text":"<ol> <li> <p>Documentaci\u00f3n propia:    </p> <ul> <li>Revisar pol\u00edticas y gu\u00edas internas de la organizaci\u00f3n para generar contenidos personalizados.</li> <li>Ejemplo: Crear tr\u00edpticos con ejemplos reales de incidentes que hayan ocurrido dentro de la empresa, destacando c\u00f3mo se solucionaron y qu\u00e9 se aprendi\u00f3.    </li> </ul> </li> <li> <p>Intranet corporativa:    </p> <ul> <li>Publicar boletines y materiales formativos en un espacio accesible para todos los empleados.    </li> <li>D\u00f3nde encontrarlo: A trav\u00e9s del portal interno de la empresa.   </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#5104-boletines-y-actualizaciones","title":"5.10.4. Boletines y Actualizaciones","text":"<ul> <li>INCIBE: Publica boletines peri\u00f3dicos sobre amenazas emergentes y buenas pr\u00e1cticas.     </li> <li>ENISA: Emite informes y alertas sobre tendencias en ciberseguridad en la Uni\u00f3n Europea.     </li> <li>CISA y NCSC: Ofrecen actualizaciones constantes sobre t\u00e1cticas y t\u00e9cnicas de los ciberdelincuentes.     </li> </ul> <p>D\u00f3nde suscribirse: En los sitios web de cada instituci\u00f3n, se pueden configurar alertas por correo electr\u00f3nico para mantenerse informado.     </p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#6-auditorias-internas-de-cumplimiento-en-materia-de-prevencion","title":"6. Auditor\u00edas Internas de Cumplimiento en Materia de Prevenci\u00f3n","text":"<p>La realizaci\u00f3n de auditor\u00edas internas es un componente esencial en la estrategia de ciberseguridad de cualquier organizaci\u00f3n. Estas auditor\u00edas permiten evaluar peri\u00f3dicamente la eficacia de las medidas implementadas, comprobar el cumplimiento de normativas legales y determinar si los empleados est\u00e1n aplicando lo aprendido durante la formaci\u00f3n y concienciaci\u00f3n.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#61-objetivos-de-las-auditorias","title":"6.1. Objetivos de las Auditor\u00edas","text":"<ol> <li>Medir la efectividad del plan de formaci\u00f3n y concienciaci\u00f3n: Identificar si los empleados han adoptado pr\u00e1cticas seguras y si los contenidos formativos est\u00e1n dando resultados.</li> <li>Evaluar las medidas de seguridad implementadas: Verificar que las tecnolog\u00edas, pol\u00edticas y procedimientos est\u00e1n funcionando seg\u00fan lo previsto.</li> <li>Comprobar el cumplimiento normativo: Asegurarse de que la organizaci\u00f3n cumple con regulaciones como el RGPD o la Ley Org\u00e1nica 3/2018 de Protecci\u00f3n de Datos y Garant\u00eda de los Derechos Digitales (LOPD GDD).</li> </ol> <p>Ejemplo: Una auditor\u00eda detecta que un porcentaje significativo de empleados utiliza contrase\u00f1as d\u00e9biles, lo que puede llevar a reforzar la formaci\u00f3n en este aspecto y actualizar la pol\u00edtica de contrase\u00f1as.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#62-metricas-e-indicadores-de-logro","title":"6.2. M\u00e9tricas e Indicadores de Logro","text":"<p>Para evaluar el \u00e9xito del plan y las medidas de ciberseguridad, es fundamental establecer indicadores de rendimiento clave (KPIs). Estas m\u00e9tricas permiten medir resultados cuantitativos y cualitativos.</p> <ol> <li> <p>Indicadores relacionados con los empleados:     </p> <ul> <li>N\u00famero de denuncias sobre posibles incidentes: Aumentos pueden indicar mayor concienciaci\u00f3n.     </li> <li>Tasa de participaci\u00f3n en jornadas y cursos: Baja participaci\u00f3n podr\u00eda se\u00f1alar la necesidad de mejorar la motivaci\u00f3n o accesibilidad.    </li> <li>Resultados de simulaciones de phishing:  Si el porcentaje de empleados que caen en correos maliciosos disminuye, la formaci\u00f3n ha sido efectiva.   Ejemplo: Si el 50% de los empleados cae en una campa\u00f1a de phishing simulada, se necesita refuerzo.     </li> <li>Calificaciones en pruebas o certificaciones t\u00e9cnicas: Evaluar el nivel de conocimiento adquirido por empleados t\u00e9cnicos.    </li> </ul> </li> <li> <p>Indicadores t\u00e9cnicos y operativos:     </p> <ul> <li>N\u00famero de reinstalaciones de sistemas por malware: Reducciones indican una mejora en la prevenci\u00f3n.    </li> <li>Comparativa de incidentes antes y despu\u00e9s del plan: Evaluar si ha habido una disminuci\u00f3n en ataques o brechas de seguridad.    Ejemplo: Una disminuci\u00f3n en ataques exitosos tras la implementaci\u00f3n del plan refleja su efectividad.      </li> <li>Frecuencia de clics en enlaces maliciosos: Cuantificar errores en simulaciones de phishing o incidentes reales.    </li> </ul> </li> <li> <p>Indicadores de cumplimiento normativo:    </p> <ul> <li>Documentar los controles aplicados para cumplir con normativas como el RGPD y realizar revisiones peri\u00f3dicas de las pol\u00edticas implementadas.</li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#63-definicion-de-limites-y-acciones-correctivas","title":"6.3. Definici\u00f3n de L\u00edmites y Acciones Correctivas","text":"<p>Para que las m\u00e9tricas sean \u00fatiles, es importante definir qu\u00e9 resultados se consideran satisfactorios y qu\u00e9 acciones se tomar\u00e1n en caso de no alcanzar las metas:</p> <ol> <li> <p>Definici\u00f3n de logros esperados: Establecer l\u00edmites para cada indicador, basados en las metas de seguridad y cumplimiento normativo.      </p> <ul> <li>Ejemplo: Se considera satisfactorio que menos del 10% de los empleados caigan en simulaciones de phishing.      </li> </ul> </li> <li> <p>Acciones correctivas: Revisar el contenido del plan si los resultados no son los esperados, identificar \u00e1reas de mejora y aplicar medidas correctivas: realizar formaci\u00f3n adicional espec\u00edfica para empleados que presenten debilidades.      </p> </li> <li> <p>Recompensas por logros alcanzados: Reconocer a los equipos o empleados que demuestren un desempe\u00f1o sobresaliente.     </p> <ul> <li>Ejemplo: Premiar con un reconocimiento p\u00fablico al equipo que mejor responda a simulaciones de ataque.     </li> </ul> </li> </ol>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#64-frecuencia-de-las-auditorias","title":"6.4. Frecuencia de las Auditor\u00edas","text":"<p>La periodicidad de las auditor\u00edas depender\u00e1 de factores como:</p> <ol> <li>Tama\u00f1o y alcance de la organizaci\u00f3n: Empresas m\u00e1s grandes requieren auditor\u00edas m\u00e1s frecuentes debido a la complejidad de sus sistemas.     </li> <li>Regulaciones espec\u00edficas: Cumplir con requisitos legales, como revisiones anuales exigidas por normativas de protecci\u00f3n de datos.     </li> <li>Entorno de amenazas: Un aumento en ciberataques en el sector de la empresa puede justificar auditor\u00edas m\u00e1s frecuentes.      </li> </ol> <p>Ejemplo: Una empresa mediana realiza auditor\u00edas trimestrales para comprobar el cumplimiento de su pol\u00edtica de uso de contrase\u00f1as y simulaciones semestrales de phishing.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#65-beneficios-de-las-auditorias","title":"6.5. Beneficios de las Auditor\u00edas","text":"<ol> <li>Reducci\u00f3n de incidentes: Identificar puntos d\u00e9biles y solucionarlos antes de que los ciberdelincuentes los exploten.    </li> <li>Cumplimiento normativo: Evitar sanciones y proteger la reputaci\u00f3n corporativa al cumplir con leyes como el RGPD.    </li> <li>Concienciaci\u00f3n continua: Mantener a los empleados alerta y comprometidos con la seguridad de la organizaci\u00f3n.</li> </ol> <p>Ejemplo: Una auditor\u00eda detecta que el 80% de los empleados ha mejorado su capacidad para identificar correos de phishing, lo que se traduce en una disminuci\u00f3n del 50% en clics en enlaces maliciosos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#66-factores-a-tener-en-cuenta","title":"6.6. Factores a Tener en Cuenta","text":"<ol> <li>An\u00e1lisis de variables externas: No todas las mejoras en los indicadores se deben al plan; algunos cambios pueden deberse a una reducci\u00f3n en ciertos tipos de ataques en el sector.      </li> <li>Adaptaci\u00f3n de las auditor\u00edas al entorno: Ajustar las m\u00e9tricas y metodolog\u00edas seg\u00fan las amenazas emergentes y las innovaciones en ciberseguridad.       </li> <li>Colaboraci\u00f3n interna: Involucrar a todos los departamentos en la preparaci\u00f3n y ejecuci\u00f3n de las auditor\u00edas.     </li> </ol> <p>Ejemplo: Un an\u00e1lisis detallado de los resultados de una auditor\u00eda revela que la disminuci\u00f3n en clics en enlaces maliciosos se debe a una mejora en la detecci\u00f3n de correos de phishing, lo que indica que la formaci\u00f3n ha sido efectiva.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#67-conclusion","title":"6.7. Conclusi\u00f3n","text":"<p>Las auditor\u00edas internas de cumplimiento son esenciales para garantizar la efectividad de las pol\u00edticas, medidas y formaciones en ciberseguridad. Estas revisiones no solo mejoran la protecci\u00f3n de los datos y activos de la organizaci\u00f3n, sino que tambi\u00e9n aseguran que la empresa cumpla con normativas legales y mantenga la confianza de sus clientes y empleados.</p> <p>Ejemplo final: Una auditor\u00eda en una empresa de servicios detecta que el 30% de los empleados desconoce c\u00f3mo reportar un incidente. Como acci\u00f3n correctiva, se realiza una sesi\u00f3n espec\u00edfica sobre los procedimientos de notificaci\u00f3n, lo que mejora significativamente la tasa de reporte en la siguiente auditor\u00eda.</p> <p>La evaluaci\u00f3n y mejora continua permiten que las organizaciones enfrenten los desaf\u00edos de la ciberseguridad con mayor resiliencia y eficacia.  </p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#7-kit-de-concienciacion-en-ciberseguridad-de-incibe","title":"7. Kit de Concienciaci\u00f3n en Ciberseguridad de INCIBE","text":"<p>Podemos implantar los mejores antivirus, cortafuegos y otras herramientas de seguridad a nuestro alcance para mejorar la ciberseguridad de nuestra empresa. Podemos establecer pol\u00edticas internas para tener copias de seguridad y para configurar y administrar nuestros sistemas de forma segura. Pero, estas herramientas y pol\u00edticas no ser\u00e1n muy \u00fatiles si los empleados no siguen una serie de buenas pr\u00e1cticas. Si no est\u00e1n atentos y no conocen qu\u00e9 puede pasar, podr\u00e1n cometer errores que deriven en incidentes o los delincuentes encontrar\u00e1n la forma de enga\u00f1arlos para atacar a nuestra empresa.</p> <p>Por todo esto, los empleados son siempre el eslab\u00f3n m\u00e1s importante en la cadena de la seguridad para proteger nuestros recursos y la buena marcha de nuestro negocio. Por ello, para concienciarlos en un uso seguro de la tecnolog\u00eda actualizamos el kit de concienciaci\u00f3n. Con esta herramienta podr\u00e1s mejorar la ciberseguridad de tu organizaci\u00f3n desde el coraz\u00f3n de esta: sus empleados.</p> <p>El kit de concienciaci\u00f3n cuenta con:</p> <ul> <li>Materiales gr\u00e1ficos como posters, tr\u00edpticos y consejos;</li> <li>9 recursos formativos tem\u00e1ticos en formato texto para su lectura con apoyo de presentaciones para el aula, cada uno de ellos con un test de evaluaci\u00f3n;</li> <li>3 tipos distintos de ataques dirigidos para evaluar el nivel de ciberseguridad del personal de la organizaci\u00f3n, antes de realizar el plan de formaci\u00f3n y despu\u00e9s de haberlo concluido.</li> </ul> <p>A la hora de implantar el kit de concienciaci\u00f3n cada empresa puede hacerlo como mejor se adapte a sus necesidades. Para facilitar esta tarea se recomienda utilizar el manual dise\u00f1ado para su implantaci\u00f3n durante un a\u00f1o, tambi\u00e9n incluido en el kit. Este manual describe una forma pr\u00e1ctica para utilizar los diferentes elementos del kit, adem\u00e1s del tiempo estimado que se deber\u00e1 emplear en cada uno.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#71-elementos-del-kit-de-concienciacion","title":"7.1. Elementos del kit de concienciaci\u00f3n","text":"<p>Las diferentes secciones por las que est\u00e1 formado el kit de concienciaci\u00f3n son:</p> <ul> <li>Ataques dirigidos especialmente dise\u00f1ados para evaluar el nivel de concienciaci\u00f3n del personal en el uso del correo electr\u00f3nico. El correo electr\u00f3nico es el medio m\u00e1s utilizado por los ciberdelincuentes para realizar campa\u00f1as de malware y robar informaci\u00f3n confidencial. Mediante los ataques dirigidos se simulan las campa\u00f1as realizadas por los ciberdelincuentes, tanto de distribuci\u00f3n de malware como del tipo phishing, para comprobar cuan concienciados est\u00e1n los empleados frente a estos ataques. Ten en cuentras que tendr\u00e1s que evaluar si en tu organizaci\u00f3n, el correo electr\u00f3nico es el medio m\u00e1s utilizado por los ciberdelincuentes para realizar campa\u00f1as de malware y robar informaci\u00f3n confidencial.</li> <li>Posters con im\u00e1genes dise\u00f1adas para imprimir y ubicar en diferentes estancias de la empresa con contenido y mensaje para concienciar en aspectos concretos. Cada tem\u00e1tica en la que se centra el kit de concienciaci\u00f3n consta de dos tipos de posters diferentes, adem\u00e1s de dos posters con los que dar el pistoletazo de salida a la formaci\u00f3n.</li> <li>Tr\u00edpticos que servir\u00e1n para reforzar los contenidos incluidos en los diferentes recursos formativos. El objetivo de estos elementos es que sean impresos y colocados en lugares visibles de la organizaci\u00f3n para que el personal puedan acceder a su contenido de manera \u00e1gil.</li> <li> <p>Recursos formativos en los que consiste la formaci\u00f3n dirigida al personal de la organizaci\u00f3n. Consta de 9 recursos formativos divididos en 6 tem\u00e1ticas distintas: la informaci\u00f3n, fraudes a trav\u00e9s de correo electr\u00f3nico, contrase\u00f1as, el puesto de trabajo, BYOD y teletrabajo y las redes sociales. Cada recurso formativo consta de varios elementos:     </p> <ul> <li>Documento en formato PDF para su lectura o consulta con la informaci\u00f3n espec\u00edfica de cada tem\u00e1tica a tratar.         </li> <li>Presentaci\u00f3n en PowerPoint con un extracto de la informaci\u00f3n de cada PDF, dise\u00f1ada para facilitar su exposici\u00f3n en el aula.</li> <li>Consejos asociados en forma de im\u00e1genes con un texto asociado que servir\u00e1n para reforzar los contenidos de cada recurso formativo v\u00eda correo electr\u00f3nico, mensajes al m\u00f3vil o mediante otros medios de difusi\u00f3n interna.    </li> <li>Test de evaluaci\u00f3n con los que el personal podr\u00e1n comprobar si han asimilado los conocimientos de cada recurso y reforzar aquellos necesarios.</li> </ul> </li> <li> <p>Encuesta de satisfacci\u00f3n. Formulario en PDF donde se evaluar\u00e1 c\u00f3mo ha sido la implantaci\u00f3n del kit y los diferentes recursos. La informaci\u00f3n facilitada servir\u00e1 de ayuda para mejorar futuras versiones del kit de concienciaci\u00f3n. </p> </li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion/#fuentes","title":"Fuentes","text":"<ul> <li>Kit de concienciaci\u00f3n - INCIBE</li> <li>Video - Kit de concienciaci\u00f3n - INCIBE</li> <li>Descarga - kit de concienciaci\u00f3n - INCIBE</li> <li>Kit de concienciaci\u00f3n para universidades</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/","title":"UD 1 - 4.1 Plan de concienciaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#14-plan-de-formacion-y-concienciacion-de-seguridad","title":"1.4. Plan de formaci\u00f3n y concienciaci\u00f3n de seguridad","text":"<p>Tras establecer las medidas de seguridad necesarias, los responsables de la organizaci\u00f3n deben asegurarse de que los empleados est\u00e9n al tanto de las pol\u00edticas y procedimientos de seguridad de la informaci\u00f3n. Por tanto no basta con plasmar las medidas de seguridad en un documento, sino que es necesario que los empleados conozcan, comprendan y acaten todo su contenido. Para ello, es necesario dise\u00f1ar un plan de formaci\u00f3n y concienciaci\u00f3n en seguridad de la informaci\u00f3n que capacite sobre estas medidas y fomente una cultura de seguridad en la toda la organizaci\u00f3n. </p> <p>La formaci\u00f3n en seguridad es fundamental para que los empleados conozcan los riesgos a los que se enfrentan y sepan c\u00f3mo actuar para evitarlos. </p> <p>La concienciaci\u00f3n en seguridad es un aspecto fundamental para que los empleados sean conscientes de la importancia de la seguridad de la informaci\u00f3n y de su responsabilidad en la protecci\u00f3n de los activos de la organizaci\u00f3n. As\u00ed, la concienciaci\u00f3n en seguridad busca fomentar una cultura de seguridad en la organizaci\u00f3n.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>La ciberdelincuencia se ha convertido en un gran negocio y parece que ninguna zona del mundo ha quedado indemne ante esta creciente amenaza. Basta con echar un vistazo a los titulares para leer acerca de los \u00faltimos ataques cibern\u00e9ticos, las filtraciones de datos y el caos mundial que se est\u00e1 produciendo a causa de esta ola de delitos digitales.</p> <p>En los \u00faltimos a\u00f1os, el coste medio de la ciberdelincuencia para una organizaci\u00f3n ha aumentado en 1,4 millones de euros hasta alcanzar los 13 millones de euros. Y el n\u00famero medio de infracciones de seguridad en el \u00faltimo a\u00f1o (2020) ha aumentado en un 11%. Adem\u00e1s, el 68% de las organizaciones han experimentado un aumento solo en el n\u00famero de ataques de phishing.</p> <p>Cada vez surgen nuevas amenazas y las organizaciones ya no pueden confiar s\u00f3lo en sus defensas tecnol\u00f3gicas para mantenerlas a salvo. Los ciberdelincuentes est\u00e1n utilizando sofisticadas t\u00e9cnicas de ingenier\u00eda social para eludir estas defensas. Y todo lo que se necesita es que un empleado haga clic en un enlace malicioso y \u00a1se acab\u00f3 el juego!</p> <p>Tus empleados son tu primera l\u00ednea de defensa contra la ciberdelincuencia, por lo que es vital que est\u00e9n equipados con todos los conocimientos y habilidades necesarias para proteger tu organizaci\u00f3n. Un programa integral de Formaci\u00f3n y Concienciaci\u00f3n de Seguridad Cibern\u00e9tica es la mejor manera de educar al personal y crear una cultura de seguridad prioritaria.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#2-que-es-un-plan-de-formacion-y-concienciacion-de-seguridad-de-la-informacion","title":"2. \u00bfQu\u00e9 es un Plan de Formaci\u00f3n y Concienciaci\u00f3n de Seguridad de la informaci\u00f3n?","text":"<p>Un programa de formaci\u00f3n y concienciaci\u00f3n de seguridad es un programa formal con el objetivo de capacitar a los usuarios sobre las posibles amenazas a la informaci\u00f3n de una organizaci\u00f3n y c\u00f3mo evitar situaciones que puedan poner en riesgo los datos de la organizaci\u00f3n.</p> <p>En seguridad de la informaci\u00f3n, las personas son el eslab\u00f3n m\u00e1s d\u00e9bil. La gente quiere ser \u00fatil y hacer un buen trabajo. La gente quiere brindar un buen servicio a sus compa\u00f1eros de trabajo, clientes y proveedores. Los ingenieros sociales buscan explotar estas caracter\u00edsticas en los humanos.</p> <p>La \u00fanica defensa conocida para los ataques de ingenier\u00eda social es un programa efectivo de formaci\u00f3n y concienciaci\u00f3n de seguridad. A menos que los usuarios comprendan las t\u00e1cticas y t\u00e9cnicas de los ingenieros sociales, ser\u00e1n v\u00edctimas y pondr\u00e1n en riesgo los datos de la organizaci\u00f3n.</p> <p>Una encuesta de las brechas recientes revelar\u00e1 que una gran mayor\u00eda de ellas aprovecharon la explotaci\u00f3n de los humanos. Un ejemplo es el ataque \u00abAurora\u00bb contra Google y otras grandes compa\u00f1\u00edas de software. Se envi\u00f3 a los usuarios a un sitio web que les infect\u00f3 con un exploit de d\u00eda 0. El resultado fue que una gran cantidad de propiedad intelectual, incluido el c\u00f3digo fuente, fue robada de compa\u00f1\u00edas como Google y Adobe.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#21-objetivos","title":"2.1. Objetivos","text":"<p>Los objetivos del programa de formaci\u00f3n y concienciaci\u00f3n en seguridad de la informaci\u00f3n son:</p> <ul> <li>Reducir la superficie de ataque de la organizaci\u00f3n.</li> <li> <p>Capacitar a los TODOS los usuarios de la organizaci\u00f3n para que asuman la responsabilidad personal de proteger la informaci\u00f3n de esta.</p> <ul> <li>Formaci\u00f3n: Proporcionar a los usuarios la formaci\u00f3n necesaria para que puedan identificar y responder a las amenazas de seguridad.</li> <li>Concienciaci\u00f3n: Crear una cultura de seguridad en la organizaci\u00f3n para que los usuarios sean conscientes de las amenazas de seguridad y de la importancia de proteger los datos de la organizaci\u00f3n.   </li> </ul> </li> <li> <p>Hacer cumplir las pol\u00edticas y procedimientos que la organizaci\u00f3n ha implementado para proteger sus datos.</p> </li> </ul> <p>Las pol\u00edticas y procedimientos pueden incluir, entre otros, pol\u00edticas de uso de ordenadores, pol\u00edticas de uso de Internet, pol\u00edticas de acceso remoto y otras pol\u00edticas del puesto de trabajo que tienen como objetivo gobernar y proteger los datos de la organizaci\u00f3n.</p> <p>Hoy en d\u00eda, los ciberdelincuentes no intentan entrar a trav\u00e9s del firewall. Hay soluciones como antivirus, sistemas de detecci\u00f3n de intrusos, sistemas de prevenci\u00f3n de intrusiones y otras soluciones t\u00e9cnicas a la informaci\u00f3n de protecci\u00f3n. Con estas soluciones sofisticadas, los atacantes ahora est\u00e1n recurriendo a ataques m\u00e1s espec\u00edficos enfocados en enga\u00f1ar a los usuarios para que hagan clic en enlaces o abran archivos adjuntos.</p> <p>Esto puede parecer simplista, pero \u00bfqu\u00e9 har\u00edan la mayor\u00eda de los usuarios si recibieran un archivo adjunto que parece provenir del departamento de recursos humanos que parece ser una hoja de c\u00e1lculo de aumentos para todos en la organizaci\u00f3n? La curiosidad podr\u00eda no solo matar al gato, tambi\u00e9n podr\u00eda poner en riesgo tus datos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#22-importancia","title":"2.2. Importancia","text":"<p>Un buen programa de formaci\u00f3n y concienciaci\u00f3n de seguridad es una excelente manera de informar al personal sobre cualquier tipo de actividad maliciosa dirigida al uso del ciberespacio de una empresa.</p> <p>Preparar al personal para descubrir la suplantaci\u00f3n de identidad (phishing) u otros tipos de estafas cibern\u00e9ticas significa proporcionar un sistema integral de capacitaci\u00f3n, pol\u00edticas e instrucciones de procedimiento que podr\u00edan ayudar a reconocer signos de malversaci\u00f3n e informar actividades sospechosas y no ser presa de los estafadores.</p> <p>La capacitaci\u00f3n del usuario final es una de las claves para la implementaci\u00f3n exitosa de cualquier programa de formaci\u00f3n y concienciaci\u00f3n de seguridad.</p> <p>Los detractores de los programas de capacitaci\u00f3n y concienciaci\u00f3n sobre seguridad a menudo se\u00f1alan c\u00f3mo, independientemente de la cantidad de capacitaci\u00f3n que reciben los usuarios, las violaciones que se cometen, y el elemento humano sigue siendo uno de los eslabones m\u00e1s d\u00e9biles en la cadena de seguridad cibern\u00e9tica.</p> <p>Tambi\u00e9n se\u00f1alan que existe una desconexi\u00f3n entre el rendimiento y la capacidad de los usuarios para reconocer las amenazas en un supuesto pr\u00e1ctico vs sus comportamientos y respuestas en un entorno de la vida real.</p> <p>Sin embargo, la capacitaci\u00f3n en conciencia de seguridad vale la pena. Todo el personal debe ser consciente de las amenazas comunes, para que, como m\u00ednimo, no sean v\u00edctimas de las estafas y los intentos de phishing m\u00e1s f\u00e1ciles.</p> <p>Si son v\u00edctimas de ataques m\u00e1s sofisticados, los usuarios pueden aplicar el conocimiento adquirido durante el entrenamiento para mitigar los efectos del ataque, reunir la informaci\u00f3n necesaria para que los profesionales de seguridad act\u00faen y notifiquen al departamento apropiado a trav\u00e9s de los canales correctos.</p> <p>El aspecto importante en el que centrarse es que: EL programa implementado sea efectivo y aborde las necesidades de la organizaci\u00f3n.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#23-elementos-esenciales-de-un-plan-efectivo-de-formacion-y-concienciacion","title":"2.3. Elementos esenciales de un Plan efectivo de formaci\u00f3n y concienciaci\u00f3n","text":"<p>Aunque cada organizaci\u00f3n puede y debe adaptar un programa de formaci\u00f3n y concienciaci\u00f3n a sus necesidades y a la composici\u00f3n y ubicaci\u00f3n de su fuerza laboral, hay algunos aspectos que siempre deben tenerse en cuenta para crear un programa que sea efectivo:</p> <ul> <li>Realizar una evaluaci\u00f3n de ciberseguridad para identificar el riesgos e impacto de los ciberataques.</li> <li>M\u00e9todos de formaci\u00f3n preferidos.</li> <li>Estrategias de refuerzo y medici\u00f3n para garantizar que se cumplan los objetivos de seguridad de la empresa.</li> <li>Evaluaci\u00f3n peri\u00f3dica del programa.</li> </ul> <p>A continuaci\u00f3n analizamos los elementos principales de estos planes.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#3-planificacion","title":"3. Planificaci\u00f3n","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#31-identificar-las-necesidades-de-sensibilizacion-sobre-ciberseguridad","title":"3.1. Identificar las necesidades de sensibilizaci\u00f3n sobre ciberseguridad","text":"<p>\u00bfEn qu\u00e9 se debe formar al personal?, \u00bfQu\u00e9 conjuntos de habilidades necesitan?</p> <p>Si bien para la formaci\u00f3n y concienciaci\u00f3n se necesita informaci\u00f3n b\u00e1sica que siempre es relevante, para satisfacer las necesidades de la empresa y despertar el inter\u00e9s de los empleados, que tendr\u00e1n un papel efectivo en la resiliencia cibern\u00e9tica de la organizaci\u00f3n, es importante adaptar el programa de seguridad al enfocarse en contramedidas o comportamientos relacionados con amenazas reales o posibles, internas o externas a la infraestructura de TI de la empresa.</p> <p>Es importante completar una evaluaci\u00f3n de riesgos y establecer la respuesta adecuada que permita al personal tomar medidas de mitigaci\u00f3n adecuadas de manera adecuada. Una evaluaci\u00f3n de impacto empresarial puede ayudar a desarrollar estrategias para gestionar un incidente al encontrar formas de minimizar sus impactos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#32-destacar-las-debilidades","title":"3.2. Destacar las debilidades","text":"<p>Parte de la evaluaci\u00f3n implica tambi\u00e9n identificar posibles vulnerabilidades de seguridad en sistemas o procedimientos con un ojo puesto en el papel humano en la cadena de ciberseguridad.</p> <p>Una revisi\u00f3n simple ayudar\u00e1 a establecer nuevos requisitos de seguridad y a idear acciones correctivas que podr\u00edan necesitar abordarse a trav\u00e9s de la formaci\u00f3n.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#33-aprobacion-y-apoyo-de-la-direccion-ejecutiva","title":"3.3. Aprobaci\u00f3n y apoyo de la direcci\u00f3n ejecutiva","text":"<p>Antes de que uno pueda proceder, el programa de concienciaci\u00f3n sobre seguridad debe ser aprobado.</p> <p>Obtener la autorizaci\u00f3n de la gerencia para avanzar en el proceso apoyar\u00e1, impulsar\u00e1, dar\u00e1 instrucciones y aplicar\u00e1 la implementaci\u00f3n del plan. Es el liderazgo el que debe estar a favor de invertir en nuevas soluciones de seguridad, pero tambi\u00e9n en opciones de formaci\u00f3n.</p> <p>La participaci\u00f3n y el apoyo de la alta direcci\u00f3n tambi\u00e9n determinar\u00e1n el nivel de importancia que tendr\u00e1 todo el programa y la formaci\u00f3n a los ojos de los empleados y mostrar\u00e1 el compromiso del empleador con la seguridad.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#34-inversiones-en-la-preparacion-del-plan","title":"3.4. Inversiones en la preparaci\u00f3n del plan","text":"<p>Para que despegue un programa de Educaci\u00f3n, Formaci\u00f3n y Conciencia de Seguridad, se necesita una planificaci\u00f3n significativa en la inversi\u00f3n para garantizar que se asegure suficiente financiamiento para cubrir al menos los requisitos m\u00ednimos de formaci\u00f3n y garantizar un programa efectivo y org\u00e1nico.</p> <p>El plan de concienciaci\u00f3n y formaci\u00f3n sobre seguridad debe ser respaldado por el presupuesto y cubrir los eventuales contratos y el material del curso que deben desarrollar y proporcionar los capacitadores.</p> <p>Un plan a largo plazo necesita ser ideado y financiado a trav\u00e9s del apoyo de la gerencia para que las opciones est\u00e9n claras desde el principio. El alcance debe incluir conocimiento y formaci\u00f3n especializada, as\u00ed como cursos de actualizaci\u00f3n peri\u00f3dica para todos los usuarios de ordenadores empleados.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#35-adaptar-el-programa","title":"3.5. Adaptar el programa","text":"<p>Se debe desarrollar un programa de concienciaci\u00f3n de acuerdo con los objetivos corporativos para garantizar que el programa satisfaga las necesidades del negocio y cumpla con las regulaciones, pol\u00edticas, procedimientos, est\u00e1ndares y pautas relacionados.</p> <p>Es importante que el programa sea realista. Ser\u00eda imposible restringir el uso de correos electr\u00f3nicos y dif\u00edcil limitar el uso de las redes sociales. Es mejor centrarse en cambiar los comportamientos en l\u00ednea y en el uso adecuado y m\u00e1s seguro de cualquier herramienta.</p> <p>Despu\u00e9s de determinar cu\u00e1les son las necesidades de la organizaci\u00f3n, sus debilidades percibidas y el presupuesto, es importante adaptar el programa proporcionando informaci\u00f3n espec\u00edfica y actividades de formaci\u00f3n relevantes para el trabajo del empleado.</p> <p>Temas b\u00e1sicos como ingenier\u00eda social, spear phishing, seguridad de correo electr\u00f3nico, contrase\u00f1as, seguridad de dispositivos m\u00f3viles, y el malware siempre est\u00e1n presentes.</p> <p>Pero \u00bfqu\u00e9 m\u00e1s hay que tener en cuenta?</p> <p>\u00bfLa fuerza laboral est\u00e1 distribuida y en diferentes zonas horarias?</p> <p>\u00bfHay problemas culturales espec\u00edficos que deben abordarse o tomarse en consideraci\u00f3n?</p> <p>\u00bfEst\u00e1 la fuerza laboral altamente informada en TI en su totalidad o requiere informaci\u00f3n m\u00e1s b\u00e1sica?</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#36-aplicar-metodologias-educativas-particulares","title":"3.6. Aplicar metodolog\u00edas educativas particulares","text":"<p>El plan de formaci\u00f3n es lo que ayuda a fortalecer la postura de seguridad de la compa\u00f1\u00eda al definir primero su alcance y contenido vinculado a las pol\u00edticas y directivas de seguridad cibern\u00e9tica.</p> <p>\u00bfLa formaci\u00f3n vendr\u00e1 de la propia empresa o subcontratada? \u00bfSer\u00e1 instructiva o autodidacta?</p> <p>Las t\u00e9cnicas de la compa\u00f1\u00eda pueden incluir una o m\u00e1s de las siguientes herramientas de concienciaci\u00f3n de instrucci\u00f3n y evaluaci\u00f3n:</p> <ul> <li>carteles,</li> <li>salvapantallas y pancartas de advertencia,</li> <li>alertas generadas por ordenador,</li> <li>mensajes de correo electr\u00f3nico de toda la agencia</li> <li>sesiones basadas en la web,</li> <li>teleconferencias o</li> <li>sesiones dirigidas por un instructor en persona.</li> </ul> <p>Los empleados tienen diferentes estilos de aprendizaje e intereses, y ciertos medios para transmitir informaci\u00f3n ya podr\u00edan estar saturados. Este paso requiere creatividad para idear formas de llegar a todos los empleados.</p> <p>Es posible que desees incluir ejercicios pr\u00e1cticos para mantener el tema vivo y relevante. La frecuencia del entrenamiento tambi\u00e9n debe determinarse cuidadosamente. La conciencia de seguridad no debe ser un trato \u00fanico sino un proceso continuo.</p> <p>Sin embargo, demasiadas sesiones de formaci\u00f3n repetitivas podr\u00edan hacer que los empleados pierdan inter\u00e9s en el tema.</p> <p>Una vez que se determina cu\u00e1l es la mejor manera de brindar formaci\u00f3n en concienciaci\u00f3n de seguridad a los empleados, se debe idear un plan para su implementaci\u00f3n.</p> <p>Una buena combinaci\u00f3n de instrucci\u00f3n presencial con formaci\u00f3n en ordenador puede ayudar a llegar a todos los empleados. M\u00faltiples soluciones para entregar informaci\u00f3n pueden ayudar a involucrar a empleados externos, trabajadores remotos, personal de turno o empleados cuyo compromiso y roles de trabajo les impiden tener horarios predecibles.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#4-implementar","title":"4. Implementar","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#41-estrategia-y-enfoque","title":"4.1. Estrategia y enfoque","text":"<p>Hora de presentar el programa de seguridad de la informaci\u00f3n.</p> <p>El alcance y los objetivos de la formaci\u00f3n deben estar claramente establecidos, y la importancia de la participaci\u00f3n en el programa, as\u00ed como la participaci\u00f3n de la alta gerencia, debe ser evidente para los empleados.</p> <p>Los supervisores deben participar para asegurarse de que los empleados tengan tiempo y oportunidades para participar en sesiones de formaci\u00f3n o cursos en l\u00ednea.</p> <p>Esto es importante ya que transmite que la capacitaci\u00f3n en concienciaci\u00f3n es una parte esencial de la jornada laboral de los empleados.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#42-involucrar-a-todo-el-personal-de-la-empresa","title":"4.2. Involucrar a todo el personal de la empresa","text":"<p>El prop\u00f3sito de la conciencia cibern\u00e9tica es ayudar a las organizaciones a ense\u00f1ar a sus empleados a asegurar el comportamiento. Por lo tanto, las compa\u00f1\u00edas querr\u00e1n invertir fuertemente en programas de educaci\u00f3n en seguridad no solo para aquellos operadores que administran la infraestructura de TI sino tambi\u00e9n para incluir personal que no sea de TI.</p> <p>Esto puede significar ajustar la estrategia de concienciaci\u00f3n y formaci\u00f3n para estar m\u00e1s en l\u00ednea con los diferentes roles en la corporaci\u00f3n y para satisfacer las necesidades de todos los usuarios dentro de ella, desde empleados hasta supervisores y gerentes funcionales.</p> <p>Cada miembro del personal debe participar en un papel m\u00e1s activo en lo que respecta a la seguridad de TI y reducir la exposici\u00f3n a los ataques de integridad de datos y otras amenazas al preparar la \u00faltima l\u00ednea de defensa de la compa\u00f1\u00eda: los empleados.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#43-establecer-responsabilidad","title":"4.3. Establecer responsabilidad","text":"<p>Es importante comunicar con claridad qu\u00e9 partes de la formaci\u00f3n son obligatorias para que los empleados sean plenamente conscientes de las pol\u00edticas y procedimientos espec\u00edficos de la empresa.</p> <p>Tambi\u00e9n es esencial dise\u00f1ar mecanismos para garantizar la asistencia obligatoria a la formaci\u00f3n o determinar qui\u00e9n ser\u00e1 responsable de garantizar la asistencia para garantizar que el personal pueda obtener la formaci\u00f3n que necesitan.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#5-operar-y-mantener","title":"5. Operar y mantener","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#51-ejercicios-practicos","title":"5.1 Ejercicios pr\u00e1cticos","text":"<p>Los ejercicios pr\u00e1cticos simulados y evaluaciones de conocimiento a trav\u00e9s de conjuntos de habilidades que ponen \u00e9nfasis en el aprendizaje interactivo pueden ayudar a hacer que la formaci\u00f3n sea m\u00e1s relevante y m\u00e1s f\u00e1cil de relacionar con incidentes relacionados con la seguridad cibern\u00e9tica de la vida real.</p> <p>La organizaci\u00f3n tambi\u00e9n debe estar preparada para proporcionar formaci\u00f3n fundamental que pueda ayudar a un personal menos t\u00e9cnico a comprender los principios b\u00e1sicos de TI y a comprender mejor los conceptos de conciencia.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#6-monitorizar-y-evaluar","title":"6. Monitorizar y evaluar","text":"","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#61-revisiones-en-progreso","title":"6.1. Revisiones en progreso","text":"<p>Las evaluaciones posteriores a la implementaci\u00f3n deben llevarse a cabo durante las autoevaluaciones anuales para garantizar que la orientaci\u00f3n y los recursos se actualicen y mantengan, ya que deben permanecer adaptables y proporcionar un refuerzo continuo.</p> <p>Aqu\u00ed es donde se identifican y discuten las oportunidades para la mejora del programa (incluidas las brechas y deficiencias).</p> <p>Si es necesario, se puede cambiar el programa de formaci\u00f3n.</p> <p>La evaluaci\u00f3n posterior a la implementaci\u00f3n del programa es imprescindible para proporcionar comentarios sobre el material de sensibilizaci\u00f3n y capacitaci\u00f3n y garantizar que los empleados hayan recibido la educaci\u00f3n requerida. Las t\u00e9cnicas de evaluaci\u00f3n y retroalimentaci\u00f3n pueden proporcionar informaci\u00f3n que deber\u00eda resultar en una actualizaci\u00f3n del plan del programa de concienciaci\u00f3n y capacitaci\u00f3n.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#62-inspecciones","title":"6.2. Inspecciones","text":"<p>Inspecciona los informes de capacitaci\u00f3n y los resultados de la auditor\u00eda para comprender completamente las fortalezas y debilidades del programa de seguridad.</p> <p>La evaluaci\u00f3n de los planes y programas de seguridad puede mostrar que se est\u00e1n haciendo progresos para garantizar que los planes de seguridad de la empresa est\u00e9n alineados adecuadamente con la misi\u00f3n, metas y objetivos de sus programas.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#63-metrica-supervision-administrativa-y-operativa","title":"6.3. M\u00e9trica, supervisi\u00f3n administrativa y operativa","text":"<p>Las m\u00e9tricas claras pueden ayudar a demostrar el \u00e9xito y ajustar el programa. Mide el progreso para ayudar a determinar la conciencia de seguridad de TI de tu empresa y si las necesidades de capacitaci\u00f3n son suficientes o si un \u00e1rea no mejora como se esperaba.</p> <p>Deben usarse m\u00e9tricas de seguridad efectivas para identificar debilidades, determinar tendencias para utilizar mejor los recursos de seguridad y juzgar el \u00e9xito o el fracaso de las soluciones de seguridad implementadas.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#64-actividades-de-evaluacion-del-programa-y-comentarios","title":"6.4. Actividades de evaluaci\u00f3n del programa y comentarios","text":"<p>Las personas necesitan comentarios regulares sobre su desempe\u00f1o despu\u00e9s de implementar nuevas pr\u00e1cticas de seguridad.</p> <p>Es una buena idea solicitar ideas para el usuario final o fomentar comentarios para medir el \u00e9xito y el crecimiento del programa.</p> <p>\u00bfCu\u00e1ntos usuarios realmente completan la capacitaci\u00f3n? \u00bfQu\u00e9 les gust\u00f3? \u00bfAprendieron algo? \u00bfHan cambiado los comportamientos? Adem\u00e1s, solicita nuevas ideas y sugerencias para mejorar. Fomenta la creatividad.</p> <p>Un programa de concienciaci\u00f3n de seguridad no es un trato \u00fanico, sino que comprende un enfoque continuo y hol\u00edstico. Tiene un ciclo de vida continuo que debe evaluarse y mejorarse constantemente; de lo contrario, los esfuerzos inconsistentes abren la organizaci\u00f3n a un mayor riesgo.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#7-cuestiones-a-incluir-en-el-plan-de-formacion-y-concienciacion-en-ciberseguridad","title":"7. Cuestiones a incluir en el Plan de Formaci\u00f3n y Concienciaci\u00f3n en ciberseguridad","text":"<p>Las principales cuestiones a incluir en un Plan de Concienciaci\u00f3n en Seguridad inform\u00e1tica son las siguientes:</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#71-tener-cuidado-con-el-wifi-publico","title":"7.1. Tener cuidado con el wifi p\u00fablico","text":"<p>Si bien la mayor\u00eda de los puntos de acceso Wi-Fi p\u00fablicos son perfectamente seguros, eso no siempre es cierto.</p> <p>Los delincuentes a menudo transmiten su dispositivo como un punto de acceso p\u00fablico, especialmente en lugares p\u00fablicos. Luego, cuando un usuario se conecta a Internet a trav\u00e9s de ellos, el delincuente puede interceptar todos los datos que se mueven entre la v\u00edctima y su sitio de compras en l\u00ednea, banco o cualquier otro lugar al que navegue.</p> <p>Muchos dispositivos inteligentes tambi\u00e9n buscar\u00e1n autom\u00e1ticamente puntos de conexi\u00f3n conocidos, como el Wi-Fi de su hogar.</p> <p>Los ataques m\u00e1s nuevos observan este comportamiento y simplemente preguntan al dispositivo qu\u00e9 SSID est\u00e1n buscando. Cuando el tel\u00e9fono les dice que est\u00e1 buscando su enrutador \u2018hogar\u2019, el ataque responde: \u00abSoy el enrutador de su hogar\u00bb, y el tel\u00e9fono contin\u00faa y se conecta.</p> <p>Para combatir estos problemas, es una buena pr\u00e1ctica que los usuarios apaguen el Wi-Fi y Bluetooth hasta que sean necesarios.</p> <p>En el caso del acceso inal\u00e1mbrico, deben verificar el SSID de una ubicaci\u00f3n, a menudo simplemente preguntando a un establecimiento el nombre de su punto de acceso Wi-Fi antes de conectarse. Los usuarios tambi\u00e9n deben considerar instalar un software VPN para asegurarse de que solo hagan conexiones seguras y encriptadas a servicios conocidos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#72-usar-mejores-contrasenas","title":"7.2.  Usar mejores contrase\u00f1as","text":"<p>Otro error que cometen los usuarios es usar exactamente la misma contrase\u00f1a para todas sus cuentas en l\u00ednea, generalmente porque recordar una contrase\u00f1a \u00fanica para cada sitio en el que tienen una cuenta puede ser imposible.</p> <p>Pero si un delincuente logra interceptar esa contrase\u00f1a, tendr\u00e1 acceso a todas las cuentas del usuario, incluidos los sitios bancarios y de compras.</p> <p>La mejor opci\u00f3n es utilizar un administrador de contrase\u00f1as que almacene el nombre de usuario y la contrase\u00f1a para cada cuenta. Por supuesto, se debe tener especial cuidado para garantizar que la contrase\u00f1a del administrador sea especialmente segura y f\u00e1cil de recordar.</p> <p>Un truco para crear contrase\u00f1as seguras es utilizar las primeras letras de una oraci\u00f3n, letra de canci\u00f3n o frase, insertar letras may\u00fasculas, n\u00fameros y caracteres especiales, y obtendr\u00e1s una contrase\u00f1a bastante segura.</p> <p>Para estar a\u00fan m\u00e1s seguro, considera agregar autenticaci\u00f3n de dos factores para cualquier ubicaci\u00f3n donde se almacenen datos confidenciales. Es un paso adicional en el proceso de inicio de sesi\u00f3n, pero aumentar\u00e1 significativamente la seguridad de tus cuentas y datos.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#73-reconocer-el-phishing","title":"7.3.  Reconocer el phishing","text":"<p>Probablemente les hayas repetido a tus empleados que nunca hagan clic en los enlaces en los anuncios enviados a su correo electr\u00f3nico o publicados en sitios web a menos que los revisen primero.</p> <p>Hay muchos avisos, como una mala redacci\u00f3n o gram\u00e1tica, URL complejas o mal escritas, y un dise\u00f1o deficiente que puede ser un indicio clave de que un correo electr\u00f3nico es malicioso.</p> <p>El caso es que siempre existir\u00e1 quien no pueda resistirse a abrir un correo electr\u00f3nico, acceder a un archivo adjunto de alguien que no conoce o pinchar en un enlace de una web, sobre todo cuando incluye un asunto atractivo.</p> <p>Es por eso que cualquier esfuerzo educativo debe complementarse con soluciones efectivas que puedan detectar spam y phishing, validar enlaces y ejecutar archivos ejecutables en un entorno limitado, incluso para correo electr\u00f3nico personal, para garantizar que las trampas maliciosas simplemente funcionen no llegar a un usuario final.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#74-actualizar-dispositivos-y-usar-software-de-seguridad","title":"7.4.  Actualizar dispositivos y usar software de seguridad","text":"<p>Los usuarios deben tener un agente de seguridad aprobado por la empresa o una soluci\u00f3n instalada en cualquier dispositivo que tenga acceso a los recursos corporativos. Este software tambi\u00e9n necesita mantenerse actualizado, y los an\u00e1lisis de dispositivos deben ejecutarse regularmente.</p> <p>Del mismo modo, los dispositivos de punto final deben actualizarse y parchearse regularmente.</p> <p>Los controles de acceso a la red deber\u00edan poder detectar si la seguridad y el software del sistema operativo son actuales, y si no, los usuarios deber\u00edan ser redirigidos a un servidor de correcci\u00f3n para realizar las actualizaciones necesarias o alertados sobre el estado no seguro de su dispositivo.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#75-monitorizar-las-redes-sociales","title":"7.5.  Monitorizar las redes sociales","text":"<p>Los delincuentes a menudo personalizar\u00e1n un ataque para que sea m\u00e1s probable que una v\u00edctima haga clic en un enlace.</p> <p>Y el lugar m\u00e1s com\u00fan para que obtengan esa informaci\u00f3n personal es de los sitios de redes sociales.</p> <p>La forma m\u00e1s f\u00e1cil de evitar eso es simplemente configurar controles de privacidad estrictos que solo permitan que las personas preseleccionadas vean su p\u00e1gina.</p> <p>Las personas que desean un perfil abierto de redes sociales deben seleccionar cuidadosamente a qui\u00e9n van a hacer amigos. Si no conoces a alguien, o si algo en su sitio personal parece extra\u00f1o, rechaza su solicitud. E incluso si la persona es alguien que conoces, primero verifica si ya es un amigo. Si es as\u00ed, existe una posibilidad significativa de que su cuenta haya sido secuestrada o duplicada.</p>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u01/teoria/IS-U1.4.1.-PlanDeConcienciacion.old/#fuente","title":"Fuente","text":"<ul> <li>Plan de concienciaci\u00f3n de seguridad inform\u00e1tica</li> <li>Incibe: concienciaci\u00f3n</li> </ul>","tags":["IS","Plan","Concienciaci\u00f3n","Seguridad","Inform\u00e1tica"]},{"location":"section2/u02/","title":"UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 2 - Auditor\u00eda de incidentes de ciberseguridad:</p> <ul> <li>Taxonom\u00eda, documentaci\u00f3n y valoraci\u00f3n de incidentes de ciberseguridad.</li> <li>Controles, herramientas y mecanismos de detecci\u00f3n e identificaci\u00f3n y alerta de incidentes.</li> <li>Controles, herramientas y mecanismos de detecci\u00f3n e identificaci\u00f3n de incidentes de seguridad f\u00edsica.</li> <li>Controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes a trav\u00e9s de la investigaci\u00f3n en fuentes abiertas (OSINT).</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Analiza incidentes de ciberseguridad utilizando herramientas, mecanismos de detecci\u00f3n y alertas de seguridad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha clasificado y definido la taxonom\u00eda de incidentes de ciberseguridad que pueden afectar a la organizaci\u00f3n.</li> <li>b) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes.</li> <li>c) Se han establecido controles y mecanismos de detecci\u00f3n e identificaci\u00f3n de incidentes de seguridad f\u00edsica.</li> <li>d) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes a trav\u00e9s de la investigaci\u00f3n en fuentes abiertas (OSINT: Open Source Intelligence).</li> <li>e) Se ha realizado una clasificaci\u00f3n, valoraci\u00f3n, documentaci\u00f3n y seguimiento de los incidentes detectados dentro de la organizaci\u00f3n.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: nos podemos basar en la taxonom\u00eda que Incibe pone a nuestra disposici\u00f3n en la gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes, en la p\u00e1gina 14 y posteriores.</li> <li>Criterio de evaluaci\u00f3n d: para trabajar este criterio de evaluaci\u00f3n se pueden emplear las herramientas de HaveIBeenPwnd y de Firefox Monitor. Si se produce una filtraci\u00f3n de datos, estas herramientas notificar\u00e1n dicha filtraci\u00f3n.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#teoria","title":"Teor\u00eda","text":"<p>En moodle.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#ejercicios","title":"Ejercicios","text":"<p>En moodle.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"<p>Presentaci\u00f3n de trabajos + examen te\u00f3rico.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad. - Clasificaci\u00f3n, valoraci\u00f3n y documentaci\u00f3n de un incidente. - Uso de herramientas OSINT para obtener informaci\u00f3n de una persona o entidad. - Puesta en funcionamiento de herramientas de monitorizaci\u00f3n (SIEM)</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad. Tipos test principal, aunque con posibilidad de supuesto pr\u00e1cticos y desarrollo de contenidos.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/","title":"UD 2 - P1: Taxonom\u00eda","text":"","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/#p21-taxonomia-de-incidentes","title":"P2.1 - Taxonom\u00eda de incidentes","text":"","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/#actividad-investigacion-y-desarrollo-de-la-taxonomia-de-incidentes-de-ciberseguridad","title":"Actividad: Investigaci\u00f3n y Desarrollo de la Taxonom\u00eda de Incidentes de Ciberseguridad","text":"<p>ID actividad: 2.a.01</p> <p>Agrupamiento de la actividad: Grupo de max 5 personas</p>","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/#descripcion","title":"Descripci\u00f3n:","text":"<p>La actividad consiste en investigar y desarrollar una comprensi\u00f3n detallada de la taxonom\u00eda de incidentes de ciberseguridad, bas\u00e1ndose en la taxonom\u00eda utilizada por INCIBE-CERT y la Gu\u00eda Nacional de Notificaci\u00f3n y Gesti\u00f3n de Ciberincidentes.</p> <p>Objetivo:</p> <ul> <li>Comprender la importancia de una taxonom\u00eda de incidentes de ciberseguridad.</li> <li>Identificar y describir diferentes tipos de incidentes dentro de las agrupaciones seleccionadas.</li> <li>Relacionar teor\u00eda con casos pr\u00e1cticos a trav\u00e9s de ejemplos reales de incidentes.</li> <li>Resaltar casos reales de incidentes para cada tipo identificado.</li> </ul> <p>Trabajo a realizar:</p> <ol> <li>Seleccionar cuatro agrupaciones de incidentes de ciberseguridad, asegur\u00e1ndose de que no se solapen con las elecciones de otros grupos.</li> <li>Para cada agrupaci\u00f3n, elegir al menos dos tipos de incidentes (Por ejemplo, para agrupaci\u00f3n Contenido da\u00f1ino, tipo: Sistema infectado por malware: Backdoror, Rootkit, Adware) y desarrollar una tabla con la siguiente informaci\u00f3n para cada tipo:</li> <li>Descripci\u00f3n (\u00bfQu\u00e9 es?)</li> <li>Funcionamiento (\u00bfComo funciona?)</li> <li>Identificaci\u00f3n (\u00bfC\u00f3mo puedo identificarlo?)</li> <li>Protecci\u00f3n (\u00bfC\u00f3mo puedo protegerme de \u00e9l?)</li> <li>En una tabla aparte, incorpora ejemplo de caso real con detalles espec\u00edficos: Por cada tipo de agrupaci\u00f3n, al menos un caso de incidente registrado de este agrupaci\u00f3n/tipo a destacar, con informaci\u00f3n:<ul> <li>URL de la noticia/descripci\u00f3n del incidente</li> <li>Agrupaci\u00f3n/Tipo</li> <li>Origen</li> <li>Categor\u00eda</li> <li>Perfile usuarios afectados</li> <li>Numero y tipolog\u00eda de sistemas afectados</li> <li>Impacto del incidente</li> </ul> </li> </ol>","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/#recursos","title":"Recursos","text":"<ul> <li>Apuntes/transparencias proporcionados en clase.</li> <li>Gu\u00eda Nacional de Notificaci\u00f3n y Gesti\u00f3n de Ciberincidentes.</li> <li>Matriz de taxonom\u00eda de INCIBE-CERT: https://github.com/flosada/RSITaxonomy_ES/blob/master/humanv1.md</li> </ul>","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/#evaluacion-y-calificacion","title":"Evaluaci\u00f3n y calificaci\u00f3n","text":"<p>RA y CE evaluados: RA2. CE a (Clasificaci\u00f3n y definici\u00f3n de la taxonom\u00eda de incidentes de ciberseguridad)</p> <p>Conlleva presentaci\u00f3n: SI</p> <p>Rubrica:</p> <ul> <li>Identifica al menos 2 tipos concretos por cada grupo. (4 Agrupaciones * 2 tipos  = 8 tipos de incidentes)</li> <li>Identifica y cubre cada uno de los puntos, de los ejemplos concretos.</li> <li>Est\u00e1 trabajado y es preciso el detalle de los puntos</li> <li>Identifica minimo un caso conocido por tipo concreto.: (8 tipos de incidentes: m\u00ednimo 8 casos de incidentes)</li> <li>Presentaci\u00f3n: inicio Mi\u00e9rcoles 13/12</li> </ul>","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/#entrega","title":"Entrega","text":"<p>Condiciones de entrega: La no cumplimentaci\u00f3n de estas condiciones puede resultar en una calificaci\u00f3n de no entregado.</p> <ul> <li>URL a repositorio: El trabajo se entregar\u00e1 en un repositorio de GitHub, trabajando por proyectos con registro de acciones seg\u00fan el perfil de cada usuario del grupo.</li> <li>L\u00edmite de tama\u00f1o del documento: El entregable final debe ser un PDF de m\u00e1ximo 4 folios (8 caras). \u00cdndices, anexos y portada no se incluyen en el conteo.</li> <li>Id del documento: El nombre del archivo ser\u00e1 IS-2.a.01-Iniciales.pdf, donde IS representa las iniciales del m\u00f3dulo, 2.a.01 es el ID de la actividad, e Iniciales son las del alumno/grupo.</li> </ul>","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/practicas/IS-U2.-Practica001/#fuente","title":"Fuente","text":"<ul> <li>Taxonomia de un incidente</li> <li>Taxonom\u00eda</li> <li>Conoce a tus enemigos</li> <li>GU\u00cdA NACIONAL DE NOTIFICACI\u00d3N Y GESTI\u00d3N DE CIBERINCIDENTES</li> </ul>","tags":["Incidentes","Taxonom\u00eda"]},{"location":"section2/u02/recursos/Taxonomia/humanv1/","title":"REFERENCE TAXONOMY INCIDENT  Taxonomy Spanish version (human readable version)","text":"<p>This is the Spanish version of Reference Security Incident Classification Taxonomy (https://github.com/enisaeu/Reference-Security-Incident-Taxonomy-Task-Force)</p> <p>Reference: https://www.incibe-cert.es/sites/default/files/contenidos/guias/doc/guia_nacional_notificacion_gestion_ciberincidentes.pdf</p> <p>Version: 1002</p> CLASIFICACI\u00d3N (1\u00aa COLUMNA) EJEMPLOS DE INCIDENTES (2\u00aa COLUMNA) Descripci\u00f3n / Ejemplos Contenido abusivo Spam O \"correo masivo no solicitado\", significa que el destinatario no ha concedido un permiso verificable para el env\u00edo del mensaje y que \u00e9ste se env\u00eda como parte de una colecci\u00f3n m\u00e1s amplia de mensajes, todos ellos con un contenido funcionalmente comparable. Este IoC se refiere a los recursos que conforman la infraestructura de spam, por ejemplo, los recolectores como los verificadores de direcciones, las URL en los correos electr\u00f3nicos de spam, etc. Contenido abusivo Delito de odio Bullying, contenido difamatorio o discriminatorio. Ej:  ciberacoso,  racismo,  amenazas  a  una  persona o dirigidas contra colectivos. Contenido abusivo Explotaci\u00f3n sexual (infantil), contenido sexual o violento Material que represente de manera visual contenido relacionado con pornograf\u00eda infantil, apolog\u00eda de la violencia, etc. Contenido malicioso Sistema infectado Sistema infectado con malware. Ej: Sistema, computadora o tel\u00e9fono m\u00f3vil infectado con un rootkit. Contenido malicioso Servidor C&amp;C Conexi\u00f3n con servidor de Mando y Control (C&amp;C) mediante malware o sistemas infectados. Contenido malicioso Distribuci\u00f3n de malware Recurso usado para distribuci\u00f3n de malware. Ej: recurso de una organizaci\u00f3n empleado para distribuir malware. Contenido malicioso Configuraci\u00f3n de malware Recurso que aloje ficheros de configuraci\u00f3n de malware Ej: ataque de webinjects para troyano. Obtenci\u00f3n de informaci\u00f3n Escaneo de redes Env\u00edo de peticiones a un sistema para descubrir posibles debilidades. Se incluyen tambi\u00e9n procesos de comprobaci\u00f3n o testeo para recopilar informaci\u00f3n de alojamientos, servicios y cuentas. Ej: peticiones DNS, ICMP, SMTP, escaneo de puertos. Obtenci\u00f3n de informaci\u00f3n An\u00e1lisis de paquetes Observaci\u00f3n y grabaci\u00f3n del tr\u00e1fico de redes. Obtenci\u00f3n de informaci\u00f3n Ingenier\u00eda social Recopilaci\u00f3n de informaci\u00f3n personal sin el uso de la tecnolog\u00eda. Ej: mentiras, trucos, sobornos, amenazas. Intento de intrusi\u00f3n Exploitaci\u00f3n de vulnerabilidades conocidas Intento de compromiso de un sistema o de interrupci\u00f3n de un servicio mediante la explotaci\u00f3n de vulnerabilidades con un identificador estandarizado (v\u00e9ase CVE). Ej: desbordamiento de buffer, puertas traseras, cross site scripting (XSS). Intento de intrusi\u00f3n Intento de acceso con vulneraci\u00f3n de credenciales M\u00faltiples intentos de vulnerar credenciales. Ej: intentos de ruptura de contrase\u00f1as, ataque por fuerza bruta. Intento de intrusi\u00f3n Ataque desconocido Ataque empleando exploit desconocido. Intrusi\u00f3n Compromiso de cuenta con privilegios Compromiso de un sistema en el que el atacante ha adquirido privilegios. Intrusi\u00f3n Compromiso de cuenta sin privilegios Compromiso de un sistema empleando cuentas sin privilegios. Intrusi\u00f3n Compromiso de aplicaci\u00f3n Compromiso de una aplicaci\u00f3n mediante la explotaci\u00f3n de vulnerabilidades de software. Ej: inyecci\u00f3n SQL. Intrusi\u00f3n Robo Intrusi\u00f3n f\u00edsica. Ej: acceso no autorizado a Centro de Proceso de Datos. Disponibilidad Denegaci\u00f3n de servicio Ataque de denegaci\u00f3n de servicio. Ej: env\u00edo de peticiones a una aplicaci\u00f3n web que provoca la interrupci\u00f3n o ralentizaci\u00f3n en la prestaci\u00f3n del servicio. Disponibilidad Denegaci\u00f3n de servicio distribuida Ataque de denegaci\u00f3n distribuida de servicio. Ej: inundaci\u00f3n de paquetes SYN, ataques de reflexi\u00f3n y amplificaci\u00f3n utilizando servicios basados en UDP. Disponibilidad Mala configuraci\u00f3n Mala configuraci\u00f3n de aplicaci\u00f3n que provoca problemas de disponibilidad de un servicio p.e. Servidor DNS con zona KSK ra\u00edz DNSSEC caducada. Disponibilidad Sabotaje Sabotaje f\u00edsico. Ej: cortes de cableados de equipos o incendios provocados. Disponibilidad Interrupci\u00f3n Interrupciones por causas ajenas. Ej: desastre natural. Compromiso de la informaci\u00f3n Acceso no autorizado a informaci\u00f3n Acceso no autorizado a informaci\u00f3n. Ej: robo de credenciales de acceso mediante interceptaci\u00f3n de tr\u00e1fico o mediante el acceso a documentos f\u00edsicos. Compromiso de la informaci\u00f3n Modificaci\u00f3n no autorizada de informaci\u00f3n Modificaci\u00f3n no autorizada de informaci\u00f3n. Ej: modificaci\u00f3n por un atacante empleando credenciales sustra\u00eddas de un sistema o aplicaci\u00f3n o encriptado de datos mediante ransomware. Compromiso de la informaci\u00f3n P\u00e9rdida de datos P\u00e9rdida de informaci\u00f3n Ej: p\u00e9rdida por fallo de disco duro o robo f\u00edsico. Fraude Uso no autorizado de recursos Uso de recursos para prop\u00f3sitos inadecuados, incluyendo acciones con \u00e1nimo de lucro. Ej: uso de correo electr\u00f3nico para participar en estafas piramidales. Fraude Derechos de autor Ofrecimiento o instalaci\u00f3n de software carente de licencia u otro material protegido por derechos de autor. Ej: Warez Fraude Suplantaci\u00f3n Tipo de ataque en el que una entidad suplanta a otra para obtener beneficios ileg\u00edtimos. Fraude Phishing Suplantaci\u00f3n de otra entidad con la finalidad de convencer al usuario para que revele sus credenciales privadas. Vulnerable Criptograf\u00eda d\u00e9bil Servicios accesibles p\u00fablicamente que puedan presentar criptograf\u00eda d\u00e9bil. Ej: servidores web susceptibles de ataques POODLE/FREAK. Vulnerable Amplificador DDoS Servicios accesibles p\u00fablicamente que puedan ser empleados para la reflexi\u00f3n o amplificaci\u00f3n de ataques DDoS. Ej: DNS open-resolvers o Servidores NTP con monitorizaci\u00f3n monlist. Vulnerable Servicios con acceso potencialmente no deseado Servicios con acceso potencialmente no deseado. Ej: Telnet, RDP o VNC. Vulnerable Revelaci\u00f3n de informaci\u00f3n Acceso p\u00fablico a servicios en los que potencialmente pueda relevarse informaci\u00f3n sensible. Ej: SNMP o Redis. Vulnerable Sistema vulnerable Sistema vulnerable. Ej: mala configuraci\u00f3n de proxy en cliente (WPAD), versiones desfasadas de sistema. Otro No clasificado Todos aquellos incidentes que no encajen en ninguna de las anteriores categor\u00edas. Otro Indeterminado La clasificaci\u00f3n del incidente es desconocida o indeterminada. Test Test Pruebas."},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/","title":"UD 1 - 2.1.1 Taxonom\u00eda de incidentes","text":"","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#211-categorias-de-seguridad-de-los-sistemas-de-informacion","title":"2.1.1 Categor\u00edas de Seguridad de los Sistemas de Informaci\u00f3n","text":"","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#categorias-de-seguridad-de-los-sistemas-de-informacion","title":"Categor\u00edas de Seguridad de los Sistemas de Informaci\u00f3n**","text":"<p>Desarrollo de como obtener la categoria de seguridad de los sistemas de informaci\u00f3n</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#1-fundamentos-para-determinar-la-categoria-de-seguridad","title":"1. Fundamentos para determinar la categor\u00eda de seguridad","text":"<p>La seguridad de un sistema de informaci\u00f3n se eval\u00faa analizando el impacto de un posible incidente que afecte:</p> <ul> <li>Los objetivos de la organizaci\u00f3n: Por ejemplo, si una universidad pierde acceso a su sistema de calificaciones, no podr\u00e1 gestionar evaluaciones ni certificados.</li> <li>Los activos protegidos: Como bases de datos, correos electr\u00f3nicos o dispositivos, esenciales para el funcionamiento.</li> <li>El cumplimiento legal: Imagina que una empresa pierde registros financieros obligatorios; esto podr\u00eda llevar a sanciones legales.</li> </ul> <p>Es obligatorio reevaluar la seguridad del sistema cada a\u00f1o o si hay cambios importantes, como la introducci\u00f3n de nuevos servicios o tecnolog\u00edas.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#2-dimensiones-de-la-seguridad","title":"2. Dimensiones de la seguridad","text":"<p>Para saber c\u00f3mo podr\u00eda afectar un incidente, se eval\u00faan estas dimensiones de seguridad:</p> <ol> <li>Confidencialidad [C]:    Proteger la informaci\u00f3n para que solo personas autorizadas puedan acceder.    Ejemplo: Si los datos m\u00e9dicos de pacientes se filtran, esto viola su confidencialidad.</li> <li>Integridad [I]:    Garantizar que los datos no sean alterados sin autorizaci\u00f3n.    Ejemplo: Si las notas de los estudiantes son manipuladas, la integridad del sistema se ve comprometida.</li> <li>Trazabilidad [T]:    Asegurarse de que todas las acciones puedan ser rastreadas hasta la persona que las realiz\u00f3.    Ejemplo: Si no hay registros claros de qui\u00e9n cambi\u00f3 informaci\u00f3n en un sistema financiero, la trazabilidad est\u00e1 fallando.</li> <li>Autenticidad [A]:    Confirmar la identidad de los usuarios que acceden al sistema.    Ejemplo: Si alguien se hace pasar por un administrador para robar datos, hay un problema de autenticidad.</li> <li>Disponibilidad [D]:    Garantizar que la informaci\u00f3n y los servicios est\u00e9n accesibles cuando se necesiten.    Ejemplo: Si una tienda en l\u00ednea est\u00e1 ca\u00edda durante un fin de semana, perder\u00e1 ventas y confianza del cliente.</li> </ol>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#3-determinacion-del-nivel-de-seguridad-requerido-en-cada-dimension","title":"3. Determinaci\u00f3n del nivel de seguridad requerido en cada dimensi\u00f3n","text":"<p>Cada dimensi\u00f3n de seguridad se clasifica en uno de los tres niveles, en funci\u00f3n del impacto de un incidente de seguridad:</p> <ol> <li> <p>Nivel BAJO:    Impacto limitado, con las siguientes caracter\u00edsticas:</p> </li> <li> <p>Perjuicio menor en la capacidad operativa de la organizaci\u00f3n.</p> </li> <li>Da\u00f1o menor y subsanable en los activos.</li> <li>Incumplimiento legal subsanable.</li> <li>Molestias a individuos, f\u00e1cilmente reparables.</li> </ol> <p>Ejemplo: Un documento interno poco relevante se filtra, causando molestias menores. 2. Nivel MEDIO:    Impacto grave, caracterizado por:</p> <ul> <li>Reducci\u00f3n significativa de la capacidad operativa.</li> <li>Da\u00f1o significativo en los activos.</li> <li>Incumplimiento legal material o no subsanable.</li> <li>Perjuicio significativo para individuos, dif\u00edcil de reparar.</li> </ul> <p>Ejemplo: Se alteran registros financieros, causando problemas legales significativos. 3. Nivel ALTO:    Impacto muy grave, definido por:</p> <ul> <li>Anulaci\u00f3n de la capacidad operativa de la organizaci\u00f3n.</li> <li>Da\u00f1o irreparable a los activos.</li> <li>Incumplimiento grave de leyes o regulaciones.</li> <li>Perjuicio grave a individuos, de reparaci\u00f3n compleja o imposible.</li> </ul> <p>Ejemplo: Una base de datos con informaci\u00f3n confidencial se pierde o elimina, afectando gravemente a la organizaci\u00f3n.</p> <p>Si un sistema trata m\u00faltiples informaciones o servicios, el nivel de seguridad de cada dimensi\u00f3n ser\u00e1 el m\u00e1s alto de entre las informaciones y servicios evaluados.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#4-categorias-de-seguridad","title":"4. Categor\u00edas de seguridad","text":"<p>Se definen tres categor\u00edas para clasificar un sistema:</p> <ol> <li>Categor\u00eda ALTA:    Si cualquier dimensi\u00f3n alcanza un nivel ALTO.    Ejemplo: Una plataforma bancaria cuya confidencialidad o disponibilidad sea cr\u00edtica se clasificar\u00eda como ALTA.</li> <li>Categor\u00eda MEDIA:    Si al menos una dimensi\u00f3n alcanza el nivel MEDIO, pero ninguna alcanza ALTO.    Ejemplo: Un sistema de n\u00f3minas que maneja datos sensibles, pero que no pone en riesgo la continuidad de la organizaci\u00f3n.</li> <li>Categor\u00eda B\u00c1SICA:    Si las dimensiones no superan el nivel BAJO.    Ejemplo: Un sistema interno para gestionar la agenda del personal administrativo.</li> </ol>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#5-pasos-para-determinar-la-categoria-de-seguridad","title":"5. Pasos para determinar la categor\u00eda de seguridad","text":"<p>La secuencia para determinar la categor\u00eda de seguridad de un sistema de informaci\u00f3n es la siguiente:</p> <ol> <li>Evaluar el nivel de seguridad en cada dimensi\u00f3n, para los servicios e inoformacion gestionada por el sistema:    Identifica c\u00f3mo podr\u00eda impactar un incidente en la confidencialidad, integridad, trazabilidad, autenticidad y disponibilidad de la informaci\u00f3n, considerando los niveles BAJO, MEDIO y ALTO.    Ejemplo: Si un sistema de gesti\u00f3n de historias cl\u00ednicas es vulnerable a filtraciones, la confidencialidad y autenticidad deben evaluarse en detalle.</li> <li>Determinar la categor\u00eda del sistema:    Usa los niveles evaluados para definir si el sistema es B\u00c1SICO, MEDIA o ALTA.    Ejemplo: Si un sistema tiene una dimensi\u00f3n en nivel ALTO (por ejemplo, confidencialidad), su categor\u00eda ser\u00e1 ALTA, sin importar que otras dimensiones est\u00e9n en niveles m\u00e1s bajos.</li> </ol>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#6-ejemplo-sistema-de-gestion-de-nominas","title":"6. Ejemplo: Sistema de Gesti\u00f3n de N\u00f3minas","text":"","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#contexto","title":"Contexto:","text":"<p>Un sistema de informaci\u00f3n que gestiona las n\u00f3minas de los empleados de una organizaci\u00f3n. Este sistema maneja datos sensibles como:</p> <ul> <li>Datos personales (nombre, direcci\u00f3n, n\u00famero de identificaci\u00f3n fiscal, cuenta bancaria).</li> <li>Historial salarial.</li> <li>Informaci\u00f3n sobre beneficios y deducciones.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#paso-1-evaluar-cada-dimension-de-seguridad","title":"Paso 1: Evaluar cada dimensi\u00f3n de seguridad","text":"<p>Analizamos el impacto de un incidente de seguridad para cada dimensi\u00f3n:</p> <ol> <li>Confidencialidad [C]:</li> <li>Impacto: Si los datos personales y bancarios son expuestos, podr\u00eda haber robo de identidad o fraude financiero.</li> <li>Nivel:****ALTO, porque el da\u00f1o para los individuos ser\u00eda muy grave y dif\u00edcil de reparar.</li> <li>Integridad [I]:</li> <li>Impacto: Si los datos de las n\u00f3minas son alterados, podr\u00eda haber errores graves en los pagos, afectando la confianza de los empleados y generando problemas legales para la organizaci\u00f3n.</li> <li>Nivel:****MEDIO, porque afectar\u00eda significativamente a los empleados y a la organizaci\u00f3n, pero el problema ser\u00eda subsanable.</li> <li>Disponibilidad [D]:</li> <li>Impacto: Si el sistema no est\u00e1 disponible en el momento del pago, los empleados no recibir\u00edan sus salarios a tiempo, causando descontento y posibles conflictos.</li> <li>Nivel:****MEDIO, ya que aunque es grave, la organizaci\u00f3n podr\u00eda gestionar la situaci\u00f3n temporalmente.</li> <li>Trazabilidad [T]:</li> <li>Impacto: Si no se registran adecuadamente las operaciones en el sistema, podr\u00edan surgir disputas sobre pagos o deducciones, afectando la confianza y el cumplimiento legal.</li> <li>Nivel:****MEDIO, ya que afectar\u00eda la capacidad de auditar el sistema y generar confianza.</li> <li>Autenticidad [A]:</li> <li>Impacto: Si no se garantiza que los usuarios son quienes dicen ser, podr\u00eda haber acceso indebido a datos sensibles, resultando en fraude o abuso.</li> <li>Nivel:****ALTO, ya que esto comprometer\u00eda gravemente la seguridad del sistema.</li> </ol>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#paso-2-determinar-el-nivel-de-seguridad-del-sistema-en-cada-dimension","title":"Paso 2: Determinar el nivel de seguridad del sistema en cada dimensi\u00f3n","text":"<p>Tomamos el nivel m\u00e1s alto para cada dimensi\u00f3n evaluada:</p> <ul> <li>Confidencialidad [C]: ALTO</li> <li>Integridad [I]: MEDIO</li> <li>Disponibilidad [D]: MEDIO</li> <li>Trazabilidad [T]: MEDIO</li> <li>Autenticidad [A]: ALTO</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#paso-3-determinar-la-categoria-de-seguridad-del-sistema","title":"Paso 3: Determinar la categor\u00eda de seguridad del sistema","text":"<ul> <li>La dimensi\u00f3n m\u00e1s alta evaluada es ALTO (Confidencialidad y Autenticidad).</li> <li>Seg\u00fan las reglas:</li> <li>Si alguna dimensi\u00f3n alcanza ALTO, la categor\u00eda del sistema es ALTA.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#categoria-de-seguridad-del-sistema-alta","title":"Categor\u00eda de Seguridad del Sistema: ALTA","text":"<p>Esto significa que las medidas de seguridad aplicadas al sistema deben ser las m\u00e1s rigurosas para proteger los datos y garantizar su funcionalidad, como cifrado robusto, autenticaci\u00f3n multifactorial, y monitorizaci\u00f3n constante de actividad.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#6-referencias-y-guias","title":"6. Referencias y gu\u00edas","text":"<p>Para una categorizaci\u00f3n precisa, se utilizar\u00e1n como referencia las gu\u00edas CCN-STIC del Centro Criptol\u00f3gico Nacional, que detallan los criterios necesarios para determinar correctamente la categor\u00eda de seguridad de los sistemas de informaci\u00f3n.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-CategoriaSI/#fuente","title":"Fuente","text":"<ul> <li>Categoria de seguridad de los sistemas de informaci\u00f3n</li> <li>Repositorio de trabajo de taxonom\u00eda de incidentes de seguridad</li> <li>gu\u00eda CCN-STIC 817</li> <li>GU\u00cdA NACIONAL DE NOTIFICACI\u00d3N Y GESTI\u00d3N DE CIBERINCIDENTES</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/","title":"UD 1 - 2.1.1 Taxonom\u00eda de incidentes","text":"","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#211-taxonomia-de-incidentes-de-ciberseguridad","title":"2.1.1 Taxonom\u00eda de incidentes de ciberseguridad","text":"C\u00f3digo Descripci\u00f3n RA2 Analiza incidentes de ciberseguridad utilizando herramientas, mecanismos de detecci\u00f3n y alertas de seguridad. CEa Se ha clasificado y definido la taxonom\u00eda de incidentes de ciberseguridad que pueden afectar a la organizaci\u00f3n. <p>Durante la unidad anterior, hemos visto c\u00f3mo las organizaciones pueden prepararse para prevenir los incidentes de ciberseguridad. En esta unidad, nos centraremos en la detecci\u00f3n y clasificaci\u00f3n de los incidentes de ciberseguridad.</p> <p>Como vimos, existen numerosas amenazas que, en el caso de materializarse, es decir, afectar al activo vulnerable, provocar\u00e1n un incidente de seguridad. Estos \u00faltimos pueden tener un impacto significativo en las organizaciones, desde la p\u00e9rdida de datos confidenciales hasta la interrupci\u00f3n de los servicios cr\u00edticos. Por ello, es fundamental contar con una taxonom\u00eda de incidentes que permita clasificar y describir los diferentes tipos de amenazas de manera estructurada y coherente.</p> <p> </p> Taxonom\u00eda de incidentes de seguridad","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#1-introducciion","title":"1. Introducci\u00edon","text":"","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#11-motivacion","title":"1.1. Motivaci\u00f3n","text":"<p>En el mundo de la ciberseguridad, nos enfrentamos a una diversidad asombrosa. No solo en t\u00e9rminos de las empresas que operan en distintos sectores y tama\u00f1os, sino tambi\u00e9n en la variedad de ciberincidentes que pueden encontrarse. Al igual que en un ecosistema natural donde cada especie juega un papel \u00fanico, en el ciberespacio, cada tipo de incidente tiene sus propias caracter\u00edsticas y repercusiones.</p> <p>Imaginemos que cada organizaci\u00f3n habla un idioma diferente cuando describe los ciberincidentes. Sin una taxonom\u00eda com\u00fan, el desaf\u00edo de comunicarse y entenderse entre s\u00ed ser\u00eda abrumador. Esto es precisamente lo que sucede en el \u00e1mbito de la ciberseguridad sin una clasificaci\u00f3n est\u00e1ndar. Cada empresa podr\u00eda tener su propia forma de describir y abordar los incidentes, lo que llevar\u00eda a confusiones y, en \u00faltima instancia, a una respuesta menos eficaz.</p> <p>La taxonom\u00eda de incidentes, en este contexto, act\u00faa como un idioma com\u00fan. Nos permite categorizar y describir los incidentes de ciberseguridad de manera estandarizada. \u00bfPor qu\u00e9 es esto crucial? Porque cuando todas las organizaciones utilizan la misma clasificaci\u00f3n, se facilita enormemente la colaboraci\u00f3n, el intercambio de informaci\u00f3n y, lo m\u00e1s importante, la respuesta r\u00e1pida y efectiva.</p> <p>La clasificaci\u00f3n uniforme de incidentes permite a las organizaciones no solo identificar r\u00e1pidamente el tipo de amenaza a la que se enfrentan, sino tambi\u00e9n aplicar las mejores pr\u00e1cticas y lecciones aprendidas de otros en situaciones similares. Esto es fundamental para una gesti\u00f3n de incidentes efectiva: comprender r\u00e1pidamente lo que est\u00e1 sucediendo, c\u00f3mo ha sucedido y qu\u00e9 se puede hacer al respecto.</p> <p>Por tanto, disponer de una taxonom\u00eda com\u00fan de incidentes de ciberseguridad es como tener un mapa detallado en un terreno desconocido. Nos proporciona la orientaci\u00f3n necesaria para abordar, contener y erradicar eficazmente las amenazas, es decir adaptar la respuesta a las amenazas, garantizando as\u00ed una ciberseguridad m\u00e1s robusta.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#12-incidente-de-seguridad","title":"1.2. Incidente de seguridad","text":"<p>Un incidente de ciberseguridad se refiere a cualquier evento no planificado o no deseado que pueda comprometer la seguridad de la informaci\u00f3n y afectar la integridad, confidencialidad o disponibilidad de los datos. Estos incidentes pueden tomar muchas formas, desde ataques de malware hasta brechas de seguridad y accesos no autorizados.</p> <p> </p> Fases por las que pasa la gesti\u00f3n de un incidente <p>Durante el ciclo de vida de un incidente, se siguen varias fases cr\u00edticas:     </p> <ol> <li>Preparaci\u00f3n: Implementaci\u00f3n de medidas preventivas, es decir, prepararse antes de que ocurra un incidente. Algunas de las medidas preventivas incluyen la formaci\u00f3n de empleados, la implementaci\u00f3n de controles de seguridad y la realizaci\u00f3n de pruebas de seguridad, vistas en la unidad anterior.     </li> <li>Identificaci\u00f3n: Detecci\u00f3n y alerta de un incidente de seguridad. Esto puede ser a trav\u00e9s de alertas, monitoreo de sistemas o informes de usuarios. En esta fase, es fundamental contar con herramientas y mecanismos de detecci\u00f3n de incidentes. Ser\u00e1 en est\u00e1 fase en la que pongamos el foco en esta unidad.   </li> <li>Contenci\u00f3n: Aislar el incidente para evitar que se propague.     </li> <li>Erradicaci\u00f3n: Eliminar la causa ra\u00edz del incidente y restaurar los sistemas afectados.     </li> <li>Recuperaci\u00f3n: Restaurar los sistemas y datos afectados a un estado operativo normal.    </li> <li>Lecciones aprendidas: Analizar el incidente para identificar \u00e1reas de mejora y prevenir futuros incidentes.</li> </ol> <p>Aunque esta ciclo de vida puede variar seg\u00fan la organizaci\u00f3n y el tipo de incidente, es fundamental seguir un enfoque estructurado y sistem\u00e1tico para garantizar una respuesta efectiva y eficiente a los incidentes de ciberseguridad.</p> <p>Como hemos visto, la gesti\u00f3n de ciberincidentes pasa por varias fases cr\u00edticas, y la clasificaci\u00f3n (taxonom\u00eda) de estos incidentes es un paso esencial en las etapas iniciales de este proceso. La identificaci\u00f3n y clasificaci\u00f3n correcta de los incidentes de ciberseguridad son cruciales para las organizaciones. Esto no solo ayuda a comprender la naturaleza y el alcance del ataque, sino que tambi\u00e9n es fundamental para una respuesta eficaz. Por ejemplo, un ataque de phishing que busca robar credenciales de acceso requiere una respuesta diferente a un ataque de denegaci\u00f3n de servicio distribuido (DDoS) que busca interrumpir los servicios.</p> <p>Comprender los incidentes de ciberseguridad tambi\u00e9n implica reconocer sus fuentes y m\u00e9todos. Las fuentes pueden variar desde actores internos (empleados, contratistas) hasta externos (hackers, competidores), y los m\u00e9todos pueden incluir software malicioso, explotaci\u00f3n de vulnerabilidades o ingenier\u00eda social.</p> <p>La gesti\u00f3n eficaz de incidentes de ciberseguridad es un aspecto crucial de la seguridad de la informaci\u00f3n. Implica no solo la detecci\u00f3n y respuesta inmediata a los incidentes, sino tambi\u00e9n la recuperaci\u00f3n y la prevenci\u00f3n de futuros ataques. La gesti\u00f3n de incidentes no es solo una cuesti\u00f3n t\u00e9cnica; tambi\u00e9n requiere una planificaci\u00f3n organizativa, incluyendo la formaci\u00f3n de empleados, la creaci\u00f3n de pol\u00edticas y procedimientos adecuados, y la implementaci\u00f3n de controles de seguridad apropiados.</p> <p>La gesti\u00f3n de incidentes de ciberseguridad es un proceso continuo que implica aprender de los incidentes anteriores. Cada incidente ofrece una oportunidad para mejorar las defensas y prepararse mejor para los desaf\u00edos futuros. Por ello, es esencial mantener registros detallados de los incidentes, realizar an\u00e1lisis post-incidente y actualizar constantemente las estrategias de seguridad.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#2-que-significa-taxonomia","title":"2. \u00bfQue significa Taxonom\u00eda?","text":"<p>Definici\u00f3n: Clasificaci\u00f3n u ordenaci\u00f3n en grupos de cosas que tienen unas caracter\u00edsticas comunes.</p> <p> </p> Taxonom\u00eda de incidentes","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#21-que-es-una-taxonomia-en-este-contexto","title":"2.1. \u00bfQu\u00e9 es una Taxonom\u00eda en este contexto?","text":"<p>Es un sistema de clasificaci\u00f3n que agrupa incidentes de ciberseguridad en categor\u00edas basadas en caracter\u00edsticas comunes. Categor\u00edas Comunes: Por ejemplo, los ataques de malware se clasifican seg\u00fan el tipo de software malicioso (virus, gusanos, troyanos), mientras que los ataques DDoS se categorizan por el volumen de tr\u00e1fico generado o los recursos espec\u00edficos atacados.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#22-que-es-la-taxonomia-de-incidentes-de-ciberseguridad","title":"2.2. \u00bfQu\u00e9 es la Taxonom\u00eda de Incidentes de Ciberseguridad?","text":"<p>Cuando hablamos de taxonom\u00eda en el contexto de la ciberseguridad, nos referimos a un sistema de clasificaci\u00f3n estructurado para los incidentes de ciberseguridad. Esta taxonom\u00eda es como un marco que nos ayuda a categorizar y describir los diferentes tipos de incidentes de una manera estandarizada y ordenada.</p> <p>Imagina que est\u00e1s en una gran biblioteca con miles de libros, pero sin un sistema de clasificaci\u00f3n. Encontrar un libro espec\u00edfico ser\u00eda una tarea desalentadora. La taxonom\u00eda act\u00faa como ese sistema de clasificaci\u00f3n en la biblioteca, pero en lugar de libros, clasifica los incidentes de ciberseguridad.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#23-por-que-es-importante","title":"2.3. \u00bfPor qu\u00e9 es importante?","text":"<p>La diversidad y complejidad de los ciberataques son enormes y est\u00e1n en constante evoluci\u00f3n. Sin una taxonom\u00eda, cada organizaci\u00f3n podr\u00eda tener su propio m\u00e9todo para describir y responder a estos incidentes, lo que llevar\u00eda a confusi\u00f3n, malentendidos y, finalmente, a una respuesta menos eficaz a las amenazas.</p> <p>Al adoptar una taxonom\u00eda com\u00fan, todas las organizaciones pueden hablar el mismo \"idioma\" en t\u00e9rminos de ciberseguridad. Esto facilita la identificaci\u00f3n r\u00e1pida de los tipos de incidentes, permite compartir informaci\u00f3n de manera m\u00e1s efectiva y ayuda en la coordinaci\u00f3n de respuestas a amenazas entre diferentes entidades.</p> <p>En definitiva, una taxonom\u00eda bien definida ayuda en varios aspectos pr\u00e1cticos:</p> <ol> <li>Identificaci\u00f3n r\u00e1pida: Permite a las organizaciones identificar de manera eficiente el tipo de ciberataque al que se enfrentan, d\u00e1ndonos informaci\u00f3n sobre posible origen y m\u00e9todos utilizados, impacto potencial, peligrosidad y prioridad de respuesta, etc.</li> <li>Mejor comunicaci\u00f3n: Facilita la comunicaci\u00f3n clara y precisa entre diferentes departamentos, organizaciones y, en algunos casos, incluso entre pa\u00edses.</li> <li>Respuesta efectiva: Proporciona una base para desarrollar estrategias espec\u00edficas y efectivas de respuesta y recuperaci\u00f3n.</li> <li>Aprendizaje y mejora: Ayuda a las organizaciones a aprender de incidentes anteriores y a mejorar continuamente sus pr\u00e1cticas de ciberseguridad.</li> </ol> <p>Por tanto la taxonom\u00eda de incidentes de ciberseguridad es una herramienta esencial para la organizaci\u00f3n, la comprensi\u00f3n y la respuesta efectiva a las amenazas cibern\u00e9ticas. Al proporcionar un marco com\u00fan, simplifica y refuerza nuestras defensas contra los ciberataques.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#3-taxonomia-de-incidentes","title":"3. Taxonom\u00eda de incidentes","text":"<p>La elaboraci\u00f3n de una taxonom\u00eda no es sencilla, pero puede basarse en modelos de taxonom\u00eda dise\u00f1ados por organismos de referencia, como el CCN-CERT y la ENISA. Por otra parte, durante la clasificaci\u00f3n deben considerarse los siguientes factores a la hora de establecer criterios de clasificaci\u00f3n.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#31-factores-a-considerar-en-la-clasificacion-de-incidentes","title":"3.1. Factores a considerar en la clasificaci\u00f3n de incidentes","text":"<p>Los incidentes de ciberseguridad pueden variar en su naturaleza, alcance y gravedad. Por ello, es importante tener en cuenta una serie de factores al clasificarlos. Algunos de los factores clave a considerar incluyen:</p> <ul> <li>Tipo de amenaza o m\u00e9todo: Determinar la t\u00e9cnica utilizada por los atacantes: c\u00f3digo da\u00f1ino, intrusiones, fraude, etc. Nos permitir\u00e1 identificar el tipo de incidente y aplicar las medidas de respuesta adecuadas. </li> <li>Origen de la amenaza: Interna o externa. Nos permitir\u00e1 identificar si el ataque proviene de un empleado descontento o de un hacker externo.</li> <li>La categoria de seguridad de los sistemas de informaci\u00f3n afectados: As\u00ed, por ejemplo, un incidente que afecte a sistemas cr\u00edticos de informaci\u00f3n tendr\u00e1 una prioridad mayor que otro que afecte a sistemas menos cr\u00edticos.</li> <li>El perfil de los usuarios afectados: la posici\u00f3n de estos en la estructura organizativa de la entidad y, en su consecuencia, sus privilegios de acceso a informaci\u00f3n sensible o confidencial.</li> <li>El n\u00famero y tipolog\u00eda de los sistemas afectados: Un incidente que afecte a un \u00fanico sistema puede tener un impacto menor que otro que afecte a toda la red de la organizaci\u00f3n. La tipolog\u00eda de los sistemas afectados (servidores, estaciones de trabajo, dispositivos m\u00f3viles) influir\u00e1 en la gravedad del incidente.</li> <li>El impacto que el incidente puede tener en la organizaci\u00f3n: Como imp\u00e1ctar\u00e1 desde el punto de vista de la protecci\u00f3n de la informaci\u00f3n, la prestaci\u00f3n de los servicios, la conformidad legal y/o la imagen p\u00fablica.</li> <li>Los requerimientos legales y regulatorios: Algunos incidentes pueden requerir notificaci\u00f3n a las autoridades competentes o a los afectados. </li> </ul> <p>La toma en consideraci\u00f3n de estos factores determinar\u00e1 la decisi\u00f3n de clasificar un incidente como un tipo u otro y, en su caso, su peligrosidad y la prioridad de actuaci\u00f3n. Es decir, un ataque puede clasificarse por el tipo de amenaza (correo electr\u00f3nico, explotaci\u00f3n de vulnerabilidades) o por el impacto en el tipo de datos afectados (acceso a datos personales, robo de informaci\u00f3n financiera). En esta l\u00ednea, acerca de como podr\u00eda variar el tipo de incidente en funci\u00f3n de los factores considerados, un ejemplo ser\u00eda el siguiente: Un ataque de phishing dirigido a empleados de alto nivel podr\u00eda clasificarse como un incidente de fraude, pero si el atacante logra acceder a informaci\u00f3n confidencial, en cuyo caso el impacto del incidente es mayor, podr\u00eda clasificarse como un incidente de acceso no autorizado a informaci\u00f3n.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#32-taxonomia-de-referencia-para-la-clasificacion-de-incidentes-de-seguridad","title":"3.2. Taxonom\u00eda de Referencia para la Clasificaci\u00f3n de Incidentes de Seguridad","text":"<p>La taxonom\u00eda definida en la Gu\u00eda Nacional de Notificaci\u00f3n y Gesti\u00f3n de Ciberincidentes usada por INCIBE, se basa en la Taxonom\u00eda de Referencia para la Clasificaci\u00f3n de Incidentes de Seguridad, desarrollada coordinadamente por un grupo internacional de equipos de respuesta a incidentes (clasificaci\u00f3n de los ciberincidentes tomando como referencia la incluida en la gu\u00eda CCN-STIC 817 y presentada por ENISA):</p> <p>En este enlace, tambi\u00e9n puedes acceder a un repositorio de trabajo, en el que se trabaja la taxonom\u00eda de referencia para la clasificaci\u00f3n de incidentes de seguridad:   </p> <ul> <li>https://github.com/flosada/RSITaxonomy_ES/blob/master/humanv1.md</li> </ul> <p>A continuaci\u00f3n, se muestra en un primer nivel la clasificaci\u00f3n del incidente y, en un segundo nivel los tipos de incidentes dentro de esa clasificaci\u00f3n.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#321-contenido-abusivo","title":"3.2.1. Contenido abusivo","text":"<p>Incidentes que muestren signos evidentes de spam, contengan comentarios ofensivos o inciten a la pederastia, violencia y/o delitos sexuales.   </p> <ul> <li>SPAM: correo electr\u00f3nico masivo no solicitado. El receptor del contenido no ha otorgado autorizaci\u00f3n v\u00e1lida para recibir un mensaje colectivo.  Ejemplo: env\u00edo de correos electr\u00f3nicos no solicitados con fines publicitarios.</li> <li>Delito de odio: contenido difamatorio o discriminatorio.    Ejemplo: ciberacoso, racismo, amenazas a una persona o dirigidas contra colectivos, publicaci\u00f3n de comentarios ofensivos en redes sociales.</li> <li>Pornograf\u00eda infantil, contenido sexual o violento inadecuado: material que represente de manera visual contenido relacionado con pornograf\u00eda infantil, apolog\u00eda de la violencia, etc.  Ejemplo: publicaci\u00f3n de im\u00e1genes de menores de edad en situaciones de abuso.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#322-contenido-danino-o-malicioso","title":"3.2.2. Contenido da\u00f1ino o malicioso","text":"<p>Problemas relacionados con virus, troyanos, gusanos, spyware, bots e inyecci\u00f3n de c\u00f3digo   </p> <ul> <li>Sistema infectado: sistema infectado con malware.   Ejemplo: sistema, computadora o tel\u00e9fono m\u00f3vil infectado con un rootkit.  </li> <li>Servidor C&amp;C (Mando y Control): conexi\u00f3n con servidor de Mando y Control (C&amp;C) mediante malware o sistemas infectados.     Ejemplo: Los botnets son redes de ordenadores infectados que se conectan a un servidor C&amp;C para recibir instrucciones.</li> <li>Distribuci\u00f3n de malware: recurso usado para distribuci\u00f3n de malware.    Ejemplo: p\u00e1gina web que aloje un exploit kit, servidor de descarga de malware, distribuidos a trav\u00e9s de spam.</li> <li>Configuraci\u00f3n de malware: recurso que aloje ficheros de configuraci\u00f3n de malware.    Ejemplo: los archivos de configuraci\u00f3n de ransomware, que contienen las instrucciones para cifrar los archivos, nota de rescate, etc.</li> <li>Malware dominio DGA: nombre de dominio generado mediante DGA (Algoritmo de Generaci\u00f3n de Dominio), empleado por malware para contactar con un servidor de Mando y Control (C&amp;C).    Ejemplo: malware que genera nombres de dominio de manera aleatoria para contactar con un servidor C&amp;C.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#323-obtencion-de-informacion","title":"3.2.3.  Obtenci\u00f3n de informaci\u00f3n","text":"<p>Los escaneos como reporte m\u00e1s com\u00fan. Tambi\u00e9n se consideran dentro de esta clasificaci\u00f3n aquellos relacionados con los usos de sniffers, ingenier\u00eda social o ataques de fuerza bruta.  </p> <ul> <li>Escaneo de redes (scanning): env\u00edo de peticiones a un sistema para descubrir posibles debilidades, puertos abiertos. Se incluyen tambi\u00e9n procesos de comprobaci\u00f3n o testeo para recopilar informaci\u00f3n de alojamientos, servicios y cuentas.    Ejemplos: peticiones DNS, ICMP, SMTP, escaneo de puertos.  </li> <li>An\u00e1lisis de paquetes (sniffing): interceptar, observaci\u00f3n y grabaci\u00f3n del tr\u00e1fico de redes, con el objetivo de capturar informaci\u00f3n confidencial, como nombre de usuarios, contrase\u00f1as u otros datos confidenciales.    Ejemplo: captura de tr\u00e1fico de red para obtener credenciales de acceso a trav\u00e9s del conocido ataque man-in-the-middle (MitM).</li> <li>Ingenier\u00eda social: recopilaci\u00f3n de informaci\u00f3n personal sin el uso de la tecnolog\u00eda. A trav\u00e9s de enga\u00f1os o uso de t\u00e9cnicas psicol\u00f3gicas para que revele informaci\u00f3n confidencial o realicen una acci\u00f3n que comprometa la seguridad     Ejemplo: convencer a un usuario para que revele su contrase\u00f1a, o para que ejecute un archivo malicioso a trav\u00e9s de mentiras, trucos, sobornos, amenazas.   </li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#324-intento-de-intrusion","title":"3.2.4.  Intento de intrusi\u00f3n","text":"<p>Intentos de acceso no autorizado a sistemas o servicios.</p> <ul> <li>Explotaci\u00f3n de vulnerabilidades conocidas: intento de compromiso de un sistema o de interrupci\u00f3n de un servicio mediante la explotaci\u00f3n de vulnerabilidades con un identificador estandarizado (v\u00e9ase CVE).    Ejemplos: desbordamiento de buffer, puertas traseras, cross site scripting (XSS).</li> <li>Intento de acceso con vulneraci\u00f3n de credenciales: m\u00faltiples intentos de vulnerar credenciales.     Ejemplos: intentos de ruptura de contrase\u00f1as, ataque por fuerza bruta, ataques de diccionario, o intentos de acceso a servicios con credenciales robadas.</li> <li>Ataque desconocido: ataque empleando exploit desconocido, Zero Day.    Ejemplo: ataque que emplea una vulnerabilidad no conocida por el fabricante del software.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#325-intrusion","title":"3.2.5.  Intrusi\u00f3n","text":"<p>Incidentes en los que se manifieste el claro acceso a cuentas privilegiadas, no privilegiadas, compromiso de aplicaciones y ataques de 0-day.  </p> <ul> <li>Compromiso de cuenta con privilegios: compromiso de un sistema con privilegios de administraci\u00f3n, de la cual el atacante ha adquirido sus credenciales.  </li> <li>Compromiso de cuenta sin privilegios: compromiso de un sistema empleando cuentas sin privilegios.  </li> <li>Compromiso de aplicaciones: compromiso de una aplicaci\u00f3n mediante la explotaci\u00f3n de vulnerabilidades de software. Ejemplo: inyecci\u00f3n SQL en un campo de texto de una aplicaci\u00f3n web, para que se ejecute una consulta en la base de datos y obterner informaci\u00f3n sensible de la base de datos.  </li> <li>Compromiso de sistemas: utilizar una vulnerabilidad el sistema para acceder a informaci\u00f3n sensible o afectar a su disponibilidad.    Ejemplo: una vulnerabilidad famosa Meltdown que afecto a una gama de procesadores y que permit\u00eda acceder a la memoria del sistema durante ciertas fases de la ejecuci\u00f3n de instrucciones. </li> <li>Robo: acceder f\u00edsicamente y de forma fraudulenta a dependencias de una organizaci\u00f3n para sustraer equipos, documentaci\u00f3n o acceder a informaci\u00f3n sensible.     Ejemplo: acceso no autorizado a Centro de Proceso de Datos y sustracci\u00f3n de equipo.  </li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#326-disponibilidad","title":"3.2.6.  Disponibilidad","text":"<p>Ataques de denegaci\u00f3n de servicio, tales como DoS, DDoS y sabotajes.  </p> <ul> <li>DoS (Denegaci\u00f3n de Servicio): ataque a un sistema con el objeto de que los servicios que provee no est\u00e9n disponibles para los usuarios leg\u00edtimos.    Ejemplo: env\u00edo de peticiones a una aplicaci\u00f3n web que provoca la interrupci\u00f3n o ralentizaci\u00f3n en la prestaci\u00f3n del servicio.  </li> <li>DDoS (Denegaci\u00f3n Distribuida de Servicio): ataque a un sistema para colapsar sus servicios usando para ello un conjunto de quipos que atacan a la vez al objetivo.     Ejemplos: uso de una red zombi de botnets para enviar una gran cantidad de tr\u00e1fico al objetivo.</li> <li>Mala configuraci\u00f3n: configuraci\u00f3n incorrecta de un sistema que provoca la interrupci\u00f3n de un servicio.      Ejemplo: configuraci\u00f3n incorrecta de un firewall que bloquea el tr\u00e1fico leg\u00edtimo, o mala configuraci\u00f3n en la quota de disco de usuario de un servicio de almacenamiento.</li> <li>Sabotaje: realizar actos deliberados para interrumpir la prestaci\u00f3n de un servicio.     Ejemplos: cortes de cableados de equipos o incendios provocados.  </li> <li>Interrupciones: interrupciones de los servicios por causas ajenas a la organizaci\u00f3n.     Ejemplo: desastre natural, como la ca\u00edda de un rayo en una central el\u00e9ctrica que provoca un corte de suministro el\u00e9ctrico.  </li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#327-compromiso-de-la-informacion","title":"3.2.7.  Compromiso de la informaci\u00f3n","text":"<p>Problemas relacionados con el acceso a informaci\u00f3n y/o modificaci\u00f3n no autorizada.  </p> <ul> <li>Acceso no autorizado a informaci\u00f3n: acceso no autorizado a informaci\u00f3n. Esto puede ocurrir deliberadamente haciendo uso de las credenciales obtenidas de forma fraudulenta o accidentalmente por fallos en la configuraci\u00f3n de los sistemas.     Ejemplos: acceso a informaci\u00f3n expuesta a trav\u00e9s de un servicio web que permiten acceder desde el exterior a rutas de directorio con informaci\u00f3n sensible, por personal no autorizado.     </li> <li>Modificaci\u00f3n no autorizada de informaci\u00f3n: derivado del incidente anterior, modificaci\u00f3n no autorizada de informaci\u00f3n.     Ejemplos: modificaci\u00f3n de un sistema o contenido de una p\u00e1gina web por un atacante, empleando credenciales sustra\u00eddas de un sistema o aplicaci\u00f3n o encriptado de datos mediante ransomware.       </li> <li>P\u00e9rdida de datos: p\u00e9rdida de acceso a la informaci\u00f3n o eliminaci\u00f3n de esta. Puede ocurrir por acciones fraudulentas, como un ataque ransomware en el que no se recupera la informaci\u00f3n cifrada, o por accidentes, como el fallo de un sistema de almacenamiento.     Ejemplos: p\u00e9rdida por fallo de disco duro o robo f\u00edsico.   </li> <li>Fuga de informaci\u00f3n confidencial: divulgaci\u00f3n no autorizada de informaci\u00f3n confidencial. Esta informaci\u00f3n puede haber sido obtenida de forma fraudulenta o l\u00edcitamente pero no estar autorizada su divulgaci\u00f3n.      Ejemplos: publicaci\u00f3n de informaci\u00f3n confidencial en un sitio web o env\u00edo de informaci\u00f3n confidencial a terceros.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#328-fraude","title":"3.2.8.  Fraude","text":"<p>Reportes que tengan nexo con el uso no autorizado, derechos de autor, suplantaci\u00f3n de identidad, phishing y robo de credenciales.  </p> <ul> <li>Uso no autorizado de recursos: uso de recursos (redes, sistemas, aplicaciones o dispositivos) para prop\u00f3sitos inadecuados, incluyendo acciones con \u00e1nimo de lucro.    Ejemplo: uso de correo electr\u00f3nico para participar en estafas piramidales, o el port\u00e1til de trabajo como servidor de un juego online.  </li> <li>Derechos de autor: usar de manera no autorizada material protegido por derechos de autor.    Ejemplo: ofrecimiento o instalaci\u00f3n de software carente de licencia u otro material protegido por derechos de autor. </li> <li>Suplantaci\u00f3n de identidad: tipo de ataque en el que una entidad suplanta a otra para obtener beneficios ileg\u00edtimos, como acceder a informaci\u00f3n confidencial para el que no se tiene autorizaci\u00f3n. Son dif\u00edciles de detectar porque parecen ser leg\u00edtimos.      Ejemplo: suplantaci\u00f3n de la identidad de un usuario para acceder a su cuenta bancaria. </li> <li>Phishing: suplantaci\u00f3n de otra entidad con la finalidad de convencer al usuario para que revele sus credenciales privadas, como contrase\u00f1as o n\u00fameros de tarjeta, informaci\u00f3n personal o financiera. Usando para ello t\u00e9cnicas de ingenier\u00eda social a trav\u00e9s de correo electr\u00f3nico, mensajes de texto o llamadas telef\u00f3nicas.    Ejemplo: env\u00edo de correos electr\u00f3nicos que parecen ser de una entidad bancaria solicitando al usuario que introduzca sus credenciales en una p\u00e1gina web falsa.  </li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#329-vulnerable","title":"3.2.9.  Vulnerable","text":"<ul> <li>Criptograf\u00eda d\u00e9bil: servicios accesibles p\u00fablicamente que pueden presentar algoritmos o protocolos criptogr\u00e1ficos de manera err\u00f3nea, obsoletos o vulnerables, o cuando las claves de cifrado son d\u00e9biles.      Ejemplo: servidores web susceptibles de ataques POODLE/FREAK; protocolo WEB para redes wifi o algoritmos hash MD5, ambos con vulnerabilidades conocidas.</li> <li>Amplificador DDoS: servicios accesibles p\u00fablicamente que puedan ser empleados para la reflexi\u00f3n o amplificaci\u00f3n de ataques DDoS, forzando a un servidor a enviar grandes cantidades de datos a un tercero.       Ejemplo: servidores DNS abiertos, servidores NTP abiertos.</li> <li>Servicios con acceso potencial no deseado: servicios accesibles p\u00fablicamente potencialmente no deseados. Es decir, dejar sin protecci\u00f3n servicios que no deber\u00edan estar accesibles desde el exterior.      Ejemplo: servidores de base de datos sin protecci\u00f3n, servidores de correo abiertos, servidores de ficheros sin protecci\u00f3n, Telnet, RDP o VNC.</li> <li>Revelaci\u00f3n de informaci\u00f3n: Revelar informaci\u00f3n sensible o confidencial de manera involuntaria a personas no autorizadas.     Ejemplo: publicaci\u00f3n de informaci\u00f3n sensible en un sitio web, o env\u00edo de informaci\u00f3n confidencial a terceros. Mensaje de error de una aplicaci\u00f3n web que revela informaci\u00f3n sensible.</li> <li>Sistema vulnerable: sistema vulnerable a ciertos tipos de ataques, por ejemplo, por no haber sido actualizado con los \u00faltimos parches de seguridad. No tiene por qu\u00e9 haber sido comprometido, pero es susceptible de serlo.     Ejemplo: sistema operativo sin parchear, software desactualizado, configuraci\u00f3n incorrecta de un sistema, o vulnerabilidad conocida en un software.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#3210-otros","title":"3.2.10.  Otros","text":"<p>Aquellos incidentes que realicen consultas t\u00e9cnicas, mensajes informativos y peticiones judiciales. Reportes recibidos en el servicio gestionado por el CERT, pero que no se debe tomar acciones puesto que no pertenece a su \u00e1mbito de actuaci\u00f3n. Tambi\u00e9n se incluir\u00e1n en esta clasificaci\u00f3n aquellas quejas sobre las que no se reporten evidencias o \u00e9stas no sean contrastadas.  </p> <ul> <li>APT (Advanced Persistent Threats): ataques dirigidos contra organizaciones concretas, sustentados en mecanismos muy sofisticados de ocultaci\u00f3n, anonimato y persistencia. Esta amenaza habitualmente emplea t\u00e9cnicas de ingenier\u00eda social para conseguir sus objetivos junto con el uso de procedimientos de ataque conocidos o genuinos.  </li> <li>Ciberterrorismo: uso de redes o sistemas de informaci\u00f3n para atacar deliberadamente infraestructuras cr\u00edticas, o la seguridad nacional de un pa\u00eds, habitualmente por motivos pol\u00edticos o ideol\u00f3gicos.</li> <li>Incidentes relacionados con infraestructuras cr\u00edticas: borrado, da\u00f1ado, alteraci\u00f3n, supresi\u00f3n o inaccesibilidad de datos, programas inform\u00e1ticos o documentos electr\u00f3nicos de una infraestructura cr\u00edtica. Conductas graves relacionadas con los t\u00e9rminos anteriores que afecten a la prestaci\u00f3n de un servicio esencial.     Ejemplo: ataque a una central el\u00e9ctrica que provoque un corte de suministro el\u00e9ctrico, redes de comunicaciones, sistemas de transporte, sistemas de agua potable, servicios de salud, etc.</li> <li>Otros: todo aquel incidente que no tenga cabida en ninguna categor\u00eda anterior.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#32-peligrosidad-e-impacto","title":"3.2 Peligrosidad e impacto","text":"<p>Para completar una adecuada clasificaci\u00f3n de los ciberincidentes, adem\u00e1s de asignarlos a un grupo o tipo, hay que valorar tanto el grado de peligrosidad como el impacto que puede tener en la organizaci\u00f3n.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#321-grado-de-gravedadpeligrosidad","title":"3.2.1 Grado de gravedad/peligrosidad","text":"<p>El establecimiento de ciertos criterios permitir\u00e1 asignar el grado de peligrosidad en la primera fase de detecci\u00f3n.</p> <p>El indicador de peligrosidad determina la potencial amenaza que supondr\u00eda la materializaci\u00f3n de un incidente en los sistemas de informaci\u00f3n o comunicaci\u00f3n del ente afectado, as\u00ed como para los servicios prestados o la continuidad de negocio en caso de haberla. Este indicador se fundamenta en las caracter\u00edsticas intr\u00ednsecas a la tipolog\u00eda de amenaza y su comportamiento.</p> <p>Ej: Un ataque de ransomware que cifra los datos de la organizaci\u00f3n y exige un rescate para su recuperaci\u00f3n, se considera de alta peligrosidad debido a su capacidad para causar da\u00f1os significativos a la organizaci\u00f3n.</p> <p> </p> Grado de gravedad/peligrosidad <p>En la GU\u00cdA NACIONAL DE NOTIFICACI\u00d3N Y GESTI\u00d3N DE CIBERINCIDENTES, podr\u00e1s ver una relaci\u00f3n entre el tipo de incidente y el nivel de peligrosidad.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#322-impactoalcance-del-incidente","title":"3.2.2 Impacto/Alcance del incidente","text":"<p>Tambi\u00e9n tendremos que tener en cuenta el impacto del incidente en la Organizaci\u00f3n.</p> <p>El indicador de impacto de un ciberincidente se determinar\u00e1 evaluando las consecuencias que tal ciberincidente que puede tener en las funciones y actividades de la organizaci\u00f3n afectada, en sus activos o en los individuos afectados. De acuerdo a ello, se tienen en cuenta aspectos como las consecuencias potenciales o materializadas que provoca una determinada amenaza en un sistema de informaci\u00f3n y/o comunicaci\u00f3n, as\u00ed como en la propia entidad afectada (organismos p\u00fablicos o privados, y particulares).</p> <p>Por ejemplo, en lo que se refiere al Impacto Operativo y Financiero, un ataque de ransomware puede causar la p\u00e9rdida de acceso a datos cr\u00edticos, lo que resulta en paralizaci\u00f3n operativa y p\u00e9rdidas econ\u00f3micas significativas.</p> <p>Ej: Un ataque de denegaci\u00f3n de servicio (DoS) que interrumpe los servicios en l\u00ednea de una empresa, se considera de alto impacto debido a su capacidad para afectar la disponibilidad de los servicios y la reputaci\u00f3n de la empresa.</p> <p> </p> Impacto/Alcance del incidente <p>En la GU\u00cdA NACIONAL DE NOTIFICACI\u00d3N Y GESTI\u00d3N DE CIBERINCIDENTES, podr\u00e1s ver una relaci\u00f3n entre los par\u00e1metros tenidos en cuenta y el nivel de impacto.</p> <p>Diferenciar entre peligrosidad e impacto es importante, ya que un incidente puede ser altamente peligroso, pero tener un impacto bajo si se detecta y se responde r\u00e1pidamente. Por otro lado, un incidente de baja peligrosidad puede tener un impacto significativo si no se detecta a tiempo.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#33-prioridades","title":"3.3 Prioridades","text":"<p>La asignaci\u00f3n de prioridad a un incidente podr\u00e1 variar a lo largo del tiempo en funci\u00f3n de la nueva informaci\u00f3n disponible sobre el mismo. Esta clasificaci\u00f3n se podr\u00e1 obtener a partir de una conjunci\u00f3n de las dos anteriores y puede ayudar a concretar en un \u00fanico indicador como de prioritario es el incidente.</p> <p>Aqu\u00ed tienes una matriz que cruza los niveles de peligrosidad e impacto para determinar la prioridad. En este caso, se utiliza un enfoque com\u00fan basado en las mejores pr\u00e1cticas para gesti\u00f3n de incidentes:</p> Peligrosidad/Impacto L1: Bajo L2: Medio L3: Alto L4: Muy Alto L5: Cr\u00edtico 1: Bajo Baja Baja Media Media Alta 2: Medio Baja Media Media Alta Alta 3: Alto Media Media Alta Alta Emergencia 4: Muy Alto Media Alta Alta Emergencia Emergencia 5: Cr\u00edtico Alta Alta Emergencia Emergencia Emergencia <p>Esta relaci\u00f3n pretende ser meramente orientativa pudiendo ser alterada en aquellos casos en los que el equipo de operaci\u00f3n lo estimen oportuno, atendiendo al alcance/impacto y gravedad/peligrosidad del incidente.</p> <ul> <li>Emergencia: incidentes cuya resoluci\u00f3n no admite demora. Los incidentes de este tipo se procesar\u00e1n en paralelo de haber varios y, en su resoluci\u00f3n, se emplear\u00e1n todos los recursos disponibles. Ejemplos: aquellos que supongan peligro para vidas humanas, para la seguridad nacional, para la infraestructura de Internet. Hasta ahora tambi\u00e9n se consideran emergencias todos aquellos incidentes que requieran acci\u00f3n inmediata debido a su rapidez y \u00e1mbito de difusi\u00f3n.     </li> <li>Alta: aquellos cuyas caracter\u00edsticas requieren que sea atendido antes que otros, aunque sea detectado posteriormente. Se mantienen en una cola independiente de incidentes de alta prioridad, y no se procesar\u00e1n los de prioridad inferior mientras que estos no est\u00e9n atendidos. Los incidentes de alta prioridad se procesan en serie.    </li> <li>Normal: por defecto, los incidentes se atienden en serie por orden de llegada, mientras no requiera atenci\u00f3n uno de prioridad superior. Un incidente de prioridad normal puede adquirir la categor\u00eda de alta prioridad si no recibe atenci\u00f3n por un tiempo prolongado. Ejemplos: todos los incidentes no clasificados como alta prioridad o emergencia donde el atacante haya ganado acceso a un sistema inform\u00e1tico ajeno. Tambi\u00e9n se incluyen escaneos insistentes de redes.      </li> <li>Baja: los incidentes de baja prioridad se atienden en serie por orden de llegada, mientras no requiera atenci\u00f3n uno de prioridad superior. Un incidente de baja prioridad ser\u00e1 cerrado autom\u00e1ticamente si no recibe atenci\u00f3n por un tiempo prolongado. Ejemplos: incidentes aislados en grado de tentativa, donde el atacante no ha conseguido su prop\u00f3sito y no es probable que lo consiga.</li> </ul> <p>Ejemplo de Uso: 1. Caso: Un ataque de ransomware (peligrosidad 5: Cr\u00edtico) afecta sistemas cr\u00edticos de una organizaci\u00f3n (impacto L5: Cr\u00edtico).      - Resultado: Prioridad Emergencia.</p> <ol> <li>Caso: Un incidente de phishing dirigido a empleados de bajo nivel (peligrosidad 2: Medio) con impacto limitado en la organizaci\u00f3n (impacto L2: Medio).<ul> <li>Resultado: Prioridad Media.</li> </ul> </li> </ol>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#34-respuesta-al-incidente","title":"3.4 Respuesta al incidente","text":"<p>Todo lo anterior nos permitir\u00e1 definir la mejores estrategias de Respuesta a Incidentes:</p> <ul> <li>Acciones T\u00edpicas de Respuesta: En caso de un ataque de malware, la respuesta incluir\u00eda la identificaci\u00f3n y aislamiento del malware, seguido de la limpieza y recuperaci\u00f3n de los sistemas afectados.</li> <li>Estrategias de Mitigaci\u00f3n: Implementaci\u00f3n de copias de seguridad regulares y formaci\u00f3n de empleados en la detecci\u00f3n de correos electr\u00f3nicos sospechosos.</li> <li>Planificaci\u00f3n Ante Incidentes: Desarrollar y mantener un plan de respuesta a incidentes, que incluya protocolos de comunicaci\u00f3n y roles espec\u00edficos durante un incidente.</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#4-actividades","title":"4. Actividades","text":"","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#41-ejemplo","title":"4.1 Ejemplo","text":"<p>Tarea: Clasificar cada incidente seg\u00fan los criterios de taxonom\u00eda.</p> <p>Incidentes:</p> <ul> <li>Incidente 1: Ataque de malware que ha infectado varios sistemas cr\u00edticos.</li> <li>Incidente 2: Un ataque de phishing dirigido a empleados de alto nivel.</li> <li>Incidente 3: Intrusi\u00f3n en la red que result\u00f3 en una violaci\u00f3n de datos.</li> <li>Incidente 4: Denegaci\u00f3n de servicio distribuida (DDoS) que interrumpi\u00f3 los servicios en l\u00ednea.</li> <li>Incidente 5: Un empleado accediendo y divulgando informaci\u00f3n confidencial.</li> </ul> <p>Soluci\u00f3n Sugerida: \u00bfEn que grupo/tipo cae?</p> <p>Incidente 1: Malware  </p> <ul> <li>Clasificaci\u00f3n: Contenido malicioso  </li> <li>Prioridad: Alta  </li> <li>Justificaci\u00f3n: Afecta sistemas cr\u00edticos y requiere atenci\u00f3n inmediata  </li> </ul> <p>Incidente 2: Phishing </p> <ul> <li>Clasificaci\u00f3n: Fraude  </li> <li>Prioridad: Normal  </li> <li>Justificaci\u00f3n: Riesgo de compromiso de informaci\u00f3n, pero sin acceso directo a sistemas  </li> </ul> <p>Incidente 3: Intrusi\u00f3n y violaci\u00f3n de datos  </p> <ul> <li>Clasificaci\u00f3n: Acceso/Intrusi\u00f3n  </li> <li>Prioridad: Alta  </li> <li>Justificaci\u00f3n: Compromiso de datos sensibles y potencial impacto legal  </li> </ul> <p>Incidente 4: Ataque DDoS </p> <ul> <li>Clasificaci\u00f3n: Disponibilidad  </li> <li>Prioridad: Emergencia  </li> <li>Justificaci\u00f3n: Interrupci\u00f3n de servicios cr\u00edticos y necesidad de respuesta inmediata  </li> </ul> <p>Incidente 5: Fuga de informaci\u00f3n por empleado  </p> <ul> <li>Clasificaci\u00f3n: Seguridad/Confidencialidad de la informaci\u00f3n  </li> <li>Prioridad: Normal  </li> <li>Justificaci\u00f3n: Compromiso interno, riesgo de p\u00e9rdida de confidencialidad  </li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#42-actividad","title":"4.2 actividad","text":"<p>Consulta la moodle.</p>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#fuente","title":"Fuente","text":"<ul> <li>Repositorio de trabajo de taxonom\u00eda de incidentes de seguridad</li> <li>gu\u00eda CCN-STIC 817</li> <li>Taxonomia de un incidente</li> <li>Taxonom\u00eda</li> <li>Conoce a tus enemigos</li> <li>GU\u00cdA NACIONAL DE NOTIFICACI\u00d3N Y GESTI\u00d3N DE CIBERINCIDENTES</li> </ul>","tags":["incidentes","taxonom\u00eda"]},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Detecci\u00f3n de incidentes</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ra2","title":"RA2","text":"<p>b) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indice","title":"\u00cdNDICE","text":"<p>Indicios</p> <p>Centro de Operaciones de Seguridad, SOC</p> <p>IDS, IPS, SIEM</p> <p>Indicadores de compromiso</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicadores-de-compromiso","title":"Indicadores de compromiso","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicios","title":"Indicios","text":"<p>B\u00e1sicamente, los indicios de que nos encontramos ante un ciberincidente pueden provenir de dos tipos de fuentes: los precursores y los indicadores.</p> <p>Un precursor es un indicio de que puede ocurrir un incidente en el futuro.</p> <p>Un indicador es un indicio de que un incidente puede haber ocurrido o puede estar ocurriendo ahora.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicios-precursores","title":"Indicios - Precursores","text":"<p>Algunos ejemplos de precursores son:</p> <p>Las entradas de log del servidor Web, con los resultados de un esc\u00e1ner de vulnerabilidades.</p> <p>El anuncio de un nuevo exploit, dirigido a una atacar una vulnerabilidad que podr\u00eda estar presente en los sistemas de la organizaci\u00f3n.</p> <p>Amenazas expl\u00edcitas provenientes de grupos o entidades concretos, anunciado ataques a organizaciones objetivo.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicios-indicadores","title":"Indicios - Indicadores","text":"<p>Los indicadores son muy comunes, tales como:</p> <p>el sensor de intrusi\u00f3n de una red emitiendo una alerta cuando ha habido un intento de desbordamiento de b\u00fafer contra un servidor de base de datos;</p> <p>las alertas generadas por software antivirus,</p> <p>la presencia de un nombre de archivo con caracteres inusuales;</p> <p>Los indicadores son muy comunes, tales como:</p> <p>un registro de log sobre un cambio no previsto en la configuraci\u00f3n de un host;</p> <p>los logs de una aplicaci\u00f3n, advirtiendo de reiterados intentos fallidos de login desde un sistema externo desconocido;</p> <p>la detecci\u00f3n de un n\u00famero importante de correos electr\u00f3nicos rebotados con contenido sospechoso;</p> <p>desviaci\u00f3n inusual del tr\u00e1fico de la red interna,</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#centro-de-operaciones-de-seguridad-soc","title":"Centro de Operaciones de Seguridad, SOC","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-definicion","title":"SOC - Definici\u00f3n","text":"<p>El Centro de Operaciones de Seguridad, SOC, se refiere al equipo responsable de garantizar la seguridad de la informaci\u00f3n.</p> <p>El SOC es una plataforma que permite la supervisi\u00f3n y administraci\u00f3n de la seguridad del sistema de informaci\u00f3n a trav\u00e9s de herramientas de recogida, correlaci\u00f3n de eventos e intervenci\u00f3n remota:</p> <p>El SIEM (Security Information Event Management) es la principal herramienta del SOC ya que permite gestionar los eventos de un SI.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-objetivo","title":"SOC - Objetivo","text":"<p>El objetivo de un SOC es:</p> <p>Detectar, analizar y corregir incidentes de ciberseguridad utilizando soluciones tecnol\u00f3gicas y enfoques diferentes.</p> <p>Supervisan y analizan la actividad en redes, servidores, terminales, bases de datos, aplicaciones, sitios web y otros sistemas en busca de se\u00f1ales d\u00e9biles o comportamientos anormales que puedan indicar un incidente de seguridad o un compromiso.</p> <p>Debe garantizar que los posibles incidentes de seguridad se identifiquen, analicen, defiendan, investiguen e informen adecuadamente.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-funcionamiento","title":"SOC - Funcionamiento","text":"<p>El DOC trabaja de la siguiente forma:</p> <p>Estrategia que integre los objetivos espec\u00edficos de cada departamento.</p> <p>Definir la infraestructura necesaria para apoyarlo: Cortafuegos, IPS/IDS, soluciones de detecci\u00f3n de brechas, sondas y un sistema de gesti\u00f3n de eventos e informaci\u00f3n de seguridad (SIEM).</p> <p>Debe existir tecnolog\u00eda de recolecci\u00f3n y agregaci\u00f3n de informaci\u00f3n. (flujos de datos, mediciones, entradas de paquetes, syslog, etc)</p> <p>Supervisa vulnerabilidades de red y puntos finales.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-organizacion","title":"SOC - Organizaci\u00f3n","text":"<p>Organizados seg\u00fan el grado de especializaci\u00f3n:</p> <p>nivel 1: analistas de alertas: Monitorizan alertas, eval\u00faan y se escalan.</p> <p>nivel 2: determinar si los datos/sistemas se ha visto afectados y recomiendan una respuesta.</p> <p>nivel 3: profesionales altamente capacitados, se encargan de resolver incidentes y prevenir posibles incidentes.</p> <p>Suelen ser perfiles multidisciplinares y altamente experimentados y especializados.</p> <p>un SOC generalmente abarca m\u00faltiples aspectos de las operaciones de seguridad, mientras que los CSIRT, CERT y CIRTS se enfocan espec\u00edficamente en la respuesta a incidentes.</p> <p>CSIRT y CIRT son casi siempre casi equivalentes, referentes a respuesta de incidentes de seguridad inform\u00e1tica.</p> <p>CERT, aunque muchas compa\u00f1\u00edas usan el t\u00e9rmino de forma gen\u00e9rica, ha sido una marca registrada de Carnegie Mellon University desde 1997.</p> <p>El t\u00e9rmino CERT utilizado de esta manera se enfoca m\u00e1s ampliamente en mejorar la respuesta a incidentes como disciplina que solo en su propia organizaci\u00f3n</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#csirt","title":"CSIRT","text":"<p>significa equipo de respuesta a incidentes de seguridad inform\u00e1tica</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#cirt","title":"CIRT","text":"<p>puede representar al equipo de respuesta a incidentes inform\u00e1ticos o, con menor frecuencia, al equipo de respuesta a incidentes de ciberseguridad</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#cert","title":"CERT","text":"<p>significa equipo de respuesta (o preparaci\u00f3n) para emergencias inform\u00e1ticas</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_1","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Los grupos CERT, CSIRT y CIRT pueden existir como un grupo con personal permanente o pueden reunirse en una base ad hoc en respuesta a un evento.</p> <p>De cualquier manera, su enfoque son casi siempre las cuatro fases de respuesta a incidentes descritas en la \u00abGu\u00eda de manejo de incidentes de seguridad inform\u00e1tica\u00bb del NIST.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ids-ips-siem","title":"IDS, IPS, SIEM","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_2","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>\u00bfHas o\u00eddo hablar de sistemas IDS, IPS y SIEM?</p> <p>\u00bfSabes qu\u00e9 son exactamente y por qu\u00e9 son tan importantes para la seguridad de la red de tu empresa?</p> <p>Los tres son sistemas de protecci\u00f3n de las comunicaciones que act\u00faan monitorizando el tr\u00e1fico que entra o sale de nuestra red pero cada uno tiene unas caracter\u00edsticas que les confieren ventajas e inconvenientes.</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ids-intrusion-detection-system-o-sistema-de-deteccion-de-intrusiones","title":"IDS (Intrusion Detection System) o sistema de detecci\u00f3n de intrusiones","text":"<p>Aplicaci\u00f3n usada para detectar accesos no autorizados a un ordenador o a una red , es decir, son sistemas que monitorizan el tr\u00e1fico entrante y lo cotejan con una base de datos actualizada de firmas de ataque conocidas.</p> <p>Ante cualquier actividad sospechosa, emiten una alerta a los administradores del sistema quienes han de tomar las medidas oportunas.</p> <p>Estos accesos pueden ser ataques espor\u00e1dicos realizados por usuarios malintencionados o repetidos cada cierto tiempo, lanzados con herramientas autom\u00e1ticas.</p> <p>Estos sistemas s\u00f3lo detectan los accesos sospechosos emitiendo alertas anticipatorias de posibles intrusiones, pero no tratan de mitigar la intrusi\u00f3n. Su actuaci\u00f3n es reactiva .</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ips-intrusion-prevention-system-o-sistema-de-prevencion-de-intrusiones","title":"IPS (Intrusion Prevention System) o sistema de prevenci\u00f3n de intrusiones","text":"<p>Es un software que se utiliza para proteger a los sistemas de ataques e intrusiones. Su actuaci\u00f3n es preventiva .</p> <p>Estos sistemas llevan a cabo un an\u00e1lisis en tiempo real de las conexiones y los protocolos para determinar si se est\u00e1 produciendo o se va a producir un incidente, identificando ataques seg\u00fan patrones, anomal\u00edas o comportamientos sospechosos y permitiendo el control de acceso a la red, implementando pol\u00edticas que se basan en el contenido del tr\u00e1fico monitorizado, es decir, el IPS adem\u00e1s de lanzar alarmas, puede descartar paquetes y desconectar conexiones .</p> <p>Muchos proveedores ofrecen productos mixtos, llam\u00e1ndolos IPS/IDS, integr\u00e1ndose frecuentemente con cortafuegos y UTM (en ingl\u00e9s Unified Threat Management o Gesti\u00f3n Unificada de Amenazas) que controlan el acceso en funci\u00f3n de reglas sobre protocolos y sobre el destino u origen del tr\u00e1fico.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#siem-security-information-and-event-management-o-sistema-de-gestion-de-eventos-e-informacion-de-seguridad","title":"SIEM (Security Information and Event Management) o sistema de gesti\u00f3n de eventos e informaci\u00f3n de seguridad","text":"<p>Para hacer la vida m\u00e1s f\u00e1cil al personal de ciberseguridad, aparecen tambi\u00e9n los SIEM, dispositivos que se encargar\u00e1n de recoger los eventos recogidos por los IDS e IPS, analizarlos y se\u00f1alizar alertas que est\u00e9n previamente configuradas en base a reglas que procesan los eventos recibidos, permitiendo su agregaci\u00f3n y correlaci\u00f3n.</p> <p>Es una soluci\u00f3n h\u00edbrida centralizada que engloba la gesti\u00f3n de informaci\u00f3n de seguridad (Security Information Management) y la gesti\u00f3n de eventos (Security Event Manager).</p> <p>La tecnolog\u00eda SIEM proporciona un an\u00e1lisis en tiempo real de las alertas de seguridad generadas por los distintos dispositivos hardware y software de la red.</p> <p>Recoge los registros de actividad (logs) de los distintos sistemas, los relaciona y detecta eventos de seguridad, es decir, actividades sospechosas o inesperadas que pueden suponer el inicio de un incidente, descartando los resultados an\u00f3malos, tambi\u00e9n conocidos como falsos positivos y generando respuestas acordes en base a los informes y evaluaciones que registra, es decir, es una herramienta en la que se centraliza la informaci\u00f3n y se integra con otras herramientas de detecci\u00f3n de amenazas</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicadores-de-compromiso_1","title":"Indicadores de compromiso","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#incidente","title":"Incidente","text":"<p>confidencialidad</p> <p> **Incidente de seguridad: **  evento adverso que compromete o intenta comprometer:</p> <p>\u00bfComo saber si es anormal?</p> <p>Analizar variables:</p> <p>Tr\u00e1fico de red</p> <p>Alto consumo</p> <p>Lentitud en rpta</p> <p>Eje. prog extra\u00f1os</p> <p>Cambios ficheros</p> <p>Algo raro est\u00e1 pasando!</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#fuentes","title":"Fuentes","text":"<p>La informaci\u00f3n proviene de diferentes fuentes:</p> <p>revisiones manuales del sistema</p> <p>notificaciones de usuarios</p> <p>alertas</p> <p>No hay tiempo para este tipo de an\u00e1lisis</p> <p>Mientras existe una ventana de tiempo en la que el sistema est\u00e1 expuesto.</p> <p>Puede tratarse de un falso positivo, y mientras se est\u00e1 desgastando injustificadamente el equipo de respuesta a incidentes</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_3","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Como resultado de esta primera fase de an\u00e1lisis, se deben iniciar los procesos de contenci\u00f3n, erradicaci\u00f3n y recuperaci\u00f3n asociados. No obstante, si no hay definida una fase metodol\u00f3gica de detecci\u00f3n o hay fallos procedimentales, documentales y/o t\u00e9cnicos en el proceso, la respuesta no ser\u00e1 efectiva y cualquier acci\u00f3n adicional puede ser contraproducente (destrucci\u00f3n no intencional de evidencia, ejecuci\u00f3n de programas maliciosos, etc.). Igual suceder\u00e1 si el incidente vuelve a ocurrir y no se ha realizado una sesi\u00f3n de lecciones aprendidas y mejora continua que permitan optimizar el plan de respuesta a incidentes en el futuro.</p> <p>Si ponemos en contexto todos estos elementos, los tiempos de respuesta a incidentes e investigaci\u00f3n forense se ver\u00edan claramente optimizados si se contara con una herramienta automatizada que permitiera una detecci\u00f3n y clasificaci\u00f3n r\u00e1pida con base en comportamientos analizados de incidentes (\u201cmodus operandi\u201d) involucrando diferentes elementos ya conocidos como direcciones IP, hashes de procesos maliciosos, cookies, cambios en el registro de Windows, controladores de hardware, puertos TCP/UDP, correos electr\u00f3nicos, procesos en ejecuci\u00f3n, ficheros en el disco, etc.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicadiores-de-compromiso","title":"Indicadiores de compromiso","text":"<p>Frente a ello, han surgido m\u00faltiples iniciativas t\u00e9cnicas, dentro de las cuales resaltan los ** IoC (Indicators of Compromise \u2013 Indicadores de Compromiso)** . Se trata de un modelo basado por lo general en metalenguajes que permite registrar, parametrizar, comparar, categorizar y compartir la informaci\u00f3n conocida del comportamiento de incidentes analizados previamente desde una perspectiva hol\u00edstica, cubriendo todas las variables clave y propiedades que pueden dar pie a una detecci\u00f3n y clasificaci\u00f3n efectiva, analizando exclusivamente aquellos elementos relacionados sin perder el tiempo en an\u00e1lisis adicionales \u201ca ciegas\u201d que no ofrezcan valor en las conclusiones.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_4","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Contenido</p> <p>1 Modelos de implementaci\u00f3n de IoC</p> <p>2 Caso de estudio: Hacking Team</p> <p>3 Uso de IoC en conjunto con otras herramientas de identificaci\u00f3n de malware</p> <p>4 Conclusi\u00f3n</p> <p>Modelos de implementaci\u00f3n de IoC</p> <p>Desde la perspectiva de la industria han surgido diferentes modelos de implementaci\u00f3n del concepto de IoC. A pesar que no existe un est\u00e1ndar de facto, a continuaci\u00f3n se presentan algunos de los modelos m\u00e1s importantes que pueden ser empleados dependiendo de las necesidades de la organizaci\u00f3n:</p> <p>OASIS Cyber Threat Intelligence (CTI) https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=cti: Esta iniciativa est\u00e1 respaldada por algunos de los principales fabricantes de soluciones de seguridad y est\u00e1 orientada hacia la definici\u00f3n y estandarizaci\u00f3n de un conjunto de representaciones de informaci\u00f3n y protocolos para gestionar la necesidad de analizar, modelar y compartir datos de inteligencia contra amenazas inform\u00e1ticas. Est\u00e1 compuesto por tres subcomit\u00e9s: STIX (Structured Threat Information Expression \u2013 https://stixproject.github.io), TAXII (Trusted Automated Exchange of Indicator Information) y CybOX (Cyber Observable Expression \u2013 https://cybox.mitre.org).</p> <p>IODEF (Incident Object Description Exchange Format) \u2013 RFC 5070 ietf.org/rfc/rfc5070.txt: En diciembre de 2007 se public\u00f3 la RFC 5070, que contiene la descripci\u00f3n b\u00e1sica del esquema XML para el registro de variables t\u00e9cnicas relacionadas con incidentes conocidos para ser empleados principalmente por centros de respuesta a incidentes (CSIRT), orientado hacia la automatizaci\u00f3n en el procesamiento de datos de incidentes y la gesti\u00f3n de un formato com\u00fan para construir herramientas interoperables para la gesti\u00f3n de incidentes.</p> <p>The OpenIoC (Open Indicators of Compromise) Framework http://www.openioc.org: OpenIoC es un esquema extensible de XML publicado bajo los t\u00e9rminos de la licencia Apache 2, que permite describir las caracter\u00edsticas t\u00e9cnicas que identifican una amenaza conocida, la metodolog\u00eda de un atacante u otra evidencia de compromiso para la detecci\u00f3n r\u00e1pida de brechas de seguridad en un sistema. Esta iniciativa surgi\u00f3 como parte de las estrategias de gesti\u00f3n de incidentes de MANDIANT (http://www.mandiant.com), quienes son reconocidos por sus an\u00e1lisis de casos de ciberespionaje a nivel mundial. Actualmente se encuentra en su versi\u00f3n 1.0 y la versi\u00f3n 1.1 se encuentra en formato DRAFT (https://github.com/mandiant/OpenIOC_1.1).</p> <p>Caso de estudio: Hacking Team</p> <p>En Julio de 2015 la compa\u00f1\u00eda italiana Hacking Team (http://www.hackingteam.it/) anunci\u00f3 p\u00fablicamente que sus sistemas inform\u00e1ticos fueron comprometidos, incluyendo el c\u00f3digo fuente de sus herramientas de monitorizaci\u00f3n y explotaci\u00f3n, empleadas por m\u00faltiples entidades gubernamentales a nivel mundial. Este software utilizaba vulnerabilidades conocidas y de d\u00eda cero (\u201czero day\u201d) para instalarse de forma silenciosa y sin autorizaci\u00f3n del usuario afectado en los dispositivos objetivo.</p> <p>Debido a la gran cantidad de atenci\u00f3n medi\u00e1tica que recibi\u00f3 este evento, muchos ciudadanos de los pa\u00edses clientes de Hacking Team quer\u00edan validar si sus sistemas eran monitorizados por esta soluci\u00f3n. Una de las alternativas m\u00e1s \u00f3ptimas para esta revisi\u00f3n estuvo basada en el uso de OpenIoC a trav\u00e9s del aplicativo MILANO (https://github.com/RookLabs/milano) provisto por la empresa Rook Security (https://www.rooksecurity.com), que aprovecha las capacidades de los indicadores de compromiso para registrar, comparar y alertar de la existencia de binarios asociados al software de Hacking Team.</p> <p>Posterior al an\u00e1lisis del c\u00f3digo fuente del software de Hacking Team, se identificaron y perfilaron los binarios asociados (40+) y se incluyeron sus nombres y hashes (MD5, SHA1 y SHA256) dentro de un fichero XML siguiendo la estructura de OpenIoC (hackingteam_openIOC1-1.ioc). Para analizar su estructura, se puede emplear el aplicativo MANDIANT IoC Editor (https://www.fireeye.com/services/freeware/ioc-editor.html):</p> <p></p> <p>Como se puede observar, el esquema XML establecido por OpenIoC permite la inclusi\u00f3n de m\u00faltiples caracter\u00edsticas asociadas a elementos de un sistema que pueden estar afectadas por un incidente en particular. El listado exhaustivo de valores a parametrizar se puede encontrar en http://openioc.org/terms/Current.iocterms y http://schemas.mandiant.com/:</p> <p></p> <p>En el caso de MILANO, Rook Security cre\u00f3 su propio XML y desarroll\u00f3 una herramienta propia para que las variables descritas en el fichero de OpenIoC fueran analizadas en el sistema y se reportaran los hallazgos para que el propio usuario tomara las acciones que considerara prudentes:</p> <p></p> <p>No obstante, el mismo fichero XML/IoC puede ser empleado con otras herramientas como MANDIANT IoC Finder (https://www.fireeye.com/services/freeware/ioc-finder.html) o MANDIANT RedLine (https://www.fireeye.com/services/freeware/redline.html), lo cual demuestra la portabilidad del formato, que es uno de los criterios b\u00e1sicos de esta iniciativa. Este mismo concepto se ha utilizado para la identificaci\u00f3n de malware como Zeus, Stuxnet y Duqu y ha sido compartido para uso de la comunidad en el sitio de OpenIoC (http://openioc.org) u otros como Flamer (https://www.alienvault.com/open-threat-exchange/blog/flamer-indicators-of-compromise-openioc) y Red October (https://www.alienvault.com/open-threat-exchange/blog/red-october-indicators-of-compromise-and-mitigation-data), provistos por AlienVault, quienes tambi\u00e9n han integrado el concepto de IoC como base de su plataforma Open Threat Exchange (https://otx.alienvault.com/).</p> <p>Otros repositorios de IoC se pueden encontrar en OpenIoCDB (https://openiocdb.com/downloads/) y OpenIoC Bucket (https://www.iocbucket.com/), as\u00ed como integraci\u00f3n con plataformas como MISP (www.misp-project.org) y MANTIS (Model-based Analysis of Threat Intelligence Sources) Framework (https://github.com/siemens/django-mantis).</p> <p>Uso de IoC en conjunto con otras herramientas de identificaci\u00f3n de malware</p> <p>Debido a las caracter\u00edsticas de los IoC, su funcionalidad puede ser complementada con otras herramientas orientadas a la detecci\u00f3n de malware como YARA (http://plusvic.github.io/yara/), que permite la identificaci\u00f3n de malware con base en la identificaci\u00f3n de patrones de texto o binarios y el uso de expresiones booleanas para determinar su l\u00f3gica:</p> <p></p> <p>Un ejemplo de integraci\u00f3n entre reglas de IoC y reglas de YARA se puede encontrar en el aplicativo LOKI IOC Scanner (https://github.com/Neo23x0/Loki), que usa la definici\u00f3n de IoC en el uso de hash de binarios y sus nombres y ubicaciones y la l\u00f3gica de YARA para la identificaci\u00f3n de patrones:</p> <p></p> <p>Adicionalmente, en OpenIoC se pueden insertar firmas de YARA dentro de la propia definici\u00f3n del formato XML para ser usadas de forma combinada. Esta inserci\u00f3n se puede realizar empleando el paquete openioc_to_yara, incorporado dentro del IoC Writter de MANDIANT (https://github.com/mandiant/ioc_writer/tree/master/examples/openioc_to_yara).</p> <p>Conclusi\u00f3n</p> <p>La minimizaci\u00f3n de la ventana de exposici\u00f3n entre el tiempo de detecci\u00f3n de un incidente y su respuesta es un factor clave en el proceso de respuesta a incidentes. Debido a la gran cantidad de informaci\u00f3n que se requiere para esta detecci\u00f3n y la generaci\u00f3n se conclusiones y/o inferencias que den paso a acciones de contenci\u00f3n, correcci\u00f3n y recuperaci\u00f3n, es necesario un procedimiento automatizado que facilite la identificaci\u00f3n de incidentes ya analizados y permita compartir dichos hallazgos con la comunidad para una actuaci\u00f3n global. Como respuesta a esta necesidad han surgido los IoC (Indicators of Compromise), que permiten perfilar un incidente, crear una l\u00ednea base para la identificaci\u00f3n de diferentes variables asociadas a ese incidente en particular y comparar un dispositivo potencialmente afectado contra dichos par\u00e1metros para dar una respuesta r\u00e1pida y efectiva.</p> <p>Loki</p> <p>https://esgeeks.com/loki-ioc-escaner-respuesta-incidentes/</p> <p>https://github.com/Neo23x0/Loki/releases</p> <p>Reglas yara</p> <p>https://www.cytomic.ai/es/tendencias/reglas-yara-detectar-malware/</p> <p>clamAV</p> <p>https://es.bestantiviruspro.org/review/clamav-review/</p> <p>https://jnjsite.com/gnu-linux-el-antivirus-clamav-con-auto-escaneo/</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#actividad","title":"Actividad","text":"<p>2.b.02 - Detecci\u00f3n de incidentes IDS/IPS (Individual)  (2b)</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/","title":"UD 2 - 2.2.1 SOC: Servicios y herramientas","text":"","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#221-ecosistema-de-un-soc-servicios-y-herramientas","title":"2.2.1 Ecosistema de un SOC: Servicios y herramientas","text":"C\u00f3digo Descripci\u00f3n RA2 Analiza incidentes de ciberseguridad utilizando herramientas, mecanismos de detecci\u00f3n y alertas de seguridad. CEb Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes. <p>En el punto anterior hemos visto como clasificar y valorar los incidentes de ciberseguridad. En el proceso de detecci\u00f3n y respuesta a incidentes de ciberseguridad, es fundamental contar con herramientas y servicios que nos ayuden a detectar y responder a estos incidentes. En este apartado vamos a ver las herramientas y servicios m\u00e1s comunes que se utilizan en un SOC para detectar y responder a incidentes de ciberseguridad.</p> <p> </p> Representaci\u00f3n de un SOC","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#1-introducciion","title":"1. Introducci\u00edon","text":"<p>Los Centros de Operaciones de Seguridad (SOC, por sus siglas en ingl\u00e9s) son el coraz\u00f3n operativo de la ciberseguridad en una organizaci\u00f3n. Antes de adentrarnos en sus componentes y servicios, es fundamental comprender qu\u00e9 es un SOC, qu\u00e9 objetivos persigue, c\u00f3mo se diferencia de otras estructuras de seguridad y por qu\u00e9 es crucial en el entorno empresarial moderno.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#11-que-es-un-soc","title":"1.1. \u00bfQu\u00e9 es un SOC?","text":"<p>Un SOC es un centro de operaciones centralizado compuesto por profesionales de ciberseguridad, procesos estandarizados y tecnolog\u00edas avanzadas, dise\u00f1ado para supervisar, detectar, responder y prevenir amenazas de seguridad.</p> <p>Analog\u00eda: Imagina un SOC como un \u201ccentro de control a\u00e9reo\u201d para la ciberseguridad. As\u00ed como los controladores de tr\u00e1fico a\u00e9reo supervisan vuelos y responden a emergencias, los analistas del SOC vigilan el tr\u00e1fico digital de una organizaci\u00f3n y reaccionan ante amenazas.</p> <p>Funciones principales:</p> <ol> <li>Supervisar continuamente la infraestructura tecnol\u00f3gica (redes, sistemas, aplicaciones), asi como la informaci\u00f3n de la organizaci\u00f3n. Estar preparados y actualizados, buscando amenazas y vulnerabilidades.</li> <li>Detectar amenazas o actividades sospechosas.</li> <li>Responder y mitigar incidentes de seguridad.</li> <li>Prevenir futuros ataques mediante el aprendizaje continuo y la mejora de defensas.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#12-objetivos-principales-de-un-soc","title":"1.2. Objetivos principales de un SOC","text":"<p>El SOC tiene como objetivo proteger los activos cr\u00edticos de la organizaci\u00f3n (datos, sistemas y reputaci\u00f3n) mediante:</p> <ol> <li>Prevenci\u00f3n: Implementar controles y configuraciones para evitar ataques.</li> </ol> <p>Ejemplo: Configurar firewalls para bloquear conexiones no autorizadas. Configurar IDS/IPS para detectar y bloquear ataques. 2. Detecci\u00f3n: Detectar actividades sospechosas que puedan ser indicativas de un incidente de seguridad.</p> <p>Ejemplo: Alertas del SIEM que detectan intentos de acceso inusuales, seg\u00fan reglas de detecci\u00f3n configuradas. 3. Respuesta: Actuar r\u00e1pidamente para minimizar el impacto de los incidentes.</p> <p>Ejemplo: Aislar un servidor comprometido para evitar que un malware se propague y eliminar la amenaza. 4. Recuperaci\u00f3n: Restaurar los sistemas afectados y garantizar que vuelvan a operar normalmente.</p> <p>Ejemplo: Restaurar datos desde una copia de seguridad tras un ataque de ransomware.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#13-diferencias-entre-soc-cert-cirt-y-csirt","title":"1.3. Diferencias entre SOC, CERT, CIRT y CSIRT","text":"<p>En el mundo de la ciberseguridad, es com\u00fan encontrar t\u00e9rminos como SOC, CERT, CIRT y CSIRT. Aunque est\u00e1n relacionados, tienen enfoques y funciones espec\u00edficas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#131-definicion-de-terminos","title":"1.3.1. Definici\u00f3n de t\u00e9rminos","text":"<ol> <li>SOC (Security Operations Center): Centro de operaciones de seguridad, que se encarga de la supervisi\u00f3n continua, detecci\u00f3n, respuesta y prevenci\u00f3n de amenazas. Su enfoque es amplio y abarca todas las operaciones de seguridad. El SOC es el encargado de la seguridad de la organizaci\u00f3n y abarca todas las operaciones de seguridad.</li> <li>CERT (Computer Emergency Response Team): Equipo especializado en preparar y responder a emergencias de ciberseguridad, como ataques DDoS o ransomware. Suele actuar de manera reactiva ante incidentes.</li> <li>CIRT (Computer Incident Response Team): Similar al CERT, pero centrado en la gesti\u00f3n de incidentes de seguridad espec\u00edficos, con un enfoque en la contenci\u00f3n y erradicaci\u00f3n.</li> <li>CSIRT (Computer Security Incident Response Team): Variante m\u00e1s amplia del CIRT, que incluye una visi\u00f3n m\u00e1s estrat\u00e9gica y alineada con las pol\u00edticas de seguridad.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#132-relacion-y-diferencias-clave","title":"1.3.2. Relaci\u00f3n y diferencias clave","text":"<p>Relaci\u00f3n: Un SOC generalmente abarca m\u00faltiples aspectos de las operaciones de seguridad, mientras que los CSIRT, CERT y CIRTS se enfocan espec\u00edficamente en la respuesta a incidentes. El SOC normalmente incluir\u00e1 adem\u00e1s las funciones de CERT/CIRT/CSIRT como parte de sus operaciones.</p> <p>Los t\u00e9rminos CERT, CIRT y CSIRT suelen utilizarse como sin\u00f3nimos, aunque pueden tener diferencias sutiles en su alcance y enfoque. En general, estos equipos se activan ante incidentes cr\u00edticos y trabajan para contener, investigar y mitigar los da\u00f1os.</p> <p>CSIRT y CIRT son casi siempre casi equivalentes, referentes a respuesta de incidentes de seguridad inform\u00e1tica. Respecto al t\u00e9rmino CERT, aunque muchas compa\u00f1\u00edas lo usan de forma gen\u00e9rica, ha sido una marca registrada de Carnegie Mellon University desde 1997, y se enfoca m\u00e1s ampliamente en mejorar la respuesta a incidentes.</p> <p>Diferencias:</p> <ul> <li>SOC: Supervisi\u00f3n continua y gesti\u00f3n integral de las operaciones de seguridad.</li> <li>CERT/CIRT/CSIRT: Act\u00faan principalmente ante incidentes de ciberseguridad, para contener, eliminar y recuperarse de los mismos.</li> </ul> <p>Ejemplo:</p> <ul> <li>A trav\u00e9s de los servicios y herramientas que hay implementadas en el SOC, se detecta un comportamiento sospechoso y genera una alerta.</li> <li>El equipo de respuesta a incidentes investiga el incidente y coordina la respuesta: Contener el ataque, eliminar la amenaza.</li> <li>Tras contener el ataque, el equipo de respuesta a incidentes continua con la recuperaci\u00f3n de los sistemas afectados.</li> </ul> <p>Analog\u00eda: El SOC es como un hospital completo que incluye \u00e1reas de prevenci\u00f3n, diagn\u00f3stico y tratamiento, mientras que un CERT/CIRT/CSIRT ser\u00eda como la unidad de emergencias, que se activa solo cuando ocurre un evento cr\u00edtico.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#14-importancia-de-los-soc-en-la-ciberseguridad-empresarial","title":"1.4. Importancia de los SOC en la ciberseguridad empresarial","text":"<p>En un mundo cada vez m\u00e1s digitalizado, las organizaciones dependen de los SOC para protegerse contra un panorama de amenazas en constante evoluci\u00f3n.</p> <p>Ejemplo: Imagina una tienda en l\u00ednea que es v\u00edctima de un ataque de ransomware (secuestro de datos). Si no tiene un SOC que monitoree las actividades sospechosas y responda r\u00e1pidamente, los atacantes podr\u00edan paralizar sus operaciones y exigir un rescate para liberar los datos.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#141-amenazas-crecientes","title":"1.4.1. Amenazas crecientes","text":"<p>Las organizaciones enfrentan un aumento en la frecuencia, sofisticaci\u00f3n y diversidad de los ciberataques.</p> <p>Ejemplo: En 2023, los ataques de ransomware afectaron a miles de empresas, causando interrupciones y p\u00e9rdidas millonarias. Un SOC puede ayudar a detectar y bloquear estos ataques antes de que causen da\u00f1os irreparables.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#142-beneficios-de-contar-con-un-soc","title":"1.4.2. Beneficios de contar con un SOC","text":"<ol> <li>Protecci\u00f3n proactiva: Los SOC no solo reaccionan a amenazas, sino que tambi\u00e9n trabajan para prevenirlas.    Ejemplo: Un SOC implementa reglas en el SIEM para bloquear intentos de fuerza bruta antes de que comprometan un sistema.</li> <li>Respuesta r\u00e1pida: Los SOC reducen el tiempo de respuesta a incidentes cr\u00edticos.    Ejemplo: Detectar y contener un ataque en minutos puede evitar una filtraci\u00f3n masiva de datos.</li> <li>Cumplimiento normativo: Ayudan a las organizaciones a cumplir con regulaciones como GDPR, ISO 27001 o NIST CSF.    Ejemplo: Generar reportes de incidentes detallados para auditor\u00edas regulatorias.</li> <li>Confianza del cliente: Un SOC demuestra el compromiso de la organizaci\u00f3n con la seguridad, fortaleciendo la confianza de clientes y socios.    Ejemplo: Mostrar a los clientes que sus datos est\u00e1n protegidos y que la empresa est\u00e1 preparada para enfrentar amenazas.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#143-relevancia-estrategica","title":"1.4.3. Relevancia estrat\u00e9gica","text":"<p>En muchas organizaciones, el SOC es considerado un habilitador estrat\u00e9gico, ya que protege la continuidad del negocio y permite a las empresas operar en entornos digitales de forma segura.</p> <p>Ejemplo: Un SOC ayuda a una empresa de servicios financieros a detectar y bloquear un ataque ransomware, evitando la p\u00e9rdida de datos confidenciales y disponibilidad de servicios. De esta forma, el SOC contribuye a la reputaci\u00f3n y sostenibilidad del negocio, de otra manera el impacto podr\u00eda haber sido catastr\u00f3fico, no disponibilidad de servicios, p\u00e9rdida de confianza de los clientes, sanciones regulatorias, etc.</p> <p>El SOC es mucho m\u00e1s que un equipo t\u00e9cnico; es una estructura estrat\u00e9gica que protege los activos m\u00e1s valiosos de una organizaci\u00f3n. Al comprender su definici\u00f3n, objetivos y diferencias con estructuras relacionadas como CERT o CSIRT, se puede apreciar su papel crucial en el ecosistema de ciberseguridad actual.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2-componentes-de-un-soc","title":"2. Componentes de un SOC","text":"<p>Los Centros de Operaciones de Seguridad est\u00e1n compuestos por varios elementos clave que trabajan en conjunto para proteger la infraestructura y los datos de una organizaci\u00f3n. Estos elementos incluyen personas, procesos, tecnolog\u00edas y servicios. Cada uno de ellos desempe\u00f1a un papel \u00fanico y esencial dentro del funcionamiento de un SOC.</p> <p></p> <p>Para entender c\u00f3mo se estructuran y colaboran estos componentes, abordaremos cada uno de ellos por separado, con ejemplos y descripciones detalladas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#21-personas","title":"2.1. Personas","text":"<p>Las personas son el n\u00facleo de cualquier SOC. Aunque las tecnolog\u00edas y los procesos son fundamentales, es el equipo humano quien toma decisiones cr\u00edticas y act\u00faa frente a los incidentes de seguridad.</p> <p>A continuaci\u00f3n, exploraremos los roles clave en un SOC, la importancia de la formaci\u00f3n y desarrollo continuo, y c\u00f3mo cada miembro del equipo contribuye a la seguridad de la organizaci\u00f3n.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#211-roles-en-un-soc","title":"2.1.1. Roles en un SOC","text":"<p>Un SOC incluye una variedad de roles especializados, dise\u00f1ados para cubrir distintos aspectos de la seguridad cibern\u00e9tica:</p> <ol> <li>Gerente del SOC: Supervisa las operaciones y coordina la respuesta a incidentes importantes.    Ejemplo: Coordinar la respuesta a un ataque de ransomware que afecta a m\u00faltiples sistemas.</li> <li>Analistas SOC (Niveles 1, 2, 3): Nivel 1: Monitorea eventos y alerta sobre actividades sospechosas.    Ejemplo: Revisi\u00f3n de un intento de inicio de sesi\u00f3n desde ubicaciones inusuales.    Nivel 2: Investiga las alertas generadas por el Nivel 1 para determinar si son incidentes reales.    Ejemplo: Analizar patrones de tr\u00e1fico para confirmar si un ataque est\u00e1 en curso.    Nivel 3: Maneja incidentes complejos y realiza an\u00e1lisis forenses.    Ejemplo: Determinar c\u00f3mo un atacante accedi\u00f3 a un sistema y prevenir futuros ataques.</li> <li>Especialistas en Threat Hunters: Buscan proactivamente amenazas avanzadas que pueden haber evadido los controles de seguridad de nuestra organizaci\u00f3n.    Ejemplo: Buscar se\u00f1ales de un malware reci\u00e9n descubierto que afecta a empresas similares.</li> <li>Especialistas en Threat Intelligence: Identifican nuevas amenazas que han surgido en el panorama de ciberseguridad y comparten informaci\u00f3n relevante con el equipo del SOC, por ejemplo actualizando reglas de detecci\u00f3n del SIEM.    Ejemplo: Investigar un aumento de ataques phishing en la regi\u00f3n y compartir indicadores relevantes, como direcciones IP maliciosas, emails o URLs.</li> <li>Ingenieros de Seguridad: Configuran y mantienen las herramientas tecnol\u00f3gicas del SOC.    Ejemplo: Configurar reglas de detecci\u00f3n en el SIEM para alertar sobre actividades sospechosas. Estas reglas pueden ser actualizadas por los realizados por los especialistas en Threat Intelligence, por las lecciones aprendidas en incidentes previos, por los trabajos realizados por los Threat Hunters, etc.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#212-formacion-y-desarrollo","title":"2.1.2. Formaci\u00f3n y desarrollo","text":"<p>La capacitaci\u00f3n continua es crucial en un entorno de ciberseguridad, donde las amenazas evolucionan constantemente.</p> <p>Ejemplo: Los analistas deben aprender regularmente sobre nuevas t\u00e9cnicas de ataque, como el ransomware basado en IA, para adaptar las defensas del SOC.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#22-procesos","title":"2.2. Procesos","text":"<p>Para que un SOC funcione eficazmente, debe contar con procesos bien definidos que gu\u00eden la gesti\u00f3n de amenazas e incidentes.</p> <p>Los procesos son los pasos estructurados y repetibles que un SOC sigue para manejar tareas clave como la detecci\u00f3n de amenazas, la gesti\u00f3n de incidentes, la recuperaci\u00f3n y el an\u00e1lisis post-incidente. Estos procesos est\u00e1n dise\u00f1ados para:</p> <ul> <li>Estandarizar operaciones: Asegurarse de que cada analista sepa exactamente qu\u00e9 hacer en cada situaci\u00f3n.</li> <li>Reducir el tiempo de respuesta: Minimizar el impacto de los incidentes mediante una actuaci\u00f3n r\u00e1pida y efectiva.</li> <li>Facilitar la comunicaci\u00f3n: Proveer un marco com\u00fan para que todos los miembros del SOC trabajen en conjunto.</li> <li>Promover la mejora continua: Analizar cada incidente para aprender y mejorar los procesos.</li> </ul> <p>Ejemplo: Supongamos que el SOC recibe una alerta sobre tr\u00e1fico sospechoso en un servidor web. El proceso est\u00e1ndar indicar\u00eda los pasos sobre como verificar la fuente del tr\u00e1fico, determinar si es leg\u00edtimo o malicioso, y tomar medidas correctivas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#221-procesos-en-un-soc","title":"2.2.1. Procesos en un SOC","text":"<p>Los procesos son fundamentales en un Centro de Operaciones de Seguridad (SOC). Representan la base sobre la que las personas y las tecnolog\u00edas trabajan en conjunto para proteger a una organizaci\u00f3n frente a amenazas cibern\u00e9ticas. Un proceso bien definido no solo asegura eficiencia, sino que tambi\u00e9n garantiza consistencia y mejora continua en la respuesta a incidentes.</p> <ul> <li>Monitoreo continuo: Supervisi\u00f3n 24/7 de eventos y alertas.</li> </ul> <p>Ejemplo: Utilizar un SIEM para correlacionar eventos de seguridad y detectar patrones sospechosos. - Generaci\u00f3n de reportes y m\u00e9tricas: Evaluar la efectividad del SOC y cumplir con requisitos regulatorios.</p> <p>Ejemplo: Producir un informe mensual que muestre el n\u00famero de incidentes detectados y mitigados. - Gesti\u00f3n del conocimiento: Documentar y compartir lecciones aprendidas de incidentes pasados.</p> <p>Ejemplo: Crear una base de datos de incidentes que incluya detalles sobre c\u00f3mo se detectaron y mitigaron.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#222-importancia-de-la-estandarizacion-de-procesos","title":"2.2.2. Importancia de la estandarizaci\u00f3n de procesos","text":"<p>La estandarizaci\u00f3n asegura que todos los analistas trabajen de manera consistente y que el SOC opere seg\u00fan las mejores pr\u00e1cticas de la industria.</p> <p></p> <p>Los marcos m\u00e1s utilizados incluyen:</p> <ol> <li>NIST Cybersecurity Framework (CSF): Define cinco funciones clave: Identificar, Proteger, Detectar, Responder y Recuperar.</li> <li>ISO/IEC 27001: Proporciona est\u00e1ndares para la gesti\u00f3n de la seguridad de la informaci\u00f3n.</li> <li>ITIL (Information Technology Infrastructure Library): Gu\u00eda sobre la gesti\u00f3n de servicios de TI.</li> </ol> <p>Ejemplo: Implementar el marco NIST permite al SOC estructurar sus operaciones desde la identificaci\u00f3n de activos cr\u00edticos hasta la recuperaci\u00f3n post-incidente.</p> <p>Los procesos en un SOC son el motor que asegura que las amenazas sean gestionadas de manera eficiente y efectiva. Al estandarizar operaciones y apoyarse en marcos reconocidos, el SOC puede garantizar una respuesta consistente, reducir los tiempos de reacci\u00f3n y mejorar continuamente sus defensas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#23-tecnologias","title":"2.3. Tecnolog\u00edas","text":"<p>Las tecnolog\u00edas son un pilar esencial en el funcionamiento de un SOC, ya que proporcionan las herramientas necesarias para monitorear, detectar y responder a amenazas de seguridad de manera eficiente. Estas tecnolog\u00edas permiten automatizar tareas repetitivas, identificar patrones de ataque y facilitar la colaboraci\u00f3n entre los equipos del SOC.</p> <p>En este apartado exploraremos las tecnolog\u00edas clave utilizadas en un SOC, su funci\u00f3n espec\u00edfica y c\u00f3mo se integran para formar un ecosistema de seguridad robusto.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#231-herramientas-principales-en-un-soc","title":"2.3.1. Herramientas principales en un SOC","text":"<p>El SOC utiliza una combinaci\u00f3n de herramientas que se complementan para proporcionar capacidades de monitoreo, detecci\u00f3n, an\u00e1lisis y respuesta. Estas herramientas se agrupan seg\u00fan su funci\u00f3n:</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2311-siem-security-information-and-event-management","title":"2.3.1.1. SIEM (Security Information and Event Management)","text":"<p>El SIEM es el coraz\u00f3n tecnol\u00f3gico del SOC. Su funci\u00f3n principal es recopilar y correlacionar datos de m\u00faltiples fuentes para identificar eventos de seguridad relevantes.</p> <p>Funciones clave:</p> <ol> <li>Recolecci\u00f3n de datos: Agrupa registros (logs) de sistemas, aplicaciones, firewalls, routers y otros dispositivos.</li> <li>Correlaci\u00f3n: Analiza patrones en los datos para identificar posibles amenazas.</li> <li>Generaci\u00f3n de alertas: Notifica al equipo cuando detecta un comportamiento sospechoso.</li> </ol> <p>Ejemplo: Si detecta m\u00faltiples intentos de acceso fallidos seguidos por un inicio de sesi\u00f3n exitoso desde una ubicaci\u00f3n inusual, el SIEM genera una alerta para investigar un posible ataque de fuerza bruta.</p> <p>Beneficio adicional: Los sistemas SIEM modernos incluyen capacidades de inteligencia artificial (IA) para mejorar la precisi\u00f3n de las alertas y reducir los falsos positivos.</p> <p>Ejemplo de herramientas SIEM: Splunk, IBM QRadar, ArcSight (Micro Focus), LogRhythm, Sumo Logic, SolarWinds Security Event Manager, Elastic Security, Microsoft Sentinel, Graylog, ManageEngine Log360.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2312-soar-security-orchestration-automation-and-response","title":"2.3.1.2. SOAR (Security Orchestration, Automation, and Response)","text":"<p>El SOAR automatiza tareas de respuesta y orquesta las interacciones entre herramientas del SOC.</p> <p>Funciones clave:</p> <ol> <li>Automatizaci\u00f3n: Responde autom\u00e1ticamente a amenazas comunes.</li> </ol> <p>Ejemplo: Si un SIEM detecta malware, el SOAR puede ejecutar un script que a\u00edsle autom\u00e1ticamente la m\u00e1quina afectada.  2. Orquestaci\u00f3n: Integra m\u00faltiples herramientas para que trabajen en conjunto.</p> <p>Ejemplo: Crear un flujo de trabajo que inicie un an\u00e1lisis forense cuando se detecta un incidente cr\u00edtico. 3. Gesti\u00f3n de casos: Documenta incidentes, asigna tareas y realiza seguimientos.</p> <p>Ejemplo: Crear un ticket para que un analista investigue un ataque phishing y asignar tareas para mitigar la amenaza.</p> <p>Beneficio adicional: Permite a los analistas centrarse en incidentes complejos, mientras automatiza las tareas repetitivas.</p> <p>Ejemplo de herramientas SOAR: Palo Alto Networks Cortex XSOAR, IBM Resilient, Splunk Phantom, Siemplify, Swimlane, DFLabs IncMan, CyberSponse.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2313-herramientas-de-threat-intelligence","title":"2.3.1.3. Herramientas de Threat Intelligence","text":"<p>Estas herramientas recopilan informaci\u00f3n sobre amenazas emergentes y la comparten con el SOC. Identifican patrones de ataque, IoCs y TTPs utilizados por actores maliciosos.</p> <p>Funciones clave:</p> <ol> <li>Recopilaci\u00f3n de IoCs (Indicadores de Compromiso): Direcciones IP maliciosas, URLs sospechosas, hashes de archivos.</li> </ol> <p>Ejemplo: Identificar una direcci\u00f3n IP utilizada por un grupo de hackers para lanzar ataques. 2. An\u00e1lisis de TTPs (T\u00e1cticas, T\u00e9cnicas y Procedimientos): M\u00e9todos comunes utilizados por actores maliciosos.</p> <p>Ejemplo: Identificar que un ransomware espec\u00edfico utiliza un puerto poco com\u00fan para comunicarse con su servidor de control y comando, y bloquear ese tr\u00e1fico.</p> <p>Beneficio adicional: Ayuda al SOC a anticiparse a nuevas amenazas antes de que impacten a la organizaci\u00f3n.</p> <p>Ejemplo de herramientas de Threat Intelligence: Recorded Future, ThreatConnect, Anomali, FireEye iSIGHT, IBM X-Force Exchange, AlienVault OTX, VirusTotal, OpenCTI (Open Cyber Threat Intelligence)</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2314-herramientas-de-monitoreo-de-red-y-endpoints","title":"2.3.1.4. Herramientas de monitoreo de red y endpoints","text":"<p>Estas herramientas supervisan el tr\u00e1fico de red y las actividades en dispositivos finales para detectar amenazas. Detectan comportamientos an\u00f3malos y responden a incidentes en tiempo real.</p> <p>Tipo de herramientas:</p> <ol> <li>EDR (Endpoint Detection and Response): Se enfoca en la seguridad de los dispositivos finales, como computadoras y servidores para detectar y responder a amenazas.</li> </ol> <p>Ejemplo: Identificar un archivo sospechoso descargado en un port\u00e1til y bloquear su ejecuci\u00f3n. 2. NDR (Network Detection and Response): Se enfoca en la seguridad de la red, monitorea el tr\u00e1fico de red para identificar comportamientos an\u00f3malos.</p> <p>Ejemplo: Detectar una transferencia de datos inusualmente grande a un servidor externo.</p> <p>Beneficio adicional: Proporcionan visibilidad en tiempo real de las actividades en la red y los dispositivos finales, enviando alertas cuando se detectan amenazas potenciales. Suministran logs y datos de tr\u00e1fico para an\u00e1lisis forense.</p> <p>Ejemplo de herramientas EDR: CrowdStrike Falcon, Carbon Black, SentinelOne, Cylance, McAfee ENS, Microsoft Defender for Endpoint.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2315-herramientas-idsips","title":"2.3.1.5. Herramientas IDS/IPS","text":"<p>Los sistemas de detecci\u00f3n y prevenci\u00f3n de intrusiones (IDS/IPS) monitorean y bloquean actividades maliciosas en la red.</p> <p>Funciones clave:</p> <ol> <li>Detecci\u00f3n: Identificar intentos de intrusi\u00f3n o comportamientos sospechosos.</li> </ol> <p>Ejemplo: Un IDS alerta sobre un escaneo de puertos en un servidor. 2. Prevenci\u00f3n: Bloquear tr\u00e1fico malicioso antes de que cause da\u00f1o.</p> <p>Ejemplo: Un IPS detecta un escaneo de puertos inusual y bloquea la IP del atacante.</p> <p>Beneficio adicional: Protege la red contra ataques conocidos y desconocidos.</p> <p>Ejemplo de herramientas IDS/IPS: Snort, Suricata, Cisco Firepower, Palo Alto Networks, Fortinet, Check Point.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2316-sistemas-de-ticketing","title":"2.3.1.6. Sistemas de ticketing","text":"<p>Los sistemas de ticketing gestionan y documentan los incidentes dentro del SOC. Permiten asignar tareas, hacer seguimiento de la resoluci\u00f3n y documentar las acciones tomadas.</p> <p>Funciones clave:</p> <ol> <li>Registro de incidentes: Cada incidente se documenta con detalles como la fecha, la gravedad y las acciones tomadas.</li> </ol> <p>Ejemplo: Crear un ticket para un ataque de phishing detectado por el equipo de Threat Intelligence, cualificado por un analista y asignado a un especialista en respuesta a incidentes. 2. Colaboraci\u00f3n: Permite asignar tareas a diferentes miembros del equipo.</p> <p>Ejemplo: Cuando se detecta un ataque phishing, se genera un ticket para que un analista investigue los correos afectados.</p> <p>Beneficio adicional: Facilita la comunicaci\u00f3n y la colaboraci\u00f3n entre los miembros del equipo, asegurando que los incidentes se gestionen de manera eficiente.</p> <p>Ejemplo de herramientas de ticketing: TheHive, IBM Resilient, Splunk SOAR (anteriormente Phantom), Cortex XSOAR (de Palo Alto Networks), DFLabs IncMan SOAR, Siemplify, LogRhythm SOAR, ServiceNow Security Operations, FortiSOAR (Fortinet), MISP (Malware Information Sharing Platform), Jira, ServiceNow, Freshdesk, OTRS.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2317-tecnologias-de-analisis-forense","title":"2.3.1.7. Tecnolog\u00edas de an\u00e1lisis forense","text":"<p>Estas herramientas permiten a los equipos analizar incidentes despu\u00e9s de que han ocurrido para comprender c\u00f3mo sucedieron.</p> <p>Funciones clave:</p> <ol> <li>Recuperar, salvaguardar las evidencias digitales de los sistemas afectados.</li> </ol> <p>Ejemplo: Extraer registros, logs y archivos de un servidor comprometido y dejar una copia forense para an\u00e1lisis. 2. Analizar las evidencias y reconstruir la secuencia de eventos que llevaron al incidente.</p> <p>Ejemplo: Analizar los logs de un servidor comprometido para determinar si el atacante us\u00f3 una vulnerabilidad de software espec\u00edfica.</p> <p>Beneficio adicional: Proporciona informaci\u00f3n valiosa para mejorar las defensas y prevenir futuros incidentes.</p> <p>Ejemplo de herramientas de an\u00e1lisis forense: EnCase Forensic, FTK (Forensic Toolkit by AccessData), Autopsy, Volatility, SIFT (SANS Investigative Forensic Toolkit), OSForensics, X-Ways Forensics, Sleuth Kit, Cellebrite, Magnet AXIOM, BlackLight, Oxygen Forensic Detective, Axiom Cyber, Cyber Triage, etc.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#232-integracion-de-tecnologias","title":"2.3.2. Integraci\u00f3n de tecnolog\u00edas","text":"<p>La verdadera fuerza de un SOC reside en c\u00f3mo se integran estas herramientas para trabajar en conjunto. Aqu\u00ed hay algunas consideraciones importantes para la integraci\u00f3n:</p> <ul> <li>Centralizaci\u00f3n: Un SIEM act\u00faa como punto central para recopilar datos de todas las herramientas.</li> <li>Automatizaci\u00f3n: SOAR conecta herramientas como el SIEM, EDR y ticketing para agilizar la respuesta.</li> <li>Interoperabilidad: Las herramientas deben ser compatibles entre s\u00ed para maximizar su efectividad.</li> </ul> <p>Ejemplo de integraci\u00f3n:</p> <ol> <li>En el SIEM se recopilan registros de eventos de sistemas y aplicaciones desde m\u00faltiples fuentes. Los tipo de fuentes son variadas, desde logs de servidores, firewalls, IDS/IPS, EDR/NDR, hasta logs de aplicaciones y endpoints, etc.</li> <li>El SIEM detecta una actividad sospechosa en un servidor y genera una alerta.</li> <li>El SOAR ejecuta un playbook automatizado que a\u00edsla el servidor y genera un ticket.</li> <li>Un analista revisa el ticket, realiza un an\u00e1lisis forense en el servidor y actualiza las reglas del SIEM para detectar actividades similares en el futuro.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#233-retos-en-el-uso-de-tecnologias","title":"2.3.3. Retos en el uso de tecnolog\u00edas","text":"<p>Aunque las tecnolog\u00edas son fundamentales, presentan desaf\u00edos:</p> <ol> <li>Sobrecarga de alertas: Un SIEM mal configurado puede generar demasiadas alertas, causando fatiga en los analistas.</li> </ol> <p>Soluci\u00f3n: Afinar las reglas de detecci\u00f3n y usar inteligencia artificial para priorizar alertas. 2. Costo: Las herramientas avanzadas pueden ser costosas de implementar y mantener.</p> <p>Soluci\u00f3n: Evaluar herramientas de c\u00f3digo abierto o servicios en la nube. 3. Falta de habilidades: Requieren personal capacitado para su configuraci\u00f3n y uso.</p> <p>Soluci\u00f3n: Capacitar continuamente al equipo del SOC.</p> <p>Las tecnolog\u00edas son el esqueleto que soporta las operaciones de un SOC. Desde herramientas de monitoreo como el SIEM hasta sistemas de automatizaci\u00f3n como el SOAR, cada tecnolog\u00eda juega un papel cr\u00edtico en la detecci\u00f3n y respuesta a amenazas. Sin embargo, su efectividad depende de una implementaci\u00f3n adecuada, una integraci\u00f3n robusta y una configuraci\u00f3n que equilibre precisi\u00f3n y eficiencia.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#24-servicios","title":"2.4. Servicios","text":"<p>Los servicios que ofrece un Centro de Operaciones de Seguridad (SOC) son el resultado del trabajo conjunto de sus personas, procesos y tecnolog\u00edas. Cada servicio aborda aspectos espec\u00edficos de la ciberseguridad, desde la identificaci\u00f3n temprana de amenazas hasta la recuperaci\u00f3n posterior a un incidente. Estos servicios permiten a una organizaci\u00f3n no solo reaccionar a los incidentes, sino tambi\u00e9n anticiparse a ellos y aprender de cada evento para fortalecer sus defensas.</p> <p></p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#241-servicios-principales-flujo-detallado-de-funcionamiento","title":"2.4.1. Servicios principales: Flujo detallado de funcionamiento","text":"<p>El funcionamiento del SOC se basa en la interacci\u00f3n entre sus servicios principales, que trabajan en conjunto para proteger la infraestructura de la organizaci\u00f3n. Este flujo describe c\u00f3mo cada servicio opera de manera independiente y c\u00f3mo se conectan para formar un ecosistema cohesivo.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2411-threat-intelligence","title":"2.4.1.1. Threat Intelligence","text":"<p>Threat Intelligence se encarga de recopilar y analizar informaci\u00f3n sobre amenazas externas. Proporciona indicadores de compromiso (IoCs) y t\u00e1cticas, t\u00e9cnicas y procedimientos (TTPs) que gu\u00edan la detecci\u00f3n y respuesta en el SOC.</p> <ul> <li> <p>Funciones principales:</p> </li> <li> <p>Identificar tendencias y amenazas emergentes.</p> </li> <li>Proveer informaci\u00f3n que alimente las reglas del SIEM y las hip\u00f3tesis de Threat Hunting.</li> </ul> <p>Relaci\u00f3n con otros servicios:</p> <ol> <li>Proporciona IoCs y TTPs al servicio de SIEM Intelligence &amp; Alerting para configurar reglas de detecci\u00f3n.</li> <li>Entrega IoCs, TTPs, Reportes y tendencias de ataque al equipo de Threat Hunting para guiar investigaciones proactivas.</li> </ol> <p>Ejemplo: Threat Intelligence detecta un ransomware en aumento y actualiza las reglas del SIEM con las direcciones IP utilizadas por los atacantes.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2412-siem-intelligence-alerting","title":"2.4.1.2. SIEM Intelligence &amp; Alerting","text":"<p>SIEM Intelligence &amp; Alerting utiliza los datos proporcionados por Threat Intelligence y registros internos para detectar patrones sospechosos en tiempo real. Los registros se obtienen a trav\u00e9s de la centralizaci\u00f3n de las auditor\u00edas de los sistemas de la infraestructura tecnol\u00f3gica, y eventos provenientes de diferentes herramientas de seguridad. Para realizar su funci\u00f3n, se apoya en la herramienta SIEM, que dispone de capacidades para la creaci\u00f3n las reglas predefinidas y correlaci\u00f3n de eventos (casos de uso) de m\u00faltiples fuentes que propician la detecci\u00f3n de amenazas y posterior generaci\u00f3n autom\u00e1tica de alertas.</p> <p></p> <ul> <li> <p>Funciones principales:</p> </li> <li> <p>Recopilar y correlacionar eventos de m\u00faltiples fuentes (firewalls, endpoints, servidores).</p> </li> <li>Generar alertas para actividades que coincidan con patrones sospechosos.</li> </ul> <p>Relaci\u00f3n con otros servicios:</p> <ol> <li>Recibe IoCs y TTPs de Threat Intelligence y Ajustes de los casos de uso desde Incident Response, para mejorar las reglas de detecci\u00f3n.</li> <li>Proporciona alertas al servicio de Monitoring &amp; Triage para su evaluaci\u00f3n, y proporciona ajustes de IoCs y TTPs, basados en hallazgos, a Threat Intelligence.</li> </ol> <p>Ejemplo: El SIEM detecta m\u00faltiples intentos de acceso fallidos desde una IP desconocida y genera una alerta.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2413-monitoring-triage","title":"2.4.1.3. Monitoring &amp; Triage","text":"<p>Monitoring &amp; Triage act\u00faa como el primer nivel de an\u00e1lisis, revisando las alertas generadas por el SIEM para determinar si representan incidentes reales o falsos positivos. Este servicio asegura que solo las amenazas verificadas sean escaladas, apoyados en playbooks, que ayudan a priorizar y clasificar los incidentes. Equivale a nivel 1, y suele requerir disponibilidad 24 horas y 7 d\u00edas a la semana. Se basa en herramientas de ticketing para documentar y gestionar los incidentes, y en el SOAR para automatizar tareas.</p> <p></p> <p>Funciones principales:</p> <ul> <li>Validar alertas del SIEM y priorizarlas seg\u00fan su criticidad.</li> <li>Escalar incidentes confirmados al servicio de Incident Response.</li> </ul> <p>Relaci\u00f3n con otros servicios:</p> <ol> <li>Recibe alertas de SIEM Intelligence &amp; Alerting.</li> <li>Escala incidentes confirmados al equipo de Incident Response, y envia ajustes de los casos de usos al SIEM Intelligence &amp; Alerting.</li> </ol> <p>Ejemplo: Monitoring &amp; Triage recibe una alerta de intentos de acceso desde una IP sospechosa, confirma que es un ataque real y lo escala para su contenci\u00f3n al segundo nivel, Incident Response.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2414-incident-response","title":"2.4.1.4. Incident Response","text":"<p>Incident Response gestiona incidentes confirmados para contener y mitigar su impacto. Esto incluye acciones como aislar sistemas comprometidos, bloquear direcciones IP maliciosas y coordinar la recuperaci\u00f3n. Suele denominarse nivel 2 y nivel 3 y utilizan playbooks para la respuesta a incidentes. Se basan en la herramienta de ticketing para documentar y gestionar los incidentes, y en el SOAR para automatizar tareas.</p> <p></p> <p>Funciones principales:</p> <ul> <li>Contener amenazas activas.</li> <li>Erradicar la amenaza y restaurar operaciones normales.</li> </ul> <p>Relaci\u00f3n con otros servicios:</p> <ol> <li>Recibe incidentes confirmados de Monitoring &amp; Triage, nuevos incidentes de seguridad, con sus IoCs y TTPs de Threat Hunting y reportes de Forensics sobre incidentes previos.</li> <li>Proporciona datos iniciales para el an\u00e1lisis de Forensics, y ajustes de casos de usos, como IoCs y TTPs, a SIEM Intelligence &amp; Alerting.</li> </ol> <p>Ejemplo: Incident Response a\u00edsla un servidor comprometido y coordina la eliminaci\u00f3n del malware detectado.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2415-forensics","title":"2.4.1.5. Forensics","text":"<p>Forensics investiga los incidentes para entender c\u00f3mo ocurrieron, su impacto y c\u00f3mo prevenir futuros ataques. Este servicio es esencial para fortalecer las defensas de la organizaci\u00f3n.</p> <p>Funciones principales:</p> <ul> <li>Recolectar, salvaguardar y analizar evidencias digitales.</li> <li>Producir reportes detallados sobre incidentes ocurridos.</li> </ul> <p>Relaci\u00f3n con otros servicios:</p> <ol> <li>Recibe datos de Incident Response para analizar la causa del incidente.</li> <li>Retroalimenta a Incident Response con hallazgos para mejorar la respuesta a incidentes.</li> </ol> <p>Ejemplo: Forensics descubre que el atacante explot\u00f3 una vulnerabilidad en un servidor web y recomienda parches de seguridad.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2416-threat-hunting","title":"2.4.1.6. Threat Hunting","text":"<p>Threat Hunting busca de manera proactiva amenazas avanzadas que no han sido detectadas por las herramientas autom\u00e1ticas del SOC.</p> <p></p> <ul> <li> <p>Funciones principales:</p> </li> <li> <p>Formular hip\u00f3tesis basadas en datos de Threat Intelligence.</p> </li> <li>Investigar proactivamente e identificar actividad sospechosa/amenazas en la red y endpoints.</li> </ul> <p>Relaci\u00f3n con otros servicios:</p> <ol> <li>Utiliza IoCs, TTPs, Reportes y tendencias de ataque provenientes de Threat Intelligence para guiar sus b\u00fasquedas.</li> <li>Proporciona hallazgos sobre nuevos incidentes a Incident Response y reportes y recomendaciones SIEM Intelligence &amp; Alerting para mejorar reglas de detecci\u00f3n.</li> </ol> <p>Ejemplo: Threat Hunting detecta un archivo malicioso que pas\u00f3 inadvertido por el SIEM, confirmando una amenaza activa en un servidor.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#2417-purple-team","title":"2.4.1.7. Purple Team","text":"<p>Purple Team eval\u00faa la efectividad del SOC mediante simulaciones de ataques y pruebas de las defensas existentes. Este servicio conecta las capacidades del Blue Team (defensivo) y el Red Team (ofensivo).</p> <p>Funciones principales:</p> <ul> <li>Simular ataques controlados para probar las defensas del SOC.</li> <li>Identificar \u00e1reas de mejora en los flujos de detecci\u00f3n y respuesta.</li> </ul> <p>Relaci\u00f3n con otros servicios:</p> <ol> <li>Utiliza datos de Forensics y Threat Hunting para dise\u00f1ar escenarios de ataque.</li> <li>Retroalimenta a todos los servicios con mejoras basadas en los resultados de las simulaciones.</li> </ol> <p>Ejemplo: Purple Team simula un ataque de phishing avanzado y detecta que Monitoring &amp; Triage necesita reducir el tiempo de clasificaci\u00f3n de alertas cr\u00edticas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#242-interaccion-entre-servicios","title":"2.4.2. Interacci\u00f3n entre servicios","text":"<p>Como hemos visto, los servicios de un SOC trabajan en conjunto para proteger a la organizaci\u00f3n frente a amenazas cibern\u00e9ticas. Cada servicio cumple un papel \u00fanico, pero su valor real radica en la interacci\u00f3n constante entre ellos para garantizar una protecci\u00f3n integral. Por ejemplo, un Flujo b\u00e1sico de informaci\u00f3n en el SOC:</p> <ol> <li>Threat Intelligence \u2192 SIEM Intelligence &amp; Alerting: Proporciona IoCs y TTPs para configurar reglas de detecci\u00f3n.</li> <li>SIEM Intelligence &amp; Alerting \u2192 Monitoring &amp; Triage: Genera alertas que son revisadas y priorizadas.</li> <li>Monitoring &amp; Triage \u2192 Incident Response: Escala incidentes confirmados para contenci\u00f3n y mitigaci\u00f3n.</li> <li>Incident Response \u2192 Forensics: Proporciona datos iniciales para el an\u00e1lisis post-incidente.</li> <li>Forensics \u2192 Threat Intelligence &amp; SIEM Intelligence &amp; Alerting: Retroalimenta con hallazgos para mejorar defensas.</li> <li>Threat Intelligence \u2192 Threat Hunting: Ofrece hip\u00f3tesis y gu\u00edas de b\u00fasqueda.</li> <li>Purple Team \u2192 Todos los servicios: Eval\u00faa su efectividad y retroalimenta con mejoras continuas.</li> </ol> <p>Este flujo asegura que cada servicio funcione de manera independiente, pero interconectada, maximizando la eficacia del SOC en su misi\u00f3n de proteger la organizaci\u00f3n frente a amenazas cibern\u00e9ticas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#243-retos-en-la-prestacion-de-servicios","title":"2.4.3. Retos en la prestaci\u00f3n de servicios","text":"<ol> <li>Falta de integraci\u00f3n: Si las herramientas y procesos no est\u00e1n alineados, los servicios pueden no ser efectivos.    Soluci\u00f3n: Usar plataformas que centralicen la gesti\u00f3n y faciliten la colaboraci\u00f3n.</li> <li>Sobrecarga de alertas: Un exceso de alertas puede abrumar a los equipos de Monitoring &amp; Triage.    Soluci\u00f3n: Afinar las reglas del SIEM y priorizar alertas cr\u00edticas.</li> <li>Costos: Los servicios avanzados como Threat Hunting y Purple Team pueden requerir inversiones significativas.    Soluci\u00f3n: Comenzar con servicios esenciales e ir a\u00f1adiendo capacidades conforme crece la madurez del SOC.</li> </ol> <p>Los servicios de un SOC son necesarios para gestionar la ciberseguridad de manera proactiva y reactiva. Cada servicio cumple un papel \u00fanico, pero su valor real radica en c\u00f3mo interact\u00faan para formar una defensa cohesiva contra amenazas. Un SOC bien dise\u00f1ado no solo responde a incidentes, sino que tambi\u00e9n aprende y mejora continuamente para anticiparse a los ataques futuros.</p> <p>Un SOC eficaz requiere una integraci\u00f3n armoniosa entre personas capacitadas, procesos definidos, tecnolog\u00edas avanzadas y servicios bien implementados. Estos componentes trabajan juntos para proteger a las organizaciones frente a amenazas cibern\u00e9ticas modernas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#3-diseno-y-estructura-de-un-soc","title":"3. Dise\u00f1o y estructura de un SOC","text":"<p>El dise\u00f1o y la estructura de un Centro de Operaciones de Seguridad (SOC) son factores determinantes para su \u00e9xito. Un SOC bien dise\u00f1ado no solo debe cumplir con las necesidades espec\u00edficas de la organizaci\u00f3n, sino tambi\u00e9n adaptarse a su tama\u00f1o, presupuesto y objetivos estrat\u00e9gicos. En este apartado, profundizaremos en las decisiones clave que afectan la organizaci\u00f3n de un SOC y las fases necesarias para su implementaci\u00f3n.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#31-organizacion-interna-vs-soc-tercerizado","title":"3.1. Organizaci\u00f3n interna vs. SOC tercerizado","text":"<p>Cuando una organizaci\u00f3n decide establecer un SOC, debe considerar si ser\u00e1 una estructura interna o si se contratar\u00e1n los servicios de un SOC gestionado (MSSP, Managed Security Service Provider). Cada opci\u00f3n tiene ventajas y desaf\u00edos que exploraremos a continuaci\u00f3n.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#311-organizacion-interna","title":"3.1.1. Organizaci\u00f3n interna","text":"<p>Un SOC interno es construido, administrado y operado por la propia organizaci\u00f3n.</p> <p>Ventajas:</p> <ol> <li>Control total: La organizaci\u00f3n tiene control directo sobre las operaciones del SOC y los datos que maneja.</li> <li>Personalizaci\u00f3n: El SOC puede ser adaptado espec\u00edficamente a las necesidades y riesgos \u00fanicos de la organizaci\u00f3n.</li> <li>Confidencialidad: Los datos sensibles permanecen dentro de la organizaci\u00f3n.</li> </ol> <p>Ejemplo: Una empresa de tecnolog\u00eda con requisitos estrictos de confidencialidad establece un SOC interno para proteger su propiedad intelectual, datos de clientes y secretos comerciales.</p> <p>Desaf\u00edos:</p> <ol> <li>Costo: Implementar y mantener un SOC interno requiere una inversi\u00f3n significativa en personal, tecnolog\u00eda y capacitaci\u00f3n.</li> <li>Tiempo: Configurar un SOC interno desde cero puede llevar meses o incluso a\u00f1os.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#312-soc-tercerizado-mssp","title":"3.1.2. SOC tercerizado (MSSP)","text":"<p>Un SOC tercerizado es operado por un proveedor externo que ofrece servicios de seguridad gestionados.</p> <p>Ventajas:</p> <ol> <li>Reducci\u00f3n de costos: El MSSP permite a las organizaciones acceder a servicios avanzados sin incurrir en altos costos iniciales.</li> <li>Expertise especializado: Los MSSP cuentan con equipos altamente capacitados y tecnolog\u00edas avanzadas.</li> <li>Rapidez: Los servicios pueden ser implementados r\u00e1pidamente.</li> </ol> <p>Ejemplo: Una peque\u00f1a empresa contrata un MSSP para gestionar la detecci\u00f3n y respuesta a incidentes debido a su limitado presupuesto.</p> <p>Desaf\u00edos:</p> <ol> <li>Menor control: La organizaci\u00f3n depende del proveedor para gestionar incidentes.</li> <li>Riesgos de confidencialidad: Compartir datos sensibles con un tercero puede ser un desaf\u00edo para empresas con requisitos estrictos.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#313-modelos-hibridos","title":"3.1.3. Modelos h\u00edbridos","text":"<p>Algunas organizaciones optan por un enfoque h\u00edbrido, donde ciertas funciones del SOC son internas y otras son tercerizadas.</p> <p>Ejemplo: Una empresa puede mantener un equipo interno para gestionar incidentes cr\u00edticos mientras utiliza un MSSP para monitorear la red 24/7.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#32-relacion-entre-capacidades-servicios-y-procesos","title":"3.2. Relaci\u00f3n entre capacidades, servicios y procesos","text":"<p>El SOC es un ecosistema interdependiente donde las capacidades, servicios y procesos trabajan en conjunto para proteger a la organizaci\u00f3n.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#321-definicion-de-terminos","title":"3.2.1. Definici\u00f3n de t\u00e9rminos","text":"<ol> <li>Capacidades: Habilidades o competencias del SOC, como detecci\u00f3n, respuesta y recuperaci\u00f3n.</li> <li>Servicios: Funciones espec\u00edficas que ofrece el SOC, como Threat Intelligence o Incident Response.</li> <li>Procesos: Pasos definidos que gu\u00edan c\u00f3mo se llevan a cabo las operaciones del SOC.</li> </ol> <p>Un ejemplo en el que se diferencien las distintas partes claramente, ser\u00eda:</p> <ul> <li>Capacidad: Ser capaz de detectar un ataque de phishing.</li> <li>Servicio: Ofrecer un servicio de Threat Intelligence que alerte sobre campa\u00f1as novedosas de pishing, que aunque no hayan sido detectadas por las capacidades del SOC, si han sido detectadas por otros equipos de seguridad.</li> <li>Proceso: Tener un proceso de respuesta a incidentes que incluya la detecci\u00f3n de un ataque de phishing, la contenci\u00f3n del mismo, la recuperaci\u00f3n de los sistemas afectados y el an\u00e1lisis post-incidente.</li> </ul>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#322-sinergia-entre-componentes","title":"3.2.2. Sinergia entre componentes","text":"<ol> <li>Capacidades habilitan servicios: Por ejemplo, la capacidad de detecci\u00f3n es esencial para el servicio de SIEM Intelligence.</li> <li>Procesos garantizan eficiencia: Procesos bien dise\u00f1ados aseguran que los servicios sean prestados de manera efectiva.</li> <li> <p>Ejemplo:</p> </li> <li> <p>Capacidad: Identificar amenazas avanzadas.</p> </li> <li>Servicio: Threat Hunting, que se apoya en informaci\u00f3n de Threat Intelligence.</li> <li>Proceso: El equipo de Threat Hunting sigue un flujo estructurado que comienza con la creaci\u00f3n de una hip\u00f3tesis basada en TTPs y termina con un reporte de hallazgos.</li> </ol>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#323-importancia-de-la-integracion","title":"3.2.3. Importancia de la integraci\u00f3n","text":"<p>Una integraci\u00f3n efectiva entre capacidades, servicios y procesos asegura que los flujos de trabajo sean fluidos y reduzcan los tiempos de respuesta.</p> <p>Ejemplo: Si el servicio de Incident Response no est\u00e1 integrado con el proceso de an\u00e1lisis forense, puede haber retrasos en la recuperaci\u00f3n de sistemas comprometidos.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#33-fases-de-implementacion-negocio-personas-procesos-tecnologias-y-servicios","title":"3.3. Fases de implementaci\u00f3n: Negocio, personas, procesos, tecnolog\u00edas y servicios","text":"<p>La implementaci\u00f3n de un SOC requiere un enfoque estructurado que cubra m\u00faltiples \u00e1reas cr\u00edticas. Estas fases son fundamentales para garantizar que el SOC sea efectivo y sostenible.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#331-negocio","title":"3.3.1. Negocio","text":"<ul> <li>Definici\u00f3n de objetivos: Identificar qu\u00e9 se espera lograr con el SOC.</li> </ul> <p>Ejemplo: Proteger la confidencialidad de los datos de los clientes y cumplir con normativas como GDPR. - Gesti\u00f3n de costes: Determinar el presupuesto y planificar la inversi\u00f3n en tecnolog\u00eda y personal. - Documento de constituci\u00f3n: Formalizar la misi\u00f3n, alcance y estructura del SOC.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#332-personas","title":"3.3.2. Personas","text":"<ul> <li>Selecci\u00f3n de roles: Identificar los roles necesarios, desde analistas hasta gerentes.</li> </ul> <p>Ejemplo: Contratar analistas SOC con experiencia en herramientas SIEM y Threat Intelligence. - Capacitaci\u00f3n inicial: Asegurar que el equipo est\u00e9 entrenado en los procesos y tecnolog\u00edas del SOC.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#333-procesos","title":"3.3.3. Procesos","text":"<ul> <li>Definici\u00f3n de flujos de trabajo: Crear procesos para gestionar incidentes, realizar an\u00e1lisis forenses y actualizar reglas de detecci\u00f3n.</li> </ul> <p>Ejemplo: Dise\u00f1ar un proceso de respuesta a incidentes que incluya fases de detecci\u00f3n, contenci\u00f3n y recuperaci\u00f3n. - Estandarizaci\u00f3n: Implementar marcos como NIST CSF para estructurar las operaciones.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#334-tecnologias","title":"3.3.4. Tecnolog\u00edas","text":"<ul> <li>Selecci\u00f3n de herramientas: Implementar tecnolog\u00edas como SIEM, SOAR, y EDR.</li> </ul> <p>Ejemplo: Configurar un SIEM para recopilar registros de toda la infraestructura tecnol\u00f3gica. - Integraci\u00f3n: Asegurar que las herramientas trabajen en conjunto para maximizar la eficiencia.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#335-servicios","title":"3.3.5. Servicios","text":"<ul> <li>Definici\u00f3n de servicios iniciales: Comenzar con servicios b\u00e1sicos como monitoreo y respuesta a incidentes, y a\u00f1adir otros como Threat Hunting a medida que el SOC madura.</li> <li>Establecimiento de m\u00e9tricas: Medir la efectividad de los servicios para justificar inversiones futuras.</li> </ul> <p>El dise\u00f1o y estructura de un SOC deben adaptarse a las necesidades espec\u00edficas de cada organizaci\u00f3n. Desde decidir entre un SOC interno o tercerizado, hasta integrar capacidades, servicios y procesos, cada decisi\u00f3n afecta directamente la efectividad del SOC. Una implementaci\u00f3n bien planificada, que abarque las \u00e1reas de negocio, personas, procesos, tecnolog\u00edas y servicios, garantiza que el SOC sea una pieza clave en la estrategia de ciberseguridad de la organizaci\u00f3n.</p> <p>Un SOC eficaz requiere una integraci\u00f3n armoniosa entre personas capacitadas, procesos definidos, tecnolog\u00edas avanzadas y servicios bien implementados. Estos componentes trabajan juntos para proteger a las organizaciones frente a amenazas cibern\u00e9ticas modernas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#anexo-i","title":"Anexo I","text":"<p>\u00bfQu\u00e9 es un Indicador de compromiso (IoC)?</p> <p>Los indicadores de compromiso (IoC, por sus siglas en ingl\u00e9s) son piezas de informaci\u00f3n que pueden ser utilizadas para detectar actividades maliciosas o sospechosas en una red o sistema. Estos indicadores pueden abarcar una amplia gama de datos, que van desde URL espec\u00edficas, direcciones IP, hash de archivos, entre otros, y pueden ser utilizados para identificar intrusiones o ataques de ciberseguridad en tiempo real o despu\u00e9s de que hayan ocurrido.</p> <p>Ejemplos de Indicadores de Compromiso (IoC)</p> <p>A continuaci\u00f3n se indican algunos ejemplos de indicadores de compromiso:</p> <ul> <li>Direcciones IP sospechosas: Si se encuentran registros de conexi\u00f3n a una direcci\u00f3n IP concreta que ha sido utilizada por software malicioso para establecer un Command and Control, esto es un indicador de compromiso.</li> <li>Hashes de archivos maliciosos: Los hashes de archivos pueden utilizarse para identificar software malicioso o archivos modificados o comprometidos. Por ejemplo, si un hash de archivo coincide con el hash de un software malicioso, esto es un indicador de compromiso.</li> <li>URLs y dominios maliciosos: Las URLs y dominios son utilizados a menudo por los atacantes para alojar malware o llevar a cabo ataques de phishing. Los IoCs pueden incluir estas URL y dominios maliciosos para ayudar a identificar y bloquear estas amenazas.</li> <li>Patr\u00f3n de eventos/logs: Un patr\u00f3n de eventos inusual en los registros de un sistema puede indicar una intrusi\u00f3n. Por ejemplo, si se se conoce que un software malicioso concreto realiza ataques de fuerza bruta sobre el login de los usuarios y se identifica en la infraestructura que un usuario intenta iniciar sesi\u00f3n en una cuenta varias veces en un corto periodo de tiempo, esto puede ser un indicador de que estamos comprometidos por el programa malicioso.</li> </ul> <p>\u00bfQu\u00e9 es MISP?</p> <p>MISP (Malware Information Sharing Platform) es una plataforma abierta que se utiliza para el intercambio, almacenamiento y correlaci\u00f3n de indicadores de compromiso. MISP proporciona una estructura para que las organizaciones compartan informaci\u00f3n de amenazas de manera segura y eficiente.</p> <p>MISP permite a los equipos de seguridad recopilar, almacenar y compartir IoCs con otras organizaciones. Esto facilita una respuesta m\u00e1s r\u00e1pida y eficiente a las amenazas, ya que las organizaciones pueden beneficiarse de la informaci\u00f3n proporcionada por otras entidades que han experimentado las mismas o similares amenazas.</p> <p>La plataforma MISP tambi\u00e9n proporciona una serie de caracter\u00edsticas adicionales para apoyar la gesti\u00f3n de amenazas, incluyendo soporte para la taxonom\u00eda de amenazas, la capacidad de adjuntar contexto y atribuci\u00f3n a los indicadores, y herramientas para la visualizaci\u00f3n de datos de amenazas.</p>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.1.-SOC-ServiciosYHerramientas/#referencias","title":"Referencias","text":"<ul> <li>Im\u00e1genes del curso de ciberseguirdad defensiva - Santiago Hern\u00e1ndez Ramos </li> </ul>","tags":["incidentes","SOC","IDS","IPS","SIEM"]},{"location":"section2/u02/teoria/IS-U2.2.2.-CasosUso/","title":"2.2.2.-SIEM & Casos de uso","text":""},{"location":"section2/u02/teoria/IS-U2.2.2.-CasosUso/#222-casos-de-uso-en-un-soc","title":"2.2.2 Casos de Uso en un SOC","text":"<p>En un mundo digital cada vez m\u00e1s complejo y peligroso, la seguridad cibern\u00e9tica se ha convertido en un pilar fundamental para la supervivencia de las organizaciones. Los Centros de Operaciones de Seguridad (SOC) modernos se erigen como la \u00faltima l\u00ednea de defensa contra las amenazas cibern\u00e9ticas en constante evoluci\u00f3n. Pero,</p> <p>\u00bfC\u00f3mo pueden garantizar la detecci\u00f3n y respuesta efectivas en un panorama en constante cambio?</p>"},{"location":"section2/u02/teoria/IS-U2.2.2.-CasosUso/#1-que-es-caso-de-uso","title":"1. \u00bfQu\u00e9 es caso de uso?","text":"<p>Un caso de uso en el contexto de un servicio de Centro de Operaciones de Seguridad (SOC) moderno se refiere a un escenario espec\u00edfico en el que se describe c\u00f3mo se utilizar\u00e1n las capacidades del SOC para detectar, analizar y responder a amenazas de seguridad cibern\u00e9tica.    </p> <p>Los casos de uso son gu\u00edas detalladas que describen: - Las acciones. - Los eventos.  - Las fuentes de datos.  - Las respuestas que se esperan del personal del SOC para abordar situaciones espec\u00edficas de seguridad.</p> <p>Son esenciales para la operaci\u00f3n eficiente y efectiva del SOC, ya que ayudan a los analistas a comprender c\u00f3mo deben manejar diversas amenazas y escenarios.</p>"},{"location":"section2/u02/teoria/IS-U2.2.2.-CasosUso/#2-como-se-crean-los-casos-de-uso","title":"2. \u00bfC\u00f3mo se crean los casos de uso?","text":"<ul> <li> <p>Identificaci\u00f3n de Amenazas Relevantes: El primer paso es identificar las amenazas cibern\u00e9ticas que son relevantes para la organizaci\u00f3n. Estas amenazas pueden variar seg\u00fan la industria, el tama\u00f1o de la empresa y las tendencias de seguridad actuales.    </p> </li> <li> <p>Definici\u00f3n del Escenario de Amenaza: Para cada amenaza identificada, se debe definir un escenario detallado que describa c\u00f3mo se llevar\u00eda a cabo el ataque. Esto incluye los pasos que seguir\u00eda un atacante, las t\u00e9cnicas que podr\u00edan utilizar y las posibles se\u00f1ales de alerta.    </p> </li> <li> <p>Identificaci\u00f3n de Fuentes de Datos: Una vez que se comprende el escenario de amenaza, se deben identificar las fuentes de registros/logs que ser\u00edan relevantes para detectar y analizar dicha amenaza. Estas fuentes pueden incluir registros de sistemas, registros de redes, registros de aplicaciones, registros de autenticaci\u00f3n, entre otros.    </p> </li> <li> <p>Definici\u00f3n de Indicadores de Compromiso (IOC): Se definen los indicadores espec\u00edficos que podr\u00edan indicar la presencia de la amenaza. Estos indicadores pueden incluir direcciones IP, URLs maliciosas, hashes de archivos sospechosos, patrones de tr\u00e1fico an\u00f3malos, entre otros.    </p> </li> <li> <p>Creaci\u00f3n de Reglas y Alertas: Con los indicadores y las fuentes de datos en mente, se crean reglas de detecci\u00f3n que permitir\u00e1n al Sistema de Informaci\u00f3n y Eventos de Seguridad (SIEM) alertar sobre actividades sospechosas. Estas reglas pueden ser basadas en firmas, patrones de comportamiento o correlaci\u00f3n de eventos.    </p> </li> <li> <p>Definici\u00f3n de Procedimientos de Respuesta: Se establecen los pasos y procedimientos que deben seguir los analistas del SOC en caso de que se active una alerta. Esto incluye c\u00f3mo se investigar\u00e1 la alerta, qu\u00e9 acciones se tomar\u00e1n para contener la amenaza y c\u00f3mo se mitigar\u00e1 el impacto.    </p> </li> <li> <p>Validaci\u00f3n y Ajuste: Los casos de uso reci\u00e9n creados deben ser validados a trav\u00e9s de pruebas y simulaciones. Si es necesario, se ajustar\u00e1n las reglas, los indicadores y los procedimientos en funci\u00f3n de los resultados de las pruebas.     </p> </li> <li> <p>Documentaci\u00f3n y Capacitaci\u00f3n: Una vez validados, los casos de uso se documentan detalladamente junto con los pasos a seguir en cada etapa. El personal del SOC debe recibir capacitaci\u00f3n sobre c\u00f3mo aplicar los casos de uso en situaciones reales.    </p> </li> <li> <p>Monitorizaci\u00f3n Continua y Mejora: Los casos de uso no son est\u00e1ticos. Deben ser revisados y actualizados regularmente para mantenerse alineados con las amenazas emergentes y los cambios en la infraestructura de TI de la organizaci\u00f3n.     </p> </li> </ul> <p>Los casos de uso son herramientas esenciales para la detecci\u00f3n y respuesta efectivas en un SOC moderno. Ayudan a los analistas a anticipar, prepararse y responder a amenazas de seguridad de manera coherente y organizada.</p>"},{"location":"section2/u02/teoria/IS-U2.2.2.-CasosUso/#3-10-casos-de-uso-que-todo-servicio-soc-moderno-deberia-tener","title":"3. 10 casos de uso que todo servicio SOC moderno deber\u00eda tener \ud83d\udee1\ufe0f","text":"<p>Les comparto 10 casos de uso que son fundamentales para un servicio de Centro de Operaciones de Seguridad (SOC) moderno en t\u00e9rminos de detecci\u00f3n y respuesta ante amenazas:</p> <ol> <li> <p>Detecci\u00f3n de Malware Avanzado: Identificaci\u00f3n de comportamientos y patrones de actividad sospechosa en endpoints y sistemas para detectar malware avanzado y ataques de d\u00eda cero. Fuentes de registros/logs: Registros de endpoints, registros de sistemas, registros de cortafuegos, registros de servidores web, registros de aplicaciones.    </p> </li> <li> <p>Detecci\u00f3n de Actividad de Cuenta Comprometida: Monitoreo de comportamientos an\u00f3malos en las cuentas de usuario para identificar posibles compromisos de cuentas y actividades de intrusos. Fuentes de registros/logs: Registros de autenticaci\u00f3n (inicios de sesi\u00f3n), registros de sistemas, registros de bases de datos, registros de aplicaciones, registros de directorios activos.    </p> </li> <li> <p>Detecci\u00f3n de Movimiento Lateral: Identificaci\u00f3n de movimientos inusuales y no autorizados dentro de la red, lo que podr\u00eda indicar intentos de escalada de privilegios o propagaci\u00f3n de amenazas. Fuentes de registros/logs: Registros de tr\u00e1fico de red, registros de firewalls, registros de sistemas, registros de autenticaci\u00f3n, registros de acceso a archivos.    </p> </li> <li> <p>Detecci\u00f3n de Phishing y Ingenier\u00eda Social: Vigilancia de patrones de comunicaci\u00f3n y URLs sospechosas para detectar intentos de phishing, suplantaci\u00f3n de identidad y ataques de ingenier\u00eda social. Fuentes de registros/logs: Registros de correo electr\u00f3nico (servidor de correo), registros de proxy web, registros de URLs visitadas, registros de autenticaci\u00f3n.    </p> </li> <li> <p>Detecci\u00f3n de Exfiltraci\u00f3n de Datos: Monitoreo de tr\u00e1fico de red y actividad de endpoints para detectar intentos de exfiltraci\u00f3n de datos confidenciales fuera de la organizaci\u00f3n. Fuentes de registros/logs: Registros de tr\u00e1fico de red, registros de servidores de archivos, registros de bases de datos, registros de sistemas.    </p> </li> <li> <p>Detecci\u00f3n de Ataques de Denegaci\u00f3n de Servicio (DDoS): Identificaci\u00f3n de patrones de tr\u00e1fico inusuales que podr\u00edan indicar ataques DDoS dirigidos a servicios y aplicaciones. Fuentes de registros/logs: Registros de tr\u00e1fico de red, registros de cortafuegos, registros de sistemas, registros de balanceadores de carga.     </p> </li> <li> <p>Detecci\u00f3n de Comportamiento An\u00f3malo del Usuario: Monitorizaci\u00f3n de las actividades de los usuarios para detectar comportamientos an\u00f3malos, como accesos fuera de horario o a recursos no autorizados. Fuentes de registros/logs: Registros de autenticaci\u00f3n (inicios de sesi\u00f3n), registros de sistemas, registros de aplicaciones, registros de directorios activos.    </p> </li> <li> <p>Detecci\u00f3n de Vulnerabilidades y Exploits: Identificaci\u00f3n de intentos de explotaci\u00f3n de vulnerabilidades conocidas en sistemas y aplicaciones. Fuentes de registros/logs: Registros de sistemas, registros de aplicaciones, escaneos de vulnerabilidad, registros de bases de datos.    </p> </li> <li> <p>Detecci\u00f3n de Ataques de Fuerza Bruta: Vigilancia de patrones de intentos repetitivos de inicio de sesi\u00f3n y acceso a recursos para identificar ataques de fuerza bruta. Fuentes de registros/logs: Registros de autenticaci\u00f3n (intentos fallidos de inicio de sesi\u00f3n), registros de sistemas, registros de aplicaciones.    </p> </li> <li> <p>Detecci\u00f3n de Ataques Internos y Fugas de Informaci\u00f3n: Seguimiento de actividades internas para detectar posibles acciones maliciosas de empleados y fugas de informaci\u00f3n sensible. Fuentes de registros/logs: Registros de acceso a archivos, registros de bases de datos, registros de sistemas, registros de correo electr\u00f3nico.</p> </li> </ol> <p>Cabe destacar que estos casos de uso son de referencia como l\u00ednea base y que las necesidades de detecci\u00f3n y respuesta pueden variar seg\u00fan la industria, el tama\u00f1o de la organizaci\u00f3n y las amenazas emergentes. Es esencial adaptar estos casos de uso a las circunstancias y requisitos espec\u00edficos de cada SOC.</p> <p> MaGMa Use Case Framework (UCF)</p> <p>El marco de casos de uso de MaGMa (UCF) es un marco y una herramienta creada por la comunidad financiera holandesa para la gesti\u00f3n y administraci\u00f3n de casos de uso que ayuda a las organizaciones a hacer operativa su estrategia de monitoreo de ciberseguridad.</p> <p>Es importante se\u00f1alar que la efectividad de la detecci\u00f3n y respuesta en un SOC se basa en la capacidad de recopilar, correlacionar y analizar adecuadamente estos registros/logs para identificar patrones y comportamientos an\u00f3malos que indiquen posibles amenazas. La integraci\u00f3n de tecnolog\u00edas de seguridad, como Sistemas de Informaci\u00f3n y Eventos de Seguridad (SIEM), es crucial para este prop\u00f3sito.</p>"},{"location":"section2/u02/teoria/IS-U2.2.2.-CasosUso/#4-conclusiones","title":"4. Conclusiones","text":"<p>Contar con casos de uso precisos de detecci\u00f3n y respuesta es fundamental para cualquier organizaci\u00f3n madura en ciberseguridad debido a varios motivos clave:</p> <ul> <li> <p>Visibilidad Integral: Los casos de uso bien definidos proporcionan una visi\u00f3n clara y estructurada de las amenazas y riesgos de ciberseguridad que pueden afectar a la organizaci\u00f3n. Esto permite identificar las \u00e1reas cr\u00edticas en las que se debe enfocar la detecci\u00f3n y respuesta.   </p> </li> <li> <p>Detecci\u00f3n Temprana de Amenazas: Los casos de uso permiten a los equipos de seguridad anticiparse a las amenazas al establecer indicadores de compromiso y reglas de detecci\u00f3n. Esto ayuda a identificar actividades maliciosas en etapas tempranas, lo que a su vez reduce el tiempo de exposici\u00f3n a las amenazas.    </p> </li> <li> <p>Estandarizaci\u00f3n y Coherencia: Los casos de uso proporcionan un enfoque estandarizado para la detecci\u00f3n y respuesta ante amenazas. Esto asegura que los analistas de seguridad sigan procedimientos consistentes y evita respuestas inadecuadas o improvisadas.   </p> </li> <li> <p>Eficiencia en la Respuesta: Al contar con procedimientos detallados en los casos de uso, los equipos de seguridad pueden responder de manera m\u00e1s eficiente y efectiva cuando ocurren incidentes. Esto minimiza el impacto y acelera la recuperaci\u00f3n.    </p> </li> <li> <p>Reducci\u00f3n de Falsos Positivos: Al basar la detecci\u00f3n en casos de uso s\u00f3lidos, se reduce la probabilidad de generar alertas falsas, lo que permite a los analistas concentrarse en amenazas reales en lugar de perder tiempo en investigaciones innecesarias.    </p> </li> <li> <p>Gesti\u00f3n de Riesgos Mejorada: Los casos de uso ayudan a priorizar los riesgos y amenazas seg\u00fan su impacto potencial y probabilidad. Esto permite a la organizaci\u00f3n concentrar recursos en \u00e1reas donde el riesgo es m\u00e1s alto.    </p> </li> <li> <p>Adaptaci\u00f3n a Amenazas Emergentes: Al revisar y actualizar regularmente los casos de uso, la organizaci\u00f3n puede mantenerse al tanto de las nuevas tendencias y t\u00e1cticas utilizadas por los ciberdelincuentes, asegurando que est\u00e9n preparados para enfrentar amenazas emergentes.    </p> </li> <li> <p>Cumplimiento y Reporte: Los casos de uso bien definidos tambi\u00e9n pueden contribuir al cumplimiento de regulaciones y est\u00e1ndares de seguridad, al proporcionar un enfoque estructurado para la gesti\u00f3n de amenazas.    </p> </li> </ul> <p>Contar con casos de uso precisos de detecci\u00f3n y respuesta es esencial para establecer un enfoque organizado y efectivo para la ciberseguridad y ayudan a las organizaciones a tener una comprensi\u00f3n profunda de sus riesgos y amenazas, permiti\u00e9ndoles tomar medidas proactivas y mitigar eficazmente los incidentes de seguridad.</p>"},{"location":"section2/u02/teoria/IS-U2.2.2.-CasosUso/#referencias","title":"Referencias","text":"<ul> <li>Alonso Ram\u00edrez</li> <li>10 casos de uso para un SOC Moderno</li> <li>SIEM Less</li> <li>Info para implementar casos de uso en un SOC I</li> <li>Info para implementar casos de uso en un SOC II</li> <li>Casos de uso en Splunk</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/","title":"2.2.3.-Implantaci\u00f3n de un SIEM","text":""},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#223-las-mejores-practicas-para-implementar-una-estrategia-siem","title":"2.2.3 Las mejores pr\u00e1cticas para implementar una estrategia SIEM","text":"<p>Al comenzar a implementar un SIEM, es importante plantearnos, qu\u00e9 es lo que deseamos que el SIEM logre para nuestro negocio en cuanto a ciberseguridad.</p> <p></p> <p>La gesti\u00f3n de eventos de seguridad mediante SIEMs nos permite obtener an\u00e1lisis en tiempo real sobre las amenazas y las alertas de seguridad en nuestro negocio. Controla el almacenamiento, la manipulaci\u00f3n, el an\u00e1lisis y la generaci\u00f3n de informes de diferentes datos de seguridad, nos permitir\u00e1 correlacionar diferentes eventos y alertas, llevando as\u00ed la seguridad de nuestra organizaci\u00f3n a otro nivel.</p>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#1-siem-y-componentes","title":"1. SIEM y componentes.","text":"<p>El SIEM juega un papel determinante en el cumplimiento normativo de nuestra entidad y por ello, debe ser una de las piezas claves en nuestra estrategia corporativa. Una soluci\u00f3n de gesti\u00f3n de eventos e informaci\u00f3n de seguridad bien implementada nos permitir\u00e1 ir un paso por delante de los ciberataques al proporcionar una vista centralizada de los eventos e informaci\u00f3n relacionados con la ciberseguridad.</p> <p>Independientemente del fabricante que elijamos, metiendo en el mismo saco, todos los productos opensource, los SIEMs, se caracterizan por contar con una serie de componente bien diferenciados. Algunos aunar\u00e1n ambos en un solo componente, pero en el fondo todos disponen de al menos estos:</p> <p>El SIEM tiene varios componentes clave o funciones importantes que deben estar presentes en una implementaci\u00f3n exitosa de SIEM :</p> <ol> <li>Agregaci\u00f3n de datos: Que incluye gesti\u00f3n de registros y eventos. El SIEM recopila datos y registros de una variedad de fuentes para garantizar que no se pierda ning\u00fan evento de seguridad importante. Lo que com\u00fanmente llamamos el colector, recolector o similar ...</li> <li>Correlaci\u00f3n: Componente que busca tendencias y atributos comunes que vinculan diferentes eventos para que se pueda derivar informaci\u00f3n significativa y \u00fatil. La parte de las tendencias, cada vez m\u00e1s de moda en la tecnolog\u00eda SIEM, y atributos, aquellos que nosotros definamos en nuestros casos de uso.</li> <li>Notificaci\u00f3n: Implica que el an\u00e1lisis autom\u00e1tico de eventos relacionados, crea alertas para notificar a los administradores de TI cualquier problema potencial. Esta, puede darse por diferentes medios, pero lo com\u00fan, es la notificaci\u00f3n v\u00eda email, pero en base a la criticidad, podr\u00edamos llegar a implementar incluso llamadas autom\u00e1ticas.</li> <li>Paneles: Los SIEM se caracterizan por ser un punto centralizado de tratamiento de eventos de seguridad, por ello, suelen incluir herramientas que pueden procesar datos en bruto en algo que sea m\u00e1s f\u00e1cil de entender, como cuadros, gr\u00e1ficos y barras.</li> <li>Cumplimiento: Una de las caracter\u00edsticas a las que m\u00e1s nos ayuda disponer de un SIEM, es al cumplimiento normativo. Involucra diferentes herramientas que recopilar\u00edan autom\u00e1ticamente datos relacionados con el cumplimiento, as\u00ed c\u00f3mo la creaci\u00f3n de informes que demuestren el cumplimiento de las regulaciones por parte de la empresa.</li> <li>Retenci\u00f3n: Aborda c\u00f3mo se almacenan los datos y eventos a largo plazo, as\u00ed como qu\u00e9 hacer con los datos hist\u00f3ricos. Puede ser un componente propio del SIEM o derivar la retenci\u00f3n a almacenamiento externo, pero en cualquier caso, las pol\u00edticas de retenci\u00f3n , rotado y tratamiento, ser\u00e1n definidas en el propio sistema.</li> <li>Forense: Caracter\u00edstica directamente relacionada directamente con la retenci\u00f3n, que nos permite acceder a los eventos y registrar datos que residen en diferentes activos, de diferentes per\u00edodos de tiempo y recopilarlos todos juntos, generalmente mediante el uso de un conjunto espec\u00edfico de criterios.</li> </ol>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#2-estrategia-para-implementar-un-siem","title":"2. Estrategia para implementar un SIEM","text":"<p>La implementaci\u00f3n de un SIEM es un proceso complejo que requiere una planificaci\u00f3n cuidadosa y una ejecuci\u00f3n precisa. A continuaci\u00f3n, se describen las fases clave de la implementaci\u00f3n de un SIEM:</p>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#21-fase-de-descubrimiento-y-planificacion","title":"2.1. Fase de descubrimiento y planificaci\u00f3n","text":"<p>Al igual que con cualquier proceso empresarial y de TI, la implementaci\u00f3n de sistemas SIEM comienza con una planificaci\u00f3n y revisi\u00f3n exhaustivas.</p> <p>Al comenzar a implementar un SIEM para nuestra organizaci\u00f3n, es importante revisar primero nuestra posici\u00f3n y plantearnos, qu\u00e9 es lo que deseamos que  el SIEM logre para nuestro negocio: simplemente establecer el/los caso/s de negocios, en los que comenzaremos elaborando una lista de metas y objetivos que tendremos que clasificar seg\u00fan la importancia para nuestra organizaci\u00f3n, poniendo foco en comprender, qu\u00e9 tareas y procesos son fundamentales para respaldar la implementaci\u00f3n, priorizando los mismos en consecuencia.</p> <p>En este punto, es imprescindible revisar las pol\u00edticas de seguridad, en las que debemos tener muy claro, cu\u00e1les de estas pol\u00edticas debemos priorizar:</p> <ul> <li>Qu\u00e9 pol\u00edticas son importantes para nuestro negocio</li> <li>Qu\u00e9 pol\u00edticas son importantes para el cumplimiento normativo</li> <li>Cu\u00e1les se consideran mejores pr\u00e1cticas.</li> </ul> <p>Debemos tener una visi\u00f3n clara de los controles actuales usados para auditar estas pol\u00edticas de seguridad, y cu\u00e1les nos ayudar\u00edan a garantizar el cumplimiento. SANS.org describi\u00f3 hace unos a\u00f1os, 20 controles cr\u00edticos en esta gu\u00eda, que actualmente siguen siendo totalmente v\u00e1lidos:</p> <ol> <li>Inventario de Autorizados y no autorizados en dispositivos: El SIEM debe utilizarse como base de datos de inventario de informaci\u00f3n sobre autorizaciones en activos. Los SIEM pueden usar el conocimiento de la informaci\u00f3n de los activos (ubicaci\u00f3n, regulaciones, criticidad de los datos, etc.) para detectar y priorizar amenazas.</li> <li>Inventario de Autorizados y no autorizados en aplicaciones: Al igual que en el control anterior, el SIEM debe usarse como base de datos de inventario de autorizados en aplicaciones, para la correlaci\u00f3n con la red y la actividad de las mismas.</li> <li>Configuraciones seguras: Las vulnerabilidades conocidas siguen siendo una v\u00eda principal para exploits exitosos. Si una herramienta automatizada de escaneo de dispositivos descubre un sistema de red mal configurado durante un escaneo de Enumeraci\u00f3n de configuraci\u00f3n com\u00fan (CCE), ese error de configuraci\u00f3n debe informarse o reflejarse en el SIEM, poniendo un mayor foco en dicho activo. Esto, nos ayudar\u00e1 a solucionar incidentes y a mejorar la postura de seguridad general.</li> <li>Configuraciones seguras para dispositivos de red: Al igual que con el control 3, cualquier error de configuraci\u00f3n en los dispositivos de red tambi\u00e9n debe reflejarse en el SIEM.</li> <li>Defensa de fronteras: Las violaciones de las reglas de red, tambi\u00e9n deben informarse a una fuente central (un SIEM) para su correlaci\u00f3n con los datos de inventario  de autorizados anteriormente indicada, con el fin de controlar nuestros accesos.</li> <li>An\u00e1lisis de registros de auditor\u00eda: Es b\u00e1sicamente un control sobre los SIEM, que son un medio l\u00edder para recopilar y centralizar datos de registro cr\u00edticos. Los SIEM son el motor de an\u00e1lisis central que puede analizar los eventos de registro a medida que ocurren.</li> <li>Seguridad del software de aplicaci\u00f3n: Al igual que los resultados del an\u00e1lisis de CCE, las vulnerabilidades que se descubren en las aplicaciones de software tambi\u00e9n se deben trasladar a los SIEM, con ello, podremos correlacionar la informaci\u00f3n con los datos de la red, capturados a trav\u00e9s de registros, para determinar si las vulnerabilidades se est\u00e1n explotando en tiempo real.</li> <li>Uso controlado de privilegios administrativos: Cuando no se cumplen los principios de este control, el SIEM puede correlacionar los registros de acceso para detectar la infracci\u00f3n y generar una alerta.</li> <li>Acceso controlado seg\u00fan la necesidad de saber: El SIEM puede correlacionar la actividad del usuario con los derechos y los roles del usuario para detectar violaciones de m\u00ednimo privilegio en aplicaciones.</li> <li>Evaluaci\u00f3n y correcci\u00f3n continua de vulnerabilidades: El SIEM puede correlacionar el contexto de la vulnerabilidad con la actividad real del sistema para determinar si se est\u00e1n explotando las vulnerabilidades.</li> <li>Seguimiento y control de cuentas: La actividad anormal de la cuenta solo se puede detectar cuando se compara con una l\u00ednea de base de buena actividad conocida. El SIEM debe registrar la l\u00ednea de base para cumplir con este control; y, a medida que se registren instant\u00e1neas o l\u00edneas de base futuras, se pueden comparar con la l\u00ednea de base aprobada en el SIEM.</li> <li>Defensa contra Malware: El malware que se descubra debe registrarse de acuerdo con este control. Las herramientas anti-malware centralizadas deben informar sus hallazgos al SIEM, quien correlacionar\u00e1 con los datos del sistema y las vulnerabilidades para determinar qu\u00e9 sistemas presentan un mayor riesgo debido al malware descubierto en ese sistema.</li> <li>Limitaci\u00f3n y control de puertos, protocolos y servicios de red: Los SIEM pueden monitorear los datos de registro para detectar el tr\u00e1fico a trav\u00e9s de puertos, protocolos y servicios restringidos. Las organizaciones pueden usar estos controles para determinar qu\u00e9 puertos y servicios son \u00fatiles para las empresas, cu\u00e1les no, y qu\u00e9 tipos de tr\u00e1fico y puertos limitar.</li> <li>Control de dispositivos inal\u00e1mbricos: Las configuraciones err\u00f3neas del dispositivo y las intrusiones inal\u00e1mbricas deben informarse a una base de datos central para fines de manejo de incidentes. Un SIEM es un candidato perfecto para consolidar esta informaci\u00f3n y utilizarla para la correlaci\u00f3n o detecci\u00f3n de amenazas a la infraestructura inal\u00e1mbrica.</li> <li>Data Loss Prevention (DLP): Al igual que con el control 5, las violaciones de las reglas de p\u00e9rdida de datos, tambi\u00e9n deben informarse a una fuente central, como un SIEM, que puede correlacionar los eventos de p\u00e9rdida de datos con la informaci\u00f3n de inventario o activos, as\u00ed como con otras actividades del sistema y del usuario para detectar violaciones complejas de datos sensibles.</li> </ol> <p>La fase de descubrimiento generalmente implica la implementaci\u00f3n del SIEM en un subconjunto peque\u00f1o pero representativo de la tecnolog\u00eda y la pol\u00edtica existentes de la organizaci\u00f3n, lo que nos permite recopilar datos cr\u00edticos que pueden informar cambios y mejoras antes de una implementaci\u00f3n completa. Un objetivo principal es identificar las debilidades y lagunas en la ejecuci\u00f3n de los controles y la implementaci\u00f3n de planes para remediarlos. Idealmente, deber\u00edamos poder cubrir cualquier brecha antes de que estos elementos y controles de seguridad se incorporen en su implementaci\u00f3n de SIEM. De lo contrario, no agregar\u00e1n valor a nuestros procesos de monitorizaci\u00f3n de ciberseguridad.</p>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#22-fase-piloto","title":"2.2. Fase piloto","text":"<p>Comenzando con la fase de implementaci\u00f3n, debe tener dos objetivos en mente:</p> <ol> <li>La demostraci\u00f3n de que un sistema SIEM genera un retorno de la inversi\u00f3n</li> <li>Que debemos disponer de un modelo funcional y un runbook.</li> </ol> <p>Durante la etapa de descubrimiento, debemos ejecutar el SIEM en un peque\u00f1o subconjunto de tecnolog\u00edas que sean representativas de todos los dispositivos y pol\u00edticas de nuestra organizaci\u00f3n. Cuando lleguemos a la etapa piloto, podremos aplicar las lecciones aprendidas de los datos recopilados durante el descubrimiento e implementar cualquier mejora que hayamos realizado en un subconjunto m\u00e1s grande de pol\u00edticas y dispositivos.</p> <p>En la fase piloto, todas las suposiciones que hemos creado durante la fase de descubrimiento debemos probarlas minuciosamente, mientras nos ocupamos de un n\u00famero creciente de dispositivos cubiertos. Una vez logrados los resultados de de nuestras pruebas de una forma satisfactoria, debemos tener todos los datos y la informaci\u00f3n que necesitamos para pasar a la fase de implementaci\u00f3n controlada.</p>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#23-fase-de-implementacion","title":"2.3. Fase de implementaci\u00f3n","text":"<p>La implementaci\u00f3n de SIEM no necesita realizarse en una fase r\u00e1pida. Primero podemos desarrollar la capacidad de manera gradual y constante a medida que pasamos por la fase de implementaci\u00f3n.</p> <p>La fase de implementaci\u00f3n es cuando desarrollamos un flujo de trabajo de implementaci\u00f3n que nos permita desarrollar la capacidad para la implementaci\u00f3n completa, adem\u00e1s de servir como etapa de prueba en un entorno de producci\u00f3n real. Durante esta fase, todos los procesos, procedimientos y operaciones deben describirse claramente en el runbook.</p>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#23-fase-de-mejora-continua","title":"2.3. Fase de mejora continua","text":"<p>La implementaci\u00f3n exitosas de un SIEM, no es algo \u00fanico y ligado a la propia implementaci\u00f3n, si no que debe estar en continuo desarrollo. Los actores maliciosos, nunca dejan de desarrollar m\u00e9todos de ataque m\u00e1s sofisticados, por lo que debemos seguir evolucionando para estar un paso por delante de nuestros posibles enemigos.</p> <p>Despu\u00e9s de la fase de desarrollo, y a medida que continuemos implementando nuestro sistema SIEM, obtendremos m\u00e1s datos sobre c\u00f3mo funciona todo en producci\u00f3n. Debemos utilizar estos datos e informaci\u00f3n para ajustar nuestra implementaci\u00f3n y desarrollar las pol\u00edticas y los procesos de seguridad de nuestra organizaci\u00f3n. Esto significa que nuestras implementaciones de SIEM est\u00e1n en constante cambio, y este proceso nunca deber\u00eda detenerse.</p>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#3-las-mejores-practicas-para-la-implementacion-de-siem","title":"3. Las mejores pr\u00e1cticas para la implementaci\u00f3n de SIEM","text":"<p>La mejor forma de implementar un SIEM es gradualmente. Un enfoque paso a paso nos ayudar\u00e1 a aprender m\u00e1s sobre nuestros sistemas actuales e implementar nuestra estrategia pieza por pieza, lo que nos permitir\u00e1 ajustarla a lo largo del camino.</p> <p>De una forma sencilla, desgajaremos, cu\u00e1les son las mejores pr\u00e1cticas para implementar un SIEM:</p> <ol> <li>Tenga una visi\u00f3n clara de los casos de uso: Antes de comenzar a revisar y evaluar las soluciones, debes conocer los casos de usos que implementar\u00edas, unidos y ligados a tu negocio y su estrategia de ciberseguridad</li> <li>Prep\u00e1rate para lo peor. Piense siempre en los peores escenarios posibles para que puedas elegir directamente herramientas que puedan manejarlos, o si tienes ya elegidas dichas herramientas, como tratarias los mismos. Un caso de uso, siempre debe ir acompa\u00f1ado del tratamiento del mismo.</li> <li>Utiliza los datos de reputaci\u00f3n: Datos que provengan, tanto del exterior, como del interior de la red. Esto, nos permitir\u00e1 controlar la reputaci\u00f3n de nuestra propia organizaci\u00f3n y priorizar las alertas y casos de uso en su tratamiento y despliegue.</li> <li>Aseg\u00farate de que nuestras herramientas dispongan de la informaci\u00f3n m\u00e1s reciente sobre amenazas: Siempre debemos estar actualizados, cuanto menor sea dicha periodicidad, mejor.</li> <li>I3: Iterar - Iterar - Iterar , este I3, es propio, pero si que creo que debemos pasar, al menos 3 veces, por una alerta o caso de uso, hasta afinarlo perfectamente y conseguir el resultado que nos gustar\u00eda.</li> </ol> <p></p> <p>Para llegar al summun de la monitorizaci\u00f3n (SOAR), que ya tratamos hace tiempo, tenemos que empezar con una l\u00f3gica id\u00e9ntica que los SIEM tradicionales, por ello, tener claro como implementar un SIEM en todas sus variedades, es una metodolog\u00eda atemporal que nos ayudar\u00e1 en much\u00edsimas implementaciones. Podremos dividir en m\u00e1s o menos fases, seg\u00fan los gustos , pero todas ellas llevan a la alineaci\u00f3n de nuestros SIEMs, con nuestra estrategia de ciberseguridad, de forma que intentemos ir un paso por delante de nuestros actores maliciosos. </p>"},{"location":"section2/u02/teoria/IS-U2.2.3.-SIEM-Implantacion/#referencia","title":"Referencia","text":"<ul> <li>Las Mejores pr\u00e1cticas para implemetar una estrateg\u00eda SIEM</li> <li>Ruben.Ramiro</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.2.4.-SIEM-Evolucion/","title":"2.2.3 Evoluci\u00f3n de SIEM. SOAR.","text":"<p>Las soluciones SIEM, se nos quedan cortas, adquirir soluciones SOAR (Security Orchestration Automation and Response) es m\u00e1s que necesario. ! EVOLUCIONA \u00a1</p> <p></p> <p>Fue por el 2005, cuando el SIEM se populariz\u00f3 por primera vez como una forma de ayudar a las organizaciones a monitorizar sus redes y sistemas TI de manera m\u00e1s efectiva, el panorama digital era marcadamente diferente. La adopci\u00f3n cloud fue m\u00ednima, las fuerzas de trabajo estaban menos distribuidas y se usaban muchos menos endpoints.</p> <p>C\u00f3mo cambian los tiempos. La superficie de ataque se ha transformado en la \u00faltima d\u00e9cada y contin\u00faa evolucionando a gran velocidad. Al mismo tiempo, las amenazas se han vuelto cada vez m\u00e1s sofisticadas y dif\u00edciles de detectar.</p> <p>Para evitar ser descartados como una soluci\u00f3n heredada, las tecnolog\u00edas SIEM tienen que mejorar su estrategia.</p>"},{"location":"section2/u02/teoria/IS-U2.2.4.-SIEM-Evolucion/#1-la-evolucion-del-siem","title":"1. La evoluci\u00f3n del SIEM.","text":"<p>El panorama digital cambiante est\u00e1 creando una serie de nuevos desaf\u00edos para los desarrolladores de tecnolog\u00edas SIEM. Si bien SIEM se bas\u00f3 en solo unas pocas fuentes de datos, como firewalls y sistemas de detecci\u00f3n de intrusos (IDS / IPS), la 'pr\u00f3xima generaci\u00f3n' de sistemas SIEM debe evolucionar para procesar un mayor volumen y variedad de datos, as\u00ed como mejorar su capacidad de correlaci\u00f3n.</p> <p>Las amenazas avanzadas (APTs) ahora son polim\u00f3rficas en lugar de est\u00e1ticas, capaces de cambiar constantemente su comportamiento para evadir la detecci\u00f3n. Como tal, los sistemas SIEM no solo deben procesar m\u00e1s datos, sino que tambi\u00e9n deben ser mucho mejores para reconocer nuevos patrones dentro de ellos.</p> <p>Mejorar la interoperabilidad con las nuevas tecnolog\u00edas de seguridad, como las herramientas EDR (detecci\u00f3n y respuesta de puntos finales) y UEBA (User &amp; Entity Behavior Analytics), as\u00ed como las plataformas de inteligencia de amenazas, El SIEM ha sido un foco para muchos proveedores en los \u00faltimos a\u00f1os. Permitiendo que los equipos de seguridad maximicen los beneficios de una selecci\u00f3n cada vez mayor de herramientas de seguridad, por ello, tambi\u00e9n las soluciones SIEM tienen que evolucionar para facilitar la administraci\u00f3n de todas estas tecnolog\u00edas.</p> <p>A pesar de su capacidad para aumentar la visibilidad de las amenazas, las tecnolog\u00edas complementarias tienen el potencial de aumentar la fatiga de alertas y el tiempo muerto cuando el contexto cambia entre aplicaciones. La mejora del flujo de trabajo, la reducci\u00f3n de la carga de la monitorizaci\u00f3n de seguridad y la aceleraci\u00f3n de la respuesta ante incidentes (CSIRT) son \u00e1reas que se deben mejorar para que los equipos de seguridad se den cuenta de los beneficios de los sistemas SIEM m\u00e1s inteligentes. Esto es particularmente importante dado los muchos desaf\u00edos que a los que se enfrentan las organizaciones para atraer y retener el talento de seguridad que necesitan para ejecutar las operaciones: el objetivo es trabajar de manera m\u00e1s inteligente, no m\u00e1s dif\u00edcil.</p>"},{"location":"section2/u02/teoria/IS-U2.2.4.-SIEM-Evolucion/#2-herramientas-soar","title":"2. Herramientas SOAR","text":"<p>Security Orchestration, Automation and Response (SOAR) es un \u00e1rea de seguridad en crecimiento que los proveedores de SIEM est\u00e1n aprovechando.</p> <p>Est\u00e1 compuesto por tres mercados tecnol\u00f3gicos distintos:</p> <ol> <li>Orquestaci\u00f3n y automatizaci\u00f3n de la seguridad.   </li> <li>Plataformas de respuesta a incidentes de seguridad (SIRP)   </li> <li>Plataformas de inteligencia de amenazas (TIP).    </li> </ol> <p>Su prop\u00f3sito general es ayudar a las organizaciones a mejorar la detecci\u00f3n y respuesta de amenazas a trav\u00e9s de la agregaci\u00f3n y la correlaci\u00f3n de datos m\u00e1s ricos y de calidad unida a la automatizaci\u00f3n de las tareas rutinarias de seguridad.</p> <p>Mientras que las soluciones SIEM tradicionales depend\u00edan en gran medida de una peque\u00f1a cantidad de fuentes de inteligencia de amenazas, las herramientas SOAR estan impulsando a las organizaciones a recopilar mayores vol\u00famenes de datos internos/externos y procesarlos de forma m\u00e1s r\u00e1pida y precisa. Es una tendencia que est\u00e1 ayudando a las operaciones de seguridad a ser m\u00e1s inteligentes siendo impulsadas por Big Data, lo que permite a los equipos tomar decisiones m\u00e1s r\u00e1pidas y mejor informadas. Una inteligencia m\u00e1s amplia tambi\u00e9n significa una identificaci\u00f3n de amenazas m\u00e1s confiable y con menos falsos positivos.</p> <p>Otra manera clave en la que las herramientas SOAR est\u00e1 influenciando los planes de trabajo de los productos SIEM es ayudando a estandarizar los procedimientos de respuesta y an\u00e1lisis de incidentes. El objetivo en esta parte es automatizar parcial o totalmente una serie de actividades para que el personal de seguridad tenga m\u00e1s tiempo para buscar amenazas en lugar de responder a ellas.</p> <p>A trav\u00e9s de la automatizaci\u00f3n de acciones de respuesta, como bloquear una direcci\u00f3n IP en un firewall o un sistema de detecci\u00f3n de intrusos, suspender las cuentas de usuario o poner en cuarentena los puntos finales infectados de una red, las herramientas SOAR pueden ayudar a facilitar una respuesta a incidentes m\u00e1s r\u00e1pida y, por lo tanto, reducir el da\u00f1o potencial y las interrupciones que las violaciones pueden provocar.</p> <p>Playbooks Demisto es un ejemplo de c\u00f3mo las herramientas SOAR est\u00e1n ayudando a las organizaciones a estandarizar y automatizar las respuestas a incidentes. Los Playbooks son una serie de pasos predefinidos que se pueden ejecutar autom\u00e1ticamente en respuesta a una alerta de seguridad. Estos Playbooks pueden ser personalizados por los equipos de seguridad para adaptarse a las necesidades espec\u00edficas de su organizaci\u00f3n, lo que les permite responder a incidentes de manera m\u00e1s r\u00e1pida y eficiente.</p>"},{"location":"section2/u02/teoria/IS-U2.2.4.-SIEM-Evolucion/#3-el-siem-del-futuro","title":"3. El SIEM del futuro","text":"<p>Gartner predice que para fines de 2020, el 15% de las organizaciones con un equipo de seguridad de m\u00e1s de cinco personas aprovechar\u00e1 las soluciones SOAR. Su enorme potencial para mejorar la eficiencia y eficacia de las operaciones de seguridad significa que es probable que desempe\u00f1e un papel crucial para ayudar a dar forma al desarrollo del futuro SIEM.</p> <p>La clave para la adopci\u00f3n de herramientas SOAR por parte de los proveedores de soluciones  SIEM ser\u00e1 demostrar que se puede confiar en la inteligencia artificial y el aprendizaje autom\u00e1tico para hacer cambios en los sistemas. Si bien este es el caso, las personas / humanos tomadores de decisiones seguir\u00e1n siendo vitales para la detecci\u00f3n y respuesta de amenazas.</p> <p>Aprovechar al m\u00e1ximo el SIEM, para ayudar a enfrentarnos a los crecientes desaf\u00edos de seguridad, no solo depender\u00e1 de algoritmos m\u00e1s inteligentes, sino de personal mejor capacitadas que puedan usar los sistemas con mayor eficacia y validar alertas.</p> <p>La superficie de ataque, que ya se ha transformado dr\u00e1sticamente desde la introducci\u00f3n de SIEM, continuar\u00e1 cambiando a gran velocidad en los pr\u00f3ximos a\u00f1os. Las organizaciones solo podr\u00e1n responder a estos cambios con mejores herramientas y una fuerza laboral m\u00e1s capacitada y eficiente.</p>"},{"location":"section2/u02/teoria/IS-U2.2.4.-SIEM-Evolucion/#4-la-necesidad-de-disponer-herramientas-soar","title":"4. La necesidad de disponer herramientas SOAR","text":"<p>Por ahora, los beneficios de los sistemas Security Orchestration, Automation and Response (SOAR) son obvios para casi todos los analistas CISO y de seguridad.</p> <p>Los beneficios para los Centros de Operaciones de Seguridad (SOCs) incluyen:</p> <ul> <li>Automatizaci\u00f3n de tareas para ayudar a los SOCs con personal limitado  aumentando la productividad de manera exponencial.</li> <li>Automatizar la clasificaci\u00f3n b\u00e1sica de seguridad, para que las alertas se manejen de manera integral y las alertas importantes nunca se pasen por alto debido a la  carga de trabajo del personal</li> <li>Liberar a los analistas de seguridad para trabajar en tareas no repetitivas, como la b\u00fasqueda proactiva de amenazas y la colaboraci\u00f3n con unidades de negocios, una vez que las operaciones de rutina son automatizadas, lo que mejora la efectividad general del SOC</li> <li>Lograr la excelencia operacional al reemplazar los procesos ad hoc con las mejores pr\u00e1cticas documentadas, automatizadas y realizadas de manera consistente</li> </ul> <p>Pero mientras los SOC reconocen los beneficios de los sistemas SOAR, tambi\u00e9n podemos enumerar una larga lista de obst\u00e1culos que pueden limitar la efectividad de una implementaci\u00f3n SOAR o hacer que una implementaci\u00f3n de herramientas SOAR parezca demasiado poco pr\u00e1ctica. Y es que los que vivimos en el mundo de la tecnolog\u00eda, conocemos los problemas y dolores de cabeza que produce introduccir una nueva tecnolog\u00eda.</p> <p>Aqu\u00ed hay una r\u00e1pida lista de obst\u00e1culos en el despliegue de herramientas SOAR:</p> <ul> <li>Muchos sistemas SOAR son demasiado caros: Las nuevas tecnolog\u00edas potentes a menudo tienen precios exorbitantes cu\u00e1ndo se presentan. Los autom\u00f3viles sol\u00edan ser accesibles solo por los aficionados m\u00e1s ricos. Con el tiempo, se convirtieron en necesidades asequibles para todos los hogares. Muchos sistemas SOAR de hoy solo son asequibles para SOC con grandes presupuestos.</li> <li>Los sistemas SOAR requieren programaci\u00f3n, pero la mayor\u00eda de los equipos SOC carecen de desarrolladores: Muchos sistemas SOAR requieren que los usuarios escriban Python para construir Playbooks e integrarlos con otras herramientas y aplicaciones de seguridad. La gran mayor\u00eda de los equipos de SOC carecen de las habilidades de programaci\u00f3n de Python y el tiempo para asumir un nuevo trabajo de integraci\u00f3n, por lo que el requisito de la programaci\u00f3n se convierte en un factor decisivo.</li> <li>Las llamadas integraciones listas para usar son demasiado limitadas: Los SOAR deben integrarse con herramientas de seguridad para las que puedan recopilar alertas y otros datos de ellos y emitir comandos, orquestando las respuestas a las amenazas. Algunos proveedores SOAR ofrecen integraciones, pero los SOC pronto descubren que las integraciones no incluyen funciones para las tareas y caracter\u00edsticas de las que dependen. Con demasiada frecuencia, los SOC se ven obligados a desarrollar integraciones o contratar a expertos externos para crear integraciones no proporcionadas por los proveedores.</li> <li>Las API de las herramientas de seguridad son demasiado limitadas: Para complicar a\u00fan m\u00e1s el desaf\u00edo de integrar SOARs con herramientas de seguridad, est\u00e1 la limitaci\u00f3n de muchas API de herramientas de seguridad. Estas herramientas pueden ofrecer APIs para unas pocas operaciones b\u00e1sicas, suficientes para aprobar una demostraci\u00f3n, pero no lo suficiente como para admitir la automatizaci\u00f3n efectiva de sus operaciones. Hay datos en los que ciertos SOCs  solo han integrado un 30% de las funciones de sus herramientas de seguridad debido a la dispodici\u00f3n de las APIs. Sin APIs para aprovechar, la automatizaci\u00f3n de la seguridad, se termina confiando en comandos basados en el navegador. O bien los analistas contin\u00faan emitiendo estos comandos en los navegadores, o las soluciones de automatizaci\u00f3n de seguridad necesitan expandir sus caracter\u00edsticas para admitir la automatizaci\u00f3n basada en el navegador. Hasta ahora, la mayor\u00eda de los sistemas SOAR siguen siendo d\u00e9biles en esta \u00e1rea de automatizaci\u00f3n, y por ello, debemos conocer muy bien nuestro scope de integraci\u00f3n.   </li> <li>Los SOCs creen que sus procesos son demasiado ad hoc o especializados para ser automatizados: Escuchamos esta objeci\u00f3n de muchos analistas de seguridad. Est\u00e1n convencidos de que lo que hacen es demasiado \u00fanico o complicado de documentar. Y es que si no se puede documentar, no se puede automatizar.    </li> <li>Los SOCs carecen del tiempo necesario para construir y ajustar las automatizaciones por s\u00ed solas: La construcci\u00f3n de la automatizaci\u00f3n lleva tiempo. Se necesita atenci\u00f3n sostenida y un poco de ensayo y error. Desafortunadamente, la mayor\u00eda de los SOCs est\u00e1n tan ocupados luchando contra sus colas de clasificaci\u00f3n que no pueden disponer de las horas o los d\u00edas para crear lo que les llevar\u00eda a ahorrarse semanas o meses a lo largo del a\u00f1o.    </li> </ul>"},{"location":"section2/u02/teoria/IS-U2.2.4.-SIEM-Evolucion/#referencia","title":"Referencia","text":"<ul> <li>Herramientas SOAR que revitalizaran el ecosistema SIEM</li> <li>Ruben.Ramiro</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/","title":"2.3.1.- Fuentes Abiertas. OSINT","text":"<p>Al detectar un incidente se debe llevar a cabo un an\u00e1lisis mas detallado, comprender la causa, el alcance, etc. El objetivo es identificar la vulnerabilidad, evluar amenajas potenciales y detectar brechas de seguirad o indicios sobre porque se ha producido el incidente.</p> <p>El an\u00e1lisis incluye:</p> <ul> <li>Recogida de la informaci\u00f3n</li> <li>An\u00e1lIsis de datos relacionados con el entorno digital de la organizaci\u00f3n: red de comunicaciones, sistemas, aplicaciones, empleados, usuarios, etc.</li> </ul> <p>La recopilaci\u00f3n de la informaci\u00f3n se realiza a trav\u00e9s de diferentes t\u00e9cnicas y herramientas:</p> <ul> <li>Herramientas de monitorizaci\u00f3n de red: direcciones ip, dominios, protocolos. Por ejemplo wireshark</li> <li>Recopilaci\u00f3n de datos de registro, que nos proporcionan informaci\u00f3n sobre las actividades o detectar anomal\u00edas producidas en los sistemas. Por ejmplo SIEM de elastic para recolectar datos de registros</li> <li>Entrevistas con miembros de personal, que nos dan informaci\u00f3n de los sistemas con los que trabajan, y nos pueden proporcionar detalles sobre posibles riesgos que no ser\u00e1n f\u00e1ciles de detectar a trav\u00e9s de herramientas. Por ejemplo: Software instalado q no se utiliza, contrase\u00f1as d\u00e9biles o compartidas</li> </ul> <p>El FOOTPRINTING hace referencia a la huella digital, t\u00e9cnica de recopilaci\u00f3n de informaci\u00f3n que se usa en el hacking \u00e9tico, y que consiste en recopilar datos del entorno digital de una org. para identificar vulnerabilidades y posibles puntos de entrada para la penetraci\u00f3n. La informaci\u00f3n se obtiene de los sistemas inform\u00e1ticos y de la red, para recopilar datos de la org., de los empleados y socios externos. Se recopilan: SO, Config. de los cortafuegos, direcciones IP, Mapas de Red, Config. de seguridad, emails, password, Confg. de servidores, URLs, VPN, infor. de empleados, Nombres de dominios,etc</p> <p>Este trabajo puede ser:</p> <ul> <li>Activo: Se interact\u00faa con el SO para recopilar la info. a trav\u00e9s de herramientas y t\u00e9cnicas como escaneos de red y comandos tipo traceroute o tracert</li> <li>Pasivo: No se interact\u00faa, solo se consulta motores de b\u00fasqueda y redes sociales u otras fuentes publicas.</li> </ul> <p>Cuando se hace a trav\u00e9s de fuentes publicas, hablamos de OSINT. La diferencia entre fooprinting y OSINT, es que en el primero esta mas centrado en recopilar info t\u00e9cnica en un sistema concreto, mientras que en el segundo es un concepto m\u00e1s amplio que incluye varios m\u00e9todos de recopilaci\u00f3n de fuentes abiertas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#1-introduccion-a-osint-inteligencia-de-fuentes-abiertas","title":"1. Introducci\u00f3n a OSINT (Inteligencia de Fuentes Abiertas)","text":"<p>OSINT (Open Source Intelligence) se refiere a la recopilaci\u00f3n y an\u00e1lisis de informaci\u00f3n proveniente de fuentes p\u00fablicas o accesibles libremente, con el objetivo de extraer inteligencia \u00fatil. Se emplea en diversos campos, como la ciberseguridad, el periodismo, la investigaci\u00f3n criminal, el an\u00e1lisis de amenazas y la inteligencia empresarial.</p> <p>Ejemplo:</p> <p>Imagina que un investigador de ciberseguridad quiere analizar la posible filtraci\u00f3n de datos de una empresa. En lugar de acceder ilegalmente a sus servidores, realiza b\u00fasquedas avanzadas en Google para encontrar documentos p\u00fablicos que contengan credenciales expuestas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#11-importancia-y-aplicaciones-de-osint-en-ciberseguridad","title":"1.1. Importancia y Aplicaciones de OSINT en Ciberseguridad","text":"<p>OSINT es una herramienta clave en el mundo de la seguridad inform\u00e1tica, ya que permite anticiparse a posibles amenazas y evaluar riesgos sin la necesidad de acceder a informaci\u00f3n privada.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#111-principales-usos-de-osint-en-ciberseguridad","title":"1.1.1. Principales usos de OSINT en ciberseguridad:","text":"<ol> <li>Detecci\u00f3n de amenazas: Identificaci\u00f3n de posibles ataques dirigidos a una organizaci\u00f3n a partir de informaci\u00f3n p\u00fablica en foros o redes sociales.</li> <li>Investigaciones forenses: An\u00e1lisis de incidentes de ciberseguridad mediante la recopilaci\u00f3n de evidencias de fuentes abiertas.</li> <li>Pentesting y hacking \u00e9tico: Recopilaci\u00f3n de datos de un objetivo antes de realizar pruebas de seguridad (footprinting y fingerprinting).</li> <li>Protecci\u00f3n de la identidad digital: Identificaci\u00f3n de informaci\u00f3n personal expuesta en internet para mitigar posibles ataques de ingenier\u00eda social.</li> <li>Vigilancia de la dark web: Monitoreo de mercados ilegales y foros donde se comercializan datos robados.</li> </ol> <p>Ejemplo:</p> <p>Un auditor de seguridad usa OSINT para descubrir que en un foro de hacking se est\u00e1n vendiendo credenciales de acceso a una empresa, permitiendo a la organizaci\u00f3n tomar medidas preventivas antes de sufrir un ataque.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#12-diferencias-entre-osint-y-otras-metodologias-de-recopilacion-de-informacion","title":"1.2. Diferencias entre OSINT y otras metodolog\u00edas de recopilaci\u00f3n de informaci\u00f3n","text":"<p>OSINT se diferencia de otros m\u00e9todos de inteligencia en que toda la informaci\u00f3n obtenida es legalmente accesible. No se trata de hacking ilegal ni de violar la privacidad de los usuarios.</p> M\u00e9todo Descripci\u00f3n Ejemplo OSINT(Open Source Intelligence) Recopilaci\u00f3n de informaci\u00f3n p\u00fablica y accesible legalmente. B\u00fasqueda de informaci\u00f3n en redes sociales y bases de datos p\u00fablicas. HUMINT(Human Intelligence) Obtenci\u00f3n de informaci\u00f3n mediante interacci\u00f3n con personas. Entrevistas a empleados o infiltraci\u00f3n en eventos. SIGINT(Signals Intelligence) Intercepci\u00f3n de se\u00f1ales de comunicaci\u00f3n. Escucha de comunicaciones en redes inal\u00e1mbricas. ELINT(Electronic Intelligence) Captura de datos electr\u00f3nicos. An\u00e1lisis de tr\u00e1fico de red con herramientas como Wireshark. SOCMINT(Social Media Intelligence) Recopilaci\u00f3n de informaci\u00f3n en redes sociales. An\u00e1lisis de perfiles de LinkedIn y Twitter para identificar empleados de una empresa. <p>Ejemplo:</p> <p>Un atacante malintencionado usa SIGINT para interceptar el tr\u00e1fico de red y capturar contrase\u00f1as en una WiFi p\u00fablica (actividad ilegal). En cambio, un auditor de seguridad usa OSINT para analizar si la empresa ha expuesto contrase\u00f1as en documentos PDF indexados en Google (actividad legal).</p> <p>OSINT es una metodolog\u00eda poderosa que permite recopilar informaci\u00f3n sin infringir leyes ni normas \u00e9ticas. Su correcta aplicaci\u00f3n en ciberseguridad permite detectar vulnerabilidades, prevenir ataques y mejorar la protecci\u00f3n de datos personales y corporativos.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#14-actividades","title":"1.4. Actividades","text":"<ol> <li>Ejercicio 1: \u00bfQu\u00e9 informaci\u00f3n hay sobre ti en Internet?     Pide a los alumnos que busquen su propio nombre en Google y redes sociales para analizar qu\u00e9 informaci\u00f3n p\u00fablica existe sobre ellos.      Discusi\u00f3n: \u00bfEs peligroso? \u00bfC\u00f3mo podr\u00edan mejorar su privacidad?      </li> <li>Ejercicio 2: Comparaci\u00f3n de metodolog\u00edas de inteligencia     Presenta a los alumnos varios casos ficticios y p\u00eddeles que clasifiquen si el m\u00e9todo utilizado es OSINT, HUMINT, SIGINT, etc.    </li> <li>Ejercicio 3: OSINT en la vida real     Divide a los alumnos en grupos y entr\u00e9gales diferentes escenarios (ej. \"Una empresa quiere saber qu\u00e9 informaci\u00f3n sensible est\u00e1 expuesta en internet\").      Deber\u00e1n proponer estrategias de OSINT para recopilar informaci\u00f3n \u00fatil de forma \u00e9tica y legal.   </li> </ol>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#2-uso-de-osint-en-ciberseguridad","title":"2. Uso de OSINT en Ciberseguridad","text":"<p>El uso de OSINT (Inteligencia de Fuentes Abiertas) en ciberseguridad es fundamental para identificar amenazas, evaluar vulnerabilidades y proteger la informaci\u00f3n de una organizaci\u00f3n. Esta metodolog\u00eda permite recopilar informaci\u00f3n de fuentes p\u00fablicas para anticiparse a posibles ataques y fortalecer la seguridad digital.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#21-osint-en-auditoria-de-seguridad-e-investigacion-forense","title":"2.1. OSINT en Auditor\u00eda de Seguridad e Investigaci\u00f3n Forense","text":"<p>La recopilaci\u00f3n de informaci\u00f3n de fuentes abiertas es una herramienta clave en las auditor\u00edas de seguridad y en la investigaci\u00f3n de incidentes. OSINT permite:</p> <ul> <li>Identificar informaci\u00f3n expuesta que podr\u00eda ser utilizada por atacantes.</li> <li>Analizar vulnerabilidades en infraestructuras y sistemas sin interacci\u00f3n directa.</li> <li>Obtener evidencias en investigaciones forenses tras un ataque.</li> </ul> <p>Ejemplo:</p> <p>Un equipo de ciberseguridad quiere evaluar si una empresa tiene credenciales filtradas en internet. Utilizan OSINT para buscar en bases de datos de filtraciones como \"Have I Been Pwned?\" y descubren que varias cuentas de correo de empleados han sido comprometidas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#22-osint-en-pentesting-y-hacking-etico","title":"2.2. OSINT en Pentesting y Hacking \u00c9tico","text":"<p>Antes de realizar una prueba de penetraci\u00f3n (pentesting), los expertos en seguridad usan OSINT para recolectar informaci\u00f3n del objetivo sin necesidad de lanzar escaneos activos que puedan ser detectados.</p> <p>Las t\u00e9cnicas OSINT aplicadas en pentesting incluyen:</p> <ul> <li>Google Dorking para encontrar documentos sensibles expuestos.</li> <li>B\u00fasqueda en redes sociales para obtener informaci\u00f3n sobre empleados.</li> <li>An\u00e1lisis de metadatos en documentos p\u00fablicos para descubrir informaci\u00f3n interna.</li> </ul> <p>Ejemplo:</p> <p>Un pentester usa Google para buscar informaci\u00f3n sobre una empresa antes de un ataque:</p> <pre><code>site:empresa.com filetype:pdf\n</code></pre> <p>Encuentra un documento con metadatos que contienen nombres de usuario internos, lo que podr\u00eda facilitar ataques de fuerza bruta.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#23-osint-en-prevencion-de-ataques-y-deteccion-de-amenazas-threat-intelligence","title":"2.3. OSINT en Prevenci\u00f3n de Ataques y Detecci\u00f3n de Amenazas (Threat Intelligence)","text":"<p>El an\u00e1lisis OSINT es una parte esencial de la inteligencia sobre amenazas (Threat Intelligence), ya que permite monitorear posibles ataques antes de que ocurran.</p> <p>Los expertos en ciberseguridad pueden:</p> <ul> <li>Detectar filtraciones de datos en la dark web.</li> <li>Analizar grupos de ciberdelincuentes que planean ataques.</li> <li>Monitorear menciones a la empresa en foros de hacking.</li> </ul> <p>Ejemplo:</p> <p>Una empresa de ciberseguridad detecta en un foro clandestino que se vende acceso a su red corporativa. Gracias a OSINT, identifica las credenciales filtradas y obliga a los empleados a cambiarlas antes de que sean explotadas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#24-riesgos-y-limites-legales-de-osint","title":"2.4. Riesgos y L\u00edmites Legales de OSINT","text":"<p>Aunque OSINT se basa en la recopilaci\u00f3n de informaci\u00f3n p\u00fablica, es fundamental respetar la legalidad y la \u00e9tica en su aplicaci\u00f3n.</p> <p>Algunos l\u00edmites legales incluyen:</p> <ul> <li>No acceder a informaci\u00f3n privada sin permiso (ej. correos electr\u00f3nicos protegidos).</li> <li>No usar OSINT con fines de acoso, espionaje o suplantaci\u00f3n de identidad.</li> <li>Respetar normativas de privacidad como el GDPR en Europa.</li> </ul> <p>Ejemplo:</p> <p>Un investigador de OSINT quiere obtener datos sobre una persona. Es legal buscar su perfil de LinkedIn, pero no lo es entrar a su correo privado sin permiso.</p> <p>OSINT es una herramienta poderosa en ciberseguridad, pero su uso debe estar guiado por principios \u00e9ticos y legales. Aplicado correctamente, permite anticiparse a ataques, fortalecer la seguridad y mejorar la protecci\u00f3n de la informaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#25-actividades","title":"2.5. Actividades","text":"<ol> <li>Ejercicio 1: OSINT en auditor\u00eda de seguridad    Los alumnos deben buscar informaci\u00f3n p\u00fablica sobre una empresa ficticia utilizando OSINT (Google Dorking, redes sociales, WHOIS).    Reflexi\u00f3n: \u00bfQu\u00e9 informaci\u00f3n expuesta podr\u00eda ser peligrosa?</li> <li>Ejercicio 2: Identificaci\u00f3n de amenazas con OSINT    Se da a los alumnos un caso de posible ataque a una empresa.    Deben investigar en fuentes OSINT para detectar si hay informaci\u00f3n filtrada en foros o la dark web.</li> <li>Ejercicio 3: Legalidad y \u00e9tica en OSINT    Se presentan varios escenarios y los alumnos deben decidir si la actividad es legal o ilegal.</li> </ol>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#3-proceso-de-osint","title":"3. Proceso de OSINT","text":"<p>El proceso de OSINT sigue un ciclo estructurado para garantizar la recolecci\u00f3n, an\u00e1lisis y utilizaci\u00f3n efectiva de la informaci\u00f3n obtenida de fuentes abiertas. Aunque existen varias metodolog\u00edas, el modelo m\u00e1s com\u00fan consta de seis fases.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#31-ciclo-osint-fases-y-estructura","title":"3.1. Ciclo OSINT: Fases y Estructura","text":"<p>El ciclo OSINT es un modelo te\u00f3rico que gu\u00eda la recopilaci\u00f3n, procesamiento y an\u00e1lisis de informaci\u00f3n. Sus fases no siempre son secuenciales, ya que a veces es necesario volver a etapas previas para mejorar la precisi\u00f3n de los datos obtenidos.</p> <p>Las seis fases del ciclo OSINT son:</p> <ol> <li>Planificaci\u00f3n y direcci\u00f3n</li> <li>Identificaci\u00f3n de fuentes</li> <li>Adquisici\u00f3n de informaci\u00f3n</li> <li>Procesamiento y organizaci\u00f3n</li> <li>An\u00e1lisis e interpretaci\u00f3n</li> <li>Difusi\u00f3n y aplicaci\u00f3n de la inteligencia</li> </ol>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#32-planificacion-y-direccion","title":"3.2. Planificaci\u00f3n y Direcci\u00f3n","text":"<p>La fase inicial consiste en definir qu\u00e9 informaci\u00f3n se necesita y establecer los objetivos de la investigaci\u00f3n OSINT.</p> <p>Ejemplo:</p> <p>Una empresa quiere saber si existen filtraciones de datos de sus empleados. Se establecen los siguientes objetivos:</p> <ul> <li>Buscar credenciales filtradas en bases de datos p\u00fablicas.</li> <li>Analizar redes sociales en busca de informaci\u00f3n sensible.</li> <li>Identificar vulnerabilidades en su infraestructura digital.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#321-errores-comunes-en-esta-fase","title":"3.2.1. Errores comunes en esta fase","text":"<p>Durante la planificaci\u00f3n, es importante evitar errores como:</p> <ul> <li>No definir claramente el alcance de la investigaci\u00f3n.</li> <li>Buscar informaci\u00f3n sin un objetivo espec\u00edfico.</li> <li>No considerar aspectos legales y \u00e9ticos antes de iniciar.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#33-identificacion-de-fuentes-de-informacion","title":"3.3. Identificaci\u00f3n de Fuentes de Informaci\u00f3n","text":"<p>Una vez definidos los objetivos, se deben identificar las fuentes de donde se obtendr\u00e1 la informaci\u00f3n.  Los requisitos nos guiar\u00e1n a la hora de identificar las fuentes potenciales desde las que recopilar la informaci\u00f3n</p> <p>Algunas fuentes OSINT incluyen:</p> <ul> <li>Motores de b\u00fasqueda: Google, Bing, DuckDuckGo.</li> <li>Registros p\u00fablicos: BOE, registros mercantiles, patentes.</li> <li>Redes sociales: Twitter, Facebook, LinkedIn, Telegram.</li> <li>Bases de datos filtradas: Have I Been Pwned?, DeHashed.</li> <li>Foros y Dark Web: Pastebin, BreachForums, Tor.</li> <li>Archivos hist\u00f3ricos: Wayback Machine.</li> </ul> <p>Ejemplo:</p> <p>Un investigador busca informaci\u00f3n sobre una empresa en Wayback Machine para ver c\u00f3mo ha cambiado su p\u00e1gina web a lo largo del tiempo y descubrir si en el pasado expuso informaci\u00f3n sensible.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#34-adquisicion-de-informacion","title":"3.4. Adquisici\u00f3n de Informaci\u00f3n","text":"<p>En esta fase se recopila activamente la informaci\u00f3n de las fuentes identificadas. Se trabaja en la recopilaci\u00f3n a partir de las fuentes. La informaci\u00f3n se almacena y se tratar\u00e1 posteriormente. Suele ser la fase m\u00e1s larga. Hay que acotar las fuentes adecuadamente para no alargar mucho.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#341-tecnicas-de-adquisicion-osint","title":"3.4.1. T\u00e9cnicas de adquisici\u00f3n OSINT:","text":"<ol> <li>Google Dorking: Uso de operadores avanzados en Google para encontrar informaci\u00f3n oculta.</li> <li>B\u00fasqueda en registros WHOIS: Identificaci\u00f3n de propietarios de dominios web.</li> <li>Uso de herramientas especializadas: Shodan (dispositivos conectados), Maltego (visualizaci\u00f3n de relaciones), SpiderFoot (automatizaci\u00f3n de OSINT).</li> <li>An\u00e1lisis de redes sociales: Herramientas como Sherlock permiten rastrear nombres de usuario en m\u00faltiples plataformas.</li> </ol> <p>Ejemplo:</p> <p>Un investigador usa Google Dorking para encontrar los paneles phpMyAdmin en el sitio web de la empresa target:</p> <pre><code>site:target.com inurl:\"/phpmyadmin/\"\n</code></pre> <p>Encuentra paneles que tienen que estar ocultos al acceso externo.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#35-procesamiento-y-organizacion-de-datos","title":"3.5. Procesamiento y Organizaci\u00f3n de Datos","text":"<p>Despu\u00e9s de recopilar la informaci\u00f3n, es necesario:</p> <ul> <li>Clasificarla seg\u00fan su relevancia y fiabilidad.</li> <li>Eliminar datos redundantes o irrelevantes.</li> <li>Organizarla de manera que facilite su an\u00e1lisis.</li> </ul> <p>Si durante el procesamiento surgen nuevos requisitos, se vuelve a la fase de identificaci\u00f3n de fuentes.</p> <p>Ejemplo:</p> <p>Un equipo de seguridad ha encontrado 100 posibles credenciales filtradas. Ahora deben:</p> <ul> <li>Eliminar registros duplicados.</li> <li>Verificar si las contrase\u00f1as a\u00fan son v\u00e1lidas.</li> <li>Evaluar si las cuentas comprometidas pertenecen a usuarios activos.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#351-errores-comunes-en-esta-fase","title":"3.5.1. Errores comunes en esta fase","text":"<p>Al procesar los datos, es importante evitar errores como:</p> <ul> <li>No verificar la autenticidad de la informaci\u00f3n.</li> <li>No documentar adecuadamente las fuentes de los datos obtenidos.</li> <li>Recopilar informaci\u00f3n en exceso sin un criterio claro.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#36-analisis-e-interpretacion-de-datos","title":"3.6. An\u00e1lisis e Interpretaci\u00f3n de Datos","text":"<p>Aqu\u00ed es donde la informaci\u00f3n se convierte en inteligencia \u00fatil. El an\u00e1lisis debe identificar patrones, correlaciones y amenazas potenciales.</p> <p>Ejemplo:</p> <p>Un analista de seguridad detecta que varias cuentas de empleados han sido filtradas junto con sus contrase\u00f1as. Analiza los patrones y descubre que la mayor\u00eda de las contrase\u00f1as son d\u00e9biles y repetitivas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#361-metodos-de-analisis-osint","title":"3.6.1. M\u00e9todos de an\u00e1lisis OSINT","text":"<p>Los m\u00e9todos de an\u00e1lisis incluyen:</p> <ul> <li>An\u00e1lisis de correlaci\u00f3n: Relacionar datos de diferentes fuentes para obtener conclusiones.</li> <li>Identificaci\u00f3n de tendencias: Detectar patrones recurrentes en filtraciones de datos.</li> <li>Visualizaci\u00f3n de datos: Uso de herramientas como Maltego para representar conexiones entre informaci\u00f3n.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#37-difusion-y-aplicacion-de-la-inteligencia","title":"3.7. Difusi\u00f3n y Aplicaci\u00f3n de la Inteligencia","text":"<p>Finalmente, la informaci\u00f3n obtenida se presenta de forma clara para que los responsables de seguridad puedan tomar decisiones. Presentar los resultados, a trav\u00e9s de medio adecuado para que sea \u00fatil y comprensible. Si es un peritaje inform\u00e1tico para una investigaci\u00f3n, ser\u00eda a trav\u00e9s de un informe pericial inform\u00e1ticos que se remite al tribunal competente.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#371-formatos-comunes-de-presentacion","title":"3.7.1. Formatos comunes de presentaci\u00f3n","text":"<p>Para difundir la inteligencia OSINT, se utilizan:</p> <ul> <li>Informes escritos detallados.</li> <li>Visualizaci\u00f3n de datos en gr\u00e1ficos o diagramas de relaciones.</li> <li>Alertas sobre amenazas emergentes.</li> </ul> <p>Ejemplo:</p> <p>Un analista OSINT elabora un informe sobre una filtraci\u00f3n de datos de empleados de una empresa, recomendando:</p> <ol> <li>Obligar a los empleados a cambiar sus contrase\u00f1as.</li> <li>Implementar autenticaci\u00f3n en dos factores (2FA).</li> <li>Monitorear foros de hacking en busca de futuras filtraciones.</li> </ol> <p>El proceso OSINT es un ciclo estructurado que permite convertir datos dispersos en inteligencia \u00fatil para la ciberseguridad. Una correcta planificaci\u00f3n y an\u00e1lisis permiten anticiparse a amenazas y mejorar la protecci\u00f3n de la informaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#38-actividades","title":"3.8. Actividades","text":"<ol> <li>Ejercicio 1: Simulaci\u00f3n de un Ciclo OSINT    Dividir a los alumnos en grupos.    Cada grupo investiga un objetivo ficticio siguiendo las fases del ciclo OSINT.    Al final, presentan un informe con sus hallazgos y recomendaciones.</li> <li>Ejercicio 2: Adquisici\u00f3n y Procesamiento de Datos    Se les da a los alumnos un conjunto de datos de credenciales filtradas (ficticias).    Deben procesar y organizar la informaci\u00f3n para identificar patrones y riesgos.</li> <li>Ejercicio 3: Creaci\u00f3n de un Informe OSINT    Cada alumno selecciona un tema de investigaci\u00f3n OSINT (por ejemplo, an\u00e1lisis de redes sociales de una marca).    Deben realizar el proceso completo y elaborar un informe detallado con sus hallazgos.</li> </ol>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#4-tecnicas-de-osint","title":"4. T\u00e9cnicas de OSINT","text":"<p>Para que la recopilaci\u00f3n de informaci\u00f3n OSINT sea efectiva, se utilizan diversas t\u00e9cnicas y estrategias que permiten encontrar, extraer y analizar datos relevantes de fuentes p\u00fablicas. Estas t\u00e9cnicas pueden aplicarse en ciberseguridad, investigaci\u00f3n forense, an\u00e1lisis de amenazas y otros campos.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#41-footprinting-y-fingerprinting","title":"4.1. Footprinting y Fingerprinting","text":"<p>Footprinting: Es el proceso de recopilar informaci\u00f3n sobre un objetivo (persona, empresa, sistema) sin interactuar directamente con \u00e9l. Permite entender la infraestructura, tecnolog\u00edas y servicios utilizados.</p> <p>Fingerprinting: Se refiere a la identificaci\u00f3n de caracter\u00edsticas espec\u00edficas de sistemas, dispositivos o usuarios, como versiones de software, sistemas operativos o configuraciones de red.</p> <p>La diferencia entre ambos radica en que el footprinting es m\u00e1s amplio y se enfoca en la recopilaci\u00f3n de informaci\u00f3n general, mientras que el fingerprinting es m\u00e1s espec\u00edfico y se centra en identificar caracter\u00edsticas t\u00e9cnicas.</p> <p>Ejemplo:</p> <p>Un pentester usa OSINT para recopilar informaci\u00f3n sobre una empresa antes de realizar un ataque de prueba. Utiliza:</p> <ul> <li>Google Dorking para encontrar documentos internos.</li> <li>WHOIS y Shodan para identificar servidores y direcciones IP p\u00fablicas.</li> <li>LinkedIn para conocer a los empleados y sus roles dentro de la empresa.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#42-google-dorking-busquedas-avanzadas-en-google","title":"4.2. Google Dorking: B\u00fasquedas Avanzadas en Google","text":"<p>Google Dorking (tambi\u00e9n conocido como Google Hacking) permite encontrar informaci\u00f3n oculta usando operadores avanzados en Google.</p> Operador Funci\u00f3n Ejemplo site: Busca dentro de un dominio espec\u00edfico <code>site:empresa.com</code> filetype: Filtra por tipo de archivo (PDF, XLS, DOC) <code>filetype:pdf site:empresa.com</code> intitle: Busca en el t\u00edtulo de una p\u00e1gina web <code>intitle:\"Acceso restringido\"</code> inurl: Busca en las URL de los sitios web <code>inurl:admin login</code> \"palabras\" B\u00fasqueda exacta <code>\"documento confidencial\"</code> <p>Ejemplo:</p> <p>Un investigador usa el siguiente comando para buscar carpetas de administraci\u00f3n de WordPress en un sitio web:</p> <pre><code>site:target.com intitle:\"index of\" \"wp-admin\"\n</code></pre> <p>Encuentra archivos con informaci\u00f3n interna que nunca debieron ser p\u00fablicos.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#421-recursos-para-google-dorking","title":"4.2.1. Recursos para Google Dorking","text":"<p>Algunos recursos \u00fatiles para Google Dorking son:    </p> <ul> <li> <p>https://achirou.com/dorks-de-google-hacking-para-osint/    </p> </li> <li> <p>https://www.exploit-db.com/google-hacking-database    </p> </li> <li> <p>https://github.com/chr3st5an/Google-Dorking    </p> </li> <li> <p>https://github.com/Tobee1406/Awesome-Google-Dorks    </p> </li> <li> <p>https://www.udemy.com/course/osint-de-principiante-a-experto-en-investigacion-digital/    </p> </li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#43-recopilacion-de-metadatos-en-documentos","title":"4.3. Recopilaci\u00f3n de Metadatos en Documentos","text":"<p>Los documentos digitales (PDF, DOC, JPG, etc.) contienen metadatos ocultos que pueden revelar informaci\u00f3n sobre sus autores, fechas de creaci\u00f3n y herramientas utilizadas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#431-herramientas-osint-para-extraer-metadatos","title":"4.3.1. Herramientas OSINT para extraer metadatos:","text":"<ul> <li>ExifTool: Extrae metadatos de im\u00e1genes, documentos y archivos multimedia.</li> <li>FOCA: Analiza documentos para extraer metadatos y descubrir servidores internos.</li> <li>Metagoofil: Automatiza la b\u00fasqueda de documentos en un dominio y extrae sus metadatos.</li> </ul> <p>Ejemplo:</p> <p>Un auditor de seguridad descarga un documento de una empresa y usa ExifTool:</p> <pre><code>exiftool documento.pdf\n</code></pre> <p>Descubre que el archivo contiene nombres de usuarios internos y la versi\u00f3n de software utilizada para crearlo.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#44-busqueda-de-informacion-en-redes-sociales","title":"4.4. B\u00fasqueda de Informaci\u00f3n en Redes Sociales","text":"<p>Las redes sociales son una fuente clave de informaci\u00f3n OSINT. Muchos empleados y directivos publican datos sensibles sin darse cuenta. La b\u00fasqueda en redes sociales permite identificar posibles vulnerabilidades y filtraciones de datos. Es importante respetar la privacidad de los usuarios y no infringir las normas de las plataformas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#441-herramientas-para-osint-en-redes-sociales","title":"4.4.1. Herramientas para OSINT en redes sociales","text":"<p>Algunas herramientas especializadas en OSINT en redes sociales son:</p> <ul> <li>Sherlock: Busca nombres de usuario en m\u00faltiples plataformas.</li> <li>OSINTgram: Extrae informaci\u00f3n de perfiles de Instagram.</li> <li>Twint: Recopila datos de Twitter sin necesidad de una cuenta.</li> </ul> <p>Ejemplo:</p> <p>Un investigador quiere saber si un hacker est\u00e1 activo en redes sociales. Usa Sherlock:</p> <pre><code>python3 sherlock.py usuario\n</code></pre> <p>Obtiene una lista de redes sociales donde el usuario tiene cuentas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#45-identificacion-de-infraestructuras-con-whois-dns-y-direcciones-ip","title":"4.5. Identificaci\u00f3n de Infraestructuras con WHOIS, DNS y Direcciones IP","text":"<p>La informaci\u00f3n sobre dominios y servidores puede obtenerse con herramientas OSINT. WHOIS, NSLookup y Shodan son \u00fatiles para identificar propietarios de dominios, registros DNS y dispositivos conectados a internet. Estas t\u00e9cnicas son fundamentales para el an\u00e1lisis de infraestructuras y la detecci\u00f3n de vulnerabilidades. Es importante respetar las normativas de privacidad y no realizar escaneos sin autorizaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#451-metodos-comunes","title":"4.5.1. M\u00e9todos comunes","text":"<p>Algunos m\u00e9todos comunes para identificar infraestructuras son:</p> <ul> <li>WHOIS: Identifica el propietario de un dominio y sus datos de registro.</li> <li>NSLookup/Dig: Consulta registros DNS de un dominio.</li> <li>Shodan: Encuentra dispositivos y servidores conectados a internet.</li> </ul> <p>Ejemplo:</p> <p>Un investigador quiere saber qui\u00e9n registr\u00f3 un dominio. Usa WHOIS:</p> <pre><code>whois empresa.com\n</code></pre> <p>Obtiene el nombre, correo y direcci\u00f3n del registrante.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#46-monitorizacion-de-la-deep-y-dark-web","title":"4.6. Monitorizaci\u00f3n de la Deep y Dark Web","text":"<p>La Deep Web y la Dark Web contienen informaci\u00f3n que no aparece en buscadores convencionales. La monitorizaci\u00f3n de estos espacios es esencial para detectar amenazas y filtraciones de datos. Es importante tener en cuenta que acceder a la Dark Web puede ser peligroso y debe hacerse con precauci\u00f3n. Se recomienda utilizar herramientas especializadas y respetar la legalidad.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#461-herramientas-para-exploracion-en-la-dark-web","title":"4.6.1. Herramientas para exploraci\u00f3n en la Dark Web","text":"<p>Algunas herramientas para explorar la Dark Web son:</p> <ul> <li>TOR Browser: Permite acceder a sitios .onion.</li> <li>OnionScan: Identifica vulnerabilidades en servicios ocultos.</li> <li>DarkSearch: Un buscador especializado en la Dark Web.</li> </ul> <p>Ejemplo:</p> <p>Un analista de seguridad usa TOR para buscar filtraciones de datos de una empresa en foros de hacking.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#47-analisis-de-imagenes-y-videos-con-tecnicas-forenses","title":"4.7. An\u00e1lisis de Im\u00e1genes y Videos con T\u00e9cnicas Forenses","text":"<p>Las im\u00e1genes y videos contienen datos ocultos que pueden ser analizados con OSINT. La b\u00fasqueda inversa de im\u00e1genes, el an\u00e1lisis de metadatos y la detecci\u00f3n de manipulaciones son t\u00e9cnicas \u00fatiles para verificar la autenticidad de los archivos y descubrir informaci\u00f3n oculta. Es importante respetar los derechos de autor y la privacidad de las personas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#471-tecnicas-forenses-en-imagenes","title":"4.7.1. T\u00e9cnicas forenses en im\u00e1genes","text":"<p>Algunas t\u00e9cnicas forenses en im\u00e1genes son:</p> <ul> <li>B\u00fasqueda inversa de im\u00e1genes (Google Images, TinEye).</li> <li>An\u00e1lisis de metadatos con ExifTool.</li> <li>**Comparaci\u00f3n de im\u00e1genes para detectar manipulaciones (FotoForensics).</li> </ul> <p>Ejemplo:</p> <p>Un investigador encuentra una imagen sospechosa en internet. Usa Google Im\u00e1genes para verificar su autenticidad y descubre que ha sido modificada para desinformar.</p> <p>Las t\u00e9cnicas OSINT permiten extraer informaci\u00f3n valiosa de fuentes abiertas de manera \u00e9tica y legal. Su correcto uso en ciberseguridad ayuda a prevenir ataques, detectar amenazas y fortalecer la defensa de organizaciones y personas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#48-actividades","title":"4.8. Actividades","text":"<ol> <li>Ejercicio 1: Google Dorking    Los alumnos deben usar operadores avanzados de Google para encontrar informaci\u00f3n p\u00fablica de un sitio web (ficticio).    Reflexi\u00f3n: \u00bfQu\u00e9 riesgos implica que una empresa exponga archivos en internet?</li> <li>Ejercicio 2: Extracci\u00f3n de Metadatos    Se proporciona un conjunto de documentos (ficticios).    Los alumnos deben analizar los metadatos con ExifTool o FOCA.</li> <li>Ejercicio 3: An\u00e1lisis OSINT en Redes Sociales    Cada alumno investiga un perfil p\u00fablico de una celebridad o empresa (sin invadir la privacidad).    Discusi\u00f3n: \u00bfQu\u00e9 informaci\u00f3n personal puede obtenerse legalmente de redes sociales?</li> <li>Ejercicio 4: Identificaci\u00f3n de Infraestructura    Los alumnos usan WHOIS y NSLookup para analizar dominios.    Reflexi\u00f3n: \u00bfC\u00f3mo podr\u00edan los ciberdelincuentes utilizar esta informaci\u00f3n?</li> <li>Ejercicio 5: B\u00fasqueda Inversa de Im\u00e1genes    Se presentan im\u00e1genes falsas y los alumnos deben verificar su autenticidad con Google Im\u00e1genes o TinEye.</li> </ol>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#5-herramientas-osint","title":"5. Herramientas OSINT","text":"<p>Las herramientas OSINT permiten automatizar la recopilaci\u00f3n y an\u00e1lisis de informaci\u00f3n de fuentes abiertas. Se dividen en varias categor\u00edas seg\u00fan el tipo de datos que procesan, desde buscadores especializados hasta herramientas de an\u00e1lisis de redes sociales y metadatos. Es importante elegir las herramientas adecuadas para cada objetivo y respetar las normativas de privacidad y legalidad.</p> <p>El uso de herramientas OSINT especializadas permite automatizar la recopilaci\u00f3n de informaci\u00f3n y el an\u00e1lisis de datos de fuentes abiertas. Estas herramientas son fundamentales en ciberseguridad, investigaci\u00f3n forense y an\u00e1lisis de amenazas para identificar vulnerabilidades, prevenir ataques y proteger la informaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#51-motores-de-busqueda-especializados","title":"5.1. Motores de B\u00fasqueda Especializados","text":"<p>Aunque Google es el buscador m\u00e1s conocido, existen herramientas espec\u00edficas que permiten acceder a informaci\u00f3n m\u00e1s detallada. Estos motores de b\u00fasqueda especializados facilitan la b\u00fasqueda de datos en la web profunda, la dark web y otros espacios no indexados por Google.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#511-herramientas-destacadas","title":"5.1.1. Herramientas destacadas","text":"<p>Algunos motores de b\u00fasqueda especializados son:</p> <ul> <li>Google Dorking: Usa operadores avanzados para encontrar informaci\u00f3n oculta en internet.</li> <li>DuckDuckGo: No rastrea las b\u00fasquedas y permite encontrar informaci\u00f3n que Google filtra.</li> <li>Bing y Yandex: Alternativas para obtener resultados distintos a los de Google.</li> <li>Wayback Machine: Permite ver versiones antiguas de sitios web y detectar cambios en su contenido.</li> </ul> <p>Ejemplo:</p> <p>Un investigador usa Wayback Machine para revisar c\u00f3mo luc\u00eda un sitio web antes de una supuesta filtraci\u00f3n de datos.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#52-shodan-busqueda-de-dispositivos-conectados-a-internet","title":"5.2. Shodan: B\u00fasqueda de Dispositivos Conectados a Internet","text":"<p>Shodan es un motor de b\u00fasqueda que permite encontrar dispositivos conectados a internet como servidores, c\u00e1maras de seguridad, routers, sistemas industriales, etc. Es \u00fatil para identificar vulnerabilidades en infraestructuras y evaluar la exposici\u00f3n de activos a posibles ataques. Los resultados de Shodan pueden ser utilizados en auditor\u00edas de seguridad, pentesting y an\u00e1lisis de amenazas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#521-caracteristicas-principales-de-shodan","title":"5.2.1. Caracter\u00edsticas principales de Shodan","text":"<p>Algunas caracter\u00edsticas de Shodan son:</p> <ul> <li>Permite filtrar por puertos abiertos, protocolos y versiones de software.</li> <li>Se pueden buscar dispositivos vulnerables seg\u00fan CVEs (vulnerabilidades conocidas).</li> <li>Ayuda a las empresas a identificar sus propios activos expuestos.</li> </ul> <p>Ejemplo:</p> <p>Un pentester busca dispositivos con acceso remoto expuesto mediante el puerto 3389 (Remote Desktop Protocol):</p> <p><code>port:3389</code></p> <p>Encuentra varios servidores accesibles sin autenticaci\u00f3n segura.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#522-recursos-utiles-para-shodan","title":"5.2.2. Recursos utiles para Shodan","text":"<p>Algunos recursos \u00fatiles para Google Dorking son:</p> <ul> <li> <p>https://github.com/jakejarvis/awesome-shodan-queries    </p> </li> <li> <p>https://hayageek.com/shodan-search-queries/    </p> </li> <li> <p>https://help.shodan.io/the-basics/search-query-fundamentals    </p> </li> <li> <p>https://www.shodan.io/search/examples    </p> </li> <li> <p>https://github.com/JavierOlmedo/shodan-filters    </p> </li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#53-wayback-machine-analisis-de-versiones-antiguas-de-sitios-web","title":"5.3. Wayback Machine: An\u00e1lisis de Versiones Antiguas de Sitios Web","text":"<p>Wayback Machine permite acceder a versiones archivadas de sitios web, lo que ayuda a:</p> <ul> <li>Analizar cambios en una web a lo largo del tiempo.</li> <li>Recuperar informaci\u00f3n eliminada por administradores.</li> <li>Detectar filtraciones accidentales de datos en versiones anteriores de un sitio.</li> </ul> <p>Ejemplo:</p> <p>Un investigador encuentra que un sitio web elimin\u00f3 un archivo con nombres de empleados. Usa Wayback Machine para ver versiones anteriores del sitio y recuperar la informaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#54-maltego-visualizacion-y-analisis-de-relaciones","title":"5.4. Maltego: Visualizaci\u00f3n y An\u00e1lisis de Relaciones","text":"<p>Maltego es una herramienta de inteligencia que permite visualizar conexiones entre personas, organizaciones y servidores. Es \u00fatil para mapear infraestructuras digitales, identificar relaciones entre entidades y analizar redes de amenazas. Maltego se utiliza en ciberseguridad, investigaci\u00f3n forense y an\u00e1lisis de inteligencia.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#541-usos-de-maltego-en-osint","title":"5.4.1. Usos de Maltego en OSINT","text":"<p>Algunos usos de Maltego en OSINT son:</p> <ul> <li>Relacionar direcciones de correo, nombres de dominio y redes sociales.</li> <li>Identificar conexiones entre infraestructuras digitales.</li> <li>Analizar redes de amenazas y actores malintencionados.</li> </ul> <p>Ejemplo:</p> <p>Un investigador introduce un dominio en Maltego y descubre conexiones con otras webs de la misma empresa, lo que ayuda a mapear su infraestructura digital.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#55-spiderfoot-automatizacion-de-la-recopilacion-osint","title":"5.5. SpiderFoot: Automatizaci\u00f3n de la Recopilaci\u00f3n OSINT","text":"<p>SpiderFoot permite realizar b\u00fasquedas automatizadas en m\u00e1s de 200 fuentes para recopilar informaci\u00f3n sobre:</p> <ul> <li>Direcciones IP y dominios.</li> <li>Correos electr\u00f3nicos filtrados.</li> <li>Vulnerabilidades conocidas en sistemas.</li> <li>Perfiles en redes sociales.</li> </ul> <p>Ejemplo:</p> <p>Un investigador ejecuta SpiderFoot sobre un dominio y descubre que est\u00e1 relacionado con varias direcciones IP en otros pa\u00edses, lo que sugiere la existencia de servidores adicionales no documentados.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#56-osint-framework-repositorio-de-herramientas-osint","title":"5.6. OSINT Framework: Repositorio de Herramientas OSINT","text":"<p>OSINT Framework es un directorio online con herramientas de c\u00f3digo abierto organizadas por categor\u00edas:</p> <ul> <li>B\u00fasqueda de usuarios y correos electr\u00f3nicos.</li> <li>An\u00e1lisis de redes sociales.</li> <li>Investigaci\u00f3n de dominios y direcciones IP.</li> </ul> <p>\ud83c\udf0d Acceso:https://osintframework.com</p> <p>Ejemplo:</p> <p>Un investigador usa OSINT Framework para encontrar herramientas gratuitas para analizar redes sociales sin necesidad de registrarse.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#57-buscadores-de-informacion-en-redes-sociales","title":"5.7. Buscadores de Informaci\u00f3n en Redes Sociales","text":"<p>Las redes sociales son una fuente clave de informaci\u00f3n OSINT. Existen herramientas especializadas en cada plataforma:</p> Red Social Herramienta OSINT Descripci\u00f3n Twitter/X Twint Extrae tuits sin necesidad de cuenta. Instagram Osintgram Permite analizar perfiles sin iniciar sesi\u00f3n. LinkedIn CrossLinked Extrae datos de empleados de una empresa. Telegram Telegram OSINT Rastrea usuarios y grupos p\u00fablicos. <p>Ejemplo:</p> <p>Un investigador usa Twint para analizar la actividad de un usuario de Twitter sin necesidad de iniciar sesi\u00f3n. Descubre que ha publicado informaci\u00f3n sensible sobre su empresa.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#58-tecnicas-de-busqueda-en-telegram-linkedin-twitter-facebook","title":"5.8. T\u00e9cnicas de B\u00fasqueda en Telegram, LinkedIn, Twitter, Facebook","text":"<p>Cada red social tiene t\u00e9cnicas de b\u00fasqueda avanzadas para obtener informaci\u00f3n p\u00fablica. Estas t\u00e9cnicas permiten encontrar perfiles, grupos y publicaciones relevantes sin necesidad de una cuenta. Es importante respetar la privacidad de los usuarios y no infringir las normas de las plataformas.</p> <p>Ejemplo:</p> <p>Para buscar empleados de una empresa en LinkedIn sin iniciar sesi\u00f3n:</p> <pre><code>site:linkedin.com \"trabaja en empresa\"\n</code></pre> <p>Esto muestra perfiles p\u00fablicos de personas que mencionan trabajar en la empresa.</p> <p>Las herramientas OSINT permiten recopilar informaci\u00f3n de forma r\u00e1pida y organizada. Su uso responsable y \u00e9tico es clave para evitar violaciones de privacidad y legalidad.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#59-actividades","title":"5.9. Actividades","text":"<ol> <li>Ejercicio 1: Uso de Shodan    Los alumnos buscan dispositivos conectados a internet con Shodan y analizan su exposici\u00f3n.</li> <li>Ejercicio 2: An\u00e1lisis de redes sociales con Sherlock    Se les asigna un nombre de usuario y deben rastrear en qu\u00e9 redes sociales est\u00e1 presente.</li> <li>Ejercicio 3: B\u00fasqueda de datos con Google Dorking    Se les da un dominio y deben encontrar informaci\u00f3n oculta usando operadores de Google.</li> <li>Ejercicio 4: Extracci\u00f3n de metadatos con ExifTool    Se proporciona un conjunto de im\u00e1genes y documentos para que extraigan sus metadatos.</li> </ol>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#6-casos-practicos-y-actividades-de-osint","title":"6. Casos Pr\u00e1cticos y Actividades de OSINT","text":"<p>Para que los alumnos comprendan y apliquen el conocimiento sobre OSINT, es fundamental trabajar con casos pr\u00e1cticos y ejercicios que simulen situaciones reales. En este apartado, se presentan seis ejercicios pr\u00e1cticos que permitir\u00e1n a los estudiantes desarrollar sus habilidades en inteligencia de fuentes abiertas. Estos ejercicios pueden adaptarse a diferentes niveles de conocimiento y ser utilizados en cursos de ciberseguridad, an\u00e1lisis forense y prevenci\u00f3n de amenazas.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#61-ejercicio-uso-de-google-dorking-para-encontrar-informacion-oculta","title":"6.1. Ejercicio: Uso de Google Dorking para encontrar informaci\u00f3n oculta","text":"<p>Objetivo:</p> <p>Ense\u00f1ar a los alumnos a utilizar b\u00fasquedas avanzadas en Google para encontrar informaci\u00f3n que no est\u00e1 f\u00e1cilmente accesible.</p> <p>Instrucciones:</p> <ul> <li>Explicar el concepto de Google Dorking y sus operadores.</li> <li>Presentar una serie de b\u00fasquedas espec\u00edficas con operadores avanzados:</li> </ul> <p>Encontrar archivos PDF en un dominio:</p> <p><code>site:empresa.com filetype:pdf</code></p> <p>Buscar p\u00e1ginas con credenciales filtradas:</p> <p><code>intext:\"password\" site:pastebin.com</code></p> <p>Ver p\u00e1ginas de administraci\u00f3n de un sitio:</p> <p><code>intitle:\"admin login\" site:empresa.com</code> </p> <ul> <li>Pedir a los alumnos que realicen b\u00fasquedas sobre un dominio ficticio y documenten sus hallazgos.</li> </ul> <p>Resultados esperados:</p> <ul> <li>Comprensi\u00f3n del uso de Google Dorking.</li> <li>Identificaci\u00f3n de informaci\u00f3n expuesta accidentalmente.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#62-ejercicio-analisis-de-dominios-con-whois-y-dns","title":"6.2. Ejercicio: An\u00e1lisis de dominios con WHOIS y DNS","text":"<p>Objetivo:</p> <p>Ense\u00f1ar c\u00f3mo obtener informaci\u00f3n de un dominio mediante herramientas OSINT.</p> <p>Instrucciones:</p> <ul> <li>Explicar c\u00f3mo funcionan WHOIS y las consultas DNS.</li> <li>Pedir a los alumnos que usen WHOIS para investigar un dominio:</li> </ul> <p><code>whois google.com</code> </p> <ul> <li>Usar nslookup o dig para obtener registros DNS:</li> </ul> <pre><code>nslookup google.com\ndig google.com MX\n</code></pre> <ul> <li>Analizar los resultados y responder:</li> </ul> <p>\u00bfQui\u00e9n registr\u00f3 el dominio?    \u00bfD\u00f3nde est\u00e1n sus servidores?    \u00bfHay correos electr\u00f3nicos filtrados?</p> <p>Resultados esperados:</p> <ul> <li>Identificaci\u00f3n de propietarios de dominios.</li> <li>An\u00e1lisis de infraestructura digital.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#63-ejercicio-identificacion-de-dispositivos-iot-con-shodan","title":"6.3. Ejercicio: Identificaci\u00f3n de dispositivos IoT con Shodan","text":"<p>Objetivo</p> <p>Mostrar c\u00f3mo se pueden encontrar c\u00e1maras, routers y servidores expuestos en internet con Shodan.</p> <p>Instrucciones:</p> <ul> <li>Explicar qu\u00e9 es Shodan y c\u00f3mo funciona.</li> <li>Pedir a los alumnos que busquen dispositivos en Espa\u00f1a con ciertos puertos abiertos:</li> </ul> <p><code>country:ES port:3389</code> <code>product:\"Webcam\"</code> </p> <ul> <li>Analizar los resultados y responder:</li> </ul> <p>\u00bfCu\u00e1ntos dispositivos hay expuestos?    \u00bfQu\u00e9 riesgos de seguridad tienen?</p> <p>Resultados esperados:</p> <ul> <li>Comprender la importancia de seguridad en dispositivos conectados.</li> <li>Identificar errores comunes en configuraciones de red.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#64-ejercicio-busqueda-de-usuarios-en-redes-sociales-con-sherlock","title":"6.4. Ejercicio: B\u00fasqueda de usuarios en redes sociales con Sherlock","text":"<p>Objetivo:</p> <p>Aprender a rastrear nombres de usuario en m\u00faltiples plataformas.</p> <p>Instrucciones:</p> <ul> <li>Explicar c\u00f3mo los ciberdelincuentes usan OSINT en redes sociales.</li> <li>Instalar y ejecutar Sherlock:</li> </ul> <pre><code>python3 sherlock.py usuario\n</code></pre> <ul> <li>Elegir un usuario ficticio y analizar:    \u00bfEn qu\u00e9 plataformas est\u00e1 presente?    \u00bfSe puede obtener m\u00e1s informaci\u00f3n sobre \u00e9l?</li> </ul> <p>Resultados esperados:</p> <ul> <li>Concienciaci\u00f3n sobre riesgos de exposici\u00f3n en redes sociales.</li> <li>Desarrollo de habilidades de recolecci\u00f3n de datos en plataformas p\u00fablicas.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#65-ejercicio-analisis-de-imagenes-con-busqueda-inversa","title":"6.5. Ejercicio: An\u00e1lisis de im\u00e1genes con b\u00fasqueda inversa","text":"<p>Objetivo:</p> <p>Mostrar c\u00f3mo verificar la autenticidad de im\u00e1genes mediante herramientas OSINT.</p> <p>Instrucciones:</p> <ul> <li>Explicar qu\u00e9 es la b\u00fasqueda inversa de im\u00e1genes.    </li> <li>Proporcionar a los alumnos im\u00e1genes sospechosas.   </li> <li>Usar Google Images o TinEye para rastrear su origen.   </li> </ul> <p>Resultados esperados:</p> <ul> <li>Identificar fuentes originales de im\u00e1genes.</li> <li>Detectar fake news y manipulaci\u00f3n de im\u00e1genes.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#66-proyecto-final-investigacion-osint-sobre-una-empresa-ficticia","title":"6.6. Proyecto Final: Investigaci\u00f3n OSINT sobre una empresa ficticia","text":"<p>Objetivo:</p> <p>Aplicar todas las t\u00e9cnicas aprendidas en un caso completo de investigaci\u00f3n.</p> <p>Instrucciones:</p> <ul> <li>Dividir a los alumnos en grupos y asignarles una empresa ficticia.    </li> <li> <p>Cada grupo deber\u00e1:    </p> <ul> <li>Encontrar informaci\u00f3n p\u00fablica sobre la empresa (Google Dorking, WHOIS, Shodan).    </li> <li>Analizar perfiles de empleados en redes sociales.    </li> <li>Buscar posibles vulnerabilidades de seguridad.    </li> </ul> </li> <li> <p>Presentar un informe final con:    </p> <ul> <li>Hallazgos clave.   </li> <li>Riesgos detectados.</li> <li>Recomendaciones de seguridad.    </li> </ul> </li> </ul> <p>Resultados esperados:</p> <ul> <li>Capacidad para realizar investigaciones OSINT completas.</li> <li>Desarrollo de habilidades en ciberseguridad y an\u00e1lisis forense.</li> </ul> <p>Las actividades pr\u00e1cticas son esenciales para que los alumnos entiendan c\u00f3mo funciona OSINT en el mundo real. Estos ejercicios les permiten desarrollar una mentalidad anal\u00edtica, fortalecer sus habilidades en ciberseguridad y comprender la importancia de la privacidad en l\u00ednea.</p> <p>Las actividades pr\u00e1cticas son esenciales para entender c\u00f3mo funciona OSINT en el mundo real. Estos ejercicios les permiten desarrollar una mentalidad anal\u00edtica, fortalecer sus habilidades en ciberseguridad y comprender la importancia de la privacidad en l\u00ednea. Un resumen de las actividades propuestas:</p> Ejercicio Objetivo Herramientas utilizadas Google Dorking Encontrar informaci\u00f3n oculta en Google Google, operadores avanzados An\u00e1lisis de dominios Identificar propietarios y servidores de un dominio WHOIS, nslookup, dig Uso de Shodan Detectar dispositivos expuestos en internet Shodan Investigaci\u00f3n en redes sociales Rastrear nombres de usuario en varias plataformas Sherlock, LinkedIn, Twitter B\u00fasqueda inversa de im\u00e1genes Verificar autenticidad de im\u00e1genes Google Images, TinEye Proyecto Final OSINT Aplicar todas las t\u00e9cnicas en un caso real Todas las herramientas"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#7-retos-eticos-y-legales-de-osint","title":"7. Retos \u00c9ticos y Legales de OSINT","text":"<p>El uso de OSINT (Open Source Intelligence) implica la recopilaci\u00f3n y an\u00e1lisis de informaci\u00f3n de fuentes abiertas. Sin embargo, aunque la informaci\u00f3n sea p\u00fablica, su uso indebido puede generar problemas legales y \u00e9ticos. En este apartado se abordan las consideraciones clave para garantizar un uso responsable de OSINT.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#71-privacidad-y-derechos-de-los-usuarios","title":"7.1. Privacidad y Derechos de los Usuarios","text":"<p>La recopilaci\u00f3n de informaci\u00f3n OSINT debe respetar la privacidad de las personas y las organizaciones. Aunque los datos sean accesibles p\u00fablicamente, su recolecci\u00f3n y an\u00e1lisis pueden representar riesgos. Es fundamental tener en cuenta las normas de privacidad y los derechos de los usuarios al utilizar OSINT.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#711-principales-preocupaciones-sobre-privacidad-en-osint","title":"7.1.1. Principales preocupaciones sobre privacidad en OSINT","text":"<p>Algunas preocupaciones comunes sobre privacidad en OSINT son:</p> <ul> <li>Doxxing: Publicaci\u00f3n de informaci\u00f3n personal con intenci\u00f3n de da\u00f1ar o acosar a alguien.</li> <li>Perfiles en redes sociales: Aunque la informaci\u00f3n sea p\u00fablica, usarla sin consentimiento puede ser considerado una invasi\u00f3n a la privacidad.</li> <li>Metadatos ocultos: Extraer informaci\u00f3n oculta de documentos e im\u00e1genes puede ser problem\u00e1tico si se usa con fines maliciosos.</li> <li>Dark Web: Monitorear foros en la Dark Web puede llevar a la exposici\u00f3n de datos sensibles o ilegales.</li> </ul> <p>Ejemplo:</p> <p>Un analista OSINT encuentra informaci\u00f3n personal de un individuo en un foro. Aunque los datos sean p\u00fablicos, compartirlos sin su consentimiento podr\u00eda violar leyes de privacidad.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#72-regulaciones-legales-gdpr-codigo-penal-normativas-de-privacidad","title":"7.2. Regulaciones Legales (GDPR, C\u00f3digo Penal, Normativas de Privacidad)","text":"<p>El uso de OSINT est\u00e1 regulado por diversas leyes que protegen la privacidad de los datos personales. Es importante conocer las normativas legales aplicables en cada pa\u00eds para evitar problemas legales y sanciones. Algunas de las regulaciones m\u00e1s comunes son el GDPR (General Data Protection Regulation), el C\u00f3digo Penal y las leyes de protecci\u00f3n de datos personales.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#721-principales-regulaciones-sobre-privacidad","title":"7.2.1. Principales regulaciones sobre privacidad","text":"Regulaci\u00f3n Descripci\u00f3n \u00c1mbito GDPR (General Data Protection Regulation) Regula la recopilaci\u00f3n y uso de datos personales en la UE. Europa C\u00f3digo Penal (Espa\u00f1a, Art. 197) Penaliza el acceso y uso indebido de informaci\u00f3n privada. Espa\u00f1a CCPA (California Consumer Privacy Act) Protege los datos personales de los ciudadanos de California. EE.UU. Ley de Protecci\u00f3n de Datos Personales (M\u00e9xico, Argentina, etc.) Establece normas para la recopilaci\u00f3n y tratamiento de datos personales. Latinoam\u00e9rica <p>Ejemplo:</p> <p>Un investigador OSINT recopila correos electr\u00f3nicos expuestos en una filtraci\u00f3n y los almacena en una base de datos. Seg\u00fan el GDPR, si estos datos incluyen informaci\u00f3n personal identificable, su uso sin consentimiento puede ser ilegal.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#73-buenas-practicas-y-uso-responsable-de-osint","title":"7.3. Buenas Pr\u00e1cticas y Uso Responsable de OSINT","text":"<p>Para evitar problemas \u00e9ticos y legales, es fundamental seguir buenas pr\u00e1cticas en la recopilaci\u00f3n y an\u00e1lisis de informaci\u00f3n de fuentes abiertas. Respetar la privacidad, cumplir con las regulaciones y utilizar OSINT de manera \u00e9tica son aspectos clave para un uso responsable.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#731-principios-de-uso-etico-de-osint","title":"7.3.1. Principios de uso \u00e9tico de OSINT","text":"<p>Algunos principios \u00e9ticos para el uso de OSINT son:</p> <ol> <li>Respeto a la privacidad: No recopilar ni divulgar informaci\u00f3n personal sin consentimiento.</li> <li>Cumplimiento legal: Conocer y respetar las regulaciones de protecci\u00f3n de datos.</li> <li>Prop\u00f3sito leg\u00edtimo: Utilizar OSINT solo para fines de seguridad, investigaci\u00f3n o an\u00e1lisis leg\u00edtimo.</li> <li>Fuentes verificadas: Asegurar que la informaci\u00f3n recopilada proviene de fuentes confiables y leg\u00edtimas.</li> <li>Minimizaci\u00f3n de datos: Recopilar solo la informaci\u00f3n necesaria para la investigaci\u00f3n.</li> </ol> <p>Ejemplo:</p> <p>Una empresa de ciberseguridad usa OSINT para identificar filtraciones de datos. En lugar de divulgar la informaci\u00f3n p\u00fablicamente, contacta a la empresa afectada para advertirle sobre la vulnerabilidad.</p> <p>El uso de OSINT implica un equilibrio entre la obtenci\u00f3n de informaci\u00f3n y el respeto por la privacidad y la legalidad. Aplicar buenas pr\u00e1cticas y conocer las normativas legales es esencial para evitar problemas \u00e9ticos y jur\u00eddicos.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas-OSINT/#74-actividades","title":"7.4. Actividades","text":"<ol> <li>Ejercicio 1: Evaluaci\u00f3n de casos \u00e9ticos en OSINT    Se presentan diferentes escenarios y los alumnos deben determinar si la actividad es legal y \u00e9tica.    Ejemplo: \u00bfEs correcto recolectar informaci\u00f3n de empleados en LinkedIn para un an\u00e1lisis de seguridad?</li> <li>Ejercicio 2: An\u00e1lisis de regulaciones sobre privacidad    Cada grupo investiga una ley de privacidad (GDPR, CCPA, etc.).    Explican c\u00f3mo afecta el uso de OSINT y presentan ejemplos de casos legales.</li> <li>Ejercicio 3: Uso \u00e9tico de OSINT en un caso pr\u00e1ctico    Se asigna un caso ficticio donde los alumnos deben recopilar informaci\u00f3n con OSINT, asegurando que cumplen las normas legales y \u00e9ticas.</li> </ol> <p>Como resumen, se presentan las consideraciones \u00e9ticas y legales m\u00e1s importantes en el uso de OSINT:</p> Aspecto Consideraciones \u00c9ticas y Legales Privacidad No exponer informaci\u00f3n personal sin consentimiento. Regulaciones Cumplir con normativas como GDPR, CCPA y leyes nacionales. Uso Responsable OSINT solo debe utilizarse con fines leg\u00edtimos y \u00e9ticos. Riesgos Uso indebido puede llevar a sanciones legales o problemas \u00e9ticos."},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/","title":"IS U2.3.1. FuentesAbiertas","text":"<p>OSINT: Fuentes abiertas</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#ra2","title":"RA2","text":"<p>d) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes a trav\u00e9s de la investigaci\u00f3n en fuentes abiertas (OSINT: Open Source Intelligence).</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#indice","title":"\u00cdNDICE","text":"<p>Conceptos</p> <p>OSINT</p> <p>Fases</p> <p>OSINTER</p> <p>Bibliograf\u00eda</p> <p>Actividades</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#conceptos","title":"Conceptos","text":"<p>Dato: Unidad m\u00ednima obtenida, que, adecuadamente procesada, se puede convertir en informaci\u00f3n</p> <p>Informaci\u00f3n: Material sin evaluar, que una vez analizada, tratada y elaborada puede producir inteligencia</p> <p>Inteligencia: Informaci\u00f3n transformada en un producto ya analizado</p> <p></p> <p>\u00bfQu\u00e9 es inteligencia?</p> <p>Producto -&gt; Ciclo de inteligencia</p> <p>Objetivo final -&gt; toma de decisiones + reducir incertidumbre</p> <p>Informaci\u00f3n != inteligencia</p> <p>\u00bfQu\u00e9 es ciberinteligencia?</p> <p>Aplicaci\u00f3n inteligencia + ciberespacio</p> <p></p> <p></p> <p>Problem\u00e1tica:</p> <p>Exceso de informaci\u00f3n</p> <p>Fiabilidad de las fuentes</p> <p>Informaci\u00f3n err\u00f3nea o malintencionada</p> <p></p> <p>\u00bfQu\u00e9 es fuente abierta?</p> <p>Existe controversia, y discusiones sobre el tema\u2026</p> <p>No  solo es internet o soporte tecnol\u00f3gico</p> <p>Secreta != valor</p> <p>Fuentes de  **car\u00e1cter p\u00fablico: ** Independiente comercializaci\u00f3n, difusi\u00f3n</p> <p>Cualquier contenido : con independencia del soporte, del medio de transmisi\u00f3n, del modo de acceso: digital o no, puesto a disposici\u00f3n del p\u00fablico.</p> <p>Ejemplos: agencia de noticias, enciclopedias, blog, anuarios, monograf\u00edas, conferencias de prensa, publicaciones cient\u00edficas, canal RSS, legislaci\u00f3n, emisiones de radio y televisi\u00f3n...</p> <ul> <li>OSINT</li> <li>Se empez\u00f3 a usar en el \u00e1mbito militar/gubernamental</li> <li>Open Source Intelligence -&gt; Inteligencia en fuentes abiertas -&gt; inteligencia generada a partir del an\u00e1lisis de datos obtenidos en fuentes abiertas</li> <li>Disciplina</li> <li>HUMINT: Human Intelligence</li> <li>OCMINT: Social Media Intelligence</li> <li>CYBINT: Cyber Intelligence</li> <li>GEOINT: Geospatial Intelligence</li> <li>SIGINT: Signals Intelligence Ingania</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#osint","title":"OSINT","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_1","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Qu\u00e9 es OSINT:</p> <p>https://www.incibe-cert.es/blog/osint-la-informacion-es-poder</p> <p>https// www.yolandacorral.com/que-es-osint-fases-fuentes-herramientas/</p> <p>https://ciberpatrulla.com/que-es-osint/</p> <p>https//ginseg.com/2020/7688/osint/una-introduccion-a-osint/</p> <p>Ciclo de inteligencia:</p> <p>https// www.cni.es/es/queescni/ciclo/</p> <p>Libros:</p> <p>https://0xword.com/libros/162-open-source-intelligence-osint-investigar-personas-e-identidades-en-internet.html</p> <p>https:/Avwwv.amazon.es/Manual-ciberinvestigaciC3%B3n-fuentes-abiertas-analistas/dp/1650895747</p> <p>Usos y aplicaciones del OSINT</p> <p>Informes geopol\u00edticos o geoestrat\u00e9gicos, riesgo-pa\u00eds, conflictos pol\u00edticos,socio-econ\u00f3micos,desplazamientos, inversiones, an\u00e1lisis de competencia,prospectiva de negocio...</p> <p>Informes de ciberinteligencia, vigilancia digital, reputaci\u00f3n online, malware...</p> <p>Ciber Investigaci\u00f3n, cibervigilancia, huella digital...</p> <p>Aplicaci\u00f3n en la fase de footprinting en una auditor\u00eda de seguridad</p> <p>Detecci\u00f3n, investigaci\u00f3n y an\u00e1lisis en incidente de seguridad</p> <p>... En Casi cualquier \u00e1mbito</p> <p>Quienes emplean OSINT</p> <p>FFCCSS, Fuerzas Armadas, agencias gubernamentales, abogados, periodistas,investigadores, detectives privados, crimin\u00f3logos, analistas de inteligencia,ciberinteligencia, ciberseguridad, malware, auditores de seguridad IT...</p> <p></p> <p>OSINT genera rechazo por una parte, mientras que detectives y cuerpos de seguridad se han agarrado con fuerza e ilusi\u00f3n</p> <p>https://www.youtube.com/watch?v=JSO51braHNc&amp;t=8s</p> <p></p> <p>De las distintas disciplinas, podemos decir que todas las \u201cInteligencia de\u201d tienen algo en com\u00fan:</p> <p>obtener informaci\u00f3n y analizarla.</p> <p>https://www.cni.es/es/preguntasfrecuentes/pregunta_010.html?pageIndex=10&amp;faq=si&amp;size=15</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#fases","title":"Fases","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_2","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Requisitos . Aqu\u00ed valoraremos qu\u00e9 hitos y puntos debemos de tener o realizar en nuestro proyecto. Por ejemplo, qu\u00e9 tecnolog\u00eda vamos a usar, qu\u00e9 metodolog\u00eda, qu\u00e9 aplicaciones o herramientas, etc.</p> <p>Fuentes de informaci\u00f3n . Debemos saber d\u00f3nde mirar y d\u00f3nde recoger los datos.</p> <p>**Adquisici\u00f3n. ** Ya sabemos d\u00f3nde mirar, ahora debemos saber c\u00f3mo recogerlo. Es decir, si es un peri\u00f3dico comprarlo todos los d\u00edas, si es una web, usar scraping</p> <p>Procesamientos.  Debemos estructurar y almacenar los datos para posteriormente analizarlo. Por ejemplo, si vamos a recoger las noticias de un peri\u00f3dico online quiz\u00e1s no toda la informaci\u00f3n de la web nos interese y tengamos que hacer un proceso de \u201cparseo\u201d.</p> <p>An\u00e1lisis.  Ya tenemos todos los datos y vamos a procedemos a extraer conclusiones tras implementar algoritmos o diferentes m\u00e9todos cient\u00edficos: descriptivo, cualitativo, cuantitativo, etc.</p> <p>Inteligencia.  Muchas personas confunden la inteligencia con crear informaci\u00f3n. No, la inteligencia no es \u00fanicamente crear un informe de \u201cinteligencia\u201d. Es un producto que pretende responder a unas preguntas, tener un conocimiento y contribuir en la toma de decisiones.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#habilidades-osinter","title":"Habilidades OSINTER","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_3","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Lo ideal es tener un equipo  multidisciplinar , con diversas cualidades.</p> <p>Pero si queremos ser un buen OSINTER para realizar investigaciones, unas buenas cualidades podr\u00edan ser:</p> <p></p> <p>Programaci\u00f3n . No es necesario saber programar en C o tener 20 a\u00f1os de experiencia, pero saber un lenguaje de programaci\u00f3n nos permitir\u00e1 no depender de las aplicaciones de los dem\u00e1s. Esto nos dar\u00e1 una ventaja enorme con la competencia. Una posibilidad puede ser Python y R, pero existen muchos otros.</p> <p>Fuentes . En este mundo saber d\u00f3nde encontrar las cosas o qu\u00e9 herramientas usar para la recogida de datos, ser\u00e1 determinante para tener \u00e9xito o no en nuestra misi\u00f3n. Adem\u00e1s, no solo es necesario saber muchas fuentes, tambi\u00e9n verificar su calidad y origen.</p> <p>Ciencia de datos.  Una de las primeras tareas es EDA (Exploratory Data Analysis) y vislumbrar los datos para estructurarlo, sacar patrones, distribuciones estad\u00edsticas, etc. Conocer algoritmos y entornos de trabajo que nos ayuden a crear estad\u00edsticas, probabilidades, patrones, mapas, etc de forma gr\u00e1fica es muy necesario en este trabajo.</p> <p>Escraping y big data . Necesitamos saber c\u00f3mo recoger la informaci\u00f3n haciendo web scraping y crear base de datos estructuradas y no estructuradas para posteriormente analizarla toda la informaci\u00f3n lo m\u00e1s r\u00e1pido posible.</p> <p>Machine Learning . Si somos capaces de hacer todo lo anterior y sabemos implementar ML para modelos de predicci\u00f3n, series temporales, redes neuronales, \u00e1rbol de decisi\u00f3n, etc conseguiremos dar un salto de calidad a nuestro trabajo.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#bibliografia","title":"Bibliograf\u00eda","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#conceptos_1","title":"Conceptos","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_4","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Ataques de caja negra o gris (exterior y con escasos datos del objetivo)</p> <p>1% fase: footprinting, recopilaci\u00f3n de informaci\u00f3n o \u201cInformation Gathering\u201d -&gt; recoger todos los datos posibles sobre el objetivo</p> <p>Internet: principal fuente de informaci\u00f3n -&gt; fuentes p\u00fablicas -&gt; OSINT</p> <p>Fase determinante -&gt; visi\u00f3n total del objetivo</p> <p>T\u00e9cnicas activas (interacci\u00f3n directa con el target) - T\u00e9cnicas pasivas (sin interferir o realizar acciones)</p> <p>Autorizaci\u00f3n expl\u00edcita de cliente/objetivo a auditar</p> <p>Obtener</p> <p>Datos de empleados (filiaci\u00f3n, n\u00famero, puestos, datos de contacto...):</p> <p>Socios tecnol\u00f3gicos (tecnolog\u00edas empleadas, localizaci\u00f3n, plataformas inform\u00e1ticas);</p> <p>Socios de negocio (grado de participaci\u00f3n, ubicaci\u00f3n, datos sensibles)</p> <p>\u00c1reas de negocio, inversiones, inversores...</p> <p>Presencia web (dominios, subdominios, alojamientos);</p> <p>Ubicaciones (oficinas, centro de datos, delegaciones);</p> <p>Topolog\u00eda y arquitectura de sistemas, direccionamiento IP p\u00fablico:</p> <p>\u00bfQu\u00e9 nos interesa obtener?</p> <p>Identificar IP's y rangos de red</p> <p>Identificar dominios para esas IP's</p> <p>Identificar subdominios</p> <p>Descubrimiento de puertos y servicios</p> <p>An\u00e1lisis e identificaci\u00f3n de tecnolog\u00edas</p> <p>Vulnerabilidades asociadas a versiones de servicios y tecnolog\u00edas</p> <p>Descubrimiento de contenidos: rutas por defecto, usuarios, formularios de login...</p> <p>Data Leaks</p> <p>Metadatos</p> <p>Tecnolog\u00edas y componentes</p> <p>Pol\u00edticas de autenticaci\u00f3n de correo</p> <p>Blacklisting</p> <p>Empleados</p> <p>Documentos indexados</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#bibliografia_1","title":"Bibliograf\u00eda","text":"<p>\u00bfQu\u00e9 es OSINT? Por Jorge Coronado - QuantiKa14</p> <p>CiberPatrulla</p> <p>OSINT - La informaci\u00f3n es poder | INCIBE-CERT</p> <p>https://www.youtube.com/watch?v=HWM2m_wDisU</p> <p>https://start.me/p/b56xX8/osint</p> <p>https://www.readkong.com/page/osint-cheat-sheet-inteltechniques-com-3762848</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#actividad","title":"Actividad","text":"<p>Visualiza el video:</p> <p>https://www.youtube.com/watch?v=HWM2m_wDisU</p> <p>Resumen de 4 caras m\u00e1ximo en pdf.</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/","title":"IS U2.4.1. DocumentacionDeIncidentes","text":"<p>Documentaci\u00f3n de incidentes</p> <p>RA2</p> <p>e) Se ha realizado una clasificaci\u00f3n, valoraci\u00f3n, documentaci\u00f3n y seguimiento de los incidentes detectados dentro de la organizaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#1-introduccon","title":"1. Introducc\u00f3n","text":"<p>El criterio de evaluaci\u00f3n e) del Resultado de Aprendizaje 2 se centra en la capacidad para clasificar, valorar, documentar y hacer seguimiento de incidentes de ciberseguridad, asegurando una respuesta eficaz y una mejora continua en las pr\u00e1cticas de seguridad de la organizaci\u00f3n.</p> <p>Es fundamental considerar ciertos aspectos clave:</p> <ul> <li> <p>Clasificaci\u00f3n de Incidentes: Los incidentes de ciberseguridad deben ser clasificados seg\u00fan su tipo, basandonos en una taxonom\u00eda pre establecida y que ha hemos visto. Esta taxonom\u00eda incluye categor\u00edas como malware, phishing, ataques de denegaci\u00f3n de servicio, entre otros. La clasificaci\u00f3n ayuda a priorizar los esfuerzos de respuesta y a aplicar los protocolos de manejo adecuados.  </p> </li> <li> <p>Valoraci\u00f3n de Incidentes: La valoraci\u00f3n implica determinar el impacto potencial de un incidente de ciberseguridad en la organizaci\u00f3n, asi como la peligrosidad de este. Esto incluye consideraciones sobre la sensibilidad de los datos afectados, el potencial de da\u00f1o a la reputaci\u00f3n de la empresa, y las posibles p\u00e9rdidas econ\u00f3micas.  </p> </li> <li> <p>Documentaci\u00f3n de Incidentes: La documentaci\u00f3n es crucial para registrar detalladamente cada incidente, incluyendo c\u00f3mo fue detectado, cu\u00e1les fueron las acciones inmediatas tomadas, y cualquier otra informaci\u00f3n relevante. Esta documentaci\u00f3n debe ser precisa y debe almacenarse de forma segura para futuras consultas.  </p> </li> <li> <p>Seguimiento de Incidentes: Durante el proceso de resoluci\u00f3n, como una vez resuelto un incidente, es importante realizar un seguimiento del incidente, para tener informaci\u00f3n sobre el estado de este, asi como para asegurar que las medidas tomadas fueron efectivas y prevenir incidentes similares en el futuro. Esto puede incluir la revisi\u00f3n y actualizaci\u00f3n de los planes de respuesta, pol\u00edticas de seguridad, as\u00ed como la realizaci\u00f3n de capacitaciones adicionales para el personal.</p> </li> </ul> <p>NDICE</p> <p>Gesti\u00f3n de incidentes</p> <p>Documentaci\u00f3n</p> <p>Clasificaci\u00f3n</p> <p>Valoraci\u00f3n</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#gestion-de-incidentes","title":"Gesti\u00f3n de incidentes","text":"<ul> <li>Incidente</li> <li>Cualquier suceso que afecte a la confidencialidad, integridad o disponibilidad de los activos de informaci\u00f3n de la empresa,</li> <li>por ejemplo: acceso o intento de acceso a los sistemas, uso, divulgaci\u00f3n, modificaci\u00f3n o destrucci\u00f3n no autorizada de informaci\u00f3n.</li> <li>La gesti\u00f3n de incidentes consiste:</li> <li>plan de acci\u00f3n para atender a los incidentes que se den.</li> <li>Adem\u00e1s de resolverlos debe incorporar medidas de desempe\u00f1o que permitan:</li> <li>conocer la calidad del sistema de protecci\u00f3n</li> <li>detectar tendencias antes de que se conviertan en grandes problemas.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#documentacion","title":"Documentaci\u00f3n","text":"<ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>La notificaci\u00f3n a las entidades que centralizan esta informaci\u00f3n de forma que se puedan obtener conseguir los indicadores de compromiso y generar la inteligencia necesaria que permita detectar estos incidentes.</li> <li>En la gesti\u00f3n de incidentes de seguridad resulta de gran importancia documentar todo lo aprendido en incidentes anteriores a modo de lecciones aprendidas, estas pueden resultar vitales para evitar futuros incidentes de seguridad o solucionar nuevos incidentes con similares caracter\u00edsticas.</li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Conocer con exactitud la naturaleza y tipo de incidente, las caracter\u00edsticas del mismo y los vectores de infecci\u00f3n con malware o intrusi\u00f3n para parametrizar los sistemas de seguridad de manera adecuada.</li> <li>Para iniciar campa\u00f1as de sensibilizaci\u00f3n adaptadas a la organizaci\u00f3n, conocer sus puntos m\u00e1s d\u00e9biles y saber c\u00f3mo protegerlos.</li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Es importante que esta documentaci\u00f3n resulte muy detallada, permitiendo conocer:</li> <li>qu\u00e9 herramientas ** se utilizaron y **c\u00f3mo,</li> <li>las investigaciones realizadas y sus resultados,</li> <li>las colaboraciones que se necesitaron,</li> <li>la documentaci\u00f3n utilizada para resolver el incidente,</li> <li>la l\u00ednea temporal de las acciones seguidas, etc.</li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Tambi\u00e9n permite conocer a</li> <li>los atacantes,</li> <li>sus estrategias y sus patrones en las denegaciones de servicio.</li> <li>Las nuevas vulnerabilidades que afectan los sistemas m\u00e1s cr\u00edticos de la organizaci\u00f3n tambi\u00e9n ayudar\u00e1n en gran medida a prevenir y solucionar los posibles incidentes de seguridad.</li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Todas estas acciones t\u00e9cnicas y procedimentales de la organizaci\u00f3n deben tener siempre en cuenta durante el proceso de resoluci\u00f3n de un incidente, en especial en la toma y adquisici\u00f3n de evidencias que se deriven en un caso de an\u00e1lisis forense.</li> <li>las consideraciones legales que apliquen a la organizaci\u00f3n por su sector o \u00e1mbito,</li> <li>los principios del secreto de las comunicaciones y privacidad de las personas, el c\u00f3digo penal, etc.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#documentacion-notificar","title":"Documentaci\u00f3n: notificar","text":"<p>Qu\u00e9 notificar Descripci\u00f3n</p> <p>Asunto: Frase que describa de forma general el incidente. Este campo lo heredar\u00e1n todas las notificaciones asociadas al incidente.</p> <p>OSE/PSD: Denominaci\u00f3n del operador de servicios esenciales o proveedor de servicios digitales que notifica.</p> <p>Sector estrat\u00e9gico: Energ\u00eda, transporte, financiero, etc.</p> <p>Fecha y hora del incidente: Indicar con la mayor precisi\u00f3n posible cu\u00e1ndo ha ocurrido el ciberincidente.</p> <p>Fecha y hora de detecci\u00f3n del incidente: Indicar con la mayor precisi\u00f3n posible cu\u00e1ndo se ha detectado el ciberincidente.</p> <p>Descripci\u00f3n: Describir con detalle lo sucedido.</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Recursos tecnol\u00f3gicos afectados: Indicar la informaci\u00f3n t\u00e9cnica sobre el n\u00famero y tipo de activos afectados por el ciberincidente, incluyendo direcciones IP, sistemas operativos, aplicaciones, versiones\u2026</p> <p>Origen del incidente: Indicar la causa del incidente si se conoce. Apertura de un fichero sospechoso, conexi\u00f3n de un dispositivo USB, acceso a una p\u00e1gina web maliciosa, etc.</p> <p>Taxonom\u00eda (clasificaci\u00f3n): Posible clasificaci\u00f3n y tipo de ciberincidente en funci\u00f3n de la taxonom\u00eda descrita.</p> <p>Nivel de Peligrosidad: Especificar el nivel de peligrosidad asignado a la amenaza. Consultar Tabla 4. Criterios de determinaci\u00f3n del nivel de peligrosidad de un ciberincidente. (M\u00e1s adelante se indica donde est\u00e1 la tabla 4)</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Nivel de Impacto: Especificar el nivel de impacto asignado al incidente. Consultar Tabla 5. Criterios de determinaci\u00f3n del nivel de impacto de un ciberincidente. (M\u00e1s adelante se indica donde est\u00e1 la tabla 5)</p> <p>Impacto transfronterizo: Indicar si el incidente tiene impacto transfronterizo en alg\u00fan Estado miembro de la Uni\u00f3n Europea. Especificar.</p> <p>Plan de acci\u00f3n y contramedidas: Actuaciones realizadas hasta el momento en relaci\u00f3n al ciberincidente. Indicar el Plan de acci\u00f3n seguido junto con las contramedidas implantadas.</p> <p>Afectaci\u00f3n: Indicar si el afectado es una empresa o un particular y las afectaciones de acuerdo a los criterios indicados en la Tabla 5. Criterios de determinaci\u00f3n del nivel de impacto de un ciberincidente</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Medios necesarios para la resoluci\u00f3n (JP): Capacidad empleada en la resoluci\u00f3n del incidente en Jornadas-Persona.</p> <p>Impacto econ\u00f3mico estimado (Si se conoce): Costes asociados al incidente, tanto de car\u00e1cter directo como indirecto.</p> <p>Extensi\u00f3n geogr\u00e1fica (Si se conoce): Local, auton\u00f3mico, nacional, supranacional, etc.</p> <p>Da\u00f1os reputacionales (Si se conocen): Afectaci\u00f3n a la imagen corporativa del operador.</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Adjuntos: Indicar la relaci\u00f3n de documentos adjuntos que se aportan para ayudar a conocer la causa del problema o a su resoluci\u00f3n (capturas de pantalla, ficheros de registro de informaci\u00f3n, correos electr\u00f3nicos, etc.)</p> <p>Regulaci\u00f3n afectada: ENS / RGPD /NIS / PIC / Otros</p> <p>Se requiere actuaci\u00f3n de FFCCSE: Si / No</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#documentacion_1","title":"Documentaci\u00f3n:","text":"<p>**Para documentar, ** sigue esta gu\u00eda:</p> <p>https://docs.google.com/document/d/e/2PACX-1vTDsl2bB5vCiNKj-cAqj8aitMmxQneXlS1UxC4Wv7KyMwu8ja2qKdMUeBMx4F-lF9VYH8A66ldw4gxl/pub</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#clasificacion","title":"Clasificaci\u00f3n","text":"<ul> <li>Clasificaci\u00f3n seg\u00fan la Taxonom\u00eda:</li> <li>Vista aqu\u00ed</li> <li>Tambi\u00e9n se puede consultar en la gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes (pag. 14) .</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#valoracion","title":"Valoraci\u00f3n","text":"<p>A la hora de valorar la importancia de un incidente, usaremos:</p> <p>El nivel de peligrosidad: criterio de referencia.</p> <p>El nivel de impacto.</p> <p>Si un incidente puede asociarse a m\u00e1s de un tipo de incidente, \u00e9ste quedar\u00e1 asociado a aquel incidente que tenga un nivel de peligrosidad superior.</p> <p></p> <p>Peligrosidad ( gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes (pag. 19) .</p> <p>La potencial amenaza que supondr\u00eda la materializaci\u00f3n de un incidente en los sistemas de informaci\u00f3n o comunicaci\u00f3n del ente afectado, as\u00ed como para los servicios prestados o la continuidad de negocio en caso de haberla.</p> <p>Este indicador se fundamenta en las caracter\u00edsticas intr\u00ednsecas a la tipolog\u00eda de amenaza y su comportamiento .</p> <p></p> <p>Impacto ( gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes (pag. 21) .</p> <p>Se determinar\u00e1 evaluando las consecuencias que tal ciberincidente ha tenido en las funciones y actividades de la organizaci\u00f3n afectada, en sus activos o en los individuos afectados.</p> <p>De acuerdo a ello,se tienen en cuenta aspectos como las consecuencias potenciales o materializadas que provoca una determinada amenaza en un sistema de informaci\u00f3n y/o comunicaci\u00f3n, as\u00ed como en la propia entidad afectada (organismos p\u00fablicos o privados, y particulares)</p> <p></p> <p>Relacionado con el Impacto,</p> <p>adicionalmente a lo visto en la slide anterior, en la siguiente gu\u00eda https://www.incibe-cert.es/sites/default/files/contenidos/guias/doc/incibe-cert_gestion_ciberincidentes_sector_privado.pdf (pag,. 23)</p> <p>Se muestra una tabla que expone a modo orientativo un apoyo para las labores de c\u00e1lculo de impacto de un incidente de seguridad.</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe-cert.es/guias-y-estudios/guias/guia-nacional-notificacion-y-gestion-ciberincidentes</p> <p>https://www.incibe-cert.es/sites/default/files/contenidos/guias/doc/incibe-cert_gestion_ciberincidentes_sector_privado.pdf</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#actividad","title":"Actividad","text":"<p>Documenta un incidente:</p> <p>de la actividad</p> <p>descrito en una noticia, por ejemplo los vistos en la actividad</p> <p>Evaluaci\u00f3n:</p> <p>Documentaci\u00f3n seg\u00fan gu\u00eda (80%)</p> <p>Clasificaci\u00f3n seg\u00fan taxonom\u00eda (10%)</p> <p>Valoraci\u00f3n (10%)</p> <p>6 caras m\u00e1ximo en pdf.</p> <p></p>"},{"location":"section2/u03/","title":"UD 3 - Detecci\u00f3n de incidentes","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 2 - Auditor\u00eda de incidentes de ciberseguridad:</p> <ul> <li>Controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes: tipos y fuentes</li> <li>Clasificaci\u00f3n, valoraci\u00f3n, documentaci\u00f3n, seguimiento inicial de incidentes de ciberseguridad.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Analiza incidentes de ciberseguridad utilizando herramientas, mecanismos de detecci\u00f3n y alertas de seguridad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>b) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes</li> <li>e) Se ha realizado una clasificaci\u00f3n, valoraci\u00f3n, documentaci\u00f3n y seguimiento de los incidentes detectados dentro de la organizaci\u00f3n.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n b: se puede montar un SIEM, con el stack de Elastic (ElasticSearch, Logstash y Kibana) para la monitorizaci\u00f3n de incidentes. Dado que el montaje del sistema es complejo, se recomienda emplear la siguiente imagen de docker para ello.</li> <li>Criterio de evaluaci\u00f3n e: se puede montar una herramienta de ticketing, como FIR, para llevar el control de los incidentes, desde su origen hasta su resoluci\u00f3n. Recomiendo que se despliegue con Docker, por lo que los alumnos deben haber visto Docker en este momento (aunque sea a nivel b\u00e1sico).</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/","title":"UD 3 - 1.1 Recopilaci\u00f3n y almacenamiento de evidencias","text":"","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#recopilacion-y-almacenamiento-de-evidencias","title":"Recopilaci\u00f3n y almacenamiento de evidencias","text":"<p>RA3 a) Se han recopilado y almacenado de forma segura evidencias de incidentes de ciberseguridad que afectan a la organizaci\u00f3n.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#1-recopilacion-de-evidencias","title":"1. Recopilaci\u00f3n de evidencias","text":"<p>Evidencias: Las evidencias son informaci\u00f3n que, por s\u00ed misma, o en combinaci\u00f3n con otra informaci\u00f3n, se utiliza para probar algo.</p> <p>La recopilaci\u00f3n de evidencias: es una fase inicial dentro de una gesti\u00f3n eficaz de un incidente que toda entidad debe tener lista y preparada para ejecutarla ante cualquier suceso que pudiera ocurrir.</p> <p>Una buena anticipaci\u00f3n y entrenamiento previo es clave para realizar una gesti\u00f3n eficaz de un incidente, para lo que hace falta tener en cuenta tres pilares fundamentales: las personas, los procedimientos y la tecnolog\u00eda.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#2-metodologias-de-recopilacion-y-almacenamiento","title":"2. Metodolog\u00edas de Recopilaci\u00f3n y Almacenamiento","text":"<p>En el d\u00eda a d\u00eda se dan gran diversidad de incidentes, y de muchos tipos\u2026 como hemos visto hasta ahora. No obstante, los pasos a seguir durante el proceso de recopilaci\u00f3n y an\u00e1lisis de evidencias e investigaci\u00f3n del incidente, equivalentes al an\u00e1lisis forense de un incidente, son los siguientes:</p> <p>De las distintas gu\u00edas que existen, la RFC 3227 es un est\u00e1ndar ampliamente usado.</p> <ul> <li>RFC 3227</li> </ul> <p></p> <ul> <li>Preservaci\u00f3n: mantener la integridad de la evidencia. </li> <li>Adquisici\u00f3n: recoger la evidencia de forma que sea admitida en un juicio.</li> <li>Documentaci\u00f3n: documentar el proceso de recogida de evidencias.</li> <li>An\u00e1lisis: analizar la evidencia de forma imparcial. an</li> <li>Presentaci\u00f3n: presentar la evidencia de forma clara y comprensible.   </li> </ul> <p>Otras propuestas:</p> <ul> <li>Guidelines for the best practices in the forensic examination of digital technology</li> <li>Electronic Crime Scene Investigation: A Guide for First Responders</li> <li>Forensic Examination of Digital Evidence: A Guide for Law Enforcement</li> <li>UNE 71506 - Metodolog\u00eda para el an\u00e1lisis forense de las evidencias electr\u00f3nicas</li> <li>Good Practice Guide for Computer-Based Electronic Evidence </li> <li>RFC 3227 \u00abGuidelines for Evidence Collection and Archiving\u00bb o Directrices para la recopilaci\u00f3n de evidencias y su almacenamiento</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#3-rfc-3227","title":"3 RFC 3227","text":"<p>El RFC 3227 es un documento que recoge las directrices para la recopilaci\u00f3n de evidencias y su almacenamiento.  Puede llegar a servir como est\u00e1ndar de facto para la recopilaci\u00f3n de informaci\u00f3n en incidentes de seguridad.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#31-principios","title":"3.1. Principios","text":"<p>Principios durante la recolecci\u00f3n de evidencias:</p> <ul> <li>Capturar una imagen del sistema tan precisa como sea posible.</li> <li>Realizar notas detalladas, incluyendo fechas y horas indicando si se utiliza horario local o UTC (tiempo universal coordinado).</li> <li>Minimizar los cambios en la informaci\u00f3n que se est\u00e1 recolectando y eliminar los agentes externos que puedan hacerlo.</li> <li>En el caso de enfrentarse a un dilema entre recolecci\u00f3n y an\u00e1lisis elegir primero recolecci\u00f3n y despu\u00e9s an\u00e1lisis.</li> <li>Recoger la informaci\u00f3n seg\u00fan el orden de volatilidad (de mayor a menor).</li> <li>Tener en cuenta que por cada dispositivo la recogida de informaci\u00f3n puede realizarse de distinta manera.</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#311-orden-de-volatilidad","title":"3.1.1. Orden de volatilidad","text":"<p>Per\u00edodo de tiempo en el que est\u00e1 accesible cierta informaci\u00f3n. Recolectar la de mayor volatilidad, seg\u00fan este orden:</p> <ul> <li>Registros y contenido de la cach\u00e9.</li> <li>Tabla de enrutamiento, cach\u00e9 ARP, tabla de procesos, estad\u00edsticas del kernel, memoria.</li> <li>Informaci\u00f3n temporal del sistema.</li> <li>Disco</li> <li>Logs del sistema.</li> <li>Configuraci\u00f3n f\u00edsica y topolog\u00eda de la red.</li> <li>Documentos.</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#312-acciones-a-evitarse","title":"3.1.2. Acciones a evitarse","text":"<p>Deben evitarse las acciones que invaliden el proceso de recolecci\u00f3n de informaci\u00f3n, los resultados deben poder ser utilizados en un juicio si fuera necesario:</p> <ul> <li>No apagar el ordenador hasta que se haya recopilado toda la informaci\u00f3n.</li> <li>No ejecutar programas que modifiquen la fecha y hora de acceso de todos los ficheros del sistema.</li> <li>No confiar en la informaci\u00f3n proporcionada por los programas del sistema ya que pueden haberse visto comprometidos.</li> <li>Recopilar la informaci\u00f3n mediante programas desde un medio protegido.</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#313-consideraciones-sobre-la-privacidad","title":"3.1.3. Consideraciones sobre la privacidad","text":"<ul> <li>Es muy importante tener en consideraci\u00f3n las pautas de la empresa en lo que a privacidad se refiere:</li> <li>Es habitual solicitar una autorizaci\u00f3n por escrito de quien corresponda para poder llevar a cabo la recolecci\u00f3n de evidencias.</li> <li> <p>Este es un aspecto fundamental ya que puede darse el caso de que se trabaje con informaci\u00f3n confidencial o de vital importancia para la empresa, o que la disponibilidad de los servicios se vea afectada.</p> </li> <li> <p>No hay que entrometerse en la privacidad de las personas sin una justificaci\u00f3n.</p> </li> <li>No se deben recopilar datos de lugares a los que normalmente no hay raz\u00f3n para acceder, como ficheros personales, a menos que haya suficientes indicios.</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#32-procedimiento-de-recoleccion","title":"3.2. Procedimiento de recolecci\u00f3n","text":"<p>Debe de ser lo m\u00e1s detallado posible, procurando que no sea ambiguo y reduciendo al m\u00ednimo la toma de decisiones. Y tener en cuenta que la informaci\u00f3n recopilada debe ser relevante y suficiente.</p> <p>Trasnsparencia: Los m\u00e9todos utilizados para recolectar evidencias deben de ser transparentes y reproducibles .Se debe estar preparado para reproducir con precisi\u00f3n los m\u00e9todos usados, y que dichos m\u00e9todos hayan sido testados por expertos independientes .</p> <p>Pasos para una recolecci\u00f3n de evidencias efectiva:</p> <ul> <li>\u00bfD\u00f3nde est\u00e1 la evidencia? Listar qu\u00e9 sistemas est\u00e1n involucrados en el incidente y de cu\u00e1les de ellos se deben tomar evidencias .</li> <li>Establecer qu\u00e9 es relevante . En caso de duda es mejor recopilar mucha informaci\u00f3n que poca.</li> <li>Fijar el orden de volatilidad para cada sistema.</li> <li>Obtener la informaci\u00f3n de acuerdo al orden establecido</li> <li>Comprobar el grado de sincronizaci\u00f3n del reloj del sistema .</li> <li>Seg\u00fan se vayan realizando los pasos de recolecci\u00f3n preguntarse qu\u00e9 m\u00e1s puede ser una evidencia .</li> <li>Documentar cada paso, el no encontrar una evidencia puede ser una evidencia en s\u00ed misma. Por tanto, hay que documentar tambi\u00e9n lo que no se ha encontrado.</li> <li>No olvidar a la gente involucrada. Tomar notas sobre qu\u00e9 gente estaba all\u00ed, qu\u00e9 estaban haciendo, qu\u00e9 observaron y c\u00f3mo reaccionaron .</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#33-procedimiento-de-almacenado","title":"3.3. Procedimiento de almacenado","text":"","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#331-cadena-de-custodia","title":"3.3.1. Cadena de custodia","text":"<p>Debe estar claramente documentada y se deben detallar los siguientes puntos:</p> <ul> <li>\u00bfD\u00f3nde?, \u00bfcu\u00e1ndo? y \u00bfqui\u00e9n? descubri\u00f3 y recolect\u00f3 la evidencia .</li> <li>\u00bfD\u00f3nde?, \u00bfcu\u00e1ndo? y \u00bfqui\u00e9n? manej\u00f3 la evidencia .</li> <li>\u00bfQui\u00e9n ha custodiado la evidencia?, \u00bfcu\u00e1nto tiempo? y \u00bfc\u00f3mo la ha almacenado?</li> <li>En el caso de que la evidencia cambie de custodia indicar cu\u00e1ndo y c\u00f3mo se realiz\u00f3 el intercambio, incluyendo n\u00famero de albar\u00e1n, etc.</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#332-donde-y-como-almacenarlo","title":"3.3.2. D\u00f3nde y c\u00f3mo almacenarlo","text":"<p>Se debe almacenar la informaci\u00f3n en dispositivos:</p> <ul> <li>cuya seguridad haya sido demostrada</li> <li>que permitan detectar intentos de acceso no autorizados .</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#34-herramientas","title":"3.4. Herramientas","text":"<p>M\u00e1s que una lista de herramientas, la RFC 3227 proporciona una serie de pautas para la selecci\u00f3n de herramientas, para la recolecci\u00f3n:</p> <ul> <li>herramientas externas al sistema, para evitar que hayan podido ser comprometidas.</li> <li>herramientas que alteren lo m\u00ednimo posible el escenario (no GUI, evitar uso excesivo de memoria)</li> <li>deben estar ubicados en un dispositivo de solo lectura. (CDROM, USB)</li> <li>tener un kit b\u00e1sico de herramientas seg\u00fan S.O, que incluyan:</li> <li>listar y examinar procesos</li> <li>examinar el estado del sistema</li> <li>realizar copias bit a bit.</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#4-ejemplo-de-recopilacion-de-evidencias","title":"4. Ejemplo de recopilaci\u00f3n de evidencias","text":"<p>A continuaci\u00f3n se muestra un ejemplo muy b\u00e1sico de recopilaci\u00f3n de evidencias. Supongamos que se ha detectado un ataque a un servidor web, relacionado con un ataque de denegaci\u00f3n de servicio (DoS). Se ha detectado que el servidor web ha dejado de responder y se ha detectado un tr\u00e1fico an\u00f3malo en la red.</p> <p>Tras detectar el ataque, se ha procedido a la recopilaci\u00f3n de evidencias, para ello se ha utilizado: - La herramienta <code>volatility</code> para la recopilaci\u00f3n de evidencias que se encuentran en la memoria. - Tambi\u00e9n se ha utilizado <code>wireshark</code> para la recopilaci\u00f3n de tr\u00e1fico de red. - Por \u00faltimo, para la recopilaci\u00f3n de evidencias del disco duro se ha utilizado <code>dd</code>, creando una imagen del disco duro.</p> <p>En cuanto al almacenamiento de evidencias, se ha almacenado la evidencia de la memoria en un fichero llamado <code>memoria.img</code>, la evidencia del tr\u00e1fico de red en un fichero llamado <code>trafico.pcap</code> y la evidencia del disco duro en un fichero llamado <code>disco.img</code>. Estos ficheros se han almacenado en un dispositivo de almacenamiento seguro, con un sistema de detecci\u00f3n de intentos de acceso no autorizados.</p> <p>Se ha documentado la cadena de custodia, indicando qui\u00e9n ha descubierto y recolectado la evidencia, qui\u00e9n ha manejado la evidencia y qui\u00e9n ha custodiado la evidencia.</p> <p>De esta forma se ha recopilado evidencia de la memoria, del tr\u00e1fico de red y del disco duro junto con la documentaci\u00f3n de los pasos seguidos y la cadena de custodia, se ha recopilado evidencia de forma efectiva.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#5-conclusiones","title":"5. Conclusiones","text":"<p>Como hemos visto, la recopilaci\u00f3n de evidencias es un proceso fundamental en la gesti\u00f3n de incidentes de seguridad. La RFC 3227 proporciona una serie de pautas para la recopilaci\u00f3n de evidencias, que deben ser seguidas para garantizar que la recopilaci\u00f3n de evidencias se realiza de forma efectiva. El almacenamiento de evidencias tambi\u00e9n es un proceso fundamental, y la RFC 3227 proporciona una serie de pautas para el almacenamiento de evidencias, que deben ser seguidas para garantizar que las evidencias se almacenan de forma segura.  La cadena de custodia es un aspecto fundamental en la recopilaci\u00f3n y almacenamiento de evidencias, y debe ser documentada de forma detallada. Por \u00faltimo, es importante tener en cuenta que la recopilaci\u00f3n y almacenamiento de evidencias debe ser realizada por personal cualificado, que siga las pautas proporcionadas por la RFC 3227. </p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe-cert.es/blog/rfc3227 https://www.ietf.org/rfc/rfc3227.txt</p> <p></p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/","title":"IS U3.2.1. AnalisisDeEvidenciasEInvestigacionDeIncidentes","text":"<p>An\u00e1lisis de evidencias e investigaci\u00f3n de incidente</p> <p>RA3  b) Se ha realizado un an\u00e1lisis de evidencias.  c) Se ha realizado la investigaci\u00f3n de incidentes de ciberseguridad.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias","title":"An\u00e1lisis de evidencias","text":"<p> working in progress </p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias-e-investigacion-del-incidente","title":"An\u00e1lisis de evidencias e investigaci\u00f3n del incidente","text":"<p>AN\u00c1LISIS DE EVIDENCIAS</p> <p>El objetivo de esta fase es identificar o detectar un ciber incidente para lo cual es importante realizar una monitorizaci\u00f3n lo m\u00e1s completa posible. Teniendo en cuenta la m\u00e1xima de que no todos los eventos o alertas de ciberseguridad son ciber incidentes.</p> <p>INVESTIGACI\u00d3N DEL INCIDENTE</p> <p>Los incidentes son cualquier evento que no sea parte de la operaci\u00f3n est\u00e1ndar de un servicio que ocasione, o pueda ocasionar, una interrupci\u00f3n o una reducci\u00f3n de la calidad de ese servicio.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias_1","title":"An\u00e1lisis de evidencias","text":"<p>Una vez recopiladas las evidencias digitales y almacenadas adecuadamente, el an\u00e1lisis forense digital debe encargarse de:</p> <p>la reconstrucci\u00f3n</p> <p>la temporalizaci\u00f3n</p> <p>de los _hechos ocurridos _ con los datos recopilados.</p> <p>Deber\u00e1n recopilarse los hechos desde el momento inicial del incidente hasta su descubrimiento.</p> <p>Esta fase no termina hasta que no se puede determinar</p> <p>qu\u00e9 o qui\u00e9n realiz\u00f3 el incidente</p> <p>c\u00f3mo lo hizo/c\u00f3mo se produjo</p> <p>cu\u00e1l fue el objetivo y bajo qu\u00e9 circunstancias se cometi\u00f3</p> <p>qu\u00e9 afectaci\u00f3n ha tenido en el sistema.</p> <p>Es el n\u00facleo duro de la investigaci\u00f3n y tiene que concluir con esta informaci\u00f3n.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias-premisas","title":"An\u00e1lisis de evidencias - Premisas","text":"<p>Para llevar a cabo este proceso, es importante recordar las premisas b\u00e1sicas:</p> <p>No se debe trabajar con los datos originales.</p> <p>Se debe r espetar cada una de las leyes vigentes en la jurisdicci\u00f3n donde se lleva a cabo la investigaci\u00f3n.</p> <p>Los resultados que se obtengan de todo el proceso han de ser verificables y reproducibles</p> <ul> <li>Para llevar a cabo este proceso, es importante recordar las premisas b\u00e1sicas:</li> <li>Es importante disponer de documentaci\u00f3n adicional con informaci\u00f3n de diversa \u00edndole:</li> <li>Sistema operativo del sistema</li> <li>Programas instalados en el equipo.</li> <li>Hardware, accesorios y perif\u00e9ricos que forman parte del sistema.</li> <li>Datos relativos a la conectividad del equipo:<ul> <li>Si dispone de firewall, ya sea f\u00edsico o l\u00f3gico.</li> <li>Si el equipo se encuentra en zonas de red especiales, por ejemplo, DMZ.</li> <li>Si tiene conexi\u00f3n a Internet o utiliza proxies.</li> </ul> </li> <li>Datos generales de configuraci\u00f3n que puedan ser de inter\u00e9s para el investigador para ayudar en la tarea.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias-pasos-a-seguir","title":"An\u00e1lisis de evidencias - Pasos a seguir","text":"<ul> <li>Fase de an\u00e1lisis:</li> <li>No existe ning\u00fan procedimiento est\u00e1ndar que dicte los pasos a seguir en la investigaci\u00f3n.</li> <li>Hab\u0155a que estudiar cada caso por separado teniendo en cuenta las particularidades del sistema afectado:</li> <li>No ser\u00e1 lo mismo analizar un SO Windows o uno Linux</li> <li>No ser\u00e1 lo mismo un caso de intrusi\u00f3n en el correo electr\u00f3nico de alguien o un ataque de denegaci\u00f3n de servicio.</li> <li>De igual forma, no se actuar\u00e1 igual en un caso de instalaci\u00f3n de malware que destruye informaci\u00f3n en disco que uno que env\u00ede lo que se teclea en un equipo.</li> </ul> <p>En todo caso, Se pueden destacar varios pasos, que habr\u00e1 que adaptar en cada caso:</p> <p>Preparar un entorno de trabajo adaptado a las necesidades del incidente.</p> <p>Reconstruir una __l\u00ednea temporal __ con los hechos sucedidos.</p> <p>Determinar qu\u00e9 __ procedimiento se llev\u00f3 a cabo__ por parte del atacante.</p> <p>Identificar el autor o autores de los hechos.</p> <p>Evaluar el impacto causado y si es posible la recuperaci\u00f3n del sistema.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#pasos","title":"Pasos","text":""},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#preparar-un-entorno-de-trabajo","title":"Preparar un entorno de trabajo","text":"<ul> <li>Preparar un entorno adecuado para llevar la investigaci\u00f3n. Premisa de no tocar los dispositivos originales y trabajar con copias de las evidencias :</li> <li>Decidir si realizar la investigaci\u00f3n sobre discos originales, lo que conlleva riesgos, por tanto:</li> <li>Caliente</li> <li>Precauci\u00f3n, poniendo el disco en modo solo lectura.</li> <li> <p>Cuidad para no cometer un error que invalide las pruebas.</p> </li> <li> <p>Preparar un entorno adecuado para llevar la investigaci\u00f3n. Premisa de no tocar los dispositivos originales y trabajar con copias de las evidencias :</p> </li> <li>Decidir si realizar la investigaci\u00f3n sobre discos originales, lo que conlleva riesgos, por tanto:</li> <li>Frio</li> <li> <p>Preparar un entorno, con el mismo SO de equipo afectado y montar la imagen.</p> <ul> <li>Crear imagen de la copia original</li> <li>Podremos ejecutar archivos, realizar tareas m\u00e1s intrusivas, siempre habr\u00e1 marcha atr\u00e1s.</li> <li>En caso de malware se podr\u00e1 ejecutar sin miedo, sin que la copia original se vea afectada, pudiendo ser m\u00e1s agresivos en los trabajos de investigaci\u00f3n</li> </ul> </li> <li> <p>Preparar un entorno adecuado para llevar la investigaci\u00f3n. Premisa de no tocar los dispositivos originales y trabajar con copias de las evidencias :</p> </li> <li>Posible entorno, con dos estaciones de trabajo (WS):</li> <li>Primera WS: dos discos duros</li> <li>Primero: SO anfitri\u00f3n con el que se realizar\u00e1 el an\u00e1lisis de evidencias</li> <li>Segundo: Im\u00e1gen del disco duro del equipo atacado.</li> <li>Segunda WS: SO configurado exactamente igual q el equipo atacado</li> <li>Se podr\u00e1 analizar los cambios producidos en ambos equipos pudiendo detectar los efectos ocasionados por los ataques sufridos en el equipo.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#creacion-de-linea-temporal","title":"Creaci\u00f3n de l\u00ednea temporal","text":"<p>El primer paso, crear una l\u00ednea temporal donde ubica los acontecimientos que han tenido lugar en el equipo. Para crear l\u00ednea temporal construir un esbozo de los puntos clave en el tiempo:</p> <p>Instalaci\u00f3n del sistema operativo</p> <p>Borrado de determinados archivos</p> <p>Instalaci\u00f3n de determinados programas</p> <ul> <li>Referirnos a los tiempos MACD de los archivos</li> <li>(Modificaci\u00f3n, Acceso, Cambio, Borrado)</li> <li>Importante los husos horarios, importante para dar cr\u00e9dito a las pruebas.</li> <li>Identificar la fecha de instalaci\u00f3n del SO y los usuarios creados</li> <li>Estudiar discrepancia o usuarios fuera de lo com\u00fan en los \u00faltimos instantes</li> <li>Buscar m\u00e1s informaci\u00f3n en los ficheros que se ven \u201ca simple vista\u201d</li> <li>Que programas fuero lo \u00faltimos en ser instalados. Seguramente en rutas poco habituales: archivos temporales, mezclados con librer\u00edas u otros archivos.</li> <li>Qu\u00e9 cambios repercutieron en el sistema</li> <li>Buscar informaci\u00f3n en archivos que no est\u00e1n \u201ca la vista\u201d.</li> <li>Habilitar la visualizaci\u00f3n de archivos ocultos y sus extensiones.</li> <li>Utilizar herramientas que permitan recuperar archivos borrados.</li> <li>Utilizar programas que permitan obtener informaci\u00f3n mediante esteganograf\u00eda</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#determinar-como-se-actuo","title":"Determinar c\u00f3mo se actu\u00f3","text":"<ul> <li>Para obtener esta informaci\u00f3n, es necesario investigar la memoria. Por tanto, en la medida de lo posible, realizar un volcado de memoria para:</li> <li>Obtener procesos que se estaban ejecutando y ocultados, nos dar\u00e1 pistas de c\u00f3mo se actu\u00f3.</li> <li>Los procesos leg\u00edtimos pueden ocultar procesos malintencionados camuflados<ul> <li>Sin proceso padre</li> <li>Con nombres parecidos a procesos leg\u00edtimos</li> </ul> </li> <li>Obtener ejecutables y librer\u00edas involucrados.</li> <li>Estudiar mediante programas que nos aportan esta informaci\u00f3n, si tienen cadenas (String) sospechosas.</li> <li>Comandos ejecutados desde consola.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#identificar-autores","title":"Identificar autores","text":"<p>Es importante analizar dos vertientes a la hora de continuar en el an\u00e1lisis de las evidencias, y en concreto con la la identificaci\u00f3n de los autores:</p> <p>Si se realiza un peritaje con fin:</p> <p>inculpatorios: Intentar resolver qui\u00e9n es el autor o dar pistas fiables para que se contin\u00fae el estudio en otros \u00e1mbitos.</p> <p>correctivos: no nos interesa perder el tiempo en esta fase, y ser\u00eda mejor dedicar el tiempo al estudio de impacto causado y mejoras para evitar cuestiones similares.</p> <ul> <li>Si decidimos dedicar tiempo, para identificar los autores, podemos</li> <li>Del volcado de memoria, obtener las conexiones abiertas: IPs origen, teniendo en cuenta que puede estar falseada.</li> <li>Hay que ser cr\u00edtico con la informaci\u00f3n que se obtiene, no siempre se obtendr\u00e1 \u00e9xito a la primera, ser\u00e1 dif\u00edcil averiguar el origen del incidente.</li> <li>Recapacitar en los perfiles de atacantes, para mimetizarse y entender qui\u00e9n pudo ser el autor:</li> <li>Org. criminales con \u00e1nimo de lucro, buscan robar informaci\u00f3n y sacar rendimiento</li> <li>Quien busca prestigio y reconocimiento en el ambiente: publicando su fechor\u00eda.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#impacto-causado","title":"Impacto causado","text":"<ul> <li>No hay un m\u00e9todo \u00fanico para obtener esta informaci\u00f3n. Puedes usar BIA (Business Impact Analysis) para determinar el impacto de ciertos eventos ayudando a valorar los da\u00f1os econ\u00f3micos. Estos podr\u00e1n tener asociado:</li> <li>gastos __ __econ\u00f3micos , que habr\u00e1 que cuantificar en funci\u00f3n de los \u00edtems afectados.</li> <li>F\u00e1cil c\u00e1lculo: Estos gastos resultar\u00e1 de reemplazar una m\u00e1quina o dispositivo que qued\u00f3 inservible tras el ataque, o las horas de reinstalaci\u00f3n de un sistema.</li> <li>Dif\u00edcil c\u00e1lculo.Tambi\u00e9n pueden deberse por el robo de informaci\u00f3n de secreto industrial que habr\u00e1 que cuantificar, ya que la empresa se ver\u00e1 afectada a largo plazo.</li> <li>Otros, que posiblemente tambi\u00e9n supondr\u00e1n un problema econ\u00f3mico.</li> <li>tiempo de inactividad de oficinas y f\u00e1bricas, que dejar\u00e1n de realizar su trabajo.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#herramientas","title":"Herramientas","text":"<p>TODO</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#bibliografia","title":"Bibliograf\u00eda","text":"<p>UNE 71506 - Metodolog\u00eda para el an\u00e1lisis forense de evidencia electr\u00f3nica</p> <p>Metodolog\u00edas para un an\u00e1lisis forense</p> <p>https://www.incibe-cert.es/blog/rfc3227</p> <p>https://www.ra-ma.es/libro/gestion-de-incidentes-de-ciberseguridad_139033/</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#actividad","title":"Actividad","text":""},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#actividad-ii","title":"Actividad II","text":"<p>Recopilaci\u00f3n y an\u00e1lisis de evidencias sobre un incidente:</p> <p> 3.abc.01 - Recolecci\u00f3n, almacenamiento y an\u00e1lisis </p> <p></p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#_1","title":"IS U3.2.1. AnalisisDeEvidenciasEInvestigacionDeIncidentes","text":""},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/","title":"IS U3.3.1. MITRE","text":"","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#33-attck-y-rect","title":"3.3 ATT&amp;CK y RE&amp;CT!","text":"<p>RA3 c) Se ha realizado la investigaci\u00f3n de incidentes de ciberseguridad.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#1-que-es-esto","title":"1. \u00bfQu\u00e9 es esto?","text":"<p>Tanto ATT&amp;CK como RE&amp;CT son marcos de trabajo que ayudan a cualquier persona en la industria de la seguridad, sin importar el color de su sombrero, a comprender m\u00e1s sobre c\u00f3mo proteger o penetrar una infraestructura. Ambos marcos proporcionan un conocimiento colectivo que ayuda a ver de forma general la ciber kill chain desde varios \u00e1ngulos, tanto en el punto de vista de los atacantes como en el de los defensores, por tanto nos puede ayudar de igual forma a investigar un incidente de seguridad.</p> <p></p> <p>Fuente https://www.exabeam.com/information-security/cyber-kill-chain/</p> <p>B\u00e1sicamente, se trata de una base de datos de t\u00e1cticas, t\u00e9cnicas y procedimientos (TTP), que est\u00e1 en constante evoluci\u00f3n y que se puede utilizar de innumerables formas seg\u00fan el rol del usuario.</p> <p>Los marcos ATT&amp;CK y RE&amp;CT se pueden explicar con gran detalle durante cientos de p\u00e1ginas, pero el enfoque que se pretente aqui es llevarlo de 0 a 1 y darle un \"por qu\u00e9\" para familiarizarse con estos marcos, dejando la parte de la especializacion en ellos en una decision personal/profesional.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#2-mas-mitre-attck","title":"2. M\u00e1s, Mitre ATT&amp;CK","text":"<p>Mitre attack se inici\u00f3 en 2013 y este marco es el origen de las colecciones TTP. Hay algunas caracter\u00edsticas b\u00e1sicas del marco Mitre ATT&amp;CK:</p> <ul> <li>T\u00e1cticas: Son los m\u00e9todos o fases para alcanzar un objetivo espec\u00edfico, como por ejemplo, la fase de ejecuci\u00f3n, la fase de persistencia, la fase de exfiltraci\u00f3n, etc.</li> <li>T\u00e9cnicas: Son las formas en que se pueden llevar a cabo las t\u00e1cticas para alcanzar los objetivos definidos en estas \u00faltimas, por ejemplo, la t\u00e9cnica para la fase de persistencia puede ser la creaci\u00f3n de un servicio de Windows.</li> <li>Mitigaci\u00f3n: Son las formas en que se pueden mitigar las t\u00e9cnicas, como la mitigaci\u00f3n de ejecuci\u00f3n, la mitigaci\u00f3n de persistencia, la mitigaci\u00f3n de exfiltraci\u00f3n, etc. Por ejemplo, la mitigaci\u00f3n para la t\u00e9cnica de persistencia puede ser el uso de una herramienta de detecci\u00f3n de amenazas que detecte la creaci\u00f3n de un servicio de Windows.</li> <li>Grupos APT: Son los grupos de actores de amenazas que utilizan las t\u00e1cticas y t\u00e9cnicas, como APT28, APT29, APT30, etc. Son grupos de ciberdelincuentes que se dedican a realizar ciberataques de forma organizada y con un objetivo concreto. APT es el acr\u00f3nimo de Advanced Persistent Threat, que en espa\u00f1ol se traduce como Amenaza Persistente Avanzada. Los ataques APT suelen ser muy complejos y se caracterizan por ser muy dif\u00edciles de detectar y de eliminar.</li> <li>Software: Son los programas maliciosos que utilizan las t\u00e1cticas y t\u00e9cnicas, como el malware de APT28, el malware de APT29, el malware de APT30, etc.</li> </ul> <p>Aunque estas son 5 categor\u00edas diferentes, estas se interconectan creando una malla, lo que hace que ATT&amp;CK sea un arma formidable contra los grupos APT. Como ejemplo, un threat hunter (profesional de la ciberseguridad que se dedica a encontrar amenazas que hayan pasado desapercibidas para los sistemas de seguridad de la organizaci\u00f3n. Para ello, el threat hunter utiliza herramientas de an\u00e1lisis de tr\u00e1fico, de an\u00e1lisis de logs, de an\u00e1lisis de malware, etc.) puede usar este marco de trabajo para formular una metodolog\u00eda para guiar su trabajo aplicando esto al modelo de diamante.</p> <p></p> <p>Fuente: https://attack.mitre.org/matrices/enterprise/</p> <p>Algo que no podemos olvidar sobre el marco es el navegador Mitre ATT&amp;CK, una hoja t\u00e9cnica interactiva que ayuda a enfocar y priorizar ciertos TTP que son aplicables a una determinada infraestructura en lugar de todo el marco. No termina ah\u00ed, y el potencial del navegador depende de la imaginaci\u00f3n del analista. Por ejemplo, si est\u00e1 investigando una infracci\u00f3n de seguridad de una instituci\u00f3n financiera o tratando de asegurar una, ser\u00eda mucho m\u00e1s f\u00e1cil centrarse en los grupos APT FinX.</p> <p></p> <p>Fuente https://mitre-attack.github.io/attack-navigator/enterprise/#</p> <p>Algunos de los sectores donde ATT&amp;CK es \u00fatil:</p> <ul> <li>Inteligencia de amenazas: Permite a los analistas de inteligencia de amenazas comprender mejor las t\u00e1cticas, t\u00e9cnicas y procedimientos utilizados por los actores de amenazas, y compartir esta informaci\u00f3n con otros analistas de inteligencia de amenazas y con los equipos de seguridad.</li> <li>Detecci\u00f3n y an\u00e1lisis de ataques: Permite a los analistas de seguridad y a los equipos de respuesta a incidentes comprender mejor las t\u00e1cticas, t\u00e9cnicas y procedimientos utilizados por los actores de amenazas e investigar y responder a los incidentes.</li> <li>Emulaci\u00f3n del adversario y formaci\u00f3n de red team: Permite a los equipos de red team emular a los actores de amenazas y a los equipos de blue team defenderse contra los actores de amenazas, facilitando la formaci\u00f3n y el desarrollo de habilidades.</li> <li>Evaluaciones e ingenier\u00eda: Permite a los equipos de evaluaci\u00f3n y a los ingenieros de seguridad comprender mejor las t\u00e1cticas, t\u00e9cnicas y procedimientos utilizados por los actores de amenazas, y utilizar esta informaci\u00f3n para evaluar y mejorar la seguridad de las organizaciones.</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#3-que-es-este-rect","title":"3. \u00bfQu\u00e9 es este RE&amp;CT?","text":"<p>Si ATT&amp;CK se centra en la Ciber Kill Chain, RE&amp;CT deriva de ATT&amp;CK, y se centra completamente en la respuesta a incidentes y sus etapas: Preparaci\u00f3n, Identificaci\u00f3n, Contenci\u00f3n, Erradicaci\u00f3n, Recuperaci\u00f3n y Lecciones aprendidas. Esto se puede utilizar para:</p> <ul> <li>Identificaci\u00f3n de brechas de seguridad: ya que permitir\u00e1 identificar qu\u00e9 t\u00e1cticas, t\u00e9cnicas y procedimientos utilizados por los actores de amenazas son m\u00e1s probables en su entorno, y qu\u00e9 medidas de seguridad son m\u00e1s eficaces para mitigar estas t\u00e1cticas, t\u00e9cnicas y procedimientos y no est\u00e1n cubiertas por las medidas de seguridad actuales.</li> <li>Mejores capacidades de respuesta a incidentes: ya que permitir\u00e1 a los equipos de respuesta a incidentes comprender mejor las t\u00e1cticas, t\u00e9cnicas y procedimientos utilizados por los actores de amenazas, y utilizar esta informaci\u00f3n para mejorar sus capacidades de respuesta a incidentes, incluyendo la detecci\u00f3n, la investigaci\u00f3n y la respuesta a incidentes, identificando que acciones se deben tomar en cada una de las fases del proceso de respuesta a incidentes.</li> </ul> <p>Al igual que ATT&amp;CK, RE&amp;CT tambi\u00e9n viene con un navegador que se puede utilizar para una mejor priorizaci\u00f3n de aquello que importa durante el an\u00e1lisis.</p> <p></p> <p>Fuente: https://atc-project.github.io/react-navigator/</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#4-profundizando-en-rect","title":"4. Profundizando en RE&amp;CT","text":"<p>Con RE@CT, el concepto es similar, una matriz en la que podemos identificar las t\u00e9cnicas empleadas en la respuesta a incidentes. Pero no te quedes con el DFIR, vamos a darle nuestra \u201cvisi\u00f3n\u201d.</p> <p></p> <p>Por cierto, DFIR (acr\u00f3nimo en ingl\u00e9s de Digital Forensics Incident Response) integra dos disciplinas diferenciadas de ciberseguridad: el an\u00e1lisis forense digital, es decir, la investigaci\u00f3n de ciberamenazas, centrada especialmente en recopilar material digital probatorio que se pueda utilizar luego en los procesos contra ciberdelincuentes, y la respuesta ante incidentes, que abarca la detecci\u00f3n y la mitigaci\u00f3n de los ciberataques en curso. Mediante la combinaci\u00f3n de ambas disciplinas, los servicios DFIR ayudan a los equipos de seguridad a detener las amenazas m\u00e1s r\u00e1pido, as\u00ed como a preservar el material probatorio que se puede perder cuando la prioridad es mitigar una amenaza lo antes posible)</p> <p>La matriz identifica las distintas fases en:</p> <ul> <li>Preparaci\u00f3n.</li> <li>Identificaci\u00f3n.</li> <li>Contenci\u00f3n.</li> <li>Erradicaci\u00f3n.</li> <li>Recuperaci\u00f3n</li> <li>Lecciones aprendidas.</li> </ul> <p>En DFIR tendr\u00e1s definidas estas fases en tus procesos, con estos u otros nombres.</p> <p>Por ejemplo, durante la fase de preparaci\u00f3n te encargar\u00e1s de preparar todo lo necesario para poder realizar un proceso de respuesta a incidentes de forma adecuada, por ejemplo: si no tienes \u201cc\u00e1maras de video\u201d luego no me pidas que revise el video\u2026</p> <p>Las acciones de respuesta que nos enumera la matriz por cada una de las fases, son una gu\u00eda fenomenal para nuestros departamentos de administraci\u00f3n de sistemas, de seguridad, nuestro blue team puedan cumplir con las fases de respuesta a incidentes.  </p> <p>Por ejemplo, en <code>Preparation</code>: nos plantar\u00e1 un conjunto de acciones a tomar que debemos tener resueltas antes de tener un incidente, como por ejemplo:</p> <ul> <li> <p><code>RA1006: Set up a centralized long-term log storage</code>. El framework nos est\u00e1 diciendo que tenemos que tener un almacenamiento longevo para nuestros logs. No el que usamos en el SIEM en el mejor de los casos\u2026 uno m\u00e1s barato, lento, poco inteligente, pero que nos permita tirar de eventos pasados.</p> </li> <li> <p><code>RA1103 y RA1104: acceso a los logs http</code>. Nos plantea la pregunta de si tenemos los logs del server que hosteamos en nuestra empresa y si tenemos los de la web que tenemos en el proveedor. Si estos \u00faltimos no los tenemos, \u00bfqu\u00e9 pasa si nos hacen un defacement en la web p\u00fablica? nos quedamos sin poder investigar nada\u2026 porque claro\u2026 estaba \u201cfuera\u201d\u2026.</p> </li> <li> <p><code>RA1108: Logs de DHCP</code>, En cuanto a los logs DHCP, posiblemente ya los guardas y los exportas desde su ubicaci\u00f3n por defecto\u2026 pero por si acaso, sirva esta gu\u00eda para tener un control de cu\u00e1les son estas medidas.</p> </li> </ul> <p>Adem\u00e1s se plantear\u00e1n un mont\u00f3n de ideas como: \u00bferes capaz de detectar un fichero borrado? \u00bfModificado? Una clave del registro? y que como hemos comentado, tendremos que resolver antes de tener un incidente.</p> <p>Si seguimos con la fase de <code>Identification</code>, se encuentr\u00e1n acciones a emprender que nos ayudar\u00e1n a iniciar esta fase, como listar ficheros borrados, listar ficheros modificados, listar claves del registro, etc.</p> <p>En cuanto a la <code>Containment</code>, es de las fases a la que m\u00e1s valor se le suele dar, pero \u00bfest\u00e1s preparado? \u00bfpuedes bloquear un puerto interno?, \u00bfpuedes cambiar una ACL en un Switch para una Vlan? Todas estas reflexiones las debes hacer antes de tener un incidente, o al menos, tener claro el procedimiento. Suele pasar en muchas empresas que, aunque se puede, \u00e9sta delega a \u201cotra empresa\u201d estos trabajos, y se pierde el control\u2026 se pierde tiempo, que en la contenci\u00f3n es primordial.</p> <p>No creo que haga falta seguir con la enumeraci\u00f3n. Lo que si es interesante es que igual que ocurre con MITRE, que tenemos un proyecto de la matriz navegable, con RE@CT tenemos lo mismo, un mapa en el que podemos trabajar los \u00edtems, d\u00e1ndole el enfoque que queramos.</p> <p>En este caso, tenemos una categorizaci\u00f3n por colores de las t\u00e9cnicas enumeradas, en referencia a si son elementos generales, de red, correo, ficheros, procesos, etc\u2026 pero lo bueno de la matriz es que podemos configurarla de la manera que queramos. Un ejemplo de uso podr\u00eda ser para reflejar el grado de madurez de nuestra organizaci\u00f3n, imagina un sem\u00e1foro, y pintamos para cada t\u00e9cnica, si lo tenemos bien (verde), si lo tenemos en el radar o pendiente (amarillo) o si no tenemos cobertura ninguna de la t\u00e9cnica (rojo). Me parece muy interesante a la hora de documentar a clientes su estado de madurez ante una respuesta a incidentes.</p> <p></p> <p>El proyecto es mucho m\u00e1s ambicioso, ya que contempla la recopilaci\u00f3n de playbooks (gu\u00eda estrat\u00e9gica que detalla las acciones a seguir en respuesta a eventos espec\u00edficos, como incidentes de ciberseguridad), una comunidad donde podamos crear elementos \u201caccionables\u201d que adem\u00e1s, podemos importar en nuestro The Hive/Cortex &amp;MISP como elementos de automatizaci\u00f3n de tareas\u2026</p> <p>Pero por si fuera poco, es una pata del proyecto  Atomic Threat Coverage, lo que pretende ser el punto de uni\u00f3n de \u201ctodo esto\u201d que hablamos de MITRE, reglas Sigma de detecci\u00f3n, playbooks para automatizar, lenguaje de marcas para poder documentar mitigaciones, procesos de red team para generar el \u201cruido\u201d, un proyecto BRUTAL que pone nombre y apellidos a toda la cadena de valor desde la nomenclatura del ataque, la detecci\u00f3n, hasta lecciones aprendidas, fortificaci\u00f3n\u2026</p> <p></p> <p>Si bien esto es un proyecto ambicioso, orientado a la respuesta a incidentes, nos lo podemos llevar a nuestro terreno defensivo.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#5-attck-o-rect","title":"5. \u00bfATT&amp;CK o RE&amp;CT?","text":"<p>Y \u00bfpor qu\u00e9 no ambos? Estos dos marcos se crean con diferentes perspectivas de enfoque, seg\u00fan el rol de uso del marco. Por lo tanto, familiarizarse con estos marcos y utilizarlos te dar\u00e1 una ventaja adicional sobre los adversarios, as\u00ed como tambi\u00e9n te ayudar\u00e1 a ser proactivo para poder prevenir los incidentes por completo.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#fuente","title":"Fuente:","text":"<ul> <li>Should I RE&amp;CT or ATT&amp;CK</li> <li>No es matrix, es la matriz RE@CT de respuesta a incidentes</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u03/teoria/IS-U3.3.1.-MITRE/#recursos","title":"Recursos:","text":"<ul> <li>Mitre ATT&amp;CK: https://attack.mitre.org/</li> <li>RE&amp;CT: https://atc-project.github.io/atc-react/</li> <li>RE&amp;CT navigator: https://atc-project.github.io/react-navigator/</li> <li>Charlas: https://github.com/aboutsecurity/Talks-and-Presentations (hay video tb)</li> <li>eBook: https://github.com/Incidentes/Incident-Response-with-Threat-Intelligence</li> </ul> <p>**</p> <p></p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/","title":"UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 3 - Investigaci\u00f3n de los incidentes de ciberseguridad:</p> <ul> <li>Recopilaci\u00f3n de evidencias.</li> <li>An\u00e1lisis de evidencias.</li> <li>Investigaci\u00f3n del incidente</li> <li>Intercambio de informaci\u00f3n del incidente con proveedores u organismos competentes.</li> <li>Medidas de contenci\u00f3n de incidentes.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 3. Investiga incidentes de ciberseguridad analizando los riesgos implicados y definiendo las posibles medidas a adoptar.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han recopilado y almacenado de forma segura evidencias de incidentes de ciberseguridad que afectan a la organizaci\u00f3n.</li> <li>b) Se ha realizado un an\u00e1lisis de evidencias.</li> <li>c) Se ha realizado la investigaci\u00f3n de incidentes de ciberseguridad.</li> <li>d) Se ha intercambiado informaci\u00f3n de incidentes, con proveedores y/o organismos competentes que podr\u00edan hacer aportaciones al respecto.</li> <li>e) Se han iniciado las primeras medidas de contenci\u00f3n de los incidentes para limitar los posibles da\u00f1os causados.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: se puede usar una herramienta como DFIRTrack para llevar las evidencias y artefactos de los incidentes de ciberseguridad.</li> <li>Criterio de evaluaci\u00f3n b: en caso de incidentes con ransomware, se recomienda ]el uso de la herramienta id-ransomware](https://id-ransomware.malwarehunterteam.com/) para comprobar qu\u00e9 tipo de malware nos ha infectado y qu\u00e9 pasos tomar a continuaci\u00f3n.</li> <li>Criterio de evaluaci\u00f3n c: para entrenar la investigaci\u00f3n de incidentes se pueden emplear plataformas de aprendizaje como Let's Defend o Cyberdefenders.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/","title":"IS U4.1.1. PlanesDeRespuesta","text":"<p>Planes de respuesta</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ra4","title":"RA4","text":"<p>a) Se han desarrollado procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes de ciberseguridad m\u00e1s habituales. b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n, prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ra4_1","title":"RA4","text":"<p>c) Se ha establecido un flujo de toma de decisiones y escalado de incidentes interno y/o externo adecuados. d) Se han llevado a cabo las tareas de restablecimiento de los servicios afectados por un incidente hasta confirmar la vuelta a la normalidad.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ra4_2","title":"RA4","text":"<p>e) Se han documentado las acciones realizadas y las conclusiones que permitan mantener un registro de \u201clecciones aprendidas\u201d. f) Se ha realizado un seguimiento adecuado del incidente para evitar que una situaci\u00f3n similar se vuelva a repetir.</p> Contenidos I Slide RA4 2 Marco de Ciberseguridad 7 NIST - Marco de Ciberseguridad del NIST 8 Planes de respuesta 14 Respuesta a incidentes: ISO/IEC 27035 15 Respuesta a incidentes: SP800-61 16 Respuesta a incidentes: SP800-611. Preparaci\u00f3n 17 Respuesta a incidentes: SP800-612. Detecci\u00f3n 21 Respuesta a incidentes: SP800-613. An\u00e1lisis 25 Contenidos II Slide Respuesta a incidentes: SP800-614. Contenci\u00f3n 31 Respuesta a incidentes: SP800-615. Erradicaci\u00f3n 38 Respuesta a incidentes: SP800-616. Recuperaci\u00f3n 41 Respuesta a incidentes: SP800-617. Post-incidente (Lecciones aprendidas) 45 Playbook 52 Ejemplo Playbook 58 Bibliograf\u00eda 66 Actividad 68"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#marco-de-ciberseguridad","title":"Marco de Ciberseguridad","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#nist-marco-de-ciberseguridad-del-nist","title":"NIST - Marco de Ciberseguridad del NIST","text":"<p>NIST es el acr\u00f3nimo de Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda \\(National Institute of Standards and Technology\\,en ingl\u00e9s\\) dependiente del Departamento de Comercio de EE.UU.</p> <p>El  Marco de Ciberseguridad del NIST  ayuda a los negocios de todo tama\u00f1o a comprender mejor sus riesgos de ciberseguridad\\, administrar y reducir sus riesgos\\, y proteger sus redes y datos.</p> <p>La implementaci\u00f3n se realiza\\, siguiendo estas cinco f\u00e1ses:  identificaci\u00f3n protecci\u00f3n\\, detecci\u00f3n\\, respuesta y recuperaci\u00f3n .</p> <p>Identificaci\u00f3n.</p> <p>Identifica equipos\\, software y en general activos.</p> <p>Pol\u00edticas de seguridad en la que se identifique funciones y responsabilidades\\, de personal con acceso a datos delicados.</p> <p>Pasos a seguir para protegerse y limitar da\u00f1o ante ataques.</p> <p></p> <p>2. Protecci\u00f3n</p> <p>Implementar medidas de control\\,</p> <p>- acceso a dispositivos</p> <p>- codificar datos delicados</p> <p>- copias de seguridad</p> <p>- formaci\u00f3n</p> <p></p> <p>3. Detecci\u00f3n</p> <p>Monitorizar sistemas y dispositivos</p> <p>Investigar actividades inusual.</p> <p></p> <p>4. Respuesta</p> <p>Notificar a clientes\\, empleados en riesgo</p> <p>Mantener funcionando operaciones de negocio e investigar ataques</p> <p></p> <p>5. Recuperaci\u00f3n</p> <p>Reparar y restaurar los sistemas afectados por ataques.</p> <p>Mantener informados a empleados y clientes.</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-isoiec-27035","title":"Respuesta a incidentes: ISO/IEC 27035","text":"<p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Identificar\\, detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p> <p>Information security incident management guide</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61","title":"Respuesta a incidentes: SP800-61","text":"<p>Tomando como referencia el NIST.</p> <p>1. Preparaci\u00f3n</p> <p>2. Detecci\u00f3n</p> <p>3. An\u00e1lisis</p> <p>4. Contenci\u00f3n</p> <p>5. Erradicaci\u00f3n</p> <p>6. Recuperaci\u00f3n</p> <p>7. Actividad post-incidente</p> <p>SP800-61 Guide</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_1","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Preparaci\u00f3n</li> </ol> <p>El objetivo principal de esta fase es que  la organizaci\u00f3n se encuentre preparada para responder y actuar frente a un ciberataqu e\\, tomando en cuenta medidas de prevenci\u00f3n y aseguramiento de los sistemas para reducir la superficie de ataque.</p> <p>1.  Tener conformado un equipo de respuesta a incidentes \\, con la preparaci\u00f3n y experiencia para poder atender\\, dar seguimiento y soluci\u00f3n a cualquier incidente de seguridad.</p> <p>2.  Contar con un Plan de Respuesta ante Incidentes\\,  que defina de manera clara y secuencial \\(se recomienda hacerlo a manera de checklist\\)\\, los pasos a seguir ante un incidente de seguridad.</p> <p>3.  Tener preparado Hardware y Software para an\u00e1lisis de incidentes \\, tal como:</p> <p>Software \\(como EDR\\) y/o Hardware para la  __recolecci\u00f3n de datos forenses __ digitales y respaldo de informaci\u00f3n.</p> <p>Equipos  para tareas de  an\u00e1lisis de datos\\, an\u00e1lisis de tr\u00e1fico de red \\, redacci\u00f3n de reportes.</p> <p>Analizadores de paquetes y protocolos de red.</p> <p>4. __ __  __Tener identificada y documentada la infraestructura de TI __ de la organizaci\u00f3n:</p> <p>Diagramas de red y tener  __identificados los activos m\u00e1s importantes __ \\(como servidores cr\u00edticos\\).</p> <p>Tener clara y documentada la  __forma normal actual de operar __ \\(Baseline\\) de la red y aplicaciones.</p> <p>Tener identificada la  __lista de puertos utilizados __ en la red.</p> <p>Hashes  criptogr\u00e1ficos de archivos cr\u00edticos.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_2","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Detecci\u00f3n</li> </ol> <p>En esta fase juega un papel muy importante contar con una  herramienta de monitorizaci\u00f3n y detecci\u00f3n \\, que sea capaz de realizar correlaci\u00f3n de eventos\\, Machine Learning y an\u00e1lisis de comportamientos para alertar cualquier comportamiento inusual y sospechoso sobre la red.</p> <p>Implementar en estas herramientas los casos que tienen que darse en esas herramientas para detectar un determinado incidente.</p> <p>1.  Determinar si se trata de solo un evento \\(sin malas consecuencias para la organizaci\u00f3n\\) o en realidad es un incidente \\(con malas consecuencias para la organizaci\u00f3n\\, como violaci\u00f3n de pol\u00edticas o est\u00e1ndares de seguridad\\).</p> <p>2. Algunos de los  indicadores  o comportamientos m\u00e1s comunes que pueden ser  se\u00f1al de un incidente  son:</p> <p>Existencia de usuarios desconocidos.</p> <p>Procesos o conexiones de red extra\u00f1as.</p> <p>Conexiones de red a la escucha.</p> <p>Llaves de registro inusuales.</p> <p>Tareas agendadas desconocidas\\, o servicios corriendo.</p> <p>3. Tener en cuenta __ los vectores de ataque__ \\, tales como \\(se mencionan los m\u00e1s comunes\\):</p> <p>Dispositivos externos/removibles \\(usb\u2019s\\).</p> <p>Ataques de fuerza bruta \\(Attrition\\).</p> <p>Navegaci\u00f3n\\, Email \\(Spear phishing\\, Bussiness Email Compromise\\).</p> <p>Explotaci\u00f3n de vulnerabilidades \\(de sistema operativo\\, aplicaciones\\).</p> <p>P\u00e9rdida o robo de equipo.</p> <p>Ataques Man in the Middle \\(MIM\\).</p> <p>Depender\u00e1n del tipo de incidente para el que nos estemos preparando.</p> <p>4. Las fuentes m\u00e1s comunes de  indicadores de incidentes  son:</p> <p>Sistemas SIEM.</p> <p>Software Antimalware y Antispam.</p> <p>Soluciones de File Integrity Checking.</p> <p>Servicios de monitoreo e informaci\u00f3n de seguridad y amenazas de terceros\\, Open Source \\(OSINT\\)\\, Comerciales\\, Gubernamentales \\(como CERT\u2019s\\, ISAC\u2019s\\, Data Feeds\\).</p> <p>Logs de sistemas operativos\\, as\u00ed como dispositivos de red \\(como UTM\u2019s \\(IDS e IPS\\)\\, routers\\, switches).</p> <p>Personas dentro y fuera de la organizaci\u00f3n\\, afines al \u00e1rea de Ciberseguridad.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_3","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>An\u00e1lisis</li> </ol> <p>Contar con  personal  altamente calificado para __ analizar\\, investigar y determinar las acciones correctas __ a tomar frente un ciberataque de cualquier categor\u00eda.</p> <p>El equipo de respuesta a incidentes debe trabajar r\u00e1pido para analizar y validar cada incidente\\,  siguiendo un proceso predefinido y documentado cada paso realizado .</p> <p>El an\u00e1lisis inicial debe proveer informaci\u00f3n suficiente para priorizar \\(triage\\) actividades subsecuentes\\, como la contenci\u00f3n del incidente y an\u00e1lisis m\u00e1s profundo de los efectos y alcance del incidente.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Entender comportamientos normales:  El equipo de respuesta a incidentes debe analizar las redes\\, sistemas y aplicaciones de la organizaci\u00f3n\\, para entender cu\u00e1l es su comportamiento normal \\(Baseline\\)\\, de tal manera\\, cuando se presente un comportamiento anormal\\, sea m\u00e1s f\u00e1cil de identificar.</p> <p>Crear una pol\u00edtica de retenci\u00f3n de logs : Crear e implementar esta pol\u00edtica que especifique por cuanto tiempo  los logs deben de mantenerse es de gran utilidad en el an\u00e1lisis porque principalmente los incidentes pueden ser descubiertos despu\u00e9s de varios d\u00edas\\, semanas o meses despu\u00e9s de haber ocurrido \\(UTM\u2019s\\, Antimalware\\, Sistemas\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Realizar correlaci\u00f3n de eventos : La evidencia de un incidente puede ser registrada en logs de varios sistemas \\(UTM\u2019s\\, Antimalware\\, Sistemas operativos\\, aplicaciones\\). Recomendado uso de soluci\u00f3n SIEM.</p> <p>Mantener todos los relojes de los sistemas sincronizados:  Hacer uso de protocolos como NTP\\, con el fin de mantener la sincronizaci\u00f3n entre hosts y evitar que los eventos sean inconsistentes en lo que respecta a su hora de ocurrencia\\, lo que dificulta en gran medida en an\u00e1lisis de incidentes.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Hacer uso de motores de b\u00fasqueda en internet  para investigar incidentes.</p> <p>__Uso de analizadores de tr\u00e1fico de red para la recolecci\u00f3n de datos adicionales __ \\(como Wireshark\\).</p> <p>Filtrado de datos/logs : Una estrategia efectiva es filtrar categor\u00edas de datos significativos como eventos cr\u00edticos e ir avanzando paulatinamente al an\u00e1lisis de datos menos relevantes \\(aunque en muchas ocasiones este tipo de eventos revelan informaci\u00f3n importante sobre el incidente\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Priorizaci\u00f3n del incidente : La priorizaci\u00f3n en el manejo del incidente es quiz\u00e1s\\, es el punto m\u00e1s cr\u00edtico en la toma de decisiones en el proceso del manejo de incidentes.</p> <p>Este debe ser priorizado en basandose en datos relevantes\\, tales como:</p> <p>Impacto  funcional  del incidente: Ninguno\\, Bajo\\, Medio\\, Alto.</p> <p>Impacto del incidente en la  informaci\u00f3n de la organizaci\u00f3n : Ninguno\\, Violaci\u00f3n de Propiedad\\, Perdida de Integirdad.</p> <p>Recuperabilidad  del incidente: Regular\\, No Recuperable.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Notificaci\u00f3n de incidentes:  Definir los contactos y los medios por los cuales el personal debe reportar cualquier incidente de seguridad.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_4","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Contenci\u00f3n</li> </ol> <p>1. Una parte esencial de esta etapa es la  toma de las decisiones \\(por ejemplo\\, apagar un sistema\\, desconectarlo de la red\\, deshabilitar ciertas funciones\\, etc\\). El principal objetivo es  prevenir un mayor da\u00f1o y a su vez mantener las evidencias intactas .</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente . Las organizaciones deben  crear estrategias de contenci\u00f3n por separado\\, para cada tipo de incidente  mayor\\, con criterios documentados y claros\\, para facilitar la toma de decisiones.</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente .</p> Incidente Ejemplo Estrategia de contenci\u00f3n Acceso no autorizado Sucesivos intentos fallidos de login Bloqueo de cuenta C\u00f3digo Malicioso Infecci\u00f3n con virus Desconexi\u00f3n de la red del equipo afectado Acceso no autorizado Compromiso del Root Apagado del sistema Reconocimiento Scanning de puertos Incorporaci\u00f3n de reglas de filtrado en el firewall <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Da\u00f1o potencial y robo de recursos.</p> <p>Necesidad de preservaci\u00f3n de evidencia. \\(Apago o no la m\u00e1quina?\\)</p> <p>Disponibilidad de servicios \\(por ejemplo\\, conectividad de red\\, servicios prove\u00eddos a terceros\\).</p> <p>Tiempo y recursos necesarios para implementar la estrategia.</p> <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Efectividad de la estrategia.</p> <p>Duraci\u00f3n de la soluci\u00f3n \\(workaround de emergencia a llevar a cabo por 4 horas\\, workaround temporal a borrar en 2 semanas\\, soluci\u00f3n permanente\\).</p> <p>En algunos casos se recomienda redirigir al atacante a un sandbox o honeynet\\, para que la organizaci\u00f3n pueda monitorear las actividades del atacante\\, usualmente para reunir evidencia adicional.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>a) Es importante  documentar claramente como toda la evidencia \\, incluyendo sistemas comprometidos\\,  ha sido preservada . Para esto es necesario instrumentar una Cadena de Custodia\\, que documente cuando cualquier evidencia pase de una persona a otra y que incluya detalle y firmas de cada parte involucrada.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>b) La  evidencia debe ser conservada a detall e\\, incluyendo los siguientes datos:</p> <p>Informaci\u00f3n de identificaci\u00f3n \\(ubicaci\u00f3n\\, n\u00fameros seriales\\, modelo\\, Hostname\\, IP\\, MAC del equipo\\).</p> <p>Nombre\\, cargo\\, no. Telef\u00f3nico de cada individuo involucrado en la recolecci\u00f3n o manejo de evidencia durante la investigaci\u00f3n.</p> <p>Fecha y hora de cada manipulaci\u00f3n de evidencia.</p> <p>Ubicaciones de donde fue guardada la evidencia.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>c) __ __  Identificaci\u00f3n de los hosts atacados.  Los siguientes componentes describen las actividades m\u00e1s comunes para la identificaci\u00f3n de hosts atacados:</p> <p>Validar la direcci\u00f3n IP del host atacante.</p> <p>Investigaci\u00f3n del host atacante a trav\u00e9s de motores de b\u00fasqueda \\(search engines\\).</p> <p>Uso de bases de datos de incidentes: IOC\\, Threat Intelligence Platforms</p> <p>Monitorear los canales de comunicaci\u00f3n del atacante.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_5","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Erradicaci\u00f3n</li> </ol> <p>Posterior a la contenci\u00f3n de un incidente\\,  la erradicaci\u00f3n es necesaria \\(aunque no siempre o se realiza en la etapa de recuperaci\u00f3n\\) y es importante  identificar todos los hosts afectados  dentro de la organizaci\u00f3n para que puedan ser recuperados.</p> <p>Algunas de las acciones a realizar en esta etapa son:</p> <p>Eliminar malware.</p> <p>Eliminar usuarios maliciosos o vulnerados.</p> <p>Parcheo de sistemas para mitigar vulnerabilidades utilizadas.</p> <p>Crear nuevas reglas en las soluciones de seguridad.</p> <p>Aplicar un an\u00e1lisis de vulnerabilidades a los sistemas y la red \\(Pen test\\).</p> <p>Depender\u00e1n del tipo de incidente.</p> <p>Las acciones a realizar en esta etapa  d epender\u00e1n del tipo de incidente.  Algunas estrategias de erradicaci\u00f3n de incidentes:</p> Incidente Ejemplo Estrategia de erradicaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_6","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Recuperaci\u00f3n</li> </ol> <p>En esta etapa\\, los administradores:</p> <p>restauran  __ los __  sistemas  __ a su operaci\u00f3n normal__ \\,</p> <p>confirman  __ si est\u00e1n __  funcionando  __ de manera correcta__  y</p> <p>\\(si aplica\\) se  remedian vulnerabilidades  para prevenir incidentes similares.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Restaurar sistemas desde respaldos limpios.</p> <p>Restaurar sistemas desde cero.</p> <p>Instalaci\u00f3n de parches.</p> <p>Cambiar contrase\u00f1as en sistemas locales y recursos de red.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Administradores deben monitorear sistemas para asegurarse de su funcionamiento normal.</p> <p>Continuar probando los sistemas restaurados.</p> <p>Documentar los pasos llevados a cabo.</p> <p>Recuperaci\u00f3n permite a la contenci\u00f3n empezar de nuevo\\, si la actividad maliciosa es detectada de nueva cuenta.</p> <p>Las estrategias de recuperaci\u00f3n depender\u00e1n del incidente</p> Incidente Ejemplo Estrategia de recuperaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de Backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un Rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_7","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Post-incidente (Lecciones aprendidas)</li> </ol> <p>Una de las partes m\u00e1s importantes de la Respuesta a Incidentes es tambi\u00e9n com\u00fanmente omitida:  aprender y mejorar . El equipo de respuesta a incidentes debe evolucionar\\, tomando conciencia y conocimiento de las nuevas amenazas\\, tecnolog\u00edas y lecciones aprendidas.</p> <p>Mantener una reuni\u00f3n de \u201cLecciones Aprendidas\u201d\\, con todas las partes involucradas en un incidente\\, puede ayudar en gran medida a mejorar las medidas de seguridad y el propio proceso de respuesta a incidentes.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 sucedi\u00f3 exactamente y en qu\u00e9 momento \\(fechas y horas\\)?</p> <p>\u00bfC\u00f3mo realiz\u00f3 su trabajo el equipo en la atenci\u00f3n del incidente? \u00bfSe siguieron los procesos documentados? \u00bfFueron los adecuados?</p> <p>\u00bfQu\u00e9 informaci\u00f3n fue necesitada en primera instancia?</p> <p>\u00bfSe tomaron pasos o acciones que pudieron haber inhibido la recuperaci\u00f3n?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 podr\u00eda hacer el equipo de manera diferente la pr\u00f3xima vez que ocurra un incidente similar?</p> <p>\u00bfC\u00f3mo podr\u00eda ser mejorado el mecanismo de compartici\u00f3n de informaci\u00f3n con otras organizaciones?</p> <p>\u00bfQu\u00e9 acciones correctivas se pueden aplicar para prevenir incidentes similares futuros?</p> <p>\u00bfQu\u00e9 indicadores deben ser observados en el futuro para detectar incidentes similares?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 herramientas o recursos adicionales se necesitan para detectar\\, analizar y mitigar futuros incidentes?</p> <p>Otra actividad importante en esta etapa es crear un  \u201cInforme de seguimiento del Incidente\u201c . Este informe podr\u00e1 ser usado como referencia para ayudar al manejo de futuros incidentes similares.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Uso de la informaci\u00f3n recolectada : El estudio de las caracter\u00edsticas del incidente puede revelar la existencia de vulnerabilidades y amenazas sistem\u00e1ticas\\, as\u00ed como cambios en las tendencias de incidentes. Esta informaci\u00f3n puede ser tomada en cuenta para la realizaci\u00f3n del proceso de an\u00e1lisis de riesgos\\, lo que a su vez llevar\u00e1 a selecci\u00f3n e implementaci\u00f3n de controles adicionales.</p> <p>Las organizaciones deben focalizarse en recolectar informaci\u00f3n accionable\\, en lugar de recabar informaci\u00f3n simplemente porque est\u00e1 disponible.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>M\u00e9tricas sugeridas para la recolecci\u00f3n de incidentes son:</p> <p>N\u00famero de incidentes atendidos: Se recomienda enfocarse en los incidentes de mayor relevancia o que necesitaron de un mayor esfuerzo por parte del equipo de respuesta a incidentes para su resoluci\u00f3n.</p> <p>Tiempo utilizado por cada incidente.</p> <p>An\u00e1lisis objetivo de cada incidente: Con esto se puede determinar qu\u00e9 tan efectiva fue la respuesta y resoluci\u00f3n del mismo.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Retenci\u00f3n de la evidencia : Las organizaciones deben establecer una pol\u00edtica para definir por cuanto tiempo se resguardar\u00e1 la evidencia de un incidente. GRS \\(General Records Schedule\\)\\, especifica que los registros de incidentes deben resguardarse por un periodo de 3 a\u00f1os.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#playbook","title":"Playbook","text":"<p>Playbook :  Hace referencia a un documento de instrucciones elaborado por un cuerpo t\u00e9cnico\\, en el que se describen las distintas jugadas que se van a utilziar. Tiene sentido\\, si consideramos la respuesta a incidentes como un conjunto de acciones a realizar como respuesta al incidente\\, las cuales\\, por cierto\\, deben estar en perfecta sincronizaci\u00f3n dentro de la organizaci\u00f3n. Estas acciones est\u00e1n centradas en dar respuesta a un incidente concreto.</p> <p></p> <p>Un  SOC  con un  playbook  tiene la ventaja de poder centrarse solo en las alertas que importan\\, y en las  acciones muy dirigidas a solucionar el problema .</p> <p>El prop\u00f3sito de un playbook es proporcionar a todos los miembros de una organizaci\u00f3n una  clara comprensi\u00f3n de sus responsabilidades  respecto de las normas de ciberseguridad y las pr\u00e1cticas aceptadas antes\\, durante y despu\u00e9s de un incidente de seguridad.</p> <p>Todas las organizaciones tienen planes para diferentes incidentes que podr\u00edan afectar la resistencia del negocio si no est\u00e1n preparados.</p> <p>Una vez que el equipo de respuesta a incidentes est\u00e1 definido y es consciente de su posici\u00f3n\\, es necesario poner en marcha  los pasos clave de acci\u00f3n de un incidente de ciberseguridad . Estos incluyen</p> <p>Detecci\u00f3n de incidentes</p> <p>Acciones de respuesta</p> <p>Comunicaci\u00f3n</p> <p>Es un\u00e1nime en distintos organismos internacionales la necesidad de al menos  contar Playbook para los casos m\u00e1s conocidos de Ciberataques .</p> <p></p> <p>Preparaci\u00f3n : \u201cTodo lo necesario para ejecutar el playbook\u201d</p> <p>Identificaci\u00f3n : \u201cRecopilaci\u00f3n y an\u00e1lisis de toda la informaci\u00f3n relativa al incidente\u201d</p> <p>Contenci\u00f3n : \u201cAcciones inmediata para contener el incidente ej: Aislar de la red el equipo\u201d</p> <p>Remedio : \u201cAcciones que reparar el da\u00f1o y eviten su repetici\u00f3n\u201d</p> <p>Recuperaci\u00f3n : \u201cAcciones para restablecer el servicio\u201d</p> <p>Repercusiones : \u201cDeber\u00eda de redactarse un informe de crisis que ser\u00e1 distribuido entre todos los stakeholders\u201d</p> <p>Mejora continua : \u201cComo respondemos mejor\u201d</p> <p>\u00bfQu\u00e9 playbook necesita mi empresa?\\, b\u00e1sicamente deben conversar con su matriz de riesgos que contemple Ciberriesgos y est\u00e9 acorde al giro del negocio.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ejemplo-playbook","title":"Ejemplo Playbook","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ejemplo-playbook-ejemplo-de-infeccion-de-gusanos","title":"Ejemplo Playbook: Ejemplo de infecci\u00f3n de gusanos","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.avsoftware.com.mx/respuesta-a-incidentes-de-ciberseguridad-guia-de-nist/#1603043331556-26ebd2a3-9ac2</p> <p>https://blog.netdatanetworks.com/que-hacer-en-caso-de-un-ciberataque</p> <p>https://playbooks.flexibleir.com/</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#actividad","title":"Actividad","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#actividad-i","title":"Actividad I","text":"<p>Traducir la plantilla en castellano:</p> <p>https://github.com/IES-Rafael-Alberti/incident-response-plan-plantilla</p> <p>Crear un plan de respuesta a incidentes partiendo de la plantilla.</p> <p>Crear e incorporar un conjunto de playbook b\u00e1sicos.</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/","title":"IS U4.1.2. Playbook","text":"","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#41-playbook","title":"4.1 PLAYBOOK","text":"<p>RA3 c) Se ha realizado la investigaci\u00f3n de incidentes de ciberseguridad.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#1-playbook","title":"1. Playbook","text":"","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#que-es-un-playbook-de-respuesta-a-incidentes-de-ciberseguridad","title":"\u00bfQu\u00e9 es un playbook de respuesta a incidentes de ciberseguridad?","text":"<p>MSc. Ing. Sebasti\u00e1n A. V.</p> <p>\u2694Advanced Cybersecurity Consultant and Educator\u25ab\ufe0fMSc Cyberterrorism and Cyberwarfare\u25ab\ufe0fMSc in IT/OT\u25ab\ufe0f Civil Engineer in Computer Science\u25ab\ufe0fCEH Practical\u25ab\ufe0feCIR\u25ab\ufe0feJPT\u25ab\ufe0feCDFP\u25ab\ufe0fMITRE ATT&amp;CK THDE AE CTI PTM SOC</p> <p>21 art\u00edculos Seguir</p> <p>25 de agosto de 2023</p> <p>Abrir lector interactivo</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#respuesta-a-incidentes-lo-que-necesitas-saber","title":"\ud83d\udee1\ufe0f** ****Respuesta a Incidentes:** Lo que Necesitas Saber \ud83d\udee1\ufe0f","text":"<p>Un** ****runbook** se enfoca en tareas t\u00e9cnicas y operativas espec\u00edficas, un** ****playbook** aborda respuestas estrat\u00e9gicas y coordinadas a eventos o incidentes. Es com\u00fan que dentro de un playbook de ciberseguridad se haga referencia a un runbook espec\u00edfico para llevar a cabo una tarea t\u00e9cnica detallada. \ud83d\udd04</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#runbook-vs-playbook-para-incidentes-de-ciberseguridad","title":"RUNBOOK vs PLAYBOOK para Incidentes de Ciberseguridad \ud83d\udd0d","text":"<p>Ambos t\u00e9rminos, Runbook y Playbook, son ampliamente utilizados en el mundo de la ciberseguridad y las operaciones IT, pero tienen prop\u00f3sitos y aplicaciones distintas. Veamos las diferencias clave:</p> <p>\ud83d\udcd8** ****RUNBOOK** \ud83d\udcd8</p> <ol> <li>Definici\u00f3n: \ud83d\udcdd Es un conjunto detallado de procedimientos operativos est\u00e1ndar que describe c\u00f3mo realizar una tarea espec\u00edfica o una serie de tareas. Funciona casi como un manual t\u00e9cnico.</li> <li>Objetivo: \ud83c\udfaf Automatizar tareas rutinarias y operaciones t\u00e9cnicas.</li> <li>Contenido: \ud83d\udee0\ufe0f Instrucciones paso a paso, scripts, decisiones automatizadas, y detalles t\u00e9cnicos.</li> <li>Aplicaci\u00f3n: \ud83d\udca1 Generalmente se usa en operaciones IT para administrar y resolver problemas comunes de sistemas y aplicaciones.</li> <li>Ejemplo: \ud83c\udf10 Si un servidor se cae, el runbook puede tener instrucciones detalladas sobre c\u00f3mo reiniciarlo, verificar su estado, y validar que todos los servicios est\u00e1n funcionando correctamente.</li> </ol> <p>\ud83d\udcd2** ****PLAYBOOK** \ud83d\udcd2</p> <ol> <li>Definici\u00f3n: \ud83d\udcdd Es una gu\u00eda estrat\u00e9gica que detalla las acciones a seguir en respuesta a eventos espec\u00edficos, como incidentes de ciberseguridad.</li> <li>Objetivo: \ud83c\udfaf Coordinar respuestas efectivas y eficientes a incidentes y situaciones de crisis.</li> <li>Contenido: \ud83d\udee0\ufe0f Protocolos, responsabilidades, procesos de comunicaci\u00f3n, y pasos a seguir durante y despu\u00e9s de un incidente.</li> <li>Aplicaci\u00f3n: \ud83d\udca1 Se utiliza principalmente en equipos de respuesta a incidentes de ciberseguridad para guiar la respuesta ante eventos de seguridad espec\u00edficos.</li> <li>Ejemplo: \ud83c\udf10 En caso de un ataque de phishing, el playbook puede guiar al equipo sobre c\u00f3mo identificar el ataque, qui\u00e9n debe ser notificado, c\u00f3mo comunicar el incidente a stakeholders, y qu\u00e9 pasos t\u00e9cnicos seguir para mitigar el da\u00f1o.</li> </ol> <p>\u00bfQu\u00e9 es una respuesta a incidentes? \ud83e\udd14</p> <p>Antes de adentrarnos en el tema, es posible que no est\u00e9s familiarizado con el t\u00e9rmino \"respuesta a incidentes\". Seg\u00fan Varonis, la respuesta a incidentes se refiere al proceso de limpieza y recuperaci\u00f3n cuando se detecta una violaci\u00f3n de ciberseguridad. Estas infracciones pueden denominarse tambi\u00e9n como \"incidentes de ciberseguridad\". Es fundamental contar con un plan y un equipo especializado que se encargue de gestionar el incidente, con el objetivo de minimizar da\u00f1os y costos de recuperaci\u00f3n.</p> <p>\ud83d\udcda** ****Analizando el concepto: Playbook de Respuesta a Incidentes** \ud83d\udcda</p> <p>Si hablamos en t\u00e9rminos coloquiales, en espa\u00f1ol un \"playbook\" podr\u00eda compararse con un libro de instrucciones detallado por un cuerpo t\u00e9cnico, similar al que se utiliza en deportes como el f\u00fatbol, donde se describen las distintas estrategias o jugadas a implementar. Considerando la respuesta a incidentes como un conjunto de acciones bien coordinadas, esta comparaci\u00f3n tiene mucho sentido.</p> <p></p> <p>Seg\u00fan incidenteresponse.com, todas las organizaciones tienen planes para enfrentar diferentes incidentes que, de no estar bien gestionados, podr\u00edan impactar negativamente en la continuidad del negocio. El prop\u00f3sito de un playbook es garantizar que todos los integrantes de una organizaci\u00f3n tengan una clara comprensi\u00f3n de sus deberes y responsabilidades en relaci\u00f3n a las normas de ciberseguridad, antes, durante y despu\u00e9s de un incidente de seguridad.</p> <p>\ud83d\udcd6** ****\u00bfQu\u00e9 contiene un Playbook de Respuesta a Incidentes?** \ud83d\udcd6</p> <ul> <li>Identificaci\u00f3n: Pasos detallados sobre c\u00f3mo identificar el incidente.</li> <li>Notificaci\u00f3n: Proceso de notificaci\u00f3n a las personas o entidades relevantes.</li> <li>Medidas de Seguridad: Protocolos a implementar para garantizar la seguridad.</li> <li>Gesti\u00f3n: Estrategias para abordar y resolver el incidente.</li> <li>Comunicaci\u00f3n: Plan detallado para mantener informados a empleados, clientes y otros stakeholders.</li> <li>Contactos: Lista de individuos o entidades clave para la gesti\u00f3n del incidente.</li> </ul> <p>\ud83c\udfaf** ****Objetivo Principal** \ud83c\udfaf</p> <p>El principal prop\u00f3sito de un playbook de respuesta a incidentes es garantizar que las empresas u organizaciones est\u00e9n preparadas para enfrentar cualquier situaci\u00f3n de emergencia. Es esencial que cada miembro est\u00e9 informado y sepa qu\u00e9 hacer en caso de incidente, permitiendo as\u00ed minimizar impactos y resolver situaciones de manera r\u00e1pida y eficaz.</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#definiendo-los-pasos-del-playbook","title":"\ud83d\udccc** ****Definiendo los Pasos del Playbook** \ud83d\udccc","text":"<p>\ud83d\udcca** ****El Contexto** \ud83d\udcca</p> <p>Seg\u00fan SANS, con el aumento en la sofisticaci\u00f3n de los ciberataques, es esencial que las organizaciones refuercen sus capacidades de detecci\u00f3n y respuesta a incidentes. Las herramientas de monitorizaci\u00f3n y la correlaci\u00f3n de eventos son fundamentales en la gesti\u00f3n de incidentes. Sin embargo, dada la vasta variedad de ataques, es vital tener procesos adaptativos y vers\u00e1tiles. \ud83d\udee0\ufe0f Al dise\u00f1ar un playbook eficiente, se puede mejorar la capacidad de detectar y actuar frente a diferentes amenazas.</p> <p>La idea resuena en m\u00faltiples organizaciones y plataformas globales: tener un playbook para los escenarios m\u00e1s comunes de ciberataques es imprescindible. \ud83c\udf10</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#que-base-usar-para-clasificar-los-ciber-incidentes","title":"\u00bfQue base usar para clasificar los ciber incidentes?","text":"<p>** ****MITRE ATT&amp;CK** ofrece un detallado marco de t\u00e1cticas y t\u00e9cnicas usadas por adversarios, permitiendo a los defensores anticipar y contrarrestar amenazas. Por otro lado, la** ****Taxonom\u00eda de ENISA** proporciona un marco estandarizado para reportar y compartir informaci\u00f3n sobre incidentes de ciberseguridad en Europa. Ambos son herramientas valiosas en el \u00e1mbito de la ciberseguridad, pero se usan en diferentes contextos y con diferentes prop\u00f3sitos. \ud83d\udd04</p> <p>\ud83d\udcd8** ****MITRE ATT&amp;CK** \ud83d\udcd8</p> <ol> <li>Definici\u00f3n: \ud83d\udcdd ATT&amp;CK (Adversarial Tactics, Techniques, and Common Knowledge) es un marco creado por MITRE que detalla t\u00e1cticas, t\u00e9cnicas y procedimientos (TTP) usados por los adversarios contra sistemas Windows, macOS, Linux, y m\u00f3viles.</li> <li>Objetivo: \ud83c\udfaf Ayudar a los defensores a entender las acciones de los adversarios y desarrollar defensas m\u00e1s efectivas.</li> <li>Contenido: \ud83d\udee0\ufe0f Describe el \"ciclo de vida\" de un ataque, desde la recolecci\u00f3n de informaci\u00f3n inicial hasta la ejecuci\u00f3n del ataque y la persistencia en el sistema objetivo.</li> <li>Aplicaci\u00f3n: \ud83d\udca1 Usado por equipos de ciberseguridad para simular ataques, entrenar al personal, mejorar la detecci\u00f3n y respuesta, y fortalecer la postura de seguridad.</li> <li>Ejemplo: \ud83c\udf10 Si un atacante utiliza spear-phishing como t\u00e9cnica de entrada, ATT&amp;CK proporcionar\u00eda informaci\u00f3n sobre c\u00f3mo detectar, mitigar y responder a esa t\u00e9cnica espec\u00edfica.</li> <li>Fuente: **** https://attack.mitre.org/</li> </ol> <p>\ud83d\udcd2** ****Taxonom\u00eda de ENISA** \ud83d\udcd2</p> <ol> <li>Definici\u00f3n: \ud83d\udcdd Es un marco establecido por la Agencia Europea de Ciberseguridad (ENISA) para clasificar y entender los diferentes tipos de incidentes de ciberseguridad.</li> <li>Objetivo: \ud83c\udfaf Proporcionar un lenguaje com\u00fan para que las organizaciones europeas compartan informaci\u00f3n sobre incidentes de manera coherente y efectiva.</li> <li>Contenido: \ud83d\udee0\ufe0f Clasificaciones y descripciones de incidentes, que permiten a las organizaciones identificar y comunicar incidentes de manera estandarizada.</li> <li>Aplicaci\u00f3n: \ud83d\udca1 Usado por organizaciones y equipos de respuesta a incidentes en Europa para informar y compartir informaci\u00f3n sobre incidentes de ciberseguridad.</li> <li>Ejemplo: \ud83c\udf10 Si una organizaci\u00f3n en Europa sufre un ataque DDoS, la taxonom\u00eda de ENISA les ayudar\u00eda a clasificar y reportar ese incidente de manera que otras organizaciones puedan entender y aprender de \u00e9l.</li> <li>Fuente: https://www.enisa.europa.eu/publications/reference-incident-classification-taxonomy</li> </ol>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#ciclo-de-respuesta-de-27035","title":"\ud83d\udd04** ****Ciclo de Respuesta de 27.035** \ud83d\udd04","text":"<ol> <li>Preparaci\u00f3n: \ud83d\udccb Equiparse con todas las herramientas y protocolos necesarios para activar el playbook.</li> <li>Identificaci\u00f3n: \ud83d\udd0d Recoger y analizar toda la informaci\u00f3n relacionada con el incidente.</li> <li>Contenci\u00f3n: \ud83d\udeab Acciones inmediatas para limitar el da\u00f1o, por ejemplo, aislando un equipo comprometido de la red.</li> <li>Remedio: \u2699\ufe0f Implementar soluciones que reparen el da\u00f1o y prevengan futuras recurrencias.</li> <li>Recuperaci\u00f3n: \ud83d\udcbc Tomar medidas para restaurar los servicios y sistemas afectados.</li> <li>Repercusiones: \ud83d\udcd1 Redactar un informe de crisis para ser compartido entre todos los stakeholders.</li> <li>Mejora Continua: \ud83c\udf31 Evaluar y adaptar la respuesta para enfrentar futuras amenazas de manera m\u00e1s eficiente.</li> </ol> <p>\ud83d\udca1** ****\u00bfQu\u00e9 playbook necesita tu empresa?** \ud83d\udca1</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#la-respuesta-depende-en-gran-medida-de-la-matriz-de-riesgos-que-contemple-los-ciber-riesgos-y-que-este-alineada-con-la-naturaleza-y-objetivos-del-negocio-es-vital-iniciar-un-dialogo-interno-y-definir-estrategias-en-consonancia-con-las-vulnerabilidades-y-amenazas-especificas-de-tu-sector","title":"La respuesta depende en gran medida de la matriz de riesgos que contemple los ciber-riesgos, y que est\u00e9 alineada con la naturaleza y objetivos del negocio. Es vital iniciar un di\u00e1logo interno y definir estrategias en consonancia con las vulnerabilidades y amenazas espec\u00edficas de tu sector. \ud83d\udcc8\ud83e\udd1d","text":"","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#conclusiones","title":"Conclusiones","text":"<p>Si bien los playbook no garantizan prevenci\u00f3n frente a amenazas inesperadas o nuevos tipos de ataques, s\u00ed ofrecen un robusto punto de partida para prevenir** ****\"decisiones impulsivas\"** en momentos de crisis. Poseer un protocolo definido \ud83d\udcdc potencia las respuestas y agiliza los tiempos de acci\u00f3n. Un gran error es pensar que tu empresa es inmune a cualquier incidente. Tarde o temprano, estos sucesos pueden ocurrir. La clave \ud83d\udd11 radica en c\u00f3mo nos preparamos y reaccionamos ante ellos, y c\u00f3mo nos adaptamos bas\u00e1ndonos en lo aprendido.</p> <p>\ud83c\udf1f** ****Ventajas de tener un Playbook de Respuesta a Incidentes:** \ud83c\udf1f</p> <ol> <li>Mejora la Preparaci\u00f3n: \ud83c\udfcb\ufe0f \u2642\ufe0f Un playbook fortalece la preparaci\u00f3n de una empresa frente a incidentes o crisis, asegurando que cada integrante sepa exactamente c\u00f3mo actuar en casos de emergencia, minimizando as\u00ed el impacto y resolviendo el suceso eficientemente.</li> <li>Reduce el Tiempo de Respuesta: \u23f1\ufe0f Al contar con un playbook, se pueden activar protocolos de acci\u00f3n inmediatamente despu\u00e9s de identificar un incidente, agilizando la soluci\u00f3n y reduciendo el impacto en la organizaci\u00f3n.</li> <li>Potencia la Comunicaci\u00f3n: \ud83d\udcde El playbook incluye un plan de comunicaci\u00f3n que detalla la forma en que se deben notificar a empleados, clientes y stakeholders, garantizando que todos est\u00e9n informados y puedan gestionar el suceso adecuadamente.</li> <li>Aumenta la Confianza: \ud83d\udcaa Al contar con un playbook, se transmite un mensaje de preparaci\u00f3n y profesionalismo a empleados y clientes, reforzando su confianza en la capacidad de la organizaci\u00f3n para manejar crisis.</li> <li>Cumplimiento de Normativas: \ud83d\udcdc En algunos contextos, la ley puede requerir que las empresas tengan un plan de respuesta a incidentes. Tener un playbook garantiza el cumplimiento de estas regulaciones, evitando sanciones.</li> </ol> <p>Recuerda: La prevenci\u00f3n es fundamental, pero la adaptabilidad y la resiliencia definen c\u00f3mo una organizaci\u00f3n supera y aprende de los desaf\u00edos. \ud83d\udd04\ud83c\udf10</p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#fuentes","title":"Fuentes:","text":"<ol> <li>FIRST (Forum of Incident Response and Security Teams)</li> <li>SANS Institute</li> <li>GitHub - Buscar playbooks de respuesta a incidentes</li> <li>MITRE ATT&amp;CK</li> <li>CERT/CC</li> <li>NIST - Computer Security Incident Handling Guide</li> <li>CIS (Center for Internet Security)</li> <li>Cybersecurity &amp; Infrastructure Security Agency (CISA)</li> <li>Incident Response Consortium</li> <li>ENISA (European Union Agency for Cybersecurity)</li> </ol>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#referencias-a-playbook","title":"Referencias a Playbook:","text":"<ol> <li>Incident Response Playbook: Phishing</li> <li>Incident Response Playbook: Ransomware</li> <li>Incident Response Playbook: Credential Dump</li> <li>Incident Response Playbook: Malware Outbreak</li> <li>Incident Response Playbook: Suspicious Email</li> <li>Incident Response Playbook: Insider Threat</li> <li>Incident Response Playbook: DDoS</li> <li>Incident Response Playbook: Web Compromise</li> <li>Incident Response Playbook: Lost or Stolen Device</li> <li>Incident Response Playbook: Unauthorized Access</li> <li>Incident Response Playbook: Data Breach</li> <li>Incident Response Playbook: Cloud Compromise</li> <li>Incident Response Playbook: Account Takeover</li> <li>Incident Response Playbook: Suspicious Network Activity</li> <li>Incident Response Playbook: Mobile Device Compromise</li> </ol>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#fuente","title":"Fuente:","text":"<ul> <li>\u00bfQue es un playbook de respuesta a incidentes - Sebastian Vargas</li> </ul>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.1.2.-Playbook/#recursos","title":"Recursos:","text":"<ul> <li>Mitre ATT&amp;CK: https://attack.mitre.org/</li> <li>RE&amp;CT: https://atc-project.github.io/atc-react/</li> <li>RE&amp;CT navigator: https://atc-project.github.io/react-navigator/</li> <li>Charlas: https://github.com/aboutsecurity/Talks-and-Presentations (hay video tb)</li> <li>eBook: https://github.com/Incidentes/Incident-Response-with-Threat-Intelligence</li> </ul> <p>**</p> <p></p>","tags":["IS","Seguridad","Evidencias","Recopilaci\u00f3n","Almacenamiento"]},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/","title":"IS U4.3.1. Ciberresiliencia","text":"<p>Ciberresiliencia</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#ra4","title":"RA4","text":"<p>b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n,   prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p> <p> working in progress </p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#indice","title":"\u00cdNDICE","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#ciberresiliencia","title":"Ciberresiliencia","text":"<p>Resiliencia \\, seg\u00fan RAE : En psicolog\u00eda\\, capacidad que tiene una persona para superar circunstancias traum\u00e1ticas como la muerte de un ser querido\\, un accidente\\, etc.</p> <p>Resiliencia empresarial : se trata de la capacidad de una empresa para afrontar adversidades y recuperar su estado inicial. Esto pone de manifiesto la fortaleza de una organizaci\u00f3n para adaptarse a los cambios.</p> <p>Cuando la empresa entra en el terreno digital\\, surge la  ciberresiliencia</p> <p>Tal y como define el Instituto Nacional de Ciberseguridad \\(INCIBE\\)\\, la  ciberresiliencia  es:</p> <p>_ \"La capacidad para resistir\\, proteger y defender el uso del ciberespacio de los atacantes\"._</p> <p></p> <p>Es muy com\u00fan confundir conceptos como ciberseguridad y ciberresiliencia. Aunque el enfoque es similar\\, los procesos difieren entre s\u00ed. Estas son las principales diferencias:</p> <p>Ciberseguridad : conjunto de tecnolog\u00edas inform\u00e1ticas y medidas preventivas destinadas a  proteger la empresa ante cualquier brecha de seguridad \\, ya sea robo de datos o acceso a la red corporativa. Por ejemplo\\, el cifrado de datos.</p> <p>Ciberresiliencia : este concepto unifica la tecnolog\u00eda de ciberseguridad y la resiliencia empresarial con el objetivo de gestionar un ciberataque sin fallos y\\, sobre todo\\,  ofrecer continuidad del negocio ante un ataque .</p> <p> \u201c  _El mundo nos rompe a todos... _ </p> <p> despu\u00e9s algunos son fuertes en los lugares rotos. </p> <p>Ernest Hemingway</p> <p>\u00bfCausas por las que una empresa no es todo lo resiliente que desear\u00eda ante un ciberatque?</p> <p></p> <p>Las empresas\\, en general  est\u00e1n poco preparadas  para resistir frente a este tipo de ataques\\, debido principalmente a:</p> <p>Falta de medida s t\u00e9cnicas para mitigarlos\\,</p> <p>Poca preparaci\u00f3n  de los sistemas para detener este tipo de ataques\\,</p> <p>Falta de formaci\u00f3n o de recursos  para hacerles frente o</p> <p>Falta de pruebas  para evaluar la capacidad real de la organizaci\u00f3n ante cualquier tipo de ataque externo.</p> <p>La mayor\u00eda de organizaciones no est\u00e1n cien por cien preparadas para afrontar ataques inform\u00e1ticos. Esto puede ser por diversas razones:</p> <p>Una  cultura  organizacional que no se centra en la ciberseguridad.</p> <p>Falta de  inversi\u00f3n  en tecnolog\u00edas espec\u00edficas para la detecci\u00f3n y prevenci\u00f3n de malwares.</p> <p>Falta de  formaci\u00f3n  en ciberseguridad.</p> <p>\u00bfQue necesitamos para conseguir ser resilientes?</p> <p></p> <p>Las organizaciones deben estar  preparadas para</p> <p>dar respuestas r\u00e1pidas a este tipo de ataques\\, permitiendo que los servicios que prestan no se vean interrumpidos\\,</p> <p>__fortaleciendo sus capacidades __ de</p> <p>identificaci\u00f3n\\, detecci\u00f3n\\, prevenci\u00f3n\\, contenci\u00f3n\\, recuperaci\u00f3n\\, cooperaci\u00f3n y mejora continua contra las ciberamenazas.</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#pasos","title":"Pasos","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#implementar-la-ciberresiliencia","title":"Implementar la ciberresiliencia","text":"<p>\u00bfC\u00f3mo implementar la ciberresiliencia?</p> <p>Dada la diversidad de las organizaciones\\, su complejidad interna y las interdependencias entre ellas\\, no se puede generalizar una forma de implementar la ciberresiliencia.</p> <p>En cualquier caso\\, es fundamental iniciar un proceso de adaptaci\u00f3n y considerar que se debe extender a todo nuestro ecosistema \\(partners\\, proveedores\\, clientes\\,\u2026\\).</p> <p>Se deben establecer los siguientes pasos:</p> <p>Priorizar  los  servicios \\, seg\u00fan el  impacto \\(econ\u00f3mico\\, medioambiental\\, p\u00fablico y social\\, personas afectadas\\) que su p\u00e9rdida o deterioro pueda ocasionar.</p> <p>Conocer y priorizar  seg\u00fan su  criticidad  las  amenazas  que afectan a los servicios.</p> <p>Implementar  acciones preventivas  contra actuales y futuras amenazas.</p> <p>Desarrollar  procesos de remediaci\u00f3n  para minimizar el da\u00f1o que pueden producir los incidentes.</p> <p>__Detectar vulnerabilidades __ continuamente y remediarlas para reducir la superficie de ataque.</p> <p>Desarrollar y mantener procesos de comunicaci\u00f3n  dentro de la empresa.</p> <p>Ejecutar constantemente  __acciones de mejora __ que minimicen los riesgos\\, y repetir el ciclo de pasos para la mejora continua.</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#analisis-de-evidencias-e-investigacion-del-incidente","title":"An\u00e1lisis de evidencias e investigaci\u00f3n del incidente","text":"<p>5. Recuperaci\u00f3n</p> <p></p> <p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#pasos_1","title":"Pasos","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#identificacion-de-activos","title":"Identificaci\u00f3n de activos","text":"<p>Un m\u00e9todo de clasificaci\u00f3n de activos que simplifica el proceso consiste en dividirlos en 6 categor\u00edas diferentes\\, tal y como se muestra en la imagen.</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe.es/protege-tu-empresa/blog/ciberresiliencia-marco-medicion</p> <p>https://www.incibe.es/extfrontinteco/img/File/Estudios/int_ciber_resiliencia_marco_medicion.pdf</p> <p>https://www.incibe-cert.es/blog/ciberresiliencia-clave-sobreponerse-los-incidentes</p> <p>https://agenciab12.com/noticia/que-es-ciberresiliencia-como-influye-seguridad</p> <p>https://agenciab12.com/noticia/medidas-prevencion-ciberataque</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#actividad","title":"Actividad","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#actividad-ii","title":"Actividad II","text":"<p>Recopilaci\u00f3n y an\u00e1lisis de evidencias sobre un incidente:</p> <p> 3.abc.01 - Recolecci\u00f3n\\, almacenamiento y an\u00e1lisis </p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#_1","title":"IS U4.3.1. Ciberresiliencia","text":""},{"location":"section2/u05/","title":"UD 5 - Implemetaci\u00f3n de medidas","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 4 - Implementaci\u00f3n de medidas de ciberseguridad:</p> <ul> <li>Desarrollar procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes.</li> <li>Implantar capacidades de ciberresiliencia.</li> <li>Establecer flujos de toma de decisiones y escalado interno y/o externo adecuados.</li> <li>Tareas para reestablecer los servicios afectados por incidentes.</li> <li>Documentaci\u00f3n</li> <li>Seguimiento de incidentes para evitar una situaci\u00f3n similar.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 4. Implementa medidas de ciberseguridad en redes y sistemas respondiendo a los incidentes detectados y aplicando las t\u00e9cnicas de protecci\u00f3n adecuadas</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han desarrollado procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes de ciberseguridad m\u00e1s habituales.</li> <li>b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n, prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</li> <li>c) Se ha establecido un flujo de toma de decisiones y escalado de incidentes interno y/o externo adecuados.</li> <li>d) Se han llevado a cabo las tareas de restablecimiento de los servicios afectados por un incidente hasta confirmar la vuelta a la normalidad.</li> <li>e) Se han documentado las acciones realizadas y las conclusiones que permitan mantener un registro de \u201clecciones aprendidas\u201d.</li> <li>f) Se ha realizado un seguimiento adecuado del incidente para evitar que una situaci\u00f3n similar se vuelva a repetir.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: se pueden desarrollar procedimientos de actuaci\u00f3n bas\u00e1ndonos en los que nos ofrece Incibe en los siguientes casos. Con este juego el alumnado puede trabajar posibles incidentes y desarrollar a partir de ellos sus soluciones.</li> <li>Criterio de evaluaci\u00f3n e: se puede montar una herramienta de ticketing, como FIR, para llevar el control de los incidentes, desde su origen hasta su resoluci\u00f3n. Se puede usar una herramienta como DFIRTrack para llevar las evidencias y artefactos de los incidentes de ciberseguridad.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/","title":"IS U5.1.0. RespuestaAIncidentes","text":""},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#planes-de-respuesta","title":"Planes de respuesta","text":"<p>RA4</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>El curso se trabaja sobre los problemas que debe de hacer frente un profesional que desarrolle su carrera en un equipo de CSIRT con objeto de dar respuesta a un incidente de seguridad (IR). Cuando se produce un incidente de seguridad desde el CIO de la organizaci\u00f3n hasta la persona que est\u00e1 recolectando las evidencias deben de estar coordinadas durante todo el proceso. Una respuesta ante un incidente hoy requiere que todos los recursos y empleados de la organizaci\u00f3n, medios de comunicaciones, marketing est\u00e9n alineados. Durante el curso se ver\u00e1n y se dar\u00e1n respuesta a las siguientes premisas:</p> <ul> <li>Entender que es un proceso IR</li> <li>Como construir un equipo de respuesta de forma satisfactoria</li> <li>Que tipo de infraestructura necesita un equipo de respuesta de incidentes</li> <li>Casos pr\u00e1cticos de ataques en tiempo real bajo la plataforma de iHackLabs</li> <li>Liderar la investigaci\u00f3n de los incidentes</li> <li>Recolectar y manejar las evidencias</li> <li>Analizar Evidencias en Windows y MAC</li> <li>Observar y analizar Malware</li> <li>Escribir reportes</li> </ul> <p>Un cambio est\u00e1 sucediendo en toda la industria de la ciberseguridad tanto en la parte de pentesters como los especialistas en ciberseguridad. Desde el punto de vista de ciberseguridad la respuesta de incidentes se ha  convertido en un componente importante de la tecnolog\u00eda de la informaci\u00f3n IT. Los ataques se han vuelto no solo m\u00e1s numerosos y diversos, sino que adem\u00e1s son cada vez m\u00e1s peligrosos y da\u00f1inos aumentando su frecuencia de forma preocupante.</p> <p>Es importante entender que no todos los incidentes pueden ser prevenidos, pero disponer de la capacidad de detectar incidentes de forma r\u00e1pida y minimizar la perdida y destrucci\u00f3n de los datos de una organizaci\u00f3n mitigando de esta manera las debilidades que han sido explotadas son tareas que se desarrollan en un grupo CSIRT.</p> <p>Podremos ver el correcto desarrollo de las pautas para dar una respuesta clara y adecuada a cada incidente de seguridad.</p> <p>Debido a que la respuesta de incidentes es un proceso complejo se requiere de practicar y simular incidentes de ciberseguridad dentro de las organizaciones. Adem\u00e1s, los equipos de incidentes de repuesta requieren una vigilancia constante de los procesos internos y externos de la organizaci\u00f3n. Del mismo es vital dise\u00f1ar un plan de comunicaci\u00f3n interno que agilice el proceso y la toma de decisiones ante un incidente. El centro de Recursos y seguridad de las computadoras CSRC del instituto de est\u00e1ndares y tecnolog\u00edas NIST ha desarrollado una serie de gu\u00edas sobre estos eventos.</p> <p>Un gran n\u00famero de gobiernos, agencias, socios de otras organizaciones, contractos dan soporte a la gu\u00eda 800-61r2 de NIST.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#2-que-es-un-incidente","title":"2. \u00bfQu\u00e9 es un incidente?","text":"<p>Para entender que es un incidente, es necesario explicar que es un evento.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#que-es-un-evento","title":"\u00bfQu\u00e9 es un evento?","text":"<p>Cualquier ocurrencia detectada o informada que indique una posible violaci\u00f3n o falla en un sistema. Un evento es una situaci\u00f3n de inter\u00e9s en cuanto a la seguridad y podr\u00eda se\u00f1alar o indicar que algo de importancia est\u00e1 o puede suceder en el sistema.</p> <p>Ejemplos de eventos:</p> <ul> <li>Servicios mal configurados.</li> <li>Sistemas con claves conocidas.</li> <li>Conexiones no autorizadas a un sistema.</li> <li>Fallas en el funcionamiento de un servicio.</li> <li>Notificaci\u00f3n de accesos no autorizados.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#que-es-un-incidente","title":"\u00bfQu\u00e9 es un incidente?","text":"<p>Un incidente es un evento inesperado o no deseado que puede impactar o impacta a la red o los sistemas de una instituci\u00f3n de forma que pueda comprometer la confidencialidad de la informaci\u00f3n, la estabilidad del servicio o la integridad de estos.</p> <p>Ejemplos de incidentes</p> <ul> <li>Amenazas a la seguridad f\u00edsica de seres humanos.</li> <li>Ataques a Sistemas de manejo de informaci\u00f3n o cualquier parte de la infraestructura de red del backbone del CEDIA.</li> <li>Ataques a cualquier gran equipo de servicio p\u00fablico, sea multiusuario o con prop\u00f3sito dedicado.</li> <li>Compromiso de informaci\u00f3n en cuentas restringidas confidenciales o instalaciones de software, en particular aquellas usadas para sistemas de administraci\u00f3n que contengan informaci\u00f3n confidencial, o aquellos usuarios para administraci\u00f3n del sistema.</li> <li>Ataques de negaci\u00f3n de servicio sobre cualquiera de los 3 puntos anteriores.</li> <li>Ataques en gran escala de cualquier tipo.</li> <li>Amenazas, acoso y cualquier otra ofensa criminal en el que est\u00e9n involucradas cuentas de usuario.</li> <li>Compromiso de cuentas de usuarios individuales en sistemas multiusuarios.</li> <li>Compromiso de sistemas de escritorio.</li> <li>Falsificaci\u00f3n y suplantaci\u00f3n y cualquier otra violaci\u00f3n de reglas locales y regulaciones.</li> <li>Negaci\u00f3n de servicio en cuentas de usuario individuales.</li> </ul> <p>Otra forma de ver que es un incidente se establece en base al alcance de lo que el personal de la organizaci\u00f3n es capaz de realizar y de las medidas que se toman para ello. Desde el punto de vista de definici\u00f3n se establece la premisa de que el personal entienden y saben cu\u00e1les son las responsabilidades de cada equipo. Para ello, la organizaci\u00f3n dispondr\u00e1 de una pol\u00edtica que defina cu\u00e1les son las responsabilidades de cada equipo, y si no existe, se deber\u00eda de crear una a la mayor brevedad. Es importante entender que no existe una pol\u00edtica universal, pero deber\u00edamos de considerar los siguientes puntos cuando dise\u00f1emos una:</p> <ul> <li>Intento de causar da\u00f1o.</li> <li>Fue realizado por una persona.</li> <li>Implica un recurso inform\u00e1tico.</li> </ul> <p>Los dos primeros son consistentes con muchos tipos de incidentes que no tienen que ver con la tecnolog\u00eda, tales como asaltos, robos o incendios provocados, aunque si no hay intento de causar da\u00f1o, tambi\u00e9n se consideran incidente. Por ejemplo, y algo m\u00e1s tecnol\u00f3gico, ser\u00eda un an\u00e1lisis de vulnerabilidades que no tienen como intenci\u00f3n hacer da\u00f1o, sin embargo, aunque no intencionado, podr\u00eda provocar un incidente en alg\u00fan sistema.</p> <p>El tercer punto requiere de una persona evalu\u00e9 y excluya todos los eventos que son fallos aleatorios y que est\u00e1n fuera de nuestro control. Por ejemplo, un firewall se apague de forma inmediata por un fallo de corriente y deje sin servicio a varias aplicaciones cr\u00edticas de la organizaci\u00f3n.</p> <p>Algunos de los incidentes que est\u00e1n relacionados con ordenadores o dispositivos tecnol\u00f3gicos serian los siguientes:</p> <ul> <li>Datos robados, incluyendo datos sensibles, email y documentos.</li> <li>Robo de fondos, incluyendo datos de acceso, tarjetas de cr\u00e9dito.</li> <li>Extorsi\u00f3n.</li> <li>Accesos no autorizados a ordenadores o servidores.</li> <li>Presencia de malware, incluyendo acceso remoto o spyware.</li> <li>Posesi\u00f3n ilegal o no autorizados de materiales.</li> </ul> <p>El impacto de estos incidentes podr\u00eda ir desde tener que reconfigurar algunos dispositivos o reemplazarlos, hasta tener que gastar una gran cantidad de dinero en remediar el problema, hasta incluso que la empresa tenga que disolverse. Las decisiones que tome, antes, durante y despu\u00e9s de que ocurra un incidente afectar\u00e1n directamente el impacto global.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#3-contexto-de-la-respuesta-a-un-incidente","title":"3. Contexto de la respuesta a un incidente","text":""},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#31-que-es-la-respuesta-a-incidente","title":"3.1 \u00bfQu\u00e9 es la respuesta a incidente?","text":"<p>La respuesta de incidentes es la coordinaci\u00f3n, estructuraci\u00f3n y resoluci\u00f3n de un incidente detectado. A modo resumido podr\u00edamos definirlo en los siguientes puntos de m\u00e1s abajo:</p> <ul> <li>Confirmar d\u00f3nde y c\u00f3mo ha sucedido el incidente y si este realmente ha sucedido o se trata de un falso positivo.</li> <li>Proveer de una r\u00e1pida detecci\u00f3n y sobre todo contenci\u00f3n.</li> <li>Determinar y documentar el alcance del incidente (si se han producido da\u00f1os, de que tipo, si se han producido perdidas monetarias etc.)</li> <li>Prevenir una respuesta sin sentido o que no est\u00e9 bien documentada.</li> <li>Determinar y promover los hechos que se han producido y actuar en consecuencia con la informaci\u00f3n obtenida.</li> <li>Minimizar la perdida de negocio y las operaciones normales de una organizaci\u00f3n.</li> <li>Restaurar las operaciones normales.</li> <li>Minimizar los da\u00f1os ocasiones sobre los componentes que fueron comprometidos.</li> <li>Administrar la percepci\u00f3n del incidente p\u00fablicamente en caso de ser necesario, para no impactar en la credibilidad y confianza de nuestros clientes.</li> <li>Tomar acciones criminales o acciones civiles contra los autores que provocaron el incidente.</li> <li>Formar y realizar ejercicios de simulaci\u00f3n con los equipos de respuesta de incidentes</li> </ul> <p>Por lo general la respuesta de incidentes consiste en investigar que ha ocurrido y evaluar los da\u00f1os producidos. Un equipo de remediaci\u00f3n elimina las amenazas de un atacante sobre el entorno y gestiona las comunicaciones a empleados de la compa\u00f1\u00eda, socios, publicas etc.</p> <p>Todas las respuestas a un incidente se gestionan a trav\u00e9s de una metodolog\u00eda que envuelve el tiempo de los ataques, los da\u00f1os ocasionados, el grado de compromiso que ha sufrido la organizaci\u00f3n entre otros puntos.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#32-objetivos-de-la-respuesta-de-incidentes","title":"3.2 \u00bfObjetivos de la respuesta de incidentes?","text":"<p>El primer objetivo de una respuesta ante un incidente es eliminar de forma efectiva la amenaza de la organizaci\u00f3n y del entorno, del mismo modo minimizar los da\u00f1os y restaurar las operaciones lo m\u00e1s r\u00e1pido posible. Este objetivo se realiza a trav\u00e9s de las siguientes actividades:</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#investigacion","title":"Investigaci\u00f3n.","text":"<ul> <li>Determinar el vector de ataque inicial.</li> <li>Determinar el malware y las herramientas a utilizar.</li> <li>Determinar qu\u00e9 sistemas fueron infectados y c\u00f3mo.</li> <li>Determinar qu\u00e9 tipo de ataque sofisticado se ha sufrido y los da\u00f1os producidos.</li> <li>Determinar si el incidente contin\u00faa abierto.</li> <li>Establecer un tiempo de inicio y final del incidente.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#remediacion","title":"Remediaci\u00f3n.","text":"<p>Usando la informaci\u00f3n obtenida de la investigaci\u00f3n, desarrollar e implementar un plan de remediaci\u00f3n.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#32-como-se-produce-un-incidente","title":"3.2 \u00bfC\u00f3mo se produce un incidente?","text":"<p>Aunque trabajamos en ayudar a las organizaciones a trav\u00e9s de pentest continuos en detectar las brechas de seguridad en sus infraestructuras este tipo de test tienen una carencia frente a un atacante real debido a que este \u00faltimo dispone de un tiempo infinito para buscar, localizar e incluso explotar una vulnerabilidad con \u00e9xito. Todos los sectores conectados a internet sufren hoy en d\u00eda ataques constantes independientemente del sector que sean o se dediquen.</p> <p>Todos los criminales que se dedican a extorsionar o robar informaci\u00f3n a trav\u00e9s de ataques cibern\u00e9ticos se exponen poco o apenas asumen riesgos. Debemos recordar que se produzcan incidentes es algo inevitable, pero sin embargo podemos aplicar las lecciones aprendidas sobre los casos que se van produciendo para evitar que vuelvan a ocurrir o incluso actuar con mayor agilidad frente al incidente.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#caso-practico","title":"CASO PRACTICO","text":"<p>De modo que sea m\u00e1s f\u00e1cil de entender como se produce un incidente de seguridad analizaremos y comentaremos el siguiente caso pr\u00e1ctico.</p> <p>Durante varios meses el atacante obtuvo informaci\u00f3n confidencial de diferentes recursos suplementando a los usuarios internos a trav\u00e9s de sus propias cuentas de usuarios que hab\u00edan sido comprometidas. El atacante rompi\u00f3 el cifrado del HASH LM de las cuentas del dominio debido a que la compa\u00f1\u00eda no usaba una pol\u00edtica fuerte de contrase\u00f1as, adem\u00e1s de que los administradores del domino no hab\u00edan deshabilitado un sistema de cifrado que se considera inseguro como LM.</p> <p>Al cabo del tiempo la compa\u00f1\u00eda detecto un volcado de los datos en pastebin y del mismo modo una copia de la base de datos, momento en el que la empresa fue consciente del ataque. Seg\u00fan los an\u00e1lisis forenses el atacante estuvo dentro de la organizaci\u00f3n aproximadamente durante 4 semanas sin ser detectado y sin alertar que se produc\u00eda un comportamiento an\u00f3malo en la red.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#33-concepto-del-ciclo-de-vida-de-un-ataque","title":"3.3 Concepto del ciclo de vida de un ataque","text":"<p>El ciclo de vida de un ataque consiste en siete etapas. Aunque se menciona que sean siete pasos o etapas no siempre es as\u00ed y en ocasiones dependiendo del ataque las etapas puedes variar, sin embargo, como proceso natural un incidente se adapta y debe de ser detectado en las etapas tempranas de un ataque.</p> <p>Este concepto se ha incluido a modo resumen porque es importante entender como un atacante realiza los ataques y porque diferentes fases o etapas podr\u00eda pasar de modo que seg\u00fan el momento se detecte el incidente sepamos el grado o no de compromiso de la organizaci\u00f3n y del mismo modo su impacto. Est\u00e1 informaci\u00f3n es muy interesante cuando estas en la fase de remediaci\u00f3n</p> <p></p> <ol> <li>Compromiso Inicial: Un atacante logra con \u00e9xito ejecutar c\u00f3digo malicioso en uno o m\u00e1s sistemas de la organizaci\u00f3n. Lo habitual es que este primer paso se inicie debido a ingeniera social sobre alg\u00fan usuario de la organizaci\u00f3n a trav\u00e9s de phishing o que haya logrado de forma satisfactoria explotar alguna vulnerabilidad de un portal web. Del mismo modo es posible que el atacante haya logrado explotar con \u00e9xito una vulnerabilidad de software de terceros.</li> <li>Posicionamiento: El atacante logra establecer conexi\u00f3n remota sobre el sistema comprometido, esta fase ocurre inmediatamente despu\u00e9s de la fase de compromiso inicial. Lo habitual es que un atacante establezca una persistencia a trav\u00e9s de una puerta trasera o ejecutando c\u00f3digo binario en el sistema comprometido.</li> <li>Escalar privilegios: El atacante obtiene la manera de elevar los privilegios en los sistemas y por lo tanto dispone de acceso a datos m\u00e1s sensibles. En este paso el atacante realiza diferentes t\u00e9cnicas con el objetivo de lograr acceder a todos los sistemas.</li> <li>Reconocimiento interno: El atacante reconoce el entorno y analiza la configuraci\u00f3n interna de la organizaci\u00f3n para entender mejor su funcionamiento y como lograr acceder a los datos sensibles de los mismos.</li> <li>Movimientos laterales: El atacante salta y pivota en la red buscando sistemas mas cr\u00edticos evadiendo de esta manera las medidas de seguridad de FW o redes en DMZ. Del mismo modo las t\u00e9cnicas m\u00e1s habituales es trav\u00e9s de RDP, VNC, tareas    programadas etc.</li> <li>Mantener Persistencia: El objetivo es instalar servicios ocultos en los sistemas para retomar las conexiones en caso de ser necesario. La persistencia se suele conseguir a trav\u00e9s de VPN, puertas traseras o implementar malware en software legitimo.</li> <li>Ataque exitoso: El atacante ha logrado su objetivo y ha robado los datos de la compa\u00f1\u00eda, ha provocado perdidas internas de informaci\u00f3n o problemas internos. Incluso mantiene un acceso interno para volver a realizar ataques despu\u00e9s de un tiempo.</li> </ol>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#4-el-proceso-que-envuelve-la-respuesta-a-incidentes","title":"4. El proceso que envuelve la respuesta a incidentes","text":"<p>En un proceso IR intervienen varios factores. Las capacidades y recursos de las organizaciones se miden seg\u00fan el n\u00famero de unidades que intervienen en el proceso. Durante un proceso de IR son muchas las compa\u00f1\u00edas que ensamblan equipos compuestos por miembros espec\u00edficos de la organizaci\u00f3n. Siempre se recomienda que sea un miembro quien dirija y coordine durante la respuesta de un incidente. El director habitualmente suele ser un CIO o CISO de la organizaci\u00f3n, esta persona ser\u00eda el punto de conexi\u00f3n entre todas las investigaciones.</p> <p></p> <p>De cualquier modo, es bueno que los miembros que componen un equipo de incidentes durante su intervenci\u00f3n dispongan de las siguientes caracter\u00edsticas:</p> <ul> <li>Tener capacidad de an\u00e1lisis.</li> <li>Buena comunicaci\u00f3n.</li> <li>Atenci\u00f3n a los detalles.</li> <li>Ser estructurados y organizados.</li> <li>Demostrar liderazgo y gran resoluci\u00f3n de problemas.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#41-respuesta-inicial","title":"4.1 Respuesta inicial","text":"<p>Los objetivos principales en este paso incluyen reunir al equipo de respuesta, revisar los datos basados en la red y otros datos f\u00e1cilmente disponibles, determinar el tipo de incidente y evaluar el impacto potencial. El objetivo es reunir suficiente informaci\u00f3n inicial para permitir que el equipo determine la respuesta adecuada.</p> <p>T\u00edpicamente, este paso no implicar\u00e1 recopilar datos directamente del sistema afectado. Los datos examinados durante esta fase usualmente involucran el an\u00e1lisis de la red, el registro y otra evidencia hist\u00f3rica y contextual. Esta informaci\u00f3n le brindar\u00e1 el contexto necesario para ayudar a decidir la respuesta adecuada. Por ejemplo, si se encuentra un troyano bancario en la port\u00e1til del CEO, su respuesta probablemente ser\u00e1 bastante diferente de si se encuentra en el sistema de una recepcionista. Adem\u00e1s, se requiere una investigaci\u00f3n completa, esta informaci\u00f3n ser\u00e1 parte de las pistas iniciales.</p> <p>Algunas tareas comunes que puede realizar durante este paso son:</p> <ul> <li>Entrevistar a la persona que report\u00f3 el problema y recopilar y almacenar todos los posibles detalles que ellos puedan proveerte.</li> <li>Intervenir los equipos de IT, de modo que se revisen los detalles t\u00e9cnicos.</li> <li>Intervenir al personal de negocio y reportar el evento en su contexto y dependiendo de la gravedad.</li> <li>Revisar la red, logs, e identificar qu\u00e9 datos son necesarios para el soporte y la revisi\u00f3n posterior.</li> <li>Documentar todo el procedimiento y detalles recogidos de diferentes fuentes.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#42-investigacion","title":"4.2 Investigaci\u00f3n","text":"<p>El objetivo de una investigaci\u00f3n es determinar los hechos que describen qu\u00e9 sucedi\u00f3, c\u00f3mo sucedi\u00f3, y en algunos casos, qui\u00e9n fue el responsable, aunque este punto puede ser dif\u00edcil de conseguir. En este momento puede ser interesante plantearse contratar ayuda externa.</p> <p>Sin conocer los hechos de lo ocurrido tales como qu\u00e9 acceso obtuvo el atacante o lo que hizo, el equipo no est\u00e1 en una buena posici\u00f3n para pasar a la fase de remediaci\u00f3n.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#indicadores-de-compromiso","title":"Indicadores de compromiso","text":"<p>Una investigaci\u00f3n sin pistas es un proceso perdido. Por lo tanto, la colecci\u00f3n de pistas iniciales es un paso cr\u00edtico en cualquier investigaci\u00f3n. Un error de investigaci\u00f3n com\u00fan en muchas organizaciones es enfocarse solo en encontrar malware.</p> <p>Es poco probable que solo un atacante tenga como objetivo instalar malware, lo m\u00e1s probable es que el atacante tenga en mente robar informaci\u00f3n confidencial, correos o documentos internos o incluso alterar datos.</p> <p>Una vez que el atacante accede a la red y tiene credenciales v\u00e1lidas no es necesario que use malware para acceder a sistemas adicionales. Centrarse solo en el malware probablemente cause que se pierdan hallazgos cr\u00edticos. Recuerde, el foco de cualquier investigaci\u00f3n debe estar en las pistas.</p> <p></p> <p>La creaci\u00f3n de indicadores de compromiso (IOCs) (pronunciado eye-oh-cee) es el proceso de documentar las caracter\u00edsticas y detalles de un incidente de una manera estructurada. Esto incluye todo, desde ambas perspectivas tanto desde el punto de vista de servidor como de red: cosas que van m\u00e1s all\u00e1 del simple malware. Piense en detalles tales eventos de inicio de sesi\u00f3n, mecanismos de persistencia detectados, nombres de dominio e incluso firmas de protocolo de red de malware.</p> <p>El objetivo de los indicadores de compromiso (IOCs) es ayudar a describir, comunicar y encontrar indicios relacionados con un incidente. Debido a que un COI es solo una definici\u00f3n, no proporciona el mecanismo real para encontrar coincidencias.</p> <p>El uso de indicadores de compromiso (IOC) para documentar incidentes es excelente, pero su poder real est\u00e1 en habilitar equipos de RI. El \u00e9xito de una investigaci\u00f3n depende de su capacidad para buscar IOC en toda la empresa e informar sobre ellos de manera autom\u00e1tica, a esto se le llama despliegue de IOC.</p> <p>Despu\u00e9s de implementar los indicadores de compromiso IOC, comenzar\u00e1 a obtener lo que se conoce como detecci\u00f3n. La detecci\u00f3n se produce cuando una herramienta de indicadores de compromiso encuentra una coincidencia para una regla dada.</p> <p>Antes de actuar se debe de revisar la informaci\u00f3n para determinar si no se trata de un falso positivo.</p> <p>Una vez que se identifican los sistemas y tienen indicadores de compromiso activos, el pr\u00f3ximo paso es recopilar datos adicionales para el an\u00e1lisis. El equipo RI crear\u00e1 un plan para recolectar y preservar las evidencias. El factor prioritario es preservar las evidencias y para ello se utilizan procesos que minimicen los cambios del sistema, minimizamos el tiempo de interacci\u00f3n con los equipos y sistemas, sin olvidar de crear la documentaci\u00f3n necesaria. Puede recopilar evidencias del sistema en ejecuci\u00f3n o decidir apagar el sistema y tomar las evidencias con el sistema apagado.</p> <p>La respuesta en vivo es el proceso de recolecci\u00f3n de evidencia m\u00e1s com\u00fan. Una respuesta en vivo es el proceso de usar una herramienta automatizada para recopilar un conjunto est\u00e1ndar de datos sobre un sistema en ejecuci\u00f3n. Los datos incluye tanto informaci\u00f3n vol\u00e1til como no vol\u00e1til que proporcionar\u00e1 r\u00e1pidamente respuestas a preguntas de investigaci\u00f3n. La informaci\u00f3n t\u00edpica recopilada incluye elementos tales como una lista de procesos, conexiones de red activas, registros de eventos, una lista de objetos en un sistema de archivos y el contenido del registro. Tambi\u00e9n podemos recoger el contenido de archivos espec\u00edficos, como archivos de registro o malware sospechoso. Ya que el proceso estar\u00e1 automatizado y el tama\u00f1o de los datos no es demasiado grande, realizamos este tipo de paso en todos los sistemas de inter\u00e9s. Un an\u00e1lisis de respuesta en vivo usualmente ser\u00e1 capaz de confirmar a\u00fan m\u00e1s un compromiso, proporcionar detalles adicionales sobre lo que atacante hizo en el sistema y revela pistas adicionales para investigar.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#preservar-la-evidencia","title":"Preservar la evidencia","text":"<ul> <li>Recolecci\u00f3n de memoria: La recolecci\u00f3n de memoria es m\u00e1s \u00fatil en los casos en que se sospecha que el atacante est\u00e1 utilizando un mecanismo para ocultar sus actividades, tales como un rootkit, y no puede obtener una imagen de disco. La memoria tambi\u00e9n es \u00fatil para casos donde la actividad maliciosa solo reside en la memoria, o deja muy pocos rastros en el disco. En la mayor\u00eda de los sistemas a los que respondemos, la memoria no es recogida, sin embargo. Aunque algunos pueden encontrar esto sorprendente, hemos encontrado que analizar la memoria tiene beneficios limitados para una investigaci\u00f3n que tienen que ser complementados con otros datos, ya que no proporciona datos suficientes para responder preguntas de alto nivel. Aunque es posible que puedas identificar que el malware se est\u00e1 ejecutando en un sistema, es probable que no pueda explicar c\u00f3mo lleg\u00f3 all\u00ed, o qu\u00e9 ha estado haciendo el atacante en ese sistema.</li> <li>Imagen de disco: Las im\u00e1genes de disco forense son duplicaciones completas de discos duros en un sistema. Durante una respuesta a un incidente, es com\u00fan para nosotros recoger im\u00e1genes en un modo \"en vivo\", donde el sistema no se desconecta y nosotros creamos una imagen en medios externos. Debido a que las im\u00e1genes de disco son grandes y pueden tomar mucho tiempo para analizar, normalmente los recopilamos solo para situaciones donde cree que una imagen de disco es necesaria para proporcionar beneficios a la investigaci\u00f3n. Las im\u00e1genes del disco forense son \u00fatiles en los casos en que un atacante realiz\u00f3 muchas acciones durante un largo tiempo, cuando hay preguntas sin respuesta que otras evidencias no concluyeron, o donde esperamos recuperar informaci\u00f3n que creemos que solo estar\u00e1 disponible desde una imagen de disco.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#analizar-los-datos","title":"Analizar los datos","text":"<p>El an\u00e1lisis de datos es el proceso de tomar la evidencia preservada en el paso anterior y realizar un examen que se centra en responder las preguntas de investigaci\u00f3n. Los resultados del an\u00e1lisis normalmente se documentan en un informe formal.</p> <p>Este paso en el ciclo de vida de respuesta de incidente es donde solemos pasar la mayor parte de nuestro tiempo. La organizaci\u00f3n debe decidir qu\u00e9 an\u00e1lisis realizar\u00e1 usted mismo y qu\u00e9 porciones, o valorar subcontratar si no se posee los conocimientos para ello.</p> <p>Hay tres \u00e1reas principales dentro del an\u00e1lisis de datos:</p> <ol> <li>An\u00e1lisis de malware: Durante la mayor\u00eda de las investigaciones, encontramos archivos que son sospecha de malware. Lo habitual es que un equipo dedicado de analistas de malware examina estos archivos. Realicen informes que incluyen indicadores de compromiso y una descripci\u00f3n detallada de la funcionalidad. Aunque disponer de un equipo de malware especializado no se ajusta a la mayor\u00eda de los presupuestos, las organizaciones deber\u00edan considerar invertir en una capacidad b\u00e1sica para clasificar malware sospechoso.</li> <li>An\u00e1lisis de respuesta en vivo: El examen de los datos de respuesta en vivo es uno de los pasos de an\u00e1lisis m\u00e1s cr\u00edticos durante una investigaci\u00f3n. Si est\u00e1s viendo en vivo datos de respuesta, normalmente es porque hay alg\u00fan indicio de actividad sospechosa en un sistema, pero hay detalles limitados. Durante el an\u00e1lisis se debe de intentar encontrar el origen y explicar qu\u00e9 sucedi\u00f3. Si se pierden detalles en esta etapa, podr\u00eda ser que se pase por alto una parte de la actividad del atacante en el resultado final. Los resultados del an\u00e1lisis de respuesta en vivo deber\u00edan ayudar a comprender el impacto que tiene el incidente.</li> <li>Examen forense: Capturar im\u00e1genes de disco durante una respuesta a incidentes es una tarea muy enfocada y sensible al    tiempo. Normalmente deseamos dar resultados un pu\u00f1ado de preguntas realistas que queremos responder, por lo tanto, se    debe de decidir sobre un enfoque que pueda descubrir informaci\u00f3n que responder y luego ejecutar. Si no obtenemos    respuestas, podemos usar un enfoque personal, pero eso depende de cu\u00e1nto tiempo hay y qu\u00e9 esperamos obtener de ello</li> </ol>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#remediar-el-problema","title":"Remediar el problema","text":"<p>Los planes de remediaci\u00f3n variar\u00e1n enormemente, dependiendo de las circunstancias del incidente y el potencial impacto. El plan deber\u00e1 tener en cuenta diversos factores, tales como situaci\u00f3nes legales, comerciales, pol\u00edticas y t\u00e9cnicas. El plan tambi\u00e9n deber\u00eda incluir un protocolo de comunicaci\u00f3n que defina qui\u00e9n en la organizaci\u00f3n dir\u00e1 qu\u00e9, y cu\u00e1ndo.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#seguimiento-de-la-investigacion","title":"Seguimiento de la investigaci\u00f3n","text":"<p>Debe estar definido y ser un procedimiento claro. Durante la fase de investigacion se debe tener mecanismos que permitan rastrear f\u00e1cilmente la informaci\u00f3n cr\u00edtica, asi como compartirla con otros equipos auxiliares y el resto de la organizaci\u00f3n, de modo claro y con liderazgo.</p> <p>Debe de haber un sistema que permita, a traves de un identificador, referirse a un incidente espec\u00edfico, del mismo modo debe permitir  documentar cualquier informaci\u00f3n y evidencia relacionada con un incidente especifico.</p> <ul> <li>Lista de evidencias recolectadas.</li> <li>Lista de sistemas afectados.</li> <li>Lista de todos los ficheros que son de interes.</li> <li>Lista de los datos que se han accedido o robado.</li> <li>Lista de la actividad del atacante.</li> <li>Lista de la red basada en indicadores de compromiso.</li> <li>Lista de host basados en indicadores de compromiso.</li> <li>Lista de cuentas comprometidas.</li> <li>Lista de tareas y quien las ha respondido durante el incidente.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#reporting","title":"Reporting","text":"<p>Como consultores, nuestros informes son fundamentales para nuestros clientes. El desarrollo y la creaci\u00f3n de un informe requiere de tiempo, no es algo trivial y es algo que debemos tener en cuenta durante todo el proceso de investigaci\u00f3n, ya que durante esta fase se descubrir\u00e1n muchos hechos que deber\u00e1n quedar reflejados en el informe.</p> <p>Durante las investigaciones, los hallazgos se basan en numerosos hechos t\u00e9cnicos que, sin la documentaci\u00f3n adecuada, puede ser dif\u00edcil de comunicar. Por tanto, hay que considerar los informes como un entregable final que los equipos de respuesta de incidentes tienen que desarrollar. Los informes no solo proporcionan los resultados documentados consecuencia del esfuerzo realizado, sino que tambi\u00e9n ayudan a focalizar el proceso de investigacion y a realizar investigaciones de calidad. Los informes obligan a reducir la velocidad del proceso de investigacion, documentar los hallazgos en formato estructurado, verificando las evidencias y repasando en lo que sucedi\u00f3.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#preparando-la-gestion-de-los-incidentes","title":"Preparando la gestion de los incidentes","text":"<p>Si la organizaci\u00f3n no dispone de la infraestructura necesaria para responder a los incidentes, la tasa de \u00e9xito es baja o nula. Por tanto, durante la fase de preparacion, la organizaci\u00f3n debera dotar de los recursos necesarios a los equipos de respuesta.</p> <p>Desde un punto de vista t\u00e9cnico debemos de abordar las siguientes preguntas.</p> <ul> <li>\u00bfQue pas\u00f3 exactamente? \u00bfCu\u00e1l es el da\u00f1o y c\u00f3mo entraron los atacantes?</li> <li>\u00bfEl incidente est\u00e1 en curso?</li> <li>\u00bfQu\u00e9 informaci\u00f3n fue robada o accedida?</li> <li>\u00bfQu\u00e9 recursos se vieron afectados por el incidente?</li> <li>\u00bfCu\u00e1les son las responsabilidades en cuanto a notificaci\u00f3n y divulgaci\u00f3n?</li> <li>\u00bfQu\u00e9 pasos se deben realizar para remediar la situaci\u00f3n?</li> <li>\u00bfQu\u00e9 acciones se pueden tomar para proteger a la empresa de incidentes similares?</li> </ul> <p>Aunque en si responder a todas las preguntas parece un desaf\u00edo, es posible siempre y cuando consigamos extraer todos los datos necesarios de los sistemas de informaci\u00f3n, de las comunicaciones etc. Para ello, como comentaremos, es importante que durante el proceso de preparacion, los equipos de respueta tenga definidos los procedimientos adecuados para realizar este trabajo, asi como los recursos neceasrios que para que proceso sea agil y eficiente.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#que-areas-son-necesarias-cubrir","title":"\u00bfQu\u00e9 \u00e1reas son necesarias cubrir?","text":"<ul> <li>Entrenamiento: Esta \u00e1rea incluye temas tales como la identificaci\u00f3n de riesgos, pol\u00edticas para llevar acabo una respuesta de incidentes, definicion de c\u00f3mo trabajar con servicios IT contratados, tipo de infraestructura, formaci\u00f3n del usuario.</li> <li>Entrenamiento especifico al equipo de IR: Esta \u00e1rea incluye procedimientos de comunicaci\u00f3n y recursos tales como hardware, software, capacitaci\u00f3n y documentaci\u00f3n.</li> <li>Preparaci\u00f3n de la infraestructura: Esta \u00e1rea incluye la administraci\u00f3n de activos, instrumentaci\u00f3n, documentaci\u00f3n, herramientas de investigaci\u00f3n, segmentaci\u00f3n y red servicios.</li> <li>Plataformas de simulaci\u00f3n: Es importante realizar ciber ejercicios que val\u00faen a los equipos de respuestas a trav\u00e9s de plataformas de simulaci\u00f3n que ayudan a medir los tiempos de respuesta y cualificar el estado de madurez de los equipos.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#donde-estamos","title":"\u00bfD\u00f3nde estamos?","text":"<p>Si deseamos enfrentarnos a un incidente con \u00e9xito y llevar acabo una respuesta eficiente, el primer paso que deber\u00edamos cubrir es conocer d\u00f3nde estamos y disponer de una foto del riesgo que supone para la organizaci\u00f3n. Para ello se deben de valorar los siguientes puntos que nombramos a continuaci\u00f3n:</p> <ul> <li>\u00bfCu\u00e1les son los activos cr\u00edticos?.</li> <li>\u00bfCu\u00e1les pueden ser las amenazas?.</li> <li>\u00bfGrado de exposici\u00f3n existe?.</li> <li>Requisitos regulatorios que debemos de cumplir.</li> <li>\u00bfQu\u00e9 recursos necesitamos para estar preparados ante un incidente?.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#activos-criticos","title":"Activos cr\u00edticos","text":"<p>Como activo cr\u00edticos podr\u00edamos encuadrar las siguientes opciones:</p> <ul> <li>Mantener y proteger la reputaci\u00f3n de la organizaci\u00f3n.</li> <li>Proteger la informaci\u00f3n secreta, tales como patentes, c\u00f3digo fuente, propiedad intelectual etc.</li> <li>Proteger la informaci\u00f3n personal de la organizaci\u00f3n.</li> <li>Proteger los m\u00e9todos de pago y como se procesan en la organizaci\u00f3n.</li> </ul> <p>Los activos cr\u00edticos son los que generan mayor responsabilidad, pues son los que pueden dar luegar a las mayores p\u00e9rdidas para la organizaci\u00f3n. Una de las principales causas de p\u00e9rdidas de informacion y fallos de seguridad se produce a trav\u00e9s de filtraciones. Considere que las filtraciones pueden venir desde personas, procesos mal definidos o tecnolog\u00edas que han sido da\u00f1adas y como resultado contribuyen a la p\u00e9rdida de informaci\u00f3n o de imagen corporativa.</p> <p>Algunos ejemplos habituales en las organizaciones que exponen sus sistemas a riesgos serian los siguientes puntos:</p> <ul> <li>Servidores web que no han sido actualizados con los parches de seguridad adecuados u otros sistemas orientados a Internet, empleados descontentos y empleados no entrenados o concienciados.</li> </ul> <p>Otro factor a tener en cuenta es la identificacion de quienes pueden exponer los sistemas de la organizacion:</p> <ul> <li>\u00bfCualquier persona conectado a Internet?</li> <li>\u00bfAlguien con acceso f\u00edsico a un edificio corporativo?</li> <li>\u00bfSolamente individuos f\u00edsicamente dentro de un \u00e1rea segura?</li> </ul> <p>Combinar estos factores nos permiten priorizar el riesgo. Por ejemplo, los activos m\u00e1s cr\u00edticos que tienen exposiciones accesibles solo para personas de confianza y para personas dentro de un entorno f\u00edsico controlado pueden presentar menos riesgos que los activos con exposiciones accesibles en Internet. La identificaci\u00f3n del riesgo es cr\u00edtica porque nos permite gestionar y medir el gasto de recursos necesario para eliminar/mitigar el riesto.</p> <p>Pol\u00edticas</p> <p>Es importante desde un punto de vista l\u00f3gico implementar una pol\u00edtica que promueva que la investigaci\u00f3n realizada durante la respuesta a los incidentes llegar\u00e1 a buen t\u00e9rmino. Una pol\u00edtica adecuada, indicar\u00e1 cu\u00e1l es el comportamiento esperado para cada usuario:</p> <ul> <li>La pol\u00edtica de seguridad, que establece qu\u00e9 se espera en cuanto a la protecci\u00f3n de los datos confidenciales y recursos dentro de la organizaci\u00f3n. Las subsecciones de esta pol\u00edtica pueden abordar asuntos de seguridad f\u00edsica, electr\u00f3nica y de datos.</li> <li>La pol\u00edtica de acceso remoto, en la que se establece qui\u00e9n puede conectarse a la organizaci\u00f3n, a qu\u00e9 recursos y qu\u00e9 controles se colocan en las conexiones.</li> <li>La pol\u00edtica de uso de internet, en la que se establece el uso apropiado de Internet, incluida la gestion de la privacidad y la notificaci\u00f3n de la monitorizacion de la navegacion por parte de la organizaci\u00f3n.</li> </ul> <p>Las pol\u00edticas de los equipos de IR deber\u00edan estar centradas y abordar lo que se espera sobre b\u00fasquedas y los recursos que son necesarios y propiedad de la empresa junto con la interceptaci\u00f3n de tr\u00e1fico de red. Si se cubren estos dos asuntos, el IR deber\u00eda ser capaz de realizar la mayor\u00eda de las acciones de investigaci\u00f3n.</p> <pre><code>Ejemplos de Pol\u00edticas: SANS sans.org/security-resources/policies\n</code></pre> <p>Proveedores externos</p> <p>Es una pr\u00e1ctica habitual en muchas organizaciones que algunos servicios de IT est\u00e9n subcontratados. En este punto, si la investigaci\u00f3n de un incidente requiere una tarea que debe de realizarse en un proveedor subcontratado, podemos encontrarnos con problemas a la hora de obtener la informacion que se requiere para la investigacion. Por lo general, existir\u00e1n procedimientos para solicitar la informacion deseada, aunque pueden requerir aprobaciones previas u otra burocracia que ralentiza la ejecucion de la tarea.</p> <p>Tambi\u00e9n puede tener un coste adicional, por ejemplo, a veces se cobra por sistema, para peque\u00f1os cambios de configuraci\u00f3n, tales como basado en host, reglas de firewall. Toda organizaci\u00f3n deber\u00e1 trabajar con sus proveedores para garantizar que estos acuerdos se han tenido en cuenta antes de la contratacion de los servicios, y por tanto, estos procedimientos se incluyen dentro de los acuerdos de nivel de servicio (SLA), por lo que se medir\u00e1 la capacidad de respuesta a solicitudes. Sino se realizan estas gestiones previamente y no se tiene en cuenta antes de la firma del contrato, nos encontraremos con problemas que requer\u00edan de soluciones de emergencia, y que normalmente tendr\u00e1n asociados costes adicionales.</p> <p>Problemas habituales en una organizaci\u00f3n</p> <ul> <li>Privacidad y Regularizaciones: Como investigadores debemos de ver la red de una organizaci\u00f3n como una gran fuente de datos esperando a ser analizada. Pero realizar este analisis no es tan fail, ya que hay que tener en cuenta que la red podr\u00eda abarcar diferentes \u00e1reas geogr\u00e1ficas y por lo tanto diferentes pa\u00edses, cada uno con sus propias leyes y regulaciones de privacidad. No tener esto en cuenta, podria llevanos a problemas si decidimos buscar indicadores de compromiso usando m\u00e9todos que violan las leyes de privacidad y regulaciones locales. Por tanto, si debemos de investigar un incidente que involucra a varios pa\u00edses, debido a que la red es global, deber\u00edamos realizar algunos ejercicios previos para cada pa\u00eds, informandonos de qu\u00e9 tipo de acciones se pueden realizar, y cuales no estarian permitidas.</li> <li>Coordinaci\u00f3n de Equipos: Un reto importante que conlleva los incidentes que abarcan varios pa\u00edses en el mundo es la coordinaci\u00f3n. Ya que tanto el personal como los recursos tecnol\u00f3gicos se distribuir\u00e1n por distintas zonas geogr\u00e1ficas, y mantenerse organizado requerir\u00e1 una planificaci\u00f3n cuidadosa y un esfuerzo constante para garantizar que todos est\u00e1n sincronizados. Debemos de tener en cuenta adem\u00e1s que programar una reuni\u00f3n podr\u00eda llevar d\u00edas porque los participantes est\u00e1n en diferentes zonas horarias.</li> <li>Datos:Durante una investigaci\u00f3n, se recopilan cantidades masivas de datos para su an\u00e1lisis. A menudo, se presenta en forma de conjuntos de datos singularmente grandes, como im\u00e1genes de disco duro. Cuando el n\u00facleo del equipo es responsable de realizar la mayor\u00eda de las tareas de an\u00e1lisis, hay que encontrar una forma de transferir de manera eficiente esta informaci\u00f3n a los miembros del equipo de an\u00e1lisis forense.   Un factor muy importante a tener en cuenta es cuando se env\u00eda dicha informaci\u00f3n a otros pa\u00edses de modo que se debe de tener en cuenta la documentaci\u00f3n necesaria en aduana o las posibles restricciones en los pa\u00edses de origen y de destino.</li> <li>Entrenamiento a los usuarios: Los usuarios o empleados juegan un papel fundamental en la seguridad de una organizaci\u00f3n, conocido como el eslab\u00f3n m\u00e1s d\u00e9bil. Por lo tanto, la entrenamiento del usuario debe ser parte de preparaci\u00f3n previa al incidente. Los usuarios deben saber qu\u00e9 tipos de acciones deben y no deben tomar sobre sus sistemas, desde una perspectiva de seguridad inform\u00e1tica y de respuesta a incidentes.   Los usuarios deben de ser conscientes de los m\u00e9todos m\u00e1s comunes que usan los atacantes para aprovecharse y comprometer la red. Por lo general, nos interesar\u00e1 que los usuarios notifiquen inmediatamente a un superior sobre un incidente de seguridad. Lo habitual es preparar ciber ejercicios que ayuden a concienciar y entrenar a los usuarios.   Un problema espec\u00edfico que debe abordar es el peligro inherente al software de servidor instalado por los usuarios, ya que pueden instalar sus propios servidores web o FTP sin autorizaci\u00f3n, poniendo en peligro la seguridad general de su organizaci\u00f3n. Por lo tanto es muy importante disponer de reglas y pol\u00edticas que regulen qu\u00e9 pueden y qu\u00e9 no pueden hacer los usuarios respecto a los sistemas de la organizaci\u00f3n.</li> </ul> <p>Preparando el equipo de respuesta de incidentes</p> <p>En este apartado se trata de definir la misi\u00f3n, los sistemas de comunicaci\u00f3n, los entregables y todos los recursos necesarios para que el equipo de respuesta de incidentes este preparado.</p> <p>Misi\u00f3n</p> <p>Definir los objetivos de un equipo de respuesta de incidentes, que consistir\u00e1 en ayudar a mantener al equipo con el foco en la incidencia y del mismo modo establecer\u00e1 las expectativas con el resto de su organizaci\u00f3n. Todas las acciones y tomas decisiones deben de estar respaldadas por la gerencia de lo contrario el equipo IR no ser\u00e1 capaz de tomar decisiones y por lo tanto la organizaci\u00f3n sufrir\u00e1 un impacto importante. La misi\u00f3n de un equipos es la siguiente:</p> <ul> <li>Responda a todos los incidentes de seguridad o incidentes sospechosos usando un proceso de investigaci\u00f3n formal.</li> <li>Llevar a cabo una investigaci\u00f3n imparcial completa.</li> <li>Confirmar r\u00e1pidamente si una intrusi\u00f3n o incidente de seguridad realmente ocurri\u00f3.</li> <li>Evaluar el da\u00f1o y el alcance de un incidente.</li> <li>Controlar y contener el incidente.</li> <li>Recolectar y documentar toda la evidencia relacionada con un incidente.</li> <li>Seleccionar el soporte adicional que ayude durante el incidente, cuando sea necesario.</li> <li>Proteger los derechos de privacidad establecidos por la ley y / o la pol\u00edtica corporativa.</li> <li>Proporcionar un enlace a las autoridades legales y de aplicaci\u00f3n de la ley apropiadas.</li> <li>Mantener la confidencialidad apropiada del incidente para proteger la organizaci\u00f3n de una exposici\u00f3n innecesaria.</li> <li>Proporcionar testimonio a expertos.</li> <li>Proporcionar a la administraci\u00f3n recomendaciones que est\u00e9n completamente respaldadas por hechos.</li> </ul> <p>Comunicaci\u00f3n interna</p> <p>Durante un incidente, tendr\u00e1 varios equipos trabajando simult\u00e1neamente: el equipo que act\u00faa como n\u00facleo de la investigaci\u00f3n, equipos auxiliares, equipos legales y administradores de sistemas. Una buena comunicaci\u00f3n es primordial y definir como un incidente comienza es primordial. Cosas a tener en cuenta en la comunicaci\u00f3n Interna:</p> <ul> <li>Cifrado de Email: Se recomienda antes de que ocurra un incidente que todos los equipos dispongan de los certificados S/MIME para el equipo que act\u00faa como n\u00facleo, investigadores y equipos auxiliares.</li> <li>Etiquetado de los documentos: Es importante etiquetar los documentos con frases como confidencial, direcci\u00f3n, publico, es recomendable asesor\u00eda legal en este asunto.</li> <li>Revisar: que solo los integrantes de los equipos est\u00e1n revisando y monitorizando, el resto deben de ser desconectados de la investigaci\u00f3n</li> <li>Identificador del incidente: Use nombres de casos o numeraci\u00f3n para identificar el proyecto asociado al incidente.</li> </ul> <p>Cuanto menos personas conozcan el posible fallo en la seguridad mejor.</p> <p>Comunicaci\u00f3n externa</p> <p>Si el impacto de una intrusi\u00f3n no requerir\u00e1 notificaci\u00f3n o consulta con entidades externas perfecto, sin embargo en caso de tener que hacerlo se debe de tener en cuenta, tanto al gobierno y legislaci\u00f3n, sin mencionar el lenguaje de divulgaci\u00f3n de incidente. Es muy probable que su organizaci\u00f3n necesitar\u00e1 determinar c\u00f3mo se comunica con terceros. La planificaci\u00f3n de una divulgaci\u00f3n potencial es un proceso que deber\u00eda involucrar a un abogado, oficinas de cumplimiento, as\u00ed como \u00bfpersonal de nivel C?. No se puede proporcionar mucha orientaci\u00f3n sobre este tema, excepto gestionarlo bien. Utilizar canales aprobados, como sus relaciones p\u00fablicas (RP) u oficina legal. Una vez revelado que ocurre, puede perder el control de la investigaci\u00f3n. Otras entidades pueden usar lso contratos para demandar y reclamar acciones o pasos de investigaci\u00f3n que est\u00e1n destinados a proteger sus intereses sobre el intereses de su organizaci\u00f3n.</p> <p>Algunas preguntas a considerar al determinar el contenido y el tiempo de cualquier notificaci\u00f3n son:</p> <ul> <li>\u00bfCu\u00e1ndo se tiene que comunicar un incidente? \u00bfInmediatamente despu\u00e9s de ser detectado? \u00bfDespu\u00e9s de que el incidente ha sido confirmado?</li> <li>\u00bfC\u00f3mo se notifica a un tercero? \u00bfQu\u00e9 lenguaje usar para proteger la confidencialidad?</li> <li>Si el incidente justifica una divulgaci\u00f3n p\u00fablica, \u00bfqui\u00e9n es responsable de los contenidos? y \u00bfCu\u00e1les son los tiempos de la comunicaci\u00f3n? \u00bfC\u00f3mo se har\u00e1 la divulgaci\u00f3n?</li> <li>\u00bfQu\u00e9 sanciones o multas pueden aplicar a la organizaci\u00f3n despu\u00e9s de la divulgaci\u00f3n?</li> <li>\u00bfQu\u00e9 restricciones sufrir\u00e1 la investigaci\u00f3n despu\u00e9s de la divulgaci\u00f3n?</li> <li>\u00bfC\u00f3mo afecta la divulgaci\u00f3n?</li> </ul> <p>Entregables</p> <p>La parte m\u00e1s cr\u00edtica de un entregable para los equipos IR son los informes detallados, los cuales pueden variar desde simples actualizaciones de estado de una p\u00e1gina hasta informes detallados que contengan m\u00e1s de 30 p\u00e1ginas, como podr\u00eda ser el ejemplo de un forense. Del mismo modo se deben definir claramente los tiempos e incluir los plazos de finalizaci\u00f3n de cada uno de los objetivos. A continuaci\u00f3n se muestra un ejemplo de entregables.</p> Nombre Proposito Tiempo de entrega Reporte de estado del caso Actualizar a las partes interesadas sobre el progreso de un caso individual. Recurrente: Diariamente. Informe de respuesta en vivo Documentar las evidencias desde el inicio incluso de un sistema aislado. Borrador: Un d\u00eda de trabajo. Final: Dos d\u00edas de trabajo. Informe Forense Documento que detallas las evidencias encontradas en el an\u00e1lisis forenses. Borrador: Cuatro d\u00edas de trabajo. Final: Seis d\u00edas de trabajo. Informe an\u00e1lisis de Malware Documento que detallas las evidencias encontradas en el an\u00e1lisis de malware. Borrador: Tres d\u00edas de trabajo. Final: Cinco d\u00edas de trabajo. Informe investigaci\u00f3n de Intrusi\u00f3n Documento que detallas las evidencias encontradas en la investigaci\u00f3n sobre la intrusi\u00f3n en el sistema. Borrador: Cinco d\u00edas de trabajo. Final: Ocho d\u00edas de trabajo. <p>Equipo forense, recursos:</p> <p>El software que habitualmente se usa durante las investigaciones generalmente se categoriza en ocho categor\u00edas. El equipo de IR debe  inventariar lo que tiene, y analizar si necesita alguna herramienta adicional basada en algunos de los siguientes criterios.</p> <ul> <li>Boot Disk.</li> <li>Sistemas Operativos.</li> <li>Herramientas para hacer im\u00e1genes de Discos.</li> <li>Capturar memoria y an\u00e1lisis.</li> <li>Capturas en vivo y an\u00e1lisis.</li> <li>Indicadores de compromiso.</li> <li>Suites de Forense.</li> <li>Herramientas para el an\u00e1lisis de log.</li> </ul> <p>Recursos P\u00fablicos</p> <ul> <li>awesome-csirt</li> <li>awesome-incident-response</li> </ul> <p>&lt;&lt;&lt; voy por aqui &gt;&gt;&gt;</p> <p>DOCUMENTACI\u00d3N Y TRATAMIENTO</p> <p>La evidencia es la fuente de cualquier investigaci\u00f3n y debe manejarse de manera apropiada. La atenci\u00f3n al detalle y el estricto cumplimiento son obligatorios con respecto al manejo de las evidencias. Si se cuestiona la integridad de la evidencia, los hallazgos de una investigaci\u00f3n pueden dejar de brindarle valor a su organizaci\u00f3n. Para evitar que esto suceda, le recomendamos que implemente pol\u00edticas y procedimientos de gesti\u00f3n de pruebas adecuados. Por lo general, incluir\u00e1n orientaci\u00f3n sobre la recopilaci\u00f3n de pruebas, la documentaci\u00f3n, el almacenamiento y el env\u00edo. Como m\u00ednimo, debe crear procedimientos para hacer cumplir la integridad y prever autenticaci\u00f3n y verificaci\u00f3n. La integridad se logra a trav\u00e9s de lo que llamamos control positivo. El control positivo significa que la evidencia siempre debe estar bajo la supervisi\u00f3n directa del personal autorizado o asegurada en un ambiente o contenedor controlado, como una caja fuerte. Al enviar evidencia, debe enviarse a trav\u00e9s de un proveedor trazable y empaquetarse para que sea invulnerable y est\u00e9 protegida contra los elementos. La autenticaci\u00f3n se logra a trav\u00e9s de la documentaci\u00f3n, que incluye una etiqueta de evidencia y una cadena de custodia. Proporcionamos una etiqueta de evidencia de muestra en el Ap\u00e9ndice B. La validaci\u00f3n se realiza a trav\u00e9s de una suma de comprobaci\u00f3n criptogr\u00e1fica, como MD5, que se calcula en el momento de la recopilaci\u00f3n y se puede validar en cualquier momento. La validaci\u00f3n demuestra que la evidencia no ha cambiado desde el momento de la recopilaci\u00f3n. Puede leer m\u00e1s sobre las reglas de evidencia y las pautas de recopilaci\u00f3n de evidencia del Departamento de Justicia de cada pa\u00eds.</p> <p>REPOSITORIO DE CONOCIMIENTO</p> <p>A medida que su equipo de IR realiza investigaciones e interact\u00faa con otros departamentos de su organizaci\u00f3n, acumular\u00e1n conocimientos que deber\u00edan documentarse en una ubicaci\u00f3n central. Parte de la informaci\u00f3n solo puede estar relacionada con un solo incidente y se puede almacenar en el sistema de gesti\u00f3n de expedientes o expedientes que utiliza el equipo de IR. Otra informaci\u00f3n puede estar relacionada con la organizaci\u00f3n como un todo, y debe estar documentada en un repositorio de conocimientos que el equipo de IR mantiene. El repositorio de conocimiento debe estar l\u00f3gicamente organizado y accesible para que el equipo pueda ubicar efectivamente la informaci\u00f3n relevante. Video \u2013 Construir tu WIKI</p> <p>PREPARANDO LA INFRAESTRUCTURA PARA RESPUESTA DE INCIDENTES</p> <p>Principalmente la infraestructura que necesita un equipo de incidentes suele esta compuesta por las siguientes \u00e1reas:</p> <ul> <li>Configuraci\u00f3n del dispositivo</li> <li>Gesti\u00f3n de activos</li> <li>Realizando una encuesta / Inventario de dispositivos</li> <li>Instrumentaci\u00f3n</li> <li>Pasos adicionales para mejorar la seguridad</li> <li>Configuraci\u00f3n de la red</li> <li>Segmentaci\u00f3n de red y control de acceso</li> <li>Documentaci\u00f3n</li> <li>Instrumentaci\u00f3n</li> <li>Servicios de red</li> </ul> <p>CONFIGURACI\u00d3N DEL DISPOSITIVO</p> <p>Los dispositivos tales como servidores, pc de escritorio y port\u00e1tiles, en su empresa albergan la mayor\u00eda de la evidencias relevantes para una investigaci\u00f3n, y la manera en que estos sistemas est\u00e1n configurados pueden afectar dr\u00e1sticamente el resultado. Por lo tanto, la organizaci\u00f3n debe configurar todos los sistemas de una manera que facilite una investigaci\u00f3n efectiva. Un enfoque com\u00fan que muchas organizaciones toman es centrar su atenci\u00f3n en los sistemas que ellos perciben como importantes. Sin embargo, ese enfoque supone que un atacante realizar\u00e1 acciones que pueden detectarse en el sistema cr\u00edtico \u00fanicamente. En nuestra experiencia, es com\u00fan para un atacante logre usar sistemas no relacionados como el core y por lo tanto cree cientos de evidencias en numerosos sistemas que nos son cr\u00edticos. Un atacante tambi\u00e9n es probable que use credenciales validas para acceder a los sistemas cr\u00edticos de forma coherente con la actividad normal. Si esas evidencias no se capturan ni conservan, muchas preguntas sobre el incidente no podr\u00e1n ser respondidas Para ayudar a garantizar que cubra todos los aspecto tenga en cuenta los dos pasos siguientes:</p> <p>GESTI\u00d3N DE ACTIVOS</p> <p>Cuando los profesionales de seguridad inform\u00e1tica piensan en formas de preparar su entorno para un incidente, la administraci\u00f3n de activos generalmente no es uno de ellos. La clave es entender c\u00f3mo acceder a la informaci\u00f3n cuando la necesite. Debe evaluar la capacidad de su organizaci\u00f3n para proporcionar la siguiente informaci\u00f3n sobre un sistema:</p> <ul> <li>Aprovisionamiento de datos: Imagine una situaci\u00f3n en la que encuentre evidencia de sospecha actividad que ocurri\u00f3   hace dos meses en un sistema espec\u00edfico. Usted busca el host nombre en su sistema de administraci\u00f3n de activos y   descubre que es un servidor que fue reemplazado la semana pasada. En base a esa informaci\u00f3n, usted sabe que el   sistema actual no contendr\u00e1 evidencia asociada con la actividad hace dos meses</li> <li>Propiedad: Muchas organizaciones subcontratan servicios. Si un sistema no es en realidad propiedad de su organizaci\u00f3n,   puede afectar la forma en que responde. El inventario debe indicar claramente a qui\u00e9n pertenece el hardware</li> <li>Unidad de negocio: Conocer que tipo de negocio existe dentro de su organizaci\u00f3n puede ayudar a los investigadores a   construir contexto y hacer una mejor investigaci\u00f3n</li> <li>Ubicaci\u00f3n f\u00edsica: Si necesita obtener una imagen de disco duro, o tomar otra acci\u00f3n que requiere acceso f\u00edsico al sistema, necesitar\u00e1 saber d\u00f3nde est\u00e1 localizado</li> <li>Informaci\u00f3n de contacto: Coordinar la respuesta y ganar acceso a ciertas \u00e1reas es primordial por lo tanto disponer de los contactos es importante</li> <li>Servicios y Roles: Todo investigador debe de conocer los roles y servicios de cada activo de la organizaci\u00f3n</li> <li>Configuraci\u00f3n de la red: Conocer el estado de la red, el tipo de tipolog\u00eda y direccionamiento es importante</li> </ul> <p>ENCUESTA / INVENTARIO</p> <p>La construcci\u00f3n de un sistema est\u00e1ndar de una organizaci\u00f3n, los inventarios de software y otra documentaci\u00f3n rara vez proporcionar\u00e1n la imagen completa de la infraestructura de TI. Durante el curso de una investigaci\u00f3n, encontramos que es com\u00fan encontrar software, hardware o sistemas operativos que la organizaci\u00f3n no conoc\u00eda previamente. Recomendamos realizar una encuesta pr\u00e1ctica (autom\u00e1tica o de otro tipo) para recopilar y verificar la siguiente informaci\u00f3n. Aseg\u00farese de incluir el fabricante, el producto y la informaci\u00f3n de la versi\u00f3n para cada art\u00edculo en uso en su organizaci\u00f3n:</p> <ul> <li>Sistemas operativos (Windows, Mac OS X, Linux, HP-UX)</li> <li>Hardware ( port\u00e1tiles, PC escritorio, servidores, dispositivos m\u00f3viles)</li> <li>Tecnolog\u00edas de red (conmutadores, puntos de acceso inal\u00e1mbrico, firewalls, IDS, proxies)</li> <li>Diagrama de Red</li> <li>Software de seguridad (AV, HIPS, lista blanca)</li> <li>Software de gesti\u00f3n de TI (parche, configuraci\u00f3n y gesti\u00f3n de activos, supervisi\u00f3n del rendimiento)</li> <li>Endpoints (procesamiento de texto, gr\u00e1ficos, ingenier\u00eda, Internet navegadores)</li> <li>Aplicaciones comerciales (mantenimiento de tiempo, gesti\u00f3n de documentos, pago tratamiento)</li> </ul> <p>INSTRUMENTACI\u00d3N</p> <p>Aunque creamos que contamos con toda la informaci\u00f3n almacenada en nuestros sistemas es bueno considerar c\u00f3mo mejorar la configuraci\u00f3n del sistema para facilitar una investigaci\u00f3n, piense en las dos fases iniciales: desarrollo y seguimientos. Por lo tanto es conveniente contestar a las siguientes preguntas. \u00bfQu\u00e9 se puede registrar, capturar o registrar de otro modo que pueda ayudar a determinar qu\u00e9 sucedi\u00f3 en un sistema afectado? Piense en los mecanismos de instrumentaci\u00f3n que ya tiene instalados (medici\u00f3n de software, supervisi\u00f3n del rendimiento y firewalls basados en host o AV) y c\u00f3mo podr\u00eda mejorar su configuraci\u00f3n.</p> <ul> <li>Eventos, errores en logs y logs de acceso</li> <li>Antivirus y sistemas de intrusi\u00f3n</li> <li>Herramientas de investigaci\u00f3n</li> </ul> <p>Adicionalmente es conveniente mejorar la seguridad con algunas recomendaciones tales como:</p> <ul> <li>Establezca una soluci\u00f3n de parcheo para ambos sistemas operativos y aplicaciones.</li> <li>Considere el uso de la autenticaci\u00f3n de dos factores y aplique una buena contrase\u00f1a complejidad.</li> <li>Eliminar el acceso administrativo local de los usuarios.</li> <li>Asegurar que los sistemas tengan firewall y soluciones AV implementadas y configuradas adecuadamente.</li> <li>Retirar los sistemas al final de la vida \u00fatil.</li> <li>Establecer un sistema de gesti\u00f3n de configuraci\u00f3n.</li> <li>Considere la inclusi\u00f3n de listas blancas de aplicaciones.</li> <li>Cumple con DISA STIGs: iase.disa.</li> </ul> <p>CONFIGURACI\u00d3N DE RED</p> <p>En la primera parte hemos cubierto la parte de dispositivos en cuanto a la preparaci\u00f3n de la infraestructura para IR. Ahora cubriremos la parte de red, configuraci\u00f3n de red de \u00e1rea.</p> <p>Existen numerosas gu\u00edas y ubicaciones sobre el proceso de dise\u00f1o de un entorno de red seguro. Por lo tanto vamos a comentar algunas pr\u00e1cticas comunes pueden mejorar enormemente la capacidad de un equipo de IR para realizar investigaciones. Podr\u00edamos centrarnos en cuatro puntos principalmente.</p> <ul> <li> <p>Segmentaci\u00f3n de red y controles</p> </li> <li> <p>Filtadro por niveles</p> </li> <li>Web, chat y proxys de transferencia</li> <li>Doble factor de autenticaci\u00f3n</li> <li>Control de acceso</li> <li>Limitar las conexiones de las estaciones</li> <li>Documentaci\u00f3n</li> <li> <p>Instrumentaci\u00f3n</p> </li> <li> <p>Firewall</p> </li> <li>Sistemas de intrusi\u00f3n</li> <li>Capturas completas de red</li> <li>Emisores de NetfLow</li> <li>Proxy servers</li> <li> <p>Servicios de red</p> </li> <li> <p>Implementaci\u00f3n DNS blackhole</p> </li> </ul> <p>COMENZAR LA INVESTIGACI\u00d3N</p> <p>Cuando se detecta un evento, hemos visto que muchas organizaciones tienden directamente a realizar una investigaci\u00f3n. En algunos casos, los detalles del evento pueden justificar que se requiera de una investigaci\u00f3n r\u00e1pida. En la mayor\u00eda de los casos, sin embargo, creemos que un paso adicional es necesario para iniciar la investigaci\u00f3n de forma correcta. Se han observado muchas investigaciones que comienzan antes de la confirmaci\u00f3n de los hechos b\u00e1sicos. Al igual que con cualquier escenario de la vida real, a medida que recibe nueva informaci\u00f3n, debe siempre evaluarlo de una perspectiva l\u00f3gica, sentido com\u00fan y tu propia experiencia. Los sistemas de detecci\u00f3n pueden tergiversar u omitir eventos o detalles de los mismos. Ning\u00fan sistema es completamente exacto. Debes actuar como guardi\u00e1n, deteni\u00e9ndote entre eventos e investigaciones. Para hacer eso, se debe construir una imagen general del incidente y luego recolectar y verificar los hechos iniciales. Esto permitir\u00e1 desarrollar el contexto adecuadamente. A continuaci\u00f3n, se debe determinar lo que es apropiado, y posible, para el investigaci\u00f3n. Finalmente, este proceso necesita moverse r\u00e1pidamente, porque su la seguridad de la organizaci\u00f3n, los datos electr\u00f3nicos y la reputaci\u00f3n est\u00e1n en juego.</p> <p>RECOGIDA DE HECHOS INCIALES</p> <p>Los hechos iniciales sobre un evento son todo lo que una investigaci\u00f3n necesita para empezar as\u00ed que es una buena idea hacerlo bien. Tambi\u00e9n es importante recopilar informaci\u00f3n adicional sobre esos hechos para que pueda establecer el contexto. Por ejemplo, una direcci\u00f3n IP es m\u00e1s \u00fatil si usted sabe a qu\u00e9 sistema pertenece y qu\u00e9 papel desempe\u00f1a ese sistema. Sin ese contexto, es f\u00e1cil saltar a las conclusiones que con casi toda seguridad sean err\u00f3neas. Es tambi\u00e9n compresible entender que algunos posean mas experiencia con esto, sin embargo otros pueden necesitar algunos consejos para mejorar sus habilidades. Para ayudar, vamos a tocar \u00e1reas que creemos que son beneficiosas para el aprendizaje. Las siguientes secciones cubren una cantidad de listas de verificaci\u00f3n que han sido desarrolladas por profesionales, algunos consejos sobre casos y la importancia de desarrollar una l\u00ednea de tiempo del ataque sufrido.</p> <p>CHECKLIST</p> <p>Cubrimos cinco listas de verificaci\u00f3n en esta secci\u00f3n: el resumen del incidente, c\u00f3mo fue el incidente detalles de sistema individual detectado, detalles de red y detalles del malware.</p> <p>Existen sin duda, otras \u00e1reas para las podr\u00edamos hacer listas de verificaci\u00f3n, pero hemos encontrado que estas son las m\u00e1s comunes y \u00fatiles para una investigaci\u00f3n de respuesta a incidentes. Adem\u00e1s, estas listas de verificaci\u00f3n no son definitivas y es posible que necesite agregar, eliminar o cambiar elementos m\u00e1s apropiadas para su organizaci\u00f3n.</p> <p>La primera lista de verificaci\u00f3n que debe completar se utiliza para recopilar los datos vitales b\u00e1sicos de un incidente; se llama Video \u2013 Desarrollar una Lista de verificaci\u00f3n del Incidente</p> <p>El prop\u00f3sito de esta lista de verificaci\u00f3n es registrar informaci\u00f3n de alto nivel sobre el incidente. La informaci\u00f3n recopilada deber\u00eda proporcionarle con un sentido general de lo que sucedi\u00f3, y deber\u00eda ayudar a identificar las \u00e1reas donde el protocolo de respuesta puede necesitar atenci\u00f3n. Fecha y hora en que se inform\u00f3 el incidente: Registre la fecha y la hora en que sistema individual o autom\u00e1tico inicialmente trajo el problema al equipo del IR atenci\u00f3n. La fecha y hora en que se detect\u00f3 el incidente: Normalmente, el momento en que ocurre un incidente informado es m\u00e1s reciente que el tiempo de detecci\u00f3n real. Aseg\u00farese de rastrear y registrar cuando el problema fue realmente detectado</p> <ul> <li>Informaci\u00f3n de contacto de la persona que documenta la informaci\u00f3n</li> <li>Informaci\u00f3n de contacto de la persona que report\u00f3 el incidente</li> <li>Informaci\u00f3n de contacto de la persona que detect\u00f3 el incidente</li> <li>Si la organizaci\u00f3n fue notificado por una fuente externa, aseg\u00farese de que se hayan registrado todos los detalles y seconserva la comunicaci\u00f3n original y escrita</li> <li>La naturaleza del incidente</li> <li>Proporcionar una categorizaci\u00f3n del tipo de malware detectado, intento de spear phishing, inicios de sesi\u00f3n fallidos, acceso no autorizado,etc</li> <li>El tipo de recursos afectados. A veces, la detecci\u00f3n o notificaci\u00f3n da detalles sobre los datos o recursos que pueden haber sido afectados</li> <li>C\u00f3mo se detect\u00f3 el incidente. Proporcione un breve resumen del m\u00e9todo utilizado para la detecci\u00f3n, como una alerta de antivirus, una alerta de IDS, o que un usuario inform\u00f3 comportamientos sospechosos</li> <li>El identificador \u00fanico y la ubicaci\u00f3n de los equipos afectados por el incidente. Aseg\u00farese de obtener un identificador \u00fanico: la direcci\u00f3n IP puede no ser \u00fanica, debido usemos sistemas como DHCP</li> <li>\u00bfQui\u00e9n accedi\u00f3 a los sistemas desde la detecci\u00f3n?</li> </ul> <p>Es importante registrar qui\u00e9n accedi\u00f3 al sistema desde la detecci\u00f3n, en caso de que los investigadores necesiten informaci\u00f3n sobre que hicieron. A veces, el personal de TI u otros pueden tomar medidas que perciben como \"\u00fatil\", pero son dif\u00edciles de diferenciar de la actividad maliciosa.</p> <ul> <li>\u00bfQui\u00e9n conoce el incidente?</li> <li>Si el incidente est\u00e1 actualmente en curso.</li> <li>Si existe un requisito para mantener incidente abierto y de comunicar sobre ello   Una vez que haya completado la Lista de verificaci\u00f3n del incidente, puede pasar a obtener m\u00e1s detalles sobre \u00e1reas   espec\u00edficas. El orden de finalizaci\u00f3n de las siguientes listas de verificaci\u00f3n debe basarse en las necesidades de la situaci\u00f3n.   Tambi\u00e9n puede solicitar ayuda y completar m\u00e1s de una a la vez.1</li> </ul> <p>RECOGER DATOS ADICIONALES</p> <p>Si los detalles de la detecci\u00f3n parecen precisos y consistentes, el siguiente paso es pasar a recopilar informaci\u00f3n adicional sobre elementos espec\u00edficos relacionados con la detecci\u00f3n. En este caso se debe de bajar un nivel y recopilar detalles sobre los sistemas individuales, la o las redes, y archivos potencialmente maliciosos. Adem\u00e1s, si\u00e9ntase libre de profundizar en otros puntos de datos que hayan sido recolectados en la lista de verificaci\u00f3n o checklist que vimos anteriormente. Detalles del sistema individual: Para cada sistema involucrado, considere recolectar la siguiente informaci\u00f3n. Debe evitar agrupar sistemas en un solo documento, porque es f\u00e1cil pasar por alto los detalles si no se toma el tiempo necesario para preguntar preguntas sobre cada sistema individual.</p> <ul> <li>Localizaci\u00f3n f\u00edsica</li> <li>Etiqueta del servidor</li> <li>Sistema y modelo</li> <li>Sistema instalado</li> <li>Funci\u00f3n del sistema</li> <li>Responsable o administrador del sistema</li> <li>Direcci\u00f3n IP</li> <li>Nombre y si pertenece aun dominio</li> <li>Si almacena informaci\u00f3n critica</li> <li>Si dispone de backups</li> <li>Si el sistema continua conectado a la red</li> <li>Lista de malware y recolecci\u00f3n de datos de log</li> <li>Lista de todos los pasos que han sido tomados</li> <li>Si alg\u00fan datos ha sido preservado, el proceso por el cual se almaceno</li> </ul> <p>Detalles de Red: Documentar los detalles sobre la red es tan importante, incluso en casos donde los detalles de la red inicialmente no parecen ser importantes. A lo m\u00ednimo, considere los siguientes puntos:</p> <ul> <li>Una lista de todas las direcciones IP maliciosas externas o nombres de dominio involucrados</li> <li>Si la supervisi\u00f3n de la red se est\u00e1 llevando a cabo</li> <li>Una lista de los pasos de remediaci\u00f3n que se han tomado</li> <li>Si se conservan datos, qu\u00e9 proceso se est\u00e1 utilizando y d\u00f3nde se encuentra almacenado</li> <li>Actualizaciones de diagramas y configuraciones de red</li> <li>Nombre y si pertenece aun dominio</li> <li>Si almacena informaci\u00f3n critica</li> <li>Si dispone de backups</li> <li>Si el sistema continua conectado a. la red</li> <li>Lista de malware y recolecci\u00f3n de datos de log</li> <li>Lista de todos los pasos que han sido tomados</li> <li>Si alg\u00fan datos ha sido preservado, el proceso por el cual se almaceno</li> </ul> <p>Detalles de Malware: Para cada archivo malicioso relacionado con el incidente, deber\u00e1 documentar los siguientes elementos:</p> <ul> <li>Una lista de todas las direcciones IP maliciosas externas o nombres de dominio involucrados</li> <li>Si la supervisi\u00f3n de la red se est\u00e1 llevando a cabo</li> <li>Una lista de los pasos de remediaci\u00f3n que se han tomado</li> <li>Si se conservan datos, qu\u00e9 proceso se est\u00e1 utilizando y d\u00f3nde se encuentra almacenado</li> <li>Actualizaciones de diagramas y configuraciones de red</li> <li>La fecha y hora de la detecci\u00f3n</li> <li>C\u00f3mo se detect\u00f3 el malware</li> <li>La lista de sistemas donde se encontr\u00f3 el malware</li> <li>El nombre del archivo malicioso y en qu\u00e9 directorio estaba presente</li> <li>Qu\u00e9 determin\u00f3 el mecanismo de detecci\u00f3n, como el nombre y la familia del archivo malicioso</li> <li>Si el malware est\u00e1 activo durante el IR y si las conexiones de red contin\u00faan activas</li> <li>Si se conserva una copia del malware, ya sea manualmente o mediante un proceso de cuarentena</li> <li>El estado de cualquier an\u00e1lisis</li> <li>\u00bfHa sido analizado el malware en la red y el host indicadores de compromiso?   Si el malware fue enviado a terceros, ya sea a trav\u00e9s de un sistema automatizado o por acci\u00f3n directa de un empleado</li> </ul> <p>L\u00cdNEA DE TIEMPO</p> <p>En cada investigaci\u00f3n que realizamos, es nuestro deber mantener una l\u00ednea de tiempo de los eventos. Las l\u00edneas de tiempo nos mantienen organizados, brindan contexto, ayudan a identificar inconsistencias y brindan una imagen general de lo que sucedi\u00f3. Es importante darse cuenta de que los eventos no ser\u00e1n necesariamente ingresados en orden cronol\u00f3gico. Lo que queremos decir es que ingresemos eventos a medida que los revisamos, no cuando ocurren (o ocurrieron). Comparar informaci\u00f3n nueva en una l\u00ednea de tiempo puede ayudar a validar nuevos clientes potenciales. Por ejemplo, si descubre informaci\u00f3n que sugiere que el ataque inicial ocurri\u00f3 seis meses antes de la fecha m\u00e1s antigua que registr\u00f3 actualmente, o bien tiene un gran avance en el caso o est\u00e1 buscando informaci\u00f3n no relacionada. Otro ejemplo podr\u00eda ser con secuencias de eventos. Imagine un escenario en el que descubre que un atacante cre\u00f3 un archivo y luego lo transfiri\u00f3 fuera de la red. Despu\u00e9s de poner la informaci\u00f3n en una l\u00ednea de tiempo, observa que la marca de tiempo de que su servidor proxy el cual registra la transferencia se encuentra antes de la fecha de creaci\u00f3n del archivo. Debido a que el archivo debe existir antes de la transferencia, algo est\u00e1 mal con los datos que est\u00e1 mirando o c\u00f3mo lo est\u00e1 interpretando. La l\u00ednea de tiempo del ataque se centra en actividades significativas de los atacantes. Registre detalles tales como cu\u00e1ndo un atacante accedi\u00f3 a un sistema, cu\u00e1ndo se crearon los archivos, cu\u00e1ndo se transfirieron los datos y cu\u00e1ndo se ejecutaron las herramientas. Tambi\u00e9n es importante registrar la fuente de los datos en la l\u00ednea de tiempo. Por ejemplo, si realiza una entrada que un atacante accedi\u00f3 a un sistema, incluya d\u00f3nde encontr\u00f3 esa informaci\u00f3n. Finalmente, no olvide registrar el identificador del sistema en el que ocurri\u00f3 el evento</p> <p>ALCANCE DEL INCIDENTE</p> <p>En esta secci\u00f3n, analizaremos algunos conceptos b\u00e1sicos que puede utilizar en las primeras etapas de su investigaci\u00f3n que ayudaran a descubrir el alcance y decidir qu\u00e9 pasos dar a continuaci\u00f3n. Cuando decimos \"alcance\", nos referimos a obtener una mejor idea de lo que hizo el atacante.</p> <ul> <li>Examinar datos iniciales</li> <li>Recolecci\u00f3n y revisi\u00f3n preliminar de la evidencia</li> <li>Determinar las acciones en curso</li> </ul> <p>DATOS INICIALES</p> <p>Durante la fase inicial de detecci\u00f3n debemos de tener inicios de que se ha producido un acceso no autorizado o bien se debe tener alguna informaci\u00f3n inicial sobre la detecci\u00f3n. Por ejemplo, si el evento fue una inyecci\u00f3n estructurada de lenguaje de consulta (SQL), debe tener una fecha, hora y las direcciones IP de origen y destino. Tambi\u00e9n querr\u00e1 hablar con el personal que administra el sistema de detecci\u00f3n para ver si hay otros detalles disponibles. De modo que debe de preguntar i puede ver los detalles de la alerta, si puede observar que informaci\u00f3n adicional existe y si es \u00fatil para la investigaci\u00f3n. Pregunte acerca de otros sistemas de detecci\u00f3n y si han detectado algo o una actividad sospechosa; es posible que haya sistemas implementados que podr\u00edan proporcionar informaci\u00f3n adicional. Debe reunir hechos que proporcionen un mejor contexto del evento de detecci\u00f3n. Como hemos visto anteriormente las respuestas a preguntas pueden tener un gran impacto en la forma en que decida continuar. Ahora que ha examinado los datos iniciales, analicemos c\u00f3mo decidir\u00e1 qu\u00e9 evidencia preliminar reunir y qu\u00e9 har\u00e1 con ella.</p> <p>RECOLECCI\u00d3N Y REVISI\u00d3N PRELIMINAR</p> <p>En esta fase, se debe determinar qu\u00e9 fuentes preliminares pueden ser \u00fatiles para capturar evidencias y luego decidir cuales se usaran en la realidad. Finalmente, recopilaremos y revisaremos cada evidencia. Necesitaremos encontrar fuentes de evidencias que nos proporcionen r\u00e1pidamente respuestas iniciales. Idealmente, debemos de identificar las fuentes de evidencia que provienen de varias categor\u00edas y requieren poco esfuerzo a la hora de analizarlas. Por ejemplo, si una pregunta de investigaci\u00f3n es determinar si el malware se ejecut\u00f3 en un sistema, podr\u00edamos considerar las siguientes fuentes de evidencia:</p> <ul> <li>Artefactos que el malware crea directamente en el sistema, como archivos o claves de registro</li> <li>Artefactos del sistema operativo, como el visor de eventos de Windows</li> <li>Artefactos de aplicaciones, como el historial del navegador de Internet</li> <li>Artefactos de red, como los registros de firewall</li> </ul> <p>Esas fuentes son lo que llamamos \"fuentes de evidencia independientes\". Por ejemplo, la existencia de registros de firewall que pueden mostrar las conexiones de red del malware no depende de la presencia de una clave de registro, y viceversa. De tal modo que podr\u00edamos llegar a conclusiones que son m\u00e1s confiables si usamos m\u00faltiples fuentes de evidencia independientes. Si usamos fuentes independientes, la probabilidad de que detecte la ejecuci\u00f3n, si est\u00e1 sucedi\u00f3, es mucho mayor. Hay una serie de razones que justifican lo explicado ya que ser\u00e1 m\u00e1s dif\u00edcil para un atacante eliminar o modificar la evidencia de todas las fuentes de evidencia independientes. Tambi\u00e9n es menos probable que un proceso de rutina sobrescriba o descarte la evidencia en todas las fuentes. Y con m\u00faltiples fuentes independientes, puede verificar informaci\u00f3n cruzada, como la hora exacta en que ocurri\u00f3 un evento, de tal manera que si los datos coinciden los hallazgos ser\u00e1n mas convincentes. Si las fuentes dependen unas de otras o caen dentro de una sola categor\u00eda, como la revisi\u00f3n de los eventos de Windows, la posibilidad de detecci\u00f3n es menor.</p> <p>Video utilizar NetworkMiner Video utilizar NetWitness Video utilizar Wireshark</p> <p>DETERMINAR UNA ACCI\u00d3N</p> <p>Una vez que que hemos reunido y hemos revisados las evidencias preliminares debemos de tomar decisiones son las actividades que debemos de crear, como repartirlas y como catalogarlas. Esas actividades normalmente incluyen preservar la evidencia, pero tambi\u00e9n podr\u00edan ser acciones de postura o contenci\u00f3n. Al igual que con cualquier decisi\u00f3n, hay una serie de factores que podemos pensar que nos ayudaran en la toma de decisiones de modo que nos resulta m\u00e1s \u00fatil responder a las mismas a trav\u00e9s de las siguientes preguntas.</p> <ul> <li>\u00bfLa acci\u00f3n ayudar\u00e1 a responder una pregunta de investigaci\u00f3n?</li> <li>\u00bfLa acci\u00f3n responder\u00e1 mis preguntas r\u00e1pidamente?</li> <li>\u00bfEstamos siguiendo la evidencia?</li> <li>\u00bfEstamos poniendo demasiado esfuerzo en una sola teor\u00eda?</li> <li>\u00bfEstamos usando m\u00faltiples fuentes independientes de evidencias?</li> <li>\u00bfEntendemos el nivel de esfuerzo?</li> <li>\u00bfNos mantenemos sobre el objetivo?</li> <li>\u00bfEstamos rastreando las evidencias m\u00e1s tempranas y recientes de compromiso?</li> <li>\u00bfHemos descubierto algo que requiere de una reparaci\u00f3n inmediata?</li> </ul> <p>Video Cazando una Shell</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/","title":"IS U5.1.1. PlanesDeRespuesta","text":"<p>Planes de respuesta</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ra4","title":"RA4","text":"<p>a) Se han desarrollado procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes de ciberseguridad m\u00e1s habituales. b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n, prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ra4_1","title":"RA4","text":"<p>c) Se ha establecido un flujo de toma de decisiones y escalado de incidentes interno y/o externo adecuados. d) Se han llevado a cabo las tareas de restablecimiento de los servicios afectados por un incidente hasta confirmar la vuelta a la normalidad.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ra4_2","title":"RA4","text":"<p>e) Se han documentado las acciones realizadas y las conclusiones que permitan mantener un registro de \u201clecciones aprendidas\u201d. f) Se ha realizado un seguimiento adecuado del incidente para evitar que una situaci\u00f3n similar se vuelva a repetir.</p> Contenidos I Slide RA4 2 Marco de Ciberseguridad 7 NIST - Marco de Ciberseguridad del NIST 8 Planes de respuesta 14 Respuesta a incidentes: ISO/IEC 27035 15 Respuesta a incidentes: SP800-61 16 Respuesta a incidentes: SP800-611. Preparaci\u00f3n 17 Respuesta a incidentes: SP800-612. Detecci\u00f3n 21 Respuesta a incidentes: SP800-613. An\u00e1lisis 25 Contenidos II Slide Respuesta a incidentes: SP800-614. Contenci\u00f3n 31 Respuesta a incidentes: SP800-615. Erradicaci\u00f3n 38 Respuesta a incidentes: SP800-616. Recuperaci\u00f3n 41 Respuesta a incidentes: SP800-617. Post-incidente (Lecciones aprendidas) 45 Playbook 52 Ejemplo Playbook 58 Bibliograf\u00eda 66 Actividad 68"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#marco-de-ciberseguridad","title":"Marco de Ciberseguridad","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#nist-marco-de-ciberseguridad-del-nist","title":"NIST - Marco de Ciberseguridad del NIST","text":"<p>NIST es el acr\u00f3nimo de Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda \\(National Institute of Standards and Technology\\,en ingl\u00e9s\\) dependiente del Departamento de Comercio de EE.UU.</p> <p>El  Marco de Ciberseguridad del NIST  ayuda a los negocios de todo tama\u00f1o a comprender mejor sus riesgos de ciberseguridad\\, administrar y reducir sus riesgos\\, y proteger sus redes y datos.</p> <p>La implementaci\u00f3n se realiza\\, siguiendo estas cinco f\u00e1ses:  identificaci\u00f3n protecci\u00f3n\\, detecci\u00f3n\\, respuesta y recuperaci\u00f3n .</p> <p>Identificaci\u00f3n.</p> <p>Identifica equipos\\, software y en general activos.</p> <p>Pol\u00edticas de seguridad en la que se identifique funciones y responsabilidades\\, de personal con acceso a datos delicados.</p> <p>Pasos a seguir para protegerse y limitar da\u00f1o ante ataques.</p> <p></p> <p>2. Protecci\u00f3n</p> <p>Implementar medidas de control\\,</p> <p>- acceso a dispositivos</p> <p>- codificar datos delicados</p> <p>- copias de seguridad</p> <p>- formaci\u00f3n</p> <p></p> <p>3. Detecci\u00f3n</p> <p>Monitorizar sistemas y dispositivos</p> <p>Investigar actividades inusual.</p> <p></p> <p>4. Respuesta</p> <p>Notificar a clientes\\, empleados en riesgo</p> <p>Mantener funcionando operaciones de negocio e investigar ataques</p> <p></p> <p>5. Recuperaci\u00f3n</p> <p>Reparar y restaurar los sistemas afectados por ataques.</p> <p>Mantener informados a empleados y clientes.</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-isoiec-27035","title":"Respuesta a incidentes: ISO/IEC 27035","text":"<p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Identificar\\, detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p> <p>Information security incident management guide</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61","title":"Respuesta a incidentes: SP800-61","text":"<p>Tomando como referencia el NIST.</p> <p>1. Preparaci\u00f3n</p> <p>2. Detecci\u00f3n</p> <p>3. An\u00e1lisis</p> <p>4. Contenci\u00f3n</p> <p>5. Erradicaci\u00f3n</p> <p>6. Recuperaci\u00f3n</p> <p>7. Actividad post-incidente</p> <p>SP800-61 Guide</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_1","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Preparaci\u00f3n</li> </ol> <p>El objetivo principal de esta fase es que  la organizaci\u00f3n se encuentre preparada para responder y actuar frente a un ciberataqu e\\, tomando en cuenta medidas de prevenci\u00f3n y aseguramiento de los sistemas para reducir la superficie de ataque.</p> <p>1.  Tener conformado un equipo de respuesta a incidentes \\, con la preparaci\u00f3n y experiencia para poder atender\\, dar seguimiento y soluci\u00f3n a cualquier incidente de seguridad.</p> <p>2.  Contar con un Plan de Respuesta ante Incidentes\\,  que defina de manera clara y secuencial \\(se recomienda hacerlo a manera de checklist\\)\\, los pasos a seguir ante un incidente de seguridad.</p> <p>3.  Tener preparado Hardware y Software para an\u00e1lisis de incidentes \\, tal como:</p> <p>Software \\(como EDR\\) y/o Hardware para la  __recolecci\u00f3n de datos forenses __ digitales y respaldo de informaci\u00f3n.</p> <p>Equipos  para tareas de  an\u00e1lisis de datos\\, an\u00e1lisis de tr\u00e1fico de red \\, redacci\u00f3n de reportes.</p> <p>Analizadores de paquetes y protocolos de red.</p> <p>4. __ __  __Tener identificada y documentada la infraestructura de TI __ de la organizaci\u00f3n:</p> <p>Diagramas de red y tener  __identificados los activos m\u00e1s importantes __ \\(como servidores cr\u00edticos\\).</p> <p>Tener clara y documentada la  __forma normal actual de operar __ \\(Baseline\\) de la red y aplicaciones.</p> <p>Tener identificada la  __lista de puertos utilizados __ en la red.</p> <p>Hashes  criptogr\u00e1ficos de archivos cr\u00edticos.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_2","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Detecci\u00f3n</li> </ol> <p>En esta fase juega un papel muy importante contar con una  herramienta de monitorizaci\u00f3n y detecci\u00f3n \\, que sea capaz de realizar correlaci\u00f3n de eventos\\, Machine Learning y an\u00e1lisis de comportamientos para alertar cualquier comportamiento inusual y sospechoso sobre la red.</p> <p>Implementar en estas herramientas los casos que tienen que darse en esas herramientas para detectar un determinado incidente.</p> <p>1.  Determinar si se trata de solo un evento \\(sin malas consecuencias para la organizaci\u00f3n\\) o en realidad es un incidente \\(con malas consecuencias para la organizaci\u00f3n\\, como violaci\u00f3n de pol\u00edticas o est\u00e1ndares de seguridad\\).</p> <p>2. Algunos de los  indicadores  o comportamientos m\u00e1s comunes que pueden ser  se\u00f1al de un incidente  son:</p> <p>Existencia de usuarios desconocidos.</p> <p>Procesos o conexiones de red extra\u00f1as.</p> <p>Conexiones de red a la escucha.</p> <p>Llaves de registro inusuales.</p> <p>Tareas agendadas desconocidas\\, o servicios corriendo.</p> <p>3. Tener en cuenta __ los vectores de ataque__ \\, tales como \\(se mencionan los m\u00e1s comunes\\):</p> <p>Dispositivos externos/removibles \\(usb\u2019s\\).</p> <p>Ataques de fuerza bruta \\(Attrition\\).</p> <p>Navegaci\u00f3n\\, Email \\(Spear phishing\\, Bussiness Email Compromise\\).</p> <p>Explotaci\u00f3n de vulnerabilidades \\(de sistema operativo\\, aplicaciones\\).</p> <p>P\u00e9rdida o robo de equipo.</p> <p>Ataques Man in the Middle \\(MIM\\).</p> <p>Depender\u00e1n del tipo de incidente para el que nos estemos preparando.</p> <p>4. Las fuentes m\u00e1s comunes de  indicadores de incidentes  son:</p> <p>Sistemas SIEM.</p> <p>Software Antimalware y Antispam.</p> <p>Soluciones de File Integrity Checking.</p> <p>Servicios de monitoreo e informaci\u00f3n de seguridad y amenazas de terceros\\, Open Source \\(OSINT\\)\\, Comerciales\\, Gubernamentales \\(como CERT\u2019s\\, ISAC\u2019s\\, Data Feeds\\).</p> <p>Logs de sistemas operativos\\, as\u00ed como dispositivos de red \\(como UTM\u2019s \\(IDS e IPS\\)\\, routers\\, switches).</p> <p>Personas dentro y fuera de la organizaci\u00f3n\\, afines al \u00e1rea de Ciberseguridad.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_3","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>An\u00e1lisis</li> </ol> <p>Contar con  personal  altamente calificado para __ analizar\\, investigar y determinar las acciones correctas __ a tomar frente un ciberataque de cualquier categor\u00eda.</p> <p>El equipo de respuesta a incidentes debe trabajar r\u00e1pido para analizar y validar cada incidente\\,  siguiendo un proceso predefinido y documentado cada paso realizado .</p> <p>El an\u00e1lisis inicial debe proveer informaci\u00f3n suficiente para priorizar \\(triage\\) actividades subsecuentes\\, como la contenci\u00f3n del incidente y an\u00e1lisis m\u00e1s profundo de los efectos y alcance del incidente.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Entender comportamientos normales:  El equipo de respuesta a incidentes debe analizar las redes\\, sistemas y aplicaciones de la organizaci\u00f3n\\, para entender cu\u00e1l es su comportamiento normal \\(Baseline\\)\\, de tal manera\\, cuando se presente un comportamiento anormal\\, sea m\u00e1s f\u00e1cil de identificar.</p> <p>Crear una pol\u00edtica de retenci\u00f3n de logs : Crear e implementar esta pol\u00edtica que especifique por cuanto tiempo  los logs deben de mantenerse es de gran utilidad en el an\u00e1lisis porque principalmente los incidentes pueden ser descubiertos despu\u00e9s de varios d\u00edas\\, semanas o meses despu\u00e9s de haber ocurrido \\(UTM\u2019s\\, Antimalware\\, Sistemas\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Realizar correlaci\u00f3n de eventos : La evidencia de un incidente puede ser registrada en logs de varios sistemas \\(UTM\u2019s\\, Antimalware\\, Sistemas operativos\\, aplicaciones\\). Recomendado uso de soluci\u00f3n SIEM.</p> <p>Mantener todos los relojes de los sistemas sincronizados:  Hacer uso de protocolos como NTP\\, con el fin de mantener la sincronizaci\u00f3n entre hosts y evitar que los eventos sean inconsistentes en lo que respecta a su hora de ocurrencia\\, lo que dificulta en gran medida en an\u00e1lisis de incidentes.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Hacer uso de motores de b\u00fasqueda en internet  para investigar incidentes.</p> <p>__Uso de analizadores de tr\u00e1fico de red para la recolecci\u00f3n de datos adicionales __ \\(como Wireshark\\).</p> <p>Filtrado de datos/logs : Una estrategia efectiva es filtrar categor\u00edas de datos significativos como eventos cr\u00edticos e ir avanzando paulatinamente al an\u00e1lisis de datos menos relevantes \\(aunque en muchas ocasiones este tipo de eventos revelan informaci\u00f3n importante sobre el incidente\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Priorizaci\u00f3n del incidente : La priorizaci\u00f3n en el manejo del incidente es quiz\u00e1s\\, es el punto m\u00e1s cr\u00edtico en la toma de decisiones en el proceso del manejo de incidentes.</p> <p>Este debe ser priorizado en basandose en datos relevantes\\, tales como:</p> <p>Impacto  funcional  del incidente: Ninguno\\, Bajo\\, Medio\\, Alto.</p> <p>Impacto del incidente en la  informaci\u00f3n de la organizaci\u00f3n : Ninguno\\, Violaci\u00f3n de Propiedad\\, Perdida de Integirdad.</p> <p>Recuperabilidad  del incidente: Regular\\, No Recuperable.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Notificaci\u00f3n de incidentes:  Definir los contactos y los medios por los cuales el personal debe reportar cualquier incidente de seguridad.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_4","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Contenci\u00f3n</li> </ol> <p>1. Una parte esencial de esta etapa es la  toma de las decisiones \\(por ejemplo\\, apagar un sistema\\, desconectarlo de la red\\, deshabilitar ciertas funciones\\, etc\\). El principal objetivo es  prevenir un mayor da\u00f1o y a su vez mantener las evidencias intactas .</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente . Las organizaciones deben  crear estrategias de contenci\u00f3n por separado\\, para cada tipo de incidente  mayor\\, con criterios documentados y claros\\, para facilitar la toma de decisiones.</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente .</p> Incidente Ejemplo Estrategia de contenci\u00f3n Acceso no autorizado Sucesivos intentos fallidos de login Bloqueo de cuenta C\u00f3digo Malicioso Infecci\u00f3n con virus Desconexi\u00f3n de la red del equipo afectado Acceso no autorizado Compromiso del Root Apagado del sistema Reconocimiento Scanning de puertos Incorporaci\u00f3n de reglas de filtrado en el firewall <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Da\u00f1o potencial y robo de recursos.</p> <p>Necesidad de preservaci\u00f3n de evidencia. \\(Apago o no la m\u00e1quina?\\)</p> <p>Disponibilidad de servicios \\(por ejemplo\\, conectividad de red\\, servicios prove\u00eddos a terceros\\).</p> <p>Tiempo y recursos necesarios para implementar la estrategia.</p> <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Efectividad de la estrategia.</p> <p>Duraci\u00f3n de la soluci\u00f3n \\(workaround de emergencia a llevar a cabo por 4 horas\\, workaround temporal a borrar en 2 semanas\\, soluci\u00f3n permanente\\).</p> <p>En algunos casos se recomienda redirigir al atacante a un sandbox o honeynet\\, para que la organizaci\u00f3n pueda monitorear las actividades del atacante\\, usualmente para reunir evidencia adicional.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>a) Es importante  documentar claramente como toda la evidencia \\, incluyendo sistemas comprometidos\\,  ha sido preservada . Para esto es necesario instrumentar una Cadena de Custodia\\, que documente cuando cualquier evidencia pase de una persona a otra y que incluya detalle y firmas de cada parte involucrada.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>b) La  evidencia debe ser conservada a detall e\\, incluyendo los siguientes datos:</p> <p>Informaci\u00f3n de identificaci\u00f3n \\(ubicaci\u00f3n\\, n\u00fameros seriales\\, modelo\\, Hostname\\, IP\\, MAC del equipo\\).</p> <p>Nombre\\, cargo\\, no. Telef\u00f3nico de cada individuo involucrado en la recolecci\u00f3n o manejo de evidencia durante la investigaci\u00f3n.</p> <p>Fecha y hora de cada manipulaci\u00f3n de evidencia.</p> <p>Ubicaciones de donde fue guardada la evidencia.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>c) __ __  Identificaci\u00f3n de los hosts atacados.  Los siguientes componentes describen las actividades m\u00e1s comunes para la identificaci\u00f3n de hosts atacados:</p> <p>Validar la direcci\u00f3n IP del host atacante.</p> <p>Investigaci\u00f3n del host atacante a trav\u00e9s de motores de b\u00fasqueda \\(search engines\\).</p> <p>Uso de bases de datos de incidentes: IOC\\, Threat Intelligence Platforms</p> <p>Monitorear los canales de comunicaci\u00f3n del atacante.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_5","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Erradicaci\u00f3n</li> </ol> <p>Posterior a la contenci\u00f3n de un incidente\\,  la erradicaci\u00f3n es necesaria \\(aunque no siempre o se realiza en la etapa de recuperaci\u00f3n\\) y es importante  identificar todos los hosts afectados  dentro de la organizaci\u00f3n para que puedan ser recuperados.</p> <p>Algunas de las acciones a realizar en esta etapa son:</p> <p>Eliminar malware.</p> <p>Eliminar usuarios maliciosos o vulnerados.</p> <p>Parcheo de sistemas para mitigar vulnerabilidades utilizadas.</p> <p>Crear nuevas reglas en las soluciones de seguridad.</p> <p>Aplicar un an\u00e1lisis de vulnerabilidades a los sistemas y la red \\(Pen test\\).</p> <p>Depender\u00e1n del tipo de incidente.</p> <p>Las acciones a realizar en esta etapa  d epender\u00e1n del tipo de incidente.  Algunas estrategias de erradicaci\u00f3n de incidentes:</p> Incidente Ejemplo Estrategia de erradicaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_6","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Recuperaci\u00f3n</li> </ol> <p>En esta etapa\\, los administradores:</p> <p>restauran  __ los __  sistemas  __ a su operaci\u00f3n normal__ \\,</p> <p>confirman  __ si est\u00e1n __  funcionando  __ de manera correcta__  y</p> <p>\\(si aplica\\) se  remedian vulnerabilidades  para prevenir incidentes similares.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Restaurar sistemas desde respaldos limpios.</p> <p>Restaurar sistemas desde cero.</p> <p>Instalaci\u00f3n de parches.</p> <p>Cambiar contrase\u00f1as en sistemas locales y recursos de red.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Administradores deben monitorear sistemas para asegurarse de su funcionamiento normal.</p> <p>Continuar probando los sistemas restaurados.</p> <p>Documentar los pasos llevados a cabo.</p> <p>Recuperaci\u00f3n permite a la contenci\u00f3n empezar de nuevo\\, si la actividad maliciosa es detectada de nueva cuenta.</p> <p>Las estrategias de recuperaci\u00f3n depender\u00e1n del incidente</p> Incidente Ejemplo Estrategia de recuperaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de Backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un Rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_7","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Post-incidente (Lecciones aprendidas)</li> </ol> <p>Una de las partes m\u00e1s importantes de la Respuesta a Incidentes es tambi\u00e9n com\u00fanmente omitida:  aprender y mejorar . El equipo de respuesta a incidentes debe evolucionar\\, tomando conciencia y conocimiento de las nuevas amenazas\\, tecnolog\u00edas y lecciones aprendidas.</p> <p>Mantener una reuni\u00f3n de \u201cLecciones Aprendidas\u201d\\, con todas las partes involucradas en un incidente\\, puede ayudar en gran medida a mejorar las medidas de seguridad y el propio proceso de respuesta a incidentes.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 sucedi\u00f3 exactamente y en qu\u00e9 momento \\(fechas y horas\\)?</p> <p>\u00bfC\u00f3mo realiz\u00f3 su trabajo el equipo en la atenci\u00f3n del incidente? \u00bfSe siguieron los procesos documentados? \u00bfFueron los adecuados?</p> <p>\u00bfQu\u00e9 informaci\u00f3n fue necesitada en primera instancia?</p> <p>\u00bfSe tomaron pasos o acciones que pudieron haber inhibido la recuperaci\u00f3n?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 podr\u00eda hacer el equipo de manera diferente la pr\u00f3xima vez que ocurra un incidente similar?</p> <p>\u00bfC\u00f3mo podr\u00eda ser mejorado el mecanismo de compartici\u00f3n de informaci\u00f3n con otras organizaciones?</p> <p>\u00bfQu\u00e9 acciones correctivas se pueden aplicar para prevenir incidentes similares futuros?</p> <p>\u00bfQu\u00e9 indicadores deben ser observados en el futuro para detectar incidentes similares?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 herramientas o recursos adicionales se necesitan para detectar\\, analizar y mitigar futuros incidentes?</p> <p>Otra actividad importante en esta etapa es crear un  \u201cInforme de seguimiento del Incidente\u201c . Este informe podr\u00e1 ser usado como referencia para ayudar al manejo de futuros incidentes similares.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Uso de la informaci\u00f3n recolectada : El estudio de las caracter\u00edsticas del incidente puede revelar la existencia de vulnerabilidades y amenazas sistem\u00e1ticas\\, as\u00ed como cambios en las tendencias de incidentes. Esta informaci\u00f3n puede ser tomada en cuenta para la realizaci\u00f3n del proceso de an\u00e1lisis de riesgos\\, lo que a su vez llevar\u00e1 a selecci\u00f3n e implementaci\u00f3n de controles adicionales.</p> <p>Las organizaciones deben focalizarse en recolectar informaci\u00f3n accionable\\, en lugar de recabar informaci\u00f3n simplemente porque est\u00e1 disponible.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>M\u00e9tricas sugeridas para la recolecci\u00f3n de incidentes son:</p> <p>N\u00famero de incidentes atendidos: Se recomienda enfocarse en los incidentes de mayor relevancia o que necesitaron de un mayor esfuerzo por parte del equipo de respuesta a incidentes para su resoluci\u00f3n.</p> <p>Tiempo utilizado por cada incidente.</p> <p>An\u00e1lisis objetivo de cada incidente: Con esto se puede determinar qu\u00e9 tan efectiva fue la respuesta y resoluci\u00f3n del mismo.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Retenci\u00f3n de la evidencia : Las organizaciones deben establecer una pol\u00edtica para definir por cuanto tiempo se resguardar\u00e1 la evidencia de un incidente. GRS \\(General Records Schedule\\)\\, especifica que los registros de incidentes deben resguardarse por un periodo de 3 a\u00f1os.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#playbook","title":"Playbook","text":"<p>Playbook :  Hace referencia a un documento de instrucciones elaborado por un cuerpo t\u00e9cnico\\, en el que se describen las distintas jugadas que se van a utilziar. Tiene sentido\\, si consideramos la respuesta a incidentes como un conjunto de acciones a realizar como respuesta al incidente\\, las cuales\\, por cierto\\, deben estar en perfecta sincronizaci\u00f3n dentro de la organizaci\u00f3n. Estas acciones est\u00e1n centradas en dar respuesta a un incidente concreto.</p> <p></p> <p>Un  SOC  con un  playbook  tiene la ventaja de poder centrarse solo en las alertas que importan\\, y en las  acciones muy dirigidas a solucionar el problema .</p> <p>El prop\u00f3sito de un playbook es proporcionar a todos los miembros de una organizaci\u00f3n una  clara comprensi\u00f3n de sus responsabilidades  respecto de las normas de ciberseguridad y las pr\u00e1cticas aceptadas antes\\, durante y despu\u00e9s de un incidente de seguridad.</p> <p>Todas las organizaciones tienen planes para diferentes incidentes que podr\u00edan afectar la resistencia del negocio si no est\u00e1n preparados.</p> <p>Una vez que el equipo de respuesta a incidentes est\u00e1 definido y es consciente de su posici\u00f3n\\, es necesario poner en marcha  los pasos clave de acci\u00f3n de un incidente de ciberseguridad . Estos incluyen</p> <p>Detecci\u00f3n de incidentes</p> <p>Acciones de respuesta</p> <p>Comunicaci\u00f3n</p> <p>Es un\u00e1nime en distintos organismos internacionales la necesidad de al menos  contar Playbook para los casos m\u00e1s conocidos de Ciberataques .</p> <p></p> <p>Preparaci\u00f3n : \u201cTodo lo necesario para ejecutar el playbook\u201d</p> <p>Identificaci\u00f3n : \u201cRecopilaci\u00f3n y an\u00e1lisis de toda la informaci\u00f3n relativa al incidente\u201d</p> <p>Contenci\u00f3n : \u201cAcciones inmediata para contener el incidente ej: Aislar de la red el equipo\u201d</p> <p>Remedio : \u201cAcciones que reparar el da\u00f1o y eviten su repetici\u00f3n\u201d</p> <p>Recuperaci\u00f3n : \u201cAcciones para restablecer el servicio\u201d</p> <p>Repercusiones : \u201cDeber\u00eda de redactarse un informe de crisis que ser\u00e1 distribuido entre todos los stakeholders\u201d</p> <p>Mejora continua : \u201cComo respondemos mejor\u201d</p> <p>\u00bfQu\u00e9 playbook necesita mi empresa?\\, b\u00e1sicamente deben conversar con su matriz de riesgos que contemple Ciberriesgos y est\u00e9 acorde al giro del negocio.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ejemplo-playbook","title":"Ejemplo Playbook","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ejemplo-playbook-ejemplo-de-infeccion-de-gusanos","title":"Ejemplo Playbook: Ejemplo de infecci\u00f3n de gusanos","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.avsoftware.com.mx/respuesta-a-incidentes-de-ciberseguridad-guia-de-nist/#1603043331556-26ebd2a3-9ac2</p> <p>https://blog.netdatanetworks.com/que-hacer-en-caso-de-un-ciberataque</p> <p>https://playbooks.flexibleir.com/</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#actividad","title":"Actividad","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#actividad-i","title":"Actividad I","text":"<p>Traducir la plantilla en castellano:</p> <p>https://github.com/IES-Rafael-Alberti/incident-response-plan-plantilla</p> <p>Crear un plan de respuesta a incidentes partiendo de la plantilla.</p> <p>Crear e incorporar un conjunto de playbook b\u00e1sicos.</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/","title":"IS U5.3.1. Ciberresiliencia","text":"<p>Ciberresiliencia</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#ra4","title":"RA4","text":"<p>b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n,   prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p> <p> working in progress </p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#indice","title":"\u00cdNDICE","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#ciberresiliencia","title":"Ciberresiliencia","text":"<p>Resiliencia \\, seg\u00fan RAE : En psicolog\u00eda\\, capacidad que tiene una persona para superar circunstancias traum\u00e1ticas como la muerte de un ser querido\\, un accidente\\, etc.</p> <p>Resiliencia empresarial : se trata de la capacidad de una empresa para afrontar adversidades y recuperar su estado inicial. Esto pone de manifiesto la fortaleza de una organizaci\u00f3n para adaptarse a los cambios.</p> <p>Cuando la empresa entra en el terreno digital\\, surge la  ciberresiliencia</p> <p>Tal y como define el Instituto Nacional de Ciberseguridad \\(INCIBE\\)\\, la  ciberresiliencia  es:</p> <p>_ \"La capacidad para resistir\\, proteger y defender el uso del ciberespacio de los atacantes\"._</p> <p></p> <p>Es muy com\u00fan confundir conceptos como ciberseguridad y ciberresiliencia. Aunque el enfoque es similar\\, los procesos difieren entre s\u00ed. Estas son las principales diferencias:</p> <p>Ciberseguridad : conjunto de tecnolog\u00edas inform\u00e1ticas y medidas preventivas destinadas a  proteger la empresa ante cualquier brecha de seguridad \\, ya sea robo de datos o acceso a la red corporativa. Por ejemplo\\, el cifrado de datos.</p> <p>Ciberresiliencia : este concepto unifica la tecnolog\u00eda de ciberseguridad y la resiliencia empresarial con el objetivo de gestionar un ciberataque sin fallos y\\, sobre todo\\,  ofrecer continuidad del negocio ante un ataque .</p> <p> \u201c  _El mundo nos rompe a todos... _ </p> <p> despu\u00e9s algunos son fuertes en los lugares rotos. </p> <p>Ernest Hemingway</p> <p>\u00bfCausas por las que una empresa no es todo lo resiliente que desear\u00eda ante un ciberatque?</p> <p></p> <p>Las empresas\\, en general  est\u00e1n poco preparadas  para resistir frente a este tipo de ataques\\, debido principalmente a:</p> <p>Falta de medida s t\u00e9cnicas para mitigarlos\\,</p> <p>Poca preparaci\u00f3n  de los sistemas para detener este tipo de ataques\\,</p> <p>Falta de formaci\u00f3n o de recursos  para hacerles frente o</p> <p>Falta de pruebas  para evaluar la capacidad real de la organizaci\u00f3n ante cualquier tipo de ataque externo.</p> <p>La mayor\u00eda de organizaciones no est\u00e1n cien por cien preparadas para afrontar ataques inform\u00e1ticos. Esto puede ser por diversas razones:</p> <p>Una  cultura  organizacional que no se centra en la ciberseguridad.</p> <p>Falta de  inversi\u00f3n  en tecnolog\u00edas espec\u00edficas para la detecci\u00f3n y prevenci\u00f3n de malwares.</p> <p>Falta de  formaci\u00f3n  en ciberseguridad.</p> <p>\u00bfQue necesitamos para conseguir ser resilientes?</p> <p></p> <p>Las organizaciones deben estar  preparadas para</p> <p>dar respuestas r\u00e1pidas a este tipo de ataques\\, permitiendo que los servicios que prestan no se vean interrumpidos\\,</p> <p>__fortaleciendo sus capacidades __ de</p> <p>identificaci\u00f3n\\, detecci\u00f3n\\, prevenci\u00f3n\\, contenci\u00f3n\\, recuperaci\u00f3n\\, cooperaci\u00f3n y mejora continua contra las ciberamenazas.</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#pasos","title":"Pasos","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#implementar-la-ciberresiliencia","title":"Implementar la ciberresiliencia","text":"<p>\u00bfC\u00f3mo implementar la ciberresiliencia?</p> <p>Dada la diversidad de las organizaciones\\, su complejidad interna y las interdependencias entre ellas\\, no se puede generalizar una forma de implementar la ciberresiliencia.</p> <p>En cualquier caso\\, es fundamental iniciar un proceso de adaptaci\u00f3n y considerar que se debe extender a todo nuestro ecosistema \\(partners\\, proveedores\\, clientes\\,\u2026\\).</p> <p>Se deben establecer los siguientes pasos:</p> <p>Priorizar  los  servicios \\, seg\u00fan el  impacto \\(econ\u00f3mico\\, medioambiental\\, p\u00fablico y social\\, personas afectadas\\) que su p\u00e9rdida o deterioro pueda ocasionar.</p> <p>Conocer y priorizar  seg\u00fan su  criticidad  las  amenazas  que afectan a los servicios.</p> <p>Implementar  acciones preventivas  contra actuales y futuras amenazas.</p> <p>Desarrollar  procesos de remediaci\u00f3n  para minimizar el da\u00f1o que pueden producir los incidentes.</p> <p>__Detectar vulnerabilidades __ continuamente y remediarlas para reducir la superficie de ataque.</p> <p>Desarrollar y mantener procesos de comunicaci\u00f3n  dentro de la empresa.</p> <p>Ejecutar constantemente  __acciones de mejora __ que minimicen los riesgos\\, y repetir el ciclo de pasos para la mejora continua.</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#analisis-de-evidencias-e-investigacion-del-incidente","title":"An\u00e1lisis de evidencias e investigaci\u00f3n del incidente","text":"<p>5. Recuperaci\u00f3n</p> <p></p> <p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#pasos_1","title":"Pasos","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#identificacion-de-activos","title":"Identificaci\u00f3n de activos","text":"<p>Un m\u00e9todo de clasificaci\u00f3n de activos que simplifica el proceso consiste en dividirlos en 6 categor\u00edas diferentes\\, tal y como se muestra en la imagen.</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe.es/protege-tu-empresa/blog/ciberresiliencia-marco-medicion</p> <p>https://www.incibe.es/extfrontinteco/img/File/Estudios/int_ciber_resiliencia_marco_medicion.pdf</p> <p>https://www.incibe-cert.es/blog/ciberresiliencia-clave-sobreponerse-los-incidentes</p> <p>https://agenciab12.com/noticia/que-es-ciberresiliencia-como-influye-seguridad</p> <p>https://agenciab12.com/noticia/medidas-prevencion-ciberataque</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#actividad","title":"Actividad","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#actividad-ii","title":"Actividad II","text":"<p>Recopilaci\u00f3n y an\u00e1lisis de evidencias sobre un incidente:</p> <p> 3.abc.01 - Recolecci\u00f3n\\, almacenamiento y an\u00e1lisis </p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#_1","title":"IS U5.3.1. Ciberresiliencia","text":""},{"location":"section2/u06/","title":"UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 5 - Detecci\u00f3n y documentaci\u00f3n de incidentes de ciberseguridad:</p> <ul> <li>Desarrollar procedimientos de actuaci\u00f3n para la notificaci\u00f3n de incidentes.</li> <li>Notificaci\u00f3n interna de incidentes.</li> <li>Notificaci\u00f3n de incidentes a quienes corresponda.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 5. Detecta y documenta incidentes de ciberseguridad siguiendo procedimientos de actuaci\u00f3n establecidos.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha desarrollado un procedimiento de actuaci\u00f3n detallado para la notificaci\u00f3n de incidentes de ciberseguridad en los tiempos adecuados.</li> <li>b) Se ha notificado el incidente de manera adecuada al personal interno de la organizaci\u00f3n responsable de la toma de decisiones.</li> <li>c) Se ha notificado el incidente de manera adecuada a las autoridades competentes en el \u00e1mbito de la gesti\u00f3n de incidentes de ciberseguridad en caso de ser necesario.</li> <li>d) Se ha notificado formalmente el incidente a los afectados, personal interno, clientes, proveedores, etc., en caso de ser necesario.</li> <li>e) Se ha notificado el incidente a los medios de comunicaci\u00f3n en caso de ser necesario.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: para comprender el procedimiento de notificaci\u00f3n de incidentes, Incibe pone a nuestra disposici\u00f3n la gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes.</li> <li>Criterio de evaluaci\u00f3n c: uno de los organismos a los que hay que notificar es incibe, y en la web indica c\u00f3mo.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section3/","title":"Entornos de desarrollo","text":"<p>Se describe el m\u00f3dulo profesional de Entornos de Desarrollo. Esta informaci\u00f3n se divide en:</p> <ul> <li>Una primera secci\u00f3n de Informaci\u00f3n general en la que se hace una propuesta de temario, con la relaci\u00f3n de unidades y los resultados de aprendizaje asociados, asi como las posibles fechas en las que se impartir\u00edan.</li> <li>Una segunda secci\u00f3n con Materiales relacionados con el modulo, como Fuentes de informaci\u00f3n, libros recomendados, recursos y herramientas para aplicar conceptos.</li> </ul> <p>Todo el contenido est\u00e1 supeditado a mejora, de hecho est\u00e1 en construcci\u00f3n, y por tanto es solo una propuesta que ir\u00e1 cambiando, espero que a mejor. Si tienes una propuesta de mejora, no te cortes y p\u00e1samela ;-).</p>","tags":["EDES","Software"]},{"location":"section3/#informacion","title":"Informaci\u00f3n","text":"","tags":["EDES","Software"]},{"location":"section3/#propuesta-de-temario","title":"Propuesta de temario","text":"<p>En los siguientes enlaces se encuentran los contenidos, resultados de aprendizaje, criterios de evaluaci\u00f3n y herramientas para trabajarlos y poder evaluarlos. Es solo una propuesta, pero puede servir de punto de partida inicial.</p> <ol> <li>Introducci\u00f3n al desarrollo de software</li> </ol>","tags":["EDES","Software"]},{"location":"section3/#relacion-de-unidades-y-resultados-de-aprendizaje","title":"Relaci\u00f3n de unidades y resultados de aprendizaje","text":"Unidad UD 1 UD 2 UD 3 UD 4 UD 5 UD 6 RA 1 X RA 2 X RA 3 X RA 4 X RA 5 X RA 6 X","tags":["EDES","Software"]},{"location":"section3/#relacion-de-unidades-y-fechas","title":"Relaci\u00f3n de unidades y fechas","text":"<p>El curso tiene un total de 24 semanas (720 horas). La relaci\u00f3n propuesta entre unidades y semanas es la siguiente:</p> Unidad Semanas 1 Semana 1 - 2 2 Semana 2 - 7 3 Semana  - 4 Semana  - 5 Semana  - 6 Semana  -","tags":["EDES","Software"]},{"location":"section3/#materiales","title":"Materiales","text":"","tags":["EDES","Software"]},{"location":"section3/#fuentes","title":"Fuentes","text":"<ul> <li>Rafael del Rio: Utilizado para la estructura de la p\u00e1gina de presentaci\u00f3n del m\u00f3dulo.</li> <li>Jos\u00e9 Antonio Mu\u00f1oz Jim\u00e9nez: Utilizado en parte del contenido del m\u00f3dulo.</li> </ul>","tags":["EDES","Software"]},{"location":"section3/#bibliografia","title":"Bibliograf\u00eda","text":"<ul> <li>Kenneth C. Louden. \u201cLenguajes de programaci\u00f3n: Principios y pr\u00e1ctica\u201d. Paraninfo, 2004</li> <li>Roger S. Pressman. \u201cIngenier\u00eda del software: Un enfoque pr\u00e1ctico 7a Ed.\u201d. McGraw Hill, 2010</li> <li>Carlos Bl\u00e9. \u201cDise\u00f1o \u00e1gil con TDD\u201d. iExpertos, 2010</li> <li>Kent Beck. \u201cTest driven development by example\u201d. Addison Wesley, 2002</li> <li>Tobias Mayer &amp; Alan Cyment. \u201cPor un Scrum popular: Notas para una revoluci\u00f3n Agile\u201d. Dymaxicon, 2014</li> <li>Henrik Kniberg. \u201cScrum y XP desde las trincheras\u201d. C4Media, 2007</li> <li>Federico Toledo. \u201cIntroducci\u00f3n a las pruebas de S.I.: Un enfoque pr\u00e1ctico\u201d. Abstracta, 2014</li> <li>Martin Fowler. \u201cRefactoring: Improving the design of existing code\u201d. Alhambra mexicana, 1999</li> <li>Martin Fowler y Kendall Scott. \u201cUML gota a gota\u201d. Alhambra mexicana, 1999</li> <li>Robert C. Martin. \u201cUML para programadores Java\u201d. Pearson, 2004</li> <li>Cat\u00e1logo de patrones de refactorizaci\u00f3n</li> <li>Refactoring Guru</li> <li>Patrones de dise\u00f1o</li> <li>Gu\u00eda definitiva de Scrum</li> <li>Git la gu\u00eda sencilla</li> <li>Git en entornos distribuidos</li> <li>Java, generaci\u00f3n de documentaci\u00f3n</li> <li>Python Documentation Generator, Sphinx</li> <li>UML, gu\u00eda digitales/digitalguide/paginas-web/desarrollo-web/uml-lenguaje-unificado-de-modelado-orientado-a-objetos/)</li> <li>eduScurm, \u00a1Colaboraci\u00f3n que te da alas!</li> </ul>","tags":["EDES","Software"]},{"location":"section3/#recursos","title":"Recursos","text":"<ul> <li>Plataforma de e-learning: Moodle,</li> <li>Paquete ofim\u00e1tico: LibreOffice</li> <li>Sistema operativo: Windows 10 y Linux (Ubuntu u otra distribuci\u00f3n similar)</li> <li>Entornos integrados de desarrollo y Editores: Visual Studio Code, IntelliJ, PyCharm, Sublime.</li> <li>Sistema de control de versiones: git, github</li> <li>Programas para el dise\u00f1o de diagramas UML (DIA, UMLet, online LucidChart,\u2026)</li> </ul>","tags":["EDES","Software"]},{"location":"section3/#contenido","title":"Contenido","text":"<p>T\u00edpicamente se intenta tener los siguientes apartados en cada uno de los m\u00f3dulos profesionales:</p> <ul> <li>Teor\u00eda.</li> <li>Presentaciones.</li> <li>Ejercicios.</li> <li>Pr\u00e1cticas evaluables.</li> <li>Ex\u00e1menes</li> </ul>","tags":["EDES","Software"]},{"location":"section3/u01/","title":"UD 1 - Introducci\u00f3n al desarrollo de software","text":"","tags":["EDES","Software"]},{"location":"section3/u01/#unidad-1-introduccion-al-desarrollo-de-software","title":"Unidad 1: Introducci\u00f3n al Desarrollo de Software","text":"","tags":["EDES","Software"]},{"location":"section3/u01/#1-normativa-que-respalda-la-unidad","title":"1. Normativa que Respalda la Unidad","text":"<p>Esta unidad est\u00e1 alineada con la normativa del curso \"Entornos de Desarrollo\" del ciclo formativo de Desarrollo de Aplicaciones Web, teniendo como base el Resultado de Aprendizaje (RA) 1 y sus Criterios de Evaluaci\u00f3n (CE). El objetivo principal es que los estudiantes reconozcan y comprendan los elementos y herramientas esenciales que intervienen en el desarrollo de software, desde la planificaci\u00f3n hasta la puesta en funcionamiento.</p>","tags":["EDES","Software"]},{"location":"section3/u01/#2-resultado-de-aprendizaje-a-trabajar","title":"2. Resultado de Aprendizaje a Trabajar","text":"<ul> <li>RA 1: Reconoce los elementos y herramientas que intervienen en el desarrollo de un programa inform\u00e1tico, analizando sus caracter\u00edsticas y las fases en las que act\u00faan hasta llegar a su puesta en funcionamiento.</li> </ul> <p>Este resultado de aprendizaje se lograr\u00e1 desglosando el contenido en cinco puntos, cada uno enfocado en un criterio de evaluaci\u00f3n espec\u00edfico.</p>","tags":["EDES","Software"]},{"location":"section3/u01/#3-criterios-de-evaluacion","title":"3. Criterios de Evaluaci\u00f3n","text":"<p>En esta unidad se trabajar\u00e1n los siguientes criterios de evaluaci\u00f3n relacionados con el RA 1:</p> <ol> <li> <p>CE 1.a: Se ha reconocido la relaci\u00f3n de los programas con los componentes del sistema inform\u00e1tico, como la memoria, procesador, perif\u00e9ricos, entre otros.</p> <ul> <li>Contenido asociado: Relaci\u00f3n entre software y hardware. C\u00f3mo interact\u00faan los componentes f\u00edsicos del ordenador (memoria RAM, procesador, dispositivos de entrada/salida) con el software durante la ejecuci\u00f3n de programas.</li> </ul> </li> <li> <p>CE 1.c: Se han diferenciado los conceptos de c\u00f3digo fuente, objeto y ejecutable.</p> <ul> <li>Contenido asociado: Explicaci\u00f3n detallada sobre c\u00f3mo el c\u00f3digo fuente se transforma en un archivo ejecutable, incluyendo la etapa intermedia de generaci\u00f3n de c\u00f3digo objeto. Se abordar\u00e1n ejemplos pr\u00e1cticos con compiladores y su salida generada.</li> </ul> </li> <li> <p>CE 1.d: Se han reconocido las caracter\u00edsticas de la generaci\u00f3n de c\u00f3digo intermedio para su ejecuci\u00f3n en m\u00e1quinas virtuales.</p> <ul> <li>Contenido asociado: An\u00e1lisis de c\u00f3mo se genera el c\u00f3digo intermedio (por ejemplo, bytecode en Java) y su ejecuci\u00f3n en m\u00e1quinas virtuales como la JVM. Comparaci\u00f3n entre c\u00f3digo intermedio y c\u00f3digo ejecutable tradicional.</li> </ul> </li> <li> <p>CE 1.e: Se han clasificado los lenguajes de programaci\u00f3n, identificando sus caracter\u00edsticas.</p> <ul> <li>Contenido asociado: Clasificaci\u00f3n de los lenguajes en compilados vs interpretados, alto nivel vs bajo nivel y paradigmas de programaci\u00f3n. An\u00e1lisis de caracter\u00edsticas y ejemplos de lenguajes como Python, Java, C y Assembly.</li> </ul> </li> <li> <p>CE 1.f: Se ha evaluado la funcionalidad ofrecida por las herramientas utilizadas en el desarrollo de software.</p> <ul> <li>Contenido asociado: Evaluaci\u00f3n de herramientas espec\u00edficas como editores de texto, compiladores, int\u00e9rpretes, sistemas de control de versiones, depuradores y frameworks. Se discutir\u00e1n las ventajas y desventajas de cada herramienta seg\u00fan su funcionalidad.</li> </ul> </li> </ol>","tags":["EDES","Software"]},{"location":"section3/u01/#4-contenidos","title":"4. Contenidos","text":"<p>En esta secci\u00f3n se describen los contenidos que se impartir\u00e1n en la Unidad 1, teniendo en cuenta la normativa del curso y los criterios de evaluaci\u00f3n.</p> <ul> <li>La unidad pertenece al Bloque 1: Desarrollo de Software.</li> </ul> <p>U1: Introducci\u00f3n al Desarrollo de Software</p> <p>Durante la Unidad 1, trabajaremos los siguientes contenidos:</p> <ol> <li> <p>Relaci\u00f3n entre el Software y el Hardware (CE 1.a):</p> <ul> <li>An\u00e1lisis de c\u00f3mo el software interact\u00faa con los componentes f\u00edsicos del sistema, como el procesador, la memoria y los perif\u00e9ricos.</li> <li>Ejemplos pr\u00e1cticos de c\u00f3mo se ejecuta un programa en la CPU y c\u00f3mo se almacenan los datos en la RAM.</li> </ul> </li> <li> <p>Diferenciaci\u00f3n entre C\u00f3digo Fuente, C\u00f3digo Objeto y Ejecutable (CE 1.c):</p> <ul> <li>Definici\u00f3n de cada concepto y ejemplos de c\u00f3mo se realiza la compilaci\u00f3n de un programa en C.</li> <li>An\u00e1lisis de la estructura del c\u00f3digo objeto y el ejecutable generado por el compilador.</li> </ul> </li> <li> <p>Generaci\u00f3n de C\u00f3digo Intermedio para M\u00e1quinas Virtuales (CE 1.d):</p> <ul> <li>Explicaci\u00f3n de c\u00f3mo lenguajes como Java generan bytecode que se ejecuta en una m\u00e1quina virtual.</li> <li>Comparativa de rendimiento y portabilidad entre c\u00f3digo intermedio y ejecutable tradicional.</li> </ul> </li> <li> <p>Clasificaci\u00f3n y Caracter\u00edsticas de los Lenguajes de Programaci\u00f3n (CE 1.e):</p> <ul> <li>Clasificaci\u00f3n de los lenguajes de programaci\u00f3n en funci\u00f3n de su nivel de abstracci\u00f3n (alto nivel vs bajo nivel), paradigma (imperativo, funcional, orientado a objetos) y modo de ejecuci\u00f3n (compilado vs interpretado).</li> <li>Ejemplos pr\u00e1cticos de lenguajes representativos como Python, C, Java y Assembly.</li> </ul> </li> <li> <p>Evaluaci\u00f3n de Herramientas Utilizadas en el Desarrollo de Software (CE 1.f):</p> <ul> <li>Evaluaci\u00f3n de herramientas utilizadas en el desarrollo de software como editores de texto (Sublime Text), compiladores (GCC), int\u00e9rpretes (Python), herramientas de documentaci\u00f3n (JSDoc, Doxygen), depuradores (GDB, PDB), sistemas de control de versiones (Git), frameworks (Django, Spring), y herramientas de pruebas y calidad (SonarQube, JUnit).</li> <li>Discusi\u00f3n sobre las ventajas y desventajas de cada herramienta seg\u00fan el contexto de uso y el tipo de proyecto.</li> </ul> </li> </ol>","tags":["EDES","Software"]},{"location":"section3/u01/#5-actividades-de-evaluacion","title":"5. Actividades de Evaluaci\u00f3n","text":"<p>Para evaluar la adquisici\u00f3n de los criterios de evaluaci\u00f3n, se propondr\u00e1n las siguientes actividades:</p> <ol> <li> <p>Actividad 1: Relaci\u00f3n entre Software y Hardware (CE 1.a).</p> <ul> <li>Descripci\u00f3n: Simulaci\u00f3n del ciclo de ejecuci\u00f3n en el hardware y an\u00e1lisis de c\u00f3mo interact\u00faa con el software.</li> <li>Objetivo: Identificar c\u00f3mo el software se comunica con el hardware durante la ejecuci\u00f3n y c\u00f3mo se gestionan las operaciones de entrada/salida.</li> </ul> </li> <li> <p>Actividad 2: Diferenciaci\u00f3n entre C\u00f3digo Fuente, Objeto y Ejecutable (CE 1.c).</p> <ul> <li>Descripci\u00f3n: Compilaci\u00f3n de un programa sencillo en C para observar cada etapa del proceso y comparar los resultados generados.</li> <li>Objetivo: Analizar la transformaci\u00f3n del c\u00f3digo fuente en c\u00f3digo objeto y, finalmente, en un ejecutable.</li> </ul> </li> <li> <p>Actividad 3: Generaci\u00f3n de C\u00f3digo Intermedio para M\u00e1quinas Virtuales (CE 1.d).</p> <ul> <li>Descripci\u00f3n: Creaci\u00f3n y ejecuci\u00f3n de un programa en Java, analizando la generaci\u00f3n de bytecode y su ejecuci\u00f3n en la JVM.</li> <li>Objetivo: Entender c\u00f3mo se ejecuta el c\u00f3digo intermedio en una m\u00e1quina virtual y su independencia de la plataforma.</li> </ul> </li> <li> <p>Actividad 4: Clasificaci\u00f3n de Lenguajes de Programaci\u00f3n (CE 1.e).</p> <ul> <li>Descripci\u00f3n: Clasificaci\u00f3n y comparaci\u00f3n de diferentes lenguajes de programaci\u00f3n (Python, C, Java, Assembly) y sus caracter\u00edsticas principales.</li> <li>Objetivo: Identificar en qu\u00e9 contextos y proyectos se utilizar\u00eda cada tipo de lenguaje seg\u00fan su clasificaci\u00f3n y caracter\u00edsticas.</li> </ul> </li> <li> <p>Actividad 5: Evaluaci\u00f3n de Herramientas de Desarrollo (CE 1.f).</p> <ul> <li>Descripci\u00f3n: Evaluaci\u00f3n y comparaci\u00f3n de herramientas de desarrollo (compiladores, int\u00e9rpretes, sistemas de gesti\u00f3n de versiones, etc.). Los estudiantes crear\u00e1n una tabla comparativa con ventajas y desventajas.</li> <li>Objetivo: Comprender el uso de cada herramienta en el ciclo de desarrollo del software y su aplicaci\u00f3n pr\u00e1ctica.</li> </ul> </li> </ol>","tags":["EDES","Software"]},{"location":"section3/u01/#6-prueba-de-evaluacion-de-contenidos","title":"6. Prueba de Evaluaci\u00f3n de Contenidos","text":"<p>Al final de la unidad, se realizar\u00e1 una pruebas  incluir\u00e1n preguntas te\u00f3ricas y pr\u00e1cticas sobre los conceptos tratados. Los estudiantes deber\u00e1n demostrar su comprensi\u00f3n de:</p> <ul> <li>La relaci\u00f3n entre software y hardware.</li> <li>La diferenciaci\u00f3n entre tipos de c\u00f3digo.</li> <li>La clasificaci\u00f3n de lenguajes de programaci\u00f3n.</li> <li>La funcionalidad de las herramientas utilizadas en el desarrollo de software.</li> </ul> <p>Con este enfoque, se abordan claramente los RA y CE espec\u00edficos para cada punto tratado en la unidad, y se detallan las actividades que permitir\u00e1n evaluar su adquisici\u00f3n de manera pr\u00e1ctica.</p>","tags":["EDES","Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica001/","title":"EDES U1. Practica001","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica001/#relacion-11","title":"Relaci\u00f3n 1.1","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica001/#descripcion","title":"Descripci\u00f3n","text":"<p>Haciendo uso de los distintos Rankings de lenguajes de programaci\u00f3n y p\u00e1ginas de b\u00fasqueda de empleo como infojobs, tecnoempleo, linkedin localiza los 5 lenguajes m\u00e1s usados y los 5 lenguajes con m\u00e1s ofertas de empleo respectivamente. A\u00f1ade la informaci\u00f3n m\u00e1s relevante sobre estos lenguajes, m\u00ednimo responde a las siguientes preguntas:</p> <ol> <li>\u00bfQu\u00e9 paradigmas destacan en el lenguaje?</li> <li>\u00bfCu\u00e1l es la posici\u00f3n y evoluci\u00f3n de este lenguaje durante los \u00faltimos 2 a\u00f1os?</li> <li>\u00bfPara que se usa mayoritariamente este lenguaje</li> <li>\u00bfQu\u00e9 tipo de traductor se usa para poder ejecutar los programas realizados en este lenguaje?</li> <li>\u00bfExisten otras opciones de traducci\u00f3n para este lenguaje?</li> <li>\u00bfCu\u00e1l es el traductor m\u00e1s usado para este lenguaje y que caracter\u00edsticas tiene?</li> </ol> <p>Finaliza con una conclusiones que hayas sacado sobre el lenguaje mas usados y traductores asociados.</p>"},{"location":"section3/u01/practica/EDES-U1.-Practica001/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA1.b No identifica\u00a0todos los lenguajes Identifica lenguajes con informaci\u00f3n completa. Identifica lenguajes con informaci\u00f3n adicional. RA1.f No identifica adecuadamente el traductor Identifica una sola. Identifica traductores con informaci\u00f3n adicional."},{"location":"section3/u01/practica/EDES-U1.-Practica001/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Es un trabajo individual.</li> <li>Se realiza en un documento de google drive.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Fecha</li> <li>Tu nombre</li> <li>Identificaci\u00f3n del curso y grupo.</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 1_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> <li>https://www.digitallearning.es/blog/rankings-de-lenguajes-de-programacion/</li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/","title":"EDES U1. Practica002","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica002/#relacion-12","title":"Relaci\u00f3n 1.2","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica002/#descripcion","title":"Descripci\u00f3n","text":"<p>Para dos de los siguientes lenguajes de programaci\u00f3n:   </p> <p>a. Grupo 1: Elige uno de los nombrados en el ejercicio 1.1 (Excepto Java ,Kotlin, .Net)   b. Grupo 2: Elige uno entre Java ,Kotlin, .Net.  </p> <p>Escribe un programa b\u00e1sico, que pregunte el nombre del usuario y muestre un mensaje \"Hola <code>usuario</code>. Este programa esta hecho en el lenguaje de programaci\u00f3n: <code>lenguaje</code>\".  </p> <p>Responde a las siguientes preguntas:   </p> <ol> <li>\u00bfQu\u00e9 herramientas has utilizado durante todo el proceso de creaci\u00f3n y hasta la ejecuci\u00f3n del programa (Sistema Operativo, Editor, compilador/int\u00e9rprete, enlazador, para ejecutarlo)?      a. Para el lenguaje del (a) grupo 1 y (b) grupo 2.   </li> <li>Diferencia entre el c\u00f3digo fuente, c\u00f3digo objeto y el ejecutable que has generado. Describe el proceso y el nombre que han tomado los distintos archivos, si existen en ese lenguaje.      a. Para el lenguaje del (a) grupo 1 y (b) grupo 2.   </li> <li>En lo que respecta al dispositivo en el que se ejecuta el programa, \u00bfQu\u00e9 componentes del dispositivo se han visto involucrados y c\u00f3mo, en el proceso de ejecuci\u00f3n del ejecutable?    </li> <li>Finaliza con una conclusion sobre las diferencias que has encontrado entre los lenguajes del grupo 1 y grupo 2. (Pista: Virtual Machine)   </li> </ol>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/#incluir-en-la-entrega","title":"Incluir en la entrega","text":"<p>Ademas de las respuestas a las preguntas anteriores, introduce en la entrega:   </p> <ul> <li>El codigo fuente del lenguaje del grupo 1 y grupo 2.   </li> <li>Captura de pantalla de la ejecucion del grupo 1 y grupo 2.   </li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA1.a No explica adecudamente la involucracion de los componentes hardware durante la ejecucion de un programa Lo hace correctamente Lo hace correctamente, con informacion adicional. RA1.c No diferencia los distintos codigos Diferencia adecuadmente Los diferencia adecuadamente con informacion adicional. RA1.d No diferencia las ejecuciones de grupo 1 y grupo 2 Indentifica las diferencia. Identifica las diferencias y las explica con detalle. RA1.e No lista adecuadamente las herramientas y proceso de creacion/ejecucion. Lista adecuadamente las herramientas y proceso de creacion/ejecucion. lista adecuadamente las herramientas y proceso de creacion/ejecucion y entra en detalles."},{"location":"section3/u01/practica/EDES-U1.-Practica002/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Es un trabajo individual.</li> <li>Se realiza en un documento de google drive.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Fecha</li> <li>Tu nombre</li> <li>Identificaci\u00f3n del curso y grupo.</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 1_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> <li>CLR .Net</li> <li>Las M\u00e1quinas Virtuales de Java y .NET comparadas.</li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica003/","title":"UD 1 - P3: Aplica Scrum","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#relacion-12","title":"Relaci\u00f3n 1.2","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#descripcion","title":"Descripci\u00f3n","text":"<p>Suponiendo que trabajas en un equipo siguiendo el marco de trabajo scrum, en el que se quiere construir un juego simulando un bingo:  </p> <ul> <li>Construye un product backlog muy b\u00e1sico que resuman todas las funcionalidades necesarias para crear el juego. </li> </ul> <p> Fuente PMOInformatica.com</p> <ul> <li>Simula la reuni\u00f3n de planifica\u00f1ci\u00f3n del sprint (Sprint planning). En ella, define el objetivo del sprint y elige los PBI (product backlog items) para llevarlo a cabo. Define las tareas asociadas a la realizaci\u00f3n de los PBI, y que constituir\u00e1n el Sprint backlog. </li> </ul> <p></p> <p>Fuente PMOInformatica.com</p> <p>Ten en cuenta que debeis simular los diferentes roles que participan en el framework scrum.  </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#incluir-en-la-entrega","title":"Incluir en la entrega","text":"<ol> <li>El producto backlog, con los items. </li> <li>El sprint backlog y el objetivo.</li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA1.g Realiza un slice confuso de las funcionalidades y de las tareas del sprint backlog. Realiza un slice adecuado de las funcionalidades y de las tareas del sprint backlog. Realiza un slice completo y de las funcionalidades y de las tareas del sprint backlog, superando las expectativas del trabajo.","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Es un trabajo es en grupo..</li> <li>Se realiza en un documento de google drive, con los formatos suministrados en la presentaci\u00f3n del ejercicio.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Tu nombre</li> <li>Identificaci\u00f3n del ciclo y grupo.</li> <li>Fecha</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 1_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> <li>Product Backlog PMOInformatica.com</li> <li>Sprint Backlog PMOInformatica.com</li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/","title":"UD 1 - P4: Relaci\u00f3n software y hardware","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#p-14-relacion-software-y-hardware","title":"P 1.4: Relaci\u00f3n software y hardware","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#1-desarrollo-de-la-actividad-a-comparativa-lenguaje-c-vs-ensamblador","title":"1. Desarrollo de la Actividad A: Comparativa lenguaje C vs Ensamblador","text":"<p>Para esta actividad se propone una comparativa entre C y Ensamblador y c\u00f3mo se relacionan con el hardware. :</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#1-introduccion-al-uso-del-simulador","title":"1. Introducci\u00f3n al uso del simulador","text":"<ul> <li>Presenta a los estudiantes la herramienta TinkerCAD. En TinkerCAD, pueden crear un circuito simple con un microcontrolador (por ejemplo, un Arduino) y observar c\u00f3mo el c\u00f3digo que cargan en el sistema interact\u00faa con el procesador y los perif\u00e9ricos.</li> <li>Explica que cada componente del sistema (procesador, memoria y perif\u00e9ricos) tiene un papel importante en la ejecuci\u00f3n de un programa.</li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#2-primera-parte","title":"2. Primera parte","text":"<p>Simulaci\u00f3n de la relaci\u00f3n Software-Hardware con TinkerCAD:    * Los estudiantes crear\u00e1n un proyecto en TinkerCAD con un circuito que contenga un microcontrolador Arduino y algunos componentes adicionales como un LED y un sensor (bot\u00f3n).      * Cargar\u00e1n un c\u00f3digo simple que, por ejemplo, encienda o apague el LED cuando se presiona el bot\u00f3n.       * Ejemplo de c\u00f3digo para Arduino:           * Explicaci\u00f3n Arduino            * Ejecutar y compilar un programa            * Los estudiantes podr\u00e1n ver c\u00f3mo el bot\u00f3n (perif\u00e9rico) env\u00eda se\u00f1ales al procesador y c\u00f3mo el software (el c\u00f3digo cargado) controla el hardware (el LED).      * Pueden intentar modificar el programa para que encienda el LED cuando se presiona el bot\u00f3n dos veces y lo apague cuando se presione el bot\u00f3n una sola vez.</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#3-segunda-parte","title":"3. Segunda parte","text":"<p>Simulaci\u00f3n del funcionamiento del procesador con el emulador LC3 Machines:</p> <ul> <li>Presenta a los estudiantes el Emulador LC3, una herramienta que simula el funcionamiento de un procesador LC3 (una arquitectura de computadora simple). Se puede usar la opci\u00f3n 1  u opci\u00f3n 2 </li> <li>Los estudiantes utilizar\u00e1n el Emulador LC3 para cargar un programa en c\u00f3digo ensamblador o un programa muy b\u00e1sico en una m\u00e1quina virtual.    </li> <li>Observar\u00e1n c\u00f3mo el software (en este caso, el c\u00f3digo en ensamblador o un programa simple en C) se convierte en instrucciones que el procesador ejecuta. </li> <li> <p>Con el emulador, podr\u00e1n ver la interacci\u00f3n entre el c\u00f3digo, el procesador y la memoria en tiempo real.    </p> <p>Ejemplo b\u00e1sico de c\u00f3digo ensamblador (LC3):</p> <pre><code>.ORIG x3000          \n\nLD R0, NUM1          ; Cargar el valor de NUM1 en R0\nLD R1, NUM2          ; Cargar el valor de NUM2 en R1\nADD R2, R0, R1       ; Sumar R0 y R1, guardar el resultado en R2\n\n; Convertir el resultado a ASCII\nLD R3, ASCII_ZERO    ; Cargar el valor ASCII de '0' en R3 (48)\nADD R0, R2, R3       ; Sumar el valor de R2 al valor ASCII de '0'\n\n; Mostrar el resultado\nTRAP x21             ; Mostrar el car\u00e1cter en pantalla\n\nHALT                 ; Finalizar el programa\n\nNUM1    .FILL x0005          ; Primer n\u00famero (5)\nNUM2    .FILL x0003          ; Segundo n\u00famero (3)\nASCII_ZERO .FILL x0030       ; Valor ASCII de '0' (48 en decimal)\n\n.END                 ; Fin del programa\n</code></pre> <p>Explicaci\u00f3n del c\u00f3digo:</p> <ol> <li>LD R3, ASCII_ZERO: Carga el valor 48 (que es el valor ASCII del car\u00e1cter '0') en el registro R3. Este valor se almacena en la etiqueta ASCII_ZERO.</li> <li>ADD R0, R2, R3: Suma el valor de R2 (resultado de la suma de 5 + 3) con 48 para convertir el n\u00famero en un car\u00e1cter ASCII.</li> <li>TRAP x21*: Muestra el car\u00e1cter ASCII resultante en la pantalla (en este caso, el car\u00e1cter '8').    </li> </ol> <p>Resultado esperado:     Al ejecutar este programa, se mostrar\u00e1 el car\u00e1cter '8' en la pantalla, que es el resultado de la suma de 5 + 3.</p> </li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#4-conclusion","title":"4. Conclusi\u00f3n","text":"<p>Los estudiantes finalizar\u00e1n la actividad conectando lo aprendido a la realidad de los sistemas inform\u00e1ticos actuales. Deber\u00e1n ser capaces de identificar claramente la relaci\u00f3n entre el software y el hardware, y c\u00f3mo las instrucciones del software controlan los diferentes componentes del hardware.</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#2-desarrollo-de-la-actividad-b-funcionamiento-de-una-cpu","title":"2. Desarrollo de la Actividad B: Funcionamiento de una CPU","text":"<p>Esta actividad se centra en el funcionamiento de un procesador y c\u00f3mo se relaciona con el software. Se utilizar\u00e1 un simulador   </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#1-introduccion-al-simulador-y-explicacion-del-contexto","title":"1. Introducci\u00f3n al Simulador y Explicaci\u00f3n del Contexto:","text":"<ul> <li>Antes de comenzar con la simulaci\u00f3n, introduce el Little Man Computer (LMC) como una met\u00e1fora sencilla para explicar c\u00f3mo funciona una CPU. El \"peque\u00f1o hombre\" en la simulaci\u00f3n es el procesador, que sigue instrucciones escritas en un formato muy b\u00e1sico y que puede interactuar con un conjunto limitado de recursos: una memoria de n\u00fameros, un buz\u00f3n para entradas (teclado) y otro para salidas (pantalla o impresora).    </li> <li>Explica a los estudiantes que utilizar\u00e1n este simulador para entender c\u00f3mo se comunican el software (las instrucciones que ellos escribir\u00e1n) y el hardware (la CPU y la memoria). As\u00ed podr\u00e1n ver c\u00f3mo el procesador toma decisiones, lee datos de la memoria y los devuelve como salida.    </li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#2-creacion-de-un-programa-simple-en-lmc","title":"2. Creaci\u00f3n de un Programa Simple en LMC","text":"<ul> <li>Los estudiantes usar\u00e1n el simulador LMC para escribir un programa simple que sume dos n\u00fameros introducidos por el usuario y muestre el resultado en pantalla. Aqui tienes el acceso al simulador </li> </ul> <p>Ejemplo de c\u00f3digo en LMC para sumar dos n\u00fameros:    </p> <pre><code>```nasm\nINP           ; Entrada del primer n\u00famero\nSTA NUM1      ; Guardar el n\u00famero en la memoria\nINP           ; Entrada del segundo n\u00famero\nADD NUM1      ; Sumar el segundo n\u00famero al primero\nOUT           ; Mostrar el resultado\nHLT           ; Terminar el programa\nNUM1 DAT 0    ; Variable para almacenar el n\u00famero\n\n```\n</code></pre>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#3-ejecucion-y-analisis-del-programa","title":"3. Ejecuci\u00f3n y An\u00e1lisis del Programa","text":"<ul> <li>Una vez escrito el programa, los estudiantes lo ejecutar\u00e1n paso a paso en el simulador. A medida que se ejecute el programa, el simulador mostrar\u00e1 c\u00f3mo las instrucciones van siendo procesadas por la CPU (el peque\u00f1o hombre), c\u00f3mo se almacenan los n\u00fameros en la memoria y c\u00f3mo se realiza la salida.</li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#4-ampliacion-simulacion-del-hardware-completo-en-pcjs-machines","title":"4. Ampliaci\u00f3n: Simulaci\u00f3n del Hardware Completo en PCjs Machines","text":"<p>Si deseas una actividad m\u00e1s avanzada para alumnos con mayor comprensi\u00f3n, puedes complementar el uso de LMC con una simulaci\u00f3n en PCjs Machines (https://www.pcjs.org/). Aqu\u00ed, los estudiantes pueden cargar un programa en un sistema operativo antiguo, como MS-DOS, y ver c\u00f3mo el software controla el hardware en una simulaci\u00f3n de un ordenador completo.</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica004/#5-resultados-esperados","title":"5. Resultados Esperados","text":"<ul> <li>Los estudiantes entender\u00e1n de forma visual y pr\u00e1ctica c\u00f3mo el software que escriben (instrucciones) interact\u00faa con la CPU (procesador), la memoria y los perif\u00e9ricos (entrada/salida).</li> <li>Lograr\u00e1n ver c\u00f3mo las operaciones b\u00e1sicas de un procesador se relacionan con las instrucciones del software, lo que facilita la comprensi\u00f3n de c\u00f3mo los programas controlan el hardware.</li> <li>Podr\u00e1n identificar el rol de cada componente del sistema (procesador, memoria y perif\u00e9ricos) y c\u00f3mo su correcta interacci\u00f3n es esencial para el funcionamiento del software en cualquier entorno.</li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/","title":"UD 1 - P10: Reflexi\u00f3n y discusi\u00f3n","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#p-110-reflexion-y-discusion-sobre-los-resultados","title":"P 1.10: Reflexi\u00f3n y discusi\u00f3n sobre los resultados","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#1-relacion-software-y-hardware","title":"1. Relaci\u00f3n software y hardware","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#11-primera-parte","title":"1.1. Primera parte","text":"<p>1.1.1. \u00bfC\u00f3mo se ejecuta el c\u00f3digo en el procesador?  1.1.2. \u00bfQu\u00e9 hace la memoria RAM con la informaci\u00f3n del bot\u00f3n o el LED?   1.1.3. \u00bfC\u00f3mo se comunican los perif\u00e9ricos (bot\u00f3n y LED) con el procesador?    </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#12-segunda-parte","title":"1.2. Segunda parte","text":"<p>1.2.1. \u00bfC\u00f3mo interact\u00faan el procesador, la memoria y los perif\u00e9ricos en la ejecuci\u00f3n del programa?  1.2.2. \u00bfQu\u00e9 pasa con los datos en la memoria cuando el programa se ejecuta?   1.2.3. \u00bfQu\u00e9 roles juegan las instrucciones del software en esta interacci\u00f3n?   1.2.4. \u00bfC\u00f3mo se relaciona esta simulaci\u00f3n con lo que ocurre en un ordenador real?    </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#2-del-codigo-fuente-al-ejecutable","title":"2. Del c\u00f3digo fuente al ejecutable","text":"<p>2.1. \u00bfC\u00f3mo se diferencia el c\u00f3digo fuente del c\u00f3digo objeto y del ejecutable?   2.2. \u00bfPor qu\u00e9 el ordenador no puede entender el c\u00f3digo fuente directamente?   2.3. \u00bfPor qu\u00e9 es importante el paso de enlazado en la creaci\u00f3n de programas?  2.4. \u00bfQu\u00e9 ocurre si falta alguna de las etapas (c\u00f3digo objeto o ejecutable)?    </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#3-generacion-de-codigo-intermedio","title":"3. Generaci\u00f3n de c\u00f3digo intermedio","text":"<p>3.1. \u00bfC\u00f3mo difiere el c\u00f3digo intermedio del c\u00f3digo ejecutable tradicional?  3.2. \u00bfPor qu\u00e9 es \u00fatil tener una m\u00e1quina virtual?  3.3. \u00bfQu\u00e9 ventajas ofrece el c\u00f3digo intermedio?   3.4. \u00bfAdem\u00e1s de java, qu\u00e9 otros lenguajes usan m\u00e1quinas virtuales?       </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#4-lenguajes-de-programacion","title":"4. Lenguajes de programaci\u00f3n","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#41-primera-parte","title":"4.1. Primera parte","text":"<p>Compara el proceso de ejecuci\u00f3n entre el lenguaje compilado y el interpretado.       4.1.1. \u00bfQu\u00e9 diferencias notaron en el proceso de compilaci\u00f3n frente a la ejecuci\u00f3n directa?  4.1.2. \u00bfQu\u00e9 pasa si hay un error de sintaxis en cada lenguaje? \u00bfCu\u00e1ndo se detecta el error?    </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#42-segunda-parte","title":"4.2. Segunda parte","text":"<p>Compara un lenguaje de alto nivel con uno de bajo nivel.    4.2.1. \u00bfQu\u00e9 notaron sobre la abstracci\u00f3n entre los lenguajes de alto nivel y bajo nivel?   4.2.2. \u00bfQu\u00e9 ventajas y desventajas encontraron en cada uno?</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#43-tercera-parte","title":"4.3. Tercera parte","text":"<p>Compara un lenguaje orientado a objetos vs funcional.    4.3.1. \u00bfC\u00f3mo funciona la organizaci\u00f3n de datos en Java usando objetos y m\u00e9todos?   4.3.2. \u00bfC\u00f3mo es diferente trabajar en un enfoque funcional en Python, usando solo funciones puras?      </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#44-reflexion-final","title":"4.4. Reflexi\u00f3n final","text":"<p>4.4.1. \u00bfQu\u00e9 lenguajes se sintieron m\u00e1s f\u00e1ciles de usar? \u00bfPor qu\u00e9?   4.4.2. \u00bfEn qu\u00e9 casos es preferible usar un lenguaje compilado frente a uno interpretado?     4.4.3. \u00bfCu\u00e1ndo es mejor usar un lenguaje de alto nivel en lugar de uno de bajo nivel?       4.4.4. \u00bfC\u00f3mo se siente trabajar con el paradigma orientado a objetos en comparaci\u00f3n con el imperativo o funcional?         </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#5-herramientas-de-desarrollo","title":"5. Herramientas de desarrollo","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#51-primera-parte","title":"5.1. Primera parte","text":"<p>Respecto a las proceso de creaci\u00f3n de software identifica un conjunto de herramientas a usar.   5.1.1. \u00bfQu\u00e9 hace cada una de las herramientas?    5.1.2. \u00bfQu\u00e9 tipo de tareas facilita?   5.1.3. \u00bfQu\u00e9 caracter\u00edsticas ofrece que la hacen \u00fanica o diferente de otras herramientas similares?   5.1.4. Elige una \u00bfC\u00f3mo es la experiencia de usuario al usarla? \u00bfEs f\u00e1cil o compleja?   5.1.5. Elige una \u00bfEn qu\u00e9 situaciones ser\u00eda ideal utilizar esta herramienta?   5.1.6. Elige una \u00bfQu\u00e9 limitaciones encontraste en la herramienta?      </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#52-segunda-parte","title":"5.2. Segunda parte","text":"<p>C\u00e9ntrate en una herramienta dentro de la misma categor\u00eda y comp\u00e1rala con otras:   5.2.1. \u00bfQu\u00e9 herramienta se considera m\u00e1s \u00fatil y por qu\u00e9?   5.2.2. \u00bfQu\u00e9 ventajas tiene una sobre la otra?   5.2.3. \u00bfCu\u00e1l herramienta result\u00f3 ser la m\u00e1s intuitiva y por qu\u00e9?   5.2.4. \u00bfEn qu\u00e9 casos se recomendar\u00eda usar un compilador en lugar de un int\u00e9rprete?   5.2.5. \u00bfQu\u00e9 tipo de proyectos se beneficiar\u00edan m\u00e1s de un framework como Django?     </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica010/#53-reflexion-final","title":"5.3. Reflexi\u00f3n final","text":"<p>Con base en la experiencia de evaluaci\u00f3n de las herramientas:    5.3.1. \u00bfC\u00f3mo crees que impacta la elecci\u00f3n de la herramienta en la calidad del software?   5.3.2. \u00bfQu\u00e9 caracter\u00edsticas buscar\u00edas en una herramienta para facilitar tu flujo de trabajo?   5.3.3. \u00bfC\u00f3mo cambi\u00f3 tu percepci\u00f3n de estas herramientas despu\u00e9s de haberlas probado y evaluado?    </p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/","title":"UD 1 - P11: Elementos de desarrollo","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#p-111-elementos-de-desarrollo","title":"P 1.11: Elementos de desarrollo","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#1-objetivo","title":"1. Objetivo","text":"<p>Evaluar la relaci\u00f3n entre software y hardware, clasificar lenguajes de programaci\u00f3n y comprender los diferentes procesos de ejecuci\u00f3n (compilaci\u00f3n, interpretaci\u00f3n y m\u00e1quinas virtuales), utilizando ejemplos de lenguajes interpretados, compilados y que generan c\u00f3digo intermedio para su ejecuci\u00f3n en una m\u00e1quina virtual.</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#2-dinamica","title":"2. Din\u00e1mica","text":"<ul> <li>Individual.</li> <li>Cada grupo deber\u00e1 trabajar con tres lenguajes de programaci\u00f3n diferentes:<ul> <li>Lenguajes interpretados (Python).</li> <li>Lenguajes compilados (C).</li> <li>Lenguajes que generan c\u00f3digo intermedio ejecutado en una m\u00e1quina virtual (Java).</li> </ul> </li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#3-tarea","title":"3. Tarea","text":"<p>Escribir un peque\u00f1o programa en cada lenguaje y responder a las preguntas.   </p> <p>El programa que se debe desarrollar es el siguiente:   </p> <p>Programa:    </p> <p>Escribe un programa b\u00e1sico en cada uno de los tres lenguajes elegidos que:   </p> <ol> <li>Pregunte el nombre del usuario.    </li> <li>Muestre un mensaje que diga: <code>\"Hola [nombre del usuario]. Este programa est\u00e1 hecho en el lenguaje de programaci\u00f3n: [lenguaje]\"</code>.    </li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#5-preguntas-y-actividades-para-evaluar-cada-criterio-de-evaluacion","title":"5. Preguntas y Actividades para Evaluar Cada Criterio de Evaluaci\u00f3n","text":"<p>Contesta a est\u00e1s preguntas de forma concisa y clara. Las respuestas deben estar bien estructuradas e ir al grano. Si es necesario a\u00f1ade capturas de pantalla para ilustrar tus respuestas.</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#51-criterio-de-evaluacion-1a-relacion-entre-software-y-hardware","title":"5.1. Criterio de Evaluaci\u00f3n 1.a: Relaci\u00f3n entre Software y Hardware","text":"<p>Pregunta:    </p> <ol> <li>Describe c\u00f3mo el software que has creado se ha relacionado con los componentes f\u00edsicos del dispositivo (memoria RAM, procesador, perif\u00e9ricos, etc.) durante la ejecuci\u00f3n de los tres lenguajes (interpretado, compilado y en m\u00e1quina virtual).    <ul> <li>Puntos a incluir:    <ul> <li>C\u00f3mo se almacenaron los datos en memoria.    </li> <li>Qu\u00e9 hizo el procesador con el c\u00f3digo.    </li> <li>Si se interactu\u00f3 con perif\u00e9ricos, como la pantalla para mostrar la salida.    </li> </ul> </li> </ul> </li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#52-criterio-de-evaluacion-1c-diferenciacion-entre-codigo-fuente-codigo-objeto-y-ejecutable","title":"5.2. Criterio de Evaluaci\u00f3n 1.c: Diferenciaci\u00f3n entre C\u00f3digo Fuente, C\u00f3digo Objeto y Ejecutable","text":"<p>Preguntas:    </p> <ol> <li>Explica c\u00f3mo el c\u00f3digo fuente que escribiste se transform\u00f3 en c\u00f3digo objeto y ejecutable en el caso de los lenguajes compilados. \u00bfGeneraste archivos intermedios (c\u00f3digo objeto)? \u00bfQu\u00e9 nombres tomaron estos archivos?    </li> <li>Para los lenguajes interpretados, describe c\u00f3mo el c\u00f3digo fuente se ejecut\u00f3 directamente, sin generar archivos de c\u00f3digo objeto o ejecutable.    </li> <li>Para el lenguaje que genera c\u00f3digo intermedio (Java, C#), explica c\u00f3mo el c\u00f3digo fuente se transform\u00f3 en c\u00f3digo intermedio (bytecode) y c\u00f3mo este fue ejecutado por la m\u00e1quina virtual.    </li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#53-criterio-de-evaluacion-1d-generacion-de-codigo-intermedio-para-maquinas-virtuales","title":"5.3. Criterio de Evaluaci\u00f3n 1.d: Generaci\u00f3n de C\u00f3digo Intermedio para M\u00e1quinas Virtuales","text":"<p>Preguntas:    </p> <ol> <li>Describe el proceso de generaci\u00f3n de c\u00f3digo intermedio (bytecode) en el lenguaje que utilizaste que emplea una m\u00e1quina virtual (por ejemplo, Java o C#).    </li> <li>Explica qu\u00e9 rol juega la m\u00e1quina virtual en la ejecuci\u00f3n del c\u00f3digo y c\u00f3mo difiere de la ejecuci\u00f3n directa en un sistema operativo como ocurre con los lenguajes compilados e interpretados.    </li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#54-criterio-de-evaluacion-1e-clasificacion-de-lenguajes-de-programacion","title":"5.4. Criterio de Evaluaci\u00f3n 1.e: Clasificaci\u00f3n de Lenguajes de Programaci\u00f3n","text":"<p>Preguntas:    </p> <ol> <li> <p>Clasifica los tres lenguajes utilizados (interpretado, compilado y en m\u00e1quina virtual) seg\u00fan su:</p> <ul> <li>Modo de ejecuci\u00f3n (interpretado vs compilado vs m\u00e1quina virtual).   </li> <li>Nivel de abstracci\u00f3n (alto nivel vs bajo nivel).   </li> <li>Paradigma de programaci\u00f3n (imperativo, orientado a objetos, funcional).   </li> </ul> </li> <li> <p>Explica qu\u00e9 caracter\u00edsticas de estos lenguajes influyeron en su clasificaci\u00f3n.    </p> </li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#55-criterio-de-evaluacion-1f-evaluacion-de-herramientas-utilizadas-en-el-desarrollo","title":"5.5. Criterio de Evaluaci\u00f3n 1.f: Evaluaci\u00f3n de Herramientas Utilizadas en el Desarrollo","text":"<p>Preguntas:    </p> <ol> <li>Para cada uno de los tres lenguajes (interpretado, compilado y en m\u00e1quina virtual), describe las herramientas que utilizaste en el proceso de desarrollo:    <ul> <li>Sistema operativo (\u00bfen qu\u00e9 sistema ejecutaste el programa?).   </li> <li>Editor de texto o IDE (\u00bfd\u00f3nde escribiste el c\u00f3digo?).    </li> <li>Compilador o int\u00e9rprete (\u00bfc\u00f3mo se transform\u00f3 o ejecut\u00f3 el c\u00f3digo?).   </li> <li>Depurador (si lo usaste, \u00bfc\u00f3mo lo empleaste para encontrar errores?).     </li> <li>Sistema de gesti\u00f3n de versiones (si lo usaste, \u00bfc\u00f3mo guardaste las versiones del c\u00f3digo?).     </li> </ul> </li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#6-entrega","title":"6. Entrega","text":"<p>Cada grupo deber\u00e1 entregar:    </p> <ol> <li>El c\u00f3digo fuente de los tres lenguajes elegidos (interpretado, compilado y en m\u00e1quina virtual).    </li> <li>Capturas de pantalla de la ejecuci\u00f3n del programa en cada lenguaje.    </li> <li>Respuestas a todas las preguntas planteadas, agrupadas por criterio de evaluaci\u00f3n.    </li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#7-conclusion-final","title":"7. Conclusi\u00f3n Final","text":"<p>Al final del trabajo, se deber\u00e1 reflexionar y entregar una conclusi\u00f3n, de no m\u00e1s de 10 l\u00edneas, que compare las diferencias entre los tres lenguajes (interpretado, compilado y en m\u00e1quina virtual), destacando:     </p> <ul> <li>Las diferencias de rendimiento.    </li> <li>La facilidad o complejidad de cada proceso de ejecuci\u00f3n.    </li> <li>Las ventajas y desventajas de cada tipo de lenguaje (interpretado vs compilado vs intermedio).    </li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica011/#8-evaluacion","title":"8. Evaluaci\u00f3n","text":"<p>Esta actividad permite evaluar los siguientes Criterios de Evaluaci\u00f3n:     </p> <ul> <li>CE 1.a: Relaci\u00f3n entre software y hardware.    </li> <li>CE 1.c: Diferencias entre c\u00f3digo fuente, objeto y ejecutable.    </li> <li>CE 1.d: Generaci\u00f3n de c\u00f3digo intermedio en lenguajes con m\u00e1quinas virtuales.    </li> <li>CE 1.e: Clasificaci\u00f3n de lenguajes de programaci\u00f3n.    </li> <li>CE 1.f: Evaluaci\u00f3n de las herramientas utilizadas en el desarrollo de software.    </li> </ul>","tags":["Software"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/","title":"UD 1 - 1.1 Relaci\u00f3n entre software y hardware","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#11-relacion-entre-el-software-y-el-hardware-ce-1a","title":"1.1 Relaci\u00f3n entre el Software y el Hardware (CE 1.a)","text":"<p>Imagina que un ordenador es como una cocina muy moderna. Los componentes f\u00edsicos (hardware) ser\u00edan los electrodom\u00e9sticos, la memoria es como los armarios donde guardas los ingredientes, el procesador ser\u00eda el chef que realiza las tareas, y los perif\u00e9ricos (teclado, rat\u00f3n, pantalla, impresora) ser\u00edan como los utensilios y aparatos que usas para interactuar con la cocina (tus manos, ollas, horno, etc.). Ahora, el software ser\u00edan las recetas que el chef sigue para cocinar un plato. Las instrucciones (o pasos) en esa receta son lo que le dicen al chef qu\u00e9 hacer exactamente en la cocina.</p> <p>Para que un ordenador pueda \"cocinar\" (o ejecutar un programa), el software necesita comunicarse con el hardware, siguiendo unos pasos muy espec\u00edficos.  Al igual que una receta no tiene sentido sin alguien que la cocina, y alguien que cocina no tiene sentido sin receta. El hardware y el software se necesitan uno al otro.</p> <p> </p> Hardware y software <p>Un pc, port\u00e1til o dispositivo m\u00f3vil, como tel\u00e9fono m\u00f3vil o tablet, est\u00e1 compuesto principalmente por un hardware y un software. A continuaci\u00f3n, vamos a ver que es el hardware y el software y c\u00f3mo trabajan juntos.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#1-que-es-el-hardware","title":"1. \u00bfQu\u00e9 es el Hardware?","text":"<p>La Real Academia Espa\u00f1ola describe al hardware como el \u201cconjunto de los componentes que integran la parte material de una computadora\u201d, es decir, todas las partes f\u00edsicas que la constituyen, aquellas que puedes ver y tocar, por tanto el disco duro, teclado, monitor, rat\u00f3n, circuitos, como la tarjeta de memoria, el microprocesador o CPU, entre otros, conforman el hardware.</p> <p>Aqu\u00ed tienes los componentes m\u00e1s importantes:</p> <ul> <li>Procesador (CPU): Es el cerebro del ordenador. Toma las instrucciones de un programa y las ejecuta. Por ejemplo, si en un videojuego tu personaje debe saltar, el procesador es quien se encarga de realizar los c\u00e1lculos necesarios para que eso ocurra.</li> <li>Memoria RAM: Es donde el ordenador guarda temporalmente la informaci\u00f3n que necesita r\u00e1pidamente. Si sigues con el ejemplo del videojuego, la RAM ser\u00eda el lugar donde se guarda qu\u00e9 tan alto salta el personaje o en qu\u00e9 parte del nivel est\u00e1. Cuando apagas el ordenador, esta informaci\u00f3n desaparece.</li> <li>Disco duro o SSD: Es donde el ordenador guarda informaci\u00f3n a largo plazo, como el propio videojuego o los documentos que escribes en un editor de texto. A diferencia de la memoria RAM, los datos aqu\u00ed se mantienen incluso si apagas el equipo.</li> <li>Perif\u00e9ricos: Son todos los dispositivos que permiten que el usuario se comunique con el ordenador, como el teclado, el rat\u00f3n o la pantalla. Tambi\u00e9n incluye dispositivos que se conectan al ordenador, como impresoras o memorias USB.</li> </ul> <p> </p> Maquina Von Neumann","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#2-que-es-el-software","title":"2. \u00bfQu\u00e9 es el Software?","text":"<p>El software, por su parte, de acuerdo con el IEEE: \u201ces el conjunto de los programas de c\u00f3mputo, procedimientos, reglas, documentaci\u00f3n y datos asociados, que forman parte de las operaciones de un sistema de computaci\u00f3n\u201d.</p> <p>Dicho en otras palabras, son todos los programas o aplicaciones que integran un dispositivo y que le permiten realizar tareas espec\u00edficas gracias al lenguaje de programaci\u00f3n.</p> <p>El software le da instrucciones al hardware de la forma como debe realizar una tarea, por esta raz\u00f3n, todos los programas que usamos en un dispositivo son software. Algunos ejemplos de software son:</p> <ul> <li>Navegador web como Google Chrome o Mozilla Firefox.</li> <li>Sistemas operativos como Windows, Mac OS, Linux, entre otros.</li> <li>Antivirus.</li> <li>Aplicaciones de ofim\u00e1tica como Microsoft Word.</li> <li>Sistemas empresariales como un BPMS, ERP, CRM, entre otros.</li> </ul> <p>Una posible clasificaci\u00f3n del software es:</p> <ul> <li>De sistema (Sistema operativo, drivers -controladores-)</li> <li>De aplicaci\u00f3n (Suite ofim\u00e1tica, Navegador, Edici\u00f3n de imagen, ...)</li> <li>De desarrollo (Editores, compiladores, interpretes, ...)</li> </ul> <p>Aunque existen muchos tipos de software, uno de los m\u00e1s importante es el sistema operativo (como Windows, macOS o Linux), que act\u00faa como el intermediario entre el hardware y los programas que usamos.  Piensa en el sistema operativo como el jefe de cocina. Cuando pides un plato (por ejemplo, abrir un archivo de texto), el sistema operativo se asegura de que el chef (procesador) tenga todo lo que necesita (ingredientes en la RAM) y los utensilios adecuados (acceso a disco duro o teclado) para completar la tarea.</p> <p> </p> Tipos de Software","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#3-como-se-comunican-el-software-y-el-hardware","title":"3. \u00bfC\u00f3mo se Comunican el Software y el Hardware?","text":"<p>La relaci\u00f3n entre el software y el hardware se pueden describir de la siguiente forma:</p> <ul> <li>Disco duro: almacena de forma permanente los archivos ejecutables y los archivos de datos.</li> <li>Memoria RAM: almacena de forma temporal el c\u00f3digo binario de los archivos ejecutables y los archivos de datos necesarios.</li> <li>CPU: lee y ejecuta instrucciones almacenadas en memoria RAM, as\u00ed como los datos necesarios.</li> <li>E/S: recoge nuevos datos desde la entrada, se muestran los resultados, se leen/guardan a disco, ...</li> </ul> <p>El disco duro se considera un perif\u00e9rico de E/S (Entrada/Salida). La CPU se llama tambi\u00e9n UCP (en ingl\u00e9s), procesador o microprocesador.</p> <p>Cada vez que ejecutamos un programa en el ordenador, este se carga en la memoria RAM, y la CPU va recuperando una a una las instrucciones y \u00e9sta las va ejecutando, llevando a cabo las tareas que el software tenia programadas. Por ejemplo:</p> <ul> <li>Cuando escribes en un procesador de textos, como Word, el software env\u00eda instrucciones al teclado (perif\u00e9rico) para captar las letras que est\u00e1s presionando.</li> <li>Cuando guardas el documento, el software env\u00eda instrucciones al disco duro para almacenar el archivo en un lugar espec\u00edfico.</li> </ul> <p>El procesador es quien recibe estas instrucciones y las ejecuta. El proceso se divide en peque\u00f1os pasos que el procesador sigue de manera muy r\u00e1pida (millones de veces por segundo).</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#4-ejemplo-el-juego-del-tetris","title":"4. Ejemplo: El Juego del Tetris","text":"<p>Vamos a imaginar un ejemplo pr\u00e1ctico con un videojuego muy sencillo: Tetris.</p> <ul> <li>Interacci\u00f3n con el hardware:<ul> <li>Cuando presionas las flechas del teclado para mover las piezas, el teclado (perif\u00e9rico) env\u00eda una se\u00f1al al procesador.</li> <li>El procesador calcula c\u00f3mo debe moverse la pieza en la pantalla.</li> <li>La memoria RAM guarda temporalmente la posici\u00f3n de las piezas mientras el juego sigue corriendo.</li> <li>Si decides guardar tu partida, el procesador enviar\u00e1 instrucciones al disco duro para almacenar la partida y poder recuperarla m\u00e1s tarde.</li> </ul> </li> <li>C\u00f3mo se Comunican el software y el hardware:<ul> <li>El software del juego Tetris da las instrucciones (c\u00f3digo) de c\u00f3mo deben comportarse las piezas cuando las mueves.</li> <li>El procesador ejecuta esas instrucciones, mostrando las piezas en la pantalla.</li> <li>Cuando pierdes, el sistema operativo se encarga de liberar la memoria y recursos que el juego estaba usando.</li> </ul> </li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#5-por-que-es-importante-entender-esta-relacion","title":"5. \u00bfPor Qu\u00e9 es Importante Entender Esta Relaci\u00f3n?","text":"<p>Entender c\u00f3mo se comunican el software y el hardware es esencial para poder desarrollar aplicaciones eficientes. Si sabes qu\u00e9 recursos utiliza un programa, puedes optimizar el uso del procesador o la memoria, haciendo que el software funcione de manera m\u00e1s r\u00e1pida y eficiente.</p> <p>Por ejemplo:</p> <ul> <li>Si sabes que tu programa va a necesitar mucha memoria (como un editor de videos), podr\u00edas optimizarlo para que utilice la RAM de manera eficiente, evitando que se quede sin recursos.</li> <li>Si desarrollas un programa para un tel\u00e9fono m\u00f3vil, debes tener en cuenta que el procesador de un m\u00f3vil es menos potente que el de un ordenador, por lo que tu software debe ser m\u00e1s ligero y eficiente.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#6-conclusion","title":"6. Conclusi\u00f3n","text":"<p>El software y el hardware est\u00e1n estrechamente relacionados. El software da las instrucciones y el hardware las ejecuta, pero para que esto ocurra de manera eficiente, como desarrolladores, debemos entender c\u00f3mo funciona cada componente. Al dise\u00f1ar aplicaciones, debemos tener en cuenta qu\u00e9 recursos (memoria, procesador, perif\u00e9ricos) utilizamos y c\u00f3mo optimizarlos.</p> <p>Con este conocimiento, ya podemos adentrarnos en conceptos m\u00e1s t\u00e9cnicos como la diferencia entre el c\u00f3digo fuente, el c\u00f3digo objeto y el c\u00f3digo ejecutable, que es el siguiente paso en el desarrollo de software.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/","title":"UD 1 - 1.2 Codigo Fuente, Ojeto y Ejecutable","text":"","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/#12-codigo-fuente-objeto-y-ejecutable","title":"1.2 C\u00f3digo Fuente, Objeto y Ejecutable","text":"<p>En esta unidad vamos a estudiar el proceso de creaci\u00f3n de un programa, desde la escritura del c\u00f3digo fuente hasta la ejecuci\u00f3n del programa. Imagina que quieres construir una mesa. Primero, haces un plano de c\u00f3mo se ver\u00e1 la mesa y c\u00f3mo la vas a armar. Luego, cortas las piezas de madera seg\u00fan el plano y finalmente, ensamblas la mesa para que puedas usarla. En el mundo de la programaci\u00f3n, este proceso es muy similar a c\u00f3mo un programa inform\u00e1tico pasa por diferentes etapas antes de estar listo para ejecutarse en un ordenador.</p> <p>Estas tres etapas principales son:</p> <ol> <li>C\u00f3digo fuente (el \"plano\" que el programador escribe).</li> <li>C\u00f3digo objeto (las \"piezas de madera\" ya cortadas y listas para ensamblar).</li> <li>C\u00f3digo ejecutable (la \"mesa ensamblada\" que puedes usar).</li> </ol> <p> </p> C\u00f3digo fuente, objeto, ejecutable  <p>Cada una de estas etapas tiene un prop\u00f3sito espec\u00edfico, y es importante entender qu\u00e9 ocurre en cada una de ellas.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/#1-que-es-el-codigo-fuente","title":"1. \u00bfQu\u00e9 es el C\u00f3digo Fuente?","text":"<p>El c\u00f3digo fuente es el conjunto de instrucciones que el programador escribe utilizando un lenguaje de programaci\u00f3n que los humanos pueden leer y comprender, como Python, Java, C, C++, entre otros. Este c\u00f3digo no puede ser directamente ejecutado por la m\u00e1quina, ya que los ordenadores solo entienden el lenguaje de m\u00e1quina (una serie de unos y ceros).</p> <ul> <li> <p>Ejemplo: Si est\u00e1s programando en C, tu c\u00f3digo fuente podr\u00eda verse as\u00ed:</p> <pre><code>#include &lt;stdio.h&gt;int main() {\n    printf(\"Hola, mundo!\\n\");\n    return 0;\n}\n</code></pre> </li> </ul> <p>Este c\u00f3digo fuente en C contiene instrucciones que le dicen al ordenador que muestre el mensaje \"Hola, mundo!\" en la pantalla. Este es el punto de partida, pero todav\u00eda no puede ser entendido por la m\u00e1quina.</p> <ul> <li>En qu\u00e9 lenguajes se escribe: Los lenguajes como Java, Python, C, C++ o JavaScript son utilizados por los desarrolladores para escribir c\u00f3digo fuente. Cada lenguaje tiene su propia sintaxis y caracter\u00edsticas.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/#2-que-es-el-codigo-objeto","title":"2. \u00bfQu\u00e9 es el C\u00f3digo Objeto?","text":"<p>El c\u00f3digo objeto es una versi\u00f3n intermedia del c\u00f3digo fuente. Una vez que el programador termina de escribir el c\u00f3digo fuente, este es compilado (traducido) por un programa llamado compilador, que transforma el c\u00f3digo fuente en un formato que la m\u00e1quina est\u00e1 m\u00e1s cerca de entender, pero a\u00fan no es completamente ejecutable.</p> <ul> <li>Ejemplo: Si compilas el c\u00f3digo fuente en C que mostramos anteriormente, obtendr\u00e1s un archivo de c\u00f3digo objeto. Este archivo contiene las instrucciones traducidas al lenguaje de m\u00e1quina, pero sin unir todos los m\u00f3dulos necesarios para que el programa funcione de forma completa.</li> <li>Importancia del c\u00f3digo objeto: Imagina que tu programa tiene muchas partes. El c\u00f3digo objeto contiene las instrucciones traducidas de una sola parte. Luego, todas las partes deben ser \"ensambladas\" en la siguiente etapa.</li> <li>Concepto de enlazado (linking): El enlazador es una herramienta que toma los archivos de c\u00f3digo objeto y los une en un solo archivo ejecutable. El enlazado tambi\u00e9n incluye las bibliotecas necesarias para que el programa funcione correctamente.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/#3-que-es-el-codigo-ejecutable","title":"3. \u00bfQu\u00e9 es el C\u00f3digo Ejecutable?","text":"<p>El c\u00f3digo ejecutable es la versi\u00f3n final del programa que el ordenador puede ejecutar directamente. Este archivo contiene todas las instrucciones en el formato que el procesador entiende, es decir, en lenguaje de m\u00e1quina (unos y ceros). El sistema operativo puede cargar este archivo y hacer que el programa funcione.</p> <ul> <li>Ejemplo: Si el c\u00f3digo fuente en C fue compilado correctamente, el archivo ejecutable resultante podr\u00eda ser algo como hola.exe (en Windows) o simplemente hola (en Linux o macOS). Ahora puedes hacer doble clic en ese archivo, y el programa mostrar\u00e1 \"Hola, mundo!\" en la pantalla.</li> <li>Caracter\u00edsticas del ejecutable: El c\u00f3digo ejecutable no es entendible por los humanos, pero es lo que el ordenador necesita para realizar las tareas del programa.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/#4-ejemplo-visual-el-proceso-de-traduccion-de-codigo","title":"4. Ejemplo Visual: El Proceso de Traducci\u00f3n de C\u00f3digo","text":"<p>Imaginemos que est\u00e1s traduciendo una receta para un robot que solo entiende \u00f3rdenes muy espec\u00edficas:</p> <ol> <li>C\u00f3digo Fuente (La receta): T\u00fa escribes la receta en espa\u00f1ol. Es clara para cualquier humano que la lea, pero el robot no puede entenderla directamente.</li> <li> <p>Ejemplo en C:</p> <pre><code>printf(\"Hola, mundo!\\n\");\n</code></pre> </li> <li> <p>C\u00f3digo Objeto (Traducci\u00f3n intermedia): Alguien traduce parte de la receta al lenguaje que el robot casi entiende. Ahora est\u00e1 en pasos m\u00e1s detallados, pero a\u00fan falta enlazarla con otros ingredientes y utensilios que el robot necesita.</p> </li> <li> <p>Ejemplo en binario (que el procesador entiende, aunque no es completo):</p> <pre><code>1100101010101110...\n</code></pre> </li> <li> <p>C\u00f3digo Ejecutable (Instrucciones finales para el robot): Finalmente, se prepara una versi\u00f3n totalmente detallada y espec\u00edfica de la receta para el robot, utilizando solo las instrucciones que \u00e9l entiende. El robot puede ejecutar la receta y obtener el resultado final.</p> </li> <li> <p>Ejemplo en binario (que el procesador entiende):</p> <pre><code>1100101010101110...\n</code></pre> </li> </ol>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/#5-proceso-de-conversion-compilacion-y-ejecucion","title":"5. Proceso de Conversi\u00f3n: Compilaci\u00f3n y Ejecuci\u00f3n","text":"<p>Para que un programa pase de c\u00f3digo fuente a c\u00f3digo ejecutable, el proceso que sigue generalmente es el siguiente:</p> <ol> <li>Escribir el c\u00f3digo fuente en un lenguaje como C o Java. Aunque no todos los lenguajes siguen el mismo proceso, es mas claro verlo en C.</li> <li>Compilar el c\u00f3digo fuente. El compilador traduce el c\u00f3digo fuente en c\u00f3digo objeto.</li> <li>Enlazar los archivos de c\u00f3digo objeto para generar un c\u00f3digo ejecutable.</li> <li>Ejecutar el c\u00f3digo ejecutable. Este es el programa final que puede correr en el ordenador.</li> </ol>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-CodigoFuenteObjetoEjecutable/#4-conclusion","title":"4. Conclusi\u00f3n","text":"<p>La diferenciaci\u00f3n entre c\u00f3digo fuente, c\u00f3digo objeto y c\u00f3digo ejecutable es esencial para entender c\u00f3mo un programa pasa de ser un conjunto de instrucciones escritas por un programador a algo que el ordenador puede ejecutar.</p> <ul> <li>El c\u00f3digo fuente es lo que los programadores escriben.</li> <li>El c\u00f3digo objeto es una versi\u00f3n intermedia que a\u00fan necesita ser ensamblada.</li> <li>El c\u00f3digo ejecutable es la versi\u00f3n final que el ordenador puede correr.</li> </ul> <p>Comprender estos tres niveles te ayudar\u00e1 a trabajar mejor con herramientas como compiladores y enlazadores, y a entender c\u00f3mo los programas se convierten en aplicaciones funcionales.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/","title":"UD 1 - 1.3 C\u00f3digo intermedio","text":"","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#13-codigo-intermedio","title":"1.3 C\u00f3digo intermedio","text":"<p>Imagina que tienes un libro escrito en tu idioma nativo y quieres que personas de otros pa\u00edses lo puedan leer, pero no hablas sus lenguas. En lugar de traducir el libro a cada uno de esos idiomas, decides usar un intermediario: escribes el libro en un lenguaje universal que un int\u00e9rprete local en cada pa\u00eds pueda traducir a su idioma. Esto es exactamente lo que hacen algunas tecnolog\u00edas en el desarrollo de software: generan c\u00f3digo intermedio que puede ser ejecutado por diferentes m\u00e1quinas virtuales, permitiendo que el programa funcione en diversos sistemas operativos o plataformas.</p> <p> </p> C\u00f3digo intermedio <p>Este concepto es fundamental para lenguajes que se ejecutan sobre las plataformas de JVM (java, kotlin) o (.NET) (C#), que no se compilan directamente a c\u00f3digo ejecutable (que es espec\u00edfico para una m\u00e1quina), sino a un c\u00f3digo intermedio que es independiente de la plataforma.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#1-que-es-el-codigo-intermedio","title":"1. \u00bfQu\u00e9 es el C\u00f3digo Intermedio?","text":"<p>El c\u00f3digo intermedio es un c\u00f3digo generado despu\u00e9s de la compilaci\u00f3n del c\u00f3digo fuente, pero que no est\u00e1 listo para ser ejecutado directamente por el procesador. En lugar de ser espec\u00edfico para una arquitectura de hardware (como un procesador Intel o ARM), el c\u00f3digo intermedio est\u00e1 dise\u00f1ado para ser ejecutado en una m\u00e1quina virtual.</p> <ul> <li>M\u00e1quina Virtual (VM): Una m\u00e1quina virtual es un programa que act\u00faa como un \"int\u00e9rprete\" o \"mediador\" entre el c\u00f3digo intermedio y el hardware. Las m\u00e1quinas virtuales se encargan de ejecutar el c\u00f3digo intermedio, traduciendo este c\u00f3digo a instrucciones que el procesador pueda entender.</li> <li>Ejemplos comunes:<ul> <li>Java genera un c\u00f3digo intermedio llamado bytecode, que es ejecutado por la JVM (Java Virtual Machine).</li> <li>C# genera CIL (Common Intermediate Language), que es ejecutado por la m\u00e1quina virtual CLR (Common Language Runtime) de .NET.</li> </ul> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#2-como-funciona-la-generacion-de-codigo-intermedio","title":"2. \u00bfC\u00f3mo Funciona la Generaci\u00f3n de C\u00f3digo Intermedio?","text":"<p>Cuando programas en lenguajes como Java o C#, el proceso sigue una ruta espec\u00edfica:</p> <ol> <li> <p>Escribir el C\u00f3digo Fuente: El programador escribe el c\u00f3digo en un lenguaje como Java. Este c\u00f3digo es legible para los humanos.</p> <ul> <li> <p>Ejemplo en Java:</p> <pre><code>public class HolaMundo {\n    public static void main(String[] args) {\n        System.out.println(\"\u00a1Hola, mundo!\");\n    }\n}\n</code></pre> </li> </ul> </li> <li> <p>Compilar a C\u00f3digo Intermedio: Cuando el c\u00f3digo fuente se compila, en lugar de generar c\u00f3digo m\u00e1quina espec\u00edfico para una plataforma (como lo har\u00edamos con C o C++), se genera un c\u00f3digo intermedio. En Java, este c\u00f3digo intermedio es llamado bytecode y se guarda en un archivo .class.</p> <ul> <li> <p>Ejemplo de bytecode generado por la JVM (en binario):</p> <pre><code>CA FE BA BE 00 00 00 34 00 0F 01 00 16 ...\n</code></pre> </li> </ul> <p>Este c\u00f3digo bytecode no puede ser ejecutado directamente por el procesador del ordenador, pero est\u00e1 dise\u00f1ado para ser ejecutado por una m\u00e1quina virtual (como la JVM en el caso de Java).</p> </li> <li> <p>Ejecuci\u00f3n en la M\u00e1quina Virtual: Cuando ejecutas el programa en tu ordenador, la m\u00e1quina virtual (en este caso, la JVM) toma el bytecode y lo interpreta, traduci\u00e9ndolo en instrucciones de bajo nivel que el procesador de tu m\u00e1quina pueda entender.</p> <ul> <li>M\u00e1quinas virtuales en acci\u00f3n:<ul> <li>Si ejecutas el programa Java en Windows, la JVM instalada en Windows traducir\u00e1 el bytecode al lenguaje de m\u00e1quina espec\u00edfico de un procesador Intel/AMD.</li> <li>Si ejecutas el mismo programa en macOS o Linux, la JVM correspondiente en esas plataformas traducir\u00e1 el mismo bytecode a instrucciones espec\u00edficas de su hardware.</li> </ul> </li> </ul> </li> </ol>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#3-por-que-usar-codigo-intermedio","title":"3. \u00bfPor Qu\u00e9 Usar C\u00f3digo Intermedio?","text":"<p>El uso de c\u00f3digo intermedio tiene varias ventajas:</p> <ul> <li>Portabilidad: El mismo programa puede correr en diferentes sistemas operativos sin necesidad de recompilar el c\u00f3digo. Solo necesitas una m\u00e1quina virtual para cada plataforma.<ul> <li>Ejemplo: Un programa escrito en Java puede ejecutarse en Windows, Linux y macOS con solo tener instalada la JVM correspondiente en cada sistema. El bytecode generado no cambia, pero la JVM se encarga de adaptarlo.</li> </ul> </li> <li>Seguridad: Las m\u00e1quinas virtuales, como la JVM, pueden agregar capas de seguridad, ya que verifican y controlan el acceso del c\u00f3digo intermedio al sistema operativo y al hardware. Esto evita que programas maliciosos accedan a \u00e1reas no autorizadas del sistema.</li> <li>Optimizaci\u00f3n en Tiempo de Ejecuci\u00f3n: Algunas m\u00e1quinas virtuales utilizan t\u00e9cnicas como compilaci\u00f3n Just-In-Time (JIT), que convierte el c\u00f3digo intermedio en c\u00f3digo de m\u00e1quina justo antes de que sea ejecutado, optimizando el rendimiento del programa.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#4-ejemplo-completo-java-y-la-jvm","title":"4. Ejemplo Completo: Java y la JVM","text":"<p>Veamos el ciclo completo de generaci\u00f3n de c\u00f3digo intermedio utilizando Java como ejemplo:</p> <ol> <li> <p>Escribir el C\u00f3digo Fuente (Java):</p> <pre><code>public class Suma {\n    public static void main(String[] args) {\n        int num1 = 5;\n        int num2 = 3;\n        int resultado = num1 + num2;\n        System.out.println(\"El resultado es: \" + resultado);\n    }\n}\n</code></pre> </li> <li> <p>Compilar el C\u00f3digo: El compilador de Java (javac) toma el archivo Suma.java y lo convierte en bytecode que se almacena en un archivo Suma.class.</p> <pre><code>&gt; javac Suma.java   # Este comando genera el archivo Suma.class\n</code></pre> </li> <li> <p>Generar C\u00f3digo Intermedio (Bytecode): El archivo Suma.class contiene el c\u00f3digo bytecode, que se ve algo as\u00ed:</p> <pre><code>\ufffd\ufffd\ufffd\ufffd7.\n\n&lt;init&gt;()VCodeLineNumberTablemain([Ljava/lang/String;)V\nSourceFile  Suma.java\n                        \ufffd\n                         ootstrapMethods\n                                        !\n                                         \"#Sumajava/lang/Objectjava/lang/SystemoutLjava/io/PrintStream;\n$%El resultado es: makeConcatWithConstants(I)Ljava/lang/String;java/io/PrintStreamprintln(Ljava/lang/String;)V&amp;\n                               *$java/lang/invoke/StringConcatFactory,Lookup\n                                                                            InnerClasses\ufffd(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;-%java/lang/invoke/MethodHandles$Lookupjava/lang/invoke/MethodHandles! *\ufffd\ufffd\n\n\n            &lt;=&gt;\ufffd\ufffd\ufffd\ufffd\n)\n</code></pre> </li> <li> <p>Ejecutar en la M\u00e1quina Virtual (JVM): Para ejecutar el programa, se utiliza el comando:</p> <pre><code>&gt; java Suma   # Ejecuta el programa con la JVM\n</code></pre> </li> </ol> <p>La JVM traduce el bytecode en lenguaje de m\u00e1quina espec\u00edfico para la plataforma y muestra el resultado en pantalla:</p> <pre><code>```text\nEl resultado es: 8\n\n```\n</code></pre>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#5-que-ocurre-si-no-usamos-codigo-intermedio","title":"5. \u00bfQu\u00e9 Ocurre si No Usamos C\u00f3digo Intermedio?","text":"<ul> <li>Compilaci\u00f3n directa: En lenguajes como C o C++, el c\u00f3digo fuente se compila directamente a c\u00f3digo ejecutable espec\u00edfico de una m\u00e1quina. Esto significa que si el programa fue compilado en Windows, no se podr\u00e1 ejecutar en Linux o macOS sin volver a compilarlo para esos sistemas.</li> <li>Portabilidad reducida: Sin el c\u00f3digo intermedio, necesitar\u00edas crear versiones diferentes de tu programa para cada sistema operativo y cada tipo de procesador, lo que puede ser laborioso y aumentar el riesgo de errores.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#6-resumen-visual-ciclo-de-codigo-intermedio-en-java","title":"6. Resumen Visual: Ciclo de C\u00f3digo Intermedio en Java","text":"<ol> <li>C\u00f3digo Fuente (Java) \u2192 Escribes el c\u00f3digo en Java.</li> <li>Compilaci\u00f3n a Bytecode \u2192 El compilador genera el bytecode (c\u00f3digo intermedio).</li> <li>Ejecuci\u00f3n en la JVM \u2192 La JVM interpreta el bytecode y lo convierte a lenguaje de m\u00e1quina espec\u00edfico para el sistema operativo.</li> </ol>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-CodigoIntermedio/#7-conclusion","title":"7. Conclusi\u00f3n","text":"<p>La generaci\u00f3n de c\u00f3digo intermedio permite que los programas sean portables y puedan ejecutarse en diferentes plataformas sin necesidad de recompilar el c\u00f3digo. Las m\u00e1quinas virtuales, como la JVM para Java, toman este c\u00f3digo intermedio y lo ejecutan de manera eficiente, garantizando la portabilidad y seguridad del software. Este enfoque es fundamental en lenguajes modernos como Java y C#, que han sido dise\u00f1ados para funcionar en m\u00faltiples entornos de manera eficiente.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/","title":"UD 1 - 1.4 Traductores.","text":"","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#14-traductores-de-lenguajes-de-alto-nivel","title":"1.4. Traductores de lenguajes de alto nivel","text":"<p>Como ya adelantamos previamente, existen dos tipos generales de traducci\u00f3n: la compilaci\u00f3n y la interpretaci\u00f3n. Cada lenguaje de alto nivel opta por una de ellas, una combinaci\u00f3n de ambas o deja elegir al desarrollador seg\u00fan sus necesidades.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#1-compilacion","title":"1. Compilaci\u00f3n","text":"<p>La compilaci\u00f3n es la conversi\u00f3n de c\u00f3digo en un lenguaje de programaci\u00f3n a c\u00f3digo en otro lenguaje como paso previo a su ejecuci\u00f3n. Normalmente cuando pensamos en compilaci\u00f3n hablamos de su versi\u00f3n m\u00e1s tangible, aquella que nos da un programa ejecutable como salida. Se suele denominar compilaci\u00f3n anticipada o mediante sus siglas inglesas compilaci\u00f3n AOT (Ahead-Of-Time).</p> <p> </p> Compilador <p>Muchos de los lenguajes cl\u00e1sicos y m\u00e1s r\u00e1pidos utilizan la compilaci\u00f3n anticipada: desde Fortran hasta Rust, pasando por C y C++. Este tipo de compilaci\u00f3n permite realizar optimizaciones complejas, por muy costosas que sean, y adaptar el ejecutable final a la m\u00e1quina donde se va a ejecutar.</p> <p>Algunos lenguajes realizan un paso de pre-compilaci\u00f3n intermedia que no genera c\u00f3digo m\u00e1quina sino bytecode o c\u00f3digo portable. En ese paso se trata de producir un c\u00f3digo de bajo nivel independiente de la plataforma de ejecuci\u00f3n que luego pueda ser interpretado de forma eficiente por una m\u00e1quina virtual.</p> <p>Conocidos lenguajes que suelen utilizar compilaci\u00f3n a bytecode son Java o la plataforma .NET.</p> <p>Por otro lado, cuando la compilaci\u00f3n no genera un binario en c\u00f3digo m\u00e1quina, sino un resultado en otro lenguaje de programaci\u00f3n, se trata de una compilaci\u00f3n fuente-a-fuente (source-to-source). A estos compiladores se le llaman transpiladores.</p> <p>Los casos m\u00e1s comunes de este tipo los encontramos en tecnolog\u00edas web, ya que los navegadores principalmente permiten ejecutar c\u00f3digo JavaScript. Si queremos programar para el navegador con otro lenguaje debemos compilar a JavaScript. Algunos lenguajes que usan compilaci\u00f3n fuente a fuente son TypeScript, PureScript, kotlin o Dart.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#11-el-proceso-de-compilacion","title":"1.1. El proceso de compilaci\u00f3n","text":"<p>La compilaci\u00f3n es un proceso complejo que se realiza en dos fases:</p> <ul> <li>An\u00e1lisis: Se comprueba la correcci\u00f3n del c\u00f3digo fuente. Esta fase incluye:<ul> <li>An\u00e1lisis l\u00e9xico: Se asimila cada elemento del c\u00f3digo fuente a una serie de categor\u00edas denominadas tokens</li> <li>An\u00e1lisis sint\u00e1ctico: Se crean representaciones abstractas de la estructura del c\u00f3digo fuente. Estas representaciones suelen ser \u00e1rboles de sintaxis abstracta (AST). Si recordamos el an\u00e1lisis sint\u00e1ctico de la asignatura de lengua nos haremos una idea.</li> <li>An\u00e1lisis sem\u00e1ntico: Se revisan los \u00e1rboles de sintaxis en busca de expresiones sin sentido, aunque correctas a nivel sint\u00e1ctico.</li> </ul> </li> <li>S\u00edntesis: Se trata de generar el c\u00f3digo ejecutable. Suele incluir:<ul> <li>Generaci\u00f3n de c\u00f3digo intermedio: A partir de los AST revisados resultantes de la fase de an\u00e1lisis</li> <li>Optimizaci\u00f3n de c\u00f3digo: Sin modificar el sentido del c\u00f3digo, se modifica el c\u00f3digo intermedio buscando optimizar su ejecuci\u00f3n.</li> <li>Generaci\u00f3n de c\u00f3digo objeto y enlazado: Se genera el c\u00f3digo m\u00e1quina a partir del c\u00f3digo intermedio y se a\u00f1aden las librer\u00edas de c\u00f3digos necesarias para crear un ejecutable.</li> </ul> </li> </ul> <p> </p> Proceso de compilaci\u00f3n","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#12-estructura-de-un-compilador","title":"1.2. Estructura de un Compilador","text":"<p>En la actualidad los compiladores se estructuran en tres programas que se encargan de llevar a cabo una o varias fases del proceso de compilaci\u00f3n: Analizador (Frontend), optimizador y generador (Backend).</p> <p> </p> Estructura de un compilador <p>El analizador es gen\u00e9rico para todas las plataformas de destino, mientras que el optimizador puede ser com\u00fan a varios lenguajes y plataformas. El generador es propio de cada plataforma, ya que genera c\u00f3digo m\u00e1quina a partir de c\u00f3digo intermedio.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#2-interpretacion-y-lenguajes-interpretados","title":"2. Interpretaci\u00f3n y lenguajes interpretados","text":"<p>La forma alternativa de ejecutar un programa a partir del c\u00f3digo en un lenguaje de programaci\u00f3n es no generar una traducci\u00f3n a c\u00f3digo m\u00e1quina, sino analizar el c\u00f3digo y realizar los c\u00f3mputos que \u00e9ste indique, bien directamente o bien a partir alg\u00fan tipo de representaci\u00f3n intermedia que no constituya un programa en c\u00f3digo m\u00e1quina. En este caso se dice que el programa es interpretado.</p> <p> </p> Interprete <p>Mientras se produce la interpretaci\u00f3n, debe ejecutarse en el sistema el programa que la realiza, es decir, el int\u00e9rprete del lenguaje. Las representaciones intermedias que puede generar el int\u00e9rprete son generalmente de dos tipos: un c\u00f3digo de bajo nivel o una estructura de datos.</p> <p>El c\u00f3digo de bajo nivel suele ser bytecode en la actualidad y las estructuras de datos suelen ser \u00e1rboles de sintaxis abstracta (AST) que se van recorriendo para obtener los resultados de la ejecuci\u00f3n. Estas \u00faltimas no son tan utilizadas ya que producen mayores sobrecostes que los c\u00f3digos de bajo nivel.</p> <p>Ejemplos de lenguajes t\u00edpicamente interpretados son Python (con bytecode), Ruby (usaba ASTs hasta la versi\u00f3n 1.8), PHP (con bytecode) y Perl (utiliza ASTs).</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#3-compilacion-en-tiempo-de-ejecucion","title":"3. Compilaci\u00f3n en tiempo de ejecuci\u00f3n","text":"<p>Conocida por sus siglas inglesas JIT (Just-In-Time), es una t\u00e9cnica para mejorar el rendimiento de sistemas que compilan a bytecode consistente en traducir el bytecode a c\u00f3digo m\u00e1quina en tiempo de ejecuci\u00f3n. La ventana de JIT es que puede identificar las partes del c\u00f3digo que se ejecutan frecuentemente y compilarlas, generando el c\u00f3digo m\u00e1quina y reserv\u00e1ndolo para no tener que volver a compilarlo de nuevo, mejorando el rendimiento en tiempo real. Este tipo de compilaci\u00f3n se denomina compilaci\u00f3n din\u00e1mica, y permite analizar el c\u00f3digo durante su ejecuci\u00f3n y mejorar los resultados de un int\u00e9rprete de bytecode convencional o hasta de una compilaci\u00f3n anticipada tradicional (AOT).</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#fuentes","title":"Fuentes","text":"<ul> <li>Interpretes de python</li> <li>Eligiendo un interprete en python</li> <li>JDKs de java. Otros interpretes para java</li> <li>Que JDKs usar</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/","title":"UD 1 - 1.5 Lenguajes de programaci\u00f3n","text":"","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#15-lenguajes-de-programacion","title":"1.5 Lenguajes de programaci\u00f3n","text":"<p>Imagina que est\u00e1s construyendo una casa. Para cada tarea necesitas herramientas diferentes: una sierra para cortar madera, un martillo para clavar, y una brocha para pintar. En programaci\u00f3n ocurre algo similar: hay diferentes lenguajes de programaci\u00f3n, y cada uno est\u00e1 dise\u00f1ado para un prop\u00f3sito o un tipo de tarea espec\u00edfico. Algunos lenguajes son m\u00e1s adecuados para el desarrollo de aplicaciones web, otros para el desarrollo de sistemas, y algunos para proyectos cient\u00edficos o inteligencia artificial.</p> <p> </p> Lenguajes <p>En este punto vamos a clasificar y explicar las caracter\u00edsticas de los lenguajes de programaci\u00f3n m\u00e1s comunes, entendiendo en qu\u00e9 situaciones es mejor usar cada uno de ellos.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#1-que-es-un-lenguaje-de-programacion","title":"1. \u00bfQu\u00e9 es un lenguaje de programaci\u00f3n?","text":"<p>Los lenguajes de programaci\u00f3n nos permiten comunicarnos con la m\u00e1quina gracias a una estandarizaci\u00f3n que permite expresar instrucciones que el ordenador es capaz de ejecutar. Al igual que el lenguaje natural, los lenguajes de programaci\u00f3n vienen definidos por:</p> <ul> <li>L\u00e9xico: determinan el conjunto de s\u00edmbolos y caracteres que se pueden emplear. La conjunci\u00f3n de estos caracteres formar\u00e1n identificadores, constantes, operadores, instrucciones, etc.</li> <li>Sintaxis: conjunto de reglas que determinan las construcciones v\u00e1lidas que se pueden realizar con los elementos anteriores.</li> <li>Sem\u00e1ntica: define el significado de las construcciones anteriores.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#2-tipos-de-lenguajes","title":"2. Tipos de lenguajes","text":"<p>Hoy en d\u00eda existen multitud de lenguajes de programaci\u00f3n, donde cada uno de ellos tiene sus propias caracter\u00edsticas y esto da lugar a multitud de clasificaciones. A continuaci\u00f3n comentaremos algunas de ellas.    </p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#21-segun-el-modo-de-ejecucion-lenguajes-compilados-vs-interpretados","title":"2.1. Seg\u00fan el Modo de Ejecuci\u00f3n: Lenguajes Compilados vs Interpretados","text":"","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#211-lenguajes-compilados","title":"2.1.1. Lenguajes Compilados","text":"<ul> <li>Definici\u00f3n: En estos lenguajes, el c\u00f3digo fuente que escriben los programadores es compilado (traducido) a c\u00f3digo m\u00e1quina espec\u00edfico de una plataforma antes de ser ejecutado. Una vez compilado, se genera un archivo ejecutable que el procesador puede entender y ejecutar directamente.   </li> <li>Caracter\u00edsticas:   <ul> <li>M\u00e1s r\u00e1pidos en tiempo de ejecuci\u00f3n, ya que el c\u00f3digo ya ha sido traducido a instrucciones m\u00e1quina.   </li> <li>Necesitan ser recompilados para cada plataforma.   </li> </ul> </li> <li>Ejemplos: C, C++, Go, Rust.   </li> <li> <p>Ejemplo:   </p> <ul> <li>C: Cuando escribes un programa en C, como este:Debes compilarlo usando un compilador (como GCC), lo que genera un archivo ejecutable que el ordenador puede ejecutar directamente.    </li> </ul> <pre><code>#include &lt;stdio.h&gt;int main() {\n    printf(\"Hola, mundo!\\n\");\n    return 0;\n}\n</code></pre> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#212-lenguajes-interpretados","title":"2.1.2. Lenguajes Interpretados","text":"<ul> <li>Definici\u00f3n: En estos lenguajes, el c\u00f3digo fuente es interpretado por un programa llamado int\u00e9rprete, que lo lee l\u00ednea por l\u00ednea y lo ejecuta al instante, sin necesidad de compilar todo el c\u00f3digo antes.   </li> <li>Caracter\u00edsticas:   <ul> <li>Son m\u00e1s lentos en tiempo de ejecuci\u00f3n porque el c\u00f3digo es traducido l\u00ednea por l\u00ednea en tiempo real.   </li> <li>M\u00e1s flexibles y f\u00e1ciles de probar, ya que no es necesario compilar.   </li> </ul> </li> <li>Ejemplos: Python, JavaScript, Ruby, PHP.   </li> <li> <p>Ejemplo:   </p> <ul> <li>Python: En Python, puedes escribir un programa como este:Y ejecutarlo directamente con el int\u00e9rprete de Python sin necesidad de compilarlo.   </li> </ul> <pre><code>print(\"Hola, mundo!\")\n</code></pre> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#22-segun-el-nivel-de-abstraccion-lenguajes-de-alto-nivel-vs-lenguajes-de-bajo-nivel","title":"2.2. Seg\u00fan el Nivel de Abstracci\u00f3n: Lenguajes de Alto Nivel vs Lenguajes de Bajo Nivel","text":"","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#221-lenguajes-de-alto-nivel","title":"2.2.1. Lenguajes de Alto Nivel","text":"<ul> <li>Definici\u00f3n: Son lenguajes dise\u00f1ados para ser f\u00e1ciles de entender por los humanos. Son m\u00e1s abstractos y ofrecen muchas funcionalidades que ayudan a los desarrolladores, como la gesti\u00f3n de memoria autom\u00e1tica.  </li> <li>Caracter\u00edsticas:    <ul> <li>M\u00e1s f\u00e1ciles de escribir y entender, ya que se acercan al lenguaje humano.  </li> <li>Menos control sobre los detalles de bajo nivel del hardware.  </li> </ul> </li> <li>Ejemplos: Python, Java, C#, JavaScript.  </li> <li> <p>Ejemplo:  </p> <ul> <li>En Python, sumar dos n\u00fameros es tan simple como:  </li> </ul> <pre><code>num1 = 5\nnum2 = 7\nresultado = num1 + num2\nprint(\"El resultado es:\", resultado)\n</code></pre> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#222-lenguajes-de-bajo-nivel","title":"2.2.2. Lenguajes de Bajo Nivel","text":"<ul> <li>Definici\u00f3n: Son lenguajes que est\u00e1n m\u00e1s cerca del lenguaje de m\u00e1quina. Proporcionan un control directo sobre el hardware, como la memoria y los registros del procesador.   </li> <li>Caracter\u00edsticas:   <ul> <li>Ofrecen mucho control y eficiencia, pero son m\u00e1s dif\u00edciles de escribir y entender.   </li> <li>Se utilizan cuando se necesita alto rendimiento o acceso directo a los recursos del sistema.    </li> </ul> </li> <li>Ejemplos: Assembly, C.    </li> <li> <p>Ejemplo:   </p> <ul> <li>Un c\u00f3digo en Assembly puede verse as\u00ed:   </li> </ul> <pre><code>MOV AX, 0005h  ; Cargar el valor 5 en el registro AX\nMOV BX, 0003h  ; Cargar el valor 3 en el registro BX\nADD AX, BX     ; Sumar los valores en AX y BX\n</code></pre> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#23-segun-el-paradigma-de-programacion-imperativos-vs-funcionales-vs-orientados-a-objetos","title":"2.3. Seg\u00fan el Paradigma de Programaci\u00f3n: Imperativos vs Funcionales vs Orientados a Objetos**","text":"","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#231-lenguajes-imperativos","title":"2.3.1. Lenguajes Imperativos:","text":"<ul> <li>Definici\u00f3n: En estos lenguajes, el programador da instrucciones detalladas sobre c\u00f3mo el programa debe ejecutar las tareas. Se enfoca en el estado del programa y c\u00f3mo cambia.   </li> <li>Ejemplos: C, C++, java, kotlin,Python (puede ser usado en estilo imperativo).    </li> <li> <p>Ejemplo:    </p> <ul> <li>Un programa en C que calcula la suma de dos n\u00fameros es imperativo porque especifica los pasos exactos:    </li> </ul> <pre><code>int num1 = 5;\nint num2 = 7;\nint resultado = num1 + num2;\n</code></pre> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#232-lenguajes-funcionales","title":"2.3.2. Lenguajes Funcionales:","text":"<ul> <li>Definici\u00f3n: Se basan en la idea de que las funciones son unidades fundamentales de programaci\u00f3n. En lugar de dar instrucciones sobre c\u00f3mo cambiar el estado, las funciones toman entradas y producen salidas sin cambiar el estado del programa.    </li> <li>Ejemplos: Haskell, Lisp, Erlang, Scala (tambi\u00e9n puede ser usado como orientado a objetos).    </li> <li> <p>Ejemplo:    </p> <ul> <li>En Haskell, la suma de dos n\u00fameros se define de manera funcional:    </li> </ul> <pre><code>suma :: Int -&gt; Int -&gt; Int\nsuma num1 num2 = num1 + num2\n</code></pre> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#233-lenguajes-orientados-a-objetos-oop","title":"2.3.3. Lenguajes Orientados a Objetos (OOP):","text":"<ul> <li>Definici\u00f3n: Estos lenguajes organizan el c\u00f3digo en objetos, que son instancias de clases. Los objetos encapsulan datos y comportamientos. Es \u00fatil cuando se desea modelar elementos del mundo real dentro del software.    </li> <li>Ejemplos: Java, C#, Python (puede ser usado en estilo orientado a objetos).    </li> <li> <p>Ejemplo:    </p> <ul> <li>En Java, puedes crear una clase y un objeto:    </li> </ul> <pre><code>class Coche {\n    String marca;\n    int velocidad;\n\n    void acelerar() {\n        velocidad += 10;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Coche miCoche = new Coche();\n        miCoche.marca = \"Toyota\";\n        miCoche.acelerar();\n        System.out.println(\"Velocidad: \" + miCoche.velocidad);\n    }\n}\n</code></pre> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#3-caracteristicas-de-los-lenguajes-de-programacion-mas-comunes","title":"3. Caracter\u00edsticas de los Lenguajes de Programaci\u00f3n m\u00e1s Comunes**","text":"<p>Aqu\u00ed describimos algunas de las caracter\u00edsticas de los lenguajes m\u00e1s populares hoy en d\u00eda:</p> <ul> <li> <p>Python:</p> <ul> <li>Nivel: Alto nivel.</li> <li>Modo de ejecuci\u00f3n: Interpretado.</li> <li>Paradigma: Soporta m\u00faltiples paradigmas (imperativo, orientado a objetos, funcional).</li> <li>Caracter\u00edsticas: Muy f\u00e1cil de leer y escribir, excelente para principiantes. Usado en ciencia de datos, automatizaci\u00f3n, desarrollo web.</li> </ul> </li> <li> <p>Java:</p> <ul> <li>Nivel: Alto nivel.</li> <li>Modo de ejecuci\u00f3n: Compilado a bytecode y ejecutado en la JVM.</li> <li>Paradigma: Orientado a objetos.</li> <li>Caracter\u00edsticas: Port\u00e1til gracias a la JVM, ampliamente utilizado en desarrollo empresarial, aplicaciones m\u00f3viles (Android) y sistemas backend.</li> </ul> </li> <li> <p>C:</p> <ul> <li>Nivel: Bajo nivel.</li> <li>Modo de ejecuci\u00f3n: Compilado.</li> <li>Paradigma: Imperativo.</li> <li>Caracter\u00edsticas: R\u00e1pido y eficiente, permite un control detallado del hardware. Utilizado para desarrollo de sistemas operativos, controladores y aplicaciones que requieren alto rendimiento.</li> </ul> </li> <li> <p>JavaScript:</p> <ul> <li>Nivel: Alto nivel.</li> <li>Modo de ejecuci\u00f3n: Interpretado.</li> <li>Paradigma: Imperativo y orientado a objetos.</li> <li>Caracter\u00edsticas: El lenguaje de la web, utilizado para hacer p\u00e1ginas interactivas. Tambi\u00e9n se utiliza en desarrollo backend con Node.js.</li> </ul> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#4-elementos-del-lenguaje-de-programacion","title":"4. Elementos del lenguaje de programaci\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n est\u00e1n compuestos por un conjunto de elementos, pasamos a enumerar algunos de los que se repiten en la mayoria de los lenguajes:</p> <ul> <li>Datos: Los datos es la informaci\u00f3n de entrada con la que trabajan los programas, estos pueden ser simples: num\u00e9ricos, alfanum\u00e9ricos o l\u00f3gicos o estructurados: arrays, registros, ficheros (im\u00e1genes, v\u00eddeos, sonido).    </li> <li>Constantes y variables: Los datos son almacenados en variables y constantes, que son porciones de memoria que contienen un identificador (nombre de la variable) y un valor. El tama\u00f1o de esta porci\u00f3n de memoria depender\u00e1 del tipo de dato que almacene (datos simples o estructuras de datos).     </li> <li>Expresiones y operadores: Los operadores son elementos que realizan alguna acci\u00f3n y forman parte de las expresiones, encontramos:    </li> <li>Aritm\u00e9ticos: +, -, *, /, (MOD) m\u00f3dulo, (DIV) divisi\u00f3n entera, ^ (potencia)    </li> <li>Alfanum\u00e9ricos: + (concatenaci\u00f3n)    </li> <li>Condicionales: =, &lt;, &gt;, &lt;=, &gt;=, !=    </li> <li>Par\u00e9ntesis: () se utilizan para anidar expresiones    </li> <li>L\u00f3gicos: NOT (negaci\u00f3n), AND (\u201cy\u201d l\u00f3gico), OR (\u201co\u201d l\u00f3gico)    </li> <li>Instrucciones: Una secuencia de instrucciones dan lugar al proceso del algoritmo. Estas instrucciones siguen estas estructuras:    </li> <li>Simples    <ul> <li>Declarativas: Son las encargadas de declarar variables simples o complejas y  constantes y de reservar la memoria necesaria para almacenar los datos.    </li> <li>Primitivas: Instrucciones encargadas de asignar valores a las variables o de leer e imprimir los datos.   </li> </ul> </li> <li>Estructura secuencial: Se ejecutan una instrucci\u00f3n tras otra, sin que haya opci\u00f3n a saltarse ninguna de ellas.   </li> <li>Estructuras condicionales: Permiten la ejecuci\u00f3n o no de un grupo de instrucciones dependiendo de si se cumple o no una determinada condici\u00f3n. Existen tres tipos: simple:  <code>if</code>; doble:  <code>if else</code>; multiple: <code>switch</code>.   </li> <li>Estructura repetitiva: Permiten la ejecuci\u00f3n repetida de un grupo de instrucciones un n\u00famero determinado de veces o hasta que se cumpla una determinada condici\u00f3n. Existen tres tipos: Repetir mientras: <code>While</code>; Repetir hasta: <code>do-while</code>; Para: <code>For</code>.   </li> <li>Comentarios: Estas instrucciones se incluyen para hacer aclaraciones sobre el c\u00f3digo para guiar al programador o para documentarlo. Al ser compilado estas l\u00edneas se omiten ya que no aportan ning\u00fan valor al c\u00f3digo ejecutable.    </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#5-tendencia-en-lenguajes-de-programacion","title":"5. Tendencia en lenguajes de programaci\u00f3n","text":"<p>TIOBE Index es un ranking de los lenguajes de programaci\u00f3n m\u00e1s utilizados que se actualiza mensualmente. Para realizar este ranking, se consultan los 25 motores de b\u00fasqueda mejor clasificados por Alexa (software de Amazon utilizado para SEO: hacer an\u00e1lisis de datos en sitios web a gran escala), de entre los que destacan Google, Bing y Yahoo. Bas\u00e1ndose en los resultados actuales de este ranking y la evoluci\u00f3n que ha ido teniendo los 10 primeros puestos con los datos de 2019 y 2020, se observa que los lenguajes utilizados para el desarrollo web como Java, Python, Visual Basic, JavaScript y PHP son bastante demandados, acompa\u00f1ados de C, C++, C# y Objetive-C, SQL, Assembly language.</p> <p>Relacionado con las tendencias, aunque a\u00fan siguen surgiendo nuevos lenguajes, como por ejemplo Kotlin para las plataformas Android, Swift para IOS, existen lenguajes bastante consolidados que evolucionan mediante las revisiones propias del lenguaje o adapt\u00e1ndose a las diferentes necesidades mediante la aparici\u00f3n de frameworks, como, por ejemplo, los frameworks Spring, Hibernate para Java, o Angular 5 y React para Javascript. Incluso lenguajes que se ampl\u00edan su espacio de aplicaci\u00f3n al entorno servidor, como javascript en Node.js.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.5.-Lenguajes/#6-conclusion","title":"6. Conclusi\u00f3n","text":"<p>Entender las diferentes clasificaciones y caracter\u00edsticas de los lenguajes de programaci\u00f3n es fundamental para escoger el lenguaje correcto seg\u00fan el tipo de proyecto que quieras desarrollar. Algunos lenguajes son r\u00e1pidos y eficientes, pero m\u00e1s dif\u00edciles de manejar (como C), mientras que otros son m\u00e1s f\u00e1ciles y flexibles, pero menos eficientes en t\u00e9rminos de rendimiento (como Python).</p> <p>Elegir el lenguaje adecuado depender\u00e1 de lo que necesites: velocidad, portabilidad, seguridad o facilidad de uso.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/","title":"UD 1 - 1.6 Funcionalidades de herramientas usadas durante el desarrollo de software","text":"","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#16-herramientas-para-el-desarrollo-del-software","title":"1.6 Herramientas para el desarrollo del software.","text":"<p>Las herramientas de desarrollo de software son programas que ayudan a los programadores a escribir, probar y depurar c\u00f3digo entre otras tareas. Estas herramientas pueden ser editores de texto, compiladores, depuradores, frameworks de pruebas, entre otros.</p> <p>Al desarrollar software, los programadores se apoyan en una gran variedad de herramientas para escribir, compilar, probar, documentar y gestionar su c\u00f3digo. La elecci\u00f3n de la herramienta adecuada es fundamental para mejorar la productividad, calidad y mantenimiento del software. En este punto, vamos a analizar y evaluar las herramientas m\u00e1s utilizadas en el desarrollo de software, excluyendo los entornos integrados de desarrollo (IDEs), que se ver\u00e1n en la siguiente unidad. Nos centraremos en herramientas independientes que cumplen funciones espec\u00edficas en el ciclo de desarrollo de software, como editores de texto, compiladores, int\u00e9rpretes, sistemas de gesti\u00f3n de versiones, frameworks y herramientas de pruebas y calidad.</p> <p> </p> Utilidades para el desarrollo de software","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#1-el-software-y-la-ingenieria-del-software","title":"1. El Software y la Ingenier\u00eda del Software","text":"<p>El Software es el conjunto de instrucciones y datos en formato binario, almacenados dentro la memoria principal cuando \u00e9ste est\u00e1 en ejecuci\u00f3n, que indica a una computadora qu\u00e9 debe hacer y c\u00f3mo. El software se dirige al hardware y es la parte l\u00f3gica del sistema inform\u00e1tico.</p> <p>La Ingenier\u00eda del software es la puesta en com\u00fan de un conjunto de medios, conocimientos, herramientas, procesos y m\u00e9todos de la ingenier\u00eda a fin de obtener software de la mejor forma, para que sea rentable, fiable y que cumpla con las especificaciones acordadas.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#11-el-desarrollo-de-software","title":"1.1. El desarrollo de software","text":"<p>En lo que respecta al proceso del desarrollo del software, tras el nacimiento de la ingenier\u00eda del software, se defini\u00f3 el ciclo de vida del desarrollo de un producto software. Por esa \u00e9poca se estableci\u00f3 el modelo cl\u00e1sico que propon\u00eda un ciclo en cascada con las fases An\u00e1lisis, Dise\u00f1o, Desarrollo, Pruebas, Mantenimiento. En los modelos m\u00e1s actuales, las metodolog\u00edas \u00e1giles como scrum, proponen hacer peque\u00f1os ciclos de forma iterativa e incremental en los que se contemplan acciones de las anteriores fases, teniendo como principal objetivo entregar lo antes posible funcionalidad que aporte valor al usuario.</p> <p> </p> Proceso de desarrollo","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#12-el-proceso-de-desarrollo-y-prueba-de-software-y-las-utilidades-necesarias","title":"1.2. El proceso de desarrollo y prueba de software y las utilidades necesarias","text":"<p>Durante las fases de desarrollo y pruebas se realizan los trabajos de desarrollo de software en base a los dise\u00f1os realizados y posteriormente se testea con objeto de obtener un software de calidad.</p> <p>Tradicionalmente, los programas que se han venido usando en estas fases han sido editores, int\u00e9rpretes y compiladores (codificaci\u00f3n y generaci\u00f3n de ejecutables) y los depuradores (pruebas), si bien posteriormente surgi\u00f3 el concepto de CASE (Computer Aided Software Engineering) que aglutina todas las etapas.</p> <p>Cuando programamos en lenguajes de alto nivel, y desde una perspectiva cl\u00e1sica, estamos generando mediante un programa de edici\u00f3n el c\u00f3digo fuente del software final. Los editores suelen incorporar un coloreado de la sintaxis, indentaci\u00f3n autom\u00e1tica y otras funcionalidades que ayudan al programador.</p> <p>El c\u00f3digo fuente se suele guardar en uno o varios archivos con una extensi\u00f3n concreta seg\u00fan el lenguaje utilizado y debe ser traducido a binario para que las instrucciones puedan ser entendidas y ejecutadas por la m\u00e1quina. Para esto existe otro programa encargado de realizar la traducci\u00f3n llamado traductor, y pueden ser: ensambladores, compiladores e interpretes.</p> <p>Por \u00faltimo, existen otros traductores que producen un c\u00f3digo intermedio entre el c\u00f3digo fuente y el m\u00e1quina. Son por tanto, una mezcla de interpretados y compilados. En el lenguaje Java y kotlin por ejemplo, se genera un recurso bytecode: c\u00f3digo precompilado que necesita interpretarse por la JVM o m\u00e1quina virtual de Java para ejecutarse.</p> <p>Una vez tenemos el c\u00f3digo objeto, mediante el linkado, que puede ser din\u00e1mico (quedan enlazados los distintos ficheros binarios, pero en archivos diferentes) o est\u00e1tico (se a\u00f1ade todos los binarios a un \u00fanico fichero) quedan enlazados los distintos c\u00f3digos objetos y se genera un ejecutable.</p> <p>Una vez tenemos el ejecutable, el software est\u00e1 listo para ser ejecutado y se entra el proceso de pruebas, detecci\u00f3n y soluci\u00f3n de errores, para el que podemos usar frameworks de testeo para dise\u00f1ar e implementar pruebas que detecten los errores, programas de depuraci\u00f3n para encontrar el origen de los errores, as\u00ed como otros programas de monitorizaci\u00f3n y seguimiento que se encargan de monitorizar el funcionamiento de las aplicaciones para ver el comportamiento que tienen en cuanto a rendimiento.</p> <p>Si se identifican errores, para solucionarlos se tendr\u00e1 que pasar por los pasos anteriores de generaci\u00f3n de c\u00f3digo fuente y compilaci\u00f3n hasta generar de nuevo ejecutable.-</p> <p>A continuaci\u00f3n se enumeran algunas herramientas que se pueden utilizar durante el proceso descrito anteriormente:</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#2-utilidades-para-el-desarrollo-y-pruebas-de-programas","title":"2. Utilidades para el desarrollo y pruebas de programas","text":"<p>A continuaci\u00f3n se listan algunas de las utilidades necesarias en el proceso de creaci\u00f3n de software durante las fases de desarrollo y pruebas.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#21-editores-de-texto-y-su-uso-en-el-desarrollo-de-software","title":"2.1. Editores de Texto y su Uso en el Desarrollo de Software","text":"<p>Un editor de texto es una herramienta b\u00e1sica utilizada para escribir y modificar el c\u00f3digo fuente de los programas. Aunque su funcionalidad es simple en comparaci\u00f3n con un IDE, los editores de texto son vers\u00e1tiles y ligeros, lo que los hace ideales para editar r\u00e1pidamente archivos de c\u00f3digo en diferentes lenguajes.</p> <ul> <li>Ejemplos:<ul> <li>Sublime Text: Un editor de texto ligero con soporte para m\u00faltiples lenguajes, resaltado de sintaxis y plugins que se pueden a\u00f1adir para aumentar su funcionalidad.</li> <li>Notepad++: Ideal para trabajar con archivos de texto de bajo peso y ediciones r\u00e1pidas. Permite comparar archivos y cuenta con plugins para a\u00f1adir soporte a m\u00e1s lenguajes.</li> </ul> </li> <li>Aplicaci\u00f3n: Se suelen usar para edici\u00f3n r\u00e1pida de c\u00f3digo fuente, scripts o archivos de configuraci\u00f3n (como <code>config.yml</code>). Tambi\u00e9n son \u00fatiles en sistemas embebidos o cuando se necesita realizar cambios directamente en el servidor.</li> <li>Ventajas:<ul> <li>Ligereza: Consumen pocos recursos, lo que los hace \u00fatiles en sistemas con poca capacidad de procesamiento.</li> <li>Flexibilidad: Pueden ser utilizados en sistemas donde no es pr\u00e1ctico instalar un IDE completo.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#22-compiladores-traduccion-del-codigo-fuente-a-codigo-maquina","title":"2.2. Compiladores: Traducci\u00f3n del C\u00f3digo Fuente a C\u00f3digo M\u00e1quina","text":"<p>Un compilador es una herramienta que traduce el c\u00f3digo fuente escrito en lenguajes como C o C++ a c\u00f3digo m\u00e1quina (un conjunto de instrucciones que el procesador pueda entender). El c\u00f3digo generado es espec\u00edfico para el sistema operativo y la arquitectura de la m\u00e1quina donde se ejecuta.</p> <ul> <li>Ejemplos:<ul> <li>GCC (GNU Compiler Collection): Un compilador de c\u00f3digo abierto compatible con varios lenguajes (C, C++, Fortran, etc.). Se utiliza tanto en sistemas Windows como en Linux para generar ejecutables eficientes.</li> <li>Clang: Un compilador moderno para C y C++ que ofrece un an\u00e1lisis m\u00e1s detallado de errores y advertencias, adem\u00e1s de generar c\u00f3digo optimizado.</li> </ul> </li> <li>Aplicaci\u00f3n: Los compiladores se usan cuando se necesita generar programas con alto rendimiento, que aprovechen al m\u00e1ximo los recursos del hardware y sean ejecutables directamente sin necesidad de int\u00e9rpretes.</li> <li>Ventajas:<ul> <li>Generan c\u00f3digo ejecutable de alto rendimiento.</li> <li>Ofrecen m\u00e1s control sobre la optimizaci\u00f3n del c\u00f3digo.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#23-interpretes-ejecucion-directa-del-codigo-fuente","title":"2.3. Int\u00e9rpretes: Ejecuci\u00f3n Directa del C\u00f3digo Fuente","text":"<p>Un int\u00e9rprete ejecuta el c\u00f3digo fuente l\u00ednea por l\u00ednea, sin necesidad de compilarlo previamente a c\u00f3digo m\u00e1quina. Esto permite una mayor flexibilidad y rapidez en la modificaci\u00f3n y prueba del c\u00f3digo.</p> <ul> <li>Ejemplos:<ul> <li>Python Interpreter: Ejecuta directamente el c\u00f3digo fuente en Python, ideal para desarrollo r\u00e1pido y prototipado.</li> <li>Node.js: Interprete de JavaScript orientado al backend. Permite ejecutar c\u00f3digo JavaScript fuera del navegador y es ampliamente utilizado en desarrollo de aplicaciones web.</li> </ul> </li> <li>Aplicaci\u00f3n: Se usan principalmente para prototipado r\u00e1pido, scripts de automatizaci\u00f3n, y cuando se necesita un entorno de desarrollo din\u00e1mico en el que probar cambios de forma inmediata.</li> <li>Ventajas:<ul> <li>Permiten ejecutar c\u00f3digo de manera interactiva, ideal para depuraci\u00f3n y pruebas r\u00e1pidas.</li> <li>No requieren un proceso de compilaci\u00f3n, lo que facilita la edici\u00f3n y ejecuci\u00f3n inmediata del c\u00f3digo.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#24-herramientas-de-documentacion-generacion-de-documentos-a-partir-del-codigo","title":"2.4. Herramientas de Documentaci\u00f3n: Generaci\u00f3n de Documentos a Partir del C\u00f3digo","text":"<p>La documentaci\u00f3n es crucial para mantener la claridad del c\u00f3digo y facilitar su comprensi\u00f3n. Existen herramientas que analizan el c\u00f3digo fuente y generan documentaci\u00f3n autom\u00e1ticamente a partir de comentarios y anotaciones.</p> <ul> <li>Ejemplos:<ul> <li>Doxygen: Genera documentaci\u00f3n a partir de comentarios en el c\u00f3digo para lenguajes como C++, C y Java.</li> <li>JSDoc: Utilizado para documentar proyectos en JavaScript. Genera documentaci\u00f3n en formato HTML a partir de comentarios estructurados.</li> </ul> </li> <li>Aplicaci\u00f3n: Se usan para crear gu\u00edas de uso, referencias de API y documentaci\u00f3n t\u00e9cnica de los proyectos, facilitando as\u00ed la colaboraci\u00f3n entre equipos y la comprensi\u00f3n del c\u00f3digo.</li> <li>Ventajas:<ul> <li>Automatizan la creaci\u00f3n de documentaci\u00f3n, reduciendo el esfuerzo manual.</li> <li>Aseguran que la documentaci\u00f3n se mantenga actualizada con el c\u00f3digo.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#25-depuradores-analisis-del-comportamiento-del-programa-en-tiempo-de-ejecucion","title":"2.5. Depuradores: An\u00e1lisis del Comportamiento del Programa en Tiempo de Ejecuci\u00f3n","text":"<p>Los depuradores son herramientas que permiten detener la ejecuci\u00f3n de un programa en puntos espec\u00edficos y examinar su estado interno (variables, memoria, flujo de control) para detectar errores l\u00f3gicos y fallos.</p> <ul> <li>Ejemplos:<ul> <li>GDB (GNU Debugger): Un depurador potente para lenguajes como C y C++. Permite ejecutar el programa l\u00ednea por l\u00ednea, inspeccionar variables y modificar su valor en tiempo real.</li> <li>PDB (Python Debugger): Un depurador integrado en Python que permite ejecutar el c\u00f3digo paso a paso, establecer puntos de interrupci\u00f3n y explorar el estado del programa.</li> </ul> </li> <li>Aplicaci\u00f3n: Se utilizan para identificar y corregir errores l\u00f3gicos o de ejecuci\u00f3n en programas que no producen el resultado esperado.</li> <li>Ventajas:<ul> <li>Facilitan la identificaci\u00f3n de errores complejos.</li> <li>Permiten explorar el estado del programa en tiempo real.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#26-sistemas-de-gestion-de-versiones-control-de-cambios-en-el-codigo","title":"2.6. Sistemas de Gesti\u00f3n de Versiones: Control de Cambios en el C\u00f3digo","text":"<p>Los sistemas de gesti\u00f3n de versiones permiten a los desarrolladores rastrear los cambios en su c\u00f3digo, trabajar en diferentes ramas de desarrollo y colaborar sin riesgo de sobrescribir el trabajo de otros.</p> <ul> <li>Ejemplos:<ul> <li>Git: El sistema de control de versiones m\u00e1s popular, utilizado junto con plataformas como GitHub y GitLab.</li> <li>Mercurial: Similar a Git, pero con una interfaz m\u00e1s sencilla para usuarios menos experimentados.</li> </ul> </li> <li>Aplicaci\u00f3n: Facilitan la colaboraci\u00f3n en equipo, permiten gestionar diferentes versiones del c\u00f3digo y garantizan la trazabilidad de los cambios.</li> <li>Ventajas:<ul> <li>Permiten trabajar en equipo de manera eficiente y segura.</li> <li>Facilitan el seguimiento y revertido de cambios.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#27-frameworks-plantillas-y-librerias-que-facilitan-el-desarrollo","title":"2.7. Frameworks: Plantillas y Librer\u00edas que Facilitan el Desarrollo**","text":"<p>Los frameworks proporcionan una estructura predefinida para desarrollar aplicaciones, facilitando la creaci\u00f3n de proyectos mediante librer\u00edas y plantillas reutilizables.</p> <ul> <li>Ejemplos:<ul> <li>Django: Un framework para desarrollar aplicaciones web en Python. Ofrece una estructura completa que incluye bases de datos, autenticaci\u00f3n y manejo de rutas.</li> <li>Spring: Un framework para desarrollo de aplicaciones empresariales en Java.</li> </ul> </li> <li>Aplicaci\u00f3n: Se usan para acelerar el desarrollo de proyectos proporcionando un conjunto de herramientas preconfiguradas que reducen el esfuerzo de codificaci\u00f3n desde cero.</li> <li>Ventajas:<ul> <li>Ahorro de tiempo en el desarrollo al reutilizar componentes.</li> <li>Estandarizan la estructura y organizaci\u00f3n del c\u00f3digo.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#28-herramientas-para-pruebas-y-calidad-de-codigo","title":"2.8. Herramientas para Pruebas y Calidad de C\u00f3digo**","text":"<p>Las herramientas de pruebas aseguran que el software funcione como se espera. Pueden realizar pruebas autom\u00e1ticas de diferentes aspectos del software, desde pruebas unitarias hasta pruebas de carga y rendimiento.</p> <ul> <li>Ejemplos:<ul> <li>SonarQube: Analiza la calidad del c\u00f3digo y detecta posibles errores o malas pr\u00e1cticas. Tambi\u00e9n mide la deuda t\u00e9cnica y la cobertura de pruebas.</li> <li>JMeter: Realiza pruebas de carga y rendimiento para aplicaciones web, simulando m\u00faltiples usuarios concurrentes.</li> <li>ESLint: Un linter para JavaScript que analiza el c\u00f3digo en busca de errores de sintaxis y estilo.</li> </ul> </li> <li>Aplicaci\u00f3n: Se utilizan para verificar que el software cumple con los requisitos funcionales y no presenta errores de calidad o rendimiento.</li> <li>Ventajas:<ul> <li>Detectan errores y malas pr\u00e1cticas antes de que lleguen al entorno de producci\u00f3n.</li> <li>Mejoran la mantenibilidad y legibilidad del c\u00f3digo.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#29-otras-herramientas","title":"2.9. Otras herramientas","text":"<p>Existen otras herramientas que pueden ser \u00fatiles en el desarrollo de software, como: - Make GNU: Utilidad disponible normalmente en Linux que agiliza la tarea de compilar c\u00f3digo desde la terminal. Nos evita tener que escribir los comandos de compilaci\u00f3n a mano, que suelen ser muy largos, y en cambio nos permite escribir algo mucho m\u00e1s corto que al final hace lo mismo. - Maven y Ant: Herramientas de automatizaci\u00f3n facilitar la compilaci\u00f3n y creaci\u00f3n de programas Java; - Herramientas de refactorizaci\u00f3n: Incluidas como funcionalidades avanzadas de editores, permiten realizar cambios en el c\u00f3digo fuente para hacerlo m\u00e1s legible, f\u00e1cil de mantener y eficiente sin cambiar la funcionalidad.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.6.-FuncionalidadesHerramientas/#3-conclusion","title":"3. Conclusi\u00f3n","text":"<p>Elegir las herramientas adecuadas para cada etapa del desarrollo es esencial para garantizar la calidad, productividad y eficiencia del software. Comprender las caracter\u00edsticas y funciones de cada una permite a los desarrolladores optimizar su flujo de trabajo y entregar productos de mejor calidad. La evaluaci\u00f3n de estas herramientas es una habilidad fundamental para cualquier programador que desee maximizar su rendimiento y colaborar de manera efectiva en proyectos de software.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/","title":"Fases del proceso de desarrollo del software","text":"<p>Entendemos por el Proceso de Desarrollo de Software el conjunto de fases o pasos que ocurren desde que se concibe una idea hasta que ese software esta\u0301 implantado en un dispositivo y funcionando.</p> <p>Ingeniera del software: se define como la ciencia y el arte de especificar, dise\u00f1ar y desarrollar programas, documentaci\u00f3n y procedimientos operativos.</p> <p>El proceso de desarrollo, que en un principio puede parecer una tarea simple, consta de una serie de pasos de obligado cumplimiento, pues so\u0301lo asi\u0301 podremos garantizar que los programas creados son eficientes, fiables, seguros y responden a las necesidades de los usuarios finales (aquellos que van a utilizar el programa). Esta \u00faltima parte, la de responder a las necesidades finales de los usuarios no es sencillo cumplir con ella, y da lugar a multiples problemas durante este proceso de desarrollo que impactan negativamente en el trabajo y provocan al fracaso o directamente cancelaci\u00f3n de los proyectos .</p> <p>El desarrollo de software es un proceso que conlleva una serie de pasos. Gene\u0301ricamente, estos pasos son los siguientes:</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#1-fases-del-desarrollo-del-software","title":"1. Fases del desarrollo del Software","text":"<ul> <li>Planificaci\u00f3n: en esta fase se establecen los objetivos del proyecto, se define el alcance del mismo y se realiza un estudio de viabilidad y costes.</li> <li>An\u00e1lisis del problema: Consiste en ver y comprender qu\u00e9 tarea se quiere resolver. Es imprescindible partir de una especificaci\u00f3n de requisitos lo m\u00e1s exacta y detallada posible. El proceso de comprensi\u00f3n y simplificaci\u00f3n del mundo real se llama an\u00e1lisis del problema y lo que se obtiene tras el an\u00e1lisis es el modelo.</li> <li>Dise\u00f1o de una soluci\u00f3n: Consiste en c\u00f3mo se va a resolver el problema, suele consistir en dividir el problema principal en problemas m\u00e1s sencillos cuya combinaci\u00f3n resuelve la tarea final.</li> <li>Codificaci\u00f3n: Una vez definidos los algoritmos, los traducimos al lenguaje de programaci\u00f3n que tengamos que usar. Un lenguaje de programaci\u00f3n es un conjunto de s\u00edmbolos y reglas sint\u00e1cticas especialmente dise\u00f1ado para transmitir ordenes al ordenador (C, Java, Pascal\u2026).</li> <li>Pruebas: Servir\u00e1n para identificar y corregir posibles errores, tendremos varios tipos de errores:</li> <li>Sint\u00e1cticos: Producidos por un mal uso del lenguaje.</li> <li>Sem\u00e1nticos: Lo que est\u00e1 equivocado es la soluci\u00f3n que yo he ideado. (Durante la ejecuci\u00f3n p. ej: divisi\u00f3n entre 0, o de l\u00f3gica p ej: mal dise\u00f1o algoritmo.)</li> <li>Despliegue: una vez que el programa est\u00e1 terminado, se debe implantar en el dispositivo o infraestructura del usuario final sobre la que se ejecutar\u00e1.</li> <li>Mantenimiento: Hay tres tipos:</li> <li>Correctivo: Sirve para corregir posibles errores o fallos del programa.</li> <li>Perfectivo: Se usa para perfeccionarlo.</li> <li>Adaptativo: Sirve para adaptarlo a nuevas situaciones.</li> </ul>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#2-modelos-de-desarrollo-de-software","title":"2. Modelos de desarrollo de software","text":"<p>Los modelos de desarrollo de software son marcos metodol\u00f3gicos utilizados para estructurar, planificar y controlar el proceso de desarrollo de un sistema inform\u00e1tico. Hay varios modelos, y cada uno tiene sus propias caracter\u00edsticas, ventajas y desventajas. </p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#21-modelo-en-cascada","title":"2.1. Modelo en cascada","text":"<p>Consiste en dividir el proceso de desarrollo en fases, cada una de las cuales se ejecuta una vez que la anterior ha finalizado. El modelo en cascada es un modelo secuencial, es decir, las fases se ejecutan una tras otra.  - Sin realimentaci\u00f3n: es el modelo de vida cl\u00e1sico del software. Es pr\u00e1cticamente imposible que se pueda utilizar, ya que requiere conocer de antemano todos los requisitos del sistema. So\u0301lo es aplicable a pequen\u0303os desarrollos, ya que las etapas pasan de una a otra sin retorno posible. (se presupone que no habra\u0301 errores ni variaciones del software). - Con realimentaci\u00f3n: es uno de los modelos ma\u0301s utilizados. Proviene del modelo anterior, pero se introduce una realimentacio\u0301n entre etapas, de forma que podamos volver atra\u0301s en cualquier momento para corregir, modificar o depurar algu\u0301n aspecto. No obstante, si se preve\u0301n muchos cambios durante el desarrollo no es el modelo ma\u0301s ido\u0301neo. Es el modelo perfecto si el proyecto es ri\u0301gido (pocos cambios, poco evolutivo) y los requisitos esta\u0301n claros.  </p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#22-modelo-evolutivo","title":"2.2. Modelo evolutivo","text":"<p>Tiene en cuenta la naturaleza cambiante y evolutiva del software. La idea detr\u00e1s de este modelo es el desarrollo y entrega de partes funcionales del sistema de forma temprana, exponerla a los comentarios del usuario, refinarla en N versiones hasta que se desarrolle el sistema adecuado. Una ventaja de este modelo es que se obtiene una r\u00e1pida realimentaci\u00f3n del usuario, ya que las fases de especificaci\u00f3n, desarrollo y pruebas se ejecutan en cada iteraci\u00f3n no necesariamente en cascada. Destacando los metodolog\u00edas a\u01f5iles, XP (eXtreme Programming) y frameworks como Scrum como su m\u00e1ximo exponente. Destacan en estos modelos el car\u00e1cter iterativo e incremental del proceso seguido: - En un desarrollo iterativo e incremental el proyecto se planifica en diversos bloques temporales (en el caso de Scrum de un mes natural o hasta de dos semanas, si as\u00ed se necesita) llamados iteraciones. Las iteraciones se pueden entender como miniproyectos: en todas las iteraciones se repite un proceso de trabajo similar (de ah\u00ed el nombre \u201citerativo\u201d) para proporcionar un resultado parcial, pero funcional, sobre producto final, de manera que el cliente pueda obtener los beneficios del proyecto de forma incremental. Para ello, cada requisito se debe completar en una \u00fanica iteraci\u00f3n: el equipo debe realizar todas las tareas necesarias para completarlo (incluyendo pruebas y documentaci\u00f3n) y que est\u00e9 preparado para ser entregado al cliente con el m\u00ednimo esfuerzo necesario. De esta manera no se deja para el final del proyecto ninguna actividad arriesgada relacionada con la entrega de requisitos. - En cada iteraci\u00f3n el equipo evoluciona el producto de dos formas:   + hace una entrega incremental: a partir de los resultados completados en las iteraciones anteriores, a\u00f1ade nuevos objetivos/requisitos.    + hace una entrega iterativa:  partir de los resultados completados en las iteraciones anteriores, y bas\u00e1ndose en la retroalimentaci\u00f3n que le ha dado el usuario final sobre las funcionalidades ya entregadas, se revisan para mejorarlas y adaptarlas a las necesidades de estos.   + Un aspecto fundamental para guiar el desarrollo iterativo e incremental es la priorizaci\u00f3n de los objetivos/requisitos en funci\u00f3n del valor que aportan al cliente.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#3-scrum-que-es-y-como-funciona-este-marco-de-trabajo","title":"3. Scrum: qu\u00e9 es y c\u00f3mo funciona este marco de trabajo","text":"<p>A la hora de poner en marcha un proyecto, toda empresa debe asegurar que el equipo implicado conoce sus tareas y plazos de tiempo de entrega. Scrum es un marco de trabajo que nos ayuda a conseguirlo y que, adem\u00e1s, permite agilizar la entrega de valor al cliente en iteraciones cortas de tiempo.</p> <p>Scrum es un framework que se utiliza dentro de equipos que manejan proyectos de alta incertidumbre.  Se trata de un marco de trabajo por el cual las personas pueden abordar problemas complejos adaptativos, a la vez que entregar productos del m\u00e1ximo valor posible productiva y creativamente. Scrum es liviano y f\u00e1cil de entender pero, a la vez, dif\u00edcil de dominar del todo. Este framework favorece el time to market y la entrega r\u00e1pida de MVP (m\u00ednimos productos viables).</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#31-cual-es-el-origen-de-scrum","title":"3.1. \u00bfCu\u00e1l es el origen de Scrum?","text":"<p>En el a\u00f1o 2001, en Salt Lake City, un grupo de desarrolladores capitaneados por el ingeniero de software Kent Beck se reunieron para compartir sus frustraciones sobre las metodolog\u00edas de entrega de software y los marcos de trabajo que exist\u00edan hasta entonces (PMI, CMMI o SPICE). De este encuentro sali\u00f3 el Manifiesto \u00c1gil, que resume sus intenciones en los siguientes 4 valores:</p> <ul> <li>Valorar a los individuos y su interacci\u00f3n por encima de los procesos y herramientas.</li> <li>Valorar el software que funciona por encima de la documentaci\u00f3n exhaustiva.</li> <li>Valorar la colaboraci\u00f3n con el cliente por encima de la negociaci\u00f3n contractual</li> <li>Valorar la respuesta al cambio por encima del seguimiento de un plan.</li> </ul>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#311-los-12-principios-del-manifiesto-agil","title":"3.1.1 Los 12 principios del Manifiesto \u00c1gil","text":"<p>Adem\u00e1s de los 4 valores mencionados anteriormente, los firmantes del Manifiesto \u00c1gil desglosaron 12 principios que se derivan de ellos y que son igualmente importantes. Son los siguientes:</p> <ol> <li>Nuestra mayor prioridad es satisfacer al cliente mediante la  entrega temprana y continua de software con valor .</li> <li>Aceptamos que los requisitos cambien , incluso en etapas tard\u00edas del desarrollo. Los procesos \u00e1giles aprovechan el cambio para proporcionar ventaja competitiva al cliente.</li> <li>Entregamos software funcional frecuentemente, entre dos semanas y dos meses, con preferencia al periodo de tiempo m\u00e1s corto posible.</li> <li>Los responsables de negocio y los desarrolladores trabajamos juntos de forma cotidiana durante todo el proyecto.</li> <li>Los proyectos se desarrollan en torno a individuos motivados. Hay que darles el entorno y el apoyo que necesitan, y confiarles la ejecuci\u00f3n del trabajo.</li> <li>El m\u00e9todo m\u00e1s eficiente y efectivo de comunicar informaci\u00f3n al equipo de desarrollo y entre sus miembros es la conversaci\u00f3n cara a cara.</li> <li>El software funcionando es la medida principal de progreso.</li> <li>Los procesos \u00e1giles promueven el desarrollo sostenible. Los promotores, desarrolladores y usuarios debemos ser capaces de mantener un ritmo constante de forma indefinida.</li> <li>La atenci\u00f3n continua a la excelencia t\u00e9cnica y al buen dise\u00f1o mejora la agilidad.</li> <li>La simplicidad, o el arte de maximizar la cantidad de trabajo no realizado, es esencial.</li> <li>Las mejores arquitecturas, requisitos y dise\u00f1os emergen de equipos auto-organizados.</li> <li>A intervalos regulares el equipo reflexiona sobre c\u00f3mo ser m\u00e1s efectivo para a continuaci\u00f3n ajustar y perfeccionar su comportamiento en consecuencia.</li> </ol>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#322-los-5-valores-scrum","title":"3.2.2 Los 5 valores Scrum","text":"<p>El Manifiesto \u00c1gil y Scrum van de la mano para ofrecer una gu\u00eda clara a los equipos de desarrollo a la hora de afrontar un nuevo proyecto. En este sentido, hay una serie de valores que se asocian al framework Scrum y que vale la pena tener en consideraci\u00f3n:</p> <ul> <li>Coraje. Tener la valent\u00eda para hacer lo correcto y resolver problemas complejos.</li> <li>Foco. La organizaci\u00f3n del trabajo en sprints da certidumbre y permite centrar los esfuerzos en objetivos alcanzables.</li> <li>Compromiso. Para que el framework Scrum funcione necesita el compromiso de todos los miembros involucrados.</li> <li>Sinceridad. El equipo Scrum debe de ser transparente en cuanto al trabajo y los obst\u00e1culos que encuentra en el camino.</li> <li>Respeto. Tratarse de forma adecuada entre compa\u00f1eros y valorar las ideas y esfuerzos de cada uno es imprescindible.</li> </ul>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#32-en-que-se-basa-el-marco-de-trabajo-scrum","title":"3.2. \u00bfEn qu\u00e9 se basa el marco de trabajo Scrum?","text":"<p>Al estar enmarcada dentro de las metodolog\u00edas agile, Scrum se basa en aspectos como:</p> <ul> <li>La flexibilidad en la adopci\u00f3n de cambios y nuevos requisitos durante un proyecto complejo.</li> <li>El factor humano.</li> <li>La colaboraci\u00f3n e interacci\u00f3n con el cliente.</li> <li>El desarrollo iterativo como forma de asegurar buenos resultados.</li> </ul> <p>Los pilares o caracter\u00edsticas del framework Scrum m\u00e1s importantes son tres:</p> <ol> <li>Transparencia. Con el marco Scrum todos los implicados tienen conocimiento de qu\u00e9 ocurre en el proyecto y c\u00f3mo ocurre. Esto hace que haya un entendimiento \u201ccom\u00fan\u201d del proyecto, una visi\u00f3n global.</li> <li>Inspecci\u00f3n . Los miembros del equipo Scrum frecuentemente inspeccionan el progreso para detectar posibles problemas. La inspecci\u00f3n no es un examen diario, sino una forma de saber que el trabajo fluye y que el equipo funciona de manera auto-organizada.</li> <li>Adaptaci\u00f3n . Cuando hay algo que cambiar, el equipo se ajusta para conseguir el objetivo del sprint. Esta es la clave para conseguir el \u00e9xito en proyectos complejos, donde los requisitos son cambiantes o poco definidos y en donde la adaptaci\u00f3n, la innovaci\u00f3n, la complejidad y flexibilidad son fundamentales.</li> </ol>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#33-los-roles-en-el-equipo-scrum","title":"3.3. Los roles en el equipo Scrum","text":"<p>Si seguimos los  valores y principios Scrum , el equipo tiene como foco entregar valor y ofrecer resultados de calidad que permitan cumplir los objetivos de negocio del cliente.</p> <p>Para ello, los equipos de Scrum son auto-organizados y multifuncionales. Es decir, cada uno es responsable de unas tareas determinadas y de terminarlas en los tiempos acordados. Esto garantiza la entrega de valor del equipo completo, sin necesidad de ayuda o la supervisi\u00f3n minuciosa de otros miembros de la organizaci\u00f3n.</p> <p>A continuaci\u00f3n desglosamos los 3 roles m\u00e1s importantes en un equipo de trabajo Scrum.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#331-product-owner","title":"3.3.1. Product owner","text":"<p>Es el responsable de maximizar el valor del trabajo , que  viene de la mano de una buena gesti\u00f3n del  Product Backlog, el cual explicaremos m\u00e1s adelante.</p> <p>El Product Owner es el \u00fanico perfil que habla constantemente con el cliente, lo que le obliga a tener muchos conocimientos sobre el negocio.</p> <p>Para finalizar, un equipo Scrum debe tener solo un Product Owner y este puede ser parte del equipo de desarrollo.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#332-scrum-master","title":"3.3.2. Scrum Master","text":"<p>Es el responsable de que las t\u00e9cnicas Scrum sean comprendidas y aplicadas en la organizaci\u00f3n. Es el manager de Scrum, un l\u00edder que se encarga de eliminar impedimentos o inconvenientes que tenga el equipo dentro de un sprint (que ya revisaremos en detalle m\u00e1s adelante), aplicando las mejores t\u00e9cnicas para fortalecer el equipo de marketing digital.</p> <p>Dentro de la organizaci\u00f3n, el Scrum Master tiene la labor de ayudar en la adopci\u00f3n del framework en todos los equipos.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#333-equipo-de-desarrollo","title":"3.3.3. Equipo de desarrollo","text":"<p>Son los encargados de realizar las tareas priorizadas por el Product Owner. Es un equipo multifuncional y auto-organizado. Son los \u00fanicos que estiman las tareas del product backlog, sin dejarse influenciar por nadie.</p> <p>Los equipos de desarrollo no tienen sub-equipos o especialistas. La finalidad de esto es transmitir la responsabilidad compartida si no se llegan a realizar todas las tareas de un sprint.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#34-los-eventos-del-equipo-scrum","title":"3.4. Los eventos del equipo Scrum","text":"<p>Este timebox refleja las diferentes ceremonias Scrum y su peso en horas seg\u00fan se avanza en semanas de trabajo. El desarrollo iterativo se realiza en un sprint que contiene los siguientes eventos Scrum: Sprint Planning, Daily Meeting, Sprint Review, Sprint Retrospective y Grooming.</p> <p>Antes de profundizar en los diferentes eventos, es importante definir qu\u00e9 es un sprint en Scrum. El sprint es el coraz\u00f3n de este marco de trabajo, el contenedor de los dem\u00e1s hitos del proceso. Todo lo que ocurre en una iteraci\u00f3n para entregar valor est\u00e1 dentro de un sprint. La duraci\u00f3n m\u00e1xima es de un mes, el tiempo se determina en base al nivel de comunicaci\u00f3n que el cliente quiere tener con el equipo. Los sprints largos pueden hacer que se pierda feedback valioso del cliente y poner en peligro el proyecto.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#341-sprint-planning","title":"3.4.1. Sprint Planning","text":"<p>En esta reuni\u00f3n todo el equipo Scrum define qu\u00e9 tareas se van a abordar y cu\u00e1l ser\u00e1 el objetivo del sprint. La primera reuni\u00f3n que se hace en el sprint puede llegar a tener una duraci\u00f3n de 8 horas para sprints de un mes.</p> <p>El equipo se hace las siguientes preguntas:</p> <ul> <li>\u00bfQu\u00e9 se va a hacer en el sprint? En base a ello, se eligen tareas del Product Backlog. Este trabajo es responsabilidad del Producto Owner.</li> <li>\u00bfC\u00f3mo lo vamos a hacer? El equipo de desarrollo define las tareas necesarias para completar cada \u00edtem elegido del Product Backlog.</li> </ul> <p>La definici\u00f3n de qu\u00e9 se va a hacer implica que el equipo tenga un objetivo y se encuentre comprometido con la entrega de valor que se har\u00e1 al cliente al final del sprint. A esto se le llama Sprint Goal.</p> <p>El resultado de esta reuni\u00f3n es el Sprint Goal y un Sprint Backlog (que revisaremos m\u00e1s adelante).</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#342-daily-meeting","title":"3.4.2. Daily Meeting","text":"<p>Es una reuni\u00f3n diaria dentro del sprint que tiene como m\u00e1ximo 15 minutos de duraci\u00f3n. En ella deben participar, s\u00ed o s\u00ed, el equipo de desarrollo y el Scrum Master. El Product Owner no tiene la necesidad de estar presente.</p> <p>En esta reuni\u00f3n diaria el equipo de desarrollo hace las siguientes 3 preguntas:</p> <ul> <li>\u00bfQu\u00e9 hice ayer?</li> <li>\u00bfQu\u00e9 voy a hacer hoy?</li> <li>\u00bfTengo alg\u00fan impedimento que necesito que me solucionen?</li> </ul> <p>Una Daily Scrum es el lugar m\u00e1s oportuno para poder inspeccionar el trabajo y poder adaptarse en caso de que haya cambio de tareas dentro de un sprint.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#343-sprint-review","title":"3.4.3. Sprint Review","text":"<p>La review del valor que vamos a entregar al cliente se hace en esta reuni\u00f3n, al final de cada sprint. Su duraci\u00f3n es de 4 horas para sprints de un mes y es la \u00fanica reuni\u00f3n de Scrum a la que puede asistir el cliente.</p> <p>En esta reuni\u00f3n el Product Owner presenta lo desarrollado al cliente y el equipo de desarrollo muestra su funcionamiento. El cliente valida los cambios realizados y adem\u00e1s brinda feedback sobre nuevas tareas que el Product Owner tendr\u00e1 que agregar al Product Backlog.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#344-sprint-retrospective","title":"3.4.4. Sprint Retrospective","text":"<p>La retrospectiva es el \u00faltimo evento de Scrum, tiene una duraci\u00f3n de 3 horas para sprints de un mes, y es la reuni\u00f3n del equipo en la que se hace una evaluaci\u00f3n de c\u00f3mo se ha implementado el framework Scrum en el \u00faltimo sprint.</p> <p>Es una gran oportunidad para el equipo Scrum de inspeccionarse a s\u00ed mismo, proponiendo mejoras para el siguiente sprint. El resultado es una lista de mejoras que debe aplicar el siguiente d\u00eda, ya que al finalizar la retrospectiva, inmediatamente comienza un nuevo sprint, que incluye los mismos eventos mencionados anteriormente.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#345-grooming","title":"3.4.5. Grooming","text":"<p>El Grooming en Scrum es el tiempo de revisi\u00f3n que se dedica dentro de los equipos durante los sprints para refinar los requerimientos. Es una reuni\u00f3n que no debe ocupar m\u00e1s del 10% del tiempo disponible del sprint. Las tareas de usuario se revisan con un par de sprints de ventaja para que cuando llegue el equipo ya est\u00e9 todo listo para el desarrollo de la tarea.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#35-los-artefactos-scrum","title":"3.5. Los artefactos Scrum","text":"<p>Los eventos y artefactos de Scrum est\u00e1n definidos para maximizar la transparencia dentro del equipo; es decir, que todos tengan una misma visi\u00f3n de lo que est\u00e1 ocurriendo en el proyecto.</p> <p>Si te preguntas qu\u00e9 son los artefactos Scrum, a continuaci\u00f3n explicamos los 3 clave: Product Backlog, Sprint Backlog e Incremento.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#351-product-backlog","title":"3.5.1. Product Backlog","text":"<p>B\u00e1sicamente, el Product Backlog es el listado de tareas que engloba todo un proyecto. Cualquier cosa que debamos hacer debe estar en el Product Backlog y con un tiempo estimado por el equipo de desarrollo.</p> <p>La responsabilidad exclusiva de ordenar el Product Backlog es del  Product Owner, que se encuentra en constante comunicaci\u00f3n con el cliente para asegurarse de que las prioridades est\u00e1n bien establecidas.</p> <p>La ordenaci\u00f3n tambi\u00e9n es 100% responsabilidad del Product Owner, por lo que las tareas que est\u00e1n m\u00e1s arriba deben de ser las de mayor prioridad. El equipo de desarrollo elige tareas del Product Backlog en el Sprint Planning para generar tanto el Sprint Backlog como el Sprint Goal.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#352-sprint-backlog","title":"3.5.2. Sprint Backlog","text":"<p>Es el grupo de tareas del Product Backlog que el equipo de desarrollo elige en el Sprint Planning junto con el plan para poder desarrollarlas. Debe ser conocido por todo el equipo, para asegurarse de que el foco debe estar en este grupo de tareas.</p> <p>El Sprint Planning no cambia durante el sprint, solo se permite cambiar el plan para poder desarrollarlas.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#353-incremento","title":"3.5.3. Incremento","text":"<p>El Product Increment o incremento de Scrum es el resultado de sumar todos los elementos del Product Backlog completados durante el sprint actual, a\u00f1adiendo tambi\u00e9n el valor de todos los sprints anteriores. El incremento generado al final del sprint se presenta en el Sprint Review.</p> <p></p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#36-ventajas-y-desventajas-del-marco-scrum","title":"3.6 Ventajas y desventajas del marco Scrum","text":"<p>Una vez sabemos  c\u00f3mo funciona Scrum, hablemos de sus ventajas y desventajas:</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#361-ventajas-de-la-metodologia-scrum","title":"3.6.1. Ventajas de la metodolog\u00eda Scrum","text":"<ul> <li>Scrum es muy f\u00e1cil de aprender: los roles, hitos y artefactos son claros y tienen un objetivo, por lo que es un m\u00e9todo muy relacionado con nuestra manera diaria de trabajar.</li> <li>El cliente puede comenzar a usar el producto r\u00e1pidamente.</li> <li>Se agiliza el proceso, ya que la entrega de valor es muy frecuente.</li> <li>Menor probabilidad de sorpresas o imprevistos, porque el cliente est\u00e1 viendo frecuentemente el proyecto.</li> </ul>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#362-desventajas-de-la-metodologia-scrum","title":"3.6.2. Desventajas de la metodolog\u00eda Scrum","text":"<ul> <li>Aunque Scrum sea f\u00e1cil de aprender, es muy dif\u00edcil implementarlo. Esto supone una predisposici\u00f3n y un cambio de cultura de la organizaci\u00f3n que debe ir desde los altos mandos hasta los clientes.</li> <li>La necesidad de tener equipos multidisciplinares puede ser un problema, ya que es dif\u00edcil encontrar personas que sean capaces de hacer todo el trabajo de un equipo.</li> <li>El equipo puede tender a realizar el camino m\u00e1s corto para conseguir el objetivo de un sprint, el cual no siempre ofrece resultados de calidad.</li> </ul> <p>Resumiendo, el marco de trabajo Scrum es especialmente \u00fatil cuando se trabaja en entornos de alta incertidumbre, en los que la probabilidad de que haya cambios durante el proyecto es alta. Si los requisitos no est\u00e1n claros, si el cliente tiene prisa en sacar un producto al mercado o necesita un MVP, Scrum es el framework perfecto. Este marco nos permite entregar un proyecto en varias partes funcionales e independientes entre s\u00ed, a un ritmo r\u00e1pido y con capacidad de corregir errores en el momento.</p>","tags":["EDES"]},{"location":"section3/u01/teoria/EDES-U1.7.-FasesDesarrollo/#fuentes","title":"Fuentes","text":"<ul> <li>GitHub de Jose Luis Gonz\u00e1lez S\u00e1nchez</li> <li>https://intelequia.com/blog/post/2083/ciclo-de-vida-del-software-todo-lo-que-necesitas-saber</li> <li>https://www.monografias.com/docs114/modelos-desarrollo/modelos-desarrollo</li> <li>https://proyectosagiles.org/desarrollo-iterativo-incremental/</li> <li>Scrum: qu\u00e9 es y c\u00f3mo funciona este marco de trabajo</li> </ul>","tags":["EDES"]},{"location":"section3/u02/","title":"UD 2 - Entornos de desarrollo integrado","text":"","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#unidad-2-entornos-de-desarrollo-integrado","title":"Unidad 2: Entornos de desarrollo integrado","text":"","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#1-normativa-que-respalda-la-unidad","title":"1. Normativa que Respalda la Unidad","text":"<p>Esta unidad est\u00e1 alineada con la normativa del curso \"Entornos de Desarrollo\" del ciclo formativo de Desarrollo de Aplicaciones Web, espec\u00edficamente trabajando el Resultado de Aprendizaje (RA) 2 y sus Criterios de Evaluaci\u00f3n (CE). El objetivo principal es que los estudiantes aprendan a instalar, personalizar y automatizar entornos de desarrollo, as\u00ed como generar ejecutables en diferentes lenguajes y entornos, desarrollando un conocimiento profundo de las caracter\u00edsticas de los entornos integrados de desarrollo (IDEs).</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#2-resultado-de-aprendizaje-a-trabajar","title":"2. Resultado de Aprendizaje a Trabajar","text":"<p>RA 2: Eval\u00faa entornos integrados de desarrollo, analizando sus caracter\u00edsticas para editar c\u00f3digo fuente y generar ejecutables.</p> <p>Este resultado de aprendizaje se abordar\u00e1 desglosando el contenido en varios puntos clave, cada uno enfocado en los criterios de evaluaci\u00f3n espec\u00edficos del RA 2.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#3-criterios-de-evaluacion","title":"3. Criterios de Evaluaci\u00f3n","text":"<p>En esta unidad, trabajaremos los siguientes Criterios de Evaluaci\u00f3n (CE) relacionados con el RA 2:</p> <ol> <li> <p>CE 2.a: Se han instalado entornos de desarrollo, propietarios y libres.    </p> <ul> <li>Contenido asociado: Proceso de instalaci\u00f3n de entornos de desarrollo como Visual Studio Code y los IDEs de JetBrains (IntelliJ IDEA, PyCharm, Fleet), tanto en sistemas operativos Windows, Mac y Linux. Se abordar\u00e1n las ventajas de utilizar IDEs libres frente a propietarios, y c\u00f3mo seleccionar el entorno adecuado seg\u00fan el proyecto.   </li> </ul> </li> <li> <p>CE 2.b: Se han a\u00f1adido y eliminado m\u00f3dulos en el entorno de desarrollo.       </p> <ul> <li>Contenido asociado: Gesti\u00f3n de m\u00f3dulos y extensiones para personalizar el entorno. Se ver\u00e1 c\u00f3mo agregar funcionalidades adicionales a trav\u00e9s de plugins en JetBrains y Visual Studio Code, como soporte para lenguajes adicionales, frameworks (Spring, Django) y herramientas de an\u00e1lisis de c\u00f3digo.    </li> </ul> </li> <li> <p>CE 2.c: Se ha personalizado y automatizado el entorno de desarrollo.    </p> <ul> <li>Contenido asociado: Personalizaci\u00f3n del entorno de desarrollo cambiando temas, configurando atajos de teclado y ajustando las preferencias del editor. Adem\u00e1s, se abordar\u00e1 la automatizaci\u00f3n de tareas frecuentes como la compilaci\u00f3n, ejecuci\u00f3n de pruebas y depuraci\u00f3n utilizando herramientas internas de los IDEs.    </li> </ul> </li> <li> <p>CE 2.d: Se ha configurado el sistema de actualizaci\u00f3n del entorno de desarrollo.   </p> <ul> <li>Contenido asociado: Configuraci\u00f3n de actualizaciones autom\u00e1ticas y manuales en Visual Studio Code y JetBrains para mantener el entorno al d\u00eda con las nuevas versiones y parches de seguridad.    </li> </ul> </li> <li> <p>CE 2.e: Se han generado ejecutables a partir de c\u00f3digo fuente de diferentes lenguajes en un mismo entorno de desarrollo.</p> <ul> <li>Contenido asociado: Pr\u00e1ctica de generaci\u00f3n de ejecutables en distintos lenguajes de programaci\u00f3n (como Python, Java, JavaScript y C++) dentro de un solo IDE. Se trabajar\u00e1 con ejemplos que muestren c\u00f3mo un mismo entorno puede gestionar m\u00faltiples lenguajes.    </li> </ul> </li> <li> <p>CE 2.f: Se han generado ejecutables a partir de un mismo c\u00f3digo fuente con varios entornos de desarrollo.    </p> <ul> <li>Contenido asociado: Comparativa de c\u00f3mo generar ejecutables a partir del mismo c\u00f3digo fuente utilizando diferentes IDEs como Visual Studio Code y JetBrains. Se evaluar\u00e1 la eficiencia y las diferencias en el proceso entre estos entornos.    </li> </ul> </li> <li> <p>CE 2.g: Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.    </p> <ul> <li>Contenido asociado: Evaluaci\u00f3n de las funcionalidades comunes y diferenciadoras de los principales entornos de desarrollo, como la integraci\u00f3n con sistemas de control de versiones, depuraci\u00f3n, soporte para lenguajes y frameworks, personalizaci\u00f3n, y gesti\u00f3n de dependencias.    </li> </ul> </li> </ol>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#4-contenidos","title":"4. Contenidos","text":"<p>La Unidad 2 se enmarca dentro del Bloque 1: Instalaci\u00f3n y Uso de Entornos de Desarrollo, y se enfoca en las siguientes \u00e1reas:</p> <p>U2: Evaluaci\u00f3n y Gesti\u00f3n de Entornos de Desarrollo</p> <p>Durante la Unidad 2, se trabajar\u00e1n los siguientes contenidos:</p> <ol> <li>Instalaci\u00f3n de entornos de desarrollo (CE 2.a):    <ul> <li>Instalaci\u00f3n de entornos de desarrollo como Visual Studio Code y los IDEs de JetBrains (IntelliJ IDEA, PyCharm, Fleet) en diferentes sistemas operativos.    </li> <li>Comparativa de las ventajas de los IDEs libres frente a los propietarios.    </li> </ul> </li> <li>Gesti\u00f3n de m\u00f3dulos y extensiones (CE 2.b):    <ul> <li>Instalaci\u00f3n y eliminaci\u00f3n de m\u00f3dulos en Visual Studio Code (extensiones) y JetBrains (plugins).    </li> <li>Ejemplos pr\u00e1cticos de personalizaci\u00f3n del entorno a\u00f1adiendo soporte para lenguajes adicionales, herramientas de depuraci\u00f3n y frameworks populares.    </li> </ul> </li> <li>Personalizaci\u00f3n y automatizaci\u00f3n del entorno (CE 2.c):    <ul> <li>Personalizaci\u00f3n de la apariencia y atajos de teclado en los IDEs.    </li> <li>Automatizaci\u00f3n de tareas comunes como la ejecuci\u00f3n de pruebas y compilaci\u00f3n autom\u00e1tica utilizando herramientas de los entornos de desarrollo.    </li> </ul> </li> <li>Configuraci\u00f3n de actualizaciones (CE 2.d):   <ul> <li>Configuraci\u00f3n del sistema de actualizaciones en Visual Studio Code y JetBrains.    </li> <li>Importancia de mantener el entorno actualizado para evitar problemas de compatibilidad y aprovechar nuevas funcionalidades.    </li> </ul> </li> <li>Generaci\u00f3n de ejecutables en distintos lenguajes (CE 2.e):    <ul> <li>Pr\u00e1cticas para compilar y generar ejecutables en diferentes lenguajes de programaci\u00f3n dentro de un mismo entorno (Python, Java, C++).    </li> <li>Comparativa entre la creaci\u00f3n de ejecutables en proyectos multiplataforma.   </li> </ul> </li> <li>Generaci\u00f3n de ejecutables en diferentes entornos (CE 2.f):    <ul> <li>Comparaci\u00f3n entre Visual Studio Code y JetBrains al generar ejecutables a partir del mismo c\u00f3digo fuente.   </li> <li>An\u00e1lisis de las diferencias de rendimiento y flujo de trabajo entre los distintos entornos.    </li> </ul> </li> <li>Evaluaci\u00f3n de las caracter\u00edsticas de los entornos (CE 2.g):    <ul> <li>Identificaci\u00f3n de las caracter\u00edsticas comunes entre los entornos de desarrollo, como la integraci\u00f3n con control de versiones y depuradores.    </li> <li>An\u00e1lisis de las funcionalidades avanzadas que diferencian a JetBrains y Visual Studio Code.    </li> </ul> </li> </ol>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#5-actividades-de-evaluacion","title":"5. Actividades de Evaluaci\u00f3n","text":"<p>Para evaluar los criterios de evaluaci\u00f3n del RA 2, se propondr\u00e1n las siguientes actividades:</p> <p>Actividad 1: Instalaci\u00f3n de entornos de desarrollo (CE 2.a)  Descripci\u00f3n: Instalaci\u00f3n de Visual Studio Code y un IDE de JetBrains.  Objetivo: Evaluar la capacidad de los estudiantes para instalar y configurar entornos de desarrollo.</p> <p>Actividad 2: Gesti\u00f3n de m\u00f3dulos y extensiones (CE 2.b)  Descripci\u00f3n: A\u00f1adir soporte para lenguajes adicionales (por ejemplo, Python o Java) mediante extensiones y m\u00f3dulos.  Objetivo: Evaluar la capacidad de los estudiantes para extender la funcionalidad del entorno de desarrollo seg\u00fan el proyecto.</p> <p>Actividad 3: Personalizaci\u00f3n del entorno y automatizaci\u00f3n de tareas (CE 2.c)  Descripci\u00f3n: Configurar el tema del editor, atajos de teclado y automatizar la ejecuci\u00f3n de pruebas en Visual Studio Code y JetBrains.   Objetivo: Evaluar la capacidad de los estudiantes para personalizar y automatizar tareas repetitivas en el entorno.</p> <p>Actividad 4: Generaci\u00f3n de ejecutables en varios lenguajes (CE 2.e y f)  Descripci\u00f3n: Generar ejecutables en varios lenguajes (Python, Java) dentro del mismo entorno.     Objetivo: Evaluar la capacidad de los estudiantes para compilar y generar ejecutables en m\u00faltiples lenguajes en un solo IDE.     </p> <p>Actividad 5: Comparaci\u00f3n de IDEs (CE 2.g)  Descripci\u00f3n: Comparar las caracter\u00edsticas comunes y espec\u00edficas de Visual Studio Code y los IDEs de JetBrains (como IntelliJ IDEA y PyCharm). Los estudiantes evaluar\u00e1n el rendimiento, las funcionalidades avanzadas (como la integraci\u00f3n con sistemas de control de versiones y la depuraci\u00f3n) y la facilidad de personalizaci\u00f3n de cada entorno.   Objetivo: Evaluar la capacidad de los estudiantes para identificar las caracter\u00edsticas comunes y diferenciadoras de diversos entornos de desarrollo y justificar la elecci\u00f3n del m\u00e1s adecuado seg\u00fan el tipo de proyecto.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#6-prueba-de-evaluacion-de-contenidos","title":"6. Prueba de Evaluaci\u00f3n de Contenidos","text":"<p>Al final de la unidad, se realizar\u00e1 una prueba que incluir\u00e1 preguntas te\u00f3ricas y pr\u00e1cticas sobre los conceptos trabajados en la Unidad 2. Los estudiantes deber\u00e1n demostrar su capacidad para:</p> <ul> <li>Instalar y personalizar entornos de desarrollo.</li> <li>Gestionar m\u00f3dulos y extensiones.</li> <li>Automatizar tareas en el entorno de desarrollo.</li> <li>Generar ejecutables en diferentes lenguajes y entornos.</li> <li>Evaluar las caracter\u00edsticas comunes y espec\u00edficas de los IDEs utilizados.</li> </ul> <p>Con este enfoque, la Unidad 2 cubre ampliamente los RA y CE del RA 2, proporcionando tanto un marco te\u00f3rico como actividades pr\u00e1cticas para asegurar que los estudiantes desarrollen las habilidades necesarias para gestionar entornos de desarrollo de manera eficiente.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/","title":"UD 2 - P1: Herramientas de desarrollo","text":"","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#relacion-21","title":"Relaci\u00f3n 2.1","text":"","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#descripcion","title":"Descripci\u00f3n","text":"<p>Ya hemos instalado, configurado y usado IDE's para la creaci\u00f3n, depuraci\u00f3n, generaci\u00f3n de ayuda y generaci\u00f3n de c\u00f3digo y ejecutable. Eso nos da una visi\u00f3n superficial de las distintas funcionalidades que existen en ellos.</p> <p>En esta actividad nos centraremos en los dos \u00faltimos criterios de evaluaci\u00f3n, de forma que nos permita concluir con lo aprendido hasta ahora:</p> <ul> <li>g) Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.</li> <li>h) Se han identificado las funciones m\u00e1s usuales de las herramientas CASE para el desarrollo, prueba y documentaci\u00f3n de c\u00f3digo.</li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#que-se-pide","title":"Que se pide","text":"<ul> <li>Instala al menos 2 IDEs, por persona que forme el grupo. Es decir, si el grupo es de 3 personas, ser\u00e1n 6 IDES.</li> <li>Usa las herramientas, analiza sus funcionalidades identificando a que categor\u00eda de herramientas CASE pertenece</li> <li>Haz una tabla comparativa entre las dos herramientas.   </li> <li>Saca las conclusiones sobre la mejor herrmienta.</li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#ayuda","title":"Ayuda","text":"<p>IDEs m\u00e1s importantes:    </p> <ul> <li>Fleet   </li> <li>Pycharm   </li> <li>Thonny   </li> <li>Apache Netbeans   </li> <li>LiClipse   </li> <li>Visual Studio Code con el plugin para Python   </li> <li>Visual Studio   </li> </ul> <p>Por otra parte, tambien se pueden escoger alguno de \u00e9stos :   </p> <ul> <li>Sublime Text 3 con Anaconda Plugin   </li> <li>Atom con Atom-python-run   </li> <li>Wing Python IDE </li> <li>Spyder IDE </li> <li>Eric Python IDE </li> <li>IDLE (Entorno inclu\u00eddo con el int\u00e9rprete)   </li> </ul> <p>Ademas, en la valoraci\u00f3n cr\u00edtica algunas de las funcionalidades a considerar pueden ser :</p> <p>En lo que respecta a operaciones fundamentales:  </p> <ul> <li>Editor de c\u00f3digo: coloraci\u00f3n de la sintaxis.   </li> <li>Auto-completado de c\u00f3digo, atributos y m\u00e9todos de clases.   </li> <li>Identificaci\u00f3n autom\u00e1tica de c\u00f3digo.    </li> <li>Ofrece refactorizaci\u00f3n de c\u00f3digo: cambios menores en el c\u00f3digo que facilitan su legibilidad sin alterar su funcionalidad (por ejemplo cambiar el nombre a una variable).    </li> <li>Permite introducir autom\u00e1ticamente tabulaciones y espaciados para aumentar la legibilidad.   </li> <li>Depuraci\u00f3n: seguimiento de variables, puntos de ruptura y mensajes de error del int\u00e9rprete.   </li> <li>Herramientas de concepci\u00f3n visual para crear y manipular componentes visuales.     </li> <li>Asistentes y utilidades de gesti\u00f3n y generaci\u00f3n de c\u00f3digo.    </li> <li>Archivos fuente en unas carpetas y compilados a otras.    </li> <li>Compilaci\u00f3n de proyectos complejos en un solo paso.     </li> <li>Control de versiones: tener un almac\u00e9n de archivos compartido por todos los colaboradores de un proyecto. Ante un error, mecanismo de auto-recuperaci\u00f3n a un estado anterior estable.    </li> <li>Soporta cambios de varios usuarios de manera simult\u00e1nea.    </li> <li>Generador de documentaci\u00f3n integrado.    </li> <li>Detecci\u00f3n de errores de sintaxis en tiempo real.   </li> </ul> <p>Y por \u00faltimo, otras funciones importantes son:   </p> <ul> <li>Aumento de funcionalidades a trav\u00e9s de la gesti\u00f3n de sus m\u00f3dulos y plugins.   </li> <li>Administraci\u00f3n de las interfaces de usuario (men\u00fas y barras de herramientas).    </li> <li>Administraci\u00f3n de las configuraciones del usuario.   </li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA2.g, h No est\u00e1n identificadas todas las funcionalidades o no son correctas, sin errores. Identifica la mayor\u00eda de las funcionalidades y son correctas de 2 IDE's, con alg\u00fan ejemplo. Identifica todas las funcionalidades de mas de 2 IDE's, con detalles avanzados y ejemplos.","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Se realiza en un documento de google drive.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Fecha</li> <li>Tu nombre</li> <li>Identificaci\u00f3n del curso y grupo.</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 2_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/","title":"UD 2 - P2: Evaluaci\u00f3n de IDEs","text":"","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#relacion-22","title":"Relaci\u00f3n 2.2","text":"","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#1-descripcion-de-la-actividad","title":"1. Descripci\u00f3n de la actividad:**","text":"<p>En grupos de 5 personas, los estudiantes deber\u00e1n elegir dos IDEs para trabajar (Ver lista de ides posibles). Cada miembro del grupo trabajar\u00e1 individualmente en los puntos 1 al 6, pero al final deber\u00e1n reunirse para comparar sus resultados y realizar una tabla comparativa de los IDEs elegidos.</p> <p>La actividad se divide en dos partes:</p> <ul> <li>Parte individual: Cada estudiante trabaja en los puntos 1 a 6 de manera individual, generando evidencias a trav\u00e9s de capturas de pantalla por los puntos y respondiendo a las preguntas evaluativas asociadas a cada punto.   </li> <li>Parte grupal: Los estudiantes se reunir\u00e1n para discutir las diferencias y similitudes de los IDEs utilizados, desarrollar\u00e1n una respuesta grupal a las mismas preguntas, y crear\u00e1n una tabla comparativa de los IDEs. Este trabajo ser\u00e1 expuesto en clase. </li> </ul>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#2-parte-individual-trabajo-personal-en-los-puntos-1-6","title":"2. Parte individual: Trabajo personal en los puntos 1-6","text":"<p>Cada estudiante trabajar\u00e1 individualmente en los siguientes puntos:</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#21-instalacion-de-entornos-de-desarrollo-propietarios-y-libres-ce-2a","title":"2.1. Instalaci\u00f3n de entornos de desarrollo, propietarios y libres (CE 2.a)","text":"<p>Tarea individual:</p> <p>Elige dos entornos de desarrollo:  Instala ambos en tu equipo y captura pantallas del proceso de instalaci\u00f3n.</p> <p>Preguntas evaluativas:</p> <ol> <li>\u00bfQu\u00e9 diferencias encontraste en el proceso de instalaci\u00f3n entre el IDE propietario y el libre?</li> <li>\u00bfQu\u00e9 ventajas identificaste en cada uno de los entornos durante la instalaci\u00f3n?</li> </ol> <p>Evidencia: Captura de pantalla del proceso de instalaci\u00f3n de cada IDE.</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#22-gestion-de-modulos-y-extensiones-en-el-entorno-de-desarrollo-ce-2b","title":"2.2. Gesti\u00f3n de m\u00f3dulos y extensiones en el entorno de desarrollo (CE 2.b)","text":"<p>Tarea individual:</p> <p>En cada IDE, agrega extensiones o m\u00f3dulos que ampl\u00eden su funcionalidad. Por ejemplo, suponiendo habiendo trabajado con VSC y IntelliJ IDEA, instala una extensi\u00f3n para trabajar con Python en Visual Studio Code o un plugin para Kotlin en IntelliJ IDEA.</p> <p>Preguntas evaluativas:</p> <ol> <li>\u00bfC\u00f3mo fue el proceso de instalaci\u00f3n de extensiones o m\u00f3dulos en cada IDE?</li> <li>\u00bfQu\u00e9 beneficios proporcionan las extensiones o plugins que instalaste para el desarrollo de tus proyectos?</li> </ol> <p>Evidencia: Captura de pantalla del panel de extensiones o plugins instalados en cada IDE.</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#23-personalizacion-y-automatizacion-del-entorno-ce-2c","title":"2.3. Personalizaci\u00f3n y automatizaci\u00f3n del entorno (CE 2.c)","text":"<p>Tarea individual:</p> <p>Personaliza el entorno de trabajo en cada IDE (tema, atajos de teclado) y automatiza una tarea, como la ejecuci\u00f3n de pruebas o la compilaci\u00f3n de c\u00f3digo.</p> <p>Preguntas evaluativas:</p> <ol> <li>\u00bfQu\u00e9 aspectos del entorno personalizaste y c\u00f3mo mejor\u00f3 tu experiencia de desarrollo?</li> <li>\u00bfC\u00f3mo configuraste la automatizaci\u00f3n de tareas y en qu\u00e9 te benefici\u00f3 durante el trabajo?</li> </ol> <p>Evidencia: Captura de pantalla mostrando la personalizaci\u00f3n del entorno y la automatizaci\u00f3n de tareas en cada IDE. El antes y el despu\u00e9s.</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#24-configuracion-del-sistema-de-actualizacion-del-entorno-de-desarrollo-ce-2d","title":"2.4. Configuraci\u00f3n del sistema de actualizaci\u00f3n del entorno de desarrollo (CE 2.d)","text":"<p>Tarea individual:</p> <p>Configura el sistema de actualizaciones autom\u00e1ticas o manuales en ambos IDEs para asegurarte de que est\u00e1n al d\u00eda con las \u00faltimas versiones y mejoras.</p> <p>Preguntas evaluativas:</p> <ol> <li>\u00bfC\u00f3mo configuraste las actualizaciones autom\u00e1ticas en cada IDE?</li> <li>\u00bfPor qu\u00e9 es importante mantener el IDE actualizado en proyectos de desarrollo?</li> </ol> <p>Evidencia: Captura de pantalla de la configuraci\u00f3n de actualizaciones en cada IDE.</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#25-generacion-de-ejecutables-a-partir-de-codigo-fuente-en-distintos-lenguajes-en-un-mismo-ide-ce-2e","title":"2.5. Generaci\u00f3n de ejecutables a partir de c\u00f3digo fuente en distintos lenguajes en un mismo IDE (CE 2.e)","text":"<p>Tarea individual:</p> <p>Escribe un programa que cuente de 10 a 0 y luego imprima \"\u00a1Despegue!\". Usa un solo IDE para generar y ejecutar este programa en dos lenguajes diferentes (por ejemplo, Java y Kotlin en IntelliJ IDEA).</p> <p>Preguntas evaluativas:</p> <ol> <li>\u00bfCu\u00e1l fue el proceso para ejecutar el mismo programa en diferentes lenguajes dentro del mismo IDE?</li> <li>\u00bfQu\u00e9 diferencias encontraste en la generaci\u00f3n del ejecutable entre los dos lenguajes?</li> </ol> <p>Evidencia: Captura de pantalla mostrando la ejecuci\u00f3n del programa en ambos lenguajes dentro del mismo IDE.</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#26-generacion-de-ejecutables-con-diferentes-ides-a-partir-del-mismo-codigo-fuente-ce-2f","title":"2.6. Generaci\u00f3n de ejecutables con diferentes IDEs a partir del mismo c\u00f3digo fuente (CE 2.f)","text":"<p>Tarea individual:</p> <p>Escribe un programa en Python que cuente de 10 a 0 y luego imprima \"\u00a1Despegue!\". Ejecuta el programa en los IDEs seleccionados.</p> <p>Preguntas evaluativas:</p> <ol> <li>\u00bfQu\u00e9 diferencias encontraste al ejecutar el mismo c\u00f3digo fuente en diferentes IDEs?</li> <li>\u00bfCu\u00e1l de los IDEs te pareci\u00f3 m\u00e1s c\u00f3modo o eficiente para ejecutar el c\u00f3digo Python o el lenguajes que hayas elegido? \u00bfPor qu\u00e9?</li> </ol> <p>Evidencia: Captura de pantalla mostrando la ejecuci\u00f3n del programa en ambos IDEs.</p> <ul> <li>No olvides entregar tu trabajo individual en el readme.md del respositorio.</li> </ul>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#3-parte-grupal-comparacion-y-analisis-en-grupo-punto-7","title":"3. Parte grupal: Comparaci\u00f3n y an\u00e1lisis en grupo (punto 7)","text":"<p>Tras completar el trabajo individual, el equipo se reunir\u00e1 para discutir los resultados y completar la parte grupal de la actividad, concluir\u00e1n y decidir\u00e1n aquellos puntos destacables en cada una de las preguntas, susceptibles se ser comentadas en el trabajo:</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#31-comparacion-de-las-caracteristicas-comunes-y-especificas-de-diversos-entornos-de-desarrollo-ce-2g","title":"3.1. Comparaci\u00f3n de las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo (CE 2.g)**","text":"<p>Tarea grupal:</p> <p>En equipo, comparen las caracter\u00edsticas comunes y espec\u00edficas de los IDEs que utilizaron (por ejemplo, PyCharm vs. Visual Studio Code, o IntelliJ IDEA vs. Eclipse). Basen su comparaci\u00f3n en los resultados obtenidos en los puntos anteriores.</p> <p>Preguntas evaluativas anteriores: Dar una respuesta com\u00fan a todas las anteriores, solo aquellos puntos que se quieran destacar. Que IDES son mejores? que plugin son mejores? que funcionalidades son mas interesantes? etc....</p> <p>Preguntas evaluativas (para responder en grupo):</p> <ol> <li>\u00bfQu\u00e9 caracter\u00edsticas comunes comparten los IDEs en t\u00e9rminos de edici\u00f3n de c\u00f3digo, depuraci\u00f3n y control de versiones?</li> <li>\u00bfQu\u00e9 diferencias notaron en la forma en que los IDEs manejan m\u00f3dulos, personalizaci\u00f3n y generaci\u00f3n de ejecutables?</li> <li>\u00bfCu\u00e1l de los IDEs elegidos consideran que es m\u00e1s adecuado para proyectos de desarrollo espec\u00edficos y por qu\u00e9?</li> <li>\u00bfQu\u00e9 IDE recomendar\u00edan a un equipo de desarrollo que trabaja en proyectos de Python, Java o Kotlin y por qu\u00e9?</li> </ol> <p>Evidencia:</p> <ul> <li>Tabla comparativa de los IDEs, destacando sus caracter\u00edsticas comunes y espec\u00edficas.</li> </ul>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#4-ejemplo-de-tabla-comparativa","title":"4. Ejemplo de tabla comparativa","text":"<p>Aqu\u00ed tienes una versi\u00f3n de ejemplo de una tabla comparativa, con m\u00e1s de 10 caracter\u00edsticas que cubren tanto funcionalidades comunes como espec\u00edficas de los IDEs:</p> Caracter\u00edstica PyCharm Visual Studio Code IntelliJ IDEA Eclipse Lenguajes soportados Python Python, JavaScript, muchos m\u00e1s Kotlin, Java, Python, Scala Java, C/C++, Python, PHP Velocidad de carga Medio R\u00e1pido Medio Medio Soporte para extensiones/plugins Amplio, orientado a Python Muy amplio (Marketplace de extensiones) Amplio, orientado a Java/Kotlin Amplio (gran cantidad de plugins) Depurador Completo para Python B\u00e1sico pero funcional Completo para Java/Kotlin Completo para Java/C/C++ Refactorizaci\u00f3n S\u00ed, herramientas avanzadas Limitado, mediante extensiones S\u00ed, muy completo S\u00ed, pero limitado Autocompletado de c\u00f3digo Avanzado (IntelliSense para Python) Avanzado con extensiones Avanzado, nativo para Kotlin y Java Nativo para Java y C/C++ Control de versiones (Git) Integrado (soporte para Git y otros) Integrado (Git) Integrado (Git y m\u00e1s) Integrado (Git, Subversion) Automatizaci\u00f3n de tareas S\u00ed (tests, compilaci\u00f3n, etc.) S\u00ed, con extensiones S\u00ed, automatizaci\u00f3n avanzada S\u00ed, con configuraciones avanzadas Soporte para m\u00faltiples lenguajes Soporte principalmente para Python Soporte para muchos lenguajes mediante extensiones Soporte nativo para Java, Kotlin, Scala y otros Soporte para muchos lenguajes mediante plugins Personalizaci\u00f3n del entorno Limitado (temas y atajos) Muy alto (temas, extensiones, atajos) Avanzado (temas, atajos, herramientas personalizadas) Alto (temas, atajos) Integraci\u00f3n con bases de datos Soporte nativo (PostgreSQL, MySQL) Extensiones necesarias Soporte nativo completo (bases de datos, ORM) Requiere plugins adicionales Pruebas automatizadas Integrado para Python Extensiones disponibles Integrado para Java/Kotlin Requiere configuraciones adicionales Soporte para frameworks Excelente (Django, Flask, etc.) Amplio, mediante extensiones Amplio (Spring, Hibernate, etc.) Amplio (Spring, Hibernate, etc.) Configuraci\u00f3n de entornos virtuales Nativo para Python (virtualenv, pipenv) A trav\u00e9s de extensiones Configuraciones avanzadas A trav\u00e9s de plugins Herramientas de an\u00e1lisis de c\u00f3digo Soporte avanzado (an\u00e1lisis de c\u00f3digo Python) Extensiones necesarias Soporte completo para Java/Kotlin Soporte b\u00e1sico, plugins disponibles Soporte para compilaci\u00f3n/maven/gradle Limitado en Python A trav\u00e9s de extensiones Nativo para Maven, Gradle Nativo para Maven, Gradle Precio/licencia Propietario (con versi\u00f3n gratuita limitada: Community) Gratuito, c\u00f3digo abierto Propietario (con versi\u00f3n gratuita limitada: Community) Gratuito, c\u00f3digo abierto","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#41-explicacion-de-las-caracteristicas-clave","title":"4.1 Explicaci\u00f3n de las caracter\u00edsticas clave:","text":"<ol> <li>Lenguajes soportados: PyCharm est\u00e1 especializado en Python, mientras que Visual Studio Code soporta m\u00faltiples lenguajes a trav\u00e9s de extensiones. IntelliJ IDEA es el IDE oficial para Kotlin y Java, y Eclipse es ideal para Java, pero con soporte para varios lenguajes.</li> <li>Velocidad de carga: Visual Studio Code es r\u00e1pido debido a su ligereza, mientras que IDEs m\u00e1s completos como IntelliJ IDEA o Eclipse tienden a ser m\u00e1s lentos al manejar proyectos grandes.</li> <li>Soporte para extensiones/plugins: Visual Studio Code es extremadamente personalizable mediante extensiones, mientras que PyCharm e IntelliJ IDEA tienen un sistema robusto de plugins.</li> <li>Depurador: Todos los IDEs tienen un depurador integrado, pero Visual Studio Code requiere extensiones para depurar correctamente. IntelliJ IDEA y PyCharm tienen depuradores avanzados nativos para sus lenguajes principales.</li> <li>Refactorizaci\u00f3n: IntelliJ IDEA y PyCharm sobresalen en este aspecto con herramientas autom\u00e1ticas de refactorizaci\u00f3n, mientras que Visual Studio Code tiene un soporte limitado a trav\u00e9s de extensiones.</li> <li>Autocompletado de c\u00f3digo: Tanto IntelliJ IDEA como PyCharm ofrecen autocompletado avanzado, mientras que Visual Studio Code requiere extensiones para mejorar esta funcionalidad.</li> <li>Control de versiones: Todos los IDEs ofrecen integraci\u00f3n nativa con Git, pero algunos como IntelliJ IDEA tambi\u00e9n soportan otros sistemas de control de versiones como Subversion.</li> <li>Automatizaci\u00f3n de tareas: En todos los IDEs es posible automatizar tareas, pero Visual Studio Code lo logra principalmente mediante extensiones, mientras que PyCharm e IntelliJ lo hacen de manera nativa.</li> <li>Personalizaci\u00f3n del entorno: Visual Studio Code es extremadamente personalizable gracias a su enfoque en extensiones. PyCharm e IntelliJ permiten personalizar temas y atajos, pero con menos flexibilidad.</li> <li>Integraci\u00f3n con bases de datos: IntelliJ IDEA y PyCharm ofrecen soporte nativo para conectarse a bases de datos, mientras que Visual Studio Code requiere extensiones.</li> <li>Pruebas automatizadas: PyCharm e IntelliJ IDEA tienen soporte avanzado para ejecutar pruebas automatizadas, mientras que en Visual Studio Code esto depende de las extensiones.</li> <li>Soporte para frameworks: PyCharm ofrece soporte avanzado para frameworks como Django y Flask en Python, mientras que Visual Studio Code permite soporte para m\u00faltiples frameworks mediante extensiones. IntelliJ IDEA destaca en el uso de Spring y Hibernate en Java y Kotlin, y Eclipse tambi\u00e9n es compatible con frameworks pero requiere m\u00e1s plugins para configurarse.</li> <li>Configuraci\u00f3n de entornos virtuales: PyCharm facilita la configuraci\u00f3n de entornos virtuales como virtualenv y pipenv en Python, mientras que Visual Studio Code permite integrarlos mediante extensiones. IntelliJ IDEA es compatible con entornos virtuales en Kotlin y Java a trav\u00e9s de Gradle o Maven, mientras que Eclipse requiere plugins adicionales para esta funcionalidad.</li> <li>Herramientas de an\u00e1lisis de c\u00f3digo: IntelliJ IDEA y PyCharm incluyen an\u00e1lisis de c\u00f3digo avanzado para mejorar el rendimiento en Java, Kotlin y Python. Visual Studio Code requiere extensiones como SonarLint o ESLint para an\u00e1lisis espec\u00edficos, mientras que Eclipse ofrece an\u00e1lisis b\u00e1sico para Java, aunque es menos avanzado.</li> <li>Soporte para compilaci\u00f3n/Maven/Gradle: IntelliJ IDEA es excelente en la integraci\u00f3n con Maven y Gradle para proyectos en Java/Kotlin, mientras que Visual Studio Code requiere extensiones para estas herramientas. Eclipse tambi\u00e9n ofrece soporte nativo para Maven/Gradle, y PyCharm, al centrarse en Python, tiene un soporte limitado para herramientas de compilaci\u00f3n.</li> <li>Precio/licencia: PyCharm e IntelliJ IDEA ofrecen versiones Community gratuitas y opciones de pago con m\u00e1s caracter\u00edsticas, mientras que Visual Studio Code es gratuito y de c\u00f3digo abierto. Eclipse es tambi\u00e9n gratuito y de c\u00f3digo abierto, siendo una opci\u00f3n accesible para m\u00faltiples lenguajes.</li> </ol>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#5-ides-posibles-para-la-actividad","title":"5. IDEs posibles para la actividad","text":"<p>Para la actividad de comparaci\u00f3n de entornos de desarrollo, los estudiantes pueden elegir entre los siguientes IDEs principales y algunas alternativas secundarias. Cada IDE ofrece caracter\u00edsticas diferentes, lo que permite explorar sus ventajas y desventajas para distintos tipos de proyectos. Solo puedes repetir uno de los ya visto: Visual Studio Code, Pycharm, Intellij IDEA.</p>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#51-ides-mas-importantes","title":"5.1. IDEs m\u00e1s importantes","text":"<ol> <li>Fleet: IDE de nueva generaci\u00f3n de JetBrains, ligero y adaptable a m\u00faltiples lenguajes. Est\u00e1 dise\u00f1ado para facilitar el trabajo en equipo y la colaboraci\u00f3n en proyectos.</li> <li>PyCharm: Especializado en Python y muy completo para el desarrollo en este lenguaje, especialmente para proyectos que incluyen frameworks como Django y Flask. Ofrece herramientas avanzadas de depuraci\u00f3n, refactorizaci\u00f3n, integraci\u00f3n con Git y gesti\u00f3n de entornos virtuales.</li> <li>Thonny: Un IDE ideal para principiantes en Python. Su interfaz simple y clara permite que los nuevos programadores se familiaricen f\u00e1cilmente con el lenguaje, aunque ofrece menos funciones avanzadas que otros IDEs.</li> <li>Apache NetBeans: IDE de c\u00f3digo abierto que soporta m\u00faltiples lenguajes de programaci\u00f3n como Java, PHP, y Python. Es conocido por su gran cantidad de plugins y su uso en proyectos empresariales.</li> <li>LiClipse: Una extensi\u00f3n de Eclipse que incluye herramientas para el desarrollo en Python, haciendo que Eclipse sea m\u00e1s adecuado para este lenguaje.</li> <li>Visual Studio Code con el plugin para Python: Un editor de c\u00f3digo muy flexible y personalizable con una gran comunidad de extensiones, que lo convierte en un entorno adecuado para el desarrollo en Python y otros lenguajes.</li> <li>Visual Studio: Un IDE avanzado de Microsoft principalmente para C#, .NET y aplicaciones de Windows, aunque permite el desarrollo en Python con la instalaci\u00f3n de m\u00f3dulos adicionales.</li> </ol>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#52-otros-ides-alternativos","title":"5.2. Otros IDEs alternativos","text":"<ol> <li>Sublime Text 3 con Anaconda Plugin: Aunque no es un IDE completo, Sublime Text puede configurarse para el desarrollo en Python usando el plugin Anaconda, que agrega funcionalidades de autocompletado y depuraci\u00f3n.</li> <li>Atom con Atom-python-run: Atom es otro editor de texto ligero que, con el plugin Atom-python-run, puede configurarse para ejecutar scripts de Python y realizar tareas b\u00e1sicas de desarrollo.</li> <li>Wing Python IDE: IDE especializado en Python que incluye herramientas avanzadas para depuraci\u00f3n, edici\u00f3n de c\u00f3digo, y testing, siendo popular entre desarrolladores que requieren un enfoque intensivo en Python.</li> <li>Spyder IDE: IDE popular en el entorno de Data Science y an\u00e1lisis de datos en Python. Incluye integraci\u00f3n con librer\u00edas cient\u00edficas como NumPy y Pandas, y una consola interactiva para pruebas r\u00e1pidas.</li> <li>Eric Python IDE: IDE de c\u00f3digo abierto, orientado a Python, con una interfaz completa y herramientas de depuraci\u00f3n integradas.</li> <li>IDLE (Entorno incluido con el int\u00e9rprete de Python): Un entorno b\u00e1sico para Python que viene integrado con el int\u00e9rprete. Es sencillo y ligero, ideal para realizar pruebas r\u00e1pidas y scripts peque\u00f1os.</li> </ol>","tags":["IDE"]},{"location":"section3/u02/practica/EDES-U2.-Practica002/#6-evaluacion","title":"6. Evaluaci\u00f3n","text":"<ul> <li>Parte individual: Entrega de trabajo. Se evaluar\u00e1n las respuestas a las preguntas y las capturas de pantalla entregadas para cada uno de los 6 puntos trabajados individualmente.</li> <li>Parte grupal: Exposici\u00f3n. Se evaluar\u00e1n las respuestas grupales a las preguntas y la tabla comparativa de los IDEs.</li> </ul>","tags":["IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/","title":"UD 2 - 2.1 Entornos de desarrollo integrado","text":"","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#21-entornos-de-desarrollo-integrado","title":"2.1. Entornos de desarrollo integrado","text":"<p>Los Entornos de Desarrollo Integrado (IDEs) son herramientas totalmente necesarias para el desarrollo de software. En esta unidad, aprenderemos a instalar, personalizar y automatizar entornos de desarrollo, as\u00ed como a generar ejecutables en diferentes lenguajes y entornos.</p> <p>En esta secci\u00f3n, veremos los conceptos b\u00e1sicos de los IDEs y su importancia en el desarrollo de software.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Las herramientas CASE (Computer Aided Software Engineering) son software dise\u00f1ado para asistir a los desarrolladores en las distintas fases del ciclo de vida del desarrollo de software. Estas herramientas ayudan a automatizar tareas en el dise\u00f1o, an\u00e1lisis, desarrollo y pruebas de aplicaciones. Dependiendo del momento en el que se utilicen, las herramientas CASE se dividen en tres grandes categor\u00edas:</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#11-upper-case-u-case","title":"1.1. Upper CASE (U-CASE)","text":"<p>Estas herramientas se enfocan en las primeras fases del desarrollo, como la planificaci\u00f3n y el an\u00e1lisis de requisitos. Ayudan a los desarrolladores a definir los objetivos y requerimientos del proyecto.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#12-middle-case-m-case","title":"1.2. Middle CASE (M-CASE)","text":"<p>Son herramientas utilizadas durante el an\u00e1lisis y dise\u00f1o del software, donde ayudan a modelar y estructurar el sistema, utilizando diagramas de flujo, diagramas de clases o casos de uso. Las veremos m\u00e1s adelante.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#13-lower-case-l-case","title":"1.3. Lower CASE (L-CASE)","text":"<p>Estas herramientas son las que asisten en las fases de desarrollo, pruebas y mantenimiento del software. Aqu\u00ed es donde entran los Entornos de Desarrollo Integrado (IDE), que son la principal herramienta de esta categor\u00eda. Los IDEs proporcionan un conjunto de funcionalidades que permiten a los desarrolladores escribir, depurar, probar y gestionar proyectos de software de forma m\u00e1s eficiente.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#2-los-entornos-de-desarrollo-integrado-ides","title":"2. Los Entornos de Desarrollo Integrado (IDEs)","text":"<p>Los Entornos de Desarrollo Integrado (IDEs) son herramientas esenciales dentro de las herramientas Lower CASE. </p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#21-que-es-un-ide","title":"2.1. \u00bfQu\u00e9 es un IDE?","text":"<p>Un IDE re\u00fane en una sola interfaz todas las herramientas necesarias para el desarrollo de software, simplificando el proceso y haci\u00e9ndolo m\u00e1s productivo. Los IDEs permiten a los programadores escribir c\u00f3digo, depurarlo, compilarlo, gestionarlo y probarlo sin necesidad de utilizar m\u00faltiples aplicaciones.</p> <p>Algunas de las caracter\u00edsticas fundamentales de un IDE son:</p> <ul> <li>Soporte para diversos lenguajes de programaci\u00f3n: La mayor\u00eda de los IDEs modernos soportan m\u00faltiples lenguajes de programaci\u00f3n, permitiendo trabajar en diferentes tipos de proyectos.   </li> <li>Integraci\u00f3n con control de versiones: Los IDEs incluyen soporte integrado para herramientas como Git, lo que facilita la gesti\u00f3n de versiones y el trabajo colaborativo.    </li> <li>Generaci\u00f3n de c\u00f3digo y refactorizaci\u00f3n: Los IDEs pueden generar autom\u00e1ticamente partes del c\u00f3digo, lo que ahorra tiempo y reduce errores. Adem\u00e1s, permiten realizar refactorizaciones (mejoras en el c\u00f3digo) de manera autom\u00e1tica.   </li> <li>Autocompletado y predicci\u00f3n de c\u00f3digo: Los editores de c\u00f3digo de los IDEs pueden sugerir palabras clave o m\u00e9todos mientras el desarrollador escribe, lo que acelera la programaci\u00f3n.    </li> <li>Integraci\u00f3n con compiladores e int\u00e9rpretes: Permiten detectar errores de sintaxis y ejecutar el c\u00f3digo directamente en el IDE, sin necesidad de salir de la interfaz.    </li> <li>Soporte para frameworks populares: Los IDEs permiten integrar frameworks de desarrollo como Spring, Django, o React, facilitando el uso de estas tecnolog\u00edas.    </li> <li>Creaci\u00f3n de interfaces gr\u00e1ficas: Algunos IDEs ofrecen herramientas visuales para construir interfaces gr\u00e1ficas, facilitando el dise\u00f1o y desarrollo de aplicaciones visuales.    </li> <li>Extensibilidad: Los IDEs permiten la instalaci\u00f3n de extensiones para a\u00f1adir nuevas funcionalidades, como soporte para nuevos lenguajes o herramientas de an\u00e1lisis de c\u00f3digo.    </li> <li>Importar y exportar proyectos: Facilitan la colaboraci\u00f3n y el traslado de proyectos entre diferentes entornos de trabajo.   </li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#3-componentes-de-un-ide","title":"3. Componentes de un IDE","text":"<p>A continuaci\u00f3n, veremos algunas de las herramientas y funcionalidades b\u00e1sicas que conforman un IDE:</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#31-editor-de-codigo-avanzado","title":"3.1. Editor de c\u00f3digo avanzado","text":"<p>Los IDEs incorporan un editor de c\u00f3digo con caracter\u00edsticas como resaltado de sintaxis, autocompletado y verificaci\u00f3n de errores en tiempo real. Estas caracter\u00edsticas mejoran la legibilidad del c\u00f3digo y ayudan a detectar errores antes de que se conviertan en un problema.</p> <p>Ejemplo: En Visual Studio Code, al escribir c\u00f3digo JavaScript, el editor sugiere posibles completaciones de funciones y muestra advertencias si hay errores de sintaxis.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#32-compilador-o-interprete-integrado","title":"3.2. Compilador o int\u00e9rprete integrado","text":"<p>Los IDEs permiten ejecutar el c\u00f3digo directamente desde la misma interfaz, ya sea mediante un compilador o un int\u00e9rprete seg\u00fan el lenguaje que se est\u00e9 utilizando.</p> <p>Ejemplo: En IntelliJ IDEA, puedes compilar y ejecutar aplicaciones Java con un solo clic, sin necesidad de abrir una terminal o utilizar comandos externos.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#33-depurador-integrado-debugger","title":"3.3. Depurador integrado (Debugger)","text":"<p>Los depuradores permiten detener la ejecuci\u00f3n del c\u00f3digo en puntos espec\u00edficos, llamados \"puntos de interrupci\u00f3n\" o breakpoints, para inspeccionar el estado de las variables y el flujo del programa, ayudando a detectar y corregir errores.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#34-integracion-con-sistemas-de-control-de-versiones","title":"3.4. Integraci\u00f3n con sistemas de control de versiones","text":"<p>Los IDEs modernos est\u00e1n integrados con herramientas de control de versiones como Git, lo que facilita el seguimiento de los cambios en el c\u00f3digo y permite colaborar en equipo de manera m\u00e1s eficiente.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#35-pruebas-automatizadas","title":"3.5. Pruebas automatizadas","text":"<p>Algunos IDEs, como PyCharm o Visual Studio Code, permiten la integraci\u00f3n de herramientas de pruebas autom\u00e1ticas como JUnit (para Java y kotlin), Kotest para kotlin o pytest (para Python), lo que facilita la detecci\u00f3n de errores a lo largo del desarrollo.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#36-soporte-para-frameworks-populares","title":"3.6. Soporte para frameworks populares","text":"<p>Muchos IDEs vienen con soporte para frameworks populares como Django, React o Spring, lo que facilita la creaci\u00f3n de aplicaciones utilizando estos marcos de trabajo y automatiza tareas relacionadas con ellos.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#37-extensibilidad","title":"3.7. Extensibilidad","text":"<p>Los IDEs permiten instalar extensiones que a\u00f1aden soporte para nuevos lenguajes, herramientas o tecnolog\u00edas, personalizando el entorno de acuerdo a las necesidades del desarrollador.</p> <p>Ejemplo: En Visual Studio Code puedes instalar una extensi\u00f3n para trabajar con Docker o integrar una herramienta de an\u00e1lisis de c\u00f3digo como ESLint.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#4-tipos-de-ides","title":"4. Tipos de IDEs","text":"<p>Existen diferentes tipos de IDEs que se utilizan seg\u00fan el tipo de lenguaje o proyecto en el que se est\u00e9 trabajando:</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#41-ides-de-proposito-general","title":"4.1. IDEs de prop\u00f3sito general","text":"<ul> <li>Visual Studio Code: Un editor ligero y altamente extensible que soporta una amplia gama de lenguajes y tecnolog\u00edas, desde desarrollo web hasta programaci\u00f3n en C++ o Python.   </li> <li>IntelliJ IDEA: Un IDE robusto de JetBrains, ideal para el desarrollo en Java y Kotlin, pero compatible con otros lenguajes como JavaScript y Python.   </li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#42-ides-especificos-de-lenguaje","title":"4.2. IDEs espec\u00edficos de lenguaje","text":"<ul> <li>PyCharm: Un IDE de JetBrains especializado en Python, que ofrece integraci\u00f3n avanzada con frameworks como Django y herramientas como Jupyter Notebooks.    </li> <li>Xcode: El IDE oficial de Apple, dise\u00f1ado para el desarrollo de aplicaciones en iOS y macOS, compatible con lenguajes como Swift y Objective-C.   </li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#43-ides-para-desarrollo-web","title":"4.3. IDEs para desarrollo web","text":"<ul> <li>Visual Studio Code: Aunque se considera como un editor, la cantidad de extensiones que tiene lo acercan a lo que conocemos como un IDEs. Es uno de los m\u00e1s populares para el desarrollo web, con soporte para HTML, CSS, JavaScript y frameworks como React o Angular.    </li> <li>Sublime Text: Un editor de texto ligero y r\u00e1pido, popular entre los desarrolladores web por su flexibilidad y extensa gama de plugins.    </li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#44-ides-moviles","title":"4.4. IDEs m\u00f3viles","text":"<ul> <li>Android Studio: Basado en IntelliJ IDEA, es el IDE oficial para el desarrollo de aplicaciones Android, con herramientas espec\u00edficas como un emulador de dispositivos y soporte para Kotlin y Java.   </li> <li>Xcode: Adem\u00e1s de ser un IDE para desarrollo en macOS, es la herramienta principal para la creaci\u00f3n de aplicaciones en iOS.    </li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#45-fleet-ide-de-nueva-generacion","title":"4.5. Fleet: IDE de nueva generaci\u00f3n","text":"<ul> <li>Fleet es un editor de JetBrains dise\u00f1ado para ser ligero, flexible y compatible con m\u00faltiples lenguajes de programaci\u00f3n. Se ofrece como alternativa a Visual Studio Code y presenta una experiencia simplificada pero potente, permitiendo la colaboraci\u00f3n en tiempo real entre equipos.</li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#5-enlaces-y-recursos-de-interes","title":"5. Enlaces y recursos de inter\u00e9s","text":"<p>Siguiendo los siguientes enlaces podr\u00e1s instalar las herramientas que se mencionan en este documento:</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#51-instalacion-visual-studio-code","title":"5.1. Instalaci\u00f3n Visual Studio Code","text":"<ul> <li>https://code.visualstudio.com/download</li> <li>https://learn.microsoft.com/es-es/training/modules/python-install-vscode/</li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#52-instalacion-herramientas-jetbrains","title":"5.2. instalaci\u00f3n herramientas Jetbrains","text":"<ul> <li>https://www.jetbrains.com/es-es/lp/toolbox/</li> <li>https://www.jetbrains.com/toolbox-app/</li> </ul>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.1.-IDEs/#6-conclusion","title":"6. Conclusi\u00f3n","text":"<p>Los Entornos de Desarrollo Integrado (IDEs) juegan un papel clave en el proceso de desarrollo de software al integrar m\u00faltiples herramientas y funcionalidades en una sola plataforma. Desde la escritura de c\u00f3digo hasta la depuraci\u00f3n, pasando por el control de versiones y la ejecuci\u00f3n de pruebas autom\u00e1ticas, los IDEs permiten a los programadores trabajar de manera m\u00e1s eficiente y organizada. Adem\u00e1s, con el soporte para extensiones y frameworks populares, estos entornos son altamente personalizables, lo que los hace indispensables en cualquier proyecto de desarrollo.</p>","tags":["EDES","IDE"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/","title":"UD 2 - 2.2 Gesti\u00f3n de m\u00f3dulos y extensiones","text":"","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#22-gestion-de-modulos-y-extensiones","title":"2.2. Gesti\u00f3n de m\u00f3dulos y extensiones","text":"<p>Los m\u00f3dulos y extensiones son peque\u00f1os complementos o \"plugins\" que puedes agregar a tu IDE para dotarlo de nuevas funcionalidades.</p> <p>En este punto aprenderemos qu\u00e9 son los m\u00f3dulos y extensiones, c\u00f3mo instalarlos, gestionarlos y por qu\u00e9 son fundamentales para mejorar nuestra productividad.</p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Cuando trabajamos con entornos de desarrollo integrados (IDEs, aunque alguna veces nos referiremos con IDES tambien a editores potentes como Visual Studio Code, Fleet) como Visual Studio Code o los de JetBrains (IntelliJ IDEA, PyCharm, Fleet), una de sus grandes ventajas es la flexibilidad. Esta flexibilidad se consigue a trav\u00e9s de los m\u00f3dulos y extensiones que podemos a\u00f1adir para personalizar y ampliar las capacidades del IDE. </p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#2-que-son-los-modulos-y-las-extensiones","title":"2. \u00bfQu\u00e9 son los m\u00f3dulos y las extensiones?","text":"","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#21-definicion","title":"2.1. Definici\u00f3n","text":"<p>Los m\u00f3dulos y extensiones son peque\u00f1os complementos o \"plugins\" que puedes agregar a tu IDE para dotarlo de nuevas funcionalidades. Estas funcionalidades pueden incluir:</p> <ul> <li>Soporte para nuevos lenguajes de programaci\u00f3n.   </li> <li>Herramientas de depuraci\u00f3n avanzadas.   </li> <li>Integraci\u00f3n con frameworks populares (como React o Django).   </li> <li>Herramientas de dise\u00f1o de interfaces gr\u00e1ficas.   </li> <li>Conexi\u00f3n con bases de datos o servidores.   </li> </ul> <p>En resumen, permiten personalizar el entorno seg\u00fan tus necesidades, a\u00f1adiendo \u00fanicamente las herramientas que vas a utilizar en tu proyecto. As\u00ed, no sobrecargas el IDE con funciones que no necesitas.   </p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#22-ejemplo-practico-de-extensiones-en-visual-studio-code","title":"2.2. Ejemplo pr\u00e1ctico de extensiones en Visual Studio Code","text":"<p>Visual Studio Code es conocido por ser un editor ligero y altamente extensible. Por defecto, cuando lo instalas, solo incluye las herramientas m\u00e1s b\u00e1sicas, pero puedes adaptarlo a casi cualquier tipo de desarrollo a\u00f1adiendo extensiones.    </p> <p>Ejemplo: Imagina que quieres desarrollar una p\u00e1gina web utilizando HTML, CSS y JavaScript. Al abrir Visual Studio Code, notar\u00e1s que el soporte para estos lenguajes es b\u00e1sico. Sin embargo, al agregar extensiones espec\u00edficas, puedes tener un entorno completamente optimizado para el desarrollo web.   </p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#3-instalacion-de-extensiones-en-visual-studio-code","title":"3. Instalaci\u00f3n de extensiones en Visual Studio Code","text":"<p>Aunque se dan instrucciones para instalar extensiones y m\u00f3dulos en distintos IDES, al final se proporcionan enlaces a la documentaci\u00f3n oficial de los productos para seguir los pasos. Esta informaci\u00f3n puede variar con el tiempo, por lo que es recomendable consultar la documentaci\u00f3n oficial para obtener la informaci\u00f3n m\u00e1s actualizada.</p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#31-acceso-al-marketplace-de-extensiones","title":"3.1. Acceso al Marketplace de extensiones","text":"<ol> <li>Abre Visual Studio Code.   </li> <li>En el panel de la izquierda, ver\u00e1s un \u00edcono de cuadrado con otro m\u00e1s peque\u00f1o en la esquina (es el icono del Marketplace de Extensiones). Haz clic en \u00e9l.   </li> <li>Se abrir\u00e1 una barra de b\u00fasqueda donde podr\u00e1s buscar extensiones para a\u00f1adir.   </li> </ol>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#32-instalacion-de-una-extension","title":"3.2. Instalaci\u00f3n de una extensi\u00f3n","text":"<p>Supongamos que est\u00e1s desarrollando en Python y necesitas a\u00f1adir soporte completo para este lenguaje.</p> <ol> <li>En el Marketplace de Extensiones, escribe \"Python\" en la barra de b\u00fasqueda.    </li> <li>Selecciona la extensi\u00f3n llamada Python (desarrollada por Microsoft) de los resultados.   </li> <li>Haz clic en el bot\u00f3n Instalar. En unos segundos, tu IDE tendr\u00e1 completo soporte para Python, incluyendo autocompletado, depuraci\u00f3n y an\u00e1lisis de errores.   </li> </ol>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#33-instalacion-de-linting-y-formateadores-de-codigo","title":"3.3. Instalaci\u00f3n de linting y formateadores de c\u00f3digo","text":"<p>Los linters y formateadores de c\u00f3digo son extensiones que te ayudan a mantener un c\u00f3digo limpio y consistente.     - linters: Verifican tu c\u00f3digo en busca de errores y malas pr\u00e1cticas. Por ejemplo, si escribiste una variable que nunca usas, el linter te lo indicar\u00e1, o por ejemplo si tienes una variable que no sigue la convenci\u00f3n de nombres.     - Formateadores: Ajustan autom\u00e1ticamente el formato de tu c\u00f3digo seg\u00fan unas reglas predefinidas. Por ejemplo si tienes un c\u00f3digo con sangr\u00edas incorrectas, el formateador lo corregir\u00e1.</p> <p>Existen extensiones que te permiten utilizar estas herramientas en Visual Studio Code y Pycharm. A continuaci\u00f3n, te proporciono una URL para seguir los pasos a trav\u00e9s de un articulo:     - Configurar linter y formatter en VSC</p> <p>Estas extensiones no solo te ayudar\u00e1n a escribir c\u00f3digo m\u00e1s r\u00e1pido, sino que tambi\u00e9n te aseguran que sigues buenas pr\u00e1cticas en tu proyecto.</p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#34-instalacion-de-multiples-extensiones-para-un-proyecto-web","title":"3.4. Instalaci\u00f3n de m\u00faltiples extensiones para un proyecto web","text":"<p>Si est\u00e1s desarrollando una aplicaci\u00f3n web en JavaScript con el framework React, podr\u00edas necesitar varias extensiones.</p> <ol> <li>Busca e instala:<ul> <li>ESLint: Para verificar y corregir errores de estilo de c\u00f3digo en JavaScript.   </li> <li>Prettier: Para formatear tu c\u00f3digo autom\u00e1ticamente seg\u00fan unas reglas predefinidas.   </li> <li>React: Para tener snippets y autocompletado espec\u00edficos de React.</li> </ul> </li> </ol>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#4-gestion-de-modulos-en-jetbrains-intellij-idea-pycharm","title":"4. Gesti\u00f3n de m\u00f3dulos en JetBrains (IntelliJ IDEA, PyCharm)","text":"<p>Los entornos de JetBrains tambi\u00e9n permiten una gran personalizaci\u00f3n mediante m\u00f3dulos y plugins. Estos m\u00f3dulos se instalan y gestionan directamente desde el IDE, y est\u00e1n orientados a proyectos m\u00e1s complejos o lenguajes espec\u00edficos.   </p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#41-que-es-un-modulo-en-jetbrains","title":"4.1. \u00bfQu\u00e9 es un m\u00f3dulo en JetBrains?","text":"<p>Un m\u00f3dulo en JetBrains es un conjunto de archivos y configuraciones que a\u00f1aden soporte para ciertos lenguajes o frameworks en tu proyecto. Si trabajas con Python, puedes instalar el m\u00f3dulo de Python, y adem\u00e1s a\u00f1adir un modulo para Django si trabajas con este framework. O si estas en IntelliJ IDEA  y trabajas con Java o kotlin, puedes instalar un m\u00f3dulo para soportar el framework Spring. IntelliJ IDEA y PyCharm tienen m\u00f3dulos espec\u00edficos para cada lenguaje y framework, lo que te permite personalizar tu entorno de desarrollo seg\u00fan tus necesidades.</p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#42-instalacion-de-modulos-en-intellij-idea","title":"4.2. Instalaci\u00f3n de m\u00f3dulos en IntelliJ IDEA","text":"<ol> <li>Abre IntelliJ IDEA.   </li> <li>Dir\u00edgete a la barra superior y selecciona <code>File &gt; Project Structure</code>.   </li> <li>En la ventana de estructura de proyecto, selecciona la opci\u00f3n Modules y haz clic en + para a\u00f1adir un nuevo m\u00f3dulo.   </li> <li>Elige el tipo de m\u00f3dulo que quieres instalar, por ejemplo, Java, Kotlin, o Spring. Sigue las indicaciones del asistente para configurarlo.    </li> </ol>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#43-instalacion-de-plugins-en-jetbrains-pycharm","title":"4.3. Instalaci\u00f3n de plugins en JetBrains (PyCharm)","text":"<p>Adem\u00e1s de los m\u00f3dulos, JetBrains permite la instalaci\u00f3n de plugins que ampl\u00edan las capacidades de su IDE de forma similar a las extensiones de Visual Studio Code.</p> <ol> <li>En la barra superior, ve a <code>File &gt; Settings</code> (o <code>Preferences</code> en Mac).   </li> <li>Selecciona la opci\u00f3n Plugins.   </li> <li>En el campo de b\u00fasqueda, escribe el nombre del plugin que necesitas. Por ejemplo, si trabajas con Kotest (framework de pruebas unitarias para kotlin), puedes buscar el plugin Kotest.   </li> <li>Haz clic en Instalar y reinicia el IDE para que los cambios se apliquen.   </li> </ol>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#43-instalacion-de-linting-y-formateadores-de-codigo","title":"4.3. Instalaci\u00f3n de linting y formateadores de c\u00f3digo","text":"<p>Como hemos dicho, los linters y formateadores de c\u00f3digo son extensiones que te ayudan a mantener un c\u00f3digo limpio y consistente.</p> <p>Existen extensiones que te permiten utilizar estas herramientas en Pycharm. A continuaci\u00f3n, te proporciono una URL para seguir los pasos a trav\u00e9s de un articulos.      - Configurar linter y formatter en pycharm</p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#5-desinstalacion-y-actualizacion-de-extensiones-y-modulos","title":"5. Desinstalaci\u00f3n y actualizaci\u00f3n de extensiones y m\u00f3dulos","text":"","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#51-desinstalacion-en-visual-studio-code","title":"5.1. Desinstalaci\u00f3n en Visual Studio Code","text":"<p>Si en alg\u00fan momento ya no necesitas una extensi\u00f3n, puedes desinstalarla f\u00e1cilmente.   </p> <ol> <li>Abre el panel de extensiones en Visual Studio Code (<code>Ctrl + Shift + X</code>).   </li> <li>Encuentra la extensi\u00f3n que deseas desinstalar.   </li> <li>Haz clic en el bot\u00f3n de la papelera que aparece junto a su nombre.   </li> </ol>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#52-actualizacion-de-extensiones-en-visual-studio-code","title":"5.2. Actualizaci\u00f3n de extensiones en Visual Studio Code","text":"<p>Visual Studio Code te notificar\u00e1 autom\u00e1ticamente cuando haya actualizaciones disponibles para tus extensiones. Solo tienes que hacer clic en el bot\u00f3n de Actualizar que aparecer\u00e1 junto a la extensi\u00f3n en el Marketplace.   </p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#53-gestion-de-modulos-y-plugins-en-jetbrains","title":"5.3. Gesti\u00f3n de m\u00f3dulos y plugins en JetBrains","text":"<p>Desde <code>File &gt; Settings &gt; Plugins</code>, puedes gestionar tus plugins instalados: desactivarlos temporalmente, actualizarlos o desinstalarlos por completo. Esto te permite mantener tu IDE optimizado y evitar sobrecargarlo con funcionalidades innecesarias.   </p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#6-enlaces-y-recursos-de-interes","title":"6. Enlaces y recursos de inter\u00e9s","text":"<p>Siguiendo los siguientes enlaces podr\u00e1s instalar extensiones y plugins en Visual Studio Code y los IDEs de JetBrains:   </p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#61-extensiones-en-visual-studio-code","title":"6.1. Extensi\u00f3nes en Visual Studio Code","text":"<ul> <li>Extensiones en markeplace</li> <li>Using extensions in Visual Studio Code</li> <li>Instalaci\u00f3n de la extensi\u00f3n de Python</li> </ul>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#62-extensiones-en-herramientas-jetbrains","title":"6.2. Extensi\u00f3nes en herramientas Jetbrains","text":"<ul> <li>Instalando plugins en pycharm</li> <li>Plugins en pycharm</li> <li>Instalando plugins en IDEA</li> <li>Plugins en IDEA</li> <li>Visual Studio Code Marketplace</li> <li>Extensiones recomendadas para Python en Visual Studio Code</li> <li>Extensiones recomendadas para Kotlin en Visual Studio Code</li> <li>Extensiones recomendadas para Python en PyCharm</li> <li>Extensiones recomendadas para Kotlin en IntelliJ IDEA</li> </ul>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.2.-Modulos/#7-conclusion","title":"7. Conclusi\u00f3n","text":"<p>La gesti\u00f3n de m\u00f3dulos y extensiones es una parte fundamental para personalizar tu entorno de desarrollo y ajustarlo a las necesidades de tu proyecto. Tanto en Visual Studio Code como en los IDEs de JetBrains, puedes a\u00f1adir o eliminar funcionalidades seg\u00fan lo que vayas necesitando. Esto te permite trabajar de forma m\u00e1s eficiente, ahorrando tiempo y mejorando la calidad de tu c\u00f3digo. \u00a1Aprovecha todas las herramientas a tu disposici\u00f3n para hacer que tu entorno de desarrollo sea perfecto para ti!</p>","tags":["EDES","IDE","Modulos"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/","title":"UD 2 - 2.3 Personalizaci\u00f3n del entorno","text":"","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#23-personalizacion-del-entorno","title":"2.3. Personalizaci\u00f3n del entorno","text":"<p>La personalizaci\u00f3n y automatizaci\u00f3n del entorno de desarrollo son esenciales para maximizar la productividad y optimizar el flujo de trabajo.  En este punto veremos c\u00f3mo personalizar y automatizar estos IDEs para que trabajen de la manera que mejor se ajuste a tus necesidades.</p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Uno de los aspectos m\u00e1s importantes a la hora de trabajar en un entorno de desarrollo es la personalizaci\u00f3n y automatizaci\u00f3n del mismo. Adaptar el entorno de trabajo a nuestras preferencias y automatizar tareas repetitivas nos ayuda a ser m\u00e1s eficientes y productivos. Tanto JetBrains como Visual Studio Code ofrecen muchas opciones para personalizar la apariencia, atajos de teclado y automatizar tareas como la compilaci\u00f3n, ejecuci\u00f3n de scripts o ejecuci\u00f3n de pruebas son pasos clave que te permitir\u00e1n centrarte en lo que realmente importa: escribir buen c\u00f3digo. </p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#2-personalizacion-del-entorno","title":"2. Personalizaci\u00f3n del entorno","text":"<p>Cada desarrollador tiene preferencias distintas, desde la forma en que se muestra el c\u00f3digo hasta los atajos de teclado. Personalizar el entorno puede hacer que te sientas m\u00e1s c\u00f3modo y trabajes de manera m\u00e1s fluida.   </p> <p>Aunque se dar\u00e1n instrucciones sobre c\u00f3mo personalizar los IDES, al final del punto se incluir\u00e1n enlaces a los productos oficiales de Visual Studio Code y JetBrains ya que los pasos pueden cambiar con el tiempo.</p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#21-personalizacion-de-visual-studio-code","title":"2.1. Personalizaci\u00f3n de Visual Studio Code","text":"<p>Visual Studio Code es muy flexible y permite modificar casi cualquier aspecto del entorno.   </p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#211-cambiar-el-tema-de-color","title":"2.1.1. Cambiar el tema de color","text":"<ol> <li>Para cambiar el tema de color del editor, ve a <code>Archivo &gt; Preferencias &gt; Tema de color</code> o utiliza el atajo <code>Ctrl + K + T</code>.    </li> <li>Aparecer\u00e1 una lista de temas preinstalados. Puedes elegir entre opciones como Claro, Oscuro, o temas personalizados como Monokai.   <ul> <li>Ejemplo: Si prefieres trabajar con un tema oscuro que reduce la fatiga visual,  selecciona el tema Dark+ (predeterminado oscuro).   </li> </ul> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#212-cambiar-la-fuente-y-el-tamano-del-texto","title":"2.1.2. Cambiar la fuente y el tama\u00f1o del texto","text":"<ol> <li>Dir\u00edgete a <code>Archivo &gt; Preferencias &gt; Configuraci\u00f3n</code> o usa <code>Ctrl + ,</code>.   </li> <li>En la barra de b\u00fasqueda, escribe \"font size\" para encontrar la opci\u00f3n de cambiar el tama\u00f1o de la fuente.   <ul> <li>Ejemplo: Puedes aumentar el tama\u00f1o de la fuente a 14px para que sea m\u00e1s c\u00f3modo trabajar en pantallas peque\u00f1as.   </li> </ul> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#213-atajos-de-teclado-personalizados","title":"2.1.3. Atajos de teclado personalizados","text":"<ol> <li>Si hay combinaciones de teclas que usas frecuentemente, puedes crear atajos de teclado personalizados.   </li> <li>Ve a <code>Archivo &gt; Preferencias &gt; Atajos de teclado</code> o usa <code>Ctrl + K + S</code>.   </li> <li>Busca la acci\u00f3n que deseas personalizar y asigna una nueva combinaci\u00f3n de teclas.   <ul> <li>Ejemplo: Puedes configurar el atajo <code>Ctrl + Alt + F</code> para formatear autom\u00e1ticamente el c\u00f3digo de acuerdo a tus reglas.   </li> </ul> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#214-panel-de-extensiones","title":"2.1.4. Panel de extensiones","text":"<ol> <li>Si trabajas en diferentes tipos de proyectos, puedes instalar extensiones espec\u00edficas y activar solo las necesarias.   <ul> <li>Ejemplo: Si est\u00e1s trabajando en un proyecto con Python, puedes instalar la extensi\u00f3n de Python y desactivar otras extensiones como las de HTML o CSS para mantener el IDE ligero y optimizado.   </li> </ul> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#22-personalizacion-de-jetbrains-intellij-idea-pycharm-fleet","title":"2.2. Personalizaci\u00f3n de JetBrains (IntelliJ IDEA, PyCharm, Fleet)","text":"<p>Los entornos de JetBrains tambi\u00e9n ofrecen muchas opciones para personalizar tu espacio de trabajo.   </p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#221-cambiar-el-tema-de-jetbrains","title":"2.2.1. Cambiar el tema de JetBrains","text":"<ol> <li>En la barra superior, selecciona <code>File &gt; Settings</code> (o <code>Preferences</code> en Mac).  </li> <li>Navega hasta <code>Appearance &amp; Behavior &gt; Appearance</code> y selecciona un nuevo tema.   <ul> <li>Ejemplo: Si prefieres un tema oscuro, puedes seleccionar Darcula, que es un tema popular entre los programadores por ser c\u00f3modo a la vista en entornos con poca luz.   </li> </ul> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#222-ajustar-los-atajos-de-teclado","title":"2.2.2. Ajustar los atajos de teclado","text":"<p>JetBrains tiene una serie de esquemas de teclas que puedes elegir, o puedes crear el tuyo propio.   </p> <ol> <li>Ve a <code>File &gt; Settings &gt; Keymap</code>.  </li> <li>Aqu\u00ed puedes seleccionar un esquema predefinido, como el esquema de Visual Studio si ya est\u00e1s acostumbrado a \u00e9l.   </li> <li>Tambi\u00e9n puedes hacer clic derecho sobre cualquier acci\u00f3n y asignar tu propio atajo.  <ul> <li>Ejemplo: Si prefieres ejecutar el c\u00f3digo con <code>Ctrl + R</code> en lugar del atajo predeterminado, puedes reasignar esa acci\u00f3n a ese comando.   </li> </ul> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#223-personalizacion-del-editor-de-codigo","title":"2.2.3. Personalizaci\u00f3n del editor de c\u00f3digo","text":"<ol> <li>En <code>File &gt; Settings &gt; Editor &gt; General &gt; Code Folding</code>, puedes activar o desactivar el plegado de c\u00f3digo para secciones que no necesitas ver constantemente.   </li> <li>Tambi\u00e9n puedes activar el ajuste de l\u00ednea autom\u00e1tico para que el c\u00f3digo se vea completo en la pantalla sin necesidad de desplazarte horizontalmente.   </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#3-automatizacion-del-entorno","title":"3. Automatizaci\u00f3n del entorno","text":"<p>La automatizaci\u00f3n te permite reducir tareas repetitivas, como ejecutar pruebas, compilar o ejecutar scripts, haciendo que el IDE haga esto por ti autom\u00e1ticamente en momentos clave.   </p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#31-automatizacion-en-visual-studio-code","title":"3.1. Automatizaci\u00f3n en Visual Studio Code","text":"<p>Visual Studio Code soporta la ejecuci\u00f3n de tareas automatizadas a trav\u00e9s de su sistema de \"tasks\". Esto es especialmente \u00fatil para automatizar procesos como la compilaci\u00f3n o ejecuci\u00f3n de pruebas.   </p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#311-crear-una-tarea-de-ejecucion-automatica","title":"3.1.1. Crear una tarea de ejecuci\u00f3n autom\u00e1tica","text":"<ol> <li>Dir\u00edgete a <code>Terminal &gt; Configurar tarea</code>.   </li> <li>Selecciona el tipo de tarea que quieres automatizar, por ejemplo, compilaci\u00f3n. Visual Studio Code generar\u00e1 un archivo <code>tasks.json</code>.   </li> <li> <p>Configura el script de compilaci\u00f3n que deseas automatizar. Aqu\u00ed puedes definir que, al guardar el archivo (<code>Ctrl + S</code>), se ejecute autom\u00e1ticamente la compilaci\u00f3n.   </p> <ul> <li>Ejemplo: Si est\u00e1s trabajando en un proyecto en python, puedes configurar una tarea  para que se ejecute tu c\u00f3digo autom\u00e1ticamente despu\u00e9s de cada cambio.</li> </ul> <p><pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Run Python\",\n            \"type\": \"shell\",\n            \"command\": \"python3\",\n            \"args\": [\n                \"${file}\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            }\n        }\n    ]\n}\n</code></pre> 4. Ve a Preferencias &gt; Teclado y busca el comando Run Task. Asigna un atajo de teclado, por ejemplo <code>Ctrl + S</code>, para que cuando guardes el archivo, tambi\u00e9n ejecute la tarea.</p> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#312-automatizacion-de-pruebas","title":"3.1.2. Automatizaci\u00f3n de pruebas","text":"<ol> <li>Si usas frameworks como Pytest para pruebas en Python, puedes configurar Visual Studio Code para ejecutar las pruebas autom\u00e1ticamente cada vez que guardes un archivo.   </li> <li>Para ello, instala la extensi\u00f3n de pytest y configura el archivo <code>tasks.json</code> para que ejecute las pruebas cada vez que haya cambios.   </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#32-automatizacion-en-jetbrains-intellij-idea-pycharm","title":"3.2. Automatizaci\u00f3n en JetBrains (IntelliJ IDEA, PyCharm)","text":"<p>JetBrains incluye herramientas que facilitan la automatizaci\u00f3n de tareas comunes, como la compilaci\u00f3n, la ejecuci\u00f3n de pruebas y la integraci\u00f3n continua.   </p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#321-ejecucion-automatica-de-pruebas","title":"3.2.1. Ejecuci\u00f3n autom\u00e1tica de pruebas","text":"<ol> <li>En JetBrains, puedes configurar la ejecuci\u00f3n autom\u00e1tica de pruebas unitarias cada vez que hagas un cambio en el c\u00f3digo.   </li> <li>Para ello, instala el plugin Continuous Testing en <code>File &gt; Settings &gt; Plugins</code>.   </li> <li>Activa la opci\u00f3n para que cada vez que guardes el archivo, las pruebas se ejecuten autom\u00e1ticamente.   <ul> <li>Ejemplo: Si est\u00e1s desarrollando una aplicaci\u00f3n en Java con JUnit, cada vez que guardes un archivo de prueba, el IDE ejecutar\u00e1 autom\u00e1ticamente las pruebas y mostrar\u00e1 los resultados en el panel de salida.   </li> </ul> </li> </ol> <p>Otra opci\u00f3n es configurar un automatizaci\u00f3n de test en el IDE despu\u00e9s de realizar cualquier cambio, a trav\u00e9s del plugin Kotest. En la siguiente imagen se muestra un ejemplo de c\u00f3mo configurar un test en un proyecto Kotlin.</p> <p> </p> Automatizaci\u00f3n test","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#322-configuracion-de-tareas-previas-a-la-ejecucion","title":"3.2.2. Configuraci\u00f3n de tareas previas a la ejecuci\u00f3n","text":"<ol> <li>Si necesitas realizar una serie de tareas previas a la ejecuci\u00f3n de tu proyecto, como limpiar archivos temporales o reiniciar un servidor, JetBrains te permite configurar Before Launch Tasks.   </li> <li>Ve a <code>Run &gt; Edit Configurations</code> y, en el apartado Before launch, puedes a\u00f1adir las tareas que deseas que se ejecuten antes de ejecutar el proyecto.   <ul> <li>Ejemplo: Puedes configurar el IDE para que antes de cada ejecuci\u00f3n en Python, se limpie la cach\u00e9 de los archivos temporales.   </li> </ul> </li> </ol>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#4-enlaces-y-recursos-de-interes","title":"4. Enlaces y recursos de inter\u00e9s","text":"<p>En los siguientes enlaces encontrar\u00e1s m\u00e1s informaci\u00f3n sobre c\u00f3mo personalizar y automatizar tu entorno de desarrollo:   </p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#41-personalizar-visual-studio-code","title":"4.1. Personalizar Visual Studio Code","text":"<ul> <li>Get started with Visual Studio Code</li> </ul>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#42-personalizar-herramientas-jetbrains","title":"4.2. Personalizar herramientas Jetbrains","text":"<ul> <li>Configuring PyCharm settings</li> <li>Configuring the IDE</li> </ul>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.3.-Personalizacion/#5-conclusion","title":"5. Conclusi\u00f3n","text":"<p>La personalizaci\u00f3n y automatizaci\u00f3n del entorno de desarrollo son esenciales para maximizar la productividad y optimizar el flujo de trabajo. Tanto Visual Studio Code como los IDEs de JetBrains ofrecen un amplio conjunto de herramientas para adaptar el entorno a tus preferencias y para automatizar tareas repetitivas. Personalizar temas, atajos de teclado y automatizar procesos como la compilaci\u00f3n o ejecuci\u00f3n de pruebas son pasos clave que te permitir\u00e1n centrarte en lo que realmente importa: escribir buen c\u00f3digo. \u00a1Aprovecha estas herramientas y ajusta tu entorno de desarrollo para que trabaje a tu favor!</p>","tags":["EDES","IDE","Personalizaci\u00f3n"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/","title":"UD 2 - 2.4 Actualizaci\u00f3n de IDE's","text":"","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#23-actualizacion-de-ides","title":"2.3. Actualizaci\u00f3n de IDE's","text":"<p>La actualizaci\u00f3n de los entornos de desarrollo integrado (IDEs) es una tarea importante para mantener el software actualizado y seguro. En este punto, veremos c\u00f3mo configurar las actualizaciones autom\u00e1ticas y manuales en Visual Studio Code y los IDEs de JetBrains (IntelliJ IDEA, PyCharm, Fleet) para asegurarte de que siempre est\u00e1s utilizando la \u00faltima versi\u00f3n disponible.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Mantener tu entorno de desarrollo integrado (IDE) actualizado es fundamental para garantizar que siempre est\u00e9s utilizando las \u00faltimas herramientas, caracter\u00edsticas y correcciones de seguridad. Tanto JetBrains (con PyCharm para Python y IntelliJ IDEA para Kotlin) como Visual Studio Code ofrecen sistemas de actualizaci\u00f3n autom\u00e1ticos y manuales que permiten que el entorno se mantenga eficiente y libre de errores. En este punto aprenderemos a configurar el sistema de actualizaciones en ambos entornos.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#2-por-que-es-importante-actualizar-tu-ide","title":"2. \u00bfPor qu\u00e9 es importante actualizar tu IDE?","text":"<p>Actualizar tu IDE garantiza que est\u00e9s trabajando con la \u00faltima versi\u00f3n del software, lo que te proporciona:</p> <ul> <li>Nuevas caracter\u00edsticas: Cada actualizaci\u00f3n suele incluir nuevas funcionalidades que mejoran la productividad.    </li> <li>Correcciones de errores: Los desarrolladores del IDE solucionan errores conocidos para mejorar la estabilidad del entorno.    </li> <li>Mejoras de seguridad: Las actualizaciones corrigen vulnerabilidades que podr\u00edan comprometer la seguridad del entorno y los proyectos en los que trabajas.    </li> <li>Compatibilidad con nuevas tecnolog\u00edas: Las actualizaciones permiten que el IDE soporte nuevos lenguajes o frameworks, mejorando tu flujo de trabajo.     </li> </ul>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#3-configuracion-de-actualizaciones-en-jetbrains-pycharm-e-intellij-idea","title":"3. Configuraci\u00f3n de actualizaciones en JetBrains (PyCharm e IntelliJ IDEA)","text":"<p>En los IDEs de JetBrains, como PyCharm y IntelliJ IDEA, puedes configurar las actualizaciones de varias maneras. Estas incluyen la actualizaci\u00f3n autom\u00e1tica del propio IDE y de los plugins que tengas instalados.      </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#31-configuracion-de-actualizaciones-automaticas-del-ide","title":"3.1. Configuraci\u00f3n de actualizaciones autom\u00e1ticas del IDE","text":"<p>Aunque si has instalado la aplicaci\u00f3n externa JetBrains Toolbox, esta se encargar\u00e1 de mantener actualizados todos tus IDEs de JetBrains, tambi\u00e9n puedes configurar las actualizaciones directamente en el IDE.   </p> <p>Aunque veremos como, recomendamos revisar la documentaci\u00f3n oficial de JetBrains para obtener informaci\u00f3n actualizada sobre c\u00f3mo configurar las actualizaciones.  </p> <ol> <li>Accede a las configuraciones de actualizaci\u00f3n:  <ul> <li>Abre PyCharm o IntelliJ IDEA.  </li> <li>Dir\u00edgete a la barra superior y selecciona <code>File &gt; Settings</code> (o <code>Preferences</code> en macOS).  </li> <li>En el men\u00fa lateral, navega hasta <code>Appearance &amp; Behavior &gt; System Settings &gt; Updates</code>.  </li> </ul> </li> <li>Configuraci\u00f3n de las actualizaciones autom\u00e1ticas:  <ul> <li>Ver\u00e1s varias opciones para gestionar las actualizaciones. Marca la casilla que dice Automatically check updates for:  <ul> <li>New versions: Esto garantiza que el IDE busque autom\u00e1ticamente nuevas versiones del software.  </li> <li>Plugins: Tambi\u00e9n puedes activar la b\u00fasqueda autom\u00e1tica de actualizaciones para los plugins instalados.  </li> </ul> </li> <li>Ejemplo: Imagina que est\u00e1s trabajando con el plugin de Kotlin en IntelliJ IDEA. Al habilitar las actualizaciones autom\u00e1ticas, cada vez que haya una mejora o correcci\u00f3n en el plugin, se te notificar\u00e1 o se actualizar\u00e1 autom\u00e1ticamente seg\u00fan tu configuraci\u00f3n.  </li> </ul> </li> <li>Opciones avanzadas:  <ul> <li>Puedes elegir entre varias opciones de actualizaci\u00f3n:  <ul> <li>Release updates: Solo recibes actualizaciones estables y probadas.  </li> <li>Early access program (EAP): Si te interesa probar nuevas funcionalidades antes de que se lancen oficialmente, puedes optar por las versiones EAP, que incluyen las \u00faltimas caracter\u00edsticas, pero pueden ser menos estables.  </li> </ul> </li> </ul> </li> <li>Instalaci\u00f3n de actualizaciones:  <ul> <li>Cuando haya una actualizaci\u00f3n disponible, JetBrains mostrar\u00e1 una notificaci\u00f3n. Puedes elegir instalarla de inmediato o postergarla hasta que finalices tu trabajo.  </li> </ul> </li> </ol>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#32-actualizacion-de-plugins","title":"3.2. Actualizaci\u00f3n de plugins","text":"<ol> <li>Dir\u00edgete a <code>File &gt; Settings &gt; Plugins</code> (o <code>Preferences</code> en macOS).  </li> <li>En la pesta\u00f1a de Installed, puedes ver todos los plugins que tienes instalados. Si hay actualizaciones disponibles, ver\u00e1s un bot\u00f3n para actualizar cada plugin individualmente o todos a la vez.  <ul> <li>Ejemplo: Si tienes el plugin de pytest en PyCharm, al recibir una actualizaci\u00f3n, se te notificar\u00e1 en este apartado, y podr\u00e1s actualizarlo en segundos para obtener las \u00faltimas mejoras.  </li> </ul> </li> </ol>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#4-configuracion-de-actualizaciones-en-visual-studio-code","title":"4. Configuraci\u00f3n de actualizaciones en Visual Studio Code","text":"<p>En Visual Studio Code, las actualizaciones del editor y de las extensiones tambi\u00e9n son clave para mantener un flujo de trabajo estable y eficiente. Este IDE es conocido por su capacidad de adaptarse a m\u00faltiples lenguajes y tecnolog\u00edas a trav\u00e9s de sus extensiones.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#41-configuracion-de-actualizaciones-automaticas-del-editor","title":"4.1. Configuraci\u00f3n de actualizaciones autom\u00e1ticas del editor","text":"<p>Aunque veremos como, recomendamos revisar la documentaci\u00f3n oficial de Visual Studio Code para obtener informaci\u00f3n actualizada sobre c\u00f3mo configurar las actualizaciones.</p> <ol> <li>Accede a las configuraciones de actualizaci\u00f3n:  <ul> <li>Abre Visual Studio Code.  </li> <li>Ve a <code>Archivo &gt; Preferencias &gt; Configuraci\u00f3n</code> o utiliza el atajo <code>Ctrl + ,</code> (en Windows/Linux) o <code>Cmd + ,</code> (en macOS).  </li> <li>En la barra de b\u00fasqueda, escribe update.  </li> </ul> </li> <li>Configuraci\u00f3n de las actualizaciones autom\u00e1ticas:  <ul> <li>Localiza la opci\u00f3n Update: Mode y elige una de las siguientes configuraciones:  <ul> <li>Default: Visual Studio Code se actualizar\u00e1 autom\u00e1ticamente cuando se detecten nuevas versiones.  </li> <li>Manual: Si prefieres instalar las actualizaciones t\u00fa mismo, puedes desactivar las actualizaciones autom\u00e1ticas y hacerlo manualmente cuando lo consideres necesario.  </li> </ul> </li> </ul> </li> <li>Verificar y aplicar actualizaciones manualmente:<ul> <li>Para comprobar si hay actualizaciones manualmente, ve a <code>Ayuda &gt; Buscar actualizaciones</code>. Si hay una nueva versi\u00f3n disponible, se te dar\u00e1 la opci\u00f3n de descargarla e instalarla.  </li> <li>Ejemplo: Si quieres asegurarte de estar utilizando la \u00faltima versi\u00f3n de Visual Studio Code cuando est\u00e9s trabajando en un proyecto Python, puedes forzar la b\u00fasqueda de actualizaciones antes de comenzar una nueva fase del proyecto.  </li> </ul> </li> </ol>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#42-actualizacion-de-extensiones","title":"4.2. Actualizaci\u00f3n de extensiones","text":"<p>Visual Studio Code es famoso por su uso de extensiones para a\u00f1adir funcionalidades. A continuaci\u00f3n te mostramos c\u00f3mo mantener estas extensiones actualizadas.</p> <ol> <li>Acceder a la lista de extensiones:<ul> <li>Haz clic en el icono de Extensiones en la barra lateral izquierda o usa <code>Ctrl + Shift + X</code>.</li> <li>Aqu\u00ed ver\u00e1s todas las extensiones instaladas. Si alguna necesita actualizarse, aparecer\u00e1 un \u00edcono de actualizaci\u00f3n junto a su nombre.</li> </ul> </li> <li>Actualizar extensiones autom\u00e1ticamente:<ul> <li>Extensiones actualizadas autom\u00e1ticamente: De manera predeterminada, Visual Studio Code actualiza las extensiones de forma autom\u00e1tica. Puedes verificar o cambiar esta configuraci\u00f3n en <code>Archivo &gt; Preferencias &gt; Configuraci\u00f3n</code>, buscando la opci\u00f3n Extensions: Auto Update. Aseg\u00farate de que est\u00e9 marcada para mantener siempre las extensiones al d\u00eda.</li> </ul> </li> <li>Ejemplo pr\u00e1ctico:<ul> <li>Imagina que tienes instalada la extensi\u00f3n de Python y la de Kotlin en Visual Studio Code. Si ambas reciben actualizaciones (mejoras en el autocompletado, soporte para nuevas caracter\u00edsticas de lenguaje), el IDE actualizar\u00e1 estas extensiones autom\u00e1ticamente, y no tendr\u00e1s que preocuparte por hacerlo manualmente.</li> </ul> </li> </ol>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#5-recursos-adicionales","title":"5. Recursos adicionales","text":"<ul> <li>documentaci\u00f3n oficial sobre actualizaci\u00f3n de JetBrains</li> <li>documentaci\u00f3n oficial sobre actualizaci\u00f3n de Visual Studio Code</li> <li>Herramienta de actualizaci\u00f3n: JetBrains Toolbox</li> </ul>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.4.-ActualizacionIDEs/#5-conclusion","title":"5. Conclusi\u00f3n","text":"<p>Mantener tu entorno de desarrollo actualizado es fundamental para garantizar un flujo de trabajo eficiente, estable y seguro. Tanto en JetBrains como en Visual Studio Code, las actualizaciones autom\u00e1ticas y manuales te permiten acceder a las \u00faltimas mejoras y soluciones de problemas, asegurando que siempre trabajes con las mejores herramientas disponibles.</p> <p>Recuerda que, adem\u00e1s de las actualizaciones del IDE en s\u00ed, tambi\u00e9n es esencial mantener actualizadas las extensiones y plugins, ya que son las que te permiten a\u00f1adir funcionalidades clave para tus proyectos en Python y Kotlin. \u00a1Dedica unos minutos a configurar correctamente el sistema de actualizaci\u00f3n y disfrutar\u00e1s de un entorno optimizado para tus proyectos de desarrollo!</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/","title":"UD 2 - 2.5 Ejecutables en IDEs","text":"","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#25-ejecutables-en-ides","title":"2.5. Ejecutables en IDEs","text":"<p>La generaci\u00f3n de ejecutables es una tarea fundamental en el desarrollo de software, ya que permite distribuir aplicaciones de manera sencilla y eficiente. En este punto, veremos c\u00f3mo generar ejecutables en distintos lenguajes de programaci\u00f3n en varios entornos de desarrollo integrado (IDE)</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En esta secci\u00f3n, aprenderemos c\u00f3mo generar ejecutables a partir del c\u00f3digo fuente en diferentes lenguajes y entornos de desarrollo. Veremos c\u00f3mo utilizar IntelliJ IDEA para ejecutar un mismo programa en Kotlin y Java, y c\u00f3mo ejecutar el mismo c\u00f3digo en Python utilizando PyCharm y Visual Studio Code. Esto te permitir\u00e1 comprender c\u00f3mo generar y ejecutar programas en distintos lenguajes y en varios entornos de desarrollo.</p> <p>Este punto es totalmente pr\u00e1ctico y te permitir\u00e1 experimentar con la generaci\u00f3n de ejecutables en distintos lenguajes y entornos, lo que te ayudar\u00e1 a comprender c\u00f3mo manejar proyectos en m\u00faltiples lenguajes y entornos de desarrollo.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#2-generacion-de-ejecutables-a-partir-de-codigo-fuente-en-distintos-lenguajes-en-un-mismo-ide-ce-2e","title":"2. Generaci\u00f3n de ejecutables a partir de c\u00f3digo fuente en distintos lenguajes en un mismo IDE (CE 2.e)","text":"","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#21-descripcion-de-la-actividad","title":"2.1. Descripci\u00f3n de la actividad","text":"<p>Vamos a crear un programa sencillo en Kotlin y Java que cuenta del 10 al 0 y luego imprime \"\u00a1Despegue!\". Lo ejecutaremos dentro del mismo IDE, en este caso IntelliJ IDEA, para demostrar c\u00f3mo podemos manejar varios lenguajes en un mismo entorno.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#22-crear-y-ejecutar-el-programa-en-kotlin-en-intellij-idea","title":"2.2. Crear y ejecutar el programa en Kotlin en IntelliJ IDEA","text":"<ol> <li> <p>Crear un proyecto en Kotlin:</p> <ul> <li>Abre IntelliJ IDEA y selecciona <code>File &gt; New &gt; Project</code>.</li> <li>Elige Kotlin como lenguaje y aseg\u00farate de tener seleccionado JVM (Java Virtual Machine).</li> <li>Asigna un nombre al proyecto, por ejemplo, \"CuentaAtrasKotlin\".</li> </ul> </li> <li> <p>Escribir el c\u00f3digo en Kotlin:</p> <ul> <li>Dentro del proyecto, crea un archivo llamado <code>Main.kt</code> y a\u00f1ade el siguiente c\u00f3digo:   <pre><code>fun main() {\n    for (i in 10 downTo 0) {\n        println(i)\n    }\n    println(\"\u00a1Despegue!\")\n}\n</code></pre></li> <li>Este programa utiliza un bucle que cuenta del 10 al 0 e imprime \"\u00a1Despegue!\" al final.</li> </ul> </li> <li> <p>Ejecutar el c\u00f3digo:</p> <ul> <li>Para ejecutar el c\u00f3digo, selecciona el archivo <code>Main.kt</code>, haz clic en el bot\u00f3n Run en la parte superior o usa el atajo <code>Shift + F10</code>.</li> <li>El programa se ejecutar\u00e1 en la consola integrada de IntelliJ IDEA, mostrando la cuenta regresiva seguida de \"\u00a1Despegue!\".</li> </ul> </li> </ol> <p>Resultado esperado:    <pre><code>10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\u00a1Despegue!\n</code></pre></p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#23-crear-y-ejecutar-el-programa-en-java-en-intellij-idea","title":"2.3. Crear y ejecutar el programa en Java en IntelliJ IDEA","text":"<ol> <li> <p>Crear un proyecto en Java:  </p> <ul> <li>En IntelliJ IDEA, selecciona <code>File &gt; New &gt; Project</code>.   </li> <li>Esta vez elige Java como lenguaje y nombra el proyecto \"CuentaAtrasJava\".   </li> </ul> </li> <li> <p>Escribir el c\u00f3digo en Java:    </p> <ul> <li>Crea un archivo llamado <code>Main.java</code> en el proyecto y escribe el siguiente c\u00f3digo:   <pre><code>public class Main {\n    public static void main(String[] args) {\n        for (int i = 10; i &gt;= 0; i--) {\n            System.out.println(i);\n        }\n        System.out.println(\"\u00a1Despegue!\");\n    }\n}\n</code></pre></li> <li>Este programa hace lo mismo que el de Kotlin, pero utilizando la sintaxis de Java.   </li> </ul> </li> <li> <p>Ejecutar el c\u00f3digo:</p> <ul> <li>Selecciona el archivo <code>Main.java</code>, haz clic en Run o usa el atajo <code>Shift + F10</code>.</li> <li>El programa se ejecutar\u00e1 y mostrar\u00e1 la misma salida que el programa en Kotlin.</li> </ul> </li> </ol> <p>Resultado esperado:    <pre><code>10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\u00a1Despegue!\n</code></pre></p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#24-conclusion","title":"2.4. Conclusi\u00f3n","text":"<p>Al utilizar IntelliJ IDEA, puedes gestionar proyectos en Kotlin y Java f\u00e1cilmente en el mismo IDE. Hemos visto c\u00f3mo crear y ejecutar el mismo programa en ambos lenguajes sin necesidad de cambiar de entorno, lo que facilita el manejo de m\u00faltiples lenguajes en un solo lugar.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#3-generacion-de-ejecutables-con-diferentes-ides-a-partir-del-mismo-codigo-fuente-ce-2f","title":"3. Generaci\u00f3n de ejecutables con diferentes IDEs a partir del mismo c\u00f3digo fuente (CE 2.f)","text":"","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#31-descripcion-de-la-actividad","title":"3.1. Descripci\u00f3n de la actividad","text":"<p>Ahora vamos a escribir un programa en Python que cuenta desde 10 hasta 0 y muestra \"\u00a1Despegue!\". El mismo c\u00f3digo se ejecutar\u00e1 en dos IDEs diferentes: PyCharm y Visual Studio Code. Esto te permitir\u00e1 comparar c\u00f3mo funcionan distintos entornos con el mismo c\u00f3digo fuente.    </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#32-crear-y-ejecutar-el-programa-en-pycharm-python","title":"3.2. Crear y ejecutar el programa en PyCharm (Python)","text":"<ol> <li> <p>Crear un proyecto en PyCharm:   </p> <ul> <li>Abre PyCharm y selecciona <code>File &gt; New Project</code>.   </li> <li>Aseg\u00farate de que el proyecto est\u00e9 configurado para usar Python como lenguaje y as\u00edgnale un nombre, por ejemplo, \"CuentaAtrasPython\".   </li> </ul> </li> <li> <p>Escribir el c\u00f3digo en Python:</p> <ul> <li>Dentro del proyecto, crea un archivo llamado <code>main.py</code> y a\u00f1ade el siguiente c\u00f3digo:   <pre><code>for i in range(10, -1, -1):\n    print(i)\nprint(\"\u00a1Despegue!\")\n</code></pre></li> <li>Este c\u00f3digo utiliza un bucle <code>for</code> que cuenta de 10 a 0 y luego imprime \"\u00a1Despegue!\".</li> </ul> </li> <li> <p>Ejecutar el c\u00f3digo en PyCharm:</p> <ul> <li>Haz clic derecho sobre <code>main.py</code> y selecciona Run 'main' o usa el atajo <code>Shift + F10</code>.</li> <li>El programa se ejecutar\u00e1 en la consola integrada de PyCharm y mostrar\u00e1 la cuenta atr\u00e1s seguida de \"\u00a1Despegue!\".</li> </ul> </li> </ol> <p>Resultado esperado:    <pre><code>10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\u00a1Despegue!\n</code></pre></p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#33-crear-y-ejecutar-el-programa-en-visual-studio-code-python","title":"3.3. Crear y ejecutar el programa en Visual Studio Code (Python)","text":"<ol> <li> <p>Abrir Visual Studio Code y configurar Python:   </p> <ul> <li>Si no lo has hecho ya, instala la extensi\u00f3n de Python desde la secci\u00f3n de extensiones (<code>Ctrl + Shift + X</code>) buscando \"Python\" y haciendo clic en Instalar.    </li> <li>Abre Visual Studio Code y crea una nueva carpeta de proyecto o abre la carpeta donde est\u00e1 guardado el archivo <code>main.py</code>.   </li> </ul> </li> <li> <p>Escribir o abrir el c\u00f3digo en Python:</p> <ul> <li>Si no lo tienes a\u00fan, crea el archivo <code>main.py</code> con el mismo c\u00f3digo:  <pre><code>for i in range(10, -1, -1):\n    print(i)\nprint(\"\u00a1Despegue!\")\n</code></pre></li> </ul> </li> <li> <p>Ejecutar el c\u00f3digo en Visual Studio Code:</p> <ul> <li>Haz clic en el bot\u00f3n de ejecuci\u00f3n en la esquina superior derecha o usa el atajo <code>Ctrl + F5</code>.   </li> <li>El programa se ejecutar\u00e1 en la terminal integrada de Visual Studio Code, mostrando el mismo resultado.   </li> </ul> </li> </ol> <p>Resultado esperado:    <pre><code>10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\u00a1Despegue!\n</code></pre></p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#34-conclusion","title":"3.4. Conclusi\u00f3n","text":"<p>Hemos visto c\u00f3mo el mismo programa en Python puede ejecutarse tanto en PyCharm como en Visual Studio Code, proporcionando los mismos resultados en ambos entornos. Esto demuestra la flexibilidad de los entornos de desarrollo para ejecutar el mismo c\u00f3digo fuente, lo que permite a los desarrolladores adaptarse a las preferencias o requisitos del equipo.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.5.-Ejecutables/#4-conclusion-general","title":"4. Conclusi\u00f3n general","text":"<p>En este punto, hemos explorado la generaci\u00f3n de ejecutables o la ejecuci\u00f3n de c\u00f3digo en distintos lenguajes utilizando un mismo IDE, como IntelliJ IDEA para Kotlin y Java, y c\u00f3mo ejecutar el mismo c\u00f3digo Python en diferentes IDEs como PyCharm y Visual Studio Code. Esto te proporciona una visi\u00f3n clara de c\u00f3mo gestionar proyectos en m\u00faltiples lenguajes y entornos de desarrollo, una habilidad clave para cualquier desarrollador.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/","title":"UD 2 - 2.6 Evaluaci\u00f3n de los IDEs","text":"","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#26-evaluacion-de-los-ides","title":"2.6. Evaluaci\u00f3n de los IDEs","text":"<p>La elecci\u00f3n de un entorno de desarrollo integrado (IDE) es una decisi\u00f3n crucial para cualquier programador, ya que influye en la productividad, la calidad del c\u00f3digo y la experiencia de desarrollo. En este punto, evaluaremos los IDEs m\u00e1s populares y analizaremos sus caracter\u00edsticas, ventajas y desventajas.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Los entornos de desarrollo integrados (IDEs) son herramientas fundamentales para los desarrolladores, ya que proporcionan todo lo necesario para escribir, ejecutar, depurar y gestionar proyectos de software. Sin embargo, cada IDE tiene caracter\u00edsticas comunes que ayudan a mejorar la productividad, as\u00ed como caracter\u00edsticas espec\u00edficas que los hacen m\u00e1s adecuados para ciertos lenguajes o tareas. En este punto, vamos a comparar las caracter\u00edsticas de PyCharm, IntelliJ IDEA y Visual Studio Code, explorando sus similitudes y diferencias, especialmente en relaci\u00f3n con el desarrollo de proyectos en Python y Kotlin.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#2-caracteristicas-comunes-de-los-ides","title":"2. Caracter\u00edsticas comunes de los IDEs","text":"<p>Aunque cada IDE tiene su propio conjunto de caracter\u00edsticas especializadas, muchos comparten funcionalidades comunes que son esenciales para cualquier desarrollador, independientemente del lenguaje en el que trabaje. A continuaci\u00f3n, se describen algunas de las caracter\u00edsticas comunes que encontramos en PyCharm, IntelliJ IDEA y Visual Studio Code.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#21-editor-de-codigo-avanzado","title":"2.1. Editor de c\u00f3digo avanzado","text":"<p>Todos los IDEs incluyen un editor de c\u00f3digo que permite a los desarrolladores escribir y organizar su c\u00f3digo de forma eficiente.</p> <ul> <li>Resaltado de sintaxis: Resaltan palabras clave, variables, funciones y clases en diferentes colores para mejorar la legibilidad del c\u00f3digo.    </li> <li>Autocompletado: Sugerencias autom\u00e1ticas para completar variables, m\u00e9todos y palabras clave a medida que escribes.    </li> <li>Identaci\u00f3n autom\u00e1tica: Ayuda a mantener un c\u00f3digo limpio y legible al aplicar la indentaci\u00f3n correcta autom\u00e1ticamente.    </li> </ul> <p>Ejemplo: Tanto PyCharm como Visual Studio Code te sugerir\u00e1n autom\u00e1ticamente m\u00e9todos disponibles mientras escribes en Python, y IntelliJ IDEA har\u00e1 lo mismo para Kotlin.     </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#22-depurador-integrado","title":"2.2. Depurador integrado","text":"<p>Los depuradores permiten detener la ejecuci\u00f3n del programa en puntos espec\u00edficos (puntos de interrupci\u00f3n) para inspeccionar variables y detectar errores en tiempo de ejecuci\u00f3n.</p> <ul> <li>Puntos de interrupci\u00f3n: Puedes establecer puntos en los que se detenga la ejecuci\u00f3n del programa para observar el estado actual del mismo.    </li> <li>Seguimiento paso a paso: Puedes ejecutar el c\u00f3digo l\u00ednea por l\u00ednea para verificar el flujo de ejecuci\u00f3n.    </li> </ul> <p>Ejemplo: En PyCharm, puedes establecer un breakpoint en una l\u00ednea de c\u00f3digo en Python, y en IntelliJ IDEA, puedes hacer lo mismo en Kotlin. Ambos IDEs te permiten inspeccionar el valor de las variables en ese momento.    </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#23-control-de-versiones-integrado","title":"2.3. Control de versiones integrado","text":"<p>Todos los IDEs soportan herramientas de control de versiones como Git. Esto es esencial para trabajar en proyectos colaborativos y realizar un seguimiento de los cambios en el c\u00f3digo.</p> <ul> <li>Integraci\u00f3n con Git: Permiten clonar repositorios, realizar commits, gestionar ramas, y hacer push y pull desde la interfaz del IDE.    </li> </ul> <p>Ejemplo: Tanto en Visual Studio Code como en IntelliJ IDEA, puedes clonar un repositorio de GitHub y realizar commits directamente desde el panel de control de versiones.    </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#24-soporte-para-extensiones-o-plugins","title":"2.4. Soporte para extensiones o plugins","text":"<p>Los tres entornos permiten agregar extensiones o plugins para ampliar sus funcionalidades.</p> <ul> <li>Plugins: Agregan soporte para nuevos lenguajes, herramientas de an\u00e1lisis de c\u00f3digo, depuradores adicionales, entre otros.   </li> <li>Extensiones: Visual Studio Code se destaca por su enorme variedad de extensiones que permiten personalizar completamente el editor.    </li> </ul> <p>Ejemplo: En PyCharm puedes instalar un plugin para trabajar con bases de datos como PostgreSQL. En Visual Studio Code, puedes agregar la extensi\u00f3n de Python para tener un entorno completo de desarrollo en ese lenguaje.   </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#3-caracteristicas-especificas-de-pycharm-intellij-idea-y-visual-studio-code","title":"3. Caracter\u00edsticas espec\u00edficas de PyCharm, IntelliJ IDEA y Visual Studio Code","text":"<p>Aunque todos los IDEs comparten algunas funcionalidades, tambi\u00e9n tienen caracter\u00edsticas espec\u00edficas que los hacen \u00fanicos. Vamos a comparar los IDEs que estamos usando: PyCharm y Visual Studio Code para Python, y IntelliJ IDEA para Kotlin.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#31-pycharm-python","title":"3.1. PyCharm (Python)","text":"<p>PyCharm es un IDE especializado en Python, desarrollado por JetBrains, y est\u00e1 dise\u00f1ado para facilitar el desarrollo en este lenguaje. Algunas caracter\u00edsticas espec\u00edficas de PyCharm incluyen:</p> <ul> <li>Soporte avanzado para Python: PyCharm ofrece soporte nativo para frameworks de Python como Django y Flask, lo que facilita el desarrollo de aplicaciones web.    </li> <li>Depuraci\u00f3n avanzada de Python: Incluye herramientas espec\u00edficas para depurar c\u00f3digo Python, con soporte para ejecutar scripts directamente desde el IDE.    </li> <li>Refactorizaci\u00f3n inteligente: PyCharm permite refactorizar c\u00f3digo Python de manera autom\u00e1tica, renombrando variables y funciones a lo largo del proyecto sin necesidad de hacerlo manualmente.    </li> </ul> <p>Ejemplo: Si est\u00e1s trabajando en una aplicaci\u00f3n web con Django, PyCharm te ayudar\u00e1 a organizar el proyecto, encontrar errores, y ejecutar el servidor de pruebas desde el propio IDE.    </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#32-intellij-idea-kotlin","title":"3.2. IntelliJ IDEA (Kotlin)","text":"<p>IntelliJ IDEA tambi\u00e9n es un producto de JetBrains y es muy popular para el desarrollo de aplicaciones en Java y Kotlin. Sus caracter\u00edsticas espec\u00edficas incluyen:</p> <ul> <li>Soporte nativo para Kotlin y Java: IntelliJ IDEA es el IDE oficial para Kotlin y ofrece soporte completo para este lenguaje, incluyendo autocompletado, depuraci\u00f3n y ejecuci\u00f3n de aplicaciones Kotlin y Java.    </li> <li>Integraci\u00f3n con Gradle y Maven: Estas herramientas de construcci\u00f3n de proyectos est\u00e1n profundamente integradas, lo que permite gestionar dependencias, compilar c\u00f3digo y empaquetar aplicaciones f\u00e1cilmente.    </li> <li>Herramientas de an\u00e1lisis de c\u00f3digo: IntelliJ IDEA incluye herramientas para detectar y corregir errores comunes en el c\u00f3digo de manera autom\u00e1tica.    </li> </ul> <p>Ejemplo: Si est\u00e1s trabajando en una aplicaci\u00f3n con Kotlin, IntelliJ IDEA ofrece plantillas y herramientas integradas para desarrollar, depurar y empaquetar la aplicaci\u00f3n directamente desde el IDE.    </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#33-visual-studio-code-python","title":"3.3. Visual Studio Code (Python)","text":"<p>Visual Studio Code es un editor de c\u00f3digo ligero y altamente extensible. Aunque no es un IDE en el sentido tradicional, puede configurarse para serlo mediante extensiones.</p> <ul> <li>Soporte para m\u00faltiples lenguajes: Aunque puede usarse con muchos lenguajes, su soporte para Python es excepcional gracias a extensiones como Python y Pylint.    </li> <li>Terminal integrado: Puedes ejecutar comandos de terminal sin salir del editor, lo que es \u00fatil para gestionar entornos virtuales, instalar paquetes con <code>pip</code> o ejecutar pruebas.    </li> <li>Ligero y r\u00e1pido: A diferencia de otros IDEs m\u00e1s completos como PyCharm o IntelliJ IDEA, Visual Studio Code es m\u00e1s ligero y puede ejecutarse en m\u00e1quinas con menos recursos.    </li> </ul> <p>Ejemplo: Si est\u00e1s desarrollando un script en Python y no necesitas un IDE completo como PyCharm, puedes utilizar Visual Studio Code con la extensi\u00f3n de Python para escribir, depurar y ejecutar tu c\u00f3digo de forma eficiente.    </p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#4-comparacion-de-rendimiento-y-caracteristicas","title":"4. Comparaci\u00f3n de rendimiento y caracter\u00edsticas","text":"<p>A continuaci\u00f3n, realizamos una breve comparaci\u00f3n de las principales caracter\u00edsticas y rendimiento de los tres entornos:</p> Caracter\u00edstica PyCharm IntelliJ IDEA Visual Studio Code Soporte para Python Excelente, con herramientas nativas Soporte a trav\u00e9s de plugins Muy bueno con extensiones Soporte para Kotlin Limitado, a trav\u00e9s de plugins Excelente (soporte nativo) B\u00e1sico, mediante extensiones Velocidad de carga Lento en proyectos grandes Similar a PyCharm R\u00e1pido y ligero Soporte para plugins Extenso, especializado en Python Extenso, especializado en Java/Kotlin Enorme cat\u00e1logo de extensiones Depurador Muy completo para Python Muy completo para Kotlin B\u00e1sico pero funcional Facilidad de uso F\u00e1cil para proyectos Python Excelente para Kotlin/Java Flexible para muchos lenguajes","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u02/teoria/EDES-U2.6.-Evaluacion/#5-conclusion","title":"5. Conclusi\u00f3n","text":"<p>Cada entorno de desarrollo tiene sus ventajas y desventajas seg\u00fan el lenguaje y el tipo de proyecto. PyCharm es ideal para desarrolladores que trabajan principalmente con Python, gracias a sus herramientas espec\u00edficas para este lenguaje. IntelliJ IDEA es una opci\u00f3n poderosa para quienes desarrollan en Kotlin o Java, ofreciendo un entorno robusto y completo para aplicaciones empresariales o m\u00f3viles. Visual Studio Code, por otro lado, es una excelente opci\u00f3n ligera y flexible para proyectos en Python y otros lenguajes, con una rica variedad de extensiones que permiten adaptarlo a las necesidades del desarrollador.</p> <p>Seleccionar el IDE correcto depender\u00e1 de tus necesidades, el lenguaje de programaci\u00f3n con el que trabajes, y el tipo de proyecto en el que est\u00e9s involucrado.</p>","tags":["EDES","IDE","Actualizacion"]},{"location":"section3/u03/","title":"UD 3 - Dise\u00f1o y Realizaci\u00f3n de Pruebas","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["EDES","testing","Quality Assurance"]},{"location":"section3/u03/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["EDES","testing","Quality Assurance"]},{"location":"section3/u03/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 3. Verifica el funcionamiento de programas dise\u00f1ando y realizando pruebas.</p>","tags":["EDES","testing","Quality Assurance"]},{"location":"section3/u03/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han identificado los diferentes tipos de pruebas.</li> <li>b) Se han definido casos de prueba.</li> <li>c) Se han identificado las herramientas de depuraci\u00f3n y prueba de aplicaciones ofrecidas por el entorno de desarrollo.</li> <li>d) Se han utilizado herramientas de depuraci\u00f3n para definir puntos de ruptura y seguimiento.</li> <li>e) Se han utilizado las herramientas de depuraci\u00f3n para examinar y modificar el comportamiento de un programa en tiempo de ejecuci\u00f3n.</li> <li>f) Se ha documentado el plan de pruebas.</li> <li>g) Se han efectuado pruebas unitarias de clases y funciones.</li> <li>h) Se han efectuado pruebas de integraci\u00f3n, de sistema y de aceptaci\u00f3n.</li> <li>i) Se han implementado pruebas autom\u00e1ticas.</li> <li>j) Se han documentado las incidencias detectadas.</li> <li>k) Se han aplicado normas de calidad a los procedimientos de desarrollo de software.</li> <li>l) Se han realizado medidas de calidad sobre el software desarrollado.</li> </ul>","tags":["EDES","testing","Quality Assurance"]},{"location":"section3/u03/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad teniendo en cuenta la normativa del curso</p> <p>La unidad pertenece al bloque 2 Pruebas y Calidad.</p> <ul> <li>UD3: Dise\u00f1o y Realizaci\u00f3n de Pruebas</li> </ul> <p>En la unidad 3, veremos:</p> <ul> <li>Tipos de pruebas, funcionales, estructurales, regresi\u00f3n.</li> <li>Procedimientos y casos de prueba.</li> <li>Pruebas de C\u00f3digo, cubrimiento, valores l\u00edmite, clases, de equivalencia.</li> <li>Herramientas de depuraci\u00f3n de c\u00f3digo.</li> <li>Planificaci\u00f3n de Pruebas. \u2022 Pruebas unitarias; herramientas. \u2022 Pruebas de integraci\u00f3n. \u2022 Pruebas del sistema. \u2022 Pruebas de aceptaci\u00f3n. \u2022 Automatizaci\u00f3n de pruebas.</li> <li>Calidad del software. \u2022 Normas y certificaciones. \u2022 Medidas de calidad del software.</li> </ul>","tags":["EDES","testing","Quality Assurance"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/","title":"UD 3 - P1: Git/Github b\u00e1sico","text":"","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#relacion-311-repositorios-local-y-remoto-directorio-de-trabajo","title":"Relaci\u00f3n 3.1.1: Repositorios local y remoto, directorio de trabajo...","text":"","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#objetivos","title":"Objetivos","text":"<ul> <li>Crear repositorios en Github</li> <li>Practicar con repositorios locales y remotos</li> <li>Crear commits en un repositorio</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica crearemos nuestro primer repositorio de Github. Para ello, primero habr\u00e1 que crear una cuenta en Github. Crearemos un repositorio de nombre ID_XXXX_my_calculator (mas info abajo, leela antes de crear el respositorio) en dicha cuenta, en el que alojaremos un peque\u00f1o desarrollo de software consistente en una calculadora web. </p> <p>Para comenzar este desarrollo, iniciamos un repositorio de git local. En la rama main se desarrollar\u00e1 en dos commits una calculadora con 2 botones. En el primer commit  se a\u00f1ade la calculadora con el bot\u00f3n x^3, adem\u00e1s de un fichero README.md con un breve texto descriptivo. En el segundo se a\u00f1ade el bot\u00f3n x^4 a la calculadora. </p> <p>Para terminar se sube la rama main del repositorio local al repositorio remoto en Github que hemos creado al principio.</p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#tareas","title":"Tareas","text":"","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-1-creacion-de-repositorio-remoto","title":"Paso 1: Creaci\u00f3n de repositorio remoto","text":"<p>El primer paso a seguir es crear una cuenta en Github, si no se tiene. A continuaci\u00f3n, creamos un nuevo repositorio p\u00fablico vac\u00edo con el nombre \"my_calculator\".</p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-2-creacion-de-repositorio-local","title":"Paso 2: Creaci\u00f3n de repositorio local","text":"<p>En un terminal de nuestro ordenador iniciamos un repositorio local de git. Si se tiene el sistema operativo Windows, se recomienda emplear Git Bash como terminal. <pre><code>$ git init my_calculator\n$ cd my_calculator\n</code></pre> y le asignamos el repositorio remoto que acabamos de crear <pre><code>$ git remote add origin git@github.com:&lt;mi usuario de github&gt;/my_calculator.git\n</code></pre></p> <p>Por ejemplo, si tu usuario es <code>pepe</code>, el comando ser\u00eda: <pre><code>$ git remote add origin git@github.com:pepe/my_calculator.git\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-3-anadir-ficheros-al-repositorio","title":"Paso 3: A\u00f1adir ficheros al repositorio","text":"<p>A\u00f1adir al directorio de trabajo un fichero con el nombre \"index.html\". Este fichero contendr\u00e1 una calculadora web con un bot\u00f3n para calcular el cubo del n\u00famero introducido: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> En la etiqueta h1 debes modificar el texto para incluir tu nombre y apellidos</p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-4-registrar-cambios","title":"Paso 4: Registrar cambios","text":"<p>A continuaci\u00f3n, hay que registrar los ficheros en el \u00edndice y crear el primer commit en la rama main. Se recuerda que antes de crear un commit hay que probar siempre que el programa que se va a guardar funciona correctamente (en este caso, abri\u00e9ndolo en el navegador web y probando que funciona la calculadora).</p> <pre><code>$ git add index.html # A\u00f1adir el fichero creado\n$ git commit -m \"x^3 button\" # Congelar los cambios en un commit\n$ git log --oneline # Ver la lista de commits\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-5-crear-un-segundo-commit","title":"Paso 5: Crear un segundo commit","text":"<p>Debe crear un segundo commit en la rama en la que est\u00e1 trabajando (main).  El commit debe a\u00f1adir a la calculadora (fichero index.html) un segundo bot\u00f3n (elemento HTML <code>&lt;button ..&gt;</code>) que eleve un n\u00famero a la cuarta potencia (x^4) invocando una funci\u00f3n (power_4 ()) que calcula x^4 al hacer click en \u00e9l.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n            &lt;button onclick=\"power_4()\"&gt; x^4&lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n            function power_4() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 4);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y despu\u00e9s de probar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^4 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-6-subir-el-repositorio-a-github","title":"Paso 6: Subir el repositorio a Github","text":"<p>Para finalizar, hay que subir el repositorio local al repositorio remoto creado en Github inicialmente.</p> <pre><code>$ git push origin main\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL del repositorio a la tarea. </li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li>El nombre del repositorio sera: ID_XXXX_my_calculator donde </li> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> <li>Asegurate que funciona y: </li> <li>20%:  Existe el repositorio ID_XXXX_my_calculator</li> <li>40%:  El primer commit de la rama main es \u201cx^3 button\u201d y contiene lo pedido</li> <li>40%:  El segundo commit de la rama main es \u201cx^4 button\u201d y contiene lo pedido</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/","title":"UD 3 - 3.1 Pruebas","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#pruebas","title":"Pruebas","text":"<p>Se pretente estudiar algunas t\u00e9cnicas de verificaci\u00f3n y pruebas de programas, se comenzar\u00e1 por los principios b\u00e1sicos, ciclo de vida y niveles y tipos de pruebas, posteriormente profundizaremos en algunas t\u00e9cnicas de prueba m\u00e1s usadas para posteriormente mencionar algunas de las herramientas usadas para las pruebas.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Las pruebas de software son el proceso de evaluaci\u00f3n de un sistema o aplicaci\u00f3n para determinar si cumple con los requisitos especificados y funciona correctamente.El objetivo principal de las pruebas de software es:</p> <ul> <li>garantizar la calidad del software</li> <li>minimizar el riesgo de errores en el producto final.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#11-importancia-de-las-pruebas-de-software","title":"1.1 Importancia de las pruebas de software","text":"<p>Las pruebas de software son una parte crucial del proceso de desarrollo de software, ya que ayudan a identificar problemas y errores en una etapa temprana. Esto permite a los desarrolladores corregir los errores antes de que el software se lance al mercado, lo que puede ahorrar tiempo, costos y reducir la frustraci\u00f3n del usuario final.</p> <p>Las pruebas de software son importantes porque permiten detectar errores y problemas que pueden tener un impacto significativo en la funcionalidad del software. Estos errores pueden incluir:</p> <ul> <li>Fallos de seguridad.</li> <li>Problemas de rendimiento.</li> <li>Problemas de usabilidad.</li> <li>Errores de l\u00f3gica.</li> <li>Otros errores que pueden afectar la calidad del software y la satisfacci\u00f3n del usuario final.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#12-beneficios-de-realizar-pruebas-de-software","title":"1.2 Beneficios de realizar pruebas de software","text":"<p>Los beneficios de realizar pruebas de software incluyen:</p> <ul> <li>Identificaci\u00f3n temprana de errores y problemas en el software.</li> <li>Mejora de la calidad del software y la satisfacci\u00f3n del usuario.</li> <li>Reducci\u00f3n de costos y tiempos de correcci\u00f3n de errores.</li> <li>Reducci\u00f3n del riesgo de errores en el software en producci\u00f3n.</li> <li>Mejora de la confianza en el software y la marca de la empresa.</li> </ul> <p>En conclusi\u00f3n, las pruebas de software son una parte esencial del proceso de desarrollo de software que ayudan a garantizar la calidad del producto final y a reducir el riesgo de errores en producci\u00f3n.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#2-verificacion-y-prueba-de-programas","title":"2. Verificaci\u00f3n y prueba de programas","text":"<p>La ISTQB (International Software Testing Qualifications Board), una organizaci\u00f3n especializada en el campo de las pruebas y la industria del software, define la verificaci\u00f3n y pruebas de programas como:</p> <p>Proceso que consiste en todas las actividades del ciclo de vida del software, tanto est\u00e1ticas como din\u00e1micas, concernientes con la planificaci\u00f3n, preparaci\u00f3n y evaluaci\u00f3n de productos software y los trabajos relacionados para determinar que \u00e9stos satisfacen los requisitos especificados, para demostrar que se ajustan al prop\u00f3sito y para detectar defectos.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#21-principios-basicos","title":"2.1 Principios b\u00e1sicos","text":"<p>Los principios b\u00e1sicos que rigen el proceso de verificaci\u00f3n y prueba de los programas son los siguientes:</p> <ul> <li>Las pruebas demuestran la presencia de defectos no la ausencia de ellos.</li> <li>Las pruebas exhaustivas no existen (salvo en casos triviales).</li> <li>Las pruebas tempranas ayudan a reducir costes.</li> <li>Agrupaci\u00f3n de defectos: Normalmente, la mayor parte de los defectos detectados se concentran en un n\u00famero reducido de m\u00f3dulos.</li> <li>Paradoja del pesticida (de Bruce Beizer): La eficacia en la detecci\u00f3n de errores de las mismas pruebas disminuye con el paso del tiempo.</li> <li>Las pruebas dependen del contexto: As\u00ed por ejemplo, la forma de probar un software cr\u00edtico de una central nuclear es diferente a  la p\u00e1gina web de una fruter\u00eda.</li> <li>La falacia de la ausencia de errores: La detecci\u00f3n y correcci\u00f3n de defectos no servir\u00e1 de nada si el sistema no es usable y no cumple con las expectativas de los usuarios.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#22-el-ciclo-de-vida","title":"2.2 El ciclo de vida","text":"<p>El ciclo de vida en el proceso de pruebas consta de las siguientes actividades principales:</p> <p></p> <ol> <li>Planificaci\u00f3n y control: Se establecen los objetivos y el plan de pruebas y se controla el avance con respecto a lo planificado.</li> <li>An\u00e1lisis y dise\u00f1o: los objetivos se transforman en casos de prueba tangibles</li> <li>Implementaci\u00f3n y ejecuci\u00f3n: Se configuran, desarrollan y ejecutan las pruebas.</li> <li>Evaluaci\u00f3n de los criterios de salida: En este punto se eval\u00faa los resultados de las pruebas respecto a los objetivos definidos y se decide sobre reproceso.</li> <li>Actividades de cierre de pruebas: Aqu\u00ed se realizan varias tareas finales, tales como analizar lecciones aprendidas, documentar la aceptaci\u00f3n del sistema, etc.</li> </ol>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#23-niveles","title":"2.3 Niveles","text":"<p>Seg\u00fan el ISTQB, el proceso de prueba se puede ejecutar en los siguientes niveles:</p> <ul> <li>Pruebas unitarias: Realizadas por el equipo de desarrollo, tienen como objeto comprobar el funcionamiento de un \u00fanico componente.</li> <li>Pruebas de integraci\u00f3n: Realizadas por el equipo de desarrollo, su objetivo principal es comprobar la interacci\u00f3n de diferentes partes de un sistema, validando la comunicaci\u00f3n entre sus interfaces.</li> <li>Pruebas de sistema: Realizadas por el equipo de pruebas, buscan probar el sistema como un todo y si los componentes de un sistema son compatibles e  interact\u00faan correctamente.</li> <li>Pruebas de aceptaci\u00f3n de usuario: Realizadas por el usuario final, el objetivo de estas pruebas es validar la disposici\u00f3n de un sistema para su despliegue y uso.</li> </ul> <p>Los niveles de las pruebas est\u00e1n estrechamente relacionados con las fases del ciclo de desarrollo del software, as\u00ed en el modelo o m\u00e9todo en V se establece dicha relaci\u00f3n de forma expl\u00edcita:</p> <p></p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#3-tecnicas-de-verificacion-y-prueba-de-programas","title":"3. T\u00e9cnicas de verificaci\u00f3n y prueba de programas","text":"<p>Las t\u00e9cnicas pueden ser de dos tipos dependiendo de si el c\u00f3digo de la aplicaci\u00f3n es ejecutado o no.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#31-tecnicas-dinamicas","title":"3.1 T\u00e9cnicas din\u00e1micas","text":"<p>Las pruebas din\u00e1micas se clasifican, a su vez, en t\u00e9cnicas de pruebas de caja negra, en las que se desconoce el c\u00f3digo fuente del componente y de caja blanca, en donde s\u00ed se conoce:</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#311-pruebas-de-caja-negra","title":"3.1.1 Pruebas de caja negra","text":"<p>En las que los casos se dise\u00f1an considerando las entradas y salidas sin conocer la estructura interna. Las pruebas funcionales y no funcionales y de regresi\u00f3n suelen utilizar esta t\u00e9cnica.</p> <ul> <li>Partici\u00f3n equivalente: La idea es dividir los valores v\u00e1lidos y no v\u00e1lidos para entradas y salidas en un n\u00famero reducido de particiones de forma que, el comportamiento del software sea el mismo para cualquier valor contenido en una partici\u00f3n particular. As\u00ed se reduce el n\u00famero de casos que hay que probar. Por ejemplo, para las notas de un alumno tendr\u00edamos 3 clases de equivalencia (particionando los n\u00famero enteros)</li> </ul> Clases Valores inferiores a los v\u00e1lidos Valores v\u00e1lidos Valores superiores a los v\u00e1lidos V. representativos -1 1,10 11 <ul> <li>An\u00e1lisis de valores l\u00edmites: Los casos de prueba que exploran las condiciones l\u00edmites de un programa producen buenos resultados. Para el ejemplo anterior, los valores l\u00edmites ser\u00edan (-1,0, y 10,11).</li> <li>Pruebas de transici\u00f3n de estado: En este caso se considera el sistema como una m\u00e1quina de estados, y se dise\u00f1an pruebas para cubrir secuencias t\u00edpicas de estados, o cubrir todos los estados, transiciones o probar transiciones inv\u00e1lidas.**    **</li> <li>Pruebas de caso de uso: Consisten en ejecutar escenarios que describen el uso que los usuarios van a darle al software. Son de gran utilidad para dise\u00f1ar las pruebas de aceptaci\u00f3n con la participaci\u00f3n del cliente.</li> <li>Pruebas seg\u00fan la experiencia: Consisten en la generaci\u00f3n de casos de prueba a partir de la intuici\u00f3n y la experiencia.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#312-pruebas-de-caja-blanca","title":"3.1.2 Pruebas de caja blanca","text":"<p>Permiten examinar la estructura interna de un sistema, se centran en los detalles procedimentales, como las pruebas de software estructurales:</p> <ul> <li>Pruebas de camino b\u00e1sico: Consiste en hacer uso del grafo de flujo del c\u00f3digo (nodos: bloques de c\u00f3digo, y aristas: flujo de ejecuci\u00f3n de esos bloques) y complejidad ciclom\u00e1tica que nos indica el n\u00famero  de caminos independientes de ejecuci\u00f3n y dise\u00f1ar casos de prueba para verificar que todas las instrucciones del programa se ejecutan por lo menos una vez y los resultados son los esperados.</li> <li>Pruebas de coberturas de sentencias: La cobertura nos indica el porcentaje de sentencias en el c\u00f3digo cubierto por un conjunto de pruebas (\u201ctest suite\u201d)</li> </ul> <p>Con esta t\u00e9cnica se pretende dise\u00f1ar casos de prueba que aumenten la  cobertura.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#32-tecnicas-estaticas","title":"3.2 T\u00e9cnicas est\u00e1ticas","text":"<p>Al contrario que las pruebas din\u00e1micas, que exigen la ejecuci\u00f3n de software, las t\u00e9cnicas de pruebas est\u00e1ticas se basan en el examen manual (revisiones) y en el an\u00e1lisis automatizado (an\u00e1lisis est\u00e1tico) del c\u00f3digo sin ejecutar el c\u00f3digo. Ejemplo de este tipo de pruebas son:</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#321-revision-de-codigo","title":"3.2.1 Revisi\u00f3n de C\u00f3digo","text":"<ul> <li>Descripci\u00f3n: Involucra la inspecci\u00f3n manual del c\u00f3digo fuente por parte de otros desarrolladores para identificar errores, problemas de estilo, violaciones de las mejores pr\u00e1cticas y posibles mejoras.</li> <li>Ejemplo: Un equipo de desarrollo realiza una reuni\u00f3n de revisi\u00f3n de c\u00f3digo donde cada miembro examina y comenta el c\u00f3digo de otros.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#322-analisis-estatico-automatizado","title":"3.2.2 An\u00e1lisis Est\u00e1tico Automatizado:","text":"<ul> <li>Descripci\u00f3n: Utiliza herramientas de software para analizar autom\u00e1ticamente el c\u00f3digo fuente o los artefactos de dise\u00f1o para encontrar defectos.</li> <li>Ejemplo: Herramientas como SonarQube o Lint que se ejecutan en el c\u00f3digo fuente para identificar problemas como fugas de memoria, errores de concurrencia, etc.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#323-inspecciones","title":"3.2.3 Inspecciones:","text":"<ul> <li>Descripci\u00f3n: Son m\u00e1s formales que las revisiones de c\u00f3digo e incluyen una preparaci\u00f3n y revisi\u00f3n exhaustiva del c\u00f3digo por parte de un equipo, a menudo con roles asignados (moderador, autor, revisor, etc.).</li> <li>Ejemplo: Un equipo realiza una inspecci\u00f3n planificada y estructurada del c\u00f3digo con un moderador guiando la discusi\u00f3n.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#324-caminatas-de-codigo-code-walkthroughs","title":"3.2.4 Caminatas de C\u00f3digo (Code Walkthroughs):","text":"<ul> <li>Descripci\u00f3n: Proceso en el cual el autor del c\u00f3digo gu\u00eda a un grupo a trav\u00e9s de su c\u00f3digo para explicar su l\u00f3gica y decisiones de dise\u00f1o, buscando retroalimentaci\u00f3n y detecci\u00f3n de errores.</li> <li>Ejemplo: Un desarrollador presenta su c\u00f3digo l\u00ednea por l\u00ednea a colegas, explicando el razonamiento detr\u00e1s de cada secci\u00f3n.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#325-auditorias","title":"3.2.5 Auditor\u00edas:","text":"<ul> <li>Descripci\u00f3n: Revisi\u00f3n formal del c\u00f3digo y otros elementos relacionados (documentaci\u00f3n, est\u00e1ndares de codificaci\u00f3n, etc.) para asegurarse de que cumplen con los est\u00e1ndares y regulaciones especificados.</li> <li>Ejemplo: Un auditor externo revisa el c\u00f3digo fuente y la documentaci\u00f3n para asegurarse de que cumple con las normas de seguridad o calidad espec\u00edficas de la industria.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#326-analisis-de-documentacion-y-requisitos","title":"3.2.6 An\u00e1lisis de Documentaci\u00f3n y Requisitos:","text":"<ul> <li>Descripci\u00f3n: Revisi\u00f3n de los requisitos y documentaci\u00f3n del proyecto (especificaciones, dise\u00f1os, manuales de usuario) para detectar inconsistencias, omisiones y errores.</li> <li>Ejemplo: Revisar la documentaci\u00f3n de los requisitos para asegurarse de que sean completos, claros, coherentes y testables.</li> </ul> <p>Estas pr\u00e1cticas son complementarias a las pruebas din\u00e1micas (que requieren la ejecuci\u00f3n del c\u00f3digo) y ayudan a mejorar la calidad del software desde las etapas iniciales de su desarrollo. Las pruebas est\u00e1ticas son efectivas para mejorar la claridad y la mantenibilidad del c\u00f3digo y para asegurar que el software cumpla con los est\u00e1ndares y regulaciones pertinentes.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#4-tipos-de-pruebas-de-software","title":"4. Tipos de pruebas de software","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#41-pruebas-unitarias","title":"4.1. Pruebas unitarias","text":"<p>Las pruebas unitarias son un tipo de prueba que se enfoca en evaluar el funcionamiento individual de cada unidad de c\u00f3digo del software, como funciones o m\u00e9todos. Las pruebas unitarias se realizan en un ambiente aislado del resto del software para evaluar el comportamiento de una unidad de c\u00f3digo espec\u00edfica y detectar errores en su funcionamiento. EJEMPLO: En una aplicaci\u00f3n de gesti\u00f3n de tareas, se realiza una prueba unitaria en el m\u00f3dulo de creaci\u00f3n de tareas para verificar que se crean correctamente con la informaci\u00f3n proporcionada y que se pueden guardar en la base de datos. Se verifica que la creaci\u00f3n de tareas genera una respuesta de \u00e9xito y que la tarea se encuentra en la base de datos.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#42-pruebas-de-integracion","title":"4.2 Pruebas de integraci\u00f3n","text":"<p>Las pruebas de integraci\u00f3n son un tipo de prueba que se enfoa en evaluar c\u00f3mo las diferentes unidades de c\u00f3digo se integran y trabajan juntas como un todo. Este tipo de prueba se suele realizar despu\u00e9s de las pruebas unitarias para detectar problemas en la interacci\u00f3n entre las diferentes unidades de c\u00f3digo. EJEMPLO: En una aplicaci\u00f3n de e-commerce, se realiza una prueba de integraci\u00f3n para verificar que el m\u00f3dulo de pago interact\u00faa correctamente con el m\u00f3dulo de compras. Se verifica que los datos de pago se env\u00edan correctamente a la pasarela de pago y que se actualiza el estado del pedido en la base de datos.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#43-pruebas-de-sistema","title":"4.3 Pruebas de sistema","text":"<p>Las pruebas de sistema son un tipo de prueba que se enfoca en evaluar el funcionamiento del software como un sistema completo. Este tipo de prueba se realiza despu\u00e9s de las pruebas de integraci\u00f3n para evaluar la funcionalidad del software en un ambiente m\u00e1s realista.  EJEMPLO: En una aplicaci\u00f3n de chat en tiempo real, se realiza una prueba de sistema para verificar que el servicio de chat funciona correctamente con varios usuarios conectados al mismo tiempo. Se verifica que los mensajes se env\u00edan y reciben correctamente, y que se mantienen las conexiones entre los usuarios.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#44-pruebas-de-aceptacion","title":"4.4 Pruebas de aceptaci\u00f3n","text":"<p>Las pruebas de aceptaci\u00f3n son un tipo de prueba que se enfoca en evaluar si el software cumple con los requisitos y las expectativas del usuario final. Estas pruebas suelen ser realizadas por el cliente o el usuario final para evaluar si el software cumple con los requisitos establecidos.  EJEMPLO: En una aplicaci\u00f3n de reserva de vuelos, se realiza una prueba de aceptaci\u00f3n para verificar que se cumplen los requisitos del cliente. Se verifica que los usuarios pueden buscar vuelos disponibles, seleccionar asientos y reservar los vuelos seleccionados.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#45-pruebas-de-regresion","title":"4.5 Pruebas de regresi\u00f3n","text":"<p>Las pruebas de regresi\u00f3n son un tipo de prueba que se enfoca en evaluar que el sistema sigue funcionando adecuadamente tras la realizaci\u00f3n de nuevos cambios. Estas pruebas se realizan para asegurarnos que las modificaciones realizadas en el software no han introducido errores en \u00e1reas que antes funcionaban correctamente. Normalmente suelen ser automatizadas y se ejecutan cada vez que se genera una nueva versi\u00f3n para asegurarnos que las modificaciones se integran sin causar problemas.  EJEMPLO: En una aplicaci\u00f3n de edici\u00f3n de im\u00e1genes, se realiza una prueba de regresi\u00f3n despu\u00e9s de una actualizaci\u00f3n de software para verificar que las funcionalidades que funcionaban antes de la actualizaci\u00f3n siguen funcionando correctamente despu\u00e9s. Se verifica que la edici\u00f3n de im\u00e1genes, la aplicaci\u00f3n de efectos y la exportaci\u00f3n de im\u00e1genes siguen funcionando sin errores.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#46-pruebas-de-carga","title":"4.6 Pruebas de carga","text":"<p>Las pruebas de carga son un tipo de prueba que se enfoca en evaluar el comportamiento del software en condiciones de alta demanda. Estas pruebas se realizan para evaluar la capacidad del software para manejar una gran cantidad de usuarios o procesos simult\u00e1neamente.  EJEMPLO: En una aplicaci\u00f3n web, simular un gran n\u00famero de usuarios que acceden a esta de forma simult\u00e1nea, y monitorizar c\u00f3mo el software responde a esta carga. Se podr\u00edan medir aspectos como el tiempo de respuesta de la aplicaci\u00f3n, el n\u00famero de errores producidos y la tasa de transacciones completadas con \u00e9xito.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#47-pruebas-de-rendimiento","title":"4.7 Pruebas de rendimiento","text":"<p>Las pruebas de rendimiento son un tipo de prueba que se enfoca en evaluar la velocidad, la estabilidad y la escalabilidad del software en diferentes situaciones y cargas de trabajo.  EJEMPLO: En una aplicaci\u00f3n de streaming de video, se realiza una prueba de rendimiento para verificar que la aplicaci\u00f3n puede manejar la carga de usuarios concurrentes y ofrecer una experiencia de visualizaci\u00f3n sin interrupciones. Se miden tiempos de carga, calidad de imagen y velocidad de reproducci\u00f3n en diferentes resoluciones.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#48-pruebas-de-seguridad","title":"4.8 Pruebas de seguridad","text":"<p>Las pruebas de seguridad son un tipo de prueba que se enfoca en evaluar la capacidad del software para proteger los datos y el sistema contra posibles amenazas y ataques externos.  EJEMPLO: En una aplicaci\u00f3n de gesti\u00f3n de contrase\u00f1as, se realiza una prueba de seguridad para verificar que los datos de los usuarios est\u00e1n protegidos contra posibles amenazas externas. Se verifica la fortaleza de las contrase\u00f1as, la encriptaci\u00f3n de los datos y la seguridad de los servidores de almacenamiento de contrase\u00f1as.</p> <p>Como has podido observar, existen varios tipos de pruebas de software que se pueden realizar para evaluar diferentes aspectos de la funcionalidad y la calidad del software. Es importante elegir el tipo de prueba adecuado para cada situaci\u00f3n y realizar pruebas continuas durante todo el proceso de desarrollo para garantizar la calidad del software.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#5-plan-de-pruebas","title":"5. Plan de pruebas","text":"<p>Un plan de pruebas es un documento que describe c\u00f3mo se realizar\u00e1n las pruebas de software y cu\u00e1les ser\u00e1n los objetivos y las expectativas de estas pruebas. El plan de pruebas es esencial para garantizar que las pruebas se realicen de manera efectiva y se puedan evaluar los resultados. La identificaci\u00f3n de los objetivos de las pruebas nos permitir\u00e1 acotar los puntos que forman el plan de pruebas. Por ejemplo, el objetivo puede ser identificar y corregir errores en el software, evaluar si el software cumple con los requisitos establecidos o evaluar la calidad y la funcionalidad del software, evaluar el rendimiento en horas de alta carga, etc.</p> <p>A continuaci\u00f3n, se describen los elementos m\u00e1s comunes de un plan de pruebas:</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#51-definicion-del-alcance-de-las-pruebas","title":"5.1 Definici\u00f3n del alcance de las pruebas","text":"<p>En este punto, se deben establecer los l\u00edmites de las pruebas y definir cu\u00e1les son los componentes y funcionalidades del software que se van a probar. Es importante que esta definici\u00f3n sea lo suficientemente amplia como para cubrir todas las \u00e1reas cr\u00edticas del software, pero tambi\u00e9n lo suficientemente espec\u00edfica como para asegurarse de que se est\u00e1n probando todas las funcionalidades de manera exhaustiva.</p> <p>Se establece que el alcance de las pruebas para una aplicaci\u00f3n web de comercio electr\u00f3nico incluye el registro de usuarios, el proceso de compra, la gesti\u00f3n de la cuenta de usuario, la gesti\u00f3n de productos y la integraci\u00f3n con pasarelas de pago.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#52-identificacion-de-los-recursos-necesarios-para-las-pruebas","title":"5.2 Identificaci\u00f3n de los recursos necesarios para las pruebas","text":"<p>Identificar los recursos necesarios para realizar las pruebas es otro de los aspectos importantes del plan de pruebas. Los recursos pueden incluir hardware, software, personal de pruebas y cualquier otro tipo de recurso que se necesite para ejecutar las pruebas de manera efectiva. Es importante identificar y asignar los recursos adecuados para garantizar que las pruebas se puedan realizar sin problemas.</p> <p>Se identifica que se necesitan 2 equipos para ejecutar las pruebas, cada equipo con diferentes navegadores y sistemas operativos. Tambi\u00e9n se necesitan datos de prueba para simular la interacci\u00f3n del usuario con la aplicaci\u00f3n, y un servidor para alojar la aplicaci\u00f3n y las herramientas de pruebas.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#53-seleccion-de-herramientas-de-pruebas","title":"5.3 Selecci\u00f3n de herramientas de pruebas","text":"<p>La selecci\u00f3n de las herramientas de pruebas adecuadas es crucial para asegurar que las pruebas se realicen de manera efectiva. Las herramientas de pruebas pueden incluir software para la creaci\u00f3n de casos de prueba, herramientas para la automatizaci\u00f3n de pruebas, herramientas para la gesti\u00f3n de defectos, entre otras. Es importante seleccionar las herramientas adecuadas para las necesidades espec\u00edficas del proyecto.</p> <p>Se seleccionan las herramientas Selenium y JMeter para realizar las pruebas funcionales y de rendimiento respectivamente, y MockK y Kotest para realizar pruebas unitarias, de integraci\u00f3n y aceptaci\u00f3n. Adem\u00e1s, se decide utilizar Git como sistema de control de versiones para el c\u00f3digo de la aplicaci\u00f3n y los scripts de pruebas.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#54-diseno-de-casos-de-prueba","title":"5.4 Dise\u00f1o de casos de prueba","text":"<p>Los casos de prueba describen los pasos espec\u00edficos que deben seguirse para evaluar el software y verificar si cumple con los requisitos establecidos. El dise\u00f1o de casos de prueba debe ser exhaustivo para cubrir todas las \u00e1reas cr\u00edticas del software y asegurar que todas las funcionalidades se prueben adecuadamente.</p> <p>Se elaboran casos de prueba para verificar la funcionalidad de la aplicaci\u00f3n en diferentes escenarios, tales como pruebas de navegaci\u00f3n, formularios, funcionalidad de compra, validaciones de datos y seguridad.</p> <p>Por ejemplo, para verificar la funcionalidad de una aplicaci\u00f3n de gesti\u00f3n de tareas:</p> <ul> <li>Casos de prueba de creaci\u00f3n de tareas:</li> <li>Verificaci\u00f3n de que se pueden crear tareas con \u00e9xito.</li> <li>Verificaci\u00f3n de que se pueden asignar tareas a usuarios espec\u00edficos.</li> <li>Verificaci\u00f3n de que se pueden establecer fechas de vencimiento para las tareas.</li> <li>Casos de prueba de edici\u00f3n de tareas:</li> <li>Verificaci\u00f3n de que se pueden editar tareas existentes.</li> <li>Verificaci\u00f3n de que se pueden actualizar los datos de la tarea, como la fecha de vencimiento y la asignaci\u00f3n de usuarios.</li> <li>Casos de prueba de eliminaci\u00f3n de tareas:</li> <li>Verificaci\u00f3n de que se pueden eliminar tareas con \u00e9xito.</li> <li>Verificaci\u00f3n de que no se pueden eliminar tareas asignadas a otros usuarios.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#55-asignacion-de-responsabilidades","title":"5.5 Asignaci\u00f3n de responsabilidades","text":"<p>La asignaci\u00f3n de responsabilidades es crucial para garantizar que las pruebas se realicen de manera efectiva. En este punto, se deben definir los roles y responsabilidades de cada miembro del equipo de pruebas, as\u00ed como los roles y responsabilidades de cualquier otro miembro del equipo que est\u00e9 involucrado en el proceso de pruebas. Esto asegura que cada persona tenga claro lo que se espera de \u00e9l o ella durante el proceso de pruebas.</p> <p>Se asignan responsabilidades a los miembros del equipo de pruebas, por ejemplo, un tester ser\u00e1 responsable de la ejecuci\u00f3n de las pruebas de integraci\u00f3n, otro tester ser\u00e1 responsable de las pruebas de sistema, y un tercero ser\u00e1 responsable de las pruebas de aceptaci\u00f3n.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#56-cronograma-de-pruebas","title":"5.6 Cronograma de pruebas","text":"<p>El cronograma debe incluir la duraci\u00f3n de cada fase de pruebas y los plazos de entrega para cada etapa. Tambi\u00e9n debe tener en cuenta los plazos y recursos disponibles para el proyecto en su totalidad. El cronograma de pruebas ayuda a asegurar que las pruebas se realicen dentro de los plazos establecidos y que el proyecto se entregue en tiempo y forma.</p> <p>Se establece un cronograma que indica cu\u00e1ndo se llevar\u00e1n a cabo las diferentes pruebas y qui\u00e9n ser\u00e1 responsable de su ejecuci\u00f3n, y el proceso mediante el cual el equipo de desarrollo debe corregir las incidencias reportadas durante las pruebas, por ejemplo,  antes de que se inicie la siguiente fase de pruebas.</p> <p>En ejemplo simple de cronograma:</p> <ul> <li>Semana 1:</li> <li>Revisi\u00f3n y aprobaci\u00f3n de casos de prueba por el desarrollador.</li> <li>Configuraci\u00f3n del entorno de prueba.</li> <li>Ejecuci\u00f3n de pruebas unitarias.</li> <li>Semana 2:</li> <li>Ejecuci\u00f3n de pruebas de interfaz de usuario.</li> <li>Ejecuci\u00f3n de pruebas de rendimiento.</li> <li>Semana 3:</li> <li>Ejecuci\u00f3n de pruebas de aceptaci\u00f3n.</li> <li>Documentaci\u00f3n de los resultados de las pruebas.</li> <li>Semana 4:</li> <li>Revisi\u00f3n de resultados de pruebas y toma de decisiones sobre la aprobaci\u00f3n de la entrega.</li> </ul> <p>En definitiva, un plan de pruebas es esencial para garantizar que las pruebas de software se realicen de manera efectiva y se puedan evaluar los resultados. Un plan de pruebas detallado debe incluir los objetivos de las pruebas, el alcance de las pruebas, el cronograma y los recursos, el plan de pruebas detallado, los roles y las responsabilidades y el proceso de seguimiento y documentaci\u00f3n de errores.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#6-pruebas-de-integracion","title":"6. Pruebas de integraci\u00f3n","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#61-definicion-de-pruebas-de-integracion","title":"6.1 Definici\u00f3n de pruebas de integraci\u00f3n","text":"<p>Las pruebas de integraci\u00f3n son un tipo de prueba de software que se enfoca en probar c\u00f3mo diferentes componentes de software interact\u00faan entre s\u00ed cuando se integran. Estas pruebas se realizan despu\u00e9s de haber completado las pruebas unitarias y antes de realizar las pruebas del sistema. El objetivo de las pruebas de integraci\u00f3n es detectar problemas de integraci\u00f3n entre los diferentes componentes de software para garantizar que el sistema completo funcione correctamente.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#62-tipos-de-pruebas-de-integracion","title":"6.2 Tipos de pruebas de integraci\u00f3n","text":"<p>Existen diferentes tipos de pruebas de integraci\u00f3n, que se pueden clasificar seg\u00fan el nivel de integraci\u00f3n que se est\u00e1 probando:</p> <ul> <li>Pruebas de integraci\u00f3n ascendente: se inician con las unidades de menor nivel (m\u00f3dulos o componentes) y se van integrando hacia arriba, hasta llegar al nivel de sistema completo.</li> <li>Pruebas de integraci\u00f3n descendente: se inician con los m\u00f3dulos de m\u00e1s alto nivel y se van integrando hacia abajo, hasta llegar a las unidades de menor nivel.</li> <li>Pruebas de integraci\u00f3n h\u00edbridas: combinan los dos enfoques anteriores, empezando por un grupo de m\u00f3dulos y luego continuando hacia arriba y hacia abajo simult\u00e1neamente.</li> </ul> <p>Adem\u00e1s, las pruebas de integraci\u00f3n tambi\u00e9n se pueden clasificar seg\u00fan la estrategia que se utilice para realizarlas.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#63-estrategias-para-realizar-pruebas-de-integracion","title":"6.3 Estrategias para realizar pruebas de integraci\u00f3n","text":"<p>Existen diferentes estrategias que se pueden utilizar para realizar pruebas de integraci\u00f3n. Algunas de las m\u00e1s comunes son:</p> <ul> <li>Pruebas Big-Bang: en esta estrategia, se integran todos los componentes a la vez y se realizan pruebas para verificar que funcionen correctamente. Esta estrategia es r\u00e1pida y sencilla de realizar, pero puede ser dif\u00edcil detectar los problemas de integraci\u00f3n si hay muchos componentes.</li> <li>Pruebas por m\u00f3dulos: esta estrategia consiste en integrar los componentes de software en m\u00f3dulos l\u00f3gicos y realizar pruebas en cada uno de ellos. Luego, se integran los m\u00f3dulos y se realizan pruebas en el sistema completo.</li> <li>Pruebas de fachada: esta estrategia consiste en crear fachadas (interfaces) para los componentes que a\u00fan no se han desarrollado y realizar pruebas con estas interfaces, para simular el comportamiento de los componentes reales que a\u00fan no est\u00e1n disponibles.</li> <li>Pruebas de stub y driver: esta estrategia consiste en utilizar stubs (programas que simulan la funcionalidad de los componentes faltantes) y drivers (programas que simulan la entrada y salida de los componentes faltantes) para realizar pruebas en los componentes que a\u00fan no est\u00e1n disponibles.</li> </ul> <p>Un ejemplo en de prueba de integraci\u00f3n ascendente en la que se sigue una estrategia por modulos:</p> <p>Supongamos que estamos desarrollando un sistema de compras en l\u00ednea que consta de tres m\u00f3dulos: el m\u00f3dulo de autenticaci\u00f3n de usuarios, el m\u00f3dulo de gesti\u00f3n de carritos de compras y el m\u00f3dulo de procesamiento de pagos. Cada uno de estos m\u00f3dulos ha sido desarrollado por un equipo diferente de desarrolladores.</p> <p>Para realizar pruebas de integraci\u00f3n ascendente, comenzamos con el m\u00f3dulo m\u00e1s bajo en la jerarqu\u00eda y vamos subiendo gradualmente. En este caso, comenzar\u00edamos con el m\u00f3dulo de autenticaci\u00f3n de usuarios.</p> <ol> <li>Se desarrollan y prueban los componentes individuales del m\u00f3dulo de autenticaci\u00f3n de usuarios, como la validaci\u00f3n de la direcci\u00f3n de correo electr\u00f3nico y la contrase\u00f1a del usuario.</li> <li>Luego, se integran los componentes individuales del m\u00f3dulo y se prueban los flujos de trabajo completos, como el registro de nuevos usuarios y la autenticaci\u00f3n de usuarios existentes.</li> <li>Una vez que se ha probado el m\u00f3dulo de autenticaci\u00f3n de usuarios por completo, se procede a integrar el m\u00f3dulo de gesti\u00f3n de carritos de compras.</li> <li>Se siguen los mismos pasos que con el m\u00f3dulo de autenticaci\u00f3n de usuarios: se prueban los componentes individuales del m\u00f3dulo, luego se integran y se prueban los flujos de trabajo completos.</li> <li>Finalmente, se integra el m\u00f3dulo de procesamiento de pagos y se prueban los flujos de trabajo completos, desde la selecci\u00f3n de productos hasta la finalizaci\u00f3n del pago.</li> </ol> <p>De esta manera, se van integrando gradualmente los distintos m\u00f3dulos del sistema y se prueban los flujos de trabajo completos, asegurando que no hay conflictos o errores en la interacci\u00f3n entre los distintos componentes. Este proceso se denomina \"ascendente\" ya que se comienza con los m\u00f3dulos m\u00e1s bajos en la jerarqu\u00eda y se va avanzando hacia arriba.</p> <p>En resumen, las pruebas de integraci\u00f3n son un tipo de prueba de software que se enfoca en probar la integraci\u00f3n de los diferentes componentes del software. Para realizarlas, se pueden utilizar diferentes estrategias, como pruebas Big-Bang, por m\u00f3dulos, de fachada y de stub y driver. El objetivo es detectar problemas stubde integraci\u00f3n para garantizar que el sistema completo funcione correctamente.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#7-pruebas-de-sistema","title":"7. Pruebas de sistema","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#71-definicion-de-pruebas-de-sistema","title":"7.1 Definici\u00f3n de pruebas de sistema","text":"<p>Las pruebas de sistema son una etapa importante del proceso de prueba de software en la que se eval\u00faa el sistema completo para asegurarse de que cumple con los requisitos y especificaciones definidos. Estas pruebas se realizan despu\u00e9s de las pruebas de integraci\u00f3n y antes de las pruebas de aceptaci\u00f3n.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#72-tipos-de-pruebas-de-sistema","title":"7.2 Tipos de pruebas de sistema","text":"<p>Los tipos de pruebas de sistema que se pueden realizar son los siguientes:</p> <ol> <li>Pruebas de funcionalidad: se asegura que todas las funciones del sistema est\u00e9n funcionando correctamente.</li> <li>Pruebas de rendimiento: se verifica que el sistema cumpla con los requisitos de rendimiento definidos, como la velocidad de respuesta, el tiempo de carga, etc.</li> <li>Pruebas de carga: se comprueba la capacidad del sistema para manejar grandes vol\u00famenes de datos o usuarios simult\u00e1neos.</li> <li>Pruebas de seguridad: se eval\u00faa la seguridad del sistema y se verifica que cumple con los requisitos de seguridad definidos.</li> <li>Pruebas de compatibilidad: se verifica la capacidad del sistema para trabajar con diferentes entornos de hardware, software y configuraciones de red.</li> <li>Pruebas de usabilidad: se eval\u00faa la facilidad de uso y la experiencia del usuario.</li> </ol>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#73-estrategias-para-realizar-pruebas-de-sistema","title":"7.3. Estrategias para realizar pruebas de sistema","text":"<p>Las estrategias comunes para realizar pruebas de sistema son:</p> <ol> <li>Pruebas de casos de uso: se prueban los casos de uso definidos y se verifica que el sistema funcione seg\u00fan lo previsto en cada caso.</li> <li>Pruebas de escenarios: se prueban los diferentes escenarios de uso del sistema, incluyendo los casos de uso complejos y poco comunes.</li> <li>Pruebas de extremo a extremo: se prueban las funcionalidades del sistema desde el inicio hasta el final, incluyendo todas las interacciones entre los diferentes m\u00f3dulos y componentes del sistema.</li> <li>Pruebas de seguridad: se realizan diferentes tipos de pruebas de seguridad, como pruebas de penetraci\u00f3n, pruebas de vulnerabilidad, etc., para evaluar la seguridad del sistema.</li> <li>Pruebas de compatibilidad: se realizan pruebas en diferentes entornos de hardware y software para verificar la compatibilidad del sistema.</li> <li>Pruebas de estr\u00e9s: se prueban las capacidades del sistema en situaciones de alta carga o bajo condiciones extremas para verificar su capacidad para manejar tales situaciones.</li> </ol> <p>Por \u00faltimo recordar que las pruebas de sistema son cr\u00edticas para garantizar que el sistema cumpla con los requisitos y especificaciones definidos antes de que sea entregado al cliente. Para ello, se deben definir diferentes tipos de pruebas y estrategias apropiadas para realizarlas de manera efectiva.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#8-pruebas-de-aceptacion","title":"8. Pruebas de aceptaci\u00f3n","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#81-definicion-de-pruebas-de-aceptacion","title":"8.1 Definici\u00f3n de pruebas de aceptaci\u00f3n","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#82-tipos-de-pruebas-de-aceptacion","title":"8.2 Tipos de pruebas de aceptaci\u00f3n","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#83-estrategias-para-realizar-pruebas-de-aceptacion","title":"8.3 Estrategias para realizar pruebas de aceptaci\u00f3n","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#9-documentacion-de-incidencias","title":"9. Documentaci\u00f3n de incidencias","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#91-definicion-de-incidencias","title":"9.1 Definici\u00f3n de incidencias","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#92-proceso-de-documentacion-de-incidencias","title":"9.2 Proceso de documentaci\u00f3n de incidencias","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#93-clasificacion-de-incidencias","title":"9.3 Clasificaci\u00f3n de incidencias","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#94-ejemplos-de-herramientas-de-seguimiento-de-incidencias","title":"9.4 Ejemplos de herramientas de seguimiento de incidencias","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#10-conclusiones","title":"10. Conclusiones","text":"<p>Resumen de los puntos m\u00e1s importantes  Importancia de la colaboraci\u00f3n entre desarrolladores y testers  La importancia de la mejora continua en el proceso de pruebas de software   </p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/","title":"UD 3 - 3.2 Test de unidad y TDD","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#test-de-unidad-y-tdd","title":"Test de unidad y TDD","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#test-de-unidad","title":"Test de unidad","text":"<p>Las pruebas unitarias o unit testing son una forma de comprobar que un fragmento de c\u00f3digo funciona correctamente. Es un procedimiento m\u00e1s de los que se llevan a cabo dentro de una metodolog\u00eda \u00e1gil de trabajo.</p> <p>Si nunca te has atrevido con ellas o no sabes por d\u00f3nde empezar, es el momento de descubrir c\u00f3mo las pruebas unitarias pueden ayudarte a  mejorar el resultado final de tu aplicaci\u00f3n .</p> <p>Las pruebas unitarias consisten en  aislar una parte del c\u00f3digo y comprobar que funciona a la perfecci\u00f3n . Son peque\u00f1os tests que validan el comportamiento de un objeto y la l\u00f3gica. El unit testing suele realizarse durante la fase de desarrollo de aplicaciones de software o m\u00f3viles. Normalmente las llevan a cabo los  desarrolladores , aunque en la pr\u00e1ctica, tambi\u00e9n pueden realizarlas los  responsables de QA . Hay una especie de mito respecto a las pruebas unitarias. Algunos desarrolladores est\u00e1n convencidos de que son una p\u00e9rdida de tiempo y las evitan buscando ahorrar tiempo. Nada m\u00e1s alejado de la realidad. Con ellas se detectan antes errores que, sin las pruebas unitarias, no se podr\u00edan detectar hasta fases m\u00e1s avanzadas como las pruebas de sistema, de integraci\u00f3n e incluso en la beta. Realizar pruebas unitarias con regularidad supone, al final, un ahorro de tiempo y dinero.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#motivos-para-realizar-un-test-unitario","title":"Motivos para realizar un test unitario","text":"<p>Si todav\u00eda no est\u00e1s del todo seguro de por qu\u00e9 debes incorporar las unit testing a tu d\u00eda a d\u00eda como desarrollador, te damos algunos motivos:</p> <ul> <li>Las pruebas unitarias demuestran que la l\u00f3gica del c\u00f3digo est\u00e1 en buen estado y que funcionar\u00e1 en todos los casos.</li> <li>Aumentan la legibilidad del c\u00f3digo y ayudan a los desarrolladores a entender el c\u00f3digo base, lo que facilita hacer cambios m\u00e1s r\u00e1pidamente.</li> <li>Los test unitarios bien realizados sirven como documentaci\u00f3n del proyecto.</li> <li>Se realizan en  pocos milisegundos , por lo que podr\u00e1s realizar cientos de ellas en muy poco tiempo.</li> <li>Las unit testing permiten al desarrollador refactorizar el c\u00f3digo m\u00e1s adelante y tener la garant\u00eda de que el m\u00f3dulo sigue funcionando correctamente. Para ello se escriben casos de prueba para todas las funciones y m\u00e9todos, para que cada vez que un cambio provoque un error, sea posible identificarlo y repararlo r\u00e1pidamente.</li> <li>La calidad final del c\u00f3digo mejorar\u00e1 ya que, al estar realizando pruebas de manera continua, al finalizar el c\u00f3digo ser\u00e1 limpio y de calidad.</li> <li>Como las pruebas unitarias dividen el c\u00f3digo en peque\u00f1os fragmentos, es posible probar distintas partes del proyecto sin tener que esperar a que otras est\u00e9n completadas.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#tdd","title":"TDD","text":"<p>Probablemente, la t\u00e9cnica que hasta hoy conoces (y practicas) a la hora de programar consiste en escribir c\u00f3digo y luego, con algo de suerte, probarlo para ver si efectivamente hace lo que tiene que hacer. Esta prueba puede ser manual (por ejemplo, mediante un REPL o sencillamente apretando botones) o automatizada (mediante pruebas unitarias, end-to-end, lo que sea).</p> <p>En este punto proponemos algo que puede resultar disruptivo y hasta molesto (al menos al principio): comenzar por las pruebas y luego escribir el c\u00f3digo necesario para que ellas pasen. No ahondaremos aqu\u00ed en las ventajas y desventajas de la pr\u00e1ctica (hay mucho escrito en internet) pero s\u00ed diremos que TDD es una muy buena forma de encarar un problema que no tenemos mucha idea de c\u00f3mo resolver, y de poner especial atenci\u00f3n a las pruebas automatizadas\u2026 lo cual nos interesa especialmente en este momento.</p> <p>Aunque el nombre pueda sugerir otra cosa, el desarrollo guiado por pruebas, test driven development o TDD es una t\u00e9cnica de desarrollo que nos propone escribir las pruebas antes que el c\u00f3digo. Sin dudas, una de las consecuencias de usarla es que al finalizar contaremos con una buena bater\u00eda de pruebas, aunque no es ese su objetivo principal.</p> <p>Es un pr\u00e1ctica de dise\u00f1o de software orientado a objetos, aunque extensible a otros paradigmas y lenguajes. Plantea un flujo de trabajo claro y simple basado en la creaci\u00f3n de test de unidad. Pensar primero en el uso y luego en la implementaci\u00f3n. Partir de las pruebas, el uso de tus unidades funcionales, interfaces, nombres, par\u00e1metros, etc, para elaborar un dise\u00f1o del software que nos permita implementarlo.</p> <p>OJO, TDD no son pruebas, aunque el obtener las pruebas es una consecuencia. TDD nos permite dise\u00f1ar nuestro c\u00f3digo pensando en el uso que se le va a dar.</p> <p>La t\u00e9cnica se puede resumir en dos reglas de oro:</p> <p>Nunca escribas funcionalidad sin una prueba que falle antes. - Kent Beck.</p> <p>Esto nos quiere ayudar a pensar en el uso, ya que si la prueba funciona, es porque ya existe.</p> <p>Si no puedes escribir una prueba para lo vas a implementar, entonces no deber\u00edas estar pensando en la implementaci\u00f3n.</p> <ul> <li>Dave Chaplin.</li> </ul> <p>Si no podemos escribir una prueba es porque no est\u00e1 claro lo que quieres hacer, quiz\u00e1s falte aclarar requisitos.</p> <p>La t\u00e9cnica tiene 3 pasos:</p> <ol> <li>RED: Escribe un test que falla, ver como muestra el error.</li> <li>GREEN: Escribe el c\u00f3digo m\u00ednimo necesario y simple para que el test no falle. Esto nos permitir\u00e1 realizar un dise\u00f1o    simple, sin sobredise\u00f1ar.</li> <li>REFACTOR: Refactoriza tu c\u00f3digo y tu test. Mejorar el c\u00f3digo sin modificar lo que hace este.    </li> </ol> <p>Este ciclo se repite continuamente. Aunque no indica cuando parar y cuando refactorizar. Estas decisiones las tomaremos e iremos mejorando conforme vayamos</p> <p>En lo que a pr\u00e1cticas se refiere, ver a alguien hacerlo puede resultar mucho m\u00e1s educativo que una explicaci\u00f3n te\u00f3rica sobre en qu\u00e9 consiste la misma.</p> <p>Y si bien cada lenguaje y framework tiene sus particularidades, esta t\u00e9cnica es agn\u00f3stica de la tecnolog\u00eda.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#diseno-de-casos-de-prueba","title":"Dise\u00f1o de casos de prueba","text":"<p>Presentaremos algunas gu\u00edas para desarrollar los casos de prueba, asumiendo que ya conoc\u00e9s el concepto de pruebas automatizadas y alg\u00fan framework para implementarlas.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#descripcion-del-dominio","title":"Descripci\u00f3n del dominio","text":"<p>Todo el apunte estar\u00e1 elaborado en base al siguiente dominio:</p> <p>REQUERIMIENTO: Una ferreter\u00eda tiene en cuenta ciertos aspectos para decidir si le puede fiar a un cliente o no.</p> <ul> <li>Al cliente particular le fia solo si no adeuda nada, es decir si su deuda es de $0.</li> <li>A las constructoras les fia dependiendo de cu\u00e1ntos alba\u00f1iles trabajen en la obra:</li> <li>si son 5 o m\u00e1s alba\u00f1iles, le f\u00eda hasta $10.000,</li> <li>de lo contrario s\u00f3lo hasta $5.000.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#definiendo-los-escenarios","title":"Definiendo los escenarios","text":"<p>Para armar los escenarios de prueba, vamos a tomar prestado un concepto de la matem\u00e1tica llamado  clase de equivalencia . Clasificar a los distintos escenarios seg\u00fan las caracter\u00edsticas que comparten nos va a permitir contemplar todas las opciones posibles sin tener que escribir infinitas pruebas.</p> <p>Para un cliente particular tenemos dos casos:</p> <ul> <li>o que no deba nada.</li> <li>que deba algo. Si debe $1 \u00f3 $50.000 no nos importa, porque est\u00e1 en la misma clase de equivalencia (la deuda es mayor a   $0).</li> </ul> <p>Para una  empresa constructora , tenemos m\u00e1s variantes:</p> <ul> <li>si tiene menos de 5 alba\u00f1iles, podemos decir que son <code>\"pocos\"</code> alba\u00f1iles,</li> <li>si tiene 5 o m\u00e1s alba\u00f1iles, podemos decir que son <code>\"muchos\"</code> alba\u00f1iles.</li> </ul> <p>Combinando eso con las posibles deudas, podr\u00edamos definir los siguientes escenarios:</p> <ul> <li>Dado un cliente particular:</li> <li>Si debe algo: no se le puede fiar.</li> <li>Si no debe nada: se le puede fiar.</li> <li>Dada una constructora con muchos (5) alba\u00f1iles:</li> <li>Si la obra debe m\u00e1s de $10.000: no se le puede fiar.</li> <li>Si la obra debe menos de $10.000: se le puede fiar.</li> <li>Dada una constructora con pocos (4) alba\u00f1iles:</li> <li>Si la obra debe m\u00e1s de $5.000: no se le puede fiar.</li> <li>Si la obra debe menos de $5.000: se le puede fiar.</li> </ul> <p>En el caso de la constructora, elegimos la cantidad de obreros en base al  valor l\u00edmite : como 5 es el n\u00famero que distingue entre pocos y  muchos , elegimos 4 para representar al caso pocos y 5 para el caso  muchos .</p> <p>Sin dudas podr\u00edamos haber elegido otros n\u00fameros, pero es importante que los tests sean simples y f\u00e1ciles de comprender. Por esta raz\u00f3n, vamos a preferir siempre utilizar valores que nos resulten f\u00e1ciles de razonar para representar a cada escenario.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#escribiendo-los-tests","title":"Escribiendo los tests","text":"<p>Necesitamos:</p> <ul> <li>Un cliente particular.</li> <li>Una empresa constructora con 5 alba\u00f1iles.</li> <li>Otra empresa constructora con 4 alba\u00f1iles.</li> </ul> <p>A los que podemos configurar diferentes grados de deuda.</p> <p>ATENCI\u00d3N: Los ejemplos de c\u00f3digo que vienen a continuaci\u00f3n asumen que se utiliza Kotest (en el caso de Kotlin). La agrupaci\u00f3n que proponemos no puede imitarse f\u00e1cilmente en frameworks como JUnit.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#como-agrupar-los-escenarios","title":"\u00bfC\u00f3mo agrupar los escenarios?","text":"<p>En frameworks como Jest o Kotest tenemos la posibilidad de jerarquizar nuestras pruebas, utilizando las funciones <code>describe</code> e <code>it</code> para crear estas agrupaciones.</p> <p>Podr\u00edamos tambi\u00e9n tener todo junto, sin ning\u00fan tipo de agrupamiento. Pero esto no resulta ser una buena pr\u00e1ctica, porque:</p> <ul> <li>dificulta diferenciar los escenarios: estar\u00e1n todas las variables de los tests mezcladas,</li> <li>si construimos un fixture con cada uno de los tipos de cliente, estamos penalizando a cada uno de los tests por lo que   necesitan los dem\u00e1s: \u00bftiene sentido crear una constructora con 5 alba\u00f1iles si estoy testeando una que tiene 4?,</li> <li>se pierde  cohesi\u00f3n : un solo m\u00e9todo (o funci\u00f3n, en este caso) est\u00e1 cubriendo todos los casos de prueba.</li> </ul> <p>Volviendo al ejemplo, hay varias opciones posibles:</p> <ul> <li>hacer un <code>describe</code> para clientes particulares y otro para constructoras,</li> <li>hacer un <code>describe</code> para clientes particulares, otro para constructoras con pocos alba\u00f1iles y otro para constructoras   con muchos alba\u00f1iles.</li> </ul> <p>Elegiremos la ultima opci\u00f3n y agruparemos las pruebas de la siguiente forma:</p> <pre><code>    describe(\"Un cliente particular\") {  // ...}\n    describe(\"Una constructora con pocos alba\u00f1iles\") {  // ...}\n    describe(\"Una constructora con muchos alba\u00f1iles\") {  // ...}\n</code></pre> <p>Es importante que no haya demasiados detalles de implementaci\u00f3n en los nombres: <code>Una constructora con 5 alba\u00f1iles</code> o <code>Una constructora con 10 alba\u00f1iles</code> est\u00e1n sujetos a que cualquier cambio del negocio respecto a lo que son \u201cmuchos\u201d o \u201cpocos\u201d alba\u00f1iles necesite modificar el nombre del test. Adem\u00e1s, un nombre as\u00ed nos obliga a ir a revisar el c\u00f3digo (o el requerimiento, si es que est\u00e1 escrito en alg\u00fan lado) para comprender que se trata de dos escenarios diferentes.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#expresividad-nombres-acorde-a-lo-que-representan","title":"Expresividad: nombres acorde a lo que representan","text":"<p>Al empezar a dise\u00f1ar los casos de prueba es usual imaginar alg\u00fan ejemplo m\u00e1s o menos realista, como <code>La Constructora Hurlingham tiene 5 alba\u00f1iles y una deuda de 7000 pesos</code>.</p> <p>Intentando traducir esto a c\u00f3digo, tal vez nos saldr\u00eda un tests como el siguiente:</p> <pre><code>class FerreteriaTest : DescribeSpec(\n    {\n        describe(\"Una ferreter\u00eda\") {\n            it(\"puede fiarle a la Constructora Hurlingham\") {\n                val constructoraHurlingham = EmpresaConstructora(albaniles = 5,deuda = 7000) \n                constructoraHurlingham.puedePedirFiado().shouldBeTrue()\n            }\n        }\n    })\n</code></pre> <p>Pero \u00bfqu\u00e9 pasa si hay un error en el c\u00f3digo y el test falla? Supongamos esta implementaci\u00f3n, donde la clase <code>EmpresaConstructora</code> tiene la definici\u00f3n de la deuda como un entero:</p> <pre><code>class EmpresaConstructora(val cantidadAlbaniles: Int, deuda: Int) : Cliente(deuda) {  \n        // Deber\u00eda ser &gt;= 5  \n        fun montoMaximoDeuda() = if (cantidadAlbaniles &gt; 5) 10000 else 5000\n        override fun puedePedirFiado() = deuda &lt;= this.montoMaximoDeuda()\n}\n</code></pre> <p></p> <p>Cuando ejecutamos el test tenemos muy poca informaci\u00f3n relevante:</p> <ul> <li>la constante <code>constructorHurlingham</code> no est\u00e1 revelando que es una constructora con muchos alba\u00f1iles,</li> <li>y tampoco est\u00e1 claro por qu\u00e9 no puede pedir fiado.</li> </ul> <p>Al fallar, tenemos que bucear en el c\u00f3digo y extraer este dato para determinar si el error est\u00e1 en el test o en el c\u00f3digo de negocio.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#otra-oportunidad","title":"Otra oportunidad","text":"<p>Vamos a mejorar la sem\u00e1ntica del test, renombrando la constante <code>constructoraHurlingham</code> por un nombre m\u00e1s representativo de la clase de equivalencia que estamos modelando y cambiando el nombre del test:</p> <pre><code>class FerreteriaTest : DescribeSpec({\n    describe(\"Una ferreter\u00eda\") {\n        it(\"puede fiarle a una constructora con muchos alba\u00f1iles\") {\n            val constructoraMuchosAlbaniles = EmpresaConstructora(\n                albaniles = 5,\n                deuda = 7000\n            ) constructoraMuchosAlbaniles . puedePedirFiado ().shouldBeTrue()\n        }\n    }\n})\n</code></pre> <p></p> <p>Ahora al fallar el test sabemos m\u00e1s cosas:</p> <ul> <li>qu\u00e9 es lo que estamos testeando, tratando de no entrar en detalles para no duplicar lo que dice el c\u00f3digo,</li> <li>qu\u00e9 se esperaba que pasara y no pas\u00f3, en un formato m\u00e1s o menos legible para un usuario: \u201cUna ferreter\u00eda puede fiarle a una constructora con muchos alba\u00f1iles\u201d.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<p>M\u00e1s all\u00e1 de lo explicado hasta aqu\u00ed, compartimos tambi\u00e9n algunas buenas pr\u00e1cticas que pueden ser \u00fatiles a la hora de armar nuestras pruebas.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#el-patron-aaa-arrange-act-assert","title":"El patr\u00f3n AAA: Arrange-Act-Assert","text":"<p>Una de las formas m\u00e1s comunes de estructurar las pruebas es utilizando el patr\u00f3n AAA:  Arrange, Act y Assert.</p> <p>No es necesario cumplirlo a rajatabla - y de hecho el ejemplo de este apunte no lo cumple \ud83d\ude05 -, pero tenerlo en mente puede ayudarnos a entender si nuestro test tiene todo lo que deber\u00eda tener.</p> <p>Seg\u00fan este patr\u00f3n, cada test se puede dividir en tres \"momentos\":</p> <ul> <li>Arrange: que podr\u00eda traducirse como arreglar o gestionar, en donde se instancian los objetos a testear, en este ejemplo la ferreteria y sus clientes. Cuando estos objetos son compartidos entre varios tests, los frameworks nos   permiten ubicarlos en alg\u00fan lugar com\u00fan, por ejemplo dentro de un mismo <code>describe</code>. La desventaja de esta t\u00e9cnica es que para tener una idea general de los elementos que participan en el test debemos mirar el test y adem\u00e1s el c\u00f3digo de inicializaci\u00f3n en el que est\u00e1 enmarcado.</li> <li>Act: que podr\u00eda traducirse como actuar. Son operaciones que tienen alg\u00fan efecto sobre los objetos creados, y que posteriormente vamos a querer comprobar que hicieron lo que deb\u00edan. Hay tests, como los de este apunte, que no necesitan disparar acciones, y est\u00e1 bien que eso ocurra.</li> <li>Assert: que podr\u00eda traducirse como afirmar. Es la parte donde escribimos lo que esperamos que pase, generalmente asociado a las respuestas que da el env\u00edo de un mensaje al objeto testeado.</li> </ul> <p>Veamos un ejemplo sencillo que puede desglosarse f\u00e1cilmente en esos tres componentes:</p> <pre><code>describe(\"Un ave\") { \n  it(\"pierde energ\u00eda al volar\") {\n    // ARRANGE: se crea el objeto  \n    val pepita = Ave(1000)\n    // ACT: se realizan las acciones  \n    pepita.volar()\n    // ASSERT: se verifica el efecto  \n    pepita.energia.shouldBe(900)  \n  }\n}\n</code></pre>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#recursos","title":"Recursos","text":"<ul> <li>\u00bfQu\u00e9 es TDD?</li> <li>\u00bfC\u00f3mo elaborar casos de prueba?</li> <li>Test unitario avanzado</li> <li>Dise\u00f1o de Software</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#fuente","title":"Fuente","text":"<ul> <li>TDD Veloz</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/","title":"UD 3 - 3.3 Kotest","text":"","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#introduccion-a-kotest","title":"Introducci\u00f3n a Kotest","text":"","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#1-informacion-general","title":"1. Informaci\u00f3n general","text":"<p>Kotest es un framework de pruebas multiplataforma escrito en Kotlin. Consta de 3 subproyectos principales:</p> <ul> <li>Framework para pruebas</li> <li>Biblioteca de aserciones</li> <li>Pruebas de propiedad</li> </ul> <p>Podemos usar cada proyecto independientemente, integr\u00e1ndolos con otros framework de prueba. Por ejemplo, es posible usar las aserciones de Kotest en lugar de otros frameworks de asserciones.</p> <p>Podemos ejecutar pruebas Kotest en JVM, Javascript o Native. Esto nos permite utilizar la misma biblioteca de pruebas para el desarrollo web, m\u00f3vil y back-end. Nos centraremos en la plataforma JVM .</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#2-pruebas-en-jvm","title":"2. Pruebas en JVM","text":"<p>Kotest utiliza la plataforma JUnit en la JVM. Entonces, en un proyecto Maven , podemos activarlo usando las siguientes sentencias dentro del fichero <code>build.gradle.kts</code></p> <p><pre><code>dependencies {\n    testImplementation(kotlin(\"test\"))\n    testImplementation(\"io.kotest:kotest-runner-junit5-jvm:5.5.4\")\n    testImplementation(\"io.kotest:kotest-runner-junit5:5.5.4\")\n    testImplementation(\"io.kotest:kotest-assertions-core:5.5.4\")\n    testImplementation(\"io.kotest:kotest-property:5.5.4\")\n}\n</code></pre> ten en cuenta que estamos estableciendo la version <code>5.5.4</code>, aqui puedes consultar cual es la \u00faltima versi\u00f3n.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#3-estilos-de-prueba","title":"3. Estilos de prueba","text":"<p>Kotest proporciona muchos estilos de prueba diferentes. Veamos ejemplos de algunos los estilos m\u00e1s usados.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#31-especificaciones-de-comportamiento","title":"3.1. Especificaciones de comportamiento","text":"<p>Podemos escribir pruebas similares a BDD, en este estilo se usan las palabras clave <code>given</code> (Bajo unas condiciones) , <code>when</code> (cuando se cumpla tal cosa) y <code>then</code> (entonces suceder\u00e1):</p> <pre><code>// En una situaci\u00f3n en el que tengo suficiente balance,\n// cuando se realice un pago\n// el pago se debe realizar sin problemas. \nclass CardPaymentTests : BehaviorSpec({\n    given(\"I have sufficient balance\") {\n        `when`(\"I make a card payment\") {\n            then(\"The card payment should be successful\") {\n                // test code\n            }\n        }\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#32-especificaciones-mediante-should","title":"3.2. Especificaciones mediante <code>should</code>","text":"<p>Podemos crear pruebas usando la palabra clave <code>should</code> (Deber\u00eda cumplirse) :</p> <pre><code>// Deber\u00eda convertir el dinero de entrada a la moneda destino.\nclass MoneyTests : ShouldSpec({\n    should(\"Convert input money to the target currency\") {\n        // test code\n    }\n})\n</code></pre> <p>Podemos agrupar pruebas relacionadas en un bloque de <code>context</code>:</p> <pre><code>class PaymentTests : ShouldSpec({\n    context(\"CardPayments\") {\n        should(\"Make a card payment\") {\n            // test code\n        }\n    }\n    context(\"BankTransfers\") {\n        should(\"Make an external bank transfer\") {\n            // test code\n        }\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#33-especificaciones-de-caracteristicas-features","title":"3.3. Especificaciones de caracter\u00edsticas (<code>features</code>)","text":"<p>A continuaci\u00f3n, veamos c\u00f3mo se pueden escribir pruebas basadas en Cucumber, una herramienta de uso com\u00fan para las pruebas de aceptaci\u00f3n del usuario, basadas en las palabras clave  <code>feature</code> (funcionalidad) y <code>scenario</code> (escenario):</p> <pre><code>class HomePageTests : FeatureSpec({\n    feature(\"signup\") {\n        scenario(\"should allow user to signup with email\") {\n            // test code\n        }\n    }\n    feature(\"signin\") {\n        scenario(\"should allow user with valid credentials to login\") {\n            // test code\n        }\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#34-especificaciones-mediante-mediante-descripciones-describe","title":"3.4. Especificaciones mediante mediante descripciones (<code>describe</code>)","text":"<p>Usando <code>describe</code>, podemos escribir pruebas en un estilo muy popular entre los desarrolladores de Javascript y Ruby, de hecho ser\u00e1 el que usaremos en nuestros ejemplos:</p> <pre><code>class PaymentTests : DescribeSpec({\n    describe(\"CardPayments\") {\n        it(\"Should make a card payment\") {\n            // test code\n        }\n    }\n    describe(\"BankTransfers\") {\n        it(\"Should make an external bank transfer\") {\n            // test code\n        }\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#4-assertions","title":"4. Assertions","text":"<p>Anteriormente hemos visto que Kotest tiene bibliotecas destinadas a aserciones, las afirmaciones que tienen que cumplirse tras realizar el test. Estas bibliotecas nos brindan varias funciones de comparaci\u00f3n para escribir las afirmaciones que deben cumplirse en nuestras pruebas. Hay dos grandes categor\u00edas de bibliotecas de aserciones:</p> <ul> <li>Core matchers</li> <li>External matchers</li> </ul> <p>Veamos algunos ejemplos de comparadores que permite la biblioteca kotest-assertions-core:</p> <pre><code>// verify actual object is equal to expected object\nresult.shouldBe(expected)\n\n// verify actual expression is true\nresult.shouldBeTrue()\n\n// verify actual object is of given type\nresult.shouldBeTypeOf&lt;Double&gt;()\n\n// verify actual map contains the given key\nresult.shouldContainKey(key)\n\n// verify actual map contains the given values\nresult.shouldContainValues(values)\n\n// verify actual string contains the given substring\nresult.shouldContain(\"substring\")\n\n// verify actual string is equal to the given string ignoring case\nresult.shouldBeEqualIgnoringCase(otherString)\n\n// verify actual file should have the given size\nresult.shouldHaveFileSize(size)\n\n// verify actual date is after the given date\nresult.shouldBeBefore(otherDate)Copiar\n</code></pre> <p>Adem\u00e1s del m\u00f3dulo principal de aserciones, existen otros m\u00f3dulos que proporcionan comparadores para una amplia variedad de escenarios, por ejemplo, comparadores JSON, coincidencias JDBC, etc, y por supuesto tienen muchas m\u00e1s opciones que deber\u00edamos revisar buscando aquellas que necesitamos para nuestro test.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#5-pruebas-de-excepciones","title":"5. Pruebas de excepciones","text":"<p>Por otro lado, probar excepciones con Kotest es muy sencillo:</p> <pre><code>val exception = shouldThrow&lt;ValidationException&gt; {\n   // test code\n}\nexception.message should startWith(\"Invalid input\")\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#6-ganchos-de-ciclo-de-vida","title":"6. Ganchos de ciclo de vida","text":"<p>Podemos usar ganchos de ciclo de vida para configurar o desmontar el escenario necesario de objetos antes o despu\u00e9s de las pruebas. Estos ganchos son muy similares a los m\u00e9todos de instalaci\u00f3n y desmontaje del framework Junit. Veamos un ejemplo:</p> <pre><code>class TransactionStatementSpec : ShouldSpec({\n    beforeTest {\n      // add transactions. Se ejecutar\u00e1 antes del test\n    }\n    afterTest { (test, result) -&gt;\n      // delete transactions. Se ejecutar\u00e1 despu\u00e9s del test\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#7-pruebas-basadas-en-datos","title":"7. Pruebas basadas en datos","text":"<p>Las pruebas basadas en datos en Kotest son similares a las pruebas parametrizadas en Junit5. Podemos proporcionar varias entradas a un solo caso de prueba para verificar diferentes ejemplos en lugar de escribir varias pruebas con solo datos de entrada diferentes. Podemos usar la funci\u00f3n <code>useData</code> de la biblioteca kotest-framework-datatest-jvm para proporcionar datos a las pruebas.</p> <p>Veamos un ejemplo:</p> <pre><code>data class TaxTestData(val income: Long, val taxClass: TaxClass, val expectedTaxAmount: Long)\n\nclass IncomeTaxTests : FunSpec({\n    withData(\n      TaxTestData(1000, ONE, 300),\n      TaxTestData(1000, TWO, 350),\n      TaxTestData(1000, THREE, 200)\n    ) { (income, taxClass, expectedTaxAmount) -&gt;\n        calculateTax(income, taxClass) shouldBe expectedTaxAmount\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#8-pruebas-no-deterministas","title":"8. Pruebas no deterministas","text":"<p>A veces, necesitamos probar funciones que no devuelven resultados sincr\u00f3nicamente. Desafortunadamente, es complicado probar tales funciones, ya que tenemos que escribir c\u00f3digo especial para esperar los resultados utilizando t\u00e9cnicas como funciones callback o dormir el hilo.</p> <p>Kotest proporciona algunas funciones \u00fatiles que podemos usar para escribir este tipo de pruebas no deterministas de forma declarativa.</p> <p>Veamos un ejemplo de la funci\u00f3n <code>eventually</code> :</p> <pre><code>class TransactionTests : ShouldSpec({\n    val transactionRepo = TransactionRepo()\n\n    should(\"Should make transaction complete\") {\n        eventually({\n            duration = 5000\n            interval = FixedInterval(1000)\n        }) {\n            transactionRepo.getStatus(120) shouldBe \"COMPLETE\"\n        }\n    }\n})\n</code></pre> <p>Aqu\u00ed, nuestra prueba verificar\u00e1 el estado de la transacci\u00f3n <code>transactionRepo.getStatus</code> cada segundo, hasta llegar a 5 segundos.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#9-mocking","title":"9. Mocking","text":"<p>Podemos integrar cualquier biblioteca de simulaci\u00f3n como mockk con Kotest, biblioteca que veremos mas adelante. Kotest no proporciona su propia biblioteca de simulaci\u00f3n:</p> <pre><code>class ExchangeServiceTest : FunSpec({\n    val exchangeRateProvider = mockk&lt;ExchangeRateProvider&gt;()\n    val service = ExchangeService(exchangeRateProvider)\n\n    test(\"Exchanges money using rate from exchange rate service\") {\n        every { exchangeRateProvider.rate(\"USDEUR\") } returns 0.9\n        service.exchange(Money(1200, \"USD\"), \"EUR\") shouldBe 1080\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#10-cobertura-de-pruebas","title":"10. Cobertura de pruebas","text":"<p>Podemos integrar Jacoco con Kotest para medir la cobertura de la prueba. Para integrar, debemos asegurarnos de que los informes de cobertura de prueba se generen despu\u00e9s de ejecutar las pruebas unitarias:</p> <pre><code>tasks.test {\n    finalizedBy(tasks.jacocoTestReport)\n}\n</code></pre> <p>Podemos encontrar el informe HTML de cobertura de prueba dentro del directorio <code>$buildDir/reports/jacoco/test</code> .</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#11-agrupacion-de-pruebas-con-etiquetas","title":"11. Agrupaci\u00f3n de pruebas con etiquetas","text":"<p>A veces, queremos ejecutar solo ciertas pruebas en un entorno espec\u00edfico. Por ejemplo, es posible que deseemos evitar ejecutar algunas pruebas lentas como parte de la verificaci\u00f3n de una pull request git. Para hacer eso, primero debemos etiquetar nuestras pruebas:</p> <pre><code>@Tags(NamedTag(\"SlowTest\"))\nclass SlowTests : ShouldSpec({})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#12-conclusion","title":"12. Conclusi\u00f3n","text":"<p>Se han visto varias funcionalidades b\u00e1sicas proporcionadas por el marco Kotest. y los ejemplos de c\u00f3digo se pueden encontrar en GitHub.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#recursos","title":"Recursos","text":"<ul> <li>\u00bfC\u00f3mo elaborar casos de prueba?</li> <li>Test unitario avanzado</li> </ul>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#fuente","title":"Fuente","text":"<ul> <li>Introduction to Kotest</li> </ul>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/","title":"UD 3 - 3.4 Mockk","text":"","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#mockk-una-biblioteca-burlona-para-kotlin","title":"MockK: una biblioteca burlona para Kotlin","text":"","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#1-informacion-general","title":"1. Informaci\u00f3n general","text":"<p>Vamos a revisar algunas de las funciones b\u00e1sicas de la biblioteca  MockK.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#2-mockk","title":"2. MockK","text":"<p>En Kotlin, todas las clases y m\u00e9todos son finales.  Si bien esto nos ayuda a escribir c\u00f3digo inmutable, tambi\u00e9n causa algunos problemas durante las pruebas.</p> <p>La mayor\u00eda de las bibliotecas que simulan objetos (mock) que se usan en JVM tienen problemas con las clases finales usadas para mocking or stubbing. Por supuesto, podemos agregar la palabra clave <code>open</code> a las clases y m\u00e9todos que queremos \"mockear\" (simular). Pero cambiar el c\u00f3digo solo para poder mockearla no parece el mejor enfoque.</p> <p>La biblioteca MockK ofrece compatibilidad con las caracter\u00edsticas y construcciones del lenguaje Kotlin.  MockK construye proxies para las clases mockeadas. Esto provoca cierta degradaci\u00f3n del rendimiento, pero los beneficios generales que nos brinda MockK valen la pena.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#3-instalacion","title":"3. Instalaci\u00f3n","text":"<p>La configuraci\u00f3n del proyecto consiste en a\u00f1adir las dependencias de mockk al fichero <code>build.gradle.kts</code></p> <pre><code>var mockKVersion = \"1.13.4\"\n\ndependencies {\n    testImplementation(\"io.mockk:mockk:$mockKVersion\")\n}\n</code></pre> <p>Ten en cuenta que estamos estableciendo la version <code>1.13.4</code>, en el repositorio Maven  puedes consultar cu\u00e1l es la \u00faltima versi\u00f3n.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#4-ejemplo-basico","title":"4. Ejemplo b\u00e1sico","text":"<p>Vamos a crear un servicio que podremos usar como ejemplo para \"mockear\" (simular) su funcionamiento:</p> <pre><code>class TestableService {\n    fun getDataFromDb(testParameter: String): String {\n        // query database and return matching value\n    }\n\n    fun doSomethingElse(testParameter: String): String {\n        return \"I don't want to!\"\n    }\n}\n</code></pre> <p>Aqu\u00ed hay un test de ejemplo que mockea <code>TestableService</code>:</p> <p><pre><code>@Test\nfun givenServiceMock_whenCallingMockedMethod_thenCorrectlyVerified() {\n    // given\n    val service = mockk&lt;TestableService&gt;()\n    every { service.getDataFromDb(\"Expected Param\") } returns \"Expected Output\"\n\n    // when\n    val result = service.getDataFromDb(\"Expected Param\")\n\n    // then\n    verify { service.getDataFromDb(\"Expected Param\") }\n    assertEquals(\"Expected Output\", result)\n}\n</code></pre> Revisando las partes mas importantes del c\u00f3digo anterior:    </p> <ul> <li>Para definir el objeto mockeado <code>TestableService</code>, hemos usado el m\u00e9todo <code>mockk&lt;\u2026&gt;()</code>.    </li> <li>En el siguiente paso, definimos el comportamiento de nuestro objeto mockeado <code>TestableService</code>. Para este prop\u00f3sito, hemos creado un bloque <code>every</code> que describe qu\u00e9 respuesta debe devolverse <code>returns \"Expected\"</code> para qu\u00e9 llamada y con qu\u00e9 argumento. Es decir, el resultado que devolver\u00e1 cuando se llame al m\u00e9todo <code>service.getDataFromDb</code> y con un argumento concreto <code>(\"Expected Param\")</code> </li> <li>Finalmente, usamos el bloque de <code>verify</code> para verificar si el simulacro se invoc\u00f3 como esper\u00e1bamos, siendo verificado si al menos se ha invocado una vez el m\u00e9todo <code>service.getDataFromDb(\"Expected Param\")</code>.</li> </ul>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#5-ejemplo-de-uso-de-las-anotaciones","title":"5. Ejemplo de uso de las anotaciones","text":"<p>Es posible usar las anotaciones MockK <code>@MockK</code> para crear todo tipo de objetos mocks. Vamos a crear un servicio que requiera de dos instancias de nuestro <code>TestableService</code>:</p> <pre><code>class InjectTestService {\n    lateinit var service1: TestableService\n    lateinit var service2: TestableService\n\n    fun invokeService1(): String {\n        return service1.getDataFromDb(\"Test Param\")\n    }\n}\n</code></pre> <p>El servicio que hemos creado, <code>InjectTestService</code>, contiene dos variables de instancia del mismo tipo. Esto no ser\u00e1 un problema para MockK, ya que MockK intenta hacer coincidir las propiedades por nombre y luego por clase o superclase. Adem\u00e1s, tampoco tiene problema con la inyecci\u00f3n de objetos en campos privados.</p> <p>Vamos a mockear el servicio <code>InjectTestService</code> en el siguiente test haciendo uso de las anotaciones:</p> <pre><code>class AnnotationMockKUnitTest {\n\n    @MockK\n    lateinit var service1: TestableService\n\n    @MockK\n    lateinit var service2: TestableService\n\n    @InjectMockKs\n    var objectUnderTest = InjectTestService()\n\n    @BeforeEach\n    fun setUp() = MockKAnnotations.init(this)\n\n    // Tests here\n    ...\n}\n</code></pre> <p>Revisemos lo m\u00e1s importante del c\u00f3digo anterior:   </p> <ul> <li>Con la anotaci\u00f3n <code>@MoockK</code>, hemos definido (marcdo para crear) los objetos mocks <code>service1</code> y <code>service2</code> que vamos a inyectar en el servicio <code>objectUnderTest</code>.    </li> <li>Hemos usado la anotaci\u00f3n <code>@InjectMockKs</code> para especificar el objeto <code>objectUnderTest</code> donde se deben inyectar los objetos mocks definidos.   </li> <li>Por defecto, los objetos mocks se inyectan en variables que a\u00fan no est\u00e1n asignadas. Aunque, podemos usar <code>@OverrideMockKs</code> para anular campos que ya tienen un valor.</li> <li>Por \u00faltimo, MockK requiere que se llame a <code>MockKAnnotations.init(\u2026)</code> en el objeto que declara variables con anotaciones. Para Junit5, se puede reemplazar con <code>@ExtendWith(MockKExtension::class)</code>.</li> </ul>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#6-spy","title":"6. Spy","text":"<p><code>Spy</code> permite en un objeto mezclar el comportamiento de objetos reales y mockeados, es decir, mockear solo una parte particular de alguna clase. Por ejemplo, se puede usar para simular un m\u00e9todo espec\u00edfico del servicio  <code>TestableService</code>, el resto del servicio funcionar\u00e1 como se defini\u00f3. Si no se define un comportamiento nuevo, el objeto entero funcionara como se defini\u00f3 en su clases, pero podremos usar sobre \u00e9l verificaciones haciendo uso de <code>verify</code>. Veamos el ejemplo:</p> <pre><code>@Test\nfun givenServiceSpy_whenMockingOnlyOneMethod_thenOtherMethodsShouldBehaveAsOriginalObject() {\n    // given\n    val service = spyk&lt;TestableService&gt;()\n    every { service.getDataFromDb(any()) } returns \"Mocked Output\"\n\n    // when checking mocked method\n    val firstResult = service.getDataFromDb(\"Any Param\")\n\n    // then\n    assertEquals(\"Mocked Output\", firstResult)\n\n    // when checking not mocked method\n    val secondResult = service.doSomethingElse(\"Any Param\")\n\n    // then\n    assertEquals(\"I don't want to!\", secondResult)\n}\n</code></pre> <p>Revisemos lo m\u00e1s importante del c\u00f3digo anterior:   </p> <ul> <li>Hemos usado el m\u00e9todo <code>spyk</code> para crear un objeto spyk (esp\u00eda) de la clase <code>TestableService</code>.  </li> <li>Tambi\u00e9n hemos usado <code>every</code> para definir el comportamiento del m\u00e9todo que nos interesa, en concreto <code>service.getDataFromDb(any())</code>, como vimos en ejemplos anteriores.</li> </ul> <p>Tambi\u00e9n podemos haber usado la anotaci\u00f3n <code>@SpyK</code> para lograr lo mismo que hicimos con la anotaci\u00f3n <code>@MockK</code>. Veamos un ejemplo:</p> <pre><code>class SpyKUnitTest {\n\n    @SpyK\n    lateinit var service: TestableService\n\n    // Tests here\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#7-mockeado-relajado","title":"7. Mockeado relajado","text":"<p>Un objeto mock t\u00edpico lanzar\u00e1 la excepci\u00f3n <code>MockKException</code> si intentamos llamar a un m\u00e9todo donde no se ha especificado el valor de retorno, es decir, en donde no hayamos definido un comportamiento simulado.</p> <p>Si no queremos describir el comportamiento de cada m\u00e9todo, podemos usar un proceso de mockeado relajado. Este tipo de mockeado proporciona valores predeterminados para cada funci\u00f3n. Por ejemplo, el tipo de retorno <code>String</code> devolver\u00e1 un <code>String</code> vac\u00edo. He aqu\u00ed un breve ejemplo:</p> <pre><code>@Test\nfun givenRelaxedMock_whenCallingNotMockedMethod_thenReturnDefaultValue() {\n    // given\n    val service = mockk&lt;TestableService&gt;(relaxed = true)\n\n    // when\n    val result = service.getDataFromDb(\"Any Param\")\n\n    // then\n    assertEquals(\"\", result)\n}\n</code></pre> <p>En el ejemplo, hemos usado el m\u00e9todo <code>mockk</code> con el argumento <code>relaxed = True</code> para crear un objeto mockeado relajado. Tambi\u00e9n podr\u00edamos haber usado la anotaci\u00f3n <code>@RelaxedMockK</code>:</p> <pre><code>class RelaxedMockKUnitTest {\n\n    @RelaxedMockK\n    lateinit var service: TestableService\n\n    // Tests here\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#8-mockeado-de-objetos","title":"8. Mockeado de objetos","text":"<p>Kotlin proporciona una manera f\u00e1cil de declarar un singleton usando la palabra clave <code>object</code>:</p> <pre><code>object TestableService {\n    fun getDataFromDb(testParameter: String): String {\n        // query database and return matching value\n    }\n}\n</code></pre> <p>La mayor\u00eda de las bibliotecas para crear objetos mocks tienen un problema con el mockeado las instancias de objetos singleton de Kotlin. Para resolver esto, MockK proporciona el m\u00e9todo <code>mockkObject</code>.  Un ejemplo de uso:</p> <pre><code>@Test\nfun givenObject_whenMockingIt_thenMockedMethodShouldReturnProperValue(){\n    // given\n    mockkObject(TestableService)\n\n    // when calling not mocked method\n    val firstResult = service.getDataFromDb(\"Any Param\")\n\n    // then return real response\n    assertEquals(/* DB result */, firstResult)\n\n    // when calling mocked method\n    every { service.getDataFromDb(any()) } returns \"Mocked Output\"\n    val secondResult = service.getDataFromDb(\"Any Param\")\n\n    // then return mocked response\n    assertEquals(\"Mocked Output\", secondResult)\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#9-mockeado-jerarquico","title":"9. Mockeado jer\u00e1rquico","text":"<p>Otra caracter\u00edstica \u00fatil de MockK es la capacidad de mockear objetos jer\u00e1rquicos. Parar entenderlo, primero, creemos una estructura de objeto jer\u00e1rquica:</p> <pre><code>class Foo {\n    lateinit var name: String\n    lateinit var bar: Bar\n}\n\nclass Bar {\n    lateinit var nickname: String\n}\n</code></pre> <p>La clase <code>Foo</code> contiene un campo de tipo <code>Bar</code>. Ahora, podemos mockear la estructura en un solo paso. Vamos a mockear los campos <code>name</code> y <code>bar</code>:</p> <pre><code>@Test\nfun givenHierarchicalClass_whenMockingIt_thenReturnProperValue() {\n    // given\n    val foo = mockk&lt;Foo&gt; {\n        every { name } returns \"Karol\"\n        every { bar } returns mockk {\n            every { nickname } returns \"Tomato\"\n        }\n    }\n\n    // when\n    val name = foo.name \n    val nickname = foo.bar.nickname\n\n    // then\n    assertEquals(\"Karol\", name)\n    assertEquals(\"Tomato\", nickname)\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#10-captura-de-argumentos","title":"10. Captura de argumentos","text":"<p>Si necesitamos capturar los valores de los par\u00e1metros pasados a un m\u00e9todo, podemos usar <code>CapturingSlot</code> o <code>MutableList</code>. Es \u00fatil cuando queremos tener alguna l\u00f3gica personalizada en un bloque <code>answers</code> o simplemente necesitamos verificar el valor de los par\u00e1metros pasados. Aqu\u00ed hay un ejemplo de <code>CapturingSlot</code>:</p> <pre><code>@Test\nfun givenMock_whenCapturingParamValue_thenProperValueShouldBeCaptured() {\n    // given\n    val service = mockk&lt;TestableService&gt;()\n    val slot = slot&lt;String&gt;()\n    every { service.getDataFromDb(capture(slot)) } returns \"Expected Output\"\n\n    // when\n    service.getDataFromDb(\"Expected Param\")\n\n    // then\n    assertEquals(\"Expected Param\", slot.captured)\n}Copiar\n</code></pre> <p><code>MutableList</code> se puede usar para capturar y almacenar todos los valores tomados por el par\u00e1metro en las distintas invocaciones del m\u00e9todo:</p> <pre><code>@Test\nfun givenMock_whenCapturingParamsValues_thenProperValuesShouldBeCaptured() {\n    // given\n    val service = mockk&lt;TestableService&gt;()\n    val list = mutableListOf&lt;String&gt;()\n    every { service.getDataFromDb(capture(list)) } returns \"Expected Output\"\n\n    // when\n    service.getDataFromDb(\"Expected Param 1\")\n    service.getDataFromDb(\"Expected Param 2\")\n\n    // then\n    assertEquals(2, list.size)\n    assertEquals(\"Expected Param 1\", list[0])\n    assertEquals(\"Expected Param 2\", list[1])\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#11-funciones-stubbing-que-retornan-unit","title":"11. Funciones Stubbing que retornan Unit","text":"<p>Un stub es, en el contexto del testeo del software, un trozo de c\u00f3digo usado como sustituto de alguna otra funcionalidad. Un stub puede simular el comportamiento de c\u00f3digo existente (tal como un procedimiento en una m\u00e1quina remota) o ser el sustituto temporal para un c\u00f3digo a\u00fan no desarrollado. Los stubs son, por tanto, muy \u00fatiles para porting, computaci\u00f3n distribuida as\u00ed como en el desarrollo y pruebas de software en general.</p> <p>En Kotlin, si el tipo de retorno de una funci\u00f3n es <code>Unit</code>, significa que la funci\u00f3n no devuelve nada. Es bastante similar al m\u00e9todo <code>void</code> de Java.</p> <p>Para ejemplificarlo, agreguemos una funci\u00f3n que retorna <code>Unit</code> a la clase <code>TestableService</code>:</p> <pre><code>fun addHelloWorld(strList: MutableList&lt;String&gt;) {\n    println(\"addHelloWorld() is called\")\n    strList += \"Hello World!\"\n}\n</code></pre> <p>Como muestra el c\u00f3digo anterior, cuando se llama a la funci\u00f3n <code>addHelloWorld()</code>, imprime una l\u00ednea en la consola.  Luego, el <code>String</code> <code>\"Hello World\"</code> se agrega al objeto <code>MutableList&lt;String&gt;</code> recibido por par\u00e1metro.</p> <p>En esta secci\u00f3n, vamos a ver c\u00f3mo hacer un stub de una funci\u00f3n que devuelve <code>Unit</code>. Por lo general, dependiendo de diferentes circunstancias, queremos controlar un stub de una funci\u00f3n que retorna <code>Unit</code> de dos maneras:</p> <ul> <li>hacer que la llamada a la funci\u00f3n no haga nada, o en otras palabras, omitir la ejecuci\u00f3n de la funci\u00f3n</li> <li>llamando a la funci\u00f3n real</li> </ul> <p>A continuaci\u00f3n, usaremos la funci\u00f3n <code>addHelloWorld()</code> como ejemplo y veremos c\u00f3mo lograrlo usando MockK.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#111-hacer-que-la-funcion-no-haga-nada","title":"11.1. Hacer que la funci\u00f3n no haga nada","text":"<p>Hay varias formas de omitir la ejecuci\u00f3n de una funci\u00f3n que retorna <code>Unit</code> usando MockK:</p> <pre><code>every { addHelloWorld(any()) } returns Unit\nevery { addHelloWorld(any()) } answers { Unit }\nevery { addHelloWorld(any()) } just runs\n</code></pre> <p>Algunas de ellas no son nuevas para nosotros - <code>returns \u2026</code>  - <code>answers {\u2026}</code>,  - y el \u00faltimo, <code>every {... } just runs</code> es f\u00e1cil de entender.</p> <p>Entonces, primero probemos si se puede omitir la ejecuci\u00f3n de la funci\u00f3n original y luego entendamos c\u00f3mo funciona <code>just runs</code>:</p> <pre><code>@Test\nfun givenServiceMock_whenCallingMethodReturnsUnit_thenCorrectlyVerified() {\n    // given\n    val service = mockk&lt;TestableService&gt;()\n    val myList = mutableListOf&lt;String&gt;()\n\n    // when\n    every { service.addHelloWorld(any()) } just runs\n    service.addHelloWorld(myList)\n\n    // then\n    assertTrue(myList.isEmpty())\n}\n</code></pre> <p>Como muestra el c\u00f3digo anterior:   </p> <ul> <li>Agregamos la funci\u00f3n <code>addHelloWorld()</code> usando <code>just runs</code>.  </li> <li>Luego, llamamos a la funci\u00f3n y le pasamos una <code>MutableList</code> vac\u00eda.  </li> <li>Por \u00faltimo, si hemos conseguido omitir la ejecuci\u00f3n de la funci\u00f3n con \u00e9xito, despu\u00e9s de la invocaci\u00f3n de la funci\u00f3n, la cadena <code>\u201cHello World!\u201d</code> no debe aparecer en la lista pasada como par\u00e1metro a la funci\u00f3n, y por tanto el test deber\u00e1 dar ok.  </li> </ul> <p>Ahora entendamos c\u00f3mo <code>just runs</code> omite la llamada de la funci\u00f3n real. Primero, echemos un vistazo a la implementaci\u00f3n de la funci\u00f3n <code>just()</code>:</p> <pre><code>infix fun MockKStubScope&lt;Unit, Unit&gt;.just(runs: Runs) = answers(ConstantAnswer(Unit))\n</code></pre> <p>Como podemos ver, <code>just</code> es una funci\u00f3n <code>infix</code> (infija). Por lo tanto, podemos escribir <code>just(runs)</code> como una forma mas f\u00e1cil de leer:<code>just runs</code>. Adem\u00e1s, <code>Runs</code> es un objeto dummy, y <code>runs</code> es simplemente un <code>typealias</code> de <code>Runs</code>:</p> <pre><code>object Runs\ntypealias runs = Runs\n</code></pre> <p>Por \u00faltimo, si creamos un stub de una funci\u00f3n que retorna <code>Unit</code> como  <code>just runs</code>, se llama a la funci\u00f3n <code>answers()</code>  y retorna una constante: <code>Unit</code>.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#112-llamar-a-la-funcion-original","title":"11.2. Llamar a la funci\u00f3n original","text":"<p>Ahora, veamos c\u00f3mo crear un stub de una funci\u00f3n que retorna <code>Unit</code> para hacer que llame a la funci\u00f3n real.  Para llamar a la funci\u00f3n original, podemos usar este enfoque:  <code>every { \u2026 } answers { callOriginal() }</code></p> <p>A continuaci\u00f3n, veamos c\u00f3mo se usa en una prueba real:</p> <pre><code>@Test\nfun givenServiceMock_whenCallingOriginalMethod_thenCorrectlyVerified() {\n    // given\n    val service = mockk&lt;TestableService&gt;()\n    val myList = mutableListOf&lt;String&gt;()\n\n    // when\n    every { service.addHelloWorld(any()) } answers { callOriginal() }\n    service.addHelloWorld(myList)\n\n    // then\n    assertEquals(1, myList.size)\n    assertEquals(\"Hello World!\", myList.first())\n}\n</code></pre> <p>El test es ok tras de ejecutarlo. Entonces, <code>\u201cHello World!\u201d</code>  se agrega a <code>myList</code> despu\u00e9s de llamar a la funci\u00f3n.  Sin embargo, podemos preguntarnos: si creamos un stub de una funci\u00f3n y le pedimos que llame a la implementaci\u00f3n original, \u00bfpor qu\u00e9 nos molestamos en crear el stub?</p> <p>A continuaci\u00f3n, veamos un ejemplo de cu\u00e1ndo es \u00fatil.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#113-cuando-necesitamos-calloriginal","title":"11.3. \u00bfCu\u00e1ndo necesitamos <code>callOriginal()</code>?","text":"<p>Digamos que en nuestra prueba, queremos llamar a la funci\u00f3n <code>addHelloWorld()</code> con diferentes par\u00e1metros. Si la lista que se le pasa a la funci\u00f3n contiene la cadena <code>\"Kai\"</code>, queremos llamar a la funci\u00f3n real.  De lo contrario, nos gustar\u00eda omitir la llamada a la funci\u00f3n:</p> <pre><code>@Test\nfun givenServiceMock_whenStubbingTwoScenarios_thenCorrectlyVerified() {\n    // given\n    val service = mockk&lt;TestableService&gt;()\n    val kaiList = mutableListOf(\"Kai\")\n    val emptyList = mutableListOf&lt;String&gt;()\n\n    // when\n    every { service.addHelloWorld(any()) } just runs\n    every { service.addHelloWorld(match { \"Kai\" in it }) } answers { callOriginal() }\n\n    service.addHelloWorld(kaiList)\n    service.addHelloWorld(emptyList)\n\n    // then\n    assertEquals(listOf(\"Kai\", \"Hello World!\"), kaiList)\n    assertTrue(emptyList.isEmpty())\n}\n</code></pre> <p>Como podemos ver en el c\u00f3digo anterior, agregamos la funci\u00f3n <code>addHelloWorld()</code> dos veces, seg\u00fan nuestros requisitos.  Por lo tanto, <code>callOriginal()</code> nos permite decidir el comportamiento de los stubings de forma flexible.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#12-conclusion","title":"12. Conclusi\u00f3n","text":"<p>Se han visto algunas de las caracter\u00edsticas m\u00e1s importantes de MockK. MockK es una poderosa biblioteca para el lenguaje Kotlin y proporciona muchas caracter\u00edsticas \u00fatiles. Para m\u00e1s informaci\u00f3n sobre MockK, podemos consultar la  documentaci\u00f3n en la web de MockK.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#recursos","title":"Recursos","text":"<ul> <li>\u00bfQue es un Stub?</li> <li>Mock Object</li> <li>Stub, Spy, Mock</li> <li>\u00bfQu\u00e9 es TDD?</li> <li>\u00bfC\u00f3mo elaborar casos de prueba?</li> <li>Test unitario avanzado</li> <li>Dise\u00f1o de Software</li> </ul>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#fuente","title":"Fuente","text":"<ul> <li>MockK: A Mocking Library for Kotlin</li> <li>MockK Guidebook</li> </ul>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/","title":"UD 3 - 3.3 Depuraci\u00f3n","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#depuracion","title":"Depuraci\u00f3n","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#1-introduccion-a-la-depuracion","title":"1. Introducci\u00f3n a la Depuraci\u00f3n","text":"<p>Una de las habilidades m\u00e1s importantes que adquirir\u00e1 cuando est\u00e9 aprendiendo a programar es la depuraci\u00f3n. Aunque puede ser frustrante, la depuraci\u00f3n es una de las partes m\u00e1s intelectualmente gratificantes, desafiantes e interesantes de la programaci\u00f3n.</p> <p>La depuraci\u00f3n puede ser vista como un trabajo de detective. El programador se enfrenta a pistas y tiene que inferir los procesos y eventos que generaron los resultados que ve.</p> <p>La depuraci\u00f3n tambi\u00e9n es como una ciencia experimental. Una vez que se tiene una idea de lo que est\u00e1 mal, se modifica el programa y se intenta nuevamente. Si la hip\u00f3tesis era correcta, se puede predecir el resultado de la modificaci\u00f3n y as\u00ed estar un paso m\u00e1s cerca de un programa totalmente funcional. Si la hip\u00f3tesis era incorrecta, se tiene que encontrar una nueva. Como Sherlock Holmes se\u00f1al\u00f3:</p> <p>Cuando todo aquello que es imposible ha sido eliminado, lo que quede, por muy improbable que parezca, es la verdad. \u2014 A. Conan Doyle</p> <p>Para algunas personas, la programaci\u00f3n y la depuraci\u00f3n son lo mismo. Es decir, la programaci\u00f3n es el proceso de depurar gradualmente un programa hasta que haga lo que desea. Lo ideal es comenzar con un programa que funcione y hacer peque\u00f1as modificaciones, depur\u00e1ndolas a medida que avanza.</p> <p>A medida que comience a escribir programas m\u00e1s extensos, es posible que pase m\u00e1s tiempo depurando. M\u00e1s c\u00f3digo significa m\u00e1s posibilidades de cometer un error y m\u00e1s lugares d\u00f3nde se pueden esconder los errores.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#11-que-es-la-depuracion","title":"1.1. \u00bfQu\u00e9 es la depuraci\u00f3n?","text":"<p>La depuraci\u00f3n es el proceso de identificar y corregir errores en el c\u00f3digo software. Es una parte esencial del proceso de desarrollo de software y ayuda a garantizar que el software funcione correctamente.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#12-importancia-de-la-depuracion-en-el-desarrollo-de-software","title":"1.2. Importancia de la depuraci\u00f3n en el desarrollo de software","text":"<p>La depuraci\u00f3n es importante por varias razones:</p> <ul> <li>Ayuda a encontrar errores en el c\u00f3digo: Los errores pueden causar que el software se bloquee, funcione de forma incorrecta o produzca resultados inesperados. La depuraci\u00f3n ayuda a identificar la causa de estos errores y a corregirlos.</li> <li>Mejora la calidad del software: Un software con errores puede ser frustrante para los usuarios y puede da\u00f1ar la reputaci\u00f3n del desarrollador. La depuraci\u00f3n ayuda a mejorar la calidad del software al eliminar los errores.</li> <li>Ahorra tiempo y dinero: Los errores pueden retrasar el lanzamiento del software y aumentar los costes de desarrollo. La depuraci\u00f3n puede ayudar a evitar estos problemas al encontrar y corregir los errores de forma temprana.</li> </ul>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#2-herramientas-de-depuracion","title":"2. Herramientas de depuraci\u00f3n","text":"<p>Existen diferentes herramientas de depuraci\u00f3n disponibles, cada una con sus propias caracter\u00edsticas y ventajas. Algunas de las herramientas de depuraci\u00f3n m\u00e1s comunes incluyen:</p> <ul> <li>Depuradores integrados: La mayor\u00eda de los IDEs modernos incluyen un depurador integrado que permite ejecutar el c\u00f3digo l\u00ednea por l\u00ednea, inspeccionar variables y modificar el valor de las variables en tiempo de ejecuci\u00f3n.</li> <li>Depuradores remotos: Los depuradores remotos permiten depurar c\u00f3digo que se ejecuta en un dispositivo remoto, como un tel\u00e9fono m\u00f3vil o un servidor.</li> <li>Herramientas de an\u00e1lisis de c\u00f3digo est\u00e1tico: Estas herramientas analizan el c\u00f3digo fuente para identificar posibles errores, como errores de sintaxis o l\u00f3gica.</li> </ul>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#3-tecnicas-de-depuracion","title":"3. T\u00e9cnicas de depuraci\u00f3n**","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#31-uso-de-println-y-logging-para-depurar","title":"3.1.  Uso de println y logging para depurar","text":"<p>Muchos programadores principiantes utilizan la t\u00e9cnica de depuraci\u00f3n m\u00e1s simple y efectiva: agregar al programa sentencias de impresi\u00f3n a consola. Por ejemplo, si no est\u00e1 seguro de qu\u00e9 valor tiene una variable, puede imprimirlo en la consola para verlo.</p> <pre><code>fun main() {\n    val x = 5\n    val y = 7\n    val z = x + y\n    println(\"z es $z\")\n}\n</code></pre> <p>Mostrar el valor de <code>z</code> en la consola le permitir\u00e1 ver si el c\u00e1lculo es correcto. Si no lo es, puede mostrar los valores de <code>x</code> e <code>y</code> para ver si son correctos. Si no lo son, puede mostrar los valores de las variables que los inicializan, y as\u00ed sucesivamente. Este tipo de salida se llama trazas.</p> <p>Mostrar la informaci\u00f3n de depuraci\u00f3n en la consola es una t\u00e9cnica efectiva, pero tiene dos desventajas.</p> <ul> <li>La primera es que a veces es dif\u00edcil encontrar el equilibrio entre mostrar demasiada informaci\u00f3n y no mostrar suficiente. Si muestra demasiada informaci\u00f3n, la consola se llenar\u00e1 de mensajes y ser\u00e1 dif\u00edcil encontrar lo que est\u00e1 buscando. Si no muestra suficiente informaci\u00f3n, puede pasar por alto la pista que necesita.</li> <li>La segunda desventaja es que, una vez que haya encontrado y corregido el error, debe eliminar o comentar las sentencias de impresi\u00f3n. Si no lo hace, el programa se llenar\u00e1 de mensajes de depuraci\u00f3n que no necesita. Esto no es un problema en programas peque\u00f1os, pero en programas grandes, puede ser dif\u00edcil recordar qu\u00e9 mensajes de depuraci\u00f3n son importantes y cu\u00e1les no.</li> </ul> <p>El uso de sistemas de registro o logging es una t\u00e9cnica m\u00e1s avanzada que puede ayudar a superar estas desventajas. En lugar de imprimir mensajes en la consola, puede registrarlos en un archivo. Esto le permite controlar la cantidad de informaci\u00f3n que se muestra y le permite activar o desactivar los mensajes de depuraci\u00f3n sin tener que modificar el c\u00f3digo.</p> <p>Los sistemas de registro tambi\u00e9n pueden mostrar mensajes de depuraci\u00f3n en diferentes niveles. Por ejemplo, puede mostrar mensajes de depuraci\u00f3n solo cuando est\u00e1 depurando un programa, pero no cuando est\u00e1 en producci\u00f3n. O puede mostrar mensajes de depuraci\u00f3n solo cuando ocurre un error. O puede mostrar mensajes de depuraci\u00f3n solo cuando ocurre un error y solo en ciertas partes del programa.</p> <p>Los niveles de registro son una forma de controlar la cantidad de informaci\u00f3n que se muestra. Los niveles de registro m\u00e1s comunes son:</p> <ul> <li>DEBUG: mensajes de depuraci\u00f3n que muestran informaci\u00f3n detallada sobre el estado del programa.</li> <li>INFO: mensajes informativos que muestran informaci\u00f3n sobre el estado del programa.</li> <li>WARN: mensajes de advertencia que muestran informaci\u00f3n sobre un posible problema.</li> <li>ERROR: mensajes de error que muestran informaci\u00f3n sobre un problema que ha ocurrido.</li> <li>FATAL: mensajes de error que muestran informaci\u00f3n sobre un problema que ha causado que el programa se detenga.</li> <li>TRACE: mensajes de depuraci\u00f3n que muestran informaci\u00f3n detallada sobre el estado del programa.</li> <li>OFF: no se muestran mensajes de registro.</li> <li>ALL: se muestran todos los mensajes de registro.</li> </ul> <p>los sistemas de registro tambi\u00e9n pueden mostrar mensajes de depuraci\u00f3n en diferentes partes del programa. Por ejemplo, puede mostrar mensajes de depuraci\u00f3n solo en ciertas clases o paquetes. O puede mostrar mensajes de depuraci\u00f3n solo en ciertas partes del programa, como cuando se ejecuta una funci\u00f3n espec\u00edfica.</p> <p>Los lenguajes de programaci\u00f3n modernos suelen tener bibliotecas de registro que facilitan el uso de sistemas de registro. Por ejemplo, Kotlin tiene una biblioteca de registro llamada <code>logback</code>. Esta biblioteca le permite controlar la cantidad de informaci\u00f3n que se muestra y le permite mostrar mensajes de depuraci\u00f3n en diferentes niveles y partes del programa.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#32-depuracion-por-biseccion","title":"3.2. Depuraci\u00f3n por bisecci\u00f3n","text":"<p>Una forma de reducir el tiempo de depuraci\u00f3n es la t\u00e9cnica denominada \"depurar por bisecci\u00f3n\". Por ejemplo, si hay 100 l\u00edneas en su programa y las revisa una a la vez, ser\u00edan 100 revisiones.</p> <p>Es mejor tratar de dividir el problema en dos. Busque en la mitad del programa o un valor intermedio que pueda verificar. Agregue una sentencia de impresi\u00f3n (o algo que permita verificar) y ejecute el programa.</p> <p>Si esta verificaci\u00f3n es incorrecta, debe haber un problema en la primera mitad del programa. Si es correcta, el problema est\u00e1 en la segunda mitad.</p> <p>Cada vez que realiza una verificaci\u00f3n como esta, reduce a la mitad el n\u00famero de l\u00edneas que debe revisar. Despu\u00e9s de seis pasos (que es mucho menos que 100), se reducir\u00eda a una o dos l\u00edneas de c\u00f3digo, al menos en teor\u00eda.</p> <p>En la pr\u00e1ctica, no siempre se conoce d\u00f3nde est\u00e1 la \"mitad del programa\", y no siempre es posible verificarlo. No tiene sentido contar l\u00edneas y encontrar el punto medio exacto. En su lugar, piense en los lugares del programa donde puede haber errores y en los lugares donde es f\u00e1cil verificar. Luego, elija un lugar en donde usted crea que las posibilidades de encontrar un error antes o despu\u00e9s de esta verificaci\u00f3n son m\u00e1s o menos las mismas.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#33-depuracion-de-patito-de-goma","title":"3.3. Depuraci\u00f3n de patito de goma","text":"<p>Otra t\u00e9cnica de depuraci\u00f3n es la \"depuraci\u00f3n del patito de goma\". Si est\u00e1 atascado en un problema, si le explica el problema a otra persona, a veces puede encontrar la respuesta incluso antes de terminar de hacer la pregunta. Generalmente no es necesaria otra persona, incluso se podr\u00eda hablar con un pato de goma. S\u00ed, un patito de goma. Es una t\u00e9cnica que a menudo funciona. Incluso si no resuelve el problema, puede ayudar a aclarar el problema. Este es el origen de la conocida estrategia llamada depuraci\u00f3n del pato de goma. Esto es real, vea https://en.wikipedia.org/wiki/Rubber_duck_debugging.</p> <p>El m\u00e9todo de depuraci\u00f3n del patito de goma es un t\u00e9rmino informal utilizado en ingenier\u00eda de software para describir un m\u00e9todo de revisi\u00f3n de c\u00f3digo. El nombre es una referencia a una historia del libro The Pragmatic Programmer en donde un programador toma un patito de goma y revisa su c\u00f3digo forz\u00e1ndose a s\u00ed mismo a explicarlo, l\u00ednea por l\u00ednea, al pato. Existen otros muchos t\u00e9rminos para esta t\u00e9cnica, que a menudo tienen que ver con objetos inanimados.</p> <p>Muchos programadores han tenido la experiencia de explicar un problema de programaci\u00f3n a alguien m\u00e1s, posiblemente a alguien que no sabe nada sobre programaci\u00f3n, y encontrar la soluci\u00f3n en el proceso de explicar el problema. Al comparar lo que supuestamente hace el c\u00f3digo con lo que hace en realidad, cualquier incongruencia resulta evidente. Usando un objeto inanimado, el programador puede tratar de lograr el mismo efecto sin tener que hablar con otra persona.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#34-checks-de-sanidad-y-consistencia","title":"3.4. Checks de sanidad y consistencia","text":"<p>Los checks de sanidad y consistencia son una forma de depuraci\u00f3n que se realiza durante el desarrollo de software. Estos checks ayudan a prevenir errores l\u00f3gicos y asegurar la coherencia de los datos en tus programas.</p> <p>En el caso de sanity check, imagina una funci\u00f3n que calcula la ra\u00edz cuadrada de un n\u00famero. Un sanity check ser\u00eda verificar que el n\u00famero de entrada no sea negativo antes de realizar el c\u00e1lculo, ya que la ra\u00edz cuadrada de un n\u00famero negativo no es un n\u00famero real en matem\u00e1ticas b\u00e1sicas.</p> <pre><code>fun calcularRaizCuadrada(numero: Double): Double {\n    if (numero &lt; 0) {\n        throw IllegalArgumentException(\"El n\u00famero no puede ser negativo.\")\n    }\n    return kotlin.math.sqrt(numero)\n}\n</code></pre> <p>Para un consistency check, considera una aplicaci\u00f3n que gestiona usuarios y sus roles. Un consistency check asegurar\u00eda que un usuario no se pueda asignar a un rol que no existe en el sistema.</p> <pre><code>fun asignarRolAUsuario(usuario: Usuario, rol: String, rolesValidos: List&lt;String&gt;): Boolean {\n    if (!rolesValidos.contains(rol)) {\n        throw IllegalArgumentException(\"Rol no v\u00e1lido.\")\n    }\n    usuario.rol = rol\n    return true\n}\n</code></pre> <p>Estos ejemplos muestran c\u00f3mo los checks de sanidad y consistencia ayudan a prevenir errores l\u00f3gicos y asegurar la coherencia de los datos en tus programas.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#4-flujos-de-trabajo","title":"4. Flujos de trabajo","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#41-trabajo-con-errores-bugs","title":"4.1 Trabajo con errores (BUGS)","text":"<p>Los errores en el c\u00f3digo software se conocen com\u00fanmente como bugs. Los bugs pueden causar que el software se bloquee, funcione de forma incorrecta o produzca resultados inesperados. Los bugs pueden ser causados por una variedad de razones, como errores de sintaxis, errores l\u00f3gicos o errores de tiempo de ejecuci\u00f3n. La depuraci\u00f3n ayuda a identificar la causa de los bugs y a corregirlos.</p> <p>Los bugs pueden ser dif\u00edciles de encontrar y corregir, especialmente en programas grandes y complejos. La depuraci\u00f3n puede ser un proceso largo y tedioso, pero es una parte esencial del desarrollo de software y ayuda a garantizar que el software sea de alta calidad.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#411-documentacion-de-errores","title":"4.1.1 Documentaci\u00f3n de errores","text":"<p>Un aspecto clave de la depuraci\u00f3n es poder reproducir los errores. Documentar claramente los pasos necesarios para recrear un problema, facilita su localizaci\u00f3n y soluci\u00f3n. La documentaci\u00f3n de errores incluyen:</p> <ul> <li>Una descripci\u00f3n detallada del error, incluyendo el comportamiento esperado y el comportamiento observado.</li> <li>Pasos para reproducir el error, incluyendo cualquier entrada o configuraci\u00f3n necesaria.</li> <li>Informaci\u00f3n sobre el entorno del usuario, roles, permisos, etc.</li> <li>Informaci\u00f3n sobre el entorno en el que se produjo el error, como el sistema operativo, navegador, la versi\u00f3n del software y cualquier otra informaci\u00f3n relevante.</li> <li>Los pasos seguidos por el usuario para llegar al error tambi\u00e9n son importantes, ya que pueden proporcionar pistas sobre la causa del error.</li> <li>Capturas de pantalla o mensajes de error que se produjeron al producirse el error.</li> <li>Cualquier otra informaci\u00f3n que pueda ser \u00fatil para identificar y solucionar el error.</li> </ul>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#412-pasos-para-trabajar-con-errores","title":"4.1.2 Pasos para trabajar con errores","text":"<ol> <li>An\u00e1lisis y exploraci\u00f3n del problema: Dedica tiempo a explorar el problema antes de sumergirte en posibles soluciones. Comprende el \"por qu\u00e9\" del problema para abordarlo de manera eficaz.</li> <li>Planteamiento de hip\u00f3tesis de soluciones: Formula hip\u00f3tesis sobre posibles soluciones y pru\u00e9balas met\u00f3dicamente. Esto te ayudar\u00e1 a reducir la causa ra\u00edz del problema.</li> <li>Pruebas de hip\u00f3tesis: Realiza pruebas para validar o refutar tus hip\u00f3tesis. Esto te ayudar\u00e1 a identificar la soluci\u00f3n m\u00e1s eficaz.</li> <li>Soluci\u00f3n de problemas: Una vez que hayas identificado la causa ra\u00edz del problema, implementa la soluci\u00f3n y verifica que el problema se haya resuelto.</li> </ol>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#42-flujo-de-trabajo-generica","title":"4.2 Flujo de trabajo gen\u00e9rica","text":"<p>Cuando est\u00e1 depurando un programa, y especialmente si est\u00e1 tratando de resolver un error dif\u00edcil, hay cinco cosas que puede probar:</p> <ol> <li>Lee: Examine su c\u00f3digo, l\u00e9alo y verifique que dice lo que quer\u00eda decir.</li> <li>Ejecuta: Experimente haciendo cambios y ejecutando diferentes versiones. A menudo, si muestra lo correcto en el lugar correcto del programa, el problema se vuelve obvio, pero para ello a veces tiene que desarrollar andamiaje.</li> <li>Reflexiona: \u00a1T\u00f3mese un tiempo para pensar! \u00bfQu\u00e9 tipo de error es: de sintaxis, tiempo de ejecuci\u00f3n o sem\u00e1ntica? \u00bfQu\u00e9 informaci\u00f3n puede obtener de los mensajes de error o de la salida del programa? \u00bfQu\u00e9 tipo de error podr\u00eda causar el problema que est\u00e1s viendo? \u00bfQu\u00e9 cambi\u00f3 antes de que apareciera el problema?</li> <li>Prueba t\u00e9cnicas que te permitan encontrar el error. Habla con un pato de goma, usa la depuraci\u00f3n por bisecci\u00f3n, etc.</li> <li>Vuelve atr\u00e1s: En ocasiones, lo mejor que puede hacer es retroceder, deshacer los cambios recientes hasta regresar a un programa que funcione y que comprenda. Una vez logrado esto, puede comenzar a reconstruir.</li> </ol> <p>Los programadores principiantes a veces se atascan en una de estas actividades y olvidan las otras. Cada actividad viene con su propia forma de fallar.</p> <p>Por ejemplo, leer su c\u00f3digo podr\u00eda ayudar si el problema es un error tipogr\u00e1fico, pero no si el problema es un malentendido conceptual. Si no comprende lo que hace su programa, puede leerlo 100 veces y nunca ver el error, porque el error est\u00e1 en su cabeza.</p> <p>Ejecutar experimentos puede ayudar, especialmente si ejecuta pruebas peque\u00f1as y simples, pero si ejecuta experimentos sin pensar o leer su c\u00f3digo, puede caer en un patr\u00f3n llamado \"programaci\u00f3n de caminata aleatoria\", que es el proceso de hacer cambios aleatorios hasta que el programa haga lo correcto. No hace falta decir que la programaci\u00f3n de caminata aleatoria puede llevar mucho tiempo.</p> <p>La persona que programa tiene que tomarse su tiempo para pensar. La depuraci\u00f3n es como una ciencia experimental. Debe tener al menos una hip\u00f3tesis sobre la causa del problema. Si hay dos o m\u00e1s opciones, trate de pensar en una prueba que elimine una de ellas.</p> <p>Incluso las mejores t\u00e9cnicas de depuraci\u00f3n fallar\u00e1n si hay demasiados errores, o si el c\u00f3digo que est\u00e1 tratando de corregir es demasiado grande y complicado. A veces, la mejor opci\u00f3n es volver atr\u00e1s, simplificando el programa hasta que llegue a algo que funcione y que comprenda. Los programadores principiantes a menudo son reacios a volver atr\u00e1s porque no pueden soportar eliminar una l\u00ednea de c\u00f3digo (incluso si es incorrecto). Si le hace sentir mejor copie su programa en otro archivo antes de comenzar a eliminarlo. Luego puede copiar las piezas una por una. O lo que es mejor, utilice un sistema de gesti\u00f3n de versiones para poder recuperar versiones anteriores.</p> <p>Encontrar un error dif\u00edcil requiere leer, ejecutar, reflexionar y, a veces, volver atr\u00e1s. Si se queda atascado en una de estas actividades, pruebe las otras.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#43-flujo-de-trabajo-usando-una-herramienta-de-depuracion","title":"4.3 Flujo de trabajo usando una herramienta de depuraci\u00f3n","text":"<p>El flujo de trabajo de depuraci\u00f3n tipicamente involucra los siguientes pasos:</p> <ol> <li>Identificar el problema: El primer paso es identificar el problema que est\u00e1 causando el error. Esto puede implicar observar el comportamiento del software, revisar los registros de errores o utilizar una herramienta de an\u00e1lisis de c\u00f3digo est\u00e1tico.</li> <li>Establecer un punto de interrupci\u00f3n: Un punto de interrupci\u00f3n es una l\u00ednea de c\u00f3digo en la que el debugger se detendr\u00e1. Esto permite inspeccionar el estado del programa en ese punto espec\u00edfico.</li> <li>Ejecutar el c\u00f3digo l\u00ednea por l\u00ednea: El debugger permite ejecutar el c\u00f3digo l\u00ednea por l\u00ednea, lo que permite observar c\u00f3mo cambia el estado del programa a medida que se ejecuta el c\u00f3digo.</li> <li>Inspeccionar variables: El debugger permite inspeccionar el valor de las variables en cualquier momento. Esto puede ayudar a identificar la causa del error.</li> <li>Modificar el valor de las variables: El debugger permite modificar el valor de las variables en tiempo de ejecuci\u00f3n. Esto puede ser \u00fatil para probar diferentes soluciones al error.</li> <li>Corregir el error: Una vez que se ha identificado la causa del error, se puede corregir el error modificando el c\u00f3digo.</li> </ol>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#5-depuracion-en-kotlin","title":"5. Depuraci\u00f3n en Kotlin","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#51-entorno-de-desarrollo-integrado-ide","title":"5.1. Entorno de desarrollo integrado (IDE)","text":"<p>Se recomienda utilizar un IDE compatible con Kotlin para depurar c\u00f3digo Kotlin. Algunos de los IDEs m\u00e1s populares para Kotlin incluyen:</p> <ul> <li>Android Studio: El IDE oficial para el desarrollo de aplicaciones Android.</li> <li>IntelliJ IDEA: Un IDE popular con soporte para una amplia gama de lenguajes de programaci\u00f3n, incluido Kotlin.</li> <li>Visual Studio Code: Un editor de c\u00f3digo ligero y extensible con soporte para Kotlin.</li> </ul>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#52-puntos-de-interrupcion","title":"5.2. Puntos de interrupci\u00f3n","text":"<p>Los puntos de interrupci\u00f3n se pueden establecer en cualquier l\u00ednea de c\u00f3digo. Para establecer un punto de interrupci\u00f3n, haga clic en el margen izquierdo de la l\u00ednea de c\u00f3digo. Tambi\u00e9n puede usar la tecla F9 para establecer un punto de interrupci\u00f3n en la l\u00ednea de c\u00f3digo actual.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#53-inspeccion-de-variables","title":"5.3. Inspecci\u00f3n de variables","text":"<p>El valor de las variables se puede inspeccionar en el panel de variables del debugger. Este panel muestra el nombre, el tipo y el valor de todas las variables en el \u00e1mbito actual.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#54-pila-de-llamadas","title":"5.4. Pila de llamadas","text":"<p>La pila de llamadas muestra la secuencia de funciones que se han llamado para llegar a la l\u00ednea de c\u00f3digo actual. Esto puede ser \u00fatil para comprender el contexto del error.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#55-modificacion-de-variables-en-tiempo-de-ejecucion","title":"5.5. Modificaci\u00f3n de variables en tiempo de ejecuci\u00f3n","text":"<p>El valor de las variables se puede modificar en el panel de variables del debugger. Esto puede ser \u00fatil para probar diferentes soluciones al error.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#6-depuracion-avanzada","title":"6. Depuraci\u00f3n Avanzada","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#61-usar-el-debugger-para-analizar-expresiones-complejas","title":"6.1. Usar el debugger para analizar expresiones complejas**","text":"<p>El debugger se puede utilizar para analizar expresiones complejas paso a paso. Esto puede ser \u00fatil para comprender c\u00f3mo se eval\u00faa la expresi\u00f3n y para identificar posibles errores.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#62-depuracion-de-codigo-multihilo","title":"6.2. Depuraci\u00f3n de c\u00f3digo multihilo","text":"<p>La depuraci\u00f3n de c\u00f3digo multihilo puede ser compleja, ya que hay que tener en cuenta la interconexi\u00f3n entre los diferentes hilos. Algunas herramientas de depuraci\u00f3n ofrecen funciones espec\u00edficas para la depuraci\u00f3n de c\u00f3digo multihilo, como la posibilidad de ver el estado de cada hilo y de suspender y reanudar hilos individualmente.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#63-depuracion-de-codigo-asincronico","title":"6.3. Depuraci\u00f3n de c\u00f3digo asincr\u00f3nico","text":"<p>La depuraci\u00f3n de c\u00f3digo asincr\u00f3nico tambi\u00e9n puede ser compleja, ya que es dif\u00edcil seguir el flujo de ejecuci\u00f3n del c\u00f3digo. Algunas herramientas de depuraci\u00f3n ofrecen funciones espec\u00edficas para la depuraci\u00f3n de c\u00f3digo asincr\u00f3nico, como la posibilidad de ver la cola de eventos y de ver el estado de las tareas asincr\u00f3nicas.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#64-depuracion-de-pruebas-unitarias","title":"6.4. Depuraci\u00f3n de pruebas unitarias","text":"<p>Las pruebas unitarias son una herramienta importante para la detecci\u00f3n de errores. Las herramientas de depuraci\u00f3n se pueden utilizar para depurar pruebas unitarias de la misma manera que se utilizan para depurar c\u00f3digo normal.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#65-usar-herramientas-de-analisis-de-codigo-estatico","title":"6.5. Usar herramientas de an\u00e1lisis de c\u00f3digo est\u00e1tico","text":"<p>Las herramientas de an\u00e1lisis de c\u00f3digo est\u00e1tico pueden identificar posibles errores en el c\u00f3digo fuente sin necesidad de ejecutar el c\u00f3digo. Esto puede ayudar a encontrar errores en una fase temprana del proceso de desarrollo, lo que puede ahorrar tiempo y esfuerzo.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#7-ejemplos-practicos","title":"7. Ejemplos Pr\u00e1cticos:","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#71-ejemplo-1-depuracion-de-una-excepcion-nullpointerexception","title":"7.1. Ejemplo 1: Depuraci\u00f3n de una excepci\u00f3n NullPointerException","text":"<p>Descripci\u00f3n del problema:</p> <p>El c\u00f3digo tiene la intenci\u00f3n de mostrar obtener la longitud de una cadena. Sin embargo, el c\u00f3digo muestra una excepci\u00f3n. </p> <p>C\u00f3digo incorrecto:</p> <pre><code>fun main() {\n    val str: String? = null\n    println(str.length) // NullPointerException\n}\n</code></pre> <p>Explicaci\u00f3n del error:</p> <p>El error est\u00e1 al no comprobar si el objeto, definido como nulable, es nulo o no. La variable <code>str</code> nunca llega a inicializarse, por tanto, cualquier intento de acceder a ella resultar\u00e1 en <code>NullPointerException</code>.</p> <p>Pasos para la depuraci\u00f3n:</p> <ol> <li>En este caso, se podr\u00eda utilizar un chequeo de sanidad y consistencia</li> <li>Chequee la sanidad de las variables, identificando las posibles variables que pueden llegar a ser nulas.</li> <li>Introduce comprobaciones para evitar acceder a valores nulos.</li> </ol>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#72-ejemplo-2-depuracion-de-un-error-de-tipo","title":"7.2. Ejemplo 2: Depuraci\u00f3n de un error de tipo.","text":"<p>Descripci\u00f3n del problema:</p> <p>El c\u00f3digo es b\u00e1sico, es el comienzo de un programa en el que se asignan valor a dos variables, y muestra un error.</p> <p>C\u00f3digo incorrecto: <pre><code>fun main() {\n    val num1: Int = 10\n    val num2: Double = num1 // Error de tipo\n}\n</code></pre></p> <p>Explicaci\u00f3n del error:</p> <p>El error est\u00e1 en la l\u00ednea <code>val num2: Double = num1</code>. Ya que se est\u00e1 asignando un <code>Int</code> a un <code>Double</code></p> <p>Pasos para la depuraci\u00f3n:</p> <ol> <li>En este caso, se podr\u00eda usar Depuraci\u00f3n de patito de goma</li> <li>Lea e mensaje de error .</li> <li>Entienda el mensaje y intente explicar a alguien/algo que esta haciendo el c\u00f3digo. </li> <li>Llegar\u00e1 a una inconsistencia que dar\u00e1 lugar a solucionar el error. </li> <li>Modifique la l\u00ednea donde se asigna valores.</li> </ol>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#73-ejemplo-3-depuracion-de-un-error-de-logica","title":"7.3. Ejemplo 3: Depuraci\u00f3n de un error de l\u00f3gica","text":"<p>Descripci\u00f3n del problema:</p> <p>El c\u00f3digo tiene la intenci\u00f3n de calcular el promedio de los n\u00fameros en una lista. Sin embargo, el c\u00f3digo no imprime el valor correcto.</p> <p>C\u00f3digo incorrecto:</p> <pre><code>fun main() {\n    val listaNumeros = listOf(1, 2, 3, 4, 5)\n    var suma = 0\n    var contador = 0\n    for (numero in listaNumeros) {\n        suma = numero\n        contador++\n    }\n    val promedio = suma / contador\n    println(\"El promedio es: $promedio\") // Imprime 0\n}\n</code></pre> <p>Explicaci\u00f3n del error:</p> <p>El error est\u00e1 en la l\u00ednea <code>suma = numero</code>. La variable <code>suma</code> deber\u00eda incrementarse con el valor de cada n\u00famero en la lista, sin embargo se asigna. Esto significa que la variable <code>suma</code> siempre tendr\u00e1, al terminar el bucle for, el ultimo valor de la lista <code>listaNumeros</code>, lo que resultar\u00e1 en un promedio no correcto.</p> <p>Pasos para la depuraci\u00f3n:</p> <ol> <li>Establezca un punto de interrupci\u00f3n dentro del bucle <code>for</code>.</li> <li>Ejecute el c\u00f3digo l\u00ednea por l\u00ednea y observe el valor de las variables.</li> <li>Observe que la variable <code>suma</code> no aumenta, y solo va cambiando de valor.</li> <li>Modifique la l\u00ednea donde se deberia incrementar para que en vez de <code>suma = numero</code>, sea <code>suma += numero</code>.</li> </ol>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#8-conclusion","title":"8. Conclusi\u00f3n","text":"<p>La depuraci\u00f3n es una habilidad esencial para cualquier desarrollador de software. Esta unidad proporcionar\u00e1 a los estudiantes las herramientas y los conocimientos necesarios para depurar c\u00f3digo Kotlin de forma eficaz, lo que les permitir\u00e1 mejorar su productividad y la calidad de su c\u00f3digo.</p>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#9-recursos-y-fuentes","title":"9. Recursos y fuentes","text":"<ul> <li> <p>Documentaci\u00f3n oficial de Kotlin sobre depuraci\u00f3n:</p> </li> <li> <p>Debugging code</p> </li> <li> <p>Using breakpoints</p> </li> <li> <p>Tutoriales y gu\u00edas online:</p> </li> <li> <p>Depuraci\u00f3n en IntelliJ Idea una gu\u00eda para pricipiantes</p> </li> <li>Debugging in IntelliJ Idea a beginners guide</li> <li> <p>Foros y comunidades de desarrolladores:</p> </li> <li> <p>Foro de Kotlin: https://discuss.kotlinlang.org/</p> </li> <li>Stack Overflow: https://stackoverflow.com/questions/tagged/kotlin</li> </ul>","tags":["EDES","Software","Debug"]},{"location":"section3/u04/","title":"UD 3 - Herramientas Git/Github","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Eval\u00faa entornos integrados de desarrollo analizando sus caracter\u00edsticas para editar c\u00f3digo fuente y generar ejecutables.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han instalado entornos de desarrollo, propietarios y libres.</li> <li>b) Se han a\u00f1adido y eliminado m\u00f3dulos en el entorno de desarrollo.</li> <li>c) Se ha personalizado y automatizado el entorno de desarrollo.</li> <li>d) Se ha configurado el sistema de actualizaci\u00f3n del entorno de desarrollo.</li> <li>e) Se han generado ejecutables a partir de c\u00f3digo fuente de diferentes lenguajes en un mismo entorno de desarrollo.</li> <li>f) Se han generado ejecutables a partir de un mismo c\u00f3digo fuente con varios entornos de desarrollo.</li> <li>g) Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.</li> <li>h) Se han identificado las funciones m\u00e1s usuales de las herramientas CASE para el desarrollo, prueba y documentaci\u00f3n de c\u00f3digo.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir esta unidad teniendo en cuenta la normativa del curso</p> <p>La unidad pertenece al bloque 2 Herramientas de desarrollo.</p> <ul> <li>UD2: Entornos de desarrollo integrado</li> </ul> <p>En la unidad 2, veremos:</p> <ul> <li>Entornos de desarrollo integrado. Funcionalidades.</li> <li>Herramientas CASE.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/","title":"UD 4 - P1: Git/Github b\u00e1sico","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#relacion-411-repositorios-local-y-remoto-directorio-de-trabajo","title":"Relaci\u00f3n 4.1.1: Repositorios local y remoto, directorio de trabajo...","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#objetivos","title":"Objetivos","text":"<ul> <li>Crear repositorios en Github</li> <li>Practicar con repositorios locales y remotos</li> <li>Crear commits en un repositorio</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica crearemos nuestro primer repositorio de Github. Para ello, primero habr\u00e1 que crear una cuenta en Github. Crearemos un repositorio de nombre ID_XXXX_my_calculator (mas info abajo, leela antes de crear el respositorio) en dicha cuenta, en el que alojaremos un peque\u00f1o desarrollo de software consistente en una calculadora web. </p> <p>Para comenzar este desarrollo, iniciamos un repositorio de git local. En la rama main se desarrollar\u00e1 en dos commits una calculadora con 2 botones. En el primer commit  se a\u00f1ade la calculadora con el bot\u00f3n x^3, adem\u00e1s de un fichero README.md con un breve texto descriptivo. En el segundo se a\u00f1ade el bot\u00f3n x^4 a la calculadora. </p> <p>Para terminar se sube la rama main del repositorio local al repositorio remoto en Github que hemos creado al principio.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#tareas","title":"Tareas","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-1-creacion-de-repositorio-remoto","title":"Paso 1: Creaci\u00f3n de repositorio remoto","text":"<p>El primer paso a seguir es crear una cuenta en Github, si no se tiene. A continuaci\u00f3n, creamos un nuevo repositorio p\u00fablico vac\u00edo con el nombre \"my_calculator\".</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-2-creacion-de-repositorio-local","title":"Paso 2: Creaci\u00f3n de repositorio local","text":"<p>En un terminal de nuestro ordenador iniciamos un repositorio local de git. Si se tiene el sistema operativo Windows, se recomienda emplear Git Bash como terminal. <pre><code>$ git init my_calculator\n$ cd my_calculator\n</code></pre> y le asignamos el repositorio remoto que acabamos de crear <pre><code>$ git remote add origin git@github.com:&lt;mi usuario de github&gt;/my_calculator.git\n</code></pre></p> <p>Por ejemplo, si tu usuario es <code>pepe</code>, el comando ser\u00eda: <pre><code>$ git remote add origin git@github.com:pepe/my_calculator.git\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-3-anadir-ficheros-al-repositorio","title":"Paso 3: A\u00f1adir ficheros al repositorio","text":"<p>A\u00f1adir al directorio de trabajo un fichero con el nombre \"index.html\". Este fichero contendr\u00e1 una calculadora web con un bot\u00f3n para calcular el cubo del n\u00famero introducido: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> En la etiqueta h1 debes modificar el texto para incluir tu nombre y apellidos</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-4-registrar-cambios","title":"Paso 4: Registrar cambios","text":"<p>A continuaci\u00f3n, hay que registrar los ficheros en el \u00edndice y crear el primer commit en la rama main. Se recuerda que antes de crear un commit hay que probar siempre que el programa que se va a guardar funciona correctamente (en este caso, abri\u00e9ndolo en el navegador web y probando que funciona la calculadora).</p> <pre><code>$ git add index.html # A\u00f1adir el fichero creado\n$ git commit -m \"x^3 button\" # Congelar los cambios en un commit\n$ git log --oneline # Ver la lista de commits\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-5-crear-un-segundo-commit","title":"Paso 5: Crear un segundo commit","text":"<p>Debe crear un segundo commit en la rama en la que est\u00e1 trabajando (main).  El commit debe a\u00f1adir a la calculadora (fichero index.html) un segundo bot\u00f3n (elemento HTML <code>&lt;button ..&gt;</code>) que eleve un n\u00famero a la cuarta potencia (x^4) invocando una funci\u00f3n (power_4 ()) que calcula x^4 al hacer click en \u00e9l.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n            &lt;button onclick=\"power_4()\"&gt; x^4&lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n            function power_4() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 4);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y despu\u00e9s de probar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^4 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-6-subir-el-repositorio-a-github","title":"Paso 6: Subir el repositorio a Github","text":"<p>Para finalizar, hay que subir el repositorio local al repositorio remoto creado en Github inicialmente.</p> <pre><code>$ git push origin main\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL del repositorio a la tarea. </li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li>El nombre del repositorio sera: ID_XXXX_my_calculator donde </li> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> <li>Asegurate que funciona y: </li> <li>20%:  Existe el repositorio ID_XXXX_my_calculator</li> <li>40%:  El primer commit de la rama main es \u201cx^3 button\u201d y contiene lo pedido</li> <li>40%:  El segundo commit de la rama main es \u201cx^4 button\u201d y contiene lo pedido</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/","title":"UD 4 - P2: Git/Github Merge","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#relacion-412-integracion-de-ramas-merge","title":"Relaci\u00f3n 4.1.2: Integraci\u00f3n de ramas - Merge","text":"<p>Versi\u00f3n: 30 de septiembre de 2022</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#objetivos","title":"Objetivos","text":"<ul> <li>Practicar con repositorios locales y remotos</li> <li>Crear ramas</li> <li>Integrar ramas</li> <li>Resolver conflictos</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica se parte del repositorio creado en la entrega anterior, realizando modificaciones sobre el mismo para comenzar a trabajar con ramas de git. Crearemos una rama nueva con un desarrollo paralelo y la integraremos con la rama main resolviendo cualquier conflicto que haya podido surgir.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#tareas","title":"Tareas","text":"<p>Si ha realizado la entrega anterior, puede saltar directamente al paso 7.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-1-creacion-de-repositorio-remoto","title":"Paso 1: Creaci\u00f3n de repositorio remoto","text":"<p>El primer paso a seguir es crear una cuenta en Github, si no se tiene. A continuaci\u00f3n, creamos un nuevo repositorio con el nombre ID_XXXX_my_calculator.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-2-creacion-de-repositorio-local","title":"Paso 2: Creaci\u00f3n de repositorio local","text":"<p>En un terminal de nuestro ordenador iniciamos un repositorio local de git. Si se tiene el sistema operativo Windows, se recomienda emplear Git Bash como terminal. <pre><code>$ git init my_calculator\n$ cd my_calculator\n</code></pre> y le asignamos el repositorio remoto que acabamos de crear <pre><code>$ git remote add origin git@github.com:&lt;mi usuario de github&gt;/my_calculator.git\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-3-anadir-ficheros-al-repositorio","title":"Paso 3: A\u00f1adir ficheros al repositorio","text":"<p>A\u00f1adir al directorio de trabajo un fichero con el nombre \"index.html\". Este fichero contendr\u00e1 una calculadora web con un bot\u00f3n para calcular el cubo del n\u00famero introducido:</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> En la etiqueta h1 debes modificar el texto para incluir tu nombre y apellidos</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-4-registrar-cambios","title":"Paso 4: Registrar cambios","text":"<p>A continuaci\u00f3n, hay que registrar los ficheros en el \u00edndice y crear el primer commit en la rama main. Se recuerda que antes de crear un commit hay que probar siempre que el programa que se va a guardar funciona correctamente (en este caso, abri\u00e9ndolo en el navegador web y probando que funciona la calculadora).</p> <pre><code>$ git add index.html # A\u00f1adir el fichero creado\n$ git commit -m \"x^3 button\" # Congelar los cambios en un commit\n$ git log --oneline # Ver la lista de commits\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-5-crear-un-segundo-commit","title":"Paso 5: Crear un segundo commit","text":"<p>Debe crear un segundo commit en la rama en la que est\u00e1 trabajando (main). El commit debe a\u00f1adir a la calculadora (fichero index.html) un segundo bot\u00f3n (elemento HTML <code>&lt;button ..&gt;</code>) que eleve un n\u00famero a la cuarta potencia (x^4) invocando una funci\u00f3n (power_4 ()) que calcula x^4 al hacer click en \u00e9l.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n            &lt;button onclick=\"power_4()\"&gt; x^4&lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n            function power_4() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 4);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y despu\u00e9s de probar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^4 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-6-subir-el-repositorio-a-github","title":"Paso 6: Subir el repositorio a Github","text":"<p>Para finalizar, hay que subir el repositorio local al repositorio remoto creado en Github inicialmente.</p> <pre><code>$ git push origin main\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-7-crear-nueva-rama","title":"Paso 7: Crear nueva rama","text":"<p>Imaginemos que un miembro de nuestro equipo comenzase el desarrollo de una nueva funcionalidad partiendo de la versi\u00f3n inicial (sin el bot\u00f3n x^4). Para ello, creamos una rama de nombre \"sine\" que salga del primer commit (con mensaje \"x^3 button\") y nos movemos a la rama \"sine\" en el directorio de trabajo, para poder trabajar sobre ella. Primero tenemos que averiguar cual es el id del commit de nombre \"x^3 button\" y despu\u00e9s crear la rama nueva a partir de \u00e9l.</p> <pre><code>$ git log --oneline                  # Ver la lista de commits (incluye &lt;commit_id&gt;, p.e. 71e69ce)\n$ git checkout -b sine &lt;commit_id&gt;   # Crea rama en commit y realiza checkout a rama\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-8-crear-nuevo-commit","title":"Paso 8: Crear nuevo commit","text":"<p>Crear un nuevo commit en la rama sine que a\u00f1ada un segundo bot\u00f3n sin(x) a la calculadora en el fichero index.html (adem\u00e1s del bot\u00f3n x^3 que ya existe). El nuevo bot\u00f3n debe calcular el seno de un n\u00famero utilizando la funci\u00f3n JavaScript:  Math.sin(x).</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n            &lt;button onclick=\"sine()\"&gt; sin &lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n            function sine() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.sin(num.value);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Estando en la rama sine, se a\u00f1ade el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y una vez comprobado que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit con el nombre \"sin(x) button\".</p> <pre><code>$ git add index.html\n$ git commit -m \"sin(x) button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-9-integrar-la-rama-main-en-sine","title":"Paso 9: Integrar la rama \"main\" en \"sine\"","text":"<p>Ahora se debe integrar la rama \"main\" en la rama \"sine\", para crear una calculadora con tres botones: x^3, x^4 y sin(x).</p> <pre><code>$ git merge main\n</code></pre> <p>La integraci\u00f3n tiene conflictos, que se deben resolver con el editor. Una vez resueltos y despu\u00e9s de comprobar que el programa integrado funciona correctamente, se debe finalizar la integraci\u00f3n (merge) creando el commit de integraci\u00f3n.</p> <pre><code>$ git add index.html\n$ git merge --continue # o git commit -m \"Integrate main\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-10-integrar-la-rama-sine-en-main","title":"Paso 10: Integrar la rama \"sine\" en \"main\"","text":"<p>Ahora que la rama \"sine\" est\u00e1 correcta y contiene todas las funcionalidades, podemos integrar los cambios en la rama principal \"main\", Para ello, nos cambiamos a la rama \"main\"</p> <pre><code>git checkout main\n</code></pre> <p>y nos traemos los cambios de \"sine\".</p> <pre><code>git merge sine\n</code></pre> <p>Si queremos podemos ver la historia de integraciones de todas las ramas: <pre><code>git log --oneline --graph --all\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-11-subir-todas-las-ramas-del-repositorio-local-al-nuevo-repositorio-en-github","title":"Paso 11: Subir todas las ramas del repositorio local al nuevo repositorio en GitHub.","text":"<p>Por \u00faltimo, subimos los cambios realizados en ambas ramas a Github</p> <pre><code>git push --all\n</code></pre> <p>La opci\u00f3n --force o -f permite subir un repositorio incompatible, pero \u00a1Cuidado borra el existente! Se debe utilizar solo en casos en que no hay otra soluci\u00f3n.</p> <p>Si accedemos al repositorio creado en Github podemos ver que est\u00e1n ambas ramas con el contenido que hemos subido.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL del repositorio a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_my_calculator donde</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> <ul> <li>10%:  Existe el repositorio my_calculator con el contenido pedido en la entrega anterior (hasta el paso 7)</li> <li>40%:  Existe la rama sine con el commit \u201csin(x) button\u201d con el contenido y origen pedidos</li> <li>50%:  La integraci\u00f3n de las ramas main y sine se ha realizado correctamente y la calculadora funciona bien</li> </ul> </li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/","title":"UD 4 - P3: Git/Github Rebase I","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#relacion-413-integracion-de-ramas-rebase-i","title":"Relaci\u00f3n 4.1.3: Integraci\u00f3n de ramas - Rebase I","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#objetivos","title":"Objetivos","text":"<ul> <li>Continuar practicando con repositorios locales y remotos, commits y ramas, pero integrando con rebase.</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>Reutilizar la cuenta y el repositorio my_calculator en GitHub tal y como qued\u00f3 en la entrega anterior. Crear una nueva rama que parta del primer commit de main \"x^3 button\" con el nombre \"ops\". Crear dos commits en la nueva rama \"ops\", el primero a\u00f1ade el bot\u00f3n x^2 y el segundo con el bot\u00f3n 1/x. Integrar la nueva rama ops en la rama main utilizando \"git rebase ...\".</p> <p>Para terminar se deben subir los nuevos commits integrados en la rama \"main\" a un nuevo repositorio en su cuenta de GitHub, denominado \"my_calculator_2\".</p> <p>El grafo de commits es m\u00e1s f\u00e1cil de seguir cuando se integra con rebase, ya que todos los commits de la rama lateral pasan a main y todo queda en main. En cambio se pierde algo de la historia del proyecto, porque desaparecen las ramas laterales donde se suelen desarrollar las nuevas funcionalidades. Rebase tiene adem\u00e1s la opci\u00f3n interactiva que permite rehacer la rama que se integra y sus commits. Por esta raz\u00f3n hay personas que prefieren el rebase frente al merge para integrar desarrollos.</p> <p>\u00a1Cuidado! Las ramas que se hayan compartido con terceros no deben modificarse con rebase, porque si un tercero ha descargado la rama, deber\u00e1 repetir el rebase en su repositorio local.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#tareas-a-realizar","title":"Tareas a realizar","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-1-clonar-el-repositorio-my-calculator","title":"Paso 1: Clonar el repositorio \"my calculator\"","text":"<p>El primer paso ser\u00e1 clonar en un repositorio local el repositorio \"my_calculator\" de GitHub en un directorio \"my_calculator_2\". Se debe haber terminado el desarrollo de la pr\u00e1ctica anterior previamente a la realizaci\u00f3n de esta entrega.</p> <pre><code>$ git clone git@github.com:&lt;mi_usuario_de_github&gt;/my_calculator   my_calculator_2 \n$ cd my_calculator_2\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-2-nueva-rama","title":"Paso 2: Nueva rama","text":"<p>El siguiente paso ser\u00e1 crear una rama de nombre \"ops\" que comience despu\u00e9s del primer commit (con mensaje \"x^3 button\") de la rama \"main\" y restaurarla en el directorio de trabajo, para poder trabajar sobre ella. Es necesario consultar el id del commit \"x^3 button\" para poder crear la rama a partir del mismo</p> <pre><code>$ git log --oneline # Lista los commits existentes incluyendo su id\n$ git checkout -b ops &lt;id_de_commit&gt; # Crea una nueva rama llamada \"ops\" a partir del commit indicado\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-3-funcionalidad-x2","title":"Paso 3: Funcionalidad x^2","text":"<p>Crear un commit en la rama \"ops\", que a\u00f1ada a la calculadora del fichero index.html el bot\u00f3n x^2 que eleve un n\u00famero al cuadrado.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"square()\"&gt; x^2 &lt;/button&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n            function square() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 2);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora, comprobar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^2 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-4-funcionalidad-1x","title":"Paso 4: Funcionalidad 1/x","text":"<p>Crear un commit en la rama \"ops\", que a\u00f1ada a la calculadora del fichero index.html el bot\u00f3n 1/x que divida 1 entre el n\u00famero introducido.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"inverse()\"&gt; 1/x &lt;/button&gt;\n            &lt;button onclick=\"square()\"&gt; x^2 &lt;/button&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n            function square() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 2);\n            }\n            function inverse() {\n                var num = document.getElementById(\"n1\");\n                num.value = 1/num.value;\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora, comprobar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"1/x button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-5-integrar-la-rama-ops-en-main","title":"Paso 5: Integrar la rama \"ops\" en \"main\"","text":"<p>Integrar la rama ops en la rama main con \"git rebase\" para crear una calculadora con cinco botones: x^2, x^3, x^4, sin(x) y 1/x.</p> <p>\"git rebase \u2026\" realiza la integraci\u00f3n ejecutando un bucle, donde cada iteraci\u00f3n traslada un commit de la rama origen a su nueva base. El traslado implica integrar el c\u00f3digo del commit con el de su nueva base. Si la integraci\u00f3n tiene conflictos, git indica el error y finaliza.</p> <p>\"git status\" muestra los ficheros con conflictos. Los conflictos deben resolverse entonces con el editor.</p> <p>Primero comprobamos el id del commit que queremos integrar en main (el de \"1/x button\") <pre><code>git log --oneline\n</code></pre></p> <p>Nos cambiamos a la rama \"main\" y ejecutamos</p> <pre><code>$ git checkout main\n$ git rebase &lt;id del commit&gt;\n</code></pre> <p>Como hemos modificado el mismo fichero y las mismas l\u00edneas que en los commits posteriores de la rama \"main\" surgir\u00e1n conflictos. Debemos editar el fichero index.html para eliminar los conflictos.</p> <p>Una vez resueltos, se debe comprobar primero que la integraci\u00f3n funciona correctamente. Despu\u00e9s se debe continuar la integraci\u00f3n (rebase) a\u00f1adiendo los cambios al \u00edndice y continuando el rebase:</p> <pre><code>$ git add index.html\n$ git rebase --continue\n</code></pre> <p>Una vez generado un commit, git pasa a intentar integrar el siguiente de la rama origen. Y as\u00ed hasta el \u00faltimo de la rama origen. Es necesario guardar los cambios en el editor que sale al hacer el rebase para que se apliquen.</p> <p>Este proceso habr\u00e1 que repetirlo dos veces: la primera vez para el bot\u00f3n x^4 y la segunda para el bot\u00f3n sin(x).</p> <p>El resultado final de index.html tendr\u00e1 los 5 botones: x^2, x^3, x^4, sin(x) y 1/x.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-6-subir-todas-las-ramas-del-repositorio-local-a-un-nuevo-repositorio-en-github","title":"Paso 6: Subir todas las ramas del repositorio local a un nuevo repositorio en GitHub.","text":"<p>Creamos un nuevo repositorio en Github llamado \"my_calculator_2\". Por \u00faltimo, subimos los cambios realizados en ambas ramas a Github.</p> <pre><code>$ git remote set-url origin git@github.com:&lt;mi_usuario_de_github&gt;/my_calculator_2\n$ git push --all\n</code></pre> <p>La opci\u00f3n --force o -f permite subir un repositorio incompatible, pero \u00a1Cuidado borra el existente! Se debe utilizar solo en casos en que no hay otra soluci\u00f3n.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL de los repositorios a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_my_calculator y ID_XXXX_my_calculator_2 donde</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> <ul> <li>10%:  Existe el repositorio my_calculator2</li> <li>30%:  Los tres primeros commits de main son los originales: \"x^3 button\", \"x^4 button\" y \"sin(x) button\"</li> <li>30%:  El cuarto commit de la rama main es \"x^2 button\" y contiene lo pedido</li> <li>30%:  El quinto commit de la rama main es \"1/x button\" y contiene lo pedido</li> </ul> </li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/","title":"UD 4 - P4: Git/Github Rebase II","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#relacion-414-integracion-de-ramas-rebase-ii","title":"Relaci\u00f3n 4.1.4: Integraci\u00f3n de ramas - Rebase II","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#objetivos","title":"Objetivos","text":"<ul> <li>Ver nuevos usos de GitHub y de \"git rebase\"</li> <li>Aprender a usar \"git fork\"</li> <li>Gestionar ficheros que no sean programas</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica vamos a duplicar el repositorio https://github.com/ging-moocs/MOOC_git_mod6-tf_agenda haciendo un \"fork\" en su cuenta de GitHub y clonarlo en un directorio local del mismo nombre. Este repositorio contiene solo el fichero tf-agenda.txt con texto plano. Es una agenda telef\u00f3nica muy sencilla, con 3 tel\u00e9fonos, creada en 4 commits, cuyo \u00fanico objetivo es practicar con \"git rebase --interactive ...\"</p> <p>Contenido de la agenda <pre><code>$ cat tf_agenda.txt \n  John: 913-677-899;\n  Eva:  915-768-455;\n  Mary: 918-789-221;\n</code></pre></p> <p>Lista de commits <pre><code>$ git log --oneline\n  9eaa103 Add Mary tf\n  71e69ce Add Eva tf\n  1204dc8 Add Eva pending-tf\n  f6e660e Add John tf\n</code></pre></p> <p>En el primer commit se introdujo el tel\u00e9fono de John. En el segundo solo el nombre de Eva, pero se dej\u00f3 el tel\u00e9fono pendiente tal y como indica el mensaje del commit. En el tercero se a\u00f1ade el tel\u00e9fono de Eva solamente. Y en el cuarto se introduce el tel\u00e9fono de Mary.</p> <p>En esta pr\u00e1ctica se rehacen los commits de la rama master utilizando \"git rebase --interactive \u2026\". Se deben juntar los commits 2 (1204dc8 Add Eva pending-tf) y 3 (71e69ce Add Eva tf) en uno solo, y corregir el tel\u00e9fono de Mary (918-789-221) por el n\u00famero 918-555-555. Debe quedar as\u00ed:</p> <pre><code>$ cat tf_agenda.txt \n  John: 913-677-899;\n  Eva:  915-768-455;\n  Mary: 918-555-555;\n</code></pre> <pre><code>$ git log --online\n2eb1703 Add Mary tf   fixed\n4716ce5 Add Eva tf    integrated\nf6e660e Add John tf\n</code></pre> <p>Finalizar subiendo la rama master local (regenerada) a la rama corrected_tf_agenda del repositorio origin, que se crear\u00e1 porque no existe. El repositorio origen en Github tendr\u00e1 ahora tanto la rama master, como la nueva corrected_tf_agenda.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#tareas-a-realizar","title":"Tareas a realizar","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-1-copiar-el-repositorio-a-tu-cuenta","title":"Paso 1: Copiar el repositorio a tu cuenta","text":"<p>Lo primero que debemos hacer es copiar el repositorio https://github.com/ging-moocs/MOOC_git_mod6-tf_agenda en nuestra cuenta. Para ello hacemos click sobre el bot\u00f3n \"Fork\" que se muestra en la web de Github en la esquina superior derecha de la p\u00e1gina del repositorio.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-2-clonar-el-repositorio","title":"Paso 2: Clonar el repositorio","text":"<p>A continuaci\u00f3n clonamos el repositorio copiado en nuestro ordenador</p> <pre><code>$ git clone  git@github.com:&lt;mi_usuario_de_github&gt;/MOOC_git_mod6-tf_agenda \n$ cd MOOC_git_mod6-tf_agenda \n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-3-juntar-los-commits-2-y-3-en-uno-solo","title":"Paso 3: Juntar los commits 2 y 3 en uno solo","text":"<p>Ahora vamos a utilizar \"git rebase --interactive f6e660e\" para juntar los commits 2 (1204dc8 Add Eva pending-tf) y 3 (71e69ce Add Eva tf) en uno solo, y corregir el tel\u00e9fono de Mary (918-789-221) por el n\u00famero 918-555-555.</p> <pre><code>$ git rebase -i f6e660e\n</code></pre> <p>La opci\u00f3n --interactive (equivalente a -i) permite rehacer interactivamente los 3 \u00faltimos commits de la rama master. f6e660e es equivalente a HEAD~3: referencia al tercer commit del grafo de commits, en direcci\u00f3n a la ra\u00edz, relativo al que est\u00e1 en el directorio de trabajo. Al invocar este comando, se abre el editor por defecto (normalmente nano o vi) con este script (los comentarios (empiezan por #) contienen instrucciones)</p> <p><pre><code>pick 1204dc8 Add Eva pending-tf\npick 71e69ce Add Eva tf\npick 9eaa103 Add Mary tf\n\n# Rebase f6e660e..9eaa103 onto f6e660e\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre> El script est\u00e1 en las 3 primeras l\u00edneas, que siguiendo las instrucciones (comentarios) modificamos para que junte los commits 2 y 3, y adem\u00e1s nos abra el editor en el commit 4.</p> <pre><code>pick 1204dc8 Add Eva pending-tf\nsquash 71e69ce Add Eva tf\nedit 9eaa103 Add Mary tf\n\n...\n</code></pre> <p>Al cerrar la edici\u00f3n del fichero con el nuevo script, Git integra los commits 2 y 3 autom\u00e1ticamente (sabe que tiene que dejar el c\u00f3digo del commit 3), pero nos abre el editor para que editemos el mensaje asociado al nuevo commit en la historia</p> <pre><code># This is a combination of 2 commits.\n# The first commit's message is:\n\nAdd Eva pending-tf\n\n# This is the 2nd commit message:\n\nAdd Eva tf\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Jan 11 18:58:54 2019 +0100\n#\n# rebase in progress; onto f6e660e\n# You are currently editing a commit while rebasing branch 'master' on 'f6e660e'.\n#\n# Changes to be committed:\n#       modified:   tf_agenda.txt\n#\n</code></pre> <p>Dejamos el segundo mensaje a\u00f1adiendo la palabra \"integrated\" al final (para indicar que se han integrado los dos commits) y cerramos la edici\u00f3n para que el rebase contin\u00fae. El script indica que queremos editar el commit 4 por lo que Git devuelve control a la shell (sin finalizar el rebase) dando el siguiente mensaje</p> <pre><code>[detached HEAD 4716ce5] Add Eva tf    integrated\n Date: Fri Jan 11 18:58:54 2019 +0100\n 1 file changed, 1 insertion(+)\nStopped at 9eaa1031b1c5eb7d52a19970a3a0967193d0b5a3... Add Mary tf\nYou can amend the commit now, with\n\n    git commit --amend \n\nOnce you are satisfied with your changes, run\n\n    git rebase --continue\n</code></pre> <p>Git nos deja en el commit 4 de la rama master original, indic\u00e1ndonos que debemos modificar el c\u00f3digo de dicho commit con un \"amend\" y continuar el rebase. La opci\u00f3n --amend rehace el commit anterior, en vez de crear uno nuevo. Editamos el fichero tf_agenda.txt para cambiar el tel\u00e9fono de Mary por 918-555-555 y una vez modificado hacemos amend al commit 4 con:</p> <pre><code>$ git add tf_agenda.txt\n$ git commit --amend\n</code></pre> <p>Antes de cerrar el nuevo commit 4, Git nos abre el editor con el mensaje asociado al commit para que lo podamos modificar, le a\u00f1adimos la palabra  \"fixed\" al final (para indicar que hemos corregido el commit) y cerramos la edici\u00f3n para que el amend finalice</p> <pre><code>[detached HEAD 2eb1703] Add Mary tf   fixed\n Date: Fri Jan 11 19:01:44 2019 +0100\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Y con el commit 4 corregido con el amend, continuamos el rebase para que finalice</p> <pre><code>$  git rebase --continue\n   Successfully rebased and updated refs/heads/master.\n</code></pre> <p>Estado final de la rama master:</p> <p>Despu\u00e9s del rebase, tanto el contenido de la agenda en tf_agenda.txt, como los commits de la rama master han quedado tal y como se ped\u00eda: commits 2 y 3 integrados y commit 4 corregido</p> <pre><code>$ cat tf_agenda.txt \n  John: 913-677-899;\n  Eva:  915-768-455;\n  Mary: 918-555-555;\n</code></pre> <pre><code>$ git log --online\n  2eb1703 Add Mary tf fixed\n  4716ce5 Add Eva tf integrated\n  f6e660e Add John tf\n</code></pre> <p>Si alguna vez se equivoca uno al rehacer una rama, se puede utilizar el reflog para arreglarlo: https://git-scm.com/docs/git-reflog.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-4-subir-los-cambios-a-una-nueva-rama","title":"Paso 4: Subir los cambios a una nueva rama","text":"<p>Para finalizar, vamos a subir la rama \"master\" local (regenerada) a la rama \"corrected_tf_agenda\" del repositorio origin, la cual se crear\u00e1 porque no existe. El repositorio \"origin\" en Github tendr\u00e1 ahora tanto la rama master, como la nueva \"corrected_tf_agenda\".</p> <pre><code>$ git checkout -b corrected_tf_agenda\n$ git push origin corrected_tf_agenda\n</code></pre> <p>Si hubi\u00e9semos querido subir la nueva rama master del repositorio local a la rama master del repositorio origin (repositorio origen de la clonaci\u00f3n) deber\u00edamos usar el comando \"git push --force \u2026\u201d porque los commits son incompatibles. Utilizando la opci\u00f3n --force o -f se sobre-escriben los commits antiguos.</p> <p>\u00a1Atencion! los commits antiguos se pierden al sobre-escribirlos y no podr\u00e1n ser recuperados en ese repositorio. En un desarrollo real no se deben compartir repositorios, ni ramas que vayan a ser sobre-escritas posteriormente. Los commits a\u00f1adidos por terceros a las copias del repositorio no sobreescrito ser\u00e1n incompatibles con los commits nuevos creados sobre las antiguas ramas.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL de los repositorios a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_tf_agenda</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> </li> <li>10%:  Existe el repositorio MOOC_git_mod6-tf_agenda</li> <li>20%:  El primer commit de la rama corrected_tf_agenda el original:    f6e660e Add John tf</li> <li>35%:  El segundo commit de la rama corrected_tf_agenda es \"Add Eva tf    integrated\" y contiene los 2 originales integrados</li> <li>35%:  El tercer commit de la rama corrected_tf_agenda es \"Add Mary tf   fixed\" y contiene el original corregido</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/","title":"UD 4 - P5: Git/Github Pull Request","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#relacion-415-contribuir-a-repositorios-de-terceros-con-pull-request-integracion-automatica-y-comandos-git-branch-clone-fetch-merge-pull-y-push-pull-request","title":"Relaci\u00f3n 4.1.5: Contribuir a repositorios de terceros con pull-request, integraci\u00f3n autom\u00e1tica, y comandos Git: branch, clone, fetch, merge, pull y push: Pull Request","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#objetivos","title":"Objetivos","text":"<ul> <li>Usar dos repositorios remotos, uno como respaldo del repositorio de trabajo local y otro como repositorio central donde las contribuciones se env\u00edan con pull-request.</li> <li>Practicar con ramas remotas de diversos tipos</li> <li>Realizar integraciones de desarrollos sencillos.</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica vamos a duplicar el repositorio https://github.com/ging-moocs/MOOC_git_mod7-cal_2com en nuestra cuenta de GitHub, de nuevo usando el bot\u00f3n de \"Fork\". Este repositorio tiene 2 commits en la rama master. El primer commit a\u00f1ade los ficheros README.md y LICENSE, y el segundo commit a\u00f1ade el fichero calculator.html con una calculadora que tiene solo el bot\u00f3n x^2.</p> <p>Primero vamos a crear una organizaci\u00f3n o una segunda cuenta con un nombre diferente () en GitHub. A continuaci\u00f3n duplicamos el repositorio (https://github.com//MOOC_git_mod7-cal_2com), ya clonado en la primera cuenta, en esta \u00faltima. <p>Luego clonamos el repositorio \"MOOC_git_mod7-cal_2com\" de  en un repositorio local y creamos un nuevo commit en la rama \"master\" del repositorio local que a\u00f1ada al fichero calculator.html una cabecera HTML (&lt;h1&gt;) al comienzo del body con el texto \"Calculadora de \". <p>Copiamos la rama \"inverse\" del repositorio https://github.com/ging-moocs/https://github.com/ging-moocs/MOOC_git_mod7-cal_branches a nuestro repositorio local. Esta rama tiene 3 commits, el primero y el segundo son los mismos que los dos primeros de la rama master de \"cal_2com\" y el tercero a\u00f1ade el bot\u00f3n 1/x a la calculadora.</p> <p>Integramos primero la rama master en la rama inverse. La integraci\u00f3n debe incorporar el t\u00edtulo &lt;h1&gt; de la rama master y los dos los botones x^2 y 1/x de la rama inverse.</p> <p>Integramos a continuaci\u00f3n tambi\u00e9n la rama inverse en la rama master (con FF)y subimos ambas ramas al repositorio origen de la clonaci\u00f3n en la segunda cuenta.</p> <p>Una vez subidas env\u00ede la integraci\u00f3n realizada en la rama master con pull-request desde este repositorio al repositorio en la primera cuenta, del que copiamos este Fork. Aceptamos el pull-request y lo integramos en el repositorio en GitHub en la primera cuenta.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#tareas-a-realizar","title":"Tareas a realizar","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-1-copiar-repositorio","title":"Paso 1: Copiar repositorio","text":"<p>Primero vamos a copiar el repositorio https://github.com/ging-moocs/MOOC_git_mod7-cal_2com en su cuenta de GitHub usando el bot\u00f3n de Fork.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-2-copiar-repositorio-desde-una-segunda-cuenta","title":"Paso 2: Copiar repositorio desde una segunda cuenta","text":"<p>A continuaci\u00f3n, creamos una segunda cuenta () en GitHub y copiamos el repositorio de la primera cuenta (https://github.com//MOOC_git_mod7-cal_2com) en esta segunda cuenta usando el bot\u00f3n de Fork. El nombre de esta cuenta puede ser cualquiera que desees.","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-3-clonar-el-repositorio","title":"Paso 3: Clonar el repositorio","text":"<p>Clonamos el repositorio /MOOC_git_mod7-cal_2com (de cuenta en GitHub) en nuestro ordenador local. <pre><code>$ git clone git@github.com:&lt;tu_cuenta_2&gt;/MOOC_git_mod7-cal_2com\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-4-anadir-cambios","title":"Paso 4: A\u00f1adir cambios","text":"<p>Entramos en el directorio de trabajo del nuevo repositorio clonado y a\u00f1adir al fichero calculator.html, al principio del bloque &lt;body&gt; de HTML, un t\u00edtulo &lt;h1&gt; con su nombre y apellidos.</p> <p><pre><code>$ cd MOOC_git_mod7-cal_2com \n</code></pre> Creamos un nuevo commit \"T\u00edtulo con autor\" con esta modificaci\u00f3n.</p> <pre><code>$ git add calculator.html\n$ git commit -m \"T\u00edtulo con autor\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-5-copiar-rama-remota","title":"Paso 5: Copiar rama remota","text":"<p>Copiamos la rama remota inverse del repositorio https://github.com/ging-moocs/MOOC_git_mod7-cal_branches como una rama local con git fetch y la refspec correspondiente utilizando el comando: git fetch ..\u2026</p> <p><pre><code>$ git fetch git@github.com:ging-moocs/MOOC_git_mod7-cal_branches inverse:inverse\n</code></pre> Podemos comprobar que la rama \"inverse\" est\u00e1 disponible en local con el comando siguiente: <pre><code>$ git branch -v\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-6-integrar-la-rama-inverse-en-master","title":"Paso 6: Integrar la rama \"inverse\" en \"master\"","text":"<p>A continuaci\u00f3n vamos a integrar en la rama \"inverse\", copiada en el repositorio local, la rama \"master\" con (git merge) e identificamos el nuevo commit con el mensaje \"Integrar inverse y master\".</p> <p>Primero nos cambiamos a la rama \"inverse\"</p> <pre><code>$ git checkout inverse\n</code></pre> <p>A continuaci\u00f3n integramos la rama \"master\" en \"inverse\"</p> <pre><code>$ git merge -m \"Integrar inverse y master\" master\n</code></pre> <p>Al hacer la integraci\u00f3n surgir\u00e1n conflictos que debemos resolver manualmente con el editor de texto. La integraci\u00f3n debe incorporar el t\u00edtulo y los dos botones x^2 y 1/x. Una vez resueltos los conflictos a\u00f1adimos los ficheros modificados al commit y continuamos con el proceso de integraci\u00f3n</p> <pre><code>$ git add .\n$ git merge --continue\n</code></pre> <p>Podemos comprobar el grafo de commits con el siguiente comando:</p> <pre><code>$ git log --graph\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-8-integrar-inverse-en-master","title":"Paso 8: Integrar \"inverse\" en \"master\"","text":"<p>Integramos en \"master\" la rama \"inverse\" del repositorio local (integrada en el paso anterior) con git merge tambi\u00e9n. Primero tenemos que cambiarnos a la rama \"master\".</p> <pre><code>$ git checkoutmaster\n$ git merge inverse\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-8-subir-los-cambios-a-github","title":"Paso 8: Subir los cambios a Github","text":"<p>Subimos al repositorio origin (origen de la clonaci\u00f3n en la segunda cuenta) las dos ramas locales (\"master\" e \"inverse\") con git push.</p> <pre><code>git push --all \n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-9-crear-pull-request","title":"Paso 9: Crear Pull Request","text":"<p>A continuaci\u00f3n, enviamos un Pull Request de la rama master desde el repositorio MOOC_git_mod7-cal_2com de la segunda cuenta al repositorio MOOC_git_mod7-cal_2com de la primera cuenta.</p> <p>Se deben utilizar las facilidades de GitHub para enviar un Pull Request, porque es la \u00fanica forma de hacerlo.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-10-aceptar-pull-request","title":"Paso 10: Aceptar Pull Request","text":"<p>Por \u00faltimo, aceptamo el Pull Request desde la primera cuenta. Github permite aceptar el merge asociado a un Pull Request directamente en Github.</p> <p>Tambi\u00e9n se puede clonar el repositorio de la primera cuenta en local. Descargar la rama master asociada al pull-request con \"git fetch \u2026\" e integrarla en la rama master del repositorio local. Volver a subir la rama master ya integrada al repositorio en la primera cuenta.</p> <p>Utilizar los comandos ya vistos en los pasos anteriores y en las transparencias.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL de los repositorios a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_my_calculator y ID_XXXX_my_calculator_2 donde</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> </li> <li>10%:  Existe el repositorio \"MOOC_git_mod7-cal_2com\" en cuenta 2</li> <li>10%:  Existe el repositorio \"MOOC_git_mod7-cal_2com\" en cuenta 1 y es el origen del Fork del repo de cuenta 2</li> <li>10%:  La rama master del repo de cuenta 2 tiene como tercer commit \"T\u00edtulo con autor\"</li> <li>10%:  El repo de cuenta 2 tiene una rama inverse integrada con master</li> <li>10%:  La rama master del repo de cuenta 2 tiene como \u00faltimo commit \"1/x button\"</li> <li>20%:  Que el fichero calculator.html de este \u00faltimo commit funciona, tiene el t\u00edtulo requerido y los botones x^2 y 1/x</li> <li>30%:  Que el repositorio MOOC_git_mod7-cal_2com en cuenta_1 tiene una rama master con los mismos commits de master del repo MOOC_git_mod7-cal_2com de cuenta 2</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/","title":"UD 4 - 4.1 Sistemas de control de versiones","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#41-sistemas-de-control-de-versiones-git-github","title":"4.1. Sistemas de control de versiones: Git &amp; GitHub","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Un sistema de control de versiones es una herramienta que permite llevar un registro de los cambios realizados en el c\u00f3digo fuente de un proyecto. Esto es \u00fatil para poder volver a versiones anteriores del c\u00f3digo, comparar cambios, ver qui\u00e9n ha modificado algo, etc.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#11-historia","title":"1.1. Historia","text":"<p>Los sistemas de control de versiones han evolucionado mucho a lo largo del tiempo. Los primeros sistemas de control de versiones eran locales, es decir, no permit\u00edan trabajar en paralelo con otros desarrolladores. Con el tiempo, han ido apareciendo sistemas de control de versiones distribuidos, que permiten trabajar en paralelo, colaborar con otros desarrolladores, etc.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#12-ventajas","title":"1.2. Ventajas","text":"<p>Los sistemas de control de versiones tienen varias ventajas:    </p> <ul> <li>Permiten llevar un registro de los cambios realizados en el c\u00f3digo.      </li> <li>Permiten trabajar en paralelo con otros desarrolladores.    </li> <li>Permiten colaborar en proyectos de c\u00f3digo abierto.   </li> <li>Permiten volver a versiones anteriores del c\u00f3digo.    </li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#13-desventajas","title":"1.3. Desventajas","text":"<p>Los sistemas de control de versiones tienen algunas desventajas:    </p> <ul> <li>Pueden ser complicados de usar.    </li> <li>Pueden requerir mucho espacio en disco.    </li> <li>Pueden requerir mucho tiempo para aprender a usarlos.    </li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#14-tipos","title":"1.4. Tipos","text":"<p>Hay varios tipos de sistemas de control de versiones:     </p> <ul> <li>Sistemas de control de versiones locales: Son sistemas de control de versiones que almacenan el c\u00f3digo en un \u00fanico lugar, como un disco duro, un servidor, etc. Ejemplos: RCS, SCCS, etc.     </li> <li>Sistemas de control de versiones centralizados: Son sistemas de control de versiones que almacenan el c\u00f3digo en un \u00fanico lugar, como un servidor central. Ejemplos: CVS, Subversion, etc.     </li> <li>Sistemas de control de versiones distribuidos: Son sistemas de control de versiones que almacenan el c\u00f3digo en varios lugares, como en el disco duro de cada desarrollador, en un servidor central, etc. Ejemplos: Git, Mercurial, Bazaar, etc.     </li> <li>Sistemas de control de versiones en la nube: Son sistemas de control de versiones que almacenan el c\u00f3digo en la nube, es decir, en servidores remotos. Ejemplos: GitHub, GitLab, Bitbucket, etc.     </li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#2-git","title":"2. Git","text":"<p>Git es un sistema de control de versiones distribuido, es decir, cada usuario tiene una copia completa del repositorio en su m\u00e1quina. Esto permite trabajar sin conexi\u00f3n a internet y tener un historial completo de los cambios.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#21-configuracion","title":"2.1. Configuraci\u00f3n","text":"<p>Git permite configurar varios par\u00e1metros, como el nombre del usuario, el correo electr\u00f3nico, el editor de texto, alias, los ficheros que no se deben incluir en el repositorio, etc.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#212-configuracion-del-usuario","title":"2.1.2. Configuraci\u00f3n del usuario","text":"<p>La configuraci\u00f3n del usuario incluye par\u00e1metros como el nombre del usuario, el correo electr\u00f3nico, el editor de texto, etc.</p> <pre><code>La como el nombre del usuario, el correo electr\u00f3nico, el editor de texto, etc.\n\n```bash\n# Configurar el nombre del usuario\ngit config --global user.name \"Nombre Apellido\"\n\n# Configurar el correo electr\u00f3nico\ngit config --global user.email \"\n\n# Configurar el editor de texto\ngit config --global core.editor \"nano\"\n</code></pre> <p>NOTA: La mayor\u00eda de estos comandos, y los que vendr\u00e1n mas adelante, soportan m\u00faltiples opciones (banderas). Consultar documentaci\u00f3n.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#212-configuracion-de-gitingore","title":"2.1.2. Configuraci\u00f3n de .gitingore","text":"<p>Git permite configurar un archivo .gitignore para especificar qu\u00e9 archivos o carpetas no se deben incluir en el repositorio. Esto es \u00fatil para evitar subir archivos temporales, logs, etc.</p> <pre><code># Crear un archivo .gitignore\ntouch .gitignore\n\n# A\u00f1adir patrones al archivo .gitignore\necho \"*.log\" &gt;&gt; .gitignore\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#213-configuracion-de-alias","title":"2.1.3. Configuraci\u00f3n de alias","text":"<p>Git permite configurar alias para los comandos m\u00e1s utilizados. Esto es \u00fatil para abreviar los comandos y hacerlos m\u00e1s f\u00e1ciles de recordar.</p> <pre><code># Configurar un alias\ngit config --global alias.&lt;nombre&gt; &lt;comando&gt;\n\n# Ver los alias configurados\ngit config --global --get-regexp alias\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#214-configuracion-de-color","title":"2.1.4. Configuraci\u00f3n de color","text":"<p>Git permite configurar el color de la salida de los comandos. Esto es \u00fatil para resaltar la salida y hacerla m\u00e1s f\u00e1cil de leer. Tambi\u00e9n se le puede indicar que muestre s\u00f3lo una l\u00ednea por cada commit en la traza o que agregue archivos de forma interactiva</p> <pre><code># Configurar el color de la salida de los comandos\ngit config --global color.ui auto\n\n# Configurar la traza de commits\ngit config format.pretty oneline\n\n# Configurar la adici\u00f3n de archivos de forma interactiva\ngit add -i\n\n# Ver la configuraci\u00f3n\ngit config --list\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#22-espacios-de-trabajo","title":"2.2. Espacios de trabajo","text":"<p>Git tiene tres espacios de trabajo: el directorio de trabajo, el \u00e1rea de preparaci\u00f3n y el repositorio.</p> <ul> <li>El directorio de trabajo es donde se modifican los archivos.    </li> <li>El \u00e1rea de preparaci\u00f3n es donde se preparan los cambios que se van a incluir en el pr\u00f3ximo commit.    </li> <li>El repositorio es donde se almacenan los commits.    </li> </ul> <p> </p> FlujoGit","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#221-directorio-de-trabajo","title":"2.2.1. Directorio de trabajo","text":"<p>El directorio de trabajo es donde se modifican los archivos.</p> <p>Es la primera secci\u00f3n del flujo, consta de archivos en los que est\u00e1 trabajando actualmente. En esta secci\u00f3n los archivos est\u00e1n con el estado \u201cUntracked\u201d y est\u00e1n disponibles para ser enviados a siguiente secci\u00f3n llamada \u201cStaging area\u201d. Para realizar la operaci\u00f3n de traspaso entre estas dos secciones se utiliza el comando <code>git add &lt;file&gt;</code> .</p> <pre><code># Ver el estado del directorio de trabajo\ngit status\n\n# Ver los cambios realizados en el directorio de trabajo\ngit diff\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#222-area-de-preparacion","title":"2.2.2. \u00c1rea de preparaci\u00f3n","text":"<p>El \u00e1rea de preparaci\u00f3n es donde se preparan los cambios que se van a incluir en el pr\u00f3ximo commit. Tambi\u00e9n se le conoce como \"staging area\" o \"index\".</p> <p>Es la segunda secci\u00f3n del flujo, consta de archivos que est\u00e1n listos para ser enviados a la secci\u00f3n final llamada \u201cRepositorio\u201d. En esta secci\u00f3n los archivos est\u00e1n con el estado \u201cStaged\u201d y est\u00e1n disponibles para ser enviados a la secci\u00f3n final. Para realizar la operaci\u00f3n de traspaso entre estas dos secciones se utiliza el comando <code>git commit -m \u201cMensaje\u201d</code> .</p> <pre><code># A\u00f1adir un archivo al \u00e1rea de preparaci\u00f3n\ngit add &lt;archivo&gt;\n\n# Ver el estado del \u00e1rea de preparaci\u00f3n\ngit status\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#223-repositorio","title":"2.2.3. Repositorio","text":"<p>El repositorio es donde se almacenan los commits.</p> <p>Es la \u00faltima secci\u00f3n del flujo, consta de archivos que est\u00e1n guardados formalmente en el almacenamiento virtual de tu proyecto e inicia el flujo nuevamente en Working directory con los \u00faltimos cambios formales.</p> <pre><code># Hacer un commit\ngit commit -m \"Mensaje del commit\"\n\n# Ver el historial de commits\ngit log\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#224-head","title":"2.2.4. Head","text":"<p>Git tiene un puntero especial llamado HEAD que apunta al commit actual. Nos indica en qu\u00e9 punto de la historia del c\u00f3digo estamos.</p> <pre><code># Ver el commit actual\ngit show HEAD\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#23-comandos-basicos","title":"2.3. Comandos b\u00e1sicos","text":"<p>Los comandos b\u00e1sicos de Git nos permiten inicializar un repositorio, registrar cambios, ver el estado del repositorio, ver el historial de commits, etc.</p> <pre><code># Inicializar un repositorio. En un nuevo directorio, ejecutar:\ngit init\n\n# Para registrar cambios. A\u00f1adir un archivo al index. \ngit add &lt;archivo&gt;\ngit add . # A\u00f1adir todos los archivos\n\n# Hacer un commit. Ahora el archivo est\u00e1 en el HEAD, pero no en el repositorio remoto.\ngit commit -m \"Mensaje del commit\"\n\n# Ver el estado del repositorio\ngit status\n\n# Ver el historial de commits\ngit log\n\n# Deshacer cambios. Volver al \u00faltimo commit\ngit checkout -- &lt;archivo&gt;\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#231-deshacer-cambios","title":"2.3.1. Deshacer cambios","text":"<p>Git permite deshacer cambios de varias formas:</p> <ul> <li>Deshacer cambios en el directorio de trabajo: reemplazar\u00e1s cambios locales usando el comando <code>git checkout -- &lt;archivo&gt;</code>. Este comando reemplaza los cambios en tu directorio de trabajo con el \u00faltimo contenido de HEAD. Los cambios que ya han sido agregados al Index, as\u00ed como tambi\u00e9n los nuevos archivos, se mantendr\u00e1n sin cambio.    </li> <li>Deshacer cambios en el \u00e1rea de preparaci\u00f3n: <code>git reset HEAD &lt;archivo&gt;</code> </li> <li>Deshacer un commit: `git reset --     </li> <li>Deshacer un commit y deshacer cambios: <code>git reset --hard HEAD~1</code> o Deshace todos los cambios locales y commits, puedes traer la \u00faltima versi\u00f3n del servidor y apuntar a tu copia local principal de esta forma <code>git fetch origin</code>.    </li> </ul> <pre><code># Deshacer cambios en el directorio de trabajo\ngit checkout -- &lt;archivo&gt;\n\n# Deshacer cambios en el \u00e1rea de preparaci\u00f3n\ngit reset HEAD &lt;archivo&gt;\n\n# Deshacer un commit\ngit reset --soft HEAD~1\n\n# Deshacer un commit y deshacer cambios\ngit reset --hard HEAD~1\n</code></pre> <p>La principal diferencia entre git fetch y git pull es:</p> <ul> <li>Si haces un git fetch, simplemente obtendr\u00e1 todos los cambios en el repositorio remoto (Github) y mover\u00e1 el puntero origin/master a HEAD. Mientras tanto, tu rama local master seguir\u00e1 apuntando a donde est\u00e1.    </li> <li>Si haces un git pull, b\u00e1sicamente har\u00e1 fetch (como se explic\u00f3 anteriormente) y fusionar\u00e1 cualquier cambio nuevo en tu rama master y mover\u00e1 el puntero a HEAD.    </li> </ul> <p>por tanto, git pull = git fetch + merge.</p> <p> </p> pull = fetch + merge","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#24-ramas","title":"2.4. Ramas","text":"<p>Otra caracter\u00edstica importante en flujo el trabajo de Git son el uso de las ramas. Las ramas son espacios o entornos independientes para que un desarrollador pueda usar y trabajar sobre el proyecto sin afectar el conjunto de archivos originales. Las ramas se utilizan b\u00e1sicamente para separar ambientes y colaborar entre desarrolladores en un mismo proyecto sin afectar el uno al otro. El flujo de trabajo de ramas se basa en la bifurcaci\u00f3n y convergencia, en donde existe un punto de separaci\u00f3n y otro de uni\u00f3n.</p> <p> </p> Gitflow-workflow <p>Por defecto, al crear el repositorio Git crea una rama llamada \"master\" o \"main\", que es la rama principal, pero se pueden crear otras ramas. </p> <p>Respecto a las ramas, se pueden crear, eliminar, fusionar, etc. </p> <p>Lo habitual es trabajar en una rama para desarrollar nuevas funcionalidades, arreglar errores, etc, y cuando se ha terminado, fusionarla con la rama principal.</p> <pre><code># Crear una rama\ngit branch &lt;nombre&gt;\n\n# Cambiar a una rama\ngit checkout &lt;nombre&gt;\n\n# Crear una rama y cambiar a ella\ngit checkout -b &lt;nombre&gt;\n\n# Fusionar una rama con la rama actual\ngit merge &lt;nombre&gt;\n\n# Eliminar una rama\ngit branch -d &lt;nombre&gt;\n</code></pre> <p>Ten en cuenta que las ramas son locales, es decir, no se suben al repositorio remoto. Para subir una rama al repositorio remoto, hay que hacer un push.</p> <pre><code># Subir una rama al repositorio remoto\ngit push origin &lt;nombre_rama&gt;\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#241-rebase","title":"2.4.1. Rebase","text":"<p>El rebase es una forma de fusionar dos ramas de forma lineal, es decir, sin crear un commit de fusi\u00f3n. Es decir, se cogen los commits de una rama y se aplican sobre la otra rama. Nos permite llevar un conjunto de cambios a un punto de la historia del c\u00f3digo diferente.</p> <pre><code># Cambiar a la rama que se quiere rebase\ngit checkout &lt;rama&gt;\n\n# Hacer el rebase\ngit rebase &lt;rama&gt;\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#242-resolucion-de-conflictos","title":"2.4.2. Resoluci\u00f3n de conflictos","text":"<p>Cuando se fusionan dos ramas que han modificado el mismo archivo, puede haber conflictos. Estos se deben resolver manualmente.</p> <pre><code># Ver las ramas fusionadas y no fusionadas\ngit branch --merged\ngit branch --no-merged\n\n# Resolver conflictos\ngit mergetool\n\n# Ver si hay conflictos pendientes\ngit status\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#24-tags","title":"2.4. Tags","text":"<p>Los tags son una forma de marcar un punto en la historia del repositorio. Se pueden usar para versiones, releases, etc.</p> <pre><code># Crear un tag\ngit tag &lt;nombre&gt;\n\n# Subir un tag a un repositorio remoto\ngit push --tags\n\n# Ver los tags\ngit tag\n\n# Ver el historial de un tag\ngit show &lt;nombre&gt;\n\n# Cambiar a un tag\ngit checkout &lt;nombre&gt;\n\n# Crear una rama a partir de un tag\ngit checkout -b &lt;nombre&gt; &lt;tag&gt;\n\n# Fusionar un tag con la rama actual\ngit merge &lt;nombre&gt;\n\n# Eliminar un tag\ngit tag -d &lt;nombre&gt;\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#24-repositorios-remotos","title":"2.4. Repositorios remotos","text":"<p>Cuantos m\u00e1s desarrolladores trabajen en un proyecto, m\u00e1s \u00fatil ser\u00e1 tener un repositorio remoto. Los cambios inicialmente se realizan en un repositorio local, y luego se suben a un repositorio remoto.</p> <p>Un repositorio remoto es una copia del repositorio local en un servidor. Git permite trabajar con varios repositorios remotos, como GitHub, GitLab, Bitbucket, etc. Veremos github m\u00e1s adelante.</p> <pre><code># Clonar un repositorio remoto. \ngit clone &lt;url&gt;\n\n# Si no se clon\u00f3 el repositorio de uno existente, podemos conectar el repositorio local a un repositorio remoto. Para a\u00f1adir un repositorio remoto. El nombre por defecto es \"origin\"\ngit remote add &lt;nombre&gt; &lt;url&gt;\n\n# Ver los repositorios remotos\ngit remote -v\n\n# Subir los cambios que est\u00e1n en el HEAD del repositorio local, a un repositorio remoto\ngit push &lt;nombre&gt; &lt;rama&gt;\n\n# Descargar cambios de un repositorio remoto al repositorio local\ngit pull &lt;nombre&gt; &lt;rama&gt;\n</code></pre> <p> </p> Operaciones locales y remotas <p> </p> Varios repos","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#27-flujo-de-trabajo","title":"2.7. Flujo de trabajo","text":"<p>El flujo de trabajo t\u00edpico con Git es el siguiente:    </p> <ol> <li>Crear un repositorio local con <code>git init</code> o clonar un repositorio remoto con <code>git clone /path/to/repository</code>.    </li> <li>A\u00f1adir archivos al repositorio con <code>git add</code>.    </li> <li>Hacer un commit con <code>git commit</code>.    </li> <li>Crear una rama con <code>git branch</code>.    </li> <li>Cambiar a la rama con <code>git checkout</code>.    </li> <li>Hacer cambios, a\u00f1adir, hacer commits, etc.    </li> <li>Fusionar la rama con <code>git merge</code>.    </li> </ol>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#3-github","title":"3. GitHub","text":"<p>GitHub es una plataforma de desarrollo colaborativo que utiliza Git como sistema de control de versiones. Permite alojar proyectos, realizar seguimiento de problemas, tareas y solicitudes de funciones, y dar seguimiento a todos los cambios en el c\u00f3digo. </p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#31-repositorios","title":"3.1. Repositorios","text":"<p>Un repositorio es un lugar donde se almacena el c\u00f3digo fuente de un proyecto. Puede ser p\u00fablico o privado, y puede tener varios colaboradores.</p> <pre><code># Crear un repositorio\ngit init\ngit add .\ngit commit -m \"Primer commit\"\ngit remote add origin &lt;url&gt;\ngit push -u origin master\n</code></pre>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#32-issues","title":"3.2. Issues","text":"<p>Las issues son una forma de realizar un seguimiento de tareas, mejoras, errores, etc. Se pueden asignar a usuarios, etiquetar, comentar, etc. </p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#33-pull-requests","title":"3.3. Pull Requests","text":"<p>Un pull request es una forma de proponer cambios en un repositorio. Se pueden revisar, comentar, aprobar, rechazar, etc.</p> <p>Para crear un pull request, hay que hacer lo siguiente:   </p> <ol> <li>Sobre un repostiorio clonado, crear una rama con <code>git checkout -b &lt;rama&gt;</code>.    </li> <li>Hacer cambios, a\u00f1adir, hacer commits, etc.    </li> <li> <p>Subir la rama al repositorio remoto con <code>git push origin &lt;rama&gt;</code>.    </p> <pre><code># Crear un pull request \ngit checkout -b &lt;rama&gt;\ngit add .\ngit commit -m \"Mensaje del commit\"\ngit push origin &lt;rama&gt;\n</code></pre> </li> <li> <p>Ir a la p\u00e1gina del repositorio en GitHub y hacer clic en \"New pull request\".    </p> <p></p> </li> <li> <p>Seleccionar la rama que se quiere fusionar con la rama principal.    </p> </li> <li>A\u00f1adir un t\u00edtulo y una descripci\u00f3n.    </li> <li> <p>Hacer clic en \"Create pull request\".    </p> <p></p> </li> <li> <p>Esperar a que alguien revise el pull request.    </p> <pre><code># Ver los pull requests\ngit fetch origin\ngit log origin/master..origin/&lt;rama&gt;\n</code></pre> </li> <li> <p>Si se aprueba, fusionar el pull request.   </p> <pre><code># Fusionar un pull request\ngit checkout &lt;rama&gt;\ngit pull origin &lt;rama&gt;\ngit merge &lt;rama&gt;\ngit push origin master\n</code></pre> </li> <li> <p>Eliminar la rama.    </p> <pre><code># Eliminar un pull request\ngit branch -d &lt;rama&gt;\ngit push origin --delete &lt;rama&gt;\n</code></pre> </li> <li> <p>Si se rechaza, hacer los cambios necesarios y volver al paso 3.    </p> </li> </ol>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#34-gists","title":"3.4. Gists","text":"<p>Los gists son una forma de compartir peque\u00f1os fragmentos de c\u00f3digo. Se pueden crear, editar, comentar, etc.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#4-conclusiones","title":"4. Conclusiones","text":"<p>Git y GitHub son herramientas muy \u00fatiles para el desarrollo de software. Permiten llevar un control de los cambios realizados en el c\u00f3digo, trabajar en paralelo, colaborar con otros desarrolladores, etc.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#5-recursos","title":"5. Recursos","text":"<ul> <li>Git la gu\u00eda sencilla</li> <li>Git en entornos distribuidos</li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#fuente","title":"Fuente","text":"<ul> <li>Introducci\u00f3n a Git</li> <li>Realizar un Pull Request</li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/","title":"UD 4 - 4.1 Sistemas de control de versiones","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#42-malos-olores-y-refactorizacion","title":"4.2. Malos olores y Refactorizaci\u00f3n","text":"<p>En el desarrollo de software, los \"malos olores\" y la refactorizaci\u00f3n son conceptos clave para mejorar la calidad del c\u00f3digo y facilitar su mantenimiento a lo largo del tiempo. Los \"malos olores\" son se\u00f1ales de problemas en el dise\u00f1o del c\u00f3digo, como duplicaci\u00f3n, m\u00e9todos largos o clases grandes, que pueden dificultar la comprensi\u00f3n y modificaci\u00f3n del c\u00f3digo. La refactorizaci\u00f3n, por otro lado, es el proceso de reestructurar el c\u00f3digo existente sin cambiar su comportamiento externo, con el objetivo de mejorar su legibilidad, estructura y eficiencia.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#1-malos-olores-code-smells","title":"1. Malos olores (Code Smells)","text":"<p>Los malos olores del c\u00f3digo son se\u00f1ales que nos indican que el c\u00f3digo fuente no est\u00e1 bien estructurado y que puede ser mejorado, por tanto son s\u00edntomas de problemas en el dise\u00f1o del c\u00f3digo fuente que al igual que los malos olores de la vida real, son desagradables y deben ser eliminados.</p> <p>El t\u00e9rmino fue acu\u00f1ado por Kent Beck y popularizado por Martin Fowler en su libro \"Refactoring: Improving the Design of Existing Code\", se refieren a ciertas caracter\u00edsticas del c\u00f3digo que sugieren la necesidad de refactorizaci\u00f3n. No son errores en s\u00ed mismos; el c\u00f3digo a\u00fan funciona, pero presenta problemas en t\u00e9rminos de mantenibilidad, legibilidad, escalabilidad o eficiencia. Identificar estos \"malos olores\" es el primer paso para mejorar la calidad del c\u00f3digo a trav\u00e9s de la refactorizaci\u00f3n.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#11-ejemplos-de-malos-olores","title":"1.1. Ejemplos de Malos Olores","text":"<p>Aqu\u00ed algunos ejemplos comunes de \"malos olores\" en el c\u00f3digo:</p> <ol> <li> <p>Duplicaci\u00f3n de C\u00f3digo Cuando el mismo c\u00f3digo aparece en m\u00e1s de un lugar, cualquier cambio futuro en la l\u00f3gica podr\u00eda requerir cambios en m\u00faltiples ubicaciones, aumentando el riesgo de inconsistencias.</p> </li> <li> <p>M\u00e9todos Largos Un m\u00e9todo que hace demasiado o es demasiado largo puede ser dif\u00edcil de entender y mantener. Idealmente, un m\u00e9todo deber\u00eda realizar una sola funci\u00f3n o tarea.</p> </li> <li> <p>Clase Grande Una clase con demasiadas responsabilidades es dif\u00edcil de entender, mantener y testear. Seguir el principio de responsabilidad \u00fanica puede ayudar a mantener las clases enfocadas y manejables.</p> </li> <li> <p>Lista Larga de Par\u00e1metros M\u00e9todos o funciones que requieren una gran cantidad de par\u00e1metros pueden ser dif\u00edciles de entender y propensos a errores. En algunos casos, es mejor agrupar estos par\u00e1metros en un objeto propio.</p> </li> <li> <p>Comentarios Excesivos Si bien documentar el c\u00f3digo es importante, una abundancia de comentarios puede indicar que el c\u00f3digo no es lo suficientemente claro. C\u00f3digo bien estructurado y nombrado adecuadamente a menudo puede ser autoexplicativo.</p> </li> <li> <p>C\u00f3digo Muerto C\u00f3digo que ya no se utiliza, como m\u00e9todos, variables o clases no referenciadas, agrega desorden sin proporcionar valor, haciendo m\u00e1s dif\u00edcil navegar y entender el c\u00f3digo base.</p> </li> <li> <p>Envidia de Caracter\u00edsticas Sucede cuando una clase utiliza extensamente los m\u00e9todos o datos de otra clase. En estos casos, parte de la funcionalidad tal vez pertenezca en realidad a la otra clase.</p> </li> <li> <p>Cadena de Mensajes Ocurre cuando un cliente pregunta a un objeto por otro objeto, que a su vez solicita a otro objeto, creando una cadena de dependencias. Esto viola el principio de ocultamiento de informaci\u00f3n y puede hacer el sistema fr\u00e1gil a cambios.</p> </li> <li> <p>Cambio Divergente Se da cuando una clase es com\u00fanmente modificada en diferentes maneras por diferentes razones. Si hay m\u00faltiples razones para cambiar una clase, tal vez deber\u00eda dividirse en varias clases.</p> </li> <li> <p>Cambio de Tiro Sucede cuando un cambio en una clase requiere cambios en muchas otras clases. Este patr\u00f3n de dependencias sugiere una alta interdependencia dentro del c\u00f3digo.</p> </li> </ol>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#2-refactorizacion-refactoring","title":"2. Refactorizaci\u00f3n (Refactoring)","text":"<p>Refactorizar en el desarrollo de software se refiere al proceso de reestructurar el c\u00f3digo existente sin cambiar su comportamiento externo. Este proceso tiene como objetivo mejorar la legibilidad, la estructura y la eficiencia del c\u00f3digo, as\u00ed como facilitar su mantenimiento y expansi\u00f3n futura. La refactorizaci\u00f3n es una parte esencial de la programaci\u00f3n \u00e1gil y se realiza de manera continua para asegurar que el c\u00f3digo se mantenga limpio, comprensible y adaptable a nuevos requisitos.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#21-objetivos-de-la-refactorizacion","title":"2.1. Objetivos de la Refactorizaci\u00f3n","text":"<ul> <li>Mejorar la legibilidad: Hacer el c\u00f3digo m\u00e1s f\u00e1cil de entender para otros desarrolladores (o para uno mismo en el futuro).</li> <li>Reducir la complejidad: Simplificar secciones complejas del c\u00f3digo para hacerlas m\u00e1s manejables.</li> <li>Eliminar c\u00f3digo redundante: Unificar o eliminar repeticiones de c\u00f3digo para reducir la posibilidad de errores y facilitar las actualizaciones.</li> <li>Mejorar el rendimiento: Optimizar ciertas partes del c\u00f3digo para hacerlas m\u00e1s eficientes en t\u00e9rminos de recursos y tiempo de ejecuci\u00f3n.</li> <li>Facilitar las pruebas: Organizar el c\u00f3digo de manera que sea m\u00e1s f\u00e1cil de probar individualmente (por ejemplo, mediante pruebas unitarias).</li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#22-algunos-patrones-de-refactorizacion","title":"2.2. Algunos patrones de Refactorizaci\u00f3n","text":"<ol> <li>Renombrar variables y m\u00e9todos: Cambiar nombres de variables, funciones y clases para que reflejen mejor su prop\u00f3sito.   </li> <li>Extraer m\u00e9todos: Convertir fragmentos de c\u00f3digo repetitivo en nuevos m\u00e9todos o funciones.   </li> <li>Introducir patrones de dise\u00f1o: Aplicar patrones de dise\u00f1o establecidos para resolver problemas comunes de manera m\u00e1s efectiva.   </li> <li>Optimizar algoritmos: Cambiar algoritmos por versiones m\u00e1s r\u00e1pidas o m\u00e1s eficientes.   </li> <li>Reducir la dependencia entre clases: Modificar el c\u00f3digo para reducir el acoplamiento, aumentando as\u00ed la modularidad del sistema.   </li> </ol>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#23-consideraciones-importantes","title":"2.3. Consideraciones Importantes","text":"<ul> <li>No alterar la funcionalidad: Uno de los principios clave de la refactorizaci\u00f3n es que no debe alterar el comportamiento externo del software. Cualquier cambio que introduzca nuevas funcionalidades o altere el comportamiento existente no se considera refactorizaci\u00f3n, sino una modificaci\u00f3n o extensi\u00f3n del c\u00f3digo.</li> <li>Realizar pruebas: Es crucial realizar pruebas exhaustivas antes y despu\u00e9s de la refactorizaci\u00f3n para asegurarse de que no se introduzcan errores en el proceso.</li> </ul> <p>La refactorizaci\u00f3n es una pr\u00e1ctica continua que contribuye a la salud a largo plazo del proyecto de software, facilitando la adaptaci\u00f3n a nuevos requisitos y la incorporaci\u00f3n de mejoras sin acumular deuda t\u00e9cnica.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#3-ejemplo-de-malos-olores-y-refactorizacion","title":"3. Ejemplo de Malos Olores y Refactorizaci\u00f3n","text":"<p>Se presenta un ejemplo cl\u00e1sico de c\u00f3digo con un \"mal olor\" en el desarrollo de software, espec\u00edficamente el \"mal olor\" conocido como Duplicaci\u00f3n de C\u00f3digo. La duplicaci\u00f3n de c\u00f3digo ocurre cuando bloques similares de c\u00f3digo aparecen en m\u00e1s de un lugar, lo que puede llevar a errores y dificultades de mantenimiento si el c\u00f3digo necesita ser cambiado en el futuro.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#31-ejemplo-de-duplicacion-de-codigo","title":"3.1. Ejemplo de Duplicaci\u00f3n de C\u00f3digo:","text":"<p>Supongamos que tenemos dos m\u00e9todos en una clase que calculan el salario total de un empleado, pero cada m\u00e9todo se utiliza en diferentes contextos dentro de la aplicaci\u00f3n.</p> <pre><code>class CalculadoraSalario {\n\n    fun calcularSalarioMensual(horasTrabajadas: Int, tarifaPorHora: Double): Double {\n        val salarioBase = horasTrabajadas * tarifaPorHora\n        val bonificacion = salarioBase * 0.10\n        return salarioBase + bonificacion\n    }\n\n    fun calcularSalarioSemanal(horasTrabajadas: Int, tarifaPorHora: Double): Double {\n        val salarioBase = horasTrabajadas * tarifaPorHora\n        val bonificacion = salarioBase * 0.10\n        return salarioBase + bonificacion\n    }\n}\n</code></pre> <p>En este ejemplo, el c\u00f3digo para calcular el salario base y la bonificaci\u00f3n est\u00e1 duplicado en ambos m\u00e9todos <code>calcularSalarioMensual</code> y <code>calcularSalarioSemanal</code>. Aunque estos m\u00e9todos podr\u00edan ser utilizados en diferentes contextos (uno para calcular salarios mensuales y otro para semanales), la l\u00f3gica de c\u00e1lculo del salario base y la bonificaci\u00f3n es id\u00e9ntica, lo que representa una duplicaci\u00f3n innecesaria.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#32-test-de-la-clase-calculadorasalario","title":"3.2. Test de la Clase CalculadoraSalario","text":"<p>Los test nos garantizan que la refactorizaci\u00f3n no afecte la funcionalidad de los m\u00e9todos <code>calcularSalarioMensual</code> y <code>calcularSalarioSemanal</code>. Vamos a utilizar JUnit, una de las bibliotecas m\u00e1s comunes para pruebas en el ecosistema de Kotlin y Java. </p> <p>Un ejemplo muy b\u00e1sico consistir\u00eda en:</p> <p>Primero, aseg\u00farate de tener JUnit agregado a tu proyecto. Si est\u00e1s utilizando Gradle, puedes a\u00f1adir la siguiente dependencia en tu archivo <code>build.gradle</code>:</p> <pre><code>testImplementation (\"org.junit.jupiter:junit-jupiter:5.7.0\")\n</code></pre> <p>A continuaci\u00f3n, se muestra c\u00f3mo podr\u00edan ser los tests para los m\u00e9todos <code>calcularSalarioMensual</code> y <code>calcularSalarioSemanal</code> de la clase <code>CalculadoraSalario</code>:</p> <pre><code>import org.junit.jupiter.api.Assertions.assertEquals\nimport org.junit.jupiter.api.Test\n\nclass CalculadoraSalarioTest {\n\n    private val calculadora = CalculadoraSalario()\n\n    @Test\n    fun `test calcular salario mensual`() {\n        val horasTrabajadas = 160 // Suponiendo 40 horas a la semana, 4 semanas al mes\n        val tarifaPorHora = 10.0\n        // C\u00e1lculo esperado: 160 * 10 * 1.1 (bonificaci\u00f3n del 10%) = 1760\n        val resultadoEsperado = 1760.0\n\n        val resultado = calculadora.calcularSalarioMensual(horasTrabajadas, tarifaPorHora)\n\n        assertEquals(resultadoEsperado, resultado, \"El salario mensual calculado no es correcto\")\n    }\n\n    @Test\n    fun `test calcular salario semanal`() {\n        val horasTrabajadas = 40 // 40 horas a la semana\n        val tarifaPorHora = 10.0\n        // C\u00e1lculo esperado: 40 * 10 * 1.1 (bonificaci\u00f3n del 10%) = 440\n        val resultadoEsperado = 440.0\n\n        val resultado = calculadora.calcularSalarioSemanal(horasTrabajadas, tarifaPorHora)\n\n        assertEquals(resultadoEsperado, resultado, \"El salario semanal calculado no es correcto\")\n    }\n}\n</code></pre> <p>En estos tests:</p> <ul> <li>Se crea una instancia de <code>CalculadoraSalario</code>.</li> <li>Se define un escenario de test para cada uno de los m\u00e9todos (<code>calcularSalarioMensual</code> y <code>calcularSalarioSemanal</code>), proporcionando valores de entrada para <code>horasTrabajadas</code> y <code>tarifaPorHora</code>.</li> <li>Se calcula el <code>resultadoEsperado</code> basado en la l\u00f3gica conocida (incluyendo la bonificaci\u00f3n del 10% sobre el salario base).</li> <li>Se llama al m\u00e9todo correspondiente y se compara el resultado con el <code>resultadoEsperado</code> utilizando <code>assertEquals</code>, que verificar\u00e1 si la refactorizaci\u00f3n ha alterado la funcionalidad esperada.</li> </ul> <p>Estos tests unitarios aseguran que los m\u00e9todos <code>calcularSalarioMensual</code> y <code>calcularSalarioSemanal</code> funcionen como se espera despu\u00e9s de cualquier refactorizaci\u00f3n, manteniendo intacta la l\u00f3gica de negocio subyacente.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#33-refactorizacion-para-eliminar-la-duplicacion","title":"3.3. Refactorizaci\u00f3n para Eliminar la Duplicaci\u00f3n:","text":"<p>Una manera de resolver le \"mal olor\" comentado arriba es extrayendo la l\u00f3gica duplicada a su propio m\u00e9todo, y luego llamando a este m\u00e9todo desde <code>calcularSalarioMensual</code> y <code>calcularSalarioSemanal</code>.</p> <pre><code>class CalculadoraSalario {\n\n    private fun calcularSalarioTotal(horasTrabajadas: Int, tarifaPorHora: Double): Double {\n        val salarioBase = horasTrabajadas * tarifaPorHora\n        val bonificacion = salarioBase * 0.10\n        return salarioBase + bonificacion\n    }\n\n    fun calcularSalarioMensual(horasTrabajadas: Int, tarifaPorHora: Double): Double {\n        return calcularSalarioTotal(horasTrabajadas, tarifaPorHora)\n    }\n\n    fun calcularSalarioSemanal(horasTrabajadas: Int, tarifaPorHora: Double): Double {\n        return calcularSalarioTotal(horasTrabajadas, tarifaPorHora)\n    }\n}\n</code></pre> <p>Ahora, la l\u00f3gica de c\u00e1lculo del salario se centraliza en <code>calcularSalarioTotal</code>, eliminando la duplicaci\u00f3n y facilitando el mantenimiento. Si la f\u00f3rmula para calcular el salario cambia en el futuro, solo necesitas modificarla en un lugar, reduciendo el riesgo de errores e inconsistencias.</p> <p>Este ejemplo ilustra c\u00f3mo identificar y corregir duplicaci\u00f3n de c\u00f3digo, uno de los \"malos olores\" m\u00e1s comunes en el desarrollo de software, mejorando as\u00ed la calidad y mantenibilidad del c\u00f3digo.</p> <p>Identificar y corregir estos \"malos olores\" mejora significativamente la calidad del c\u00f3digo, haci\u00e9ndolo m\u00e1s limpio, entendible y f\u00e1cil de mantener. La refactorizaci\u00f3n es el proceso clave para abordar estos problemas, asegurando que el software sea escalable y robusto. Los test nos asegura que la refactorizaci\u00f3n no afecte la funcionalidad de los m\u00e9todos.</p>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#fuente","title":"Fuente","text":"<ul> <li>Refactoring Guru - Refactoring Guru</li> <li>Refactoring: Improving the Design of Existing Code - Martin Fowler</li> <li>Refactoring: Improving the Design of Existing Code - Refactoring.com</li> <li>Code Smells - Sourcemaking</li> <li>Refactoring - Martin Fowler</li> <li>Refactoring - Wikipedia</li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/","title":"UD 4 - 4.3 An\u00e1lisis est\u00e1tico de c\u00f3digo","text":"","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#41-analisis-estatico-de-codigo","title":"4.1. An\u00e1lisis est\u00e1tico de c\u00f3digo","text":"<p>La relaci\u00f3n entre las personas, los ordenadores y el c\u00f3digo es bastante compleja. Aunque la mayor\u00eda de los c\u00f3digos se desarrollan para ser ejecutados en ordenadores, su prop\u00f3sito no se limita a eso. Tambi\u00e9n se desarrollan para ser le\u00eddos y comprendidos cuidadosamente, de hecho la mayor\u00eda de tu tiempo como programador lo dedicar\u00e1s a leer c\u00f3digo.</p> <p>Desgraciadamente, el desarrollo moderno de software no va de la mano de la comprensi\u00f3n del c\u00f3digo. Adem\u00e1s, los c\u00f3digos de software que no se pueden entender, mantener o mejorar tienen mayores tasas de defectos.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#1-que-es-el-analisis-estatico-de-codigo","title":"1. \u00bfQu\u00e9 es el an\u00e1lisis est\u00e1tico de c\u00f3digo?","text":"<p>El an\u00e1lisis est\u00e1tico de c\u00f3digo es una de las t\u00e9cnicas que los desarrolladores y programadores emplean para analizar el c\u00f3digo fuente en funci\u00f3n de criterios espec\u00edficos predeterminados. Esta t\u00e9cnica se lleva a cabo antes de la ejecuci\u00f3n del programa y se utiliza para detectar errores funcionales y vulnerabilidades en el software que se va a desplegar. En este caso, es f\u00e1cil mantener las convenciones de codificaci\u00f3n para los equipos de desarrollo debido a la presencia de criterios predeterminados. Adem\u00e1s, este tipo de an\u00e1lisis ayuda a identificar las vulnerabilidades, por lo que proporciona una herramienta importante para evitar fallos de seguridad y bugs.</p> <p>Los desarrolladores tambi\u00e9n pueden revisar el c\u00f3digo manualmente, pero esto puede dar lugar a que se produzcan fallos debido a un error humano. Y los errores de software acaban costando una cantidad significativa de tiempo y dinero, por lo que es imperativo producir c\u00f3digos sin errores. Adem\u00e1s, cada vez m\u00e1s empresas de desarrollo se suben al carro del an\u00e1lisis est\u00e1tico de c\u00f3digo. As\u00ed, el an\u00e1lisis est\u00e1tico de c\u00f3digo se considera ahora un aspecto clave a la hora de escribir c\u00f3digo para aplicaciones Android.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#2-ventajas-de-utilizar-el-analisis-estatico-de-codigo","title":"2. Ventajas de utilizar el an\u00e1lisis est\u00e1tico de c\u00f3digo","text":"<ul> <li>M\u00e1s r\u00e1pido, preciso y eficiente en comparaci\u00f3n con la revisi\u00f3n manual del c\u00f3digo.</li> <li>Ayuda a identificar posibles bugs, vulnerabilidades y errores que las pruebas unitarias o manuales podr\u00edan haber pasado por alto.</li> <li>Ayuda a imbuirse de pr\u00e1cticas de c\u00f3digo adecuadas.</li> <li>Analiza cada l\u00ednea de c\u00f3digo, ayudando as\u00ed a conseguir un c\u00f3digo de alta calidad.</li> <li>Ayuda a definir la estructura del proyecto que puede configurarse y personalizarse para las necesidades espec\u00edficas de un proyecto.</li> </ul>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#3-herramientas-populares-de-analisis-de-codigo-estatico","title":"3. Herramientas populares de an\u00e1lisis de c\u00f3digo est\u00e1tico","text":"","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#31-ktlint","title":"3.1. Ktlint","text":"<p>Ktlint requiere poca o ninguna personalizaci\u00f3n, por lo que es f\u00e1cil de usar. Esta herramienta permite centrarse en la importancia de la claridad del c\u00f3digo y las convenciones de la comunidad por encima de las preferencias personales. Este aspecto hace que el c\u00f3digo sea m\u00e1s legible y f\u00e1cil de entender. Ktlint s\u00ed ofrece caracter\u00edsticas de personalizaci\u00f3n; sin embargo, eso queda a discreci\u00f3n del desarrollador o programador. Tambi\u00e9n ofrece a los desarrolladores la opci\u00f3n de a\u00f1adir sus reglas para descubrir posibles errores, comprobar los antipatrones, etc.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#32-detekt","title":"3.2. Detekt","text":"<p>Kotlin, un lenguaje de programaci\u00f3n multiplataforma, tiene su versi\u00f3n de an\u00e1lisis est\u00e1tico de c\u00f3digo, conocida como Detekt. Esta herramienta se basa en el \u00e1rbol sint\u00e1ctico abstracto que proporciona el compilador de Kotlin. Detekt ofrece conjuntos de reglas altamente configurables, lo que la hace muy usada. Adem\u00e1s, Detekt tambi\u00e9n proporciona las caracter\u00edsticas de an\u00e1lisis de code smell*, informes de complejidad en las l\u00edneas del c\u00f3digo y complejidad ciclom\u00e1tica.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#33-findbugs","title":"3.3. FindBugs","text":"<p>FindBugs analiza los Bytecodes de Java, especialmente los archivos .class, para buscar posibles errores y fallos de dise\u00f1o. Esta herramienta necesita c\u00f3digo compilado para ser empleada. Los aspectos clave de FindBugs incluyen la correcci\u00f3n de malas pr\u00e1cticas, la correcci\u00f3n multihilo, la detecci\u00f3n de c\u00f3digo dudoso, el rendimiento malicioso, la vulnerabilidad del c\u00f3digo, la seguridad experimental y la internacionalizaci\u00f3n.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#34-checkstyle","title":"3.4. Checkstyle","text":"<p>Checkstyle analiza el c\u00f3digo fuente del proyecto en busca de errores y fallos, al tiempo que trabaja para mejorar el est\u00e1ndar del c\u00f3digo. Tambi\u00e9n ayuda a verificar el c\u00f3digo fuente para las convenciones de codificaci\u00f3n.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#35-android-lint","title":"3.5. Android Lint","text":"<p>Android Lint viene empaquetado por defecto con Android Studio. Esta herramienta comprueba los archivos fuente del proyecto para identificar posibles errores y optimizar la usabilidad, la correcci\u00f3n, la seguridad, la accesibilidad y la internacionalizaci\u00f3n.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#4-linting-en-el-analisis-estatico-de-codigo","title":"4. Linting en el an\u00e1lisis est\u00e1tico de c\u00f3digo","text":"<p>Te preguntar\u00e1s, \u00bfqu\u00e9 demonios es el linting? Bueno, en pocas palabras, linting es el proceso de analizar el c\u00f3digo en busca de errores potenciales. Veamos c\u00f3mo puedes usar linting para diagnosticar errores. Los desarrolladores utilizan varias gu\u00edas de estilo, como Java Code Style y Kotlin Style Guide.</p> <p>En este caso, vamos a utilizar Ktlint o Detekt, un linter que es sin\u00f3nimo de la plataforma Kotlin, ya que este formato ofrece simplicidad, extensibilidad y una comunidad de desarrolladores activa.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#41-uso-de-ktlint","title":"4.1. Uso de Ktlint","text":"<ul> <li>A\u00f1ade al fichero <code>build.gradle</code> de tu proyecto la configuraci\u00f3n de ktling:</li> </ul> <pre><code>import org.jlleitschuh.gradle.ktlint.reporter.ReporterType\n\nplugins {\n    id(\"org.jlleitschuh.gradle.ktlint\") version \"11.0.0\"\n}\n\n// Configuraci\u00f3n de klint\nktlint {\n    verbose.set(true)\n    outputToConsole.set(true)\n    coloredOutput.set(true)\n    reporters {\n        reporter(ReporterType.CHECKSTYLE)\n        reporter(ReporterType.JSON)\n        reporter(ReporterType.HTML)\n    }\n    filter {\n        exclude(\"**/style-violations.kt\")\n    }\n}\n</code></pre> <p>Tambi\u00e9n existe un plugin no oficial que puedes instalar. En <code>File -&gt; Settings -&gt; Tools -&gt; ktlint</code> podr\u00e1s ver y trabajar en la configuraci\u00f3n</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#42-uso-de-detekt","title":"4.2. Uso de Detekt","text":"<p>Instala el plugin Detekt. En <code>File -&gt; Settings -&gt; Tools -&gt; Detekt</code> podr\u00e1s ver y trabajar en la configuraci\u00f3n</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#5-recursos","title":"5. Recursos","text":"<ul> <li>Detekt</li> <li>ktlint</li> </ul>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#fuente","title":"Fuente","text":"<ul> <li>\u00bfQu\u00e9 es lo que pasa con el an\u00e1lisis est\u00e1tico del c\u00f3digo?</li> <li>Complejidad ciclom\u00e1tica</li> </ul>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/","title":"UD 4 - 4.4 Documentaci\u00f3n y comentarios","text":"","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#44-documentacion-y-comentarios","title":"4.4. Documentaci\u00f3n y comentarios.","text":"","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#1-documentacion-y-comentarios","title":"1. Documentacion y comentarios","text":"<p>A la hora de comentar, hay dos escuelas:</p> <ol> <li>Usar los comentarios para clarificar lo que quisiste expresar con tu c\u00f3digo</li> <li>Evitarlos al m\u00e1ximo y que comentar tu c\u00f3digo es un mal necesario que s\u00f3lo denota tu falta de habilidad para no hacer c\u00f3digo lo suficientemente claro.</li> </ol> <p>\u00bfA cu\u00e1l de los dos consejos deber\u00edas hacerle caso?</p> <p>Un sistema sin documentaci\u00f3n est\u00e1 incompleto. Para tener calidad, necesita tener documentaci\u00f3n, pero esta tiene que tener sentido,  es decir, informaci\u00f3n acerca del sistema que comunique cosas, como la raz\u00f3n de existir de ciertos m\u00f3dulos, valores y funciones y c\u00f3mo usarlo.</p> <p>Si m\u00e1s tardes tienes que modificar el software, estos comentarios, facilitar\u00e1n la comprens\u00ed\u00f3n de lo que los programadores anteriores hicieron o intentar\u00f3n hacer.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#11-donde-situar-la-documentacion","title":"1.1. \u00bfD\u00f3nde situar la documentaci\u00f3n?","text":"<p>Por tanto la documentaci\u00f3n es totalmente necesaria, pero \u00bfdonde la ponemos?    </p> <ul> <li>Mala pr\u00e1ctica: En documentos separados del c\u00f3digo. Suelen olvidarse y no se mantienen.</li> <li>Buena pr\u00e1ctica: Lo m\u00e1s cerca del c\u00f3digo, para eso tenemos los comentarios, facilitar\u00e1 encontrarlos y mantenerlos.</li> </ul>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#12-que-documentar","title":"1.2. \u00bfQu\u00e9 documentar?","text":"<p>Puedes usar los comentarios para documentar:   </p> <ul> <li>Decisiones de dise\u00f1o.   </li> <li>Explicaciones sobre la existencia, funcionamiento o raz\u00f3n de ser de cierta parte del c\u00f3digo.   </li> <li>Las interfaces y su ejemplo de uso.   </li> <li>Efectos de usar cierto c\u00f3digo.   </li> <li>Partes no finalizadas o que se pueden mejorar (TODO\u2019s).   </li> </ul>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#13-por-que-documentar","title":"1.3. \u00bfPor qu\u00e9 documentar?","text":"<p>Ten en cuenta que los comentarios pueden ayudarte en el futuro, ya que estar\u00e1n ahi para recordarte lo que hiciste y por qu\u00e9 lo hiciste. Por ejemplo ,seguramente tu mente haya borrado informaci\u00f3n valiosa de por qu\u00e9 una variable tiene un valor de inicio y no otro. Por tanto, tu yo futuro y tu equipo te agradecer\u00e1n los comentarios aclaratorios de tomas de decisiones.  </p> <p>Adem\u00e1s, los comentarios son una buena herramienta de dise\u00f1o. Existen gurus, como John Ousterhout, en \u201cA Philosophy of Software Design\u201d que recomienda empezar con los comentarios antes de programar. Pero, \u00bfpor qu\u00e9 lo recomienda? Escribir en un lenguaje humano c\u00f3mo funciona algo antes de implementarlo realmente, te da la capacidad de ver si es l\u00f3gico y suficiente, adem\u00e1s te permite ponerte en los zapatos del usuario para notar deficiencias sobre todo en la interfaz. Los comentarios de la interfaz es lo primero que deber\u00edas crear porque te servir\u00e1n de gu\u00eda para avanzar con tu dise\u00f1o y, sobre todo, que sea l\u00f3gico y f\u00e1cil de usar.  </p> <p>El lenguaje de programaci\u00f3n no es suficiente para expresar todo lo necesario. Todos los lenguajes de programaci\u00f3n est\u00e1n pensados para ser un subconjunto del lenguaje humano que elimine las ambig\u00fcedades, manteniendo el mayor poder expresivo posible. Esto nos lleva a sus limitantes: es imposible, o por lo menos impr\u00e1ctico, intentar expresar todas las ideas con el c\u00f3digo.  En la pr\u00e1ctica, el tiempo y los recursos para lograr algo son limitados, por lo que a veces es m\u00e1s conveniente y f\u00e1cil para todos explicar lenguaje humano algo que intentar expresarlo con c\u00f3digo, como los puristas afirman.  </p> <p>No te sientas mal si tienes que recurrir de vez en cuando a explicar la forma en que funciona algo, siempre y cuando no sea la pr\u00e1ctica com\u00fan.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#14-como-usar-los-comentarios-para-que-sean-valiosos","title":"1.4. \u00bfC\u00f3mo usar los comentarios para que sean valiosos?","text":"<p>Como una buena gu\u00eda, si no eres capaz de crear un comentario concreto y corto sobre c\u00f3mo funciona o por qu\u00e9 existe algo, lo m\u00e1s probable es que tengas que re-pensar tu dise\u00f1o.</p> <p>No todos los comentarios son valiosos, hay algunos que pueden estorbar m\u00e1s de lo que ayudan, por ejemplo, los que no aportan informaci\u00f3n a lo que es obvio en el c\u00f3digo.</p> <p>Hablemos de algunas formas de aprovecharlos lo mejor posible para que contribuyan positivamente a aumentar la calidad del proyecto:   </p> <ul> <li> <p>Escribe los comentarios primero: Una de las partes m\u00e1s importantes de los comentarios como documentaci\u00f3n es que deben ser concretos, cercanos a la realidad y que proporcionen la mayor cantidad de informaci\u00f3n \u00fatil posible.  Para lograr esto, se tienen que crear lo m\u00e1s cerca que puedas a la creaci\u00f3n del c\u00f3digo. Pero como todos sabemos que despu\u00e9s de escribir y probar (b\u00e1sicamente) el c\u00f3digo vamos a sentir que ya est\u00e1 terminado, por tanto, es buena   pr\u00e1ctica obligarte a escribirlos antes, justo como propone TDD con las pruebas. De esta manera te asegurar\u00e1s que tu c\u00f3digo est\u00e9 documentado incluso antes de escribirlo y te servir\u00e1n como una herramienta de dise\u00f1o que te ayudar\u00e1 a pensar mejor en la usabilidad de tus m\u00f3dulos y piezas de software.  </p> </li> <li> <p>Crea comentarios sobre la interfaz: La interfaz es el medio de uso que tus m\u00f3dulos o funciones presentan para que las dem\u00e1s partes de tu sistema lo usen. Lo primero que deber\u00edas documentar y explicar es esta interfaz, para que m\u00e1s personas a parte de ti puedan usar este pedazo de c\u00f3digo.  </p> </li> <li> <p>Escribe comentarios claros sobre:</p> </li> <li> <p>C\u00f3mo usar esa pieza de c\u00f3digo </p> </li> <li>Por qu\u00e9 existe esa parte del sistema </li> <li>Qu\u00e9 efectos tiene usarla </li> </ul> <p>Este tipo de comentarios son los que aportan mayor valor al sistema y si est\u00e1n lo suficientemente completos, con ejemplos y explicaciones claras, son una documentaci\u00f3n v\u00e1lida que est\u00e1 en un muy buen lugar: es f\u00e1cil de encontrar y no se va a perder enterrada entre otros documentes que despu\u00e9s nadie va a consultar.  </p> <ul> <li>Evita los comentarios sobre la implementaci\u00f3n: Los comentarios sobre la implementaci\u00f3n son aquello que describen qu\u00e9 estas haciendo, como por ejemplo, sumar n\u00famero, abrir un archivo, etc. Estos comentarios normalmente son innecesarios, ya que lo que se est\u00e1 haciendo es obvio si el c\u00f3digo es lo suficientemente expresivo y siempre deber\u00edamos buscar que sea as\u00ed. De hecho, estos son los comentarios que hacen que la gente odie a los comentarios en general, pues en vez de proporcionar informaci\u00f3n extra son una carga que hay que mantener y pueden confundir si no son actualizados. Si realmente sientes que tienes que explicar qu\u00e9 est\u00e1s haciendo con cierta pieza de c\u00f3digo, primero preg\u00fantate si no hay una manera de reescribirlo para que sea obvio. Si no existe o no es pr\u00e1ctica esta soluci\u00f3n, entonces escribe el comentario de la manera m\u00e1s concisa posible, incluyendo la raz\u00f3n de la existencia de ese c\u00f3digo. Para hacer esto debes tomar muy en cuenta los recursos del proyecto: no te puedes tardar el triple del tiempo implementando la pieza de c\u00f3digo perfecta porque no quieres escribir un comentario que explique c\u00f3mo funciona.</li> </ul> <p>Escribir comentarios es una de las grandes tareas que los programadores debemos dominar. Los lenguajes de programaci\u00f3n y los entornos de programaci\u00f3n cada vez le dan m\u00e1s poder a esta parte de los programas y permiten incluso escribir pruebas en ellos, generar documentaci\u00f3n autom\u00e1tica y listar tareas a partir de ellos. Si pones el suficiente esmero en aprender a escribir buenos comentarios y mantenerlos, ser\u00e1n una gran herramienta de dise\u00f1o y documentaci\u00f3n de tu software.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#2-herramientas-para-documentar","title":"2. Herramientas para documentar","text":"","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#21-doka","title":"2.1. DOKA","text":"<p>Dokka</p> <ul> <li>Herramienta que nos permite generar la documentaci\u00f3n en distintos formatos.</li> <li>Configuraci\u00f3n b\u00e1sica y m\u00ednima: A\u00f1ade al fichero <code>build.gradle.kts:</code></li> </ul> <p><pre><code>plugins {\n    id(\"org.jetbrains.dokka\") version \"1.6.10\"\n}\n\nrepositories {\n    mavenCentral()\n}\n</code></pre> Ahora en aparecer\u00e1n nuevas tareas en la pesta\u00f1a de gradle.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#22-kdoc","title":"2.2. KDOC","text":"<p>Sintaxis de KDoc</p> <ul> <li>Lenguaje que permite documentar.</li> <li>Documenta la interface de las clases, m\u00e9todos, propiedades, etc.</li> <li>Para genera la documentaci\u00f3n, en las opciones de <code>Gradle</code>, busca la tarea <code>Task-&gt;Documentaci\u00f3n-&gt;DokkaHtml</code> y p\u00falsala.</li> <li>La documentaci\u00f3n se genera en la carpeta <code>build</code> de tu proyecto.</li> </ul>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#bibliografia-y-fuente","title":"Bibliograf\u00eda y fuente","text":"<ul> <li>Deber\u00edas comentar tu c\u00f3digo - H\u00e9ctor Patricio</li> <li>Head First Kotlin, A Brain-Friendly Guide; Dawn Griffiths &amp; David Griffiths; 2019 - O'Reilly Media</li> <li>A Philosophy of Software Design, John Ousterhout. (Le dedica 4 cap\u00edtulos a buen uso de los comentarios)</li> </ul>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u05/","title":"Relacionado con la tabla de contenidos","text":"<p>toc: true toc_label: \"Contenido\" toc_icon: \"file-code\"</p>"},{"location":"section3/u05/#hide","title":"hide:","text":""},{"location":"section3/u05/#-footer","title":"- footer","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>"},{"location":"section3/u05/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":""},{"location":"section3/u05/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Eval\u00faa entornos integrados de desarrollo analizando sus caracter\u00edsticas para editar c\u00f3digo fuente y generar ejecutables.</p>"},{"location":"section3/u05/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han instalado entornos de desarrollo, propietarios y libres.</li> <li>b) Se han a\u00f1adido y eliminado m\u00f3dulos en el entorno de desarrollo.</li> <li>c) Se ha personalizado y automatizado el entorno de desarrollo.</li> <li>d) Se ha configurado el sistema de actualizaci\u00f3n del entorno de desarrollo.</li> <li>e) Se han generado ejecutables a partir de c\u00f3digo fuente de diferentes lenguajes en un mismo entorno de desarrollo.</li> <li>f) Se han generado ejecutables a partir de un mismo c\u00f3digo fuente con varios entornos de desarrollo.</li> <li>g) Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.</li> <li>h) Se han identificado las funciones m\u00e1s usuales de las herramientas CASE para el desarrollo, prueba y documentaci\u00f3n de c\u00f3digo.</li> </ul>"},{"location":"section3/u05/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir esta unidad teniendo en cuenta la normativa del curso</p> <p>La unidad pertenece al bloque 2 Herramientas de desarrollo.</p> <ul> <li>UD2: Entornos de desarrollo integrado</li> </ul> <p>En la unidad 2, veremos:</p> <ul> <li>Entornos de desarrollo integrado. Funcionalidades.</li> <li>Herramientas CASE.</li> </ul>"},{"location":"section3/u05/practica/EDES-U5.-Practica001/","title":"UD 4 - P1: Git/Github b\u00e1sico","text":"","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#relacion-411-repositorios-local-y-remoto-directorio-de-trabajo","title":"Relaci\u00f3n 4.1.1: Repositorios local y remoto, directorio de trabajo...","text":"","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#objetivos","title":"Objetivos","text":"<ul> <li>Crear repositorios en Github</li> <li>Practicar con repositorios locales y remotos</li> <li>Crear commits en un repositorio</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica crearemos nuestro primer repositorio de Github. Para ello, primero habr\u00e1 que crear una cuenta en Github. Crearemos un repositorio de nombre ID_XXXX_my_calculator (mas info abajo, leela antes de crear el respositorio) en dicha cuenta, en el que alojaremos un peque\u00f1o desarrollo de software consistente en una calculadora web. </p> <p>Para comenzar este desarrollo, iniciamos un repositorio de git local. En la rama main se desarrollar\u00e1 en dos commits una calculadora con 2 botones. En el primer commit  se a\u00f1ade la calculadora con el bot\u00f3n x^3, adem\u00e1s de un fichero README.md con un breve texto descriptivo. En el segundo se a\u00f1ade el bot\u00f3n x^4 a la calculadora. </p> <p>Para terminar se sube la rama main del repositorio local al repositorio remoto en Github que hemos creado al principio.</p>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#tareas","title":"Tareas","text":"","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#paso-1-creacion-de-repositorio-remoto","title":"Paso 1: Creaci\u00f3n de repositorio remoto","text":"<p>El primer paso a seguir es crear una cuenta en Github, si no se tiene. A continuaci\u00f3n, creamos un nuevo repositorio p\u00fablico vac\u00edo con el nombre \"my_calculator\".</p>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#paso-2-creacion-de-repositorio-local","title":"Paso 2: Creaci\u00f3n de repositorio local","text":"<p>En un terminal de nuestro ordenador iniciamos un repositorio local de git. Si se tiene el sistema operativo Windows, se recomienda emplear Git Bash como terminal. <pre><code>$ git init my_calculator\n$ cd my_calculator\n</code></pre> y le asignamos el repositorio remoto que acabamos de crear <pre><code>$ git remote add origin git@github.com:&lt;mi usuario de github&gt;/my_calculator.git\n</code></pre></p> <p>Por ejemplo, si tu usuario es <code>pepe</code>, el comando ser\u00eda: <pre><code>$ git remote add origin git@github.com:pepe/my_calculator.git\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#paso-3-anadir-ficheros-al-repositorio","title":"Paso 3: A\u00f1adir ficheros al repositorio","text":"<p>A\u00f1adir al directorio de trabajo un fichero con el nombre \"index.html\". Este fichero contendr\u00e1 una calculadora web con un bot\u00f3n para calcular el cubo del n\u00famero introducido: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> En la etiqueta h1 debes modificar el texto para incluir tu nombre y apellidos</p>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#paso-4-registrar-cambios","title":"Paso 4: Registrar cambios","text":"<p>A continuaci\u00f3n, hay que registrar los ficheros en el \u00edndice y crear el primer commit en la rama main. Se recuerda que antes de crear un commit hay que probar siempre que el programa que se va a guardar funciona correctamente (en este caso, abri\u00e9ndolo en el navegador web y probando que funciona la calculadora).</p> <pre><code>$ git add index.html # A\u00f1adir el fichero creado\n$ git commit -m \"x^3 button\" # Congelar los cambios en un commit\n$ git log --oneline # Ver la lista de commits\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#paso-5-crear-un-segundo-commit","title":"Paso 5: Crear un segundo commit","text":"<p>Debe crear un segundo commit en la rama en la que est\u00e1 trabajando (main).  El commit debe a\u00f1adir a la calculadora (fichero index.html) un segundo bot\u00f3n (elemento HTML <code>&lt;button ..&gt;</code>) que eleve un n\u00famero a la cuarta potencia (x^4) invocando una funci\u00f3n (power_4 ()) que calcula x^4 al hacer click en \u00e9l.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Calculator&lt;/title&gt;\n        &lt;meta charset=\"utf-8\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n        &lt;p&gt;\n            &lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n            &lt;button onclick=\"power_4()\"&gt; x^4&lt;/button&gt;\n        &lt;/p&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function cube() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 3);\n            }\n            function power_4() {\n                var num = document.getElementById(\"n1\");\n                num.value = Math.pow(num.value, 4);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y despu\u00e9s de probar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^4 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#paso-6-subir-el-repositorio-a-github","title":"Paso 6: Subir el repositorio a Github","text":"<p>Para finalizar, hay que subir el repositorio local al repositorio remoto creado en Github inicialmente.</p> <pre><code>$ git push origin main\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL del repositorio a la tarea. </li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li>El nombre del repositorio sera: ID_XXXX_my_calculator donde </li> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> <li>Asegurate que funciona y: </li> <li>20%:  Existe el repositorio ID_XXXX_my_calculator</li> <li>40%:  El primer commit de la rama main es \u201cx^3 button\u201d y contiene lo pedido</li> <li>40%:  El segundo commit de la rama main es \u201cx^4 button\u201d y contiene lo pedido</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u05/practica/EDES-U5.-Practica001/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/","title":"UD 5 - 5.1 \u00bfQu\u00e9 es UML?","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#51-que-es-uml","title":"5.1. \u00bfQu\u00e9 es UML?","text":"<p>El Lenguaje Unificado de Modelado o UML (\u00abUnified Modeling Language\u00bb) es un lenguaje estandarizado de modelado. Est\u00e1 especialmente desarrollado para ayudar a todos los intervinientes en el desarrollo y modelado de un sistema o producto software a describir, dise\u00f1ar, especificar, visualizar, construir y documentar todos los artefactos que lo componen, utilizando varios tipos de diagramas.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>UML permite crear un dise\u00f1o previo de una aplicaci\u00f3n antes de su desarrollo e implementaci\u00f3n, aunque tambi\u00e9n puede realizarse posteriormente. </p> <p>\ud83c\udfaf NOTA: Similar al dise\u00f1o arquitect\u00f3nico de un edificio, UML facilita la visualizaci\u00f3n del sistema, su comparaci\u00f3n con los requisitos y su comprensi\u00f3n antes de que el equipo de desarrollo comience a codificar.</p> <p>El modelado con UML cobra especial importancia en proyectos grandes, garantizando que los dise\u00f1os sean escalables, seguros y funcionales. Adem\u00e1s, estos diagramas suelen acompa\u00f1arse de documentaci\u00f3n complementaria.</p> <p> </p> Ejemplo de diagrama UML","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#11-ventajas-y-desventajas-de-uml","title":"1.1. Ventajas y desventajas de UML","text":"<p>Ventajas: </p> <ul> <li>Es sencillo y visual.    </li> <li>Permite modelar cualquier tipo de sistemas.   </li> <li>Es un lenguaje universal que facilita la comunicaci\u00f3n entre equipos.   </li> <li>Es independiente de plataformas y lenguajes.   </li> </ul> <p>Desventajas: - Es muy amplio, lo que puede complicar su uso completo. - Los diagramas pueden omitir detalles importantes.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#2-por-que-uml","title":"2. \u00bfPor qu\u00e9 UML?","text":"<p>UML ayuda a trabajar a un mayor nivel de abstracci\u00f3n y es independiente de la plataforma. Sus caracter\u00edsticas principales son:    </p> <ul> <li>Es f\u00e1cilmente extensible, permitiendo adaptar los conceptos a distintas necesidades.</li> <li>Facilita la documentaci\u00f3n y buenas pr\u00e1cticas en el desarrollo de software.</li> <li>Aunque no est\u00e1 completamente definido, es una herramienta poderosa para la representaci\u00f3n gr\u00e1fica.</li> </ul> <p>Si est\u00e1s comenzando con UML, puedes consultar esta lista de libros para aprender UML desde cero.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#3-tipos-de-diagramas-uml","title":"3. Tipos de diagramas UML","text":"Tipos de diagramas <p>A d\u00eda de hoy, en su versi\u00f3n 2.5.1, UML clasifica sus diagramas en:</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#31-diagramas-estructurales","title":"3.1. Diagramas estructurales","text":"<p>Los diagramas estructurales muestran la estructura est\u00e1tica del sistema y sus partes en diferentes niveles de abstracci\u00f3n. Existen un total de siete tipos de diagramas de estructura:</p> <ul> <li>Diagrama de clases: Muestra la estructura del sistema, subsistema o componente utilizando clases con sus caracter\u00edsticas, restricciones y relaciones: asociaciones, generalizaciones, dependencias, etc.</li> <li>Diagrama de componentes: Muestra componentes y dependencias entre ellos. Este tipo de diagramas se utiliza para el desarrollo basado en componentes (CDB), para describir sistemas con arquitectura orientada a servicios (SOA).</li> <li>Diagrama de despliegue: Muestra la arquitectura del sistema como despliegue (distribuci\u00f3n) de artefactos de software.</li> <li>Diagrama de objetos: Un gr\u00e1fico de instancias, incluyendo objetos y valores de datos. Un diagrama de objeto est\u00e1tico es una instancia de un diagrama de clase; muestra una instant\u00e1nea del estado detallado de un sistema en un punto en el tiempo.</li> <li>Diagrama de paquetes: Muestra paquetes y relaciones entre ellos.</li> <li>Diagrama de perfiles: Diagrama UML auxiliar que permite definir estereotipos personalizados, valores etiquetados y restricciones como un mecanismo de extensi\u00f3n ligero al est\u00e1ndar UML. Los perfiles permiten adaptar el metamodelo UML para diferentes plataformas o dominios.</li> <li>Diagrama de estructura compuesta: Muestra la estructura interna (incluidas las partes y los conectores) de un clasificador estructurado.</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#32-diagramas-de-comportamiento","title":"3.2. Diagramas de comportamiento","text":"<p>A diferencia de los diagramas estructurales, muestran como se comporta un sistema de informaci\u00f3n de forma din\u00e1mica. Es decir, describe los cambios que sufre un sistema a trav\u00e9s del tiempo cuando est\u00e1 en ejecuci\u00f3n. Hay un total de siete diagramas de comportamiento, clasificados de la siguiente forma:</p> <ul> <li>Diagrama de actividades: Muestra la secuencia y las condiciones para coordinar los comportamientos de nivel inferior, en lugar de los clasificadores que poseen esos comportamientos. Estos son com\u00fanmente llamados modelos de flujo de control y flujo de objetos.</li> <li> <p>Diagrama de casos de uso: Describe interacciones usuario-sistema. Describe un conjunto de acciones (casos de uso) que algunos sistemas o sistemas (sujetos) deben o pueden realizar en colaboraci\u00f3n con uno o m\u00e1s usuarios externos del sistema (actores) para proporcionar algunos resultados observables y valiosos a los actores u otros interesados del sistema(s).</p> </li> <li> <p>Diagrama de m\u00e1quina de estados: Modela transiciones entre estados. Se utiliza para modelar el comportamiento discreto a trav\u00e9s de transiciones de estados finitos. Adem\u00e1s de expresar el comportamiento de una parte del sistema, las m\u00e1quinas de estado tambi\u00e9n se pueden usar para expresar el protocolo de uso de parte de un sistema.</p> </li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#33-diagramas-de-interaccion","title":"3.3. Diagramas de interacci\u00f3n","text":"<p>Los diagramas de interacci\u00f3n son un subconjunto de los diagramas de comportamiento que muestran c\u00f3mo los objetos se comunican entre s\u00ed:</p> <ul> <li>Diagrama de secuencia: Es el tipo m\u00e1s com\u00fan de diagramas de interacci\u00f3n y se centra en el intercambio de mensajes entre l\u00edneas de vida (objetos).</li> <li>Diagrama de comunicaci\u00f3n: Se enfoca en la interacci\u00f3n entre l\u00edneas de vida donde la arquitectura de la estructura interna y c\u00f3mo esto se corresponde con el paso del mensaje es fundamental. La secuencia de mensajes se da a trav\u00e9s de una numeraci\u00f3n.</li> <li>Diagrama de tiempos: Se centran en las condiciones que cambian dentro y entre las l\u00edneas de vida a lo largo de un eje de tiempo lineal.</li> <li>Diagrama global de interacciones: Los diagramas global de interacciones brindan una descripci\u00f3n general del flujo de control donde los nodos del flujo son interacciones o usos de interacci\u00f3n.</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#4-versiones-de-uml","title":"4. Versiones de UML","text":"<p>La versi\u00f3n actual de UML es la 2.5.1, publicada en diciembre de 2017. Este est\u00e1ndar es gestionado y actualizado por la OMG (Object Management Group). Los creadores originales de UML son 3: Jim Rumbaugh, Grady Booch e Ivar Jacobson.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#41-lista-de-versiones-publicadas","title":"4.1. Lista de versiones publicadas","text":"<p>Esta es la lista de versiones que han sido publicadas:    </p> <ul> <li>1.1 \u2013 Noviembre de 1997</li> <li>1.3 \u2013 Marzo de 2000</li> <li>1.4 \u2013 Septiembre de 2001 </li> <li>1.5 \u2013 Marzo de 2003 </li> <li>1.4.2 \u2013 Enero de 2005 </li> <li>2.0 \u2013 Octubre de 2005 </li> <li>2.1 \u2013 Abril de 2006 </li> <li>2.1.1 \u2013 Febrero de 2007 </li> <li>2.1.2 \u2013 Noviembre de 2007 </li> <li>2.2 \u2013 Febrero de 2009 </li> <li>2.3 \u2013 Mayo de 2010 </li> <li>2.4.1 \u2013 Agosto de 2011 </li> <li>2.5 \u2013 Junio de 2015</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#5-breve-historia-de-uml","title":"5. Breve historia de UML","text":"<p>Desde hace unos a\u00f1os, las tecnolog\u00eda de la informaci\u00f3n y comunicaci\u00f3n ya han producido una enorme variedad de m\u00e9todos y notaciones para llevar a cabo el modelado. Existen m\u00e9todos y anotaciones para el dise\u00f1o, la estructura, el procesamiento y el almacenamiento de informaci\u00f3n. De la misma manera tambi\u00e9n podemos encontrar m\u00e9todos para la planificaci\u00f3n, modelado, implementaci\u00f3n, ensamblaje, prueba, documentaci\u00f3n, ajuste, etc. de los sistemas. Entre los conceptos que se utilizan existen algunos relativamente fundamentales y, debido a eso, se expanden m\u00e1s all\u00e1 del \u00e1mbito en el que fueron creados en un principio.      </p> <p>Desde la concepci\u00f3n de la tecnolog\u00eda de la informaci\u00f3n hasta finales de 1970, los desarrolladores de software se tomaron el desarrollo del software como un arte. Pero estos sistemas fueron poco a poco haci\u00e9ndose m\u00e1s complejos y por esta raz\u00f3n el mantenimiento y el desarrollo exig\u00eda otro tipo de visi\u00f3n, m\u00e1s all\u00e1 del previamente descrito. Este hecho dio lugar a la ya famosa crisis del software.    </p> <p>Esta crisis lleva al enfoque de ingenier\u00eda (ingenier\u00eda de software) y la programaci\u00f3n estructurada. Se desarrollaron m\u00e9todos para la estructuraci\u00f3n de sistemas y para los procesos de dise\u00f1o, desarrollo y mantenimiento. Los enfoques orientados a procesos, por ejemplo, el m\u00e9todo de salida de procesamiento de entrada de jerarqu\u00eda, enfatizaron la funcionalidad de los sistemas. Con este m\u00e9todo, el sistema total se divide en componentes m\u00e1s peque\u00f1os a trav\u00e9s de la descomposici\u00f3n funcional.</p> <p>Al mismo tiempo, se desarrollaron enfoques orientados a la estructura de datos, como el m\u00e9todo de Jackson, en el que la estructura del programa se deriva de la visualizaci\u00f3n gr\u00e1fica de las estructuras de datos.</p> <p>En todos estos m\u00e9todos y notaciones, dividimos el sistema en dos partes: una secci\u00f3n de datos y una secci\u00f3n de procedimientos. Esto es claramente reconocible en lenguajes de programaci\u00f3n m\u00e1s antiguos, como COBOL. Los diagramas de flujo de datos, los diagramas de estructura, los diagramas HIPO y los diagramas de Jackson se utilizan para ilustrar el rango de funciones. Naturalmente, estos primeros m\u00e9todos enfatizaron el desarrollo de nuevos sistemas.    </p> <p>En la d\u00e9cada de 1980, el an\u00e1lisis estructural cl\u00e1sico se desarroll\u00f3 a\u00fan m\u00e1s. Los desarrolladores generaron diagramas de relaciones de entidades para el modelado de datos y redes de Petri para el modelado de procesos.    </p> <p>A medida que los sistemas se volvieron m\u00e1s complejos, ya no se podr\u00eda dise\u00f1ar cada sistema \u00abdesde cero\u00bb. Las propiedades, como la mantenibilidad y la reutilizaci\u00f3n, se hicieron cada vez m\u00e1s importantes. Se desarrollaron lenguajes de programaci\u00f3n orientados a objetos, y con ellos, los primeros lenguajes de modelado orientados a objetos surgieron en los a\u00f1os 70 y 80. En la d\u00e9cada de 1990, las primeras publicaciones sobre an\u00e1lisis orientado a objetos y dise\u00f1o orientado a objetos se pusieron a disposici\u00f3n del p\u00fablico. A mediados de la d\u00e9cada de 1990, ya exist\u00edan m\u00e1s de 50 m\u00e9todos orientados a objetos, as\u00ed como muchos formatos de dise\u00f1o. Un lenguaje de modelado unificado parec\u00eda indispensable.     </p> <p>A principios de la d\u00e9cada de 1990, los m\u00e9todos orientados a objetos de Grady Booch y James Rumbaugh se utilizaron ampliamente. En octubre de 1994, Rational Software Corporation (parte de IBM desde febrero de 2003) comenz\u00f3 la creaci\u00f3n de un lenguaje de modelado unificado. Primero, acordaron una estandarizaci\u00f3n de la notaci\u00f3n (lenguaje), ya que esto parec\u00eda menos elaborado que la estandarizaci\u00f3n de los m\u00e9todos. Al hacerlo, integraron el M\u00e9todo Booch de Grady Booch, la T\u00e9cnica de modelado de objetos (OMT) de James Rumbaugh y la Ingenier\u00eda de software orientada a objetos (OOSE), de Ivar Jacobsen, con elementos de otros m\u00e9todos y publicaron esta nueva notaci\u00f3n bajo el nombre UML, versi\u00f3n 0.9.     </p> <p>El objetivo no era formular una notaci\u00f3n completamente nueva, sino adaptar, expandir y simplificar los tipos de diagramas existentes y aceptados de varios m\u00e9todos orientados a objetos, como los diagramas de clase, los diagramas de casos de uso de Jacobson o los diagramas de gr\u00e1ficos de estado de Harel. Los medios de representaci\u00f3n que se utilizaron en los m\u00e9todos estructurados se aplicaron a UML. Por lo tanto, los diagramas de actividad de UML est\u00e1n, por ejemplo, influenciados por la composici\u00f3n de los diagramas de flujo de datos y las redes de Petri.     </p> <p>Lo que es sobresaliente y nuevo en UML no es su contenido, sino su estandarizaci\u00f3n a un solo lenguaje unificado con un significado definido formalmente.    </p> <p>Compa\u00f1\u00edas conocidas, como IBM, Oracle, Microsoft, Digital, Hewlett-Packard y Unisys se incluyeron en el desarrollo posterior de UML. En 1997, la versi\u00f3n 1.1 de UML fue enviada y aprobada por la OMG. La versi\u00f3n 1.2 de UML, con adaptaciones editoriales, se lanz\u00f3 en 1998, seguida de la versi\u00f3n 1.3 un a\u00f1o despu\u00e9s, y la versi\u00f3n 1.5 de UML en marzo de 2003. Los desarrolladores ya hab\u00edan estado trabajando en la versi\u00f3n 2.0 de UML desde el a\u00f1o 2000, y se aprob\u00f3 como una Especificaci\u00f3n final adoptada por OMG en junio de 2003.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#6-alternativas-a-uml","title":"6. Alternativas a UML","text":"<p>Aunque UML es el est\u00e1ndar m\u00e1s utilizado para modelado de software, hay alternativas que pueden ser \u00fatiles dependiendo del enfoque del proyecto: Si bien UML es el est\u00e1ndar m\u00e1s utilizado y reconocido para el modelado de sistemas orientados a objetos, existen algunas alternativas que se han desarrollado para abordar diferentes enfoques o necesidades espec\u00edficas en el modelado de sistemas. Algunas de estas alternativas incluyen:     </p> <ul> <li>SysML (Systems Modeling Language): Dise\u00f1ado para el modelado de sistemas de ingenier\u00eda y sistemas f\u00edsicos, es una extensi\u00f3n de UML que se centra en el modelado de sistemas complejos.</li> <li>BPMN (Business Process Model and Notation): Especializado en modelar procesos de negocios y flujos de trabajo. Aunque no es un reemplazo directo de UML, se utiliza com\u00fanmente en conjunto con \u00e9l para representar aspectos de procesos de negocio.</li> <li>ERD (Entity-Relationship Diagrams): Utilizado principalmente en el modelado de datos y bases de datos. Si bien no reemplaza a UML, se enfoca en la representaci\u00f3n de relaciones entre entidades y atributos en un contexto de bases de datos. Puedes aprender m\u00e1s sobre este diagrama a trav\u00e9s de esta entrada en el blog.</li> <li>Archimate: Un est\u00e1ndar de modelado de arquitectura empresarial que se enfoca en la representaci\u00f3n de la arquitectura y la infraestructura empresarial, incluyendo aspectos como procesos, aplicaciones, estructuras de datos, etc.</li> <li>Flowchart (Diagrama de Flujo): Aunque m\u00e1s simple en comparaci\u00f3n con UML, los diagramas de flujo son \u00fatiles para representar algoritmos, flujos de trabajo simples y procesos de toma de decisiones.</li> <li>DSL (Domain-Specific Languages): Estos son lenguajes de modelado dise\u00f1ados espec\u00edficamente para un dominio particular o un problema espec\u00edfico. A menudo, se utilizan para representar conceptos y abstracciones en un dominio espec\u00edfico de manera m\u00e1s precisa que UML.</li> </ul> <p>Estas alternativas pueden ser utilizadas en situaciones donde UML pueda resultar limitado o donde se necesite un enfoque m\u00e1s especializado para el modelado de sistemas. Sin embargo, es importante destacar que UML sigue siendo el est\u00e1ndar predominante y ampliamente aceptado para el modelado de sistemas de software debido a su versatilidad y amplia gama de diagramas para representar diferentes aspectos de un sistema.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#7-herramientas-para-uml","title":"7. Herramientas para UML","text":"<p>Un ejemplo de herramientas \u00fatiles para trabajar con UML:</p> Herramienta Descripci\u00f3n StarUML Software multiplataforma. Lucidchart Herramienta en l\u00ednea para diagramas. Visual Paradigm Modelado avanzado y an\u00e1lisis.","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML/#8-fuente","title":"8. Fuente","text":"<p>Las fuentes utilizadas para desarrollar este contenido incluyen:</p> <ul> <li>P\u00e1gina de diagramas UML</li> <li>Lista de herramientas UML</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/","title":"UD 5 - 5.2 Diagrama de clases","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#52-diagrama-dec-lases","title":"5.2 Diagrama dec lases","text":"<p>Antes de programar una aplicaci\u00f3n, es importante tener una idea clara de c\u00f3mo se estructurar\u00e1 el sistema. Para ello, se utilizan diagramas de clases, que permiten visualizar las clases y sus relaciones en un sistema de informaci\u00f3n. A continuaci\u00f3n, se describen los elementos que componen un diagrama de clases y c\u00f3mo se representan.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>El **diagramade clases ** es uno de los diagramas incluidos en UML 2.5 clasificado dentro de los diagramas de estructura y, como tal, se utiliza para representar los elementos que componen un sistema de informaci\u00f3n desde un punto devista est\u00e1tico.</p> <p>Esimportante destacar que, por esta misma raz\u00f3n, este diagrama noincluye la forma en la que se comportan a lo largo de la ejecuci\u00f3nlos distintos elementos, esa funci\u00f3n puede ser representada a trav\u00e9sde un diagrama de comportamiento, como por ejemplo un diagramade secuenciaoun diagramade casos de uso.</p> <p>El diagrama de clases es un diagrama puramente orientado al modelo de programaci\u00f3n orientado a objetos,ya que define las clases que se utilizar\u00e1n cuando se pase a la fase de construcci\u00f3n y la manera en que se relacionan las mismas. Se podr\u00eda equiparar, salvando las distancias, al famoso diagrama de modelo Entidad-Relaci\u00f3n (E/R), no recogido en UML, ya que tiene una utilidad similar: la representaci\u00f3n de datos y su interacci\u00f3n. Ambos diagramas muestran el modelo l\u00f3gico de los datos de unsistema.</p> <p>El diagrama UML de clases est\u00e1 formado por dos elementos: clases,relaciones e interfaces.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#1-clases","title":"1. Clases","text":"<p>Las clases son el elemento principal del diagrama y representa, como sunombre indica, una clase dentro del paradigma de la orientaci\u00f3n aobjetos. Este tipo de elementos normalmente se utilizan pararepresentar conceptos o entidades del \u00abnegocio\u00bb. Una clase defineun grupode objetos **quecomparten caracter\u00edsticas, condiciones y significado. La manera m\u00e1sr\u00e1pida para encontrar clases sobre un enunciado, sobre una idea denegocio o, en general, sobre un tema concreto es buscar los**sustantivos**queaparecen en el mismo. Por poner alg\u00fan ejemplo, algunas clasespodr\u00edan ser: Animal, Persona, Mensaje, Expediente\u2026 Es un conceptomuy amplio y **resultafundamental identificar de forma efectiva estas clases,en caso de no hacerlo correctamente se obtendr\u00e1n una serie deproblemas en etapas posteriores, teniendo que volver a hacer elan\u00e1lisis y perdiendo parte o todo el trabajo que se ha hecho hastaese momento.</p> <p>Bajandode nivel una clase est\u00e1 compuesta por tres elementos: **nombrede la clase, atributos, funciones. Estos elementos se incluyen en larepresentaci\u00f3n **(ono, dependiendo del nivel de an\u00e1lisis).</p> <p>Pararepresentar la clase con estos elementos se utiliza una caja que esdividida en tres zonas utilizando paraello lineas horizontales:</p> <ul> <li>La    primera de las zonas se utiliza para el nombre de la    clase. En caso de que la clase sea abstracta se utilizar\u00e1 su    nombre en cursiva.</li> <li>La    segunda de las zonas se utiliza para escribir los atributos de la clase, uno por l\u00ednea y utilizando el siguiente formato:</li> </ul> <p>visibilidadnombre_atributo : tipo = valor-inicial { propiedades }</p> <p>Aunqueesta es la forma \u00aboficial\u00bb de escribirlas, es com\u00fan simplificando\u00fanicamente poniendo el nombre y el tipo o \u00fanicamente el nombre.</p> <ul> <li>La    \u00faltima de las zonas incluye cada una de las funciones que   ofrece la clase. De forma parecida a los atributos, sigue el    siguiente formato:</li> </ul> <p>visibilidadnombre_funcion { parametros } : tipo-devuelto { propiedades }</p> <p>Dela misma manera que con los atributos, se suele simplificar indicando\u00fanicamente el nombre de la funci\u00f3n y, en ocasiones, el tipodevuelto.</p> <p>Tantolos atributos como las funciones incluyen al principio de sudescripci\u00f3n la visibilidad que tendr\u00e1. Esta visibilidad seidentifica escribiendo un s\u00edmbolo y podr\u00e1 ser:</p> <ul> <li>**(+) P\u00fablica. **Representa   que se puede acceder al atributo o funci\u00f3n desde cualquier lugar de la aplicaci\u00f3n.</li> <li>**(-) Privada. **Representa   que se puede acceder al atributo o funci\u00f3n \u00fanicamente desde la  misma clase.</li> <li>**(#) Protegida. **Representa que el atributo o funci\u00f3n puede ser accedida \u00fanicamente desde la    misma clase o desde las clases que hereden de ella (clases  derivadas).</li> </ul> <p>Estostres tipos de visibilidad son los m\u00e1s comunes. No obstante, puedenincluirse otros en base al lenguaje de programaci\u00f3n que se est\u00e9usando (no es muy com\u00fan). Por ejemplo: (/) Derivado o (~) Paquete.</p> <p>Unejemplo de clase podr\u00eda ser el siguiente:</p> <p>Encaso de que un atributo o funci\u00f3n sea est\u00e1tico, se representa en eldiagrama subrayando su nombre. Una caracter\u00edstica est\u00e1tica sedefine como aquella que es compartida por cada clase y no instanciadapara cada uno de los objetos de esa clase. Es un concepto muy com\u00fan.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#2-relaciones","title":"2. Relaciones","text":"<p>Unarelaci\u00f3n i**dentificauna dependencia**.Esta dependencia puede ser entre dos o m\u00e1s clases (m\u00e1s com\u00fan) ouna clase hac\u00eda s\u00ed misma (menos com\u00fan, pero existen), este \u00faltimotipo de dependencia se denomina dependenciareflexiva.Las relaciones se representan con una linea que une las clases, estal\u00ednea variar\u00e1 dependiendo del tipo de relaci\u00f3n</p> <p>Lasrelaciones en el diagrama de clases tienen varias propiedades, quedependiendo la profundidad que se quiera dar al diagrama serepresentar\u00e1n o no. Estas propiedades son las siguientes:</p> <ul> <li>Multiplicidad.    Es decir, el n\u00famero de elementos de una clase que participan en una relaci\u00f3n. Se puede indicar un n\u00famero, un rango\u2026 Se utiliza*n    *o  * para identificar un n\u00famero cualquiera.</li> <li>**Nombre  de la asociaci\u00f3n. **En  ocasiones se escriba una indicaci\u00f3n de la asociaci\u00f3n que ayuda a    entender la relaci\u00f3n que tienen dos clases. Suelen utilizarse   verbos como por ejemplo: \u00abUna empresa contrata a n empleados\u00bb</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#tiposde-relaciones","title":"Tiposde relaciones","text":"<p>Undiagrama de clases incluye los siguientes tipos de relaciones:</p> <ul> <li>Asociaci\u00f3n.</li> <li>Agregaci\u00f3n.</li> <li>Composici\u00f3n.</li> <li>Dependencia.</li> <li>Implementaci\u00f3n.</li> <li>Herencia.</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#asociacion","title":"Asociaci\u00f3n","text":"<p>Estetipo de relaci\u00f3n es el m\u00e1s com\u00fan y se utiliza para representardependencia sem\u00e1ntica. Se representa con una simple linea continuaque une las clases que est\u00e1n incluidas en la asociaci\u00f3n.</p> <p>Unejemplo de asociaci\u00f3n podr\u00eda ser: \u00abUna mascota pertenece a unapersona\u00bb.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#agregacion","title":"Agregaci\u00f3n","text":"<p>Esuna representaci\u00f3n jer\u00e1rquica que indica a un objeto y las partesque componen ese objeto. Es decir, representa relaciones en las que**unobjeto es parte de otro**,pero aun as\u00ed debe tener existenciaen s\u00ed mismo.</p> <p>Serepresenta con una l\u00ednea que tiene un rombo en la parte de la claseque es una agregaci\u00f3n de la otra clase (es decir, en la clase quecontiene las otras).</p> <p>Unejemplo de esta relaci\u00f3n podr\u00eda ser: \u00abLas mesas est\u00e1n formadaspor tablas de madera y tornillos o, dicho de otra manera, lostornillos y las tablas forman parte de una mesa\u00bb. Como ves, eltornillo podr\u00eda formar parte de m\u00e1s objetos, por lo que interesaespecialmente su abstracci\u00f3n en otra clase.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#composicion","title":"Composici\u00f3n","text":"<p>Lacomposici\u00f3n es similar a la agregaci\u00f3n, representa una relaci\u00f3njer\u00e1rquica entre un objeto y las partes que lo componen,perode una forma m\u00e1s fuerte.En este caso, los elementos que forman parte no tienen sentido deexistencia cuando el primero no existe. Es decir, cuando el elementoque contiene los otros desaparece, deben desaparecer todos ya que notienen sentido por s\u00ed mismos sino que dependen del elemento quecomponen. Adem\u00e1s, suelen tener los mismos tiempo de vida. Loscomponentes no se comparten entre varios elementos, esta es otra delas diferencias con la agregaci\u00f3n.</p> <p>Serepresenta con una linea continua con un rombo relleno en la claseque es compuesta.</p> <p>Unejemplo de esta relaci\u00f3n ser\u00eda: \u00abUn vuelo de una compa\u00f1\u00eda a\u00e9reaest\u00e1 compuesto por pasajeros, que es lo mismo que decir que unpasajero est\u00e1 asignado a un vuelo\u00bb</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#diferenciaentre-agregacion-y-composicion","title":"Diferenciaentre agregaci\u00f3n y composici\u00f3n","text":"<p>Ladiferencia entre agregaci\u00f3n y composici\u00f3n es sem\u00e1ntica, por lo que**aveces no est\u00e1 del todo definida**.Ninguna de las dos tienen an\u00e1logos en muchos lenguajes deprogramaci\u00f3n (como por ejemplo Java).</p> <p>Un\u00abagregado\u00bb representa untodo que comprende varias partes;de esta manera, un Comit\u00e9 es un agregado de sus Miembros. Unareuni\u00f3n es un agregado de una agenda, una sala y los asistentes. Enel momento de la implementaci\u00f3n, esta relaci\u00f3n no es de contenci\u00f3n.(Una reuni\u00f3n no contiene una sala). Del mismo modo, las partes delagregado podr\u00edan estar haciendo otras cosas en otras partes delprograma, por lo que podr\u00edan ser referenciadas por varios objetosque nada tienen que ver. En otras palabras, no existe una diferenciade nivel de implementaci\u00f3n entre la agregaci\u00f3n y una simplerelaci\u00f3n de \u00abusos\u00bb. En ambos casos, un objeto tiene referencias aotros objetos. Aunque no existe una diferencia en la implementaci\u00f3n,definitivamente vale la pena capturar la relaci\u00f3n en el diagramaUML, tanto porque ayuda a comprender mejor el modelo de dominio, comoporque puede haber problemas de implementaci\u00f3n que pueden pasardesapercibidos. Podr\u00eda permitir relaciones de acoplamiento m\u00e1sestrictas en una agregaci\u00f3n de lo que har\u00eda con un simple \u00abuso\u00bb,por ejemplo.</p> <p>Lacomposici\u00f3n, por otro lado, implica u**nacoplamiento a\u00fan m\u00e1s estricto que la agregaci\u00f3n**,y definitivamente implica la contenci\u00f3n. El requisito b\u00e1sico esque, si una clase de objetos (llamado \u00abcontenedor\u00bb) se compone deotros objetos (llamados \u00abelementos\u00bb), entonces los elementosaparecer\u00e1n y tambi\u00e9n ser\u00e1n destruidos como un efecto secundario decrear o destruir el contenedor. Ser\u00eda raro que un elemento no sedeclare como privado. Un ejemplo podr\u00eda ser el nombre y la direcci\u00f3ndel Cliente. Un cliente sin nombre o direcci\u00f3n no tiene valor. Porla misma raz\u00f3n, cuando se destruye al cliente, no tiene sentidomantener el nombre y la direcci\u00f3n. (Compare esta situaci\u00f3n con laagregaci\u00f3n, donde destruir al Comit\u00e9 no debe causar la destrucci\u00f3nde los miembros, ya que pueden ser miembros de otros Comit\u00e9s).</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#dependencia","title":"Dependencia","text":"<p>Seutiliza este tipo de relaci\u00f3n para representarque una clase requiere de otra para ofrecer sus funcionalidades.Es muy sencilla y se representa con una flecha discontinua que vadesde la clase que necesita la utilidad de la otra flecha hasta estamisma.</p> <p>Unejemplo de esta relaci\u00f3n podr\u00eda ser la siguiente:</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#herencia","title":"Herencia","text":"<p>Otrarelaci\u00f3n muy com\u00fan en el diagrama de clases es la herencia. Estetipo de relaciones permiten que**unaclase****(clasehija o subclase) reciba los atributos y m\u00e9todos de otra clase****(clasepadre o superclase)**.Estos atributos y m\u00e9todos recibidos se suman a los que la clasetiene por s\u00ed misma. Se utiliza en relaciones \u00abes un\u00bb.</p> <p>Unejemplo de esta relaci\u00f3n podr\u00eda ser la siguiente: Un pez, un perroy un gato son animales.</p> <p>Eneste ejemplo, las tres clases (Pez, Perro, Gato) podr\u00e1n utilizar lafunci\u00f3n respirar, ya que lo heredan de la clase animal, perosolamente la clase Pez podr\u00e1 nadar, la clase Perro ladrar y la claseGato maullar. La clase Animal podr\u00eda plantearse ser definidaabstracta, aunque no es necesario.</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#implementacionde-interfaces","title":"Implementaci\u00f3nde Interfaces","text":"<p>Unainterfaz es una entidad que declara una **seriede atributos, funciones y obligaciones. **Esuna especie de contrato donde toda instancia asociada a una interfazdebe de implementar los servicios que indica aquella interfaz.</p> <p>Dadoque \u00fanicamente son declaraciones nopueden ser instanciadas.</p> <p>Surepresentaci\u00f3n es similar a las clases, pero indicando arriba lapalabra &lt;&gt;. <p>Lasinterfaces se asocian a clases. Una asociaci\u00f3n entre una clase y unainterfaz representa que esa clase cumple con el contrato que indicala interfaz, es decir, incluye aquellas funciones y atributos queindica la interfaz. Portanto, esta es la \u00faltimarelaci\u00f3n,y representa la implementaci\u00f3n de esa interfaz por una clase. Estetipo de relaciones permiten que**unaclase****acepteel contrato definidos por ****losatributos y m\u00e9todos de ****la****interfaz**.Estos atributos y m\u00e9todos aceptadosdesde la interfaz deben implementarse y darle uso en la clase.Se utiliza en relaciones \u00abImplementa\u00bbyse representa como se indica en el siguiente ejemplo:</p>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#comodibujar-un-diagrama-de-clases","title":"C\u00f3modibujar un diagrama de clases","text":"<p>Losdiagramas de clase van de la mano con el dise\u00f1o orientado a objetos.Por lo tanto, saber lo b\u00e1sico de este tipo de dise\u00f1o es una parteclave para poder dibujar diagramas de clase eficaces.</p> <p>Estetipo de diagramas son solicitados cuando se est\u00e1 describiendo lavista est\u00e1tica del sistema o sus funcionalidades. Unos peque\u00f1ospasos que puedes utilizar de gu\u00eda para construir estos diagramas sonlos siguientes:</p> <ul> <li>**Identifica  **los   nombres de las clase   El    primer paso es identificar los objetos primarios del sistema. Las   clases suelen corresponder a sustantivos dentro del dominio del problema.</li> <li>**Distingue   **las   relaciones   El    siguiente paso es determinar c\u00f3mo cada una de las clases u objetos  est\u00e1n relacionados entre s\u00ed. Busca los puntos en com\u00fan y las    abstracciones entre ellos; esto te ayudar\u00e1 a agruparlos al dibujar  el diagrama de clase.</li> <li>**Crea    **la    estructura   Primero,  agrega los nombres de clase y vinc\u00falalos con los conectores apropiados, prestando especial atenci\u00f3n a la cardinalidad o las herencias. Deja los atributos y funciones para m\u00e1s tarde, una vez   que est\u00e9 la estructura del diagrama resuelta.</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#buenaspracticas-en-la-construccion-del-diagrama-de-clases","title":"Buenaspr\u00e1cticas en la construcci\u00f3n del diagrama de clases","text":"<p>Terecomendamos seguir estas indicaciones o consejos, que, aunque no sonobligatorios, har\u00e1n que tus diagramas de clases sean de mayorutilidad:</p> <ul> <li>Los   diagramas de clase **pueden tender a volverse incoherentes **a  medida que se expanden y crecen. Es mejor evitar la creaci\u00f3n de diagramas grandes y **dividirlos    **en    otros m\u00e1s peque\u00f1os que se puedan vincular entre s\u00ed m\u00e1s adelante.</li> <li>Usando    la notaci\u00f3n de clase simple, puedes crear r\u00e1pidamente **una visi\u00f3n general de alto nivel **de   su sistema. Se puede crear un diagrama detallado por separado seg\u00fan sea necesario, e incluso vincularlo al primero para una referencia  f\u00e1cil.</li> <li>Cuantas   m\u00e1s l\u00edneas se superpongan en sus diagramas de clase, m\u00e1s    abarrotado se vuelve y, por tanto, m\u00e1s se complica utilizarlo. El   lector se confundir\u00e1 tratando de encontrar el camino. Aseg\u00farate de  que **no    haya dos l\u00edneas cruzadas **entre    s\u00ed, a no ser que no haya m\u00e1s remedio.</li> <li>Usa   **colores   **para  agrupar m\u00f3dulos comunes. Diferentes colores en diferentes clases    ayudan al lector a diferenciar entre los diversos grupos.</li> </ul>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#ejemplosde-diagrama-de-clases","title":"Ejemplosde diagrama de clases","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#diagramade-clases-clinica-veterinaria","title":"Diagramade clases cl\u00ednica veterinaria","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#diagramade-clases-zoologico","title":"Diagramade clases zool\u00f3gico","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#diagramade-clases-de-una-tienda","title":"Diagramade clases de una tienda","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#diagramade-clases-gestion-de-biblioteca","title":"Diagramade clases gesti\u00f3n de biblioteca","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#diagramade-clases-centro-educativo","title":"Diagramade clases centro educativo","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#_1","title":"UD 5 - 5.2 Diagrama de clases","text":"","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#ejemplode-clases-para-un-diagrama-de-clases-de-una-tienda-web","title":"Ejemplode clases para un diagrama de clases de una tienda web","text":"<p>Aqu\u00edte dejo un ejemplo de clases con sus atributos que podr\u00edas incluiren un diagrama de clases de una tienda online:</p> <ol> <li> <p>Usuario:</p> </li> <li> <p>idUsuario:        Identificador \u00fanico del usuario.</p> </li> <li>nombre:       Nombre completo del usuario.</li> <li>correoElectronico:        Direcci\u00f3n de correo electr\u00f3nico del usuario.</li> <li>contrase\u00f1a:       Contrase\u00f1a del usuario.</li> <li>direcci\u00f3n:        Direcci\u00f3n de env\u00edo del usuario.</li> <li> <p>m\u00e9todoDePago:     M\u00e9todo de pago preferido por el usuario.</p> </li> <li> <p>Producto:</p> </li> <li> <p>idProducto:       Identificador \u00fanico del producto.</p> </li> <li>nombre:       Nombre del producto.</li> <li>descripci\u00f3n:      Descripci\u00f3n detallada del producto.</li> <li>precio:       Precio del producto.</li> <li> <p>stock:        Cantidad de unidades disponibles en el inventario.</p> </li> <li> <p>Carrito  de Compras:</p> </li> <li> <p>idCarrito:        Identificador \u00fanico del carrito de compras.</p> </li> <li>productos:        Lista de productos que el usuario ha a\u00f1adido al carrito.</li> <li>subtotal:     Monto total del carrito antes de aplicar impuestos y descuentos.</li> <li> <p>impuestos:        Monto total de impuestos aplicados al carrito.</p> </li> <li> <p>Orden    de compra:</p> </li> <li> <p>idOrden:      Identificador \u00fanico de la orden de compra.</p> </li> <li>productos:        Lista de productos comprados en la orden.</li> <li>subtotal:     Monto total de la orden antes de aplicar impuestos y descuentos.</li> <li>impuestos:        Monto total de impuestos aplicados a la orden.</li> <li>env\u00edo:        Monto del costo de env\u00edo de la orden.</li> <li> <p>total:        Monto total de la orden incluyendo impuestos, descuentos y costo de     env\u00edo.</p> </li> <li> <p>Categor\u00eda:</p> </li> <li> <p>idCategor\u00eda:      Identificador \u00fanico de la categor\u00eda.</p> </li> <li> <p>nombre:       Nombre de la categor\u00eda.</p> </li> <li> <p>Comentarios:</p> </li> <li> <p>idComentario:     Identificador \u00fanico del comentario.</p> </li> <li>producto:     Identificador del producto al que se refiere el comentario.</li> <li>usuario:      Identificador del usuario que escribi\u00f3 el comentario.</li> <li>comentario:       Contenido del comentario.</li> <li>fecha:        Fecha de creaci\u00f3n del comentario.</li> </ol>","tags":["UML","Diagramas","Software"]},{"location":"section3/u05/teoria/EDES-U5.1.-UML_DiagramaClases/#fuente","title":"Fuente","text":"<p>Las fuentes utilizadas para desarrollar este contenido incluyen:</p> <ul> <li>P\u00e1gina de diagramas UML</li> <li>Lista de herramientas UML</li> </ul>","tags":["UML","Diagramas","Software"]}]}