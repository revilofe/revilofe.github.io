{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenid@!","text":"<p>Encontrar\u00e1s informaci\u00f3n sobre m\u00f3dulos de FP y m\u00e1s cosas.</p>"},{"location":"about/","title":"Acerca de","text":"<p>Acerca de</p> <p>el HTML es</p>"},{"location":"blog/","title":"Blog","text":"<p>{{ blog_content }}</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#bbdd","title":"BBDD","text":"<ul> <li>UD 9 - Acceso a base de datos relacionales</li> </ul>"},{"location":"tags/#case","title":"CASE","text":"<ul> <li>UD 2 - Entornos de desarrollo integrado</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 3 - Herramientas Git/Github</li> </ul>"},{"location":"tags/#cadenas","title":"Cadenas","text":"<ul> <li>UD 3 - P0: Cadenas</li> <li>UD 3 - 3.0 Cadenas</li> <li>UD 7 - 7.1 Sistemas de archivos</li> </ul>"},{"location":"tags/#ciberseguridad","title":"Ciberseguridad","text":"<ul> <li>Incidentes de ciberseguridad</li> <li>UD 1 - Planes de ciberseguridad</li> <li>UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad</li> <li>UD 3 - Detecci\u00f3n de incidentes</li> <li>UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad</li> <li>UD 5 - Implemetaci\u00f3n de medidas</li> <li>UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes</li> </ul>"},{"location":"tags/#conjuntos","title":"Conjuntos","text":"<ul> <li>UD 3 - P3: Conjuntos</li> </ul>"},{"location":"tags/#consola","title":"Consola","text":"<ul> <li>UD 7 - 7.2 Consola y teclado</li> </ul>"},{"location":"tags/#dao","title":"DAO","text":"<ul> <li>UD 9 - 9.1 Acceso a BBDD</li> <li>UD 9 - 9.2 JDBC y kotlin</li> <li>UD 9 - 9.3 JDBC Prepared Statement</li> <li>UD 9 - 9.3 Patron DAO</li> <li>UD 9 - 9.5 Otros aspectos</li> </ul>"},{"location":"tags/#debug","title":"Debug","text":"<ul> <li>UD 3 - 3.3 Depuraci\u00f3n</li> </ul>"},{"location":"tags/#depurar","title":"Depurar","text":"<ul> <li>UD 2 - 2.4 Depurar un programa</li> </ul>"},{"location":"tags/#detekt","title":"Detekt","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#diccionarios","title":"Diccionarios","text":"<ul> <li>UD 3 - P2: Diccionarios</li> </ul>"},{"location":"tags/#dinamica","title":"Dinamica","text":"<ul> <li>Din\u00e1mica de presentaci\u00f3n</li> </ul>"},{"location":"tags/#documentar","title":"Documentar","text":"<ul> <li>UD 2 - 2.5 Documentar el c\u00f3digo</li> </ul>"},{"location":"tags/#dokka","title":"Dokka","text":"<ul> <li>UD 4 - 4.4 Documentaci\u00f3n y comentarios</li> </ul>"},{"location":"tags/#edes","title":"EDES","text":"<ul> <li>Entornos de desarrollo</li> <li>UD 1 - Introducci\u00f3n al desarrollo de software</li> <li>UD 1 - 1.1 Relaci\u00f3n entre software y hardware</li> <li>UD 1 - 1.2 Lenguajes de programaci\u00f3n</li> <li>UD 1 - 1.3 Funcionalidades de herramientas usadas durante el desarrollo de software</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 2 - Entornos de desarrollo integrado</li> <li>UD 2 - 2.1 Relaci\u00f3n entre software y hardware</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 3 - 3.1 Pruebas</li> <li>UD 3 - 3.2 Test de unidad y TDD</li> <li>UD 3 - 3.3 Kotest</li> <li>UD 3 - 3.4 Mockk</li> <li>UD 3 - 3.3 Depuraci\u00f3n</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.4 Documentaci\u00f3n y comentarios</li> </ul>"},{"location":"tags/#ejercicios","title":"Ejercicios","text":"<ul> <li>UD 1 - P1: Mi primer programa</li> <li>UD 1 - P3: Control de versiones con Git y GitHub - Parte 1</li> <li>UD 2 - P1: Condicionales</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 3 - P0: Cadenas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P2: Diccionarios</li> <li>UD 3 - P3: Conjuntos</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> </ul>"},{"location":"tags/#file","title":"File","text":"<ul> <li>UD 7 - 7.3 Manejo de archivos: File</li> <li>UD 7 - 7.4 Lectura y escritura de archivos</li> </ul>"},{"location":"tags/#funciones","title":"Funciones","text":"<ul> <li>UD 3 - 3.5 Funciones</li> </ul>"},{"location":"tags/#git","title":"GIT","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#github","title":"GitHub","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#hardware","title":"Hardware","text":"<ul> <li>UD 1 - 1.1 Relaci\u00f3n entre software y hardware</li> <li>UD 2 - 2.1 Relaci\u00f3n entre software y hardware</li> <li>UD 3 - 3.2 Test de unidad y TDD</li> </ul>"},{"location":"tags/#is","title":"IS","text":"<ul> <li>Din\u00e1mica de presentaci\u00f3n</li> </ul>"},{"location":"tags/#incidentes","title":"Incidentes","text":"<ul> <li>Incidentes de ciberseguridad</li> <li>UD 1 - Planes de ciberseguridad</li> <li>UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad</li> <li>UD 3 - Detecci\u00f3n de incidentes</li> <li>UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad</li> <li>UD 5 - Implemetaci\u00f3n de medidas</li> <li>UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes</li> </ul>"},{"location":"tags/#jdbc","title":"JDBC","text":"<ul> <li>UD 9 - 9.1 Acceso a BBDD</li> <li>UD 9 - 9.2 JDBC y kotlin</li> <li>UD 9 - 9.3 JDBC Prepared Statement</li> <li>UD 9 - 9.3 Patron DAO</li> <li>UD 9 - 9.5 Otros aspectos</li> </ul>"},{"location":"tags/#kdoc","title":"KDoc","text":"<ul> <li>UD 4 - 4.4 Documentaci\u00f3n y comentarios</li> </ul>"},{"location":"tags/#lenguajes","title":"Lenguajes","text":"<ul> <li>UD 1 - 1.2 Lenguajes de programaci\u00f3n</li> </ul>"},{"location":"tags/#listas","title":"Listas","text":"<ul> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> </ul>"},{"location":"tags/#mock","title":"Mock","text":"<ul> <li>UD 3 - 3.4 Mockk</li> </ul>"},{"location":"tags/#presentacion","title":"Presentacion","text":"<ul> <li>Din\u00e1mica de presentaci\u00f3n</li> </ul>"},{"location":"tags/#pruebas","title":"Pruebas","text":"<ul> <li>UD 3 - 3.1 Pruebas</li> </ul>"},{"location":"tags/#software","title":"Software","text":"<ul> <li>Programaci\u00f3n</li> <li>UD 1 - Mi primer programa</li> <li>UD 1 - P1: Mi primer programa</li> <li>UD 1 - 1.1 Un programa inform\u00e1tico</li> <li>UD 1 - 1.2 Practica con un lenguaje</li> <li>UD 1 - 1.3 Tipos de datos</li> <li>UD 1 - P3: Control de versiones con Git y GitHub - Parte 1</li> <li>UD 2 - Sentencias condicionales y repetitivas</li> <li>UD 2 - P1: Condicionales</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - 2.1 Condicionales</li> <li>UD 2 - 2.2 Iterativas y salto</li> <li>UD 2 - 2.3 Captura de excepciones</li> <li>UD 2 - 2.4 Depurar un programa</li> <li>UD 2 - 2.5 Documentar el c\u00f3digo</li> <li>UD 3 - Estructuras de datos</li> <li>UD 3 - P0: Cadenas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P2: Diccionarios</li> <li>UD 3 - P3: Conjuntos</li> <li>UD 3 - 3.0 Cadenas</li> <li>UD 3 - 3.1 Listas</li> <li>UD 3 - 3.1 Tuplas</li> <li>UD 3 - 3.3 Diccionarios</li> <li>UD 3 - 3.4 Conjuntos</li> <li>UD 3 - 3.5 Funciones</li> <li>UD 3 - Estructuras de datos</li> <li>UD 3 - P1: Listas</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 3 - Estructuras de datos</li> <li>UD 3 - P1: Listas</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 6 - Pendiente</li> <li>UD 3 - P1: Listas</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 7 - Interfaces texto y gr\u00e1fica. Entrada/Salida</li> <li>UD 3 - P1: Listas</li> <li>UD 7 - 7.1 Sistemas de archivos</li> <li>UD 7 - 7.2 Consola y teclado</li> <li>UD 7 - 7.3 Manejo de archivos: File</li> <li>UD 7 - 7.4 Lectura y escritura de archivos</li> <li>UD 9 - Acceso a base de datos relacionales</li> <li>UD 3 - P1: Listas</li> <li>UD 9 - 9.1 Acceso a BBDD</li> <li>UD 9 - 9.2 JDBC y kotlin</li> <li>UD 9 - 9.3 JDBC Prepared Statement</li> <li>UD 9 - 9.3 Patron DAO</li> <li>UD 9 - 9.5 Otros aspectos</li> <li>Entornos de desarrollo</li> <li>UD 1 - Introducci\u00f3n al desarrollo de software</li> <li>UD 1 - P3: Aplica Scrum</li> <li>UD 1 - 1.1 Relaci\u00f3n entre software y hardware</li> <li>UD 2 - P1: Herramientas de desarrollo</li> <li>UD 2 - 2.1 Relaci\u00f3n entre software y hardware</li> <li>UD 3 - P1: Git/Github b\u00e1sico</li> <li>UD 3 - 3.1 Pruebas</li> <li>UD 3 - 3.2 Test de unidad y TDD</li> <li>UD 3 - 3.3 Kotest</li> <li>UD 3 - 3.4 Mockk</li> <li>UD 3 - 3.3 Depuraci\u00f3n</li> <li>UD 4 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P2: Git/Github Merge</li> <li>UD 4 - P3: Git/Github Rebase I</li> <li>UD 4 - P4: Git/Github Rebase II</li> <li>UD 4 - P5: Git/Github Pull Request</li> </ul>"},{"location":"tags/#teclado","title":"Teclado","text":"<ul> <li>UD 7 - 7.2 Consola y teclado</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>UD 1 - 1.3 Funcionalidades de herramientas usadas durante el desarrollo de software</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 2 - Entornos de desarrollo integrado</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#tuplas","title":"Tuplas","text":"<ul> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> </ul>"},{"location":"tags/#git_1","title":"git","text":"<ul> <li>UD 3 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P2: Git/Github Merge</li> <li>UD 4 - P3: Git/Github Rebase I</li> <li>UD 4 - P4: Git/Github Rebase II</li> <li>UD 4 - P5: Git/Github Pull Request</li> </ul>"},{"location":"tags/#github_1","title":"github","text":"<ul> <li>UD 3 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P2: Git/Github Merge</li> <li>UD 4 - P3: Git/Github Rebase I</li> <li>UD 4 - P4: Git/Github Rebase II</li> <li>UD 4 - P5: Git/Github Pull Request</li> </ul>"},{"location":"tags/#kotest","title":"kotest","text":"<ul> <li>UD 3 - 3.3 Kotest</li> </ul>"},{"location":"tags/#kotlin","title":"kotlin","text":"<ul> <li>Scope functions en kotlin, como usarlas.</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 4 - 4.1 kotlin</li> </ul>"},{"location":"tags/#ktlint","title":"ktlint","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>Porque en Python empiezan los programas con if name == main</li> </ul>"},{"location":"tags/#scope-functions","title":"scope functions","text":"<ul> <li>Scope functions en kotlin, como usarlas.</li> </ul>"},{"location":"tags/#test","title":"test","text":"<ul> <li>UD 3 - 3.1 Pruebas</li> </ul>"},{"location":"blog/20221026-nameEnPython/","title":"Porque en Python empiezan los programas con if __name__ == __main__","text":"<p>Cuando un int\u00e9rprete de Python lee un archivo de Python, primero establece algunas variables especiales. Luego ejecuta el c\u00f3digo desde el archivo.</p> <p>Una de esas variables se llama <code>__name__</code> .</p> <p>Si sigues este art\u00edculo paso a paso y lees sus fragmentos de c\u00f3digo, aprender\u00e1s c\u00f3mo usar <code>if __name__ == \"__main__\"</code>, y por qu\u00e9 es tan importante.</p>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#modulos-de-python-explicados","title":"M\u00f3dulos de Python explicados","text":"<p>Los archivos de Python se llaman m\u00f3dulos y se identifican mediante la extensi\u00f3n de archivo <code>.py</code>. Un m\u00f3dulo puede definir funciones, clases y variables.</p> <p>Entonces, cuando el int\u00e9rprete ejecuta un m\u00f3dulo, el variable <code>__name__</code> se establecer\u00e1 como <code>__main__</code> si el m\u00f3dulo que se est\u00e1 ejecutando es el programa principal.</p> <p>Pero si el c\u00f3digo est\u00e1 importando el m\u00f3dulo desde otro m\u00f3dulo, entonces el variable <code>__name__</code> se establecer\u00e1 en el nombre de ese m\u00f3dulo.</p> <p>Echemos un vistazo a un ejemplo. Cree un m\u00f3dulo de Python llamado <code>file_one.py</code> y pegue este c\u00f3digo de nivel superior dentro:</p> <pre><code># Python file one module\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n</code></pre> <p>Al ejecutar este archivo, ver\u00e1s exactamente de lo que est\u00e1bamos hablando. La variable <code>__name__</code> para este m\u00f3dulo se establece en <code>__main__</code>:</p> <pre><code>File one __name__ is set to: __main_\n</code></pre> <p>Ahora agregua otro archivo llamado <code>file_two.py</code> y pegua este c\u00f3digo dentro:</p> <pre><code># Python module to import\nprint(\"File two __name__ is set to: {}\" .format(__name__))\n</code></pre> <p>Adem\u00e1s, modifica el c\u00f3digo en <code>file_one.py</code> de esta manera para que importemos el m\u00f3dulo <code>file_two</code>:</p> <pre><code># Python module to execute\nimport file_two\nprint(\"File one __name__ is set to: {}\" .format(__name__))\n</code></pre> <p>Ejecutando nuestro c\u00f3digo <code>file_one</code> una vez m\u00e1s mostrar\u00e1 que la variable <code>__name__</code> en <code>file_one</code> no cambi\u00f3, y a\u00fan permanece establecida en <code>__main__</code>. Pero ahora la variable <code>__name__</code> en <code>file_two</code> se establece como el nombre del m\u00f3dulo, por lo tanto <code>file_two</code>.</p> <p>El resultado deber\u00eda verse as\u00ed:</p> <pre><code>File two __name__ is set to: file_two\nFile one __name__ is set to: __main__\n</code></pre> <p>Pero ejecuta <code>file_two</code> directamente y ver\u00e1s que su nombre est\u00e1 establecido en <code>__main__</code>:</p> <pre><code>File two __name__ is set to: __main__\n</code></pre> <p>La variable <code>__name__</code> para el archivo/m\u00f3dulo que se ejecuta ser\u00e1 siempre <code>__main__</code>. Pero la variable <code>__name__</code> para todos los dem\u00e1s m\u00f3dulos que se importan se establecer\u00e1 en el nombre de su m\u00f3dulo.</p>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#convenciones-de-nombres-de-archivos-de-python","title":"Convenciones de nombres de archivos de Python","text":"<p>La forma habitual de usar <code>__name__</code> y <code>__main__</code> se ve as\u00ed:</p> <pre><code>if __name__ == \"__main__\":\nDo something here\n</code></pre> <p>Veamos c\u00f3mo funciona esto en la vida real y c\u00f3mo usar realmente estas variables.</p> <p>Modifica <code>file_one</code> y <code>file_two</code> para que se vean as\u00ed:</p> <p><code>file_one</code>:</p> <pre><code># Python module to execute\nimport file_two\nprint(\"File one __name__ is set to: {}\" .format(__name__))\nif __name__ == \"__main__\":\nprint(\"File one executed when ran directly\")\nelse:\nprint(\"File one executed when imported\")\n</code></pre> <p><code>file_two</code>:</p> <pre><code># Python module to import\nprint(\"File two __name__ is set to: {}\" .format(__name__))\nif __name__ == \"__main__\":\nprint(\"File two executed when ran directly\")\nelse:\nprint(\"File two executed when imported\")\n</code></pre> <p>Nuevamente, al ejecutar <code>file_one</code> , ver\u00e1s que el programa reconoci\u00f3 cu\u00e1l de estos dos m\u00f3dulos es <code>__main__</code> y ejecut\u00f3 el c\u00f3digo de acuerdo con nuestras primeras declaraciones <code>if else</code>.</p> <p>El resultado deber\u00eda verse as\u00ed:</p> <pre><code>File two __name__ is set to: file_two\nFile two executed when imported\nFile one __name__ is set to: __main__\nFile one executed when ran directly\n</code></pre> <p>Ahora ejecuta <code>file_two</code> y ver\u00e1s que la variable <code>__name__</code> est\u00e1 establecida en <code>__main__</code>:</p> <pre><code>File two __name__ is set to: __main__\nFile two executed when ran directly\n</code></pre> <p>Cuando se importan y ejecutan m\u00f3dulos como este, se importar\u00e1n sus funciones y se ejecutar\u00e1 el c\u00f3digo de nivel superior.</p> <p>Para ver este proceso en acci\u00f3n, modifica tus archivos para que se vean as\u00ed:</p> <p><code>file_one</code>:</p> <pre><code># Python module to execute\nimport file_two\nprint(\"File one __name__ is set to: {}\" .format(__name__))\ndef function_one():\nprint(\"Function one is executed\")\ndef function_two():\nprint(\"Function two is executed\")\nif __name__ == \"__main__\":\nprint(\"File one executed when ran directly\")\nelse:\nprint(\"File one executed when imported\")\n</code></pre> <p><code>file_two</code>:</p> <pre><code># Python module to import\nprint(\"File two __name__ is set to: {}\" .format(__name__))\ndef function_three():\nprint(\"Function three is executed\")\nif __name__ == \"__main__\":\nprint(\"File two executed when ran directly\")\nelse:\nprint(\"File two executed when imported\")\n</code></pre> <p>Ahora las funciones se cargan pero no se ejecutan.</p> <p>Para ejecutar una de estas funciones, modifica la parte <code>if __name__ == \"__main__\"</code> de <code>file_one</code> para que se vea as\u00ed:</p> <pre><code>if __name__ == \"__main__\":\nprint(\"File one executed when ran directly\")\nfunction_two()\nelse:\nprint(\"File one executed when imported\")\n</code></pre> <p>Al ejecutar <code>file_one</code>, deber\u00edas ver que sea as\u00ed:</p> <pre><code>File two __name__ is set to: file_two\nFile two executed when imported\nFile one __name__ is set to: __main__\nFile one executed when ran directly\nFunction two is executed\n</code></pre> <p>Adem\u00e1s, puedes ejecutar funciones desde archivos importados. Para hacer eso, modifica la parte <code>if __name__ ==\"__name__\"</code> de <code>file_one</code> para que se vea as\u00ed:</p> <pre><code>if __name__ == \"__main__\":\nprint(\"File one executed when ran directly\")\nfunction_two()\nfile_two.function_three()\nelse:\nprint(\"File one executed when imported\")\n</code></pre> <p>Y puedes espera un resultado como este:</p> <pre><code>File two __name__ is set to: file_two\nFile two executed when imported\nFile one __name__ is set to: __main__\nFile one executed when ran directly\nFunction two is executed\nFunction three is executed\n</code></pre> <p>Ahora digamos que el m\u00f3dulo <code>file_two</code> es realmente grande con muchas funciones (dos en nuestro caso), y no deseas importarlas todas. Modifica   <code>file_two</code> para que se vea as\u00ed:</p> <pre><code># Python module to import\nprint(\"File two __name__ is set to: {}\" .format(__name__))\ndef function_three():\nprint(\"Function three is executed\")\ndef function_four():\nprint(\"Function four is executed\")\nif __name__ == \"__main__\":\nprint(\"File two executed when ran directly\")\nelse:\nprint(\"File two executed when imported\")\n</code></pre> <p>Y para importar las funciones espec\u00edficas del m\u00f3dulo, usa el bloque <code>from</code> import en el archivo <code>file_one</code>:</p> <pre><code># Python module to execute\nfrom file_two import function_three\nprint(\"File one __name__ is set to: {}\" .format(__name__))\ndef function_one():\nprint(\"Function one is executed\")\ndef function_two():\nprint(\"Function two is executed\")\nif __name__ == \"__main__\":\nprint(\"File one executed when ran directly\")\nfunction_two()\nfunction_three()\nelse:\nprint(\"File one executed when imported\")\n</code></pre>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#conclusion","title":"Conclusion","text":"<p>Hay un caso de uso realmente agradable para la variable <code>__name__</code>, ya sea que desees un archivo que se pueda ejecutar como el programa principal o sea importardo por otros m\u00f3dulos. Podemos usar un bloque <code>if __name__ == \"__name__\"</code> para permitir o evitar que se ejecuten partes del c\u00f3digo cuando sean importados los m\u00f3dulos.</p> <p>Cuando el int\u00e9rprete de Python lee un archivo, la variable <code>__name__</code> se establece como <code>__main__</code> si el m\u00f3dulo que se est\u00e1 ejecutando, o como el nombre del m\u00f3dulo si se importa. Al leer el archivo se ejecuta todo el c\u00f3digo de nivel superior, pero no las funciones y clases (ya que solamente se importar\u00e1n).</p>","tags":["python"]},{"location":"blog/20221026-nameEnPython/#fuente","title":"Fuente","text":"<ul> <li>Python if name == main Explicado con ejemplos de c\u00f3digo</li> </ul>","tags":["python"]},{"location":"blog/20230213-scopeFunctions/","title":"Funciones de alcance (scope functions)","text":"<p>Kotlin proporciona un conjunto de funciones que ayudan a aclarar un poco m\u00e1s el c\u00f3digo y hacen la programaci\u00f3n un poco mas divertida. Estas funciones se llaman scope functions.</p> <p>Scope functions: el prop\u00f3sito de estas funciones es ejecutar un bloque de c\u00f3digo dentro del contexto de un objeto.</p> <p>La librer\u00eda est\u00e1ndar actualmente cuenta con las siguientes funciones de alcance: <code>let</code>, <code>run</code>, <code>with</code>, <code>apply</code> y <code>also</code>.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#como-usarlas","title":"\u00bfC\u00f3mo usarlas?","text":"<p>Hay dos elementos que las diferencian:</p> <ol> <li>C\u00f3mo accedemos al objeto referenciado dentro del scope:</li> <li>Para las funciones <code>let</code> y <code>also</code> accedemos mediante el <code>it</code>.</li> <li>Para <code>run</code>, <code>with</code> y <code>apply</code> utilizamos <code>this</code>.</li> <li>Qu\u00e9 valor retorna:</li> <li><code>apply</code> y <code>also</code> devuelven el objeto como tal, tras ejecutar el bloque de c\u00f3digo.</li> <li><code>let</code>, <code>run</code> y <code>with</code> devuelven el valor de retorno del lambda que reciben, es decir, retorna el valor de nuestra \u00faltima sentencia ejecutada en ese lambda.</li> </ol> <p>Por otra parte tambien podemos hacer la siguiente distinci\u00f3n entre ellas:</p> <p></p> <ul> <li>Input: </li> <li>input receiver, recibe el objeto mediante llamada a funciones de extension: <code>apply</code>, <code>run</code>, <code>also</code>, <code>let</code>. </li> <li> <p>input parameter, recibe el objeto como par\u00e1metro: <code>with</code></p> </li> <li> <p>Binding in lambda </p> </li> <li>Receiver <code>this</code>: El mismo objeto es quien recibe la llamada de las funciones <code>apply</code>, <code>run</code>, <code>with</code></li> <li> <p>Parameter <code>it</code>: <code>also</code>, <code>let</code>. En este caso, nos permite llamar a una referencia pas\u00e1ndole <code>it</code> como argumento, por ejemplo ::println</p> </li> <li> <p>Output</p> </li> <li>El mismo objeto: <code>apply</code>, <code>also</code>.</li> <li>El resultado de la lambda: <code>run</code>, <code>let</code>, <code>with</code>. <code>run</code> y <code>with son lo mismo, salvo que</code>run es una funci\u00f3n de extensi\u00f3n.</li> </ul> <p>Podemos ver la definici\u00f3n de cada una de estas funciones a continuaci\u00f3n:</p> <pre><code>//with\ninline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R {\nreturn receiver.block()\n}\n//also\ninline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T {\nblock(this)\nreturn this\n}\n//apply\ninline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T {\nblock()\nreturn this\n}\n//let\ninline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R {\nreturn block(this)\n}\n//run\ninline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R {\nreturn block()\n}\n</code></pre> <p>Y ejemplos de uso de cada uno de ellas.</p> <pre><code>//with\nval r: R = with(T()) { this.foo(); this.toR() }\n//also\nval t: T = T().also { it.foo() }\n//apply\nval t: T = T().apply { this.foo() }\n//let\nval r: R = T().let { it.foo(); it.toR() }\n//run\nval r: R = T().run { this.foo(); this.toR() }\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#cuando-usarlas","title":"\u00bfCu\u00e1ndo usarlas?","text":"<p>Si bien todas realizan la misma funci\u00f3n, lo que cambia, adem\u00e1s de lo previamente mencionado, es el contexto, y es ah\u00ed donde debemos distinguir qu\u00e9 funci\u00f3n conviene utilizar.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#let","title":"let","text":"<pre><code>// `let` implementation without contract\ninline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R = block(this)\n</code></pre> <p><code>let</code>, por ejemplo, se suele utilizar en dos situaciones distintas, cuando queremos ejecutar un bloque de c\u00f3digo solo con valores no nulos o para invocar una o m\u00e1s funciones con resultados en cadena. Unos ejemplos sencillos ser\u00edan:</p> <pre><code>val str: String? = \"Hello\"   val value = str?.let { \"$it world\"\n}\nprintln(value)\n~ Hello world\n</code></pre> <pre><code>val numbers = mutableListOf(\"one\", \"two\", \"three\", \"four\", \"five\")\nnumbers.map { it.length }.filter { it &gt; 3 }.let {\nprintln(it)\n}\n~ [5, 4, 4]\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#run","title":"run","text":"<pre><code>// `run` implementation without contract\ninline fun &lt;R&gt; run(block: () -&gt; R): R = block()\n// `run` implementation without contract\ninline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R = block()\n</code></pre> <p>El <code>run</code> se suele utilizar cuando inicializamos una variable seguido de una interacci\u00f3n con la misma. Tiene la particularidad de que no siempre es necesario utilizar el <code>this</code> para referenciar al objeto dentro del scope, como en el siguiente ejemplo:</p> <pre><code>fun request(status: String): String = \"Result for request '$status'\"\nval result = service.run {\nstatus = 200\nquery(\"$status\")\n}\nprint(result)\n~ Result for query '200'\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#apply","title":"apply","text":"<pre><code>// `apply` implementation without contract\ninline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T {\nblock()\nreturn this\n}\n</code></pre> <p>En el caso del <code>apply</code>, es com\u00fan utilizarlo para la inicializaci\u00f3n de objetos. Se lee como: aplicar las siguientes asignaciones al objeto.</p> <pre><code>val user = User(\"Lucas\").apply {\nage = 26\ncountry = \"Argentina\"\naddress = \"Avenida Siempre Viva 742\"\n}\nprint(user)\n~ Person(name=Lucas, age=26, country=Argentina, address=Avenida Siempre Viva 742)\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#also","title":"also","text":"<pre><code>// `also` implementation without contract\ninline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T {\nblock(this)\nreturn this\n}\n</code></pre> <p><code>also</code>, tiene un buen uso cuando realizamos algunas acciones que no est\u00e1n estrictamente relacionadas con el objeto en s\u00ed, pero que lo utilizan como argumento. Se lee como: y adem\u00e1s, realiza lo siguiente.</p> <pre><code>getResults(fooParam).also {\nLog.v(TAG, \"It's greater than ${it}\")\n}\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#with","title":"with","text":"<pre><code>// `with` implementation without contract\ninline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R =\nreceiver.block()\n</code></pre> <p><code>with</code>, a diferencia de las dem\u00e1s funciones, pasa al objeto como par\u00e1metro en vez de ser el objeto qui\u00e9n llame a la funci\u00f3n. Se suele utilizar en contextos donde no necesitamos obtener un resultado en s\u00ed mismo, sino que queremos aplicar una operaci\u00f3n con/sobre el objeto. Se lee como: con este objeto, hacemos lo siguiente.</p> <pre><code>val numbers = mutableListOf(\"one\", \"two\", \"three\")\nval firstAndLast = with(numbers) {\n\"The first element is ${first()},\" +\n\" the last element is ${last()}\"\n}\nprint(firstAndLast)\n~ The first element is one, the last element is three\n</code></pre>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#como-estas-funciones-nos-podrian-ayudar-a-dar-claridad-a-nuestro-codigo","title":"\u00bfC\u00f3mo estas funciones nos podr\u00edan ayudar a dar claridad a nuestro c\u00f3digo?","text":"<p>Bueno, pongamos un ejemplo m\u00e1s cercano a la realidad para verlo con mejor perspectiva. Supongamos que tenemos la siguiente funci\u00f3n, que sirve para actualizar una vista en Android. <pre><code>fun bind(fooDTO: FooDTO?) {\nif (fooDTO != null) {\nif (fooDTO.title != null) {\ntv_title.text = fooDTO.title\n} else {\ncontainer_title.visibility = GONE\n}\nif (fooDTO.listFoo != null) {\nfooDTO.listFoo.forEach { objectList -&gt;\nif (objectList != null &amp;&amp; objectList.text != null) {\nitemView.text = objectList.text\ncontainer_body.addView(itemView)\n}\n}\n} else {\ncontainer_body.visibility = GONE\n}\n}\n}\n</code></pre></p> <p>\u00bfBastante engorroso a simple vista no? Ahora cambiemos los if-else por scope functions. Nos quedar\u00eda algo como: <pre><code>fun bind(fooDTO: FooDTO?) {\nfooDTO?.let {\nit.title?.let { tv_title.text = it }\n:? run { container_title.visibility = GONE }\nit.listFoo?.forEach { objectList -&gt;\nobjectList?.text?.run {\nitemView.text = this\ncontainer_body.addView(itemView)\n}\n} :? run { container_body.visibility = GONE }\n}\n}\n</code></pre></p> <p>Obviamente cada una de las funciones elegidas pueden ser discutidas, en cuanto a si es el <code>run</code> o el <code>apply</code> el que deber\u00eda usar, por dar un ejemplo, pero creo que podemos coincidir en que, la estructura completa del m\u00e9todo (funci\u00f3n en Kotlin) y la coherencia del c\u00f3digo, es mucho m\u00e1s acertada que en la versi\u00f3n anterior.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#otras-funciones","title":"Otras funciones","text":"<p>Existen otras dos funciones que son muy \u00fatiles, pero que no entran en el espectro de las  scope functions , que son <code>takeIf</code> y <code>takeUnless</code>. Estas funciones nos permiten ejecutar acciones dependiendo del estado del objeto. Si la condici\u00f3n se cumple, retorna el objeto y sino devuelve <code>null</code>. <pre><code>val positiveNumber = number.takeIf { it &gt;= 0 }\nval negativeNumber = number.takeUnless { it &gt;= 0 }\n</code></pre></p> <p>Si combinamos las diferentes funciones, junto con el operador de nullabilidad <code>?.</code>, podemos notar c\u00f3mo el c\u00f3digo va tomando un formato m\u00e1s natural.</p> <pre><code>fooDTO?.let {\nit.title?.takeIf { it.isNotEmpty() }?.apply { tv_title?.text = this }\n?: run { tv_title?.visibility = GONE }\nit.subtitle?.takeIf { it.isNotEmpty() }?.apply { tv_subtitle?.text = this }\n?: run { tv_subtitle?.visibility = GONE }\n}\n</code></pre> <p>Como se indica en la documentaci\u00f3n oficial:</p> <p>Las funciones de alcance no introducen nuevas capacidades t\u00e9cnicas, pero pueden hacer que su c\u00f3digo sea m\u00e1s conciso y legible.</p>","tags":["scope functions","kotlin"]},{"location":"blog/20230213-scopeFunctions/#fuente","title":"Fuente","text":"<ul> <li>Funciones de alcance (scope functions)</li> <li>Kotlin Scoping Functions apply vs. with, let, also, and run</li> <li>Scope Functions - kt.academy</li> <li>Resumen de scope functions</li> </ul>","tags":["scope functions","kotlin"]},{"location":"section1/","title":"Programaci\u00f3n","text":"<p>M\u00f3dulo de programaci\u00f3n, 1 DAW.</p> <ul> <li>Presentaci\u00f3n</li> <li>Formulario 1: Como soy</li> <li>Formulario 2: Conocimientos previos</li> </ul> <p>Se describe el m\u00f3dulo profesional de programaci\u00f3n. Esta informaci\u00f3n se divide en:</p> <ul> <li>Una primera secci\u00f3n de Informaci\u00f3n general en la que se hace una propuesta de temario, con la relaci\u00f3n de unidades y los resultados de aprendizaje asociados, asi como las posibles fechas en las que se impartir\u00edan.</li> <li>Una segunda secci\u00f3n con Materiales relacionados con el modulo, como Fuentes de informaci\u00f3n, libros recomendados, recursos y herramientas para aplicar conceptos.</li> </ul> <p>Todo el contenido est\u00e1 supeditado a mejora, de hecho est\u00e1 en construcci\u00f3n, y por tanto es solo una propuesta que ir\u00e1 cambiando, espero que a mejor. Si tienes una propuesta de mejora, no te cortes y p\u00e1samela ;-).</p>","tags":["Software"]},{"location":"section1/#informacion","title":"Informaci\u00f3n","text":"","tags":["Software"]},{"location":"section1/#propuesta-de-temario","title":"Propuesta de temario","text":"<p>En los siguientes enlaces se encuentran los contenidos, resultados de aprendizaje, criterios de evaluaci\u00f3n y herramientas para trabajarlos y poder evaluarlos. Es solo una propuesta, pero puede servir de punto de partida inicial.</p> <ol> <li>Introducci\u00f3n al desarrollo de software</li> </ol>","tags":["Software"]},{"location":"section1/#relacion-de-unidades-y-resultados-de-aprendizaje","title":"Relaci\u00f3n de unidades y resultados de aprendizaje","text":"Unidad UD 1 UD 2 UD 3 UD 4 UD 5 UD 6 RA 1 X RA 2 X RA 3 X RA 4 X RA 5 X RA 6 X","tags":["Software"]},{"location":"section1/#relacion-de-unidades-y-fechas","title":"Relaci\u00f3n de unidades y fechas","text":"<p>El curso tiene un total de 24 semanas (720 horas). La relaci\u00f3n propuesta entre unidades y semanas es la siguiente:</p> Unidad Semanas 1 Semana 1 - 2 2 Semana 2 - 7 3 Semana  - 4 Semana  - 5 Semana  - 6 Semana  -","tags":["Software"]},{"location":"section1/#materiales","title":"Materiales","text":"","tags":["Software"]},{"location":"section1/#fuentes","title":"Fuentes","text":"<ul> <li>Rafael del Rio: Utilizado para la estructura de la p\u00e1gina de presentaci\u00f3n del m\u00f3dulo.</li> <li>Jos\u00e9 Antonio Mu\u00f1oz Jim\u00e9nez: Utilizado en parte del contenido del m\u00f3dulo.</li> </ul>","tags":["Software"]},{"location":"section1/#bibliografia","title":"Bibliograf\u00eda","text":"<ul> <li>Kenneth C. Louden. \u201cLenguajes de programaci\u00f3n: Principios y pr\u00e1ctica\u201d. Paraninfo, 2004</li> <li>Roger S. Pressman. \u201cIngenier\u00eda del software: Un enfoque pr\u00e1ctico 7a Ed.\u201d. McGraw Hill, 2010</li> <li>Carlos Bl\u00e9. \u201cDise\u00f1o \u00e1gil con TDD\u201d. iExpertos, 2010</li> <li>Kent Beck. \u201cTest driven development by example\u201d. Addison Wesley, 2002</li> <li>Tobias Mayer &amp; Alan Cyment. \u201cPor un Scrum popular: Notas para una revoluci\u00f3n Agile\u201d. Dymaxicon, 2014</li> <li>Henrik Kniberg. \u201cScrum y XP desde las trincheras\u201d. C4Media, 2007</li> <li>Federico Toledo. \u201cIntroducci\u00f3n a las pruebas de S.I.: Un enfoque pr\u00e1ctico\u201d. Abstracta, 2014</li> <li>Martin Fowler. \u201cRefactoring: Improving the design of existing code\u201d. Alhambra mexicana, 1999</li> <li>Martin Fowler y Kendall Scott. \u201cUML gota a gota\u201d. Alhambra mexicana, 1999</li> <li>Robert C. Martin. \u201cUML para programadores Java\u201d. Pearson, 2004</li> <li>Cat\u00e1logo de patrones de refactorizaci\u00f3n</li> <li>Refactoring Guru</li> <li>Patrones de dise\u00f1o</li> <li>Gu\u00eda definitiva de Scrum</li> <li>Git la gu\u00eda sencilla</li> <li>Git en entornos distribuidos</li> <li>Java, generaci\u00f3n de documentaci\u00f3n</li> <li>Python Documentation Generator, Sphinx</li> <li>UML, gu\u00eda digitales/digitalguide/paginas-web/desarrollo-web/uml-lenguaje-unificado-de-modelado-orientado-a-objetos/)</li> <li>eduScurm, \u00a1Colaboraci\u00f3n que te da alas!</li> </ul>","tags":["Software"]},{"location":"section1/#recursos","title":"Recursos","text":"<ul> <li>Plataforma de e-learning: Moodle,</li> <li>Paquete ofim\u00e1tico: LibreOffice</li> <li>Sistema operativo: Windows 10 y Linux (Ubuntu u otra distribuci\u00f3n similar)</li> <li>Entornos integrados de desarrollo y Editores: Visual Studio Code, IntelliJ, PyCharm, Sublime.</li> <li>Sistema de control de versiones: git, github</li> <li>Programas para el dise\u00f1o de diagramas UML (DIA, UMLet, online LucidChart,\u2026)</li> </ul>","tags":["Software"]},{"location":"section1/#contenido","title":"Contenido","text":"<p>T\u00edpicamente se intenta tener los siguientes apartados en cada uno de los m\u00f3dulos profesionales:</p> <ul> <li>Teor\u00eda.</li> <li>Presentaciones.</li> <li>Ejercicios.</li> <li>Pr\u00e1cticas evaluables.</li> <li>Ex\u00e1menes</li> </ul>","tags":["Software"]},{"location":"section1/u01/","title":"UD 1 - Mi primer programa","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u01/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"<p>pendiente</p>","tags":["Software"]},{"location":"section1/u01/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 1. Conoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado.</p>","tags":["Software"]},{"location":"section1/u01/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han identificado los bloques que componen la estructura de un programa inform\u00e1tico.</li> <li>b) Se han creado proyectos de desarrollo de aplicaciones.</li> <li>c) Se han utilizado entornos integrados de desarrollo.</li> <li>d) Se han identificado los distintos tipos de variables y la utilidad espec\u00edfica de cada uno.</li> <li>e) Se ha modificado el c\u00f3digo de un programa para crear y utilizar variables.</li> <li>f) Se han creado y utilizado constantes y literales.</li> <li>g) Se han clasificado, reconocido y utilizado en expresiones los operadores del lenguaje.</li> <li>h) Se ha comprobado el funcionamiento de las conversiones de tipos expl\u00edcitas e impl\u00edcitas.</li> <li>i) Se han introducido comentarios en el c\u00f3digo. </li> </ul>","tags":["Software"]},{"location":"section1/u01/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque1  </p> <ul> <li>U1: Mi primer programa.  </li> <li>U2: Sentencias condicionales y repetitivas.    </li> </ul> <p>Durante la Unidad 1, veremos:  </p> <ul> <li>Que es un programa y un algoritmo.  </li> <li>Bloques principales de un programa.  </li> <li>Elementos b\u00e1sicos de un lenguaje.  </li> <li>Instalaci\u00f3n de un IDE.  </li> </ul>","tags":["Software"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/","title":"UD 1 - P1: Mi primer programa","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#p11-introduccion-al-uso-de-python-en-windows-para-principiantes","title":"P1.1 - Introducci\u00f3n al uso de Python en Windows para principiantes","text":"<p>A continuaci\u00f3n, ofrecemos una gu\u00eda paso a paso para aquellos usuarios principiantes interesados en aprender Python con Windows.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#configurar-el-entorno-de-desarrollo","title":"Configurar el entorno de desarrollo","text":"<p>Si eres un usuario principiante y no est\u00e1s familiarizado con Python, te recomendamos instalar Python desde Microsoft Store. La instalaci\u00f3n a trav\u00e9s de Microsoft Store utiliza el int\u00e9rprete de Python3 b\u00e1sico, pero controla el establecimiento de la configuraci\u00f3n del valor PATH para el usuario actual (lo que evita la necesidad de contar con acceso de administrador) y, adem\u00e1s, proporciona actualizaciones autom\u00e1ticas. Resulta especialmente \u00fatil si te encuentras en un entorno educativo o en un departamento de una organizaci\u00f3n que restringe los permisos o el acceso administrativo en la m\u00e1quina.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#instalar-python","title":"Instalar Python","text":"<p>Para instalar Python con Microsoft Store:</p> <ol> <li>Ve al men\u00fa Inicio (icono de Windows de la esquina inferior izquierda), escribe \"Microsoft Store\" y selecciona el v\u00ednculo para abrir Store.</li> <li>Una vez que lo hayas abierto, selecciona Buscar en el men\u00fa superior derecho y escribe \"Python\". Seleccione la versi\u00f3n de Python que quiera usar en los resultados de la opci\u00f3n Aplicaciones. Se recomienda usar la m\u00e1s reciente, a menos que tenga una raz\u00f3n para no hacerlo (por ejemplo, alinearse con la versi\u00f3n que se us\u00f3 en un proyecto existente en el que planea trabajar). Una vez que haya determinado qu\u00e9 versi\u00f3n quiere instalar, seleccione  Obtener .</li> <li>Una vez que Python haya completado el proceso de descarga e instalaci\u00f3n, abre Windows PowerShell mediante el men\u00fa Inicio (icono de Windows de la esquina inferior izquierda). Cuando PowerShell est\u00e9 abierto, escribe <code>Python --version</code> para confirmar que Python3 est\u00e1 instalado en la m\u00e1quina.</li> <li>La instalaci\u00f3n de Microsoft Store de Python incluye  PIP , el administrador de paquetes est\u00e1ndar. PIP te permite instalar y administrar paquetes adicionales que no forman parte de la biblioteca est\u00e1ndar de Python. Para confirmar que tambi\u00e9n dispones de PIP para instalar y administrar paquetes, escribe <code>pip --version</code>.</li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#instalar-visual-studio-code","title":"Instalar Visual Studio Code","text":"<p>Al usar VS Code como editor de texto/entorno de desarrollo integrado (IDE), puedes aprovechar IntelliSense (una ayuda de finalizaci\u00f3n de c\u00f3digo), el detector de errores (permite evitar que se produzcan errores en el c\u00f3digo), el soporte t\u00e9cnico de depuraci\u00f3n (ayuda a buscar errores en el c\u00f3digo despu\u00e9s de ejecutarlo), los fragmentos de c\u00f3digo (plantillas para peque\u00f1os bloques de c\u00f3digo reutilizables) y las pruebas unitarias (para probar la interfaz del c\u00f3digo con distintos tipos de entrada).</p> <p>VS Code tambi\u00e9n contiene un terminal integrado que te permite abrir una l\u00ednea de comandos de Python con el s\u00edmbolo del sistema de Windows, PowerShell o cualquier otra herramienta que prefieras, y establece un flujo de trabajo sin interrupciones entre el editor de c\u00f3digo y la l\u00ednea de comandos.</p> <ol> <li>Para instalar VS Code, descarga VS Code para Windows: https://code.visualstudio.com.</li> <li>Una vez instalado VS Code, tambi\u00e9n debes instalar la extensi\u00f3n de Python. Para instalar la extensi\u00f3n de Python, puedes seleccionar el v\u00ednculo para VS Code de Marketplace o abrir VS Code y buscar Python en el men\u00fa de extensiones (Control + May\u00fas + X).</li> <li>Python es un lenguaje interpretado y, para ejecutar el c\u00f3digo de Python, debes indicar a VS Code el int\u00e9rprete que debe usar. Se recomienda usar la versi\u00f3n m\u00e1s reciente de Python, a menos que tenga una raz\u00f3n espec\u00edfica para elegir alguna diferente. Despu\u00e9s de instalar la extensi\u00f3n de Python, selecciona un int\u00e9rprete de Python 3. Para ello, abre la paleta de comandos (Control + May\u00fas + P) y empieza a escribir el comando Python: Select Interpreter para buscarlo y, luego, selecci\u00f3nalo. Tambi\u00e9n puedes usar la opci\u00f3n Select Python Environment (Seleccionar entorno de Python) en la barra de estado inferior si est\u00e1 disponible (es posible que ya se muestre un int\u00e9rprete seleccionado). El comando presenta una lista de los int\u00e9rpretes disponibles que VS Code puede buscar autom\u00e1ticamente, incluidos los entornos virtuales. Si no ves el int\u00e9rprete que quieres, consulta Configuraci\u00f3n de los entornos de Python.    </li> <li>Para abrir el terminal en VS Code, selecciona  Ver &gt; Terminal , o bien usa el acceso directo Control + ` (mediante el car\u00e1cter de tilde aguda). El terminal predeterminado es PowerShell.</li> <li>En el terminal de VS Code, simplemente escribe el comando <code>python</code> para abrir Python.</li> <li>Para probar el int\u00e9rprete de Python, escribe <code>print(\"Hello World\")</code>. Python devolver\u00e1 la instrucci\u00f3n \"Hola mundo\".    </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#instalar-git-opcional","title":"Instalar GIT (opcional)","text":"<p>Si planeas colaborar con otras personas en el c\u00f3digo de Python u hospedar el proyecto en un sitio de c\u00f3digo abierto (como GitHub), VS Code admite el control de versiones con GIT. La pesta\u00f1a Control de c\u00f3digo fuente de VS Code realiza un seguimiento de todos los cambios y tiene comandos GIT comunes (agregar, confirmar, enviar cambios e incorporar cambios) integrados directamente en la interfaz de usuario. Primero, debes instalar GIT para alimentar el panel de control de c\u00f3digo fuente.</p> <ol> <li>Descarga e instala GIT para Windows desde el sitio web git-scm.</li> <li>Se incluye un asistente para instalaci\u00f3n que te formular\u00e1 una serie de preguntas sobre la configuraci\u00f3n de la instalaci\u00f3n de GIT. Te recomendamos que uses todas las opciones de configuraci\u00f3n predeterminadas, a menos que tengas un motivo concreto para cambiar algo.</li> <li>Si nunca has trabajado con GIT, las gu\u00edas de GitHub pueden resultarte de ayuda para empezar.</li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#tutorial-de-hola-mundo-para-algunos-aspectos-basicos-de-python","title":"Tutorial de Hola mundo para algunos aspectos b\u00e1sicos de Python","text":"<p>Python, seg\u00fan su creador Guido van Rossum, es un \"lenguaje de programaci\u00f3n de alto nivel y su filosof\u00eda de dise\u00f1o b\u00e1sico trata sobre la legibilidad del c\u00f3digo y una sintaxis que permite a los programadores expresar conceptos en unas pocas l\u00edneas de c\u00f3digo\".</p> <p>Python es un lenguaje interpretado. A diferencia de los lenguajes compilados, en los que el c\u00f3digo que escribes debe traducirse en c\u00f3digo m\u00e1quina para que lo ejecute el procesador del equipo, el c\u00f3digo de Python se pasa a un int\u00e9rprete y se ejecuta directamente. Solo tienes que escribir el c\u00f3digo y ejecutarlo. Prob\u00e9moslo.</p> <ol> <li>Con la l\u00ednea de comandos de PowerShell abierta, escribe <code>python</code> para ejecutar el int\u00e9rprete de Python 3. (Algunas instrucciones prefieren usar el comando <code>py</code> o <code>python3</code> y tambi\u00e9n deber\u00edan funcionar). Sabr\u00e1 que se ha ejecutado correctamente porque se mostrar\u00e1 un aviso &gt;&gt;&gt; con tres s\u00edmbolos de \"mayor que\" .</li> <li>Hay varios m\u00e9todos integrados que permiten realizar modificaciones en las cadenas de Python. Crea una variable con <code>variable = 'Hello World!'</code>. Presiona Entrar para que se muestre una nueva l\u00ednea.</li> <li>Imprime la variable con <code>print(variable)</code>. Se mostrar\u00e1 el texto \"Hello World!\".</li> <li>Averigua la longitud (el n\u00famero de caracteres que se usan) de la variable de cadena con <code>len(variable)</code>. Se mostrar\u00e1 que se usan 12 caracteres. (Ten en cuenta que el espacio en blanco se cuenta como un car\u00e1cter en la longitud total).</li> <li>Convierte la variable de cadena en letras may\u00fasculas: <code>variable.upper()</code>. Convierte la variable de cadena en letras min\u00fasculas: <code>variable.lower()</code>.</li> <li>Cuenta el n\u00famero de veces que se usa la letra \"l\" en la variable de cadena: <code>variable.count(\"l\")</code>.</li> <li>Busca un car\u00e1cter espec\u00edfico en la variable de cadena. En este caso, buscaremos el signo de exclamaci\u00f3n con <code>variable.find(\"!\")</code>. Se mostrar\u00e1 que el signo de exclamaci\u00f3n se encuentra en el car\u00e1cter und\u00e9cimo de la cadena.</li> <li>Reemplaza el signo de exclamaci\u00f3n por un signo de interrogaci\u00f3n: <code>variable.replace(\"!\", \"?\")</code>.</li> <li>Para salir de Python, puedes escribir <code>exit()</code> o <code>quit()</code>, o seleccionar Control-Z.</li> </ol> <p></p> <p>Lo que acabas de ver, son algunos de los m\u00e9todos de modificaci\u00f3n de cadenas integrados de Python. Ahora intenta crear un archivo de programa de Python y ejecutarlo con VS Code.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#tutorial-hola-mundo-para-usar-python-con-vs-code","title":"Tutorial Hola mundo para usar Python con VS Code","text":"<p>El equipo de VS Code ha elaborado el excelente tutorial Introducci\u00f3n a Python en el que se explica c\u00f3mo crear un programa Hola mundo con Python, ejecutar el archivo de programa, configurar y ejecutar el depurador e instalar paquetes como matplotlib y NumPy para crear un trazado gr\u00e1fico dentro de un entorno virtual.</p> <ol> <li>Abre PowerShell y crea una carpeta vac\u00eda denominada \"hello\", navega a esta carpeta y \u00e1brela en VS Code:    **Consola**Copiar</li> </ol> <p><pre><code>mkdir hello\ncd hello\ncode .\n</code></pre> 2. Una vez que se abra VS Code y se muestre la nueva carpeta Hello en la ventana Explorador del lado izquierdo, abra una ventana de l\u00ednea de comandos en el panel inferior de VS Code. Para ello, presione Control + ` (mediante el car\u00e1cter de tilde aguda) o seleccione  Ver &gt; Terminal . Al iniciar VS Code en una carpeta, esa carpeta se convierte en tu \"\u00e1rea de trabajo\". VS Code almacena la configuraci\u00f3n espec\u00edfica de esa \u00e1rea de trabajo en. vscode/settings.json, que es independiente de la configuraci\u00f3n de usuario que se almacena globalmente. 3. Contin\u00faa con el tutorial en la documentaci\u00f3n de VS Code: Creaci\u00f3n de un archivo de c\u00f3digo fuente de Hola mundo de Python.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica001/#fuente","title":"Fuente","text":"<ul> <li>Introducci\u00f3n a Python</li> <li>Introducci\u00f3n para principiantes</li> </ul>","tags":["Software","Ejercicios"]},{"location":"section1/u01/practica/PROG-U1.-Practica002/","title":"* Pr\u00e1ctica 1.2: Primeros programas","text":""},{"location":"section1/u01/practica/PROG-U1.-Practica002/#p12-ejercicios","title":"P1.2 - Ejercicios","text":""},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-21","title":"Ejercicio 2.1","text":"<p>Escribe un programa que pida el nombre del usuario para luego darle la bienvenida.</p> <pre><code>Escribe tu nombre: Juan\nHola, Juan.\n</code></pre>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-22","title":"Ejercicio 2.2","text":"<p>Escribe un programa para pedirle al usuario las horas de trabajo y el precio por hora y calcule el importe total del servicio.</p> <pre><code>Horas de trabajo: 6\nCoste por hora: 10\nImporte total: 60\n</code></pre>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-23","title":"Ejercicio 2.3","text":"<p>Suponiendo que se han ejecutado las siguientes sentencias de asignaci\u00f3n:</p> <pre><code>ancho = 17\nalto = 12.0\n</code></pre> <p>Para cada una de las expresiones siguientes, intenta adivinar el valor de la expresi\u00f3n y su tipo sin ejecutarlas en  el int\u00e9rprete:</p> <p><pre><code>1. ancho / 2\n2. ancho // 2\n3. alto / 3\n4. 1 + 2 * 5\n</code></pre> Cuando termines comprueba con el int\u00e9rprete si has acertado.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-24","title":"Ejercicio 2.4","text":"<p>Escribe un programa que le pida al usuario una temperatura en grados Celsius, la convierta a grados Fahrenheit e imprima por pantalla la temperatura convertida.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-25","title":"Ejercicio 2.5","text":"<p>Escribe un programa que pida el importe sin IVA de un art\u00edculo y el tipo de IVA a aplicar y calcule e imprima por pantalla el precio final del art\u00edculo.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-26","title":"Ejercicio 2.6","text":"<p>Escribe un programa que pida el importe final de un art\u00edculo y calcule e imprima por pantalla el IVA que se ha pagado y el importe sin IVA (suponiendo que se ha aplicado un tipo de IVA del 10%).</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-27","title":"Ejercicio 2.7","text":"<p>Escribe un programa que solicite tres n\u00fameros al usuario y calcule e imprima por pantalla su suma.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-28","title":"Ejercicio 2.8","text":"<p>Escribir el programa del ejercicio 1.7 usando solamente dos variables diferentes.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-29","title":"Ejercicio 2.9","text":"<p>\u00bfEs posible escribir el programa del ejercicio 1.7 sin usar variables? Int\u00e9ntalo.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-210","title":"Ejercicio 2.10","text":"<p>Escribir un programa que muestre por pantalla el resultado de la siguiente operaci\u00f3n aritm\u00e9tica</p> <p></p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-211","title":"Ejercicio 2.11","text":"<p>Escribir un programa que lea un entero positivo, n, introducido por el usuario y despu\u00e9s muestre en pantalla la suma de todos los enteros desde 1 hasta n. La suma de los n primeros enteros positivos puede ser calculada de la siguiente forma:</p> <p></p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-212","title":"Ejercicio 2.12","text":"<p>Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el \u00edndice de masa corporal y lo almacene en una variable, y muestre por pantalla la frase Tu \u00edndice de masa corporal es  donde  es el \u00edndice de masa corporal calculado redondeado con dos decimales."},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-213","title":"Ejercicio 2.13","text":"<p>Escribir un programa que pida al usuario dos n\u00fameros enteros y muestre por pantalla los siguienteS: \"la divisi\u00f3n de <code>n</code> entre <code>m</code> da un cociente <code>c</code> y un resto <code>r</code>\", donde <code>n</code> y <code>m</code> son los n\u00fameros introducidos por el usuario, y <code>c</code> y <code>r</code> son el cociente y el resto de la divisi\u00f3n entera respectivamente.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-214","title":"Ejercicio 2.14","text":"<p>Una jugueter\u00eda tiene mucho \u00e9xito en dos de sus productos: payasos y mu\u00f1ecas. Suele hacer venta por correo y la empresa de log\u00edstica les cobra por peso de cada paquete as\u00ed que deben calcular el peso de los payasos y mu\u00f1ecas que saldr\u00e1n en cada paquete a demanda. Cada payaso pesa 112 g y cada mu\u00f1eca 75 g. Escribir un programa que lea el n\u00famero de payasos y mu\u00f1ecas vendidos en el \u00faltimo pedido y calcule el peso total del paquete que ser\u00e1 enviado.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-215","title":"Ejercicio 2.15","text":"<p>Imagina que acabas de abrir una nueva cuenta de ahorros que te ofrece el 4% de inter\u00e9s al a\u00f1o. Estos ahorros debido a intereses, que no se cobran hasta finales de a\u00f1o, se te a\u00f1aden al balance final de tu cuenta de ahorros. Escribir un programa que comience leyendo la cantidad de dinero depositada en la cuenta de ahorros, introducida por el usuario. Despu\u00e9s el programa debe calcular y mostrar por pantalla la cantidad de ahorros tras el primer, segundo y tercer a\u00f1os. Redondear cada cantidad a dos decimales.</p> <p><code>Calcula el inter\u00e9s: capital * (1 + interes)</code></p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-216","title":"Ejercicio 2.16","text":"<p>Una panader\u00eda vende barras de pan a 3.49\u20ac cada una. El pan que no es el d\u00eda tiene un descuento del 60%. Escribir un programa que comience leyendo el n\u00famero de barras vendidas que no son del d\u00eda. Despu\u00e9s el programa debe mostrar el precio habitual de una barra de pan (establecido en el programa como una constante), el descuento que se le hace por no ser fresca y el coste final total de todas las barras no frescas.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-217","title":"Ejercicio 2.17","text":"<p>Escribir un programa que pregunte el nombre del usuario en la consola y un n\u00famero entero e imprima por pantalla en l\u00edneas distintas el nombre del usuario tantas veces como el n\u00famero introducido.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-218","title":"Ejercicio 2.18","text":"<p>Escribir un programa que pregunte el nombre completo del usuario en la consola y despu\u00e9s muestre por pantalla el nombre completo del usuario tres veces, una con todas las letras min\u00fasculas, otra con todas las letras may\u00fasculas y otra solo con la primera letra del nombre y de los apellidos en may\u00fascula. El usuario puede introducir su nombre combinando may\u00fasculas y min\u00fasculas como quiera.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-219","title":"Ejercicio 2.19","text":"<p>Escribir un programa que pregunte el nombre del usuario en la consola y despu\u00e9s de que el usuario lo introduzca muestre por pantalla \"<code>NOMBRE</code> tiene <code>n</code> letras.\", donde <code>NOMBRE</code> es el nombre de usuario en may\u00fasculas y <code>n</code> es el n\u00famero de letras que tienen el nombre.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-220","title":"Ejercicio 2.20","text":"<p>Los tel\u00e9fonos de una empresa tienen el siguiente formato prefijo-n\u00famero-extension donde el prefijo es el c\u00f3digo del pa\u00eds +34, y la extensi\u00f3n tiene dos d\u00edgitos (por ejemplo +34-913724710-56). Escribir un programa que pregunte por un n\u00famero de tel\u00e9fono con este formato y muestre por pantalla el n\u00famero de tel\u00e9fono sin el prefijo y la extensi\u00f3n.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-221","title":"Ejercicio 2.21","text":"<p>Escribir un programa que pida al usuario que introduzca una frase en la consola y muestre por pantalla la frase invertida.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-222","title":"Ejercicio 2.22","text":"<p>Escribir un programa que pida al usuario que introduzca una frase en la consola y una vocal, y despu\u00e9s muestre por pantalla la misma frase pero con la vocal introducida en may\u00fascula.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-223","title":"Ejercicio 2.23","text":"<p>Escribir un programa que pregunte el correo electr\u00f3nico del usuario en la consola y muestre por pantalla otro correo electr\u00f3nico con el mismo nombre (la parte delante de la arroba @) pero con dominio ceu.es.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-224","title":"Ejercicio 2.24","text":"<p>Escribir un programa que pregunte por consola el precio de un producto en euros con dos decimales y muestre por pantalla el n\u00famero de euros y el n\u00famero de c\u00e9ntimos del precio introducido.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-225","title":"Ejercicio 2.25","text":"<p>Escribir un programa que pregunte al usuario la fecha de su nacimiento en formato dd/mm/aaaa y muestra por pantalla, el d\u00eda, el mes y el a\u00f1o. Adaptar el programa anterior para que tambi\u00e9n funcione cuando el d\u00eda o el mes se introduzcan con un solo car\u00e1cter.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-226","title":"Ejercicio 2.26","text":"<p>Escribir un programa que pregunte por consola por los productos de una cesta de la compra, separados por comas, y muestre por pantalla cada uno de los productos en una l\u00ednea distinta.</p>"},{"location":"section1/u01/practica/PROG-U1.-Practica002/#ejercicio-227","title":"Ejercicio 2.27","text":"<p>Escribir un programa que pregunte el nombre el un producto, su precio y un n\u00famero de unidades y muestre por pantalla una cadena con el nombre del producto seguido de su precio unitario con 6 d\u00edgitos enteros y 2 decimales, el n\u00famero de unidades con tres d\u00edgitos y el coste total con 8 d\u00edgitos enteros y 2 decimales.</p>"},{"location":"section1/u01/practica/OtrosRecursos/readme/","title":"Readme","text":"<p>Nuevo material. </p>"},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/","title":"UD 1 - 1.1 Un programa inform\u00e1tico","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#la-programacion","title":"La programaci\u00f3n","text":"<ul> <li>Definici\u00f3n: Es el proceso por el cual se desarrolla un programa, haciendo uso de herramientas como un lenguajes de programaci\u00f3n y de otra que sea capaz de \u201ctraducirlo\u201d a lo que se conoce como lenguaje de m\u00e1quina, que puede \"comprender\" el microprocesador.</li> <li>Ciclo de vida: Entender el problema, recopilar requisitos, Planificar, Dise\u00f1ar, Programar, Probar, Desplegar, Mantener.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#ordenador","title":"Ordenador","text":"<ul> <li>M\u00e1quina electr\u00f3nica, anal\u00f3gica o digital, dotada de una memoria de gran capacidad y de m\u00e9todos de tratamiento de la informaci\u00f3n, capaz de resolver problemas matem\u00e1ticos y l\u00f3gicos mediante la utilizaci\u00f3n de programas inform\u00e1ticos.</li> <li>Un ordenador ejecuta programas, que son un conjunto de instrucciones representadas mediante un lenguaje de programaci\u00f3n y datos que se ejecutan de forma secuencial y que a partir de unos datos de entrada producen una salida. Para ejecutar esos programas el ordenador sigue esta estructura b\u00e1sica:</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#que-es-un-programa-o-software","title":"\u00bfQu\u00e9 es un programa o software?","text":"<p>El software, por su parte, de acuerdo con el IEEE: \u201ces el conjunto de los programas de c\u00f3mputo, procedimientos, reglas, documentaci\u00f3n y datos asociados, que forman parte de las operaciones de un sistema de computaci\u00f3n\u201d.</p> <p>Dicho en otras palabras, son todos los programas o aplicaciones que integran un dispositivo y que le permiten realizar tareas espec\u00edficas gracias al lenguaje de programaci\u00f3n.</p> <p>El software le da instrucciones al hardware de la forma como debe realizar una tarea, por esta raz\u00f3n, todos los programas que usamos en un dispositivo son software, por ejemplo:</p> <ul> <li>Navegador web como Google Chrome o Mozilla Firefox.</li> <li>Sistemas operativos como Windows, Mac OS, Linux, entre otros.</li> <li>Antivirus.</li> <li>Aplicaciones de ofim\u00e1tica como Microsoft Word.</li> <li>Sistemas empresariales como un BPMS, ERP, CRM, entre otros.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#tipos-de-software","title":"Tipos de software","text":"<ul> <li>De sistema (Sistema operativo, drivers -controladores-)</li> <li>De aplicaci\u00f3n (Suite ofim\u00e1tica, Navegador, Edici\u00f3n de imagen, ...)</li> <li>De desarrollo (Editores, compiladores, interpretes, ...)</li> </ul> <p>Los drivers son los controladores de dispositivos.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#relacion-hardware-software","title":"Relaci\u00f3n Hardware-Software","text":"<p>La relaci\u00f3n entre el software y el hardware se pueden describir de la siguiente forma: * Disco duro: almacena de forma permanente los archivos ejecutables y los archivos de datos. * Memoria RAM: almacena de forma temporal el c\u00f3digo binario de los archivos ejecutables y los archivos de datos necesarios.  * CPU: lee y ejecuta instrucciones almacenadas en memoria RAM, as\u00ed como los datos necesarios.  * E/S: recoge nuevos datos desde la entrada, se muestran los resultados, se leen/guardan a disco. </p> <p>El disco duro se considera un perif\u00e9rico de E/S (Entrada/Salida).</p> <p>La CPU se llama tambi\u00e9n UCP (en ingl\u00e9s), procesador o microprocesador.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#algoritmos","title":"Algoritmos","text":"<p>Como dec\u00edamos, la programaci\u00f3n es el proceso que se utiliza para la creaci\u00f3n de programas que se ejecutan en dispositivos con capacidad de c\u00f3mputo. Estos programas son creados para satisfacer unas necesidades o resolver problemas.</p> <p>Para que este proceso sea exitoso, se ha de analizar el problema que se quiere satisfacer y describir cada paso que se va a realizar, es decir, se ha de dise\u00f1ar el algoritmo (secuencia de pasos) que se va a seguir para llegar a la soluci\u00f3n.</p> <p>Algoritmo: En t\u00e9rminos de programaci\u00f3n, un algoritmo es una secuencia de pasos l\u00f3gicos que permiten solucionar un problema.</p> <p>Una vez se tenga el algoritmo, se podr\u00e1 pasar a su codificaci\u00f3n traduciendo el algoritmo a un lenguaje de programaci\u00f3n y por \u00faltimo se generar\u00e1 el programa que se ejecutar\u00e1 en el ordenador para poder depurarse antes de darlo por finalizado. </p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#caracteristicas-de-los-algoritmos","title":"Caracter\u00edsticas de los algoritmos","text":"<p>Las algoritmos son independientes del lenguaje en el que se implementan y del dispositivo en el que se ejecutan. Seg\u00fan Joyanes en su libro \u201cFundamentos de la programaci\u00f3n\u201d, las caracter\u00edsticas que debe tener cualquier algoritmo son:  * Preciso: se debe indicar el orden de realizaci\u00f3n de cada paso  * Definido: si se sigue un algoritmo dos veces con las mismas entradas, se debe obtener el mismo resultado.  * Finito: todo algoritmo debe terminar en alg\u00fan momento.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#ejemplo-de-algoritmo","title":"Ejemplo de algoritmo","text":"<p>El pseudoc\u00f3digo se puede considerar como un lenguaje intermedio entre el lenguaje humano y el lenguaje de programaci\u00f3n y las palabras reservadas de este. Tambi\u00e9n permite la representaci\u00f3n de las estructuras de control y la asignaci\u00f3n de manera muy f\u00e1cil.</p> <p>Supongamos que queremos resolver un problema, sobre como realizar el mantenimiento de una l\u00e1mpara.</p> <pre><code>Si la lampara funciona entonces\n    fin. # (1)\nSi no\n    Si la lampara NO est\u00e1 enchufada entonces\n        Enchufarla.\n    Si el foco est\u00e1 quemado entonces\n        Reemplazar el foco.\n    Si sigue sin funcionar entonces\n        Comprar nueva l\u00e1mpara.\nfin. # (1)      \n</code></pre> <ol> <li> Con la palabra <code>fin</code>, finaliza el programa.</li> </ol> <p>Los diagramas de flujo son representaciones gr\u00e1ficas de la secuencia de operaciones que se realizan dentro de un algoritmo. Se representan mediante un conjunto de formas unidas por flechas. Para indicar el inicio del diagrama, se representa en un \u00f3valo la palabra \u201cinicio\u201d. Una secuencia de operaciones se representan mediante una secuencia (lo m\u00e1s detallada posible) de rect\u00e1ngulos de arriba-abajo o derecha-izquierda. Un rombo representa una operaci\u00f3n condicional con dos posibles caminos a seguir.</p> <p></p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.1.-UnProgramaInformatico/#lenguajes-de-programacion","title":"Lenguajes de programaci\u00f3n","text":"<ul> <li>TIOBE</li> <li>Encuesta stackoverflow</li> <li>\u00bfQue lenguajes de programaci\u00f3n conoces?</li> <li>\u00bfTienes alguna preferencia?</li> <li>\u00bfCu\u00e1l crees que se adapta mejor a:<ul> <li>multiplataforma?</li> <li>desarrollo web?</li> </ul> </li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/","title":"UD 1 - 1.2 Practica con un lenguaje","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#bloques-basicos","title":"Bloques b\u00e1sicos","text":"<p>Los programas est\u00e1n compuestos por un conjunto de bloques </p> <ul> <li>Main, punto de entrada: Inicio del flujo de ejecuci\u00f3n de un programa</li> <li>Paquetes e import: Agrupa clases, e incorpora clases para su uso, respectivamente</li> <li>Funciones: Bloques de c\u00f3digo con nombre que pueden ser reutilizados</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#python","title":"Python","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#introduccion-a-python-caracteristicas-del-lenguaje","title":"Introducci\u00f3n a Python: Caracter\u00edsticas del lenguaje","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel. Las principales caracter\u00edsticas de Python son las siguientes:</p> <ul> <li>Es multiparadigma , ya que soporta la programaci\u00f3n imperativa, programaci\u00f3n orientada a objetos y funcional.</li> <li>Es multiplataforma : Se puede encontrar un int\u00e9rprete de Python para los principales sistemas operativos:  Windows , Linux y  Mac OS . Adem\u00e1s, se puede reutilizar el mismo c\u00f3digo en cada una de las plataformas.</li> <li>Es din\u00e1micamente tipado : Es decir, el tipo de las variables se decide en tiempo de ejecuci\u00f3n.</li> <li>Es fuertemente tipado: No se puede usar una variable en un contexto fuera de su tipo. Si se quisiera, habr\u00eda que hacer una conversi\u00f3n de tipos.</li> <li>Es interpretado : El c\u00f3digo no se compila a lenguaje m\u00e1quina.</li> </ul> <p>El hecho de que Python sea interpretado quiere decir que hace falta un int\u00e9rprete que permita ejecutar un programa o script escrito en Python sin necesidad de compilarlo.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#el-interprete-de-python","title":"El int\u00e9rprete de Python","text":"<p>Cuando instalas Python correctamente (en cualquier sistema operativo) ocurren, entre otras, dos cosas: se a\u00f1ade el comando <code>python</code> (o <code>python3</code>, en caso de que instales la versi\u00f3n 3.x de Python) al path y se instala el int\u00e9rprete de Python correspondiente.</p> <p>En el int\u00e9rprete de Python podemos escribir expresiones e instrucciones que este interpretar\u00e1 y ejecutar\u00e1.</p> <p>Puedes probar, por ejemplo, a escribir <code>2 + 3</code>. El resultado debe ser el siguiente:</p> <pre><code>&gt;&gt;&gt;2 + 3\n5\n</code></pre> <p>O ejecutar la instrucci\u00f3n <code>print('\u00a1Hola mundo!')</code>:</p> <pre><code>&gt;&gt;&gt;print('\u00a1Hola mundo!')\n\u00a1Hola mundo!\n</code></pre> <p>Para salir del int\u00e9rprete basta con ejecutar la instrucci\u00f3n <code>quit()</code>.</p> <p>No obstante, aunque esta forma de escribir c\u00f3digo puede ser \u00fatil para aprender y en casos muy puntuales, no es la habitual a la hora de escribir un programa o script en Python.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#primer-programa-en-python","title":"Primer programa en Python","text":"<p>Normalmente, los programas en Python se escriben en archivos con la extensi\u00f3n <code>.py</code>. Estos archivos se pasan al int\u00e9rprete de Python para que los interprete y ejecute.</p> <p>Vamos a verlo con un ejemplo. Crea con un editor de texto un fichero llamado <code>suma.py</code> con el siguiente contenido:</p> <pre><code>suma = 2 + 3\nprint(suma)\n</code></pre> <p>A continuaci\u00f3n abre un terminal, sit\u00faate en el directorio en el que creaste el archivo <code>suma.py</code> y ejecuta lo siguiente:</p> <p><code>$ python3 suma.py</code></p> <p>En el terminal ver\u00e1s que aparece el n\u00famero <code>5</code> como resultado de ejecutar el programa anterior. \u00bfQu\u00e9 ha ocurrido aqu\u00ed? B\u00e1sicamente que el int\u00e9rprete de Python ha le\u00eddo y ejecutado las l\u00edneas de c\u00f3digo que hemos escrito en el fichero <code>suma.py</code>.</p> <p>Esta es la manera m\u00e1s com\u00fan de crear y ejecutar programas en Python.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-expresiones-y-sentencias-en-python","title":"Operadores, expresiones y sentencias en Python","text":"<p>Para introducirse en cualquier lenguajes es importante saber la diferencia entre operador, expresi\u00f3n y sentencia, ya que son las formas b\u00e1sicas que componen la estructura de cualquier programa.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operador","title":"Operador","text":"<p>Un operador es un car\u00e1cter o conjunto de caracteres que act\u00faa sobre una, dos o m\u00e1s variables y/o literales para llevar a cabo una operaci\u00f3n con un resultado determinado. Veremos la definici\u00f3n de variable y literales en los siguientes puntos.</p> <p>Ejemplos de operadores comunes son los operadores aritm\u00e9ticos <code>+</code> (suma), <code>-</code> (resta) o <code>*</code> (producto), aunque en Python existen otros operadores.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#orden-de-las-operaciones","title":"Orden de las operaciones","text":"<p>Cuando en una expresi\u00f3n aparece m\u00e1s de un operador, el orden de evaluaci\u00f3n depende de las  reglas de precedencia . Para los operadores matem\u00e1ticos, Python sigue las convenciones matem\u00e1ticas. El acr\u00f3nimo PEMDSR resulta \u00fatil para recordar esas reglas:</p> <ul> <li>Los *P*ar\u00e9ntesis tienen el nivel superior de precedencia, y pueden usarse para forzar a que una expresi\u00f3n sea evaluada en el orden que se quiera. Dado que las expresiones entre par\u00e9ntesis son evaluadas primero, <code>2 * (3-1)</code> es 4, y <code>(1+1)**(5-2)</code> es 8. Se pueden usar tambi\u00e9n par\u00e9ntesis para hacer una expresi\u00f3n m\u00e1s sencilla de leer, incluso si el resultado de la misma no var\u00eda por ello, como en <code>(minuto * 100) / 60</code>.</li> <li>La *E*xponenciaci\u00f3n (elevar un n\u00famero a una potencia) tiene el siguiente nivel m\u00e1s alto de precedencia, de modo que <code>2**1+1</code> es 3, no 4, y <code>3*1**3</code> es 3, no 27.</li> <li>La *M*ultiplicaci\u00f3n y la *D*ivisi\u00f3n tienen la misma precedencia, que es superior a la de la *S*uma y la *R*esta, que tambi\u00e9n tienen entre si el mismo nivel de precedencia. As\u00ed que <code>2*3-1</code> es 5, no 4, y <code>6+4/2</code> es 8, no 5.</li> <li>Los operadores con igual precedencia son evaluados de izquierda a derecha. As\u00ed que la expresi\u00f3n <code>5-3-1</code> es 1 y no 3, ya que <code>5-3</code> se eval\u00faa antes, y despu\u00e9s se resta <code>1</code> de <code>2</code>.</li> </ul> <p>En caso de duda, a\u00f1ade siempre par\u00e9ntesis a tus expresiones para asegurarte de que las operaciones se realizan en el orden que t\u00fa quieres.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operaciones-con-cadenas","title":"Operaciones con cadenas","text":"<p>El operador <code>+</code> funciona con las cadenas, pero no realiza una suma en el sentido matem\u00e1tico. En vez de eso, realiza una  concatenaci\u00f3n , que quiere decir que une ambas cadenas, enlazando el final de la primera con el principio de la segunda. Por ejemplo:</p> <pre><code>&gt;&gt;&gt; primero = 10\n&gt;&gt;&gt; segundo = 15\n&gt;&gt;&gt; print(primero+segundo)\n25\n&gt;&gt;&gt; primero = '100'\n&gt;&gt;&gt; segundo = '150'\n&gt;&gt;&gt; print(primero + segundo)\n100150\n</code></pre> <p>La salida de este programa es <code>100150</code>.</p> <p>El operador <code>*</code> tambi\u00e9n trabaja con cadenas multiplicando el contenido de una cadena por un entero. Por ejemplo:</p> <pre><code>&gt;&gt;&gt; primero = 'Test '\n&gt;&gt;&gt; second = 3\n&gt;&gt;&gt; print(primero * second)\nTest Test Test\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#expresion","title":"Expresi\u00f3n","text":"<p>Una expresi\u00f3n es una unidad de c\u00f3digo que devuelve un valor y est\u00e1 formada por una combinaci\u00f3n de operandos (variables y literales) y operadores. Los siguientes son ejemplos de expresiones (cada l\u00ednea es una expresi\u00f3n diferente):</p> <pre><code>5 + 2           # Suma del n\u00famero 5 y el n\u00famero 2\na &lt; 10            # Compara si el valor de la variable a es menor que 10\nb is None       # Compara si la identidad de la variable b es None\n3 * (200 - c)   # Resta a 200 el valor de c y lo multiplica por 3\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#sentencia","title":"Sentencia","text":"<p>Por su parte, una sentencia o declaraci\u00f3n es una instrucci\u00f3n que define una acci\u00f3n. Una sentencia puede estar formada por una o varias expresiones, aunque no siempre es as\u00ed.</p> <p>En definitiva, las sentencias son las instrucciones que componen nuestro programa y determinan su comportamiento.</p> <p>Ejemplos de sentencias son la asignaci\u00f3n <code>=</code> o las instrucciones <code>if</code>, <code>if ... else ...</code>, <code>for</code> o <code>while</code> entre otras.</p> <p>Una sentencia est\u00e1 delimitada por el car\u00e1cter <code>Enter (\\n)</code>.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#sentencias-de-mas-de-una-linea","title":"Sentencias de m\u00e1s de una l\u00ednea","text":"<p>Normalmente, las sentencias ocupan una sola l\u00ednea. Por ejemplo:</p> <pre><code>a = 2 + 3 #Asigna a la variable &lt;a&gt; el resultado de 2 + 3\n</code></pre> <p>Sin embargo, aquellas sentencias que son muy largas pueden ocupar m\u00e1s de una l\u00ednea (la gu\u00eda de estilo PEP 8, recomienda una longitud de l\u00ednea m\u00e1xima de 72 caracteres).</p> <p>Para dividir una sentencia en varias l\u00edneas se utiliza el car\u00e1cter <code>\\</code>. Por ejemplo:</p> <pre><code>a = 2 + 3 + 5 + \\\n7 + 9 + 4 + \\\n6\n</code></pre> <p>Adem\u00e1s de la separaci\u00f3n expl\u00edcita (la que se realiza con el car\u00e1cter <code>\\</code>), en Python la continuaci\u00f3n de l\u00ednea es impl\u00edcita siempre y cuando la expresi\u00f3n vaya dentro de los caracteres <code>()</code>, <code>[]</code> y <code>{}</code>.</p> <p>Por ejemplo, podemos inicializar una lista del siguiente modo:</p> <pre><code>a = [1, 2, 7,\n3, 8, 4,\n9]\n</code></pre> <p>No te preocupes si no sabes lo que es una lista o no entiendes lo que hace el ejemplo anterior. Lo importante es que comprendas que lo anterior es una sentencia multi-l\u00ednea ya que est\u00e1 comprendida entre los caracteres <code>[]</code>.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#bloques-de-codigo-indentacion","title":"Bloques de c\u00f3digo (Indentaci\u00f3n)","text":"<p>Lo \u00faltimo que veremos sobre sentencias en esta introducci\u00f3n a Python es c\u00f3mo se pueden agrupar en bloques de c\u00f3digo.</p> <p>Un bloque de c\u00f3digo es un grupo de sentencias relacionadas bien delimitadas. A diferencia de otros lenguajes como JAVA o C, en los que se usan los caracteres <code>{}</code> para definir un bloque de c\u00f3digo, en Python se usa la indentaci\u00f3n o sangrado.</p> <p>El sangrado o indentaci\u00f3n consiste en mover un bloque de texto hacia la derecha insertando espacios o tabuladores al principio de la l\u00ednea, dejando un margen a la izquierda.</p> <p>Esta es una de las principales caracter\u00edsticas de Python.</p> <p>Un bloque comienza con un nuevo sangrado y acaba con la primera l\u00ednea cuyo sangrado sea menor. De nuevo, la gu\u00eda de estilo de Python recomienda usar los espacios en lugar de las tabulaciones para realizar el sangrado. Yo suelo utilizar 4 espacios.</p> <p>Configura tu IDE de desarrollo para que use los espacios en lugar de los tabuladores para el sangrado. Establece el n\u00famero de espacios a 4 \u00f3 2.</p> <p>Veamos todo esto con un ejemplo:</p> <pre><code>  def suma_numeros(numeros):   # Bloque 1\nsuma = 0                   # Bloque 2\nfor n in numeros:          # Bloque 2\nsuma += n                # Bloque 3\nprint(suma)              # Bloque 3\nreturn suma                # Bloque 2\n</code></pre> <p>Como te dec\u00eda en la secci\u00f3n anterior, no hace falta todav\u00eda que entiendas lo que hace el ejemplo. Simplemente debes comprender que en la l\u00ednea 1 se define la funci\u00f3n <code>suma_numeros</code>. El cuerpo de esta funci\u00f3n est\u00e1 definido por el grupo de sentencias que pertenecen al bloque 2 y 3. A su vez, la sentencia <code>for</code> define las acciones a realizar dentro de la misma en el conjunto de sentencias que pertenecen al bloque 3.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#variables-literales-y-tipos","title":"Variables, literales y tipos","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#variables","title":"Variables","text":"<p>Una de las caracter\u00edsticas m\u00e1s potentes de un lenguaje de programaci\u00f3n es la capacidad de manipular variables. Una variable es un nombre que se refiere a un valor.</p> <p>Una sentencia de asignaci\u00f3n crea variables nuevas y las da valores:</p> <pre><code>&gt;&gt;&gt; mensaje = 'Y ahora algo completamente diferente'\n&gt;&gt;&gt; n = 17\n&gt;&gt;&gt; pi = 3.1415926535897931\n</code></pre> <p>Este ejemplo hace tres asignaciones. La primera asigna una cadena a una variable nueva llamada <code>mensaje</code>; la segunda asigna el entero <code>17</code> a <code>n</code>; la tercera asigna el valor (aproximado) de \u03c0 a <code>pi</code>.</p> <p>Para mostrar el valor de una variable, se puede usar la sentencia print:</p> <pre><code>&gt;&gt;&gt; print(n)\n17\n&gt;&gt;&gt; print(pi)\n3.141592653589793\n</code></pre> <p>El tipo de una variable es el tipo del valor al que se refiere.</p> <pre><code>&gt;&gt;&gt; type(mensaje)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; type(n)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(pi)\n&lt;class 'float'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#valores-literales-y-tipos","title":"Valores (literales) y tipos","text":"<p>Un valor o literal es una de las cosas b\u00e1sicas que utiliza un programa, como una letra o un n\u00famero. Hasta ahora hemos visto valores o literales como <code>1</code>, <code>2</code>, y <code>'\u00a1Hola, mundo!'</code></p> <p>Esos valores pertenecen a tipos diferentes: <code>2</code> es un entero (int), y <code>'\u00a1Hola, mundo!'</code> es una cadena (string), que recibe ese nombre porque contiene una \u201ccadena\u201d de letras. T\u00fa (y el int\u00e9rprete) pod\u00e9is identificar las cadenas porque van encerradas entre comillas.</p> <p>La sentencia <code>print</code> tambi\u00e9n funciona con enteros. Vamos a usar el comando <code>python</code> para iniciar el int\u00e9rprete.</p> <pre><code>$python\n&gt;&gt;&gt;print(4)\n4\n</code></pre> <p>Si no est\u00e1s seguro de qu\u00e9 tipo de valor est\u00e1s manejando, el int\u00e9rprete te lo puede decir.</p> <pre><code>&gt;&gt;&gt;type('\u00a1Hola, mundo!')\n&lt;class 'str'&gt;\n&gt;&gt;&gt;type(17)\n&lt;class 'int'&gt;\n</code></pre> <p>No es sorprendente que las cadenas pertenezcan al tipo <code>str</code> y los enteros pertenezcan al tipo <code>int</code>. De manera menos obvia, los n\u00fameros con un punto decimal pertenecen a un tipo llamado <code>float</code>, porque estos n\u00fameros se representan en un formato llamado punto flotante.</p> <pre><code>&gt;&gt;&gt;type(3.2)\n&gt;&gt;&gt;&lt;class 'float'&gt;\n</code></pre> <p>\u00bfQu\u00e9 ocurre con valores como <code>17</code> y <code>3.2</code>? Parecen n\u00fameros, pero van entre comillas como las cadenas.</p> <pre><code>&gt;&gt;&gt;type('17')\n&lt;class 'str'&gt;\n&gt;&gt;&gt;type('3.2')\n&lt;class 'str'&gt;\n</code></pre> <p>Pues son cadenas.</p> <p>Cuando escribes un entero grande, puede que te sientas tentado a usar comas o puntos para separarlo en grupos de tres d\u00edgitos, como en <code>1,000,000</code>. Eso no es un entero v\u00e1lido en Python, pero en cambio s\u00ed que resulta v\u00e1lido algo como:</p> <pre><code>&gt;&gt;&gt; print(1,000,000)\n1 0 0 # Imprime 3 numeros\n</code></pre> <p>Bien, ha funcionado. \u00a1Pero eso no era lo que esper\u00e1bamos!. Python interpreta <code>1,000,000</code> como una secuencia de enteros separados por comas, as\u00ed que lo imprime con espacios en medio.</p> <p>\u00c9ste es el primer ejemplo que hemos visto de un error sem\u00e1ntico: el c\u00f3digo funciona sin producir ning\u00fan mensaje de error, pero no hace su trabajo \u201ccorrectamente\u201d.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#peticion-de-informacion-al-usuario","title":"Petici\u00f3n de informaci\u00f3n al usuario","text":"<p>A veces necesitaremos que sea el usuario quien nos proporcione el valor para una variable, a trav\u00e9s del teclado. Python proporciona una funci\u00f3n interna llamada <code>input</code> que recibe la entrada desde el teclado. Cuando se llama a esa funci\u00f3n, el programa se detiene y espera a que el usuario escriba algo. Cuando el usuario pulsa <code>Retorno</code> o <code>Intro</code>, el programa contin\u00faa y <code>input</code> devuelve como una cadena aquello que el usuario escribi\u00f3.</p> <pre><code>&gt;&gt;&gt;entrada = input()\nCualquier cosa rid\u00edcula\n&gt;&gt;&gt;print(entrada)\nCualquier cosa rid\u00edcula\n</code></pre> <p>Antes de recibir cualquier dato desde el usuario, es buena idea escribir un mensaje explic\u00e1ndole qu\u00e9 debe introducir. Se puede pasar una cadena a <code>input</code>, que ser\u00e1 mostrada al usuario antes de que el programa se detenga para recibir su entrada:</p> <pre><code>&gt;&gt;&gt;nombre = input('\u00bfC\u00f3mo te llamas?\\n')\n\u00bfC\u00f3mo te llamas?\nChuck\n&gt;&gt;&gt;print(nombre)\nChuck\n</code></pre> <p>La secuencia <code>\\n</code> al final del mensaje representa un  newline , que es un car\u00e1cter especial que provoca un salto de l\u00ednea. Por eso la entrada del usuario aparece debajo de nuestro mensaje.</p> <p>Si esperas que el usuario escriba un entero, puedes intentar convertir el valor de retorno a <code>int</code> usando la funci\u00f3n <code>int()</code>:</p> <pre><code>&gt;&gt;&gt; prompt = '\u00bfCual es la velocidad de vuelo de una golondrina sin carga?\\n'\n&gt;&gt;&gt; velocidad = input(prompt)\n\u00bfCual es la velocidad de vuelo de una golondrina sin carga?\n17\n&gt;&gt;&gt; int(velocidad)\n17\n&gt;&gt;&gt; int(velocidad) + 5\n22\n</code></pre> <p>Pero si el usuario escribe algo que no sea una cadena de d\u00edgitos, obtendr\u00e1s un error:</p> <pre><code>&gt;&gt;&gt;velocidad = input(prompt)\n\u00bfCual es la velocidad de vuelo de una golondrina sin carga?\n\u00bfTe refieres a una golondrina africana o a una europea?\n&gt;&gt;&gt;int(velocidad)\nValueError: invalid literal for int()\n</code></pre> <p>Veremos c\u00f3mo controlar este tipo de errores m\u00e1s adelante.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#comentarios-en-python","title":"Comentarios en Python","text":"<p>Como cualquier otro lenguaje de programaci\u00f3n, Python permite escribir comentarios en el c\u00f3digo. Para a\u00f1adir un comentario a tu c\u00f3digo simplemente comienza una l\u00ednea con el car\u00e1cter <code>#</code>:</p> <pre><code># Esta l\u00ednea es un comentario**\na = 5\n# Resultado de multiplicar a por 2\nprint(a * 2)\n</code></pre> <p>Los comentarios son ignorados por el int\u00e9rprete de Python. Solo tienen sentido para los programadores.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#comentarios-de-varias-lineas","title":"Comentarios de varias l\u00edneas","text":"<p>Para escribir comentarios que ocupan varias l\u00edneas, simplemente escribe cada una de las l\u00edneas anteponiendo el car\u00e1cter <code>#</code>:</p> <pre><code># Este comentario ocupa\n# 2 l\u00edneas\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#docstrings","title":"Docstrings","text":"<p>Los docstrings son un tipo de comentarios especiales que se usan para documentar un m\u00f3dulo, funci\u00f3n, clase o m\u00e9todo. En realidad son la primera sentencia de cada uno de ellos y se encierran entre tres comillas simples o dobles.</p> <p>Los docstrings son utilizados para generar la documentaci\u00f3n de un programa. Adem\u00e1s, suelen utilizarlos los entornos de desarrollo para mostrar la documentaci\u00f3n al programador de forma f\u00e1cil e intuitiva.</p> <pre><code>def suma(a, b):\n\"\"\"Esta funci\u00f3n devuelve la suma de los par\u00e1metros a y b\"\"\"\nreturn a + b\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#palabras-reservadas-de-python","title":"Palabras reservadas de Python","text":"<p>Python tiene una serie de palabras clave  reservadas , por tanto, no pueden usarse como nombres de variables, funciones, etc.</p> <p>Estas palabras clave se utilizan para definir la sintaxis y estructura del lenguaje Python.</p> <p>La lista de palabras reservadas es la siguiente:</p> <p><code>and</code>, <code>as</code>, <code>assert</code>, <code>break</code>, <code>class</code>, <code>continue</code>, <code>def</code>, <code>del</code>, <code>elif</code>, <code>else</code>, <code>except</code>, <code>False</code>, <code>finally</code>, <code>for</code>, <code>from</code>, <code>global</code>, <code>if</code>, <code>import</code>, <code>in</code>, <code>is</code>, <code>lambda</code>, <code>None</code>, <code>nonlocal</code>, <code>not</code>, <code>or</code>, <code>pass</code>, <code>raise</code>, <code>return</code>, <code>True</code>, <code>try</code>, <code>yield</code>, <code>while</code> y <code>with</code></p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#constantes-en-python","title":"Constantes en Python","text":"<p>A diferencia de otros lenguajes,  en Python no existen las constantes .</p> <p>Entendemos como constante una variable que una vez asignado un valor, este no se puede modificar. Es decir, que a la variable no se le puede asignar ning\u00fan otro valor una vez asignado el primero.</p> <p>Se puede simular este comportamiento, siempre desde el punto de vista del programador y atendiendo a convenciones propias, pero no podemos cambiar la naturaleza mutable de las variables.</p> <p>No obstante, s\u00ed que es cierto que el propio Python define una serie de valores constantes en su propio namespace. Los m\u00e1s importantes son:</p> <ul> <li>False: El valor false del tipo <code>bool</code>.</li> <li>True: El valor true del tipo <code>bool</code>.</li> <li>None: El valor del tipo <code>NoneType</code>. Generalmente <code>None</code> se utiliza para representar la ausencia de valor de una variable.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#convenciones-de-nombres-en-python","title":"Convenciones de nombres en Python","text":"<p>A la hora de nombrar una variable, una funci\u00f3n, un m\u00f3dulo, una clase, etc. en Python, siempre se siguen las siguientes reglas y recomendaciones:</p> <ul> <li>Un identificador puede ser cualquier combinaci\u00f3n de letras (may\u00fasculas y min\u00fasculas), n\u00fameros y el car\u00e1cter gui\u00f3n bajo (<code>_</code>).</li> <li>Un identificador no puede comenzar por un n\u00famero.</li> <li>A excepci\u00f3n de los nombres de clases, es una convenci\u00f3n que todos los identificadores se escriban en min\u00fasculas, separando las palabras con el gui\u00f3n bajo. Ejemplos: <code>contador</code>, <code>suma_enteros</code>.</li> <li>Es una convenci\u00f3n que los nombres de clases sigan la notaci\u00f3n  Camel Case, es decir, todas las letras en min\u00fascula a excepci\u00f3n del primer car\u00e1cter de cada palabra, que se escribe en may\u00fascula. Ejemplos: <code>Coche</code>, <code>VehiculoMotorizado</code>.</li> <li>No se pueden usar como identificadores las palabras reservadas.</li> <li>Como recomendaci\u00f3n, usa identificadores que sean expresivos. Por ejemplo, <code>contador</code> es mejor que simplemente <code>c</code>.</li> <li>Python diferencia entre may\u00fasculas y min\u00fasculas, de manera que <code>variable_1</code> y <code>Variable_1</code> son dos identificadores totalmente diferentes.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#depuracion","title":"Depuraci\u00f3n","text":"<p>En este punto, el error de sintaxis que es m\u00e1s probable que cometas ser\u00e1 intentar utilizar nombres de variables no v\u00e1lidos, como <code>class</code> y <code>yield</code>, que son palabras clave, o <code>odd~job</code> y <code>US$</code>, que contienen caracteres no v\u00e1lidos.</p> <p>Si pones un espacio en un nombre de variable, Python cree que se trata de dos operandos sin ning\u00fan operador:</p> <pre><code>&gt;&gt;&gt; bad name = 5\nSyntaxError: invalid syntax\n</code></pre> <pre><code>&gt;&gt;&gt; month = 09\nFile \"&lt;stdin&gt;\", line 1\nmonth = 09\n^\nSyntaxError: invalid token\n</code></pre> <p>Para la mayor\u00eda de errores de sintaxis, los mensajes de error no ayudan mucho. Los mensajes m\u00e1s comunes son <code>SyntaxError: invalid syntax</code> y <code>SyntaxError: invalid token</code>, ninguno de los cuales resulta muy informativo.</p> <p>El runtime error (error en tiempo de ejecuci\u00f3n) que es m\u00e1s probable que obtengas es un \u201cuse before def\u201d (uso antes de definir); que significa que est\u00e1s intentando usar una variable antes de que le hayas asignado un valor. Eso puede ocurrir si escribes mal el nombre de la variable:</p> <pre><code>&gt;&gt;&gt; principal = 327.68\n&gt;&gt;&gt; interest = principle * rate\nNameError: name 'principle' is not defined\n</code></pre> <p>Los nombres de las variables son sensibles a may\u00fasculas, as\u00ed que <code>LaTeX</code> no es lo mismo que <code>latex</code>.</p> <p>En este punto, la causa m\u00e1s probable de un error sem\u00e1ntico es el orden de las operaciones. Por ejemplo, para evaluar \\(\\frac{1}{2 \\pi}\\), puedes sentirte tentado a escribir</p> <pre><code>&gt;&gt;&gt; 1.0 / 2.0 * pi\n</code></pre> <p>Pero la divisi\u00f3n se eval\u00faa antes, \u00a1as\u00ed que obtendr\u00e1s  \u03c0 /2, que no es lo mismo! No hay forma de que Python sepa qu\u00e9 es lo que quer\u00edas escribir exactamente, as\u00ed que en este caso no obtienes un mensaje de error; simplemente obtienes una respuesta incorrecta.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores","title":"Operadores","text":"<p>Ya hablamos sobre los operadores, los operadores son s\u00edmbolos reservados por el propio lenguaje que se utilizan para llevar a cabo operaciones sobre uno, dos o m\u00e1s elementos llamados operandos. Los operandos pueden ser variables, literales, el valor devuelto por una expresi\u00f3n o el valor devuelto por una funci\u00f3n.</p> <p>El ejemplo m\u00e1s t\u00edpico que siempre viene a la mente es el operador suma, <code>+</code>, que se utiliza para obtener la suma aritm\u00e9tica de dos valores:</p> <pre><code>&gt;&gt;&gt;9 + 1 # 9 y 1 son los operandos\n10 # 10 es el resultado\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operador-de-concatenacion-de-cadenas-de-caracteres","title":"Operador de concatenaci\u00f3n de cadenas de caracteres","text":"<p>Una de las operaciones m\u00e1s b\u00e1sicas cuando se trabaja con cadenas de caracteres es la concatenaci\u00f3n. Esto consiste en unir dos cadenas en una sola, siendo el resultado un nuevo  string .</p> <p>La forma m\u00e1s simple de concatenar dos cadenas en Python es utilizando el operador de concatenaci\u00f3n <code>+</code>:</p> <pre><code>&gt;&gt;&gt; hola = 'Hola'\n&gt;&gt;&gt; python = 'Pythonista'\n&gt;&gt;&gt; hola_python = hola + ' ' + python  # concatenamos 3 strings\n&gt;&gt;&gt; print(hola_python)\nHola Pythonista\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-logicos-o-booleanos","title":"Operadores l\u00f3gicos o booleanos","text":"<p>A la hora de operar con valores booleanos, tenemos a nuestra disposici\u00f3n los operadores <code>and</code>, <code>or</code> y <code>not</code>.</p> <p>\ufe0f **IMPORTANTE: **Las operaciones <code>and</code>, <code>or</code> y <code>not</code> realmente no devuelven <code>True</code> o <code>False</code>, sino que devuelven uno de los operandos como veremos en el cuadro de abajo.</p> <p>A continuaci\u00f3n te muestro c\u00f3mo funcionan los operadores booleanos (en orden de preferencia ascendente):</p> Operaci\u00f3n Resultado Descripci\u00f3n <code>a or b</code> Si<code>a</code> se eval\u00faa a falso, entonces devuelve <code>b</code>, si no devuelve <code>a</code> Solo se eval\u00faa el segundo operando si el primero es falso <code>a and b</code> Si<code>a</code> se eval\u00faa a falso, entonces devuelve <code>a</code>, si no devuelve <code>b</code> Solo se eval\u00faa el segundo operando si el primero es verdadero <code>not a</code> Si<code>a</code> se eval\u00faa a falso, entonces devuelve <code>True</code>, si no devuelve <code>False</code> Tiene menos prioridad que otros operadores no booleanos <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = True\n&gt;&gt;&gt; y = False\n&gt;&gt;&gt; x or y\nTrue\n&gt;&gt;&gt; x and y\nFalse\n&gt;&gt;&gt; not x\nFalse\n&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; y = 10\n&gt;&gt;&gt; x or y\n10\n&gt;&gt;&gt; x and y\n0\n&gt;&gt;&gt; not x\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<p>Los operadores de comparaci\u00f3n se utilizan, como su nombre indica, para comparar dos o m\u00e1s valores. El resultado de estos operadores siempre es <code>True</code> o <code>False</code>.</p> Operador Descripci\u00f3n &gt; Mayor que.<code>True</code> si el operando de la izquierda es estrictamente mayor que el de la derecha; <code>False</code> en caso contrario. &gt;= Mayor o igual que.<code>True</code> si el operando de la izquierda es mayor o igual que el de la derecha; <code>False</code> en caso contrario. &lt; Menor que.<code>True</code> si el operando de la izquierda es estrictamente menor que el de la derecha; <code>False</code> en caso contrario. &lt;= Menor o igual que.<code>True</code> si el operando de la izquierda es menor o igual que el de la derecha; <code>False</code> en caso contrario. == Igual.<code>True</code> si el operando de la izquierda es igual que el de la derecha; <code>False</code> en caso contrario. != Distinto.<code>True</code> si los operandos son distintos; <code>False</code> en caso contrario. <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = 9\n&gt;&gt;&gt; y = 1\n&gt;&gt;&gt; x &lt; y\nFalse\n&gt;&gt;&gt; x &gt; y\nTrue\n&gt;&gt;&gt; x == y\nFalse\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#consideraciones-sobre-los-operadores-de-comparacion","title":"Consideraciones sobre los operadores de comparaci\u00f3n","text":"<p>Los objetos de diferentes tipos, excepto los tipos num\u00e9ricos, nunca se comparan igual. El operador <code>==</code> siempre est\u00e1 definido, pero para algunos tipos de objetos (por ejemplo, objetos de clase) es equivalente a is.</p> <p>Las instancias no id\u00e9nticas de una clase normalmente se comparan como no iguales a menos que la clase defina el m\u00e9todo <code>__eq__()</code>.</p> <p>Las instancias de una clase no se pueden ordenar con respecto a otras instancias de la misma clase u otros tipos de objeto, a menos que la clase defina los m\u00e9todos <code>__lt__()</code>, <code>__gt__()</code>.</p> <p>Los operadores de comparaci\u00f3n se pueden concatenar. Ejemplo:</p> <pre><code># Las comparaciones siguientes son id\u00e9nticas\n&gt;&gt;&gt; x = 9\n&gt;&gt;&gt; 1 &lt; x and x &lt; 20\nTrue\n&gt;&gt;&gt; 1 &lt; x &lt; 20\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-aritmeticos-en-python","title":"Operadores aritm\u00e9ticos en Python","text":"<p>En cuanto a los operadores aritm\u00e9ticos, estos permiten realizar las diferentes operaciones aritm\u00e9ticas del \u00e1lgebra: suma, resta, producto, divisi\u00f3n, \u2026 Estos operadores Python son de los m\u00e1s utilizados. El listado completo es el siguiente:</p> Operador Descripci\u00f3n + Suma dos operandos. \u2013 Resta al operando de la izquierda el valor del operando de la derecha. Utilizado sobre un \u00fanico operando, le cambia el signo. * Producto/Multiplicaci\u00f3n de dos operandos. / Divide el operando de la izquierda por el de la derecha (el resultado siempre es un<code>float</code>). % Operador m\u00f3dulo. Obtiene el resto de dividir el operando de la izquierda por el de la derecha. // Obtiene el cociente entero de dividir el operando de la izquierda por el de la derecha. ** Potencia. El resultado es el operando de la izquierda elevado a la potencia del operando de la derecha. <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = 7\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; x + y  # Suma\n9\n&gt;&gt;&gt; x - y  # Resta\n5\n&gt;&gt;&gt; x * y  # Producto\n14\n&gt;&gt;&gt; x / y  # Divisi\u00f3n\n3.5\n&gt;&gt;&gt; x % y  # Resto\n1\n&gt;&gt;&gt; x // y  # Cociente\n3\n&gt;&gt;&gt; x ** y  # Potencia\n49\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-a-nivel-de-bits","title":"Operadores a nivel de bits","text":"<p>Los operadores a nivel de bits act\u00faan sobre los operandos como si fueran una cadena de d\u00edgitos binarios. Como su nombre indica, act\u00faan sobre los operandos bit a bit. Son los siguientes:</p> Operaci\u00f3n Descripci\u00f3n x y x ^ y or exclusivo bit a bit de x e y. x &amp; y and bit a bit de x e y. x &lt;&lt; n Desplaza x n bits a la izquierda. x &gt;&gt; n Desplaza x n bits a la derecha. ~x not x. Obtiene los bits de x invertidos. <p>Supongamos que tenemos el entero 2 (en bits es 00010) y el entero 7 (00111). El resultado de aplicar las operaciones anteriores es:</p> <pre><code>&gt;&gt;&gt; x = 2\n&gt;&gt;&gt; y = 7\n&gt;&gt;&gt; x | y\n7\n&gt;&gt;&gt; x ^ y\n5\n&gt;&gt;&gt; x &amp; y\n2\n&gt;&gt;&gt; x &lt;&lt; 1\n4\n&gt;&gt;&gt; x &gt;&gt; 1\n1\n&gt;&gt;&gt; ~x\n-3\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<p>El operador de asignaci\u00f3n se utiliza para asignar un valor a una variable. Como te he mencionado en otras secciones, este operador es el signo <code>=</code>.</p> <p>Adem\u00e1s del operador de asignaci\u00f3n, existen otros operadores de asignaci\u00f3n compuestos que realizan una operaci\u00f3n b\u00e1sica sobre la variable a la que se le asigna el valor.</p> <p>Por ejemplo, <code>x += 1</code> es lo mismo que <code>x = x + 1</code>. Los operadores compuestos realizan la operaci\u00f3n que hay antes del signo igual, tomando como operandos la propia variable y el valor a la derecha del signo igual.</p> <p>A continuaci\u00f3n, aparece la lista de todos los operadores de asignaci\u00f3n compuestos:</p> Operador Ejemplo Equivalencia += x += 2 x = x + 2 -= x -= 2 x = x \u2013 2 *= x *= 2 x = x * 2 /= x /= 2 x = x / 2 %= x %= 2 x = x % 2 //= x //= 2 x = x // 2 **= x **= 2 x = x ** 2 &amp;= x &amp;= 2 x = x &amp; 2 = x ^= x ^= 2 x = x ^ 2 &gt;&gt;= x &gt;&gt;= 2 x = x &gt;&gt; 2 &lt;&lt;= x &lt;&lt;= 2 x = x &lt;&lt; 2","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-de-pertenencia","title":"Operadores de pertenencia","text":"<p>Los operadores de pertenencia se utilizan para comprobar si un valor o variable se encuentran en una secuencia (<code>list</code>, <code>tuple</code>, <code>dict</code>, <code>set</code> o <code>str</code>).</p> <p>Todav\u00eda no hemos visto estos tipos, pero son operadores muy utilizados.</p> Operador Descripci\u00f3n in Devuelve True si el valor se encuentra en una secuencia; False en caso contrario. not in Devuelve True si el valor no se encuentra en una secuencia; False en caso contrario. <p>A continuaci\u00f3n vemos unos ejemplos que son muy intuitivos:</p> <pre><code>&gt;&gt;&gt; lista = [1, 3, 2, 7, 9, 8, 6]\n&gt;&gt;&gt; 4 in lista\nFalse\n&gt;&gt;&gt; 3 in lista\nTrue\n&gt;&gt;&gt; 4 not in lista\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#operadores-de-identidad","title":"Operadores de identidad","text":"<p>Por \u00faltimo, los operadores de identidad se utilizan para comprobar si dos variables son, o no, el mismo objeto.</p> Operador Descripci\u00f3n is Devuelve True si ambos operandos hacen referencia al mismo objeto; False en caso contrario. is not Devuelve True si ambos operandos no hacen referencia al mismo objeto; False en caso contrario. <p>\ufe0f Recuerda: Para conocer la identidad de un objeto se usa la funci\u00f3n <code>id()</code>.</p> <p>Ejemplos:</p> <pre><code>&gt;&gt;&gt; x = 4\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; lista = [1, 5]\n&gt;&gt;&gt; x is lista\nFalse\n&gt;&gt;&gt; x is y\nFalse\n&gt;&gt;&gt; x is 4\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#prioridad-de-los-operadores-en-python","title":"Prioridad de los operadores en Python","text":"<p>Como ya dijimos, al igual que ocurre en las matem\u00e1ticas, los operadores en Python tienen un orden de prioridad. Este orden es el siguiente, de menos prioritario a m\u00e1s prioritario: asignaci\u00f3n; operadores booleanos; operadores de comparaci\u00f3n, identidad y pertenencia; a nivel de bits y finalmente los aritm\u00e9ticos (con el mismo orden de prioridad que en las matem\u00e1ticas).</p> <p>Este orden de prioridad se puede alterar con el uso de los par\u00e9ntesis <code>()</code>:</p> <pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; z = x + 3 * y  # El producto tiene prioridad sobre la suma\n&gt;&gt;&gt; z\n11\n&gt;&gt;&gt; z = (x + 3) * y  # Los par\u00e9ntesis tienen prioridad\n&gt;&gt;&gt; z\n16\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.2.-PracticaConUnLenguajes/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Python for Everybody</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/","title":"UD 1 - 1.3 Tipos de datos","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#tipos-de-datos-primitivos","title":"Tipos de Datos Primitivos","text":"","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#tipos-de-datos-primitivos-simples","title":"Tipos de datos primitivos simples","text":"<ul> <li>N\u00fameros (numbers): Secuencia de d\u00edgitos (pueden incluir el - para negativos y el . para decimales) que representan n\u00fameros.   Ejemplo . 0, -1, 3.1415.</li> <li>Cadenas (strings): Secuencia de caracteres alfanum\u00e9ricos que representan texto. Se escriben entre comillas simples o dobles.   Ejemplo . \u2018Hola\u2019, \u201cAdi\u00f3s\u201d.</li> <li>Booleanos (boolean): Contiene \u00fanicamente dos elementos <code>True</code> y <code>False</code> que representan los valores l\u00f3gicos verdadero y falso respectivamente.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#tipos-de-datos-primitivos-compuestos-contenedores","title":"Tipos de datos primitivos compuestos (contenedores)","text":"<p>Profundizaremos m\u00e1s adelante en ellos.</p> <ul> <li>Listas (lists): Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. Se representan con corchetes y los elementos se separan por comas.   Ejemplo . [1, \u201cdos\u201d, [3, 4], True].</li> <li>Tuplas (tuples). Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. A diferencia de las listas son inmutables, es decir, que no cambian durante la ejecuci\u00f3n. Se representan mediante par\u00e9ntesis y los elementos se separan por comas.   Ejemplo . (1, \u2018dos\u2019, 3)</li> <li>Diccionarios (dictionaries): Colecciones de objetos con una clave asociada. Se representan con llaves, los pares separados por comas y cada par contiene una clave y un objeto asociado separados por dos puntos.   Ejemplo . {\u2018pi\u2019:3.1416, \u2019e\u2019:2.718}.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#clase-de-un-dato-type","title":"Clase de un dato (<code>type()</code>)","text":"<p>La clase a la que pertenece un dato se obtiene con el comando <code>type()</code></p> <pre><code>&gt;&gt;&gt; type(1)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(\"Hola\")\n&lt;class 'str'&gt;\n&gt;&gt;&gt; type([1, \"dos\", [3, 4], True])\n&lt;class 'list'&gt;\n&gt;&gt;&gt;type({'pi':3.1416, 'e':2.718})\n&lt;class 'dict'&gt;\n&gt;&gt;&gt;type((1, 'dos', 3))\n&lt;class 'tuple'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#numeros-clases-int-y-float","title":"N\u00fameros (clases <code>int</code> y <code>float</code>)","text":"<p>Secuencia de d\u00edgitos (pueden incluir el - para negativos y el . para decimales) que representan n\u00fameros. Pueden ser enteros (<code>int</code>) o reales (<code>float</code>).</p> <pre><code>&gt;&gt;&gt; type(1)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(-2)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; type(2.3)\n&lt;class 'float'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<ul> <li>Operadores aritm\u00e9ticos: <code>+</code> (suma), <code>-</code> (resta), <code>*</code> (producto), <code>/</code> (cociente), <code>//</code> (cociente divisi\u00f3n entera), <code>%</code> (resto divisi\u00f3n entera), <code>**</code> (potencia).</li> </ul> <p>Orden de prioridad de evaluaci\u00f3n:</p> 1 Funciones predefinidas 2 Potencias 3 Productos y cocientes 4 Sumas y restas <p>Se puede saltar el orden de evaluaci\u00f3n utilizando par\u00e9ntesis <code>( )</code>.</p> <pre><code>&gt;&gt;&gt; 2+3\n5\n&gt;&gt;&gt; 5*-2\n-10\n&gt;&gt;&gt; 5/2\n2.5\n&gt;&gt;&gt; 5//2\n2\n&gt;&gt;&gt; (2+3)**2\n25\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#operadores-logicos-con-numeros","title":"Operadores l\u00f3gicos con n\u00fameros","text":"<p>Devuelven un valor l\u00f3gico o booleano.</p> <ul> <li>Operadores l\u00f3gicos: <code>==</code> (igual que), <code>&gt;</code> (mayor que), <code>&lt;</code> (menor que), <code>&gt;=</code> (mayor o igual que), <code>&lt;=</code> (menor o igual que), <code>!=</code> (distinto de).</li> </ul> <pre><code>&gt;&gt;&gt; 3==3\nTrue\n&gt;&gt;&gt; 3.1&lt;=3\nFalse\n&gt;&gt;&gt; -1!=1\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#cadenas-clase-str","title":"Cadenas (clase <code>str</code>)","text":"<p>Secuencia de caracteres alfanum\u00e9ricos que representan texto. Se escriben entre comillas sencillas \u2019 o dobles \u201c.</p> <pre><code>'Python'\n\"123\"\n'True'\n# Cadena vac\u00eda\n''\n# Cadena con un espacio en blanco\n' '\n# Cambio de l\u00ednea\n'\\n'\n# Tabulador\n'\\t'\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#acceso-a-los-elementos-de-una-cadena","title":"Acceso a los elementos de una cadena","text":"<p>Cada car\u00e1cter tiene asociado un \u00edndice que permite acceder a \u00e9l.</p> Cadena <code>P</code> <code>y</code> <code>t</code> <code>h</code> <code>o</code> <code>n</code> \u00cdndice positivo 0 1 2 3 4 5 \u00cdndice negativo -6 -5 -4 -3 -2 -1 <ul> <li><code>c[i]</code> devuelve el car\u00e1cter de la cadena <code>c</code> con el \u00edndice <code>i</code>.</li> </ul> <p>El \u00edndice del primer car\u00e1cter de la cadena es 0.</p> <p>Tambi\u00e9n se pueden utilizar \u00edndices negativos para recorrer la cadena del final al principio.</p> <p>El \u00edndice del \u00faltimo car\u00e1cter de la cadena es -1.</p> <pre><code>&gt;&gt;&gt; 'Python'[0]\n'P'\n&gt;&gt;&gt; 'Python'[1]\n'y'\n&gt;&gt;&gt; 'Python'[-1]\n'n'\n&gt;&gt;&gt; 'Python'[6]\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: string index out of range\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#subcadenas","title":"Subcadenas","text":"<ul> <li><code>c[i:j:k]</code> : Devuelve la subcadena de <code>c</code> desde el car\u00e1cter con el \u00edndice <code>i</code> hasta el car\u00e1cter anterior al \u00edndice <code>j</code>, tomando caracteres cada <code>k</code>.</li> </ul> <pre><code>&gt;&gt;&gt; 'Python'[1:4]\n'yth'\n&gt;&gt;&gt; 'Python'[1:1]\n''\n&gt;&gt;&gt; 'Python'[2:]\n'thon'\n&gt;&gt;&gt; 'Python'[:-2]\n'Pyth'\n&gt;&gt;&gt; 'Python'[:]\n'Python'\n&gt;&gt;&gt; 'Python'[0:6:2]\n'Pto'\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#operaciones-con-cadenas","title":"Operaciones con cadenas","text":"<ul> <li><code>c1 + c2</code> : Devuelve la cadena resultado de concatenar las cadenas <code>c1</code> y <code>c2</code>.</li> <li><code>c * n</code> : Devuelve la cadena resultado de concatenar <code>n</code> copias de la cadena <code>c</code>.</li> <li><code>c1 in c2</code> : Devuelve <code>True</code> si <code>c1</code> es una cadena concenida en <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 not in c2</code> : Devuelve <code>True</code> si <code>c1</code> es una cadena no concenida en <code>c2</code> y <code>False</code> en caso contrario.</li> </ul> <pre><code>&gt;&gt;&gt; 'Me gusta ' + 'Python'\n'Me gusta Python'\n&gt;&gt;&gt; 'Python' * 3\n'PythonPythonPython'\n&gt;&gt;&gt; 'y' in 'Python'\nTrue\n&gt;&gt;&gt; 'tho' in 'Python'\nTrue\n&gt;&gt;&gt; 'to' not in 'Python'\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#operaciones-de-comparacion-de-cadenas","title":"Operaciones de comparaci\u00f3n de cadenas","text":"<ul> <li><code>c1 == c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> es igual que la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &gt; c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> sucede a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &lt; c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> antecede a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &gt;= c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> sucede o es igual a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 &lt;= c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> antecede o es igual a la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> <li><code>c1 != c2</code> : Devuelve <code>True</code> si la cadena <code>c1</code> es distinta de la cadena <code>c2</code> y <code>False</code> en caso contrario.</li> </ul> <p>Utilizan el orden establecido en el c\u00f3digo ASCII .</p> <pre><code>&gt;&gt;&gt; 'Python' == 'python'\nFalse\n&gt;&gt;&gt; 'Python' &lt; 'python'\nTrue\n&gt;&gt;&gt; 'a' &gt; 'Z'\nTrue\n&gt;&gt;&gt; 'A' &gt;= 'Z'\nFalse\n&gt;&gt;&gt; '' &lt; 'Python'\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#funciones-de-cadenas","title":"Funciones de cadenas","text":"<ul> <li><code>len(c)</code> : Devuelve el n\u00famero de caracteres de la cadena <code>c</code>.</li> <li><code>min(c)</code> : Devuelve el car\u00e1cter menor de la cadena <code>c</code>.</li> <li><code>max(c)</code> : Devuelve el car\u00e1cter mayor de la cadena <code>c</code>.</li> <li><code>c.upper()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> pero en may\u00fasculas.</li> <li><code>c.lower()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> pero en min\u00fasculas.</li> <li><code>c.title()</code> : Devuelve la cadena con los mismos caracteres que la cadena <code>c</code> con el primer car\u00e1cter en may\u00fasculas y el resto en min\u00fasculas.</li> <li><code>c.split(delimitador)</code> : Devuelve la lista formada por las subcadenas que resultan de partir la cadena <code>c</code> usando como delimitador la cadena <code>delimitador</code>. Si no se especifica el delimitador utiliza por defecto el espacio en blanco.</li> </ul> <pre><code>&gt;&gt;&gt; len('Python')\n6\n&gt;&gt;&gt; min('Python')\n'P'\n&gt;&gt;&gt; max('Python')\n'y'\n&gt;&gt;&gt; 'Python'.upper()\n'PYTHON'\n&gt;&gt;&gt; 'A,B,C'.split(',')\n['A', 'B', 'C']\n&gt;&gt;&gt; 'I love Python'.split()\n['I', 'love', 'Python']\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#cadenas-formateadas-format","title":"Cadenas formateadas (<code>format()</code>)","text":"<ul> <li><code>c.format(valores)</code>: Devuelve la cadena <code>c</code> tras sustituir los valores de la secuencia <code>valores</code> en los marcadores de posici\u00f3n de <code>c</code>. Los marcadores de posici\u00f3n se indican mediante llaves <code>{}</code> en la cadena <code>c</code>, y el reemplazo de los valores se puede realizar por posici\u00f3n, indicando en n\u00famero de orden del valor dentro de las llaves, o por nombre, indicando el nombre del valor, siempre y cuando los valores se pasen con el formato <code>nombre = valor</code>.</li> </ul> <pre><code>&gt;&gt;&gt; 'Un {} vale {} {}'.format('\u20ac', 1.12, '$')\n'Un \u20ac vale 1.12 $'\n&gt;&gt;&gt; 'Un {2} vale {1} {0}'.format('\u20ac', 1.12, '$')\n'Un $ vale 1.12 \u20ac'\n&gt;&gt;&gt; 'Un {moneda1} vale {cambio} {moneda2}'.format(moneda1 = '\u20ac', cambio = 1.12, moneda2 = '$')\n'Un \u20ac vale 1.12 $'\n</code></pre> <p>Los marcadores de posici\u00f3n, a parte de indicar la posici\u00f3n de los valores de reemplazo, pueden indicar tambi\u00e9n el formato de estos. Para ello se utiliza la siguiente sintaxis:</p> <ul> <li><code>{:n}</code> : Alinea el valor a la izquierda rellenando con espacios por la derecha hasta los <code>n</code> caracteres.</li> <li><code>{:&gt;n}</code> : Alinea el valor a la derecha rellenando con espacios por la izquierda hasta los <code>n</code> caracteres.</li> <li><code>{:^n}</code> : Alinea el valor en el centro rellenando con espacios por la izquierda y por la derecha hasta los <code>n</code> caracteres.</li> <li><code>{:nd}</code> : Formatea el valor como un n\u00famero entero con <code>n</code> caracteres rellenando con espacios blancos por la izquierda.</li> <li><code>{:n.mf}</code> : Formatea el valor como un n\u00famero real con un tama\u00f1o de <code>n</code> caracteres (inclu\u00eddo el separador de decimales) y <code>m</code> cifras decimales, rellenando con espacios blancos por la izquierda.</li> </ul> <pre><code>&gt;&gt;&gt; 'Hoy es {:^10}, ma\u00f1ana {:10} y pasado {:&gt;10}'.format('lunes', 'martes', 'mi\u00e9rcoles')\n'Hoy es   lunes   , ma\u00f1ana martes     y pasado  mi\u00e9rcoles'\n&gt;&gt;&gt; 'Cantidad {:5d}'.format(12)'\n'Cantidad    12'\n&gt;&gt;&gt; 'Pi vale {:8.4f}'.format(3.141592)\n'Pi vale   3.1416'\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#datos-logicos-o-booleanos-clase-bool","title":"Datos l\u00f3gicos o booleanos (clase <code>bool</code>)","text":"<p>Contiene \u00fanicamente dos elementos <code>True</code> y <code>False</code> que representan los valores l\u00f3gicos verdadero y falso respectivamente.</p> <p><code>False</code> tiene asociado el valor 0 y <code>True</code> tiene asociado el valor 1.</p>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#operaciones-con-valores-logicos","title":"Operaciones con valores l\u00f3gicos","text":"<ul> <li>Operadores l\u00f3gicos: <code>==</code> (igual que), <code>&gt;</code> (mayor), <code>&lt;</code> (menor), <code>&gt;=</code> (mayor o igual que), <code>&lt;=</code> (menor o igual que), <code>!=</code> (distinto de).</li> <li><code>not b</code> (negaci\u00f3n) : Devuelve <code>True</code> si el dato booleano <code>b</code> es <code>False</code> , y <code>False</code> en caso contrario.</li> <li><code>b1 and b2</code> : Devuelve <code>True</code> si los datos booleanos <code>b1</code> y <code>b2</code> son <code>True</code>, y <code>False</code> en caso contrario.</li> <li><code>b1 or b2</code> : Devuelve <code>True</code> si alguno de los datos booleanos <code>b1</code> o <code>b2</code> son <code>True</code>, y <code>False</code> en caso contrario.</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#tabla-de-verdad","title":"Tabla de verdad","text":"<code>x</code> <code>y</code> <code>not x</code> <code>x and y</code> <code>x or y</code> <code>False</code> <code>False</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <code>False</code> <code>False</code> <code>False</code> <code>True</code> <code>True</code> <code>True</code> <code>False</code> <code>True</code> <code>True</code> <pre><code>&gt;&gt;&gt; not True\nFalse\n&gt;&gt;&gt; False or True\nTrue\n&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; True and True\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#conversion-de-datos-primitivos-simples","title":"Conversi\u00f3n de datos primitivos simples","text":"<p>Las siguientes funciones convierten un dato de un tipo en otro, siempre y cuando la conversi\u00f3n sea posible.</p> <ul> <li><code>int()</code> convierte a entero.   Ejemplo . <code>int('12')</code> <code>12</code> <code>int(True)</code> <code>1</code> <code>int('c')</code>  Error</li> <li><code>float()</code> convierte a real.   Ejemplo . <code>float('3.14')</code> <code>3.14</code> <code>float(True)</code> <code>1.0</code> <code>float('III')</code>  Error</li> <li><code>str()</code> convierte a cadena.   Ejemplo . <code>str(3.14)</code> <code>'3.14'</code> <code>str(True)</code> <code>'True'</code></li> <li><code>bool()</code> convierte a l\u00f3gico.   Ejemplo . <code>bool('0')</code> <code>False</code> <code>bool('3.14')</code> <code>True</code> <code>bool('')</code> <code>False</code> <code>bool('Hola')</code> <code>True</code></li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/PROG-U1.3.-TiposDeDatos/#fuente","title":"Fuente","text":"<ul> <li>Aprende con Alf</li> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> </ul>","tags":["Software"]},{"location":"section1/u01/teoria/OtrosRecursos/PROG-U.1-Practica003/","title":"UD 1 - P3: Control de versiones con Git y GitHub - Parte 1","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u01/teoria/OtrosRecursos/PROG-U.1-Practica003/#p13-introduccion-y-comandos-basicos-para-trabajar-con-el-control-de-versiones-git-y-github","title":"P1.3 - Introducci\u00f3n y comandos b\u00e1sicos para trabajar con el control de versiones Git y GitHub","text":"<p>A continuaci\u00f3n, ofrecemos una gu\u00eda paso a paso para aquellos usuarios principiantes interesados en trabajar con un repositorio de Git en local enlazado a GitHub.</p> <p>El sistema de control de versiones Git es una herramienta fundamental para muchos desarrolladores, especialmente cuando colaboran en un proyecto. Git ayuda a mantener una visi\u00f3n de conjunto, a preservar las versiones antiguas y a integrar los cambios de manera coherente. Para ello, Git agrupa una serie de programas de l\u00ednea de comandos y crea un efectivo entorno de trabajo.</p> <p>Es la mejor forma de trabajar para un desarrollador. De esta manera vais a tener siempre vuestro c\u00f3digo a salvo en la nube. Pod\u00e9is clonar el proyecto y trabajar en cualquier ordenador.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/teoria/OtrosRecursos/PROG-U.1-Practica003/#instalar-git","title":"Instalar Git","text":"<p>La forma m\u00e1s oficial est\u00e1 disponible para ser descargada en el sitio web de Git. Solo tienes que visitar Download for Windows y la descarga empezar\u00e1 autom\u00e1ticamente.</p> <p>Una vez que hayamos instalado Git en nuestro ordenador, abriremos la aplicaci\u00f3n \"Git Bash\".</p> <p>Git Bash es la herramienta de l\u00ednea de comandos que permite a los usuarios de Windows utilizar las funciones de Git. Git Bash es Git en una \u201cBourne Again Shell\u201d. La aplicaci\u00f3n contiene numerosas utilidades de Unix. Git Bash os permitir\u00e1 usar herramientas MinGW/Linux Bash con Git en la l\u00ednea de comandos. Todas esas cosas bonitas que se hacen en Linux tambi\u00e9n las podemos hacer en Windows a trav\u00e9s de Git Bash.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u01/teoria/OtrosRecursos/PROG-U.1-Practica003/#configurar-git-y-crear-nuestro-primer-proyecto","title":"Configurar Git y crear nuestro primer proyecto","text":"<ol> <li> <p>Primero tenemos que definir nuestra identidad, para ello en la l\u00ednea de comandos escribiremos las siguientes instrucciones utilizando nuestro usuario iPasen y correo de g.educaand.es:</p> <p><code>git config --global user.name \"dcansib483\"</code> <code>git config --global user.email \"dcansib483@g.educaand.es\"</code></p> </li> <li> <p>Renombramos la rama principal master a main:</p> <p><code>git branch -m master main</code></p> </li> <li> <p>Algunos comandos b\u00e1sicos para navegar y trabajar con ficheros y carpetas:</p> <ul> <li><code>clear</code>: limpia la pantalla de la consola.</li> <li><code>pwd</code>: muestra el directorio actual.</li> <li><code>ls</code>: lista los ficheros y directorios (par\u00e1metros <code>-l</code>: muestra la lista detallada y <code>-a</code>: muestra archivos ocultos).</li> <li><code>cd</code>: para movernos entre directorios (por ejemplo <code>cd nombreDir</code>. Con <code>cd ..</code> voy al directorio anterior al actual).</li> <li><code>mkdir</code>: para crear un directorio (por ejemplo <code>mkdir nombreDir</code>).</li> <li><code>rmdir</code>: para borrar un directorio (por ejemplo <code>rmdir nombreDir</code>).</li> <li>Podemos pulsar las flechas arriba y abajo para movernos por los comandos ejecutados previamente.</li> <li>Podemos autocompletar el nombre de los directorios o ficheros.</li> </ul> </li> <li> <p>El fichero de Git d\u00f3nde se almacena la informaci\u00f3n de nuestra identidad est\u00e1 en un archivo oculto en nuestro HOMEPATH llamado .gitconfig, intenta encontrarlo y visualizar su contenido con el comando <code>cat</code>.</p> </li> <li> <p>Accedemos a la carpeta Documents y creamos el directorio ProgPython:</p> <p><code>cd Documents</code> <code>mkdir ProgPython</code></p> </li> <li> <p>En esta carpeta vamos a crear nuestro proyecto de Git. Inicializamos Git en este directorio para indicarle que esta carpeta es nuestra \u00e1rea de trabajo:</p> <p><code>cd ProgPython</code> <code>git init</code></p> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/teoria/OtrosRecursos/PROG-U.1-Practica003/#como-vamos-a-trabajar-con-git-proyecto","title":"\u00bfC\u00f3mo vamos a trabajar con Git (Proyecto)?","text":"<p>De manera muy b\u00e1sica, en un proyecto de Git vamos a trabajar con 3 secciones o \u00e1reas principales:</p> <pre><code>* \u00c1rea de trabajo (creamos carpetas y ficheros, modificamos el contenido de los ficheros y ejecutamos el comando `add` para agregarlos al \u00e1rea de preparaci\u00f3n del proyecto)\n* \u00c1rea de preparaci\u00f3n o Staging Area\n* Repositorio (commit)\n</code></pre> <p></p> <ol> <li> <p>Nos creamos un primer programa en Python y lo ejecutamos (todo desde la l\u00ednea de comandos por ahora):</p> <p>touch holamundo.py</p> </li> <li> <p>Podemos crearnos el programa y editarlo de manera gr\u00e1fica en el Explorador de Windows, pero esta vez vamos a usar un editor de consola para escribir el contenido de nuestro programa. Despu\u00e9s mostraremos su contenido en la terminal con el comando cat y mediante el int\u00e9rprete de Python lo ejecutaremos:</p> <p>nano holamundo.py</p> <p>Dentro del fichero escribimos <code>print(\"Hola mundo DAM-DAW!\")</code> Guardamos y salimos (leer las opciones en la barra inferior) Para comprobar el contenido del fichero utilizamos el comando siguiente:</p> <p><code>cat holamundo.py</code></p> <p>Vamos a ejecutar el programa realizado en Python:</p> </li> </ol> <p><code>python holamundo.py</code></p> <ol> <li> <p>Ahora vamos a mirar el estado de nuestra \u00e1rea de trabajo... a ver que nos dice Git:</p> <p><code>git status</code></p> <p>\u00bfQu\u00e9 va a pasar si vamos al directorio justo anterior y volvemos a ejecutar el mismo comando?</p> </li> <li> <p>Volvemos a la carpeta de nuestro proyecto de Git... y volvemos ver el estado de nuestro proyecto... vemos que nos est\u00e1 inicando que existe un fichero nuevo sin a\u00f1adir a nuestra \u00e1rea de preparaci\u00f3n. La a\u00f1adimos:</p> <p><code>git add holamundo.py</code></p> </li> <li> <p>C\u00f3mo es un programa muy peque\u00f1o y ya lo hemos terminado, vamos a confirmar que es un buen punto de partida para hacer un commit, es decir, lo pasamos a nuestro repositorio o \u00e1rea de producci\u00f3n:</p> <p><code>git commit -m \"Primera versi\u00f3n de hola mundo\"</code></p> <p>Si volvemos a ejecutar el estado del proyecto de Git veremos que no tenemos ning\u00fan cambio pendiente... est\u00e1 todo en el repositorio.</p> </li> <li> <p>Vamos a crear otro programa, pero esta vez desde Pycharm...</p> <p>Primero creamos un directorio que se llame ejercicios1 y despu\u00e9s un fichero que se llame prueba1.py que contenga el siguiente c\u00f3digo:</p> <p>edad = int(input(\"Introduzca su edad: \")) if edad &gt;= 18:     print(\"Toma una cerveza!\") else:     print(f\"Toma un zumo de pi\u00f1a, con {edad} a\u00f1os eres menor.\")</p> <p>Esta vez lo vamos a abrir con PyCharm, dici\u00e9ndole que nos cree un proyecto en la carpeta ProgPython... podemos crear el directorio y el programa vac\u00edo con los comandos de consola (<code>mkdir</code> y <code>touch</code>) y despu\u00e9s abrir el fichero con PyCharm (bot\u00f3n derecho desde el Explorador de archivos de Windows)</p> <p>A continuaci\u00f3n, lo vamos a ejecutar dentro de PyCharm para ver c\u00f3mo funciona el programa...</p> </li> <li> <p>Esto nos ha generado en la carpeta del proyecto dos directorios: ejercicios1 y .idea (propio de la gesti\u00f3n del IDE Pycharm). Si comprobamos el estado del proyecto (<code>git status</code>) nos muestra el directorio .idea para que lo a\u00f1adamos tambi\u00e9n. Si no queremos subir a nuestro repositorio esta carpeta, podemos indicarle a Git que la ignore. Para ello, vamos a crearnos, en la carpeta del proyecto de Git, el fichero <code>.gitignore</code> que contendr\u00e1 los archivos y carpetas que deseamos que Git ignore al comprobar el estado de los archivos del proyecto. En nuestro caso, solo tendr\u00e1 una l\u00ednea (podemos hacerlo con el editor <code>nano</code>):</p> <p>.idea</p> <p>A continuaci\u00f3n debemos a\u00f1adir al repositorio el fichero .gitignore y la carpeta ejercicios1:</p> <p><code>git add .gitignore</code> <code>git add ejercicios</code> <code>git commit -m \"Primera versi\u00f3n de la carpeta ejercicios1\"</code></p> </li> <li> <p>Ahora mismo tenemos todo actualizado en nuestro repositorio... para ver todos los commits que hemos realizado (observad el c\u00f3digo HASH que tiene cada commit):</p> <p><code>git log</code></p> </li> <li> <p>Podemos hacer ahora una modificaci\u00f3n al programa prueba1.py</p> <p>edad = input(\"Introduzca su edad: \") if edad &gt;= 18:     print(\"Toma una cerveza!\") else:     print(f\"Toma un zumo de pi\u00f1a, con {edad} a\u00f1os eres menor.\")</p> <p>Si volvemos a comprobar el estado del proyeto de Git nos dir\u00e1 que hay un fichero modificado... vamos a a\u00f1adirlo y hacer commit.</p> <p><code>git add ejercicios1</code> <code>git commit -m \"Segunda versi\u00f3n con un error\"</code> <code>git log</code></p> <p>Si ejecutamos el programa desde el IDE PyCharm observamos que nos da un gran error... nos hemos equivocado y est\u00e1 en el repositorio final :-( \u00bfQu\u00e9 hacemos ahora?</p> </li> <li> <p>No pasa nada, para eso tenemos un control de versiones... primero hacemos git log, copiamos el n\u00famero que est\u00e1 a la derecha del commit de la versi\u00f3n a la que queremos volver y lo pegamos detr\u00e1s del siguiente comando:</p> <p><code>git log</code> <code>git checkout 8d0bd05d48f696b544e0eca0dce995d15f220e13</code></p> </li> <li> <p>Si volvemos a PyCharm, observamos que volvemos a tener la primera versi\u00f3n de nuestro programa que funciona perfectamente. Observad tambi\u00e9n con el comando <code>git log</code> que ya no aparece la segunda versi\u00f3n, pues el comando <code>git checkout</code> la ha eliminado del control de versiones para ir a una versi\u00f3n anterior (esto no se puede deshacer).</p> </li> <li> <p>Otros comandos que nos pueden ayudar:</p> <ul> <li>Para a\u00f1adir TODOS los ficheros de un directorio =&gt; <code>git add .</code></li> <li>Para a\u00f1adir TODOS los cambios pendientes de una sola vez: =&gt; <code>git add -A</code> </li> <li>Para deshacer un <code>git add</code> antes de hacer un <code>git commit</code> =&gt; <code>git reset nombreArchivo</code> o <code>git reset</code> para deshacer todos los cambios. Tambi\u00e9n podemos usar <code>git checkout .</code>.</li> </ul> </li> </ol>","tags":["Software","Ejercicios"]},{"location":"section1/u01/teoria/OtrosRecursos/readme/","title":"Readme","text":"<p>Nuevo material. </p>"},{"location":"section1/u02/","title":"UD 2 - Sentencias condicionales y repetitivas","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u02/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u02/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 3. Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje.</p>","tags":["Software"]},{"location":"section1/u02/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha escrito y probado c\u00f3digo que haga uso de estructuras de selecci\u00f3n.</li> <li>b) Se han utilizado estructuras de repetici\u00f3n.</li> <li>c) Se han utilizado estructuras de repetici\u00f3n.</li> <li>d) Se han reconocido las posibilidades de las sentencias de salto.</li> <li>e) Se ha escrito c\u00f3digo utilizando control de excepciones.</li> <li>f) Se han creado programas ejecutables utilizando diferentes estructuras de control.</li> <li>g) Se han probado y depurado los programas.</li> <li>h) Se ha comentado y documentado el c\u00f3digo. </li> </ul>","tags":["Software"]},{"location":"section1/u02/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 1</p> <ul> <li>U1: Mi primer programa. </li> <li>U2: Sentencias condicionales y repetitivas.</li> </ul> <p>En la Unidad 2, veremos:</p> <ul> <li>Estructuras de selecci\u00f3n.</li> <li>Estructuras de repetici\u00f3n.</li> <li>Estructuras de salto.</li> <li>Control de excepciones.</li> <li>Depuraci\u00f3n de programas, mediante el depurador como herramienta de control de errores.</li> <li>Documentaci\u00f3n de programas.</li> </ul>","tags":["Software"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/","title":"UD 2 - P1: Condicionales","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#p21-ejercicios","title":"P2.1 - Ejercicios","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla si es mayor de edad o no.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene la cadena de caracteres <code>contrase\u00f1a</code> en una variable, pregunte al usuario por la contrase\u00f1a e imprima por pantalla si la contrase\u00f1a introducida por el usuario coincide con la guardada en la variable sin tener en cuenta may\u00fasculas y min\u00fasculas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que pida al usuario dos n\u00fameros y muestre por pantalla su divisi\u00f3n. Si el divisor es cero el programa debe mostrar un error.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es par o impar.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Para tributar un determinado impuesto se debe ser mayor de 16 a\u00f1os y tener unos ingresos iguales o superiores a 1000 \u20ac mensuales. Escribir un programa que pregunte al usuario su edad y sus ingresos mensuales y muestre por pantalla si el usuario tiene que tributar o no.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Los alumnos de un curso se han dividido en dos grupos A y B de acuerdo al sexo y el nombre. El grupo A esta formado por las mujeres con un nombre anterior a la M y los hombres con un nombre posterior a la N y el grupo B por el resto. Escribir un programa que pregunte al usuario su nombre y sexo, y muestre por pantalla el grupo que le corresponde.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Los tramos impositivos para la declaraci\u00f3n de la renta en un determinado pa\u00eds son los siguientes:</p> Renta Tipo impositivo Menos de 10000\u20ac 5% Entre 10000\u20ac y 20000\u20ac 15% Entre 20000\u20ac y 35000\u20ac 20% Entre 35000\u20ac y 60000\u20ac 30% M\u00e1s de 60000\u20ac 45% <p>Escribir un programa que pregunte al usuario su renta anual y muestre por pantalla el tipo impositivo que le corresponde.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>En una determinada empresa, sus empleados son evaluados al final de cada a\u00f1o. Los puntos que pueden obtener en la evaluaci\u00f3n comienzan en 0.0 y pueden ir aumentando, traduci\u00e9ndose en mejores beneficios. Los puntos que pueden conseguir los empleados pueden ser 0.0, 0.4, 0.6 o m\u00e1s, pero no valores intermedios entre las cifras mencionadas. A continuaci\u00f3n se muestra una tabla con los niveles correspondientes a cada puntuaci\u00f3n. La cantidad de dinero conseguida en cada nivel es de 2.400\u20ac multiplicada por la puntuaci\u00f3n del nivel.</p> Nivel Puntuaci\u00f3n Inaceptable 0.0 Aceptable 0.4 Meritorio 0.6 o m\u00e1s <p>Escribir un programa que lea la puntuaci\u00f3n del usuario e indique su nivel de rendimiento, as\u00ed como la cantidad de dinero que recibir\u00e1 el usuario.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa para una empresa que tiene salas de juegos para todas las edades y quiere calcular de forma autom\u00e1tica el precio que debe cobrar a sus clientes por entrar. El programa debe preguntar al usuario la edad del cliente y mostrar el precio de la entrada. Si el cliente es menor de 4 a\u00f1os puede entrar gratis, si tiene entre 4 y 18 a\u00f1os debe pagar 5\u20ac y si es mayor de 18 a\u00f1os, 10\u20ac.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>La pizzer\u00eda Bella Napoli ofrece pizzas vegetarianas y no vegetarianas a sus clientes. Los ingredientes para cada tipo de pizza aparecen a continuaci\u00f3n.</p> <ul> <li>Ingredientes vegetarianos: Pimiento y tofu.</li> <li>Ingredientes no vegetarianos: Peperoni, Jam\u00f3n y Salm\u00f3n.</li> </ul> <p>Escribir un programa que pregunte al usuario si quiere una pizza vegetariana o no, y en funci\u00f3n de su respuesta le muestre un men\u00fa con los ingredientes disponibles para que elija. Solo se puede eligir un ingrediente adem\u00e1s de la mozzarella y el tomate que est\u00e1n en todas la pizzas. Al final se debe mostrar por pantalla si la pizza elegida es vegetariana o no y todos los ingredientes que lleva.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/","title":"UD 2 - P2: Iterativas","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#p22-ejercicios","title":"P2.2 - Ejercicios","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pida al usuario una palabra y la muestre por pantalla 10 veces.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los a\u00f1os que ha cumplido (desde 1 hasta su edad).</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla todos los n\u00fameros impares desde 1 hasta ese n\u00famero separados por comas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla la cuenta atr\u00e1s desde ese n\u00famero hasta cero separados por comas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que pregunte al usuario una cantidad a invertir, el inter\u00e9s anual y el n\u00famero de a\u00f1os, y muestre por pantalla el capital obtenido en la inversi\u00f3n cada a\u00f1o que dura la inversi\u00f3n.</p> <pre><code># Formula para calcular El capital tras un a\u00f1o.\namount *= 1 + interest / 100\n# En donde:\n# - amount: Cantidad a invertir\n# - interest: Interes porcentual anual \n</code></pre>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla un tri\u00e1ngulo rect\u00e1ngulo como el de m\u00e1s abajo, de altura el n\u00famero introducido. <pre><code>*\n**\n***\n****\n*****\n</code></pre></p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que muestre por pantalla la tabla de multiplicar del 1 al 10.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla un tri\u00e1ngulo rect\u00e1ngulo como el de m\u00e1s abajo. <pre><code>1\n3 1\n5 3 1\n7 5 3 1\n9 7 5 3 1\n</code></pre></p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que almacene la cadena de caracteres contrase\u00f1a en una variable, pregunte al usuario por la contrase\u00f1a hasta que introduzca la contrase\u00f1a correcta.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es un n\u00famero primo o no.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que pida al usuario una palabra y luego muestre por pantalla una a una las letras de la palabra introducida empezando por la \u00faltima.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa en el que se pregunte al usuario por una frase y una letra, y muestre por pantalla el n\u00famero de veces que aparece la letra en la frase.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que muestre el eco de todo lo que el usuario introduzca hasta que el usuario escriba \u201csalir\u201d que terminar\u00e1.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-14","title":"Ejercicio 14","text":"<p>Leer n\u00fameros enteros de teclado, hasta que el usuario ingrese el 0. Finalmente, mostrar la sumatoria de todos los n\u00fameros ingresados.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-15","title":"Ejercicio 15","text":"<p>Leer n\u00fameros enteros de teclado, hasta que el usuario ingrese el 0. Finalmente, mostrar la sumatoria de todos los n\u00fameros positivos ingresados.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-16","title":"Ejercicio 16","text":"<p>Leer n\u00fameros enteros positivos de teclado, hasta que el usuario ingrese el 0. Informar cu\u00e1l fue el mayor n\u00famero ingresado.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-17","title":"Ejercicio 17","text":"<p>Leer un n\u00famero entero positivo desde teclado e imprimir la suma de los d\u00edgitos que lo componen.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-18","title":"Ejercicio 18","text":"<p>Solicitar al usuario que ingrese n\u00fameros enteros positivos y, por cada uno, imprimir la suma de los d\u00edgitos que lo componen. La condici\u00f3n de corte es que se ingrese el n\u00famero -1. Al finalizar, mostrar cu\u00e1ntos de los n\u00fameros ingresados por el usuario fueron n\u00fameros pares.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-19","title":"Ejercicio 19","text":"<p>Mostrar un men\u00fa con tres opciones: 1- comenzar programa, 2- imprimir listado, 3-finalizar programa. A continuaci\u00f3n, el usuario debe poder seleccionar una opci\u00f3n (1, 2 \u00f3 3). Si elige una opci\u00f3n incorrecta, informarle del error. El men\u00fa se debe volver a mostrar luego de ejecutada cada opci\u00f3n, permitiendo volver a elegir. Si elige las opciones 1 \u00f3 2 se imprimir\u00e1 un texto. Si elige la opci\u00f3n 3, se interrumpir\u00e1 la impresi\u00f3n del men\u00fa y el programa finalizar\u00e1.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-20","title":"Ejercicio 20","text":"<p>Solicitar al usuario el ingreso de una frase y de una letra (que puede o no estar en la frase). Recorrer la frase, car\u00e1cter a car\u00e1cter, comparando con la letra buscada. Si el car\u00e1cter no coincide, indicar que no hay coincidencia en esa posici\u00f3n (imprimiendo la posici\u00f3n) y continuar. Si se encuentra una coincidencia, indicar en qu\u00e9 posici\u00f3n se encontr\u00f3 y finalizar la ejecuci\u00f3n.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-21","title":"Ejercicio 21","text":"<p>Crear un programa que permita al usuario ingresar los montos de las compras de un cliente (se desconoce la cantidad de datos que cargar\u00e1, la cual puede cambiar en cada ejecuci\u00f3n), cortando el ingreso de datos cuando el usuario ingrese el monto 0. Si ingresa un monto negativo, no se debe procesar y se debe pedir que ingrese un nuevo monto. Al finalizar, informar el total a pagar teniendo que cuenta que, si las ventas superan el total de $1000, se le debe aplicar un 10% de descuento.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-22","title":"Ejercicio 22","text":"<p>Crear un programa que solicite el ingreso de n\u00fameros enteros positivos, hasta que el usuario ingrese el 0. Por cada n\u00famero, informar cu\u00e1ntos d\u00edgitos pares y cu\u00e1ntos impares tiene. Al finalizar, informar la cantidad de d\u00edgitos pares y de d\u00edgitos impares le\u00eddos en total.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-23","title":"Ejercicio 23","text":"<p>Crear un programa que permita al usuario ingresar t\u00edtulos de libros por teclado, finalizando el ingreso al leerse el string \u201c*\u201d (asterisco). Cada vez que el usuario ingrese un string de longitud 1 que contenga s\u00f3lo una barra (\u201c/\u201d) se considera que termina una l\u00ednea. Por cada l\u00ednea completa, informar cu\u00e1ntos d\u00edgitos num\u00e9ricos (del 0 al 9) aparecieron en total (en todos los t\u00edtulos de libros que componen en esa l\u00ednea). Finalmente, informar cu\u00e1ntas l\u00edneas completas se ingresaron. <pre><code>Ejemplo de ejecuci\u00f3n:\nLibro: Los 3 mosqueteros\nLibro: Historia de 2 ciudades\nLibro: /\nL\u00ednea completa. Aparecen 2 d\u00edgitos num\u00e9ricos.\nLibro: 20000 leguas de viaje submarino\nLibro: El se\u00f1or de los anillos\nLibro: /\nL\u00ednea completa. Aparecen 5 d\u00edgitos num\u00e9ricos.\nLibro: 20 a\u00f1os despu\u00e9s\nLibro: *\nFin. Se leyeron 2 l\u00edneas completas.\n</code></pre></p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-24","title":"Ejercicio 24","text":"<p>Escribir un programa que solicite el ingreso de una cantidad indeterminada de n\u00fameros mayores que 1, finalizando cuando se reciba un cero. Imprimir la cantidad de n\u00fameros primos ingresados.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica002/#ejercicio-25","title":"Ejercicio 25","text":"<p>Solicitar al usuario que ingrese una frase y luego informar cu\u00e1l fue la palabra m\u00e1s larga (en caso de haber m\u00e1s de una, mostrar la primera) y cu\u00e1ntas palabras hab\u00eda. Precondici\u00f3n: se tomar\u00e1 como separador de palabras al car\u00e1cter \u201c \u201c (espacio), ya sea uno o m\u00e1s.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/","title":"UD 2 - P2: Iterativas","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#p23-ejercicios","title":"P2.3 - Ejercicios.","text":"<p>Controla la excepciones en los programas, para que los datos introducidos sean correctos. </p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los a\u00f1os que ha cumplido (desde 1 hasta su edad).</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla todos los n\u00fameros impares desde 1 hasta ese n\u00famero separados por comas.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero positivo y muestre por pantalla la cuenta atr\u00e1s desde ese n\u00famero hasta cero separados por comas. Deber\u00e1 solicitar el n\u00famero hasta introducir uno correcto. </p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pida al usuario un n\u00famero entero, si la entrada no es correcta, mostrar\u00e1 el mensaje \"La entrada no es correcta\" y lanzar\u00e1 la excepci\u00f3n capturada.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica003/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir que solicite una contrase\u00f1a, y si no coincide con la que se tiene, lance la excepci\u00f3n <code>NameError</code> con el mensaje, \"Incorrect Password!!\" </p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/","title":"UD 2 - P2: Iterativas","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#p24-ejercicio","title":"P2.4 - Ejercicio.","text":"","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#el-algoritmo-burbuja","title":"El algoritmo burbuja","text":"<p>El algoritmo burbuja te permite ordenar valores de un array. Funciona revisando cada elemento con el elemanto adyacente. Si ambos elementos no est\u00e1n ordenados, se procede a intercambiarlos, si por el contrario los elementos ya estaban ordenados se dejan tal como estaban. Este proceso sigue para cada elemento del arreglo hasta que quede completamente ordenado.</p> <p></p> <p>Ahora, vamos a entender como podemos programar este algoritmo.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#entendiendo-el-proceso","title":"Entendiendo el proceso","text":"<p>Vamos a ordenar la lista <code>a</code> de longitud <code>n=5</code>:</p> <pre><code>a = [8, 3, 1, 19, 14]\n</code></pre> <p>El algoritmo burbuja se compone de 2 bucles, uno dentro del otro. Llamaremos \u201cbucle hijo\u201d al que se encuentra dentro del otro bucle, es decir del \u201cbucle padre\u201d. Estos nombres son solo para que entiendas.</p> <p>El \u201cbucle padre\u201d realizar\u00e1 el n\u00famero de iteraciones necesarias para ordenar la lista (las iteraciones necesarias son n-1 veces) y el \u201cbucle hijo\u201d se encargar\u00e1 de comparar cada elemento con su adyacente y ordenarlos.</p> <p>Si deseamos ordenar la lista <code>a</code>, el padre y el hijo comenzar\u00e1n recorriendo n-1 veces (es decir, 4 veces), teniendo en cuenta, que cuando el padre realice una iteraci\u00f3n, el n\u00famero de iteraciones del hijo se ir\u00e1 reduciendo: comienza con n-1-0 iteraciones, luego n-1-1 iteraciones, luego n-1-2 iteraciones\u2026</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#un-ejemplo-grafico","title":"Un ejemplo gr\u00e1fico","text":"<p>Parece muy complicado, \u00bfcierto? Analicemos esto gr\u00e1ficamente.</p> <p>En los siguientes gr\u00e1ficos, el bucle padre tiene \u00edndice \"i\" y el bucle hijo tiene el \u00edndice \"j\", y recuerda, iniciaremos ambos bucles desde la posici\u00f3n 0 hasta el 3 (casi siempre los bucles inician desde el cero). Si te das cuenta 0, 1, 2 y 3 son igualmente los 4 recorridos que buscamos.</p> <p>Pasemos al primer recorrido: </p> <p>Primer recorrido del bucle padre <code>i=0</code>: el bucle hijo con \u00edndice <code>j</code> recorre desde 0 a 3 <code>(n-1)</code>. Como se puede apreciar, cada elemento es comparado con su adyacente. Si est\u00e1n ordenados correctamente se pasa a comparar con el siguiente elemento, y si no est\u00e1n ordenados se realiza un intercambio.</p> <p></p> <p>Segundo recorrido del bucle padre <code>i=1</code>: El bucle hijo con \u00edndice <code>j</code> reduce su rango, ahora va desde 0 a 2 <code>(n-1-1)</code> y ya no se eval\u00faa el \u00faltimo elemento (el 19, de color verde) porque ya esta ordenado. Adem\u00e1s, en este recorrido se realiza solamente un intercambio y la lista queda completamente ordenada. Luego agregamos al 14 a la lista de elementos ordenados.</p> <p></p> <p>Tercer recorrido del bucle padre <code>i=2</code>: El bucle hijo con \u00edndice <code>j</code> sigue reduciendo su rango, con valores desde 0 a 1 <code>(n-1-2)</code>, porque los \u00faltimos elementos ya no se eval\u00faan (porque est\u00e1n ordenados) y se van acumulando.</p> <p>En este punto ya no existen intercambios, pero el algoritmo va a recorrer hasta i=n-1. No importa si la lista esta ordenada o no. En nuestro caso realizar\u00e1 un \u201cCuarto Recorrido\u201d, el cual es innecesario. Por este motivo existe una variaci\u00f3n de este algoritmo que evita que se hagan recorridos extra una vez que la lista ya este ordenada (en este art\u00edculo te ense\u00f1ar\u00e9 a implementar el original y la variaci\u00f3n).</p> <p> Cuarto recorrido del bucle padre <code>i=3</code>: El bucle hijo con \u00edndice <code>j</code> solo toma el valor de 0 <code>(n-1-3)</code>. Verifica que est\u00e9n ordenados correctamente y el bucle padre llega al final de su recorrido.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/practica/PROG-U2.-Practica004/#practica","title":"Pr\u00e1ctica","text":"<p>Ahora que ya sabemos como funciona el algoritmo de burbuja, pasemos a la pr\u00e1ctica. Implementaci\u00f3n en Python y utiliza el debugger para asegurarte que funciona adecuadamente y entiendes su funcionamiento.</p>","tags":["Software","Ejercicios"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/","title":"UD 2 - 2.1 Condicionales","text":"","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#sentencias-condicionales","title":"Sentencias Condicionales","text":"","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#expresiones-booleanas","title":"Expresiones booleanas","text":"<p>Una expresi\u00f3n booleana es aquella que puede ser verdadera (<code>True</code>) o falsa (<code>False</code>). Los ejemplos siguientes usan el operador <code>==</code>, que compara dos operandos y devuelve <code>True</code> si son iguales y <code>False</code> en caso contrario:</p> <pre><code>&gt;&gt;&gt; 5 == 5\nTrue\n&gt;&gt;&gt; 5 == 6\nFalse\n</code></pre> <p><code>True</code> y <code>False</code> son valores especiales que pertenecen al tipo <code>bool (booleano)</code>; no son cadenas:</p> <pre><code>&gt;&gt;&gt; type(True)\n&lt;class 'bool'&gt;\n&gt;&gt;&gt; type(False)\n&lt;class 'bool'&gt;\n</code></pre> <p>El operador <code>==</code> es uno de los  operadores de comparaci\u00f3n ; los dem\u00e1s son:</p> <pre><code>x != y               # x es distinto de y\nx &gt; y                # x es mayor que y\nx &lt; y                # x es menor que y\nx &gt;= y               # x es mayor o igual que y\nx &lt;= y               # x es menor o igual que y\nx is y               # x es lo mismo que y\nx is not y           # x no es lo mismo que y\n</code></pre> <p>A pesar de que estas operaciones probablemente te resulten familiares, los s\u00edmbolos en Python son diferentes de los s\u00edmbolos matem\u00e1ticos que se usan para realizar las mismas operaciones. Un error muy com\u00fan es usar s\u00f3lo un s\u00edmbolo igual (<code>=</code>) en vez del s\u00edmbolo de doble igualdad (<code>==</code>). Recuerda que <code>=</code> es un operador de asignaci\u00f3n, y <code>==</code> es un operador de comparaci\u00f3n. No existe algo como <code>=&lt;</code> o <code>=&gt;</code>.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Existen tres  operadores l\u00f3gicos : <code>and (y)</code>, <code>or (o)</code>, y <code>not (no)</code>. El significado sem\u00e1ntico de estas operaciones es similar a su significado en ingl\u00e9s. Por ejemplo,</p> <p><code>x &gt; 0 and x &lt; 10</code></p> <p>es verdadero s\u00f3lo cuando <code>x</code> es mayor que 0 y menor que 10.</p> <p><code>n%2 == 0 or n%3 == 0</code> es verdadero si cualquiera de las condiciones es verdadera, es decir, si el n\u00famero es divisible por 2 o por 3.</p> <p>Finalmente, el operador <code>not</code> niega una expresi\u00f3n booleana, de modo que <code>not (x &gt; y)</code> es verdadero si <code>x &gt; y</code> es falso; es decir, si <code>x</code> es menor o igual que <code>y</code>.</p> <p>Estrictamente hablando, los operandos de los operadores l\u00f3gicos deber\u00edan ser expresiones booleanas, pero Python no es muy estricto. Cualquier n\u00famero distinto de cero se interpreta como \u201cverdadero.\u201d</p> <pre><code>&gt;&gt;&gt; 17 and True\nTrue\n</code></pre> <p>Esta flexibilidad puede ser \u00fatil, pero existen ciertas sutilezas en ese tipo de uso que pueden resultar confusas. Es posible que prefieras evitar usarlo de este modo hasta que est\u00e9s bien seguro de lo que est\u00e1s haciendo.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#ejecucion-condicional","title":"Ejecuci\u00f3n condicional","text":"<p>Para poder escribir programas \u00fatiles, casi siempre vamos a necesitar la capacidad de comprobar condiciones y cambiar el comportamiento del programa de acuerdo a ellas. Las <code>sentencias condicionales</code> nos proporcionan esa capacidad. La forma m\u00e1s sencilla es la sentencia <code>if</code>:</p> <pre><code>if x &gt; 0 :\nprint('x es positivo')\n</code></pre> <p>La expresi\u00f3n booleana despu\u00e9s de la sentencia <code>if</code> recibe el nombre de  condici\u00f3n . La sentencia <code>if</code> se finaliza con un car\u00e1cter de dos-puntos (:) y la(s) l\u00ednea(s) que van detr\u00e1s de la sentencia if van indentadas<sup>1</sup> (es decir, llevan una tabulaci\u00f3n o varios espacios en blanco al principio).</p> <p> </p> L\u00f3gica del IF <p>Si la condici\u00f3n l\u00f3gica es verdadera, la sentencia indentada ser\u00e1 ejecutada. Si la condici\u00f3n es falsa, la sentencia indentada ser\u00e1 omitida.</p> <p>La sentencia <code>if</code> tiene la misma estructura que la definici\u00f3n de funciones o los bucles <code>for</code><sup>2</sup>. La sentencia consiste en una l\u00ednea de encabezado que termina con el car\u00e1cter dos-puntos (:) seguido por un bloque indentado. Las sentencias de este tipo reciben el nombre de  sentencias compuestas , porque se extienden a lo largo de varias l\u00edneas.</p> <p>No hay l\u00edmite en el n\u00famero de sentencias que pueden aparecer en el cuerpo, pero debe haber al menos una. Ocasionalmente, puede resultar \u00fatil tener un cuerpo sin sentencias (normalmente como emplazamiento reservado para c\u00f3digo que no se ha escrito a\u00fan). En ese caso, se puede usar la sentencia <code>pass</code>, que no hace nada.</p> <pre><code>if x &lt; 0 :\npass          # \u00a1necesito gestionar los valores negativos!\n</code></pre> <p>Si introduces una sentencia <code>if</code> en el int\u00e9rprete de Python, el prompt cambiar\u00e1 su aspecto habitual por puntos suspensivos, para indicar que est\u00e1s en medio de un bloque de sentencias, como se muestra a continuaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; x = 3\n&gt;&gt;&gt; if x &lt; 10:\n...    print('Peque\u00f1o')\n...\nPeque\u00f1o\n&gt;&gt;&gt;\n</code></pre> <p>Al usar el int\u00e9rprete de Python, debe dejar una l\u00ednea en blanco al final de un bloque, de lo contrario Python devolver\u00e1 un error:</p> <pre><code>&gt;&gt;&gt; x = 3\n&gt;&gt;&gt; if x &lt; 10:\n...    print('Peque\u00f1o')\n... print('Hecho')\nFile \"&lt;stdin&gt;\", line 3\nprint('Hecho')\n^\nSyntaxError: invalid syntax\n</code></pre> <p>No es necesaria una l\u00ednea en blanco al final de un bloque de instrucciones al escribir y ejecutar un script, pero puede mejorar la legibilidad de su c\u00f3digo.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#ejecucion-alternativa","title":"Ejecuci\u00f3n alternativa","text":"<p>La segunda forma de la sentencia <code>if</code> es la  ejecuci\u00f3n alternativa , en la cual existen dos posibilidades y la condici\u00f3n determina cual de ellas ser\u00e1 ejecutada. La sintaxis es similar a \u00e9sta:</p> <pre><code>if x%2 == 0 :\nprint('x es par')\nelse :\nprint('x es impar')\n</code></pre> <p>Si al dividir <code>x</code> por 2 obtenemos como resto 0, entonces sabemos que <code>x</code> es par, y el programa muestra un mensaje a tal efecto. Si esa condici\u00f3n es falsa, se ejecuta el segundo conjunto de sentencias.</p> <p> </p> L\u00f3gica del IF-then-Else <p>Dado que la condici\u00f3n debe ser obligatoriamente verdadera o falsa, solamente una de las alternativas ser\u00e1 ejecutada. Las alternativas reciben el nombre de  ramas , dado que se trata de ramificaciones en el flujo de la ejecuci\u00f3n.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#condicionales-encadenados","title":"Condicionales encadenados","text":"<p>Algunas veces hay m\u00e1s de dos posibilidades, de modo que necesitamos m\u00e1s de dos ramas. Una forma de expresar una operaci\u00f3n como \u00e9sa es usar un  condicional encadenado :</p> <pre><code>if x &lt; y:\nprint('x es menor que y')\nelif x &gt; y:\nprint('x es mayor que y')\nelse:\nprint('x e y son iguales')\n</code></pre> <p><code>elif</code> es una abreviatura para \u201celse if\u201d. En este caso tambi\u00e9n ser\u00e1 ejecutada \u00fanicamente una de las ramas.</p> <p> </p> L\u00f3gica del IF-then-Elif <p>No hay un l\u00edmite para el n\u00famero de sentencias <code>elif</code>. Si hay una clausula <code>else</code>, debe ir al final, pero tampoco es obligatorio que \u00e9sta exista.</p> <pre><code>if choice == 'a':\nprint('Respuesta incorrecta')\nelif choice == 'b':\nprint('Respuesta correcta')\nelif choice == 'c':\nprint('Casi, pero no es correcto')\n</code></pre> <p>Cada condici\u00f3n es comprobada en orden. Si la primera es falsa, se comprueba la siguiente y as\u00ed con las dem\u00e1s. Si una de ellas es verdadera, se ejecuta la rama correspondiente, y la sentencia termina. Incluso si hay m\u00e1s de una condici\u00f3n que sea verdadera, s\u00f3lo se ejecuta la primera que se encuentra.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#condicionales-anidados","title":"Condicionales anidados","text":"<p>Un condicional puede tambi\u00e9n estar anidado dentro de otro. Podr\u00edamos haber escrito el ejemplo anterior de las tres ramas de este modo:</p> <pre><code>if x == y:\nprint('x e y son iguales')\nelse:\nif x &lt; y:\nprint('x es menor que y')\nelse:\nprint('x es mayor que y')\n</code></pre> <p>El condicional exterior contiene dos ramas. La primera rama ejecuta una sentencia simple. La segunda contiene otra sentencia <code>if</code>, que tiene a su vez sus propias dos ramas. Esas dos ramas son ambas sentencias simples, pero podr\u00edan haber sido sentencias condicionales tambi\u00e9n.</p> <p> </p> L\u00f3gica del IF anidados <p>A pesar de que el indentado de las sentencias hace que la estructura est\u00e9 clara, los condicionales anidados pueden volverse dif\u00edciles de leer r\u00e1pidamente. En general, es buena idea evitarlos si se puede.</p> <p>Los operadores l\u00f3gicos a menudo proporcionan un modo de simplificar las sentencias condicionales anidadas. Por ejemplo, el c\u00f3digo siguiente puede ser reescrito usando un \u00fanico condicional:</p> <pre><code>if 0 &lt; x:\nif x &lt; 10:\nprint('x es un n\u00famero positivo con un s\u00f3lo d\u00edgito')\n</code></pre> <p>La sentencia <code>print</code> se ejecuta solamente si se cumplen las dos condiciones anteriores, as\u00ed que en realidad podemos conseguir el mismo efecto con el operador <code>and</code>:</p> <pre><code>if 0 &lt; x and x &lt; 10:\nprint('x es un n\u00famero positivo con un s\u00f3lo d\u00edgito.')\n</code></pre>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#evaluacion-en-cortocircuito-de-expresiones-logicas","title":"Evaluaci\u00f3n en cortocircuito de expresiones l\u00f3gicas","text":"<p>Cuando Python est\u00e1 procesando una expresi\u00f3n l\u00f3gica, como <code>x &gt;= 2 and (x/y) &gt; 2</code>, eval\u00faa la expresi\u00f3n de izquierda a derecha. Debido a la definici\u00f3n de <code>and</code>, si <code>x</code> es menor de 2, la expresi\u00f3n <code>x &gt;= 2</code> resulta ser <code>falsa</code>, de modo que la expresi\u00f3n completa ya va a resultar <code>falsa</code>, independientemente de si <code>(x/y) &gt; 2</code> se eval\u00faa como <code>verdadera</code> o <code>falsa</code>.</p> <p>Cuando Python detecta que no se gana nada evaluando el resto de una expresi\u00f3n l\u00f3gica, detiene su evaluaci\u00f3n y no realiza el c\u00e1lculo del resto de la expresi\u00f3n. Cuando la evaluaci\u00f3n de una expresi\u00f3n l\u00f3gica se detiene debido a que ya se conoce el valor final, eso es conocido como cortocircuitar la evaluaci\u00f3n.</p> <p>A pesar de que esto pueda parecer hilar demasiado fino, el funcionamiento en cortocircuito nos descubre una ingeniosa t\u00e9cnica conocida como  patr\u00f3n guardi\u00e1n . Examina la siguiente secuencia de c\u00f3digo en el int\u00e9rprete de Python:</p> <pre><code>&gt;&gt;&gt; x = 6\n&gt;&gt;&gt; y = 2\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2\nTrue\n&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2\nFalse\n&gt;&gt;&gt; x = 6\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n&gt;&gt;&gt;\n</code></pre> <p>La tercera operaci\u00f3n ha fallado porque Python intent\u00f3 evaluar <code>(x/y)</code> e <code>y</code> era cero, lo cual provoca un runtime error (error en tiempo de ejecuci\u00f3n). Pero el segundo ejemplo no fall\u00f3, porque la primera parte de la expresi\u00f3n <code>x &gt;= 2</code> fue evaluada como <code>falsa</code>, as\u00ed que <code>(x/y)</code> no lleg\u00f3 a ejecutarse debido a la regla del  cortocircuito , y no se produjo ning\u00fan error.</p> <p>Es posible construir las expresiones l\u00f3gicas colocando estrat\u00e9gicamente una evaluaci\u00f3n como guardi\u00e1n justo antes de la evaluaci\u00f3n que podr\u00eda causar un error, como se muestra a continuaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and y != 0 and (x/y) &gt; 2\nFalse\n&gt;&gt;&gt; x = 6\n&gt;&gt;&gt; y = 0\n&gt;&gt;&gt; x &gt;= 2 and y != 0 and (x/y) &gt; 2\nFalse\n&gt;&gt;&gt; x &gt;= 2 and (x/y) &gt; 2 and y != 0\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: division by zero\n&gt;&gt;&gt;\n</code></pre> <p>En la primera expresi\u00f3n l\u00f3gica, <code>x &gt;= 2</code> es <code>falsa</code>, as\u00ed que la evaluaci\u00f3n se detiene en el <code>and</code>. En la segunda expresi\u00f3n l\u00f3gica, <code>x &gt;= 2</code> es <code>verdadera</code>, pero <code>y != 0</code> es <code>falsa</code>, de modo que nunca se alcanza <code>(x/y)</code>.</p> <p>En la tercera expresi\u00f3n l\u00f3gica, el <code>y != 0</code> va despu\u00e9s del c\u00e1lculo de <code>(x/y)</code>, de modo que la expresi\u00f3n falla con un error.</p> <p>En la segunda expresi\u00f3n, se dice que <code>y != 0</code> act\u00faa como guardi\u00e1n para garantizar que s\u00f3lo se ejecute <code>(x/y)</code> en el caso de que <code>y</code> no sea cero.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#depuracion","title":"Depuraci\u00f3n","text":"<p>Los \u201ctraceback\u201d que Python muestra cuando se produce un error contienen un mont\u00f3n de informaci\u00f3n, pero pueden resultar abrumadores. Las partes m\u00e1s \u00fatiles normalmente son:</p> <ul> <li>Qu\u00e9 tipo de error se ha producido, y</li> <li>D\u00f3nde ha ocurrido.</li> </ul> <p>Los errores de sintaxis (syntax errors), normalmente son f\u00e1ciles de localizar, pero a veces tienen trampa. Los errores debido a espacios en blanco pueden ser complicados, ya que los espacios y las tabulaciones son invisibles, y solemos ignorarlos.</p> <pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt;  y = 6\nFile \"&lt;stdin&gt;\", line 1\ny = 6\n^\nIndentationError: unexpected indent\n</code></pre> <p>En este ejemplo, el problema es que la segunda l\u00ednea est\u00e1 indentada por un espacio. Pero el mensaje de error apunta a <code>y</code>, lo cual resulta enga\u00f1oso. En general, los mensajes de error indican d\u00f3nde se ha descubierto el problema, pero el error real podr\u00eda estar en el c\u00f3digo previo, a veces en alguna l\u00ednea anterior.</p> <p>Ocurre lo mismo con los errores en tiempo de ejecuci\u00f3n (runtime errors). Sup\u00f3n que est\u00e1s tratando de calcular una relaci\u00f3n se\u00f1al-ruido en decibelios. La f\u00f3rmula es SNR*<sub>db</sub>=10log <sub>10</sub> ( P<sub>senal</sub> / P <sub>ruido</sub> ). En Python, podr\u00edas escribir algo como esto:</p> <pre><code>import math\nint_senal = 9\nint_ruido = 10\nrelacion = int_senal / int_ruido\ndecibelios = 10 * math.log10(relacion)\nprint(decibelios)\n# C\u00f3digo: https://es.py4e.com/code3/snr.py\n</code></pre> <p>Pero cuando lo haces funcionar, obtienes un mensaje de error<sup>3</sup>:</p> <pre><code>    Traceback (most recent call last):\nFile \"snr.py\", line 5, in ?\ndecibelios = 10 * math.log10(relacion)\nOverflowError: math range error\n</code></pre> <p>El mensaje de error apunta a la l\u00ednea 5, pero no hay nada incorrecto en ese l\u00ednea. Para encontrar el error real, puede resultar \u00fatil mostrar en pantalla el valor de <code>relacion</code>, que resulta ser 0. El problema est\u00e1 en la l\u00ednea 4, ya que al dividir dos enteros se realiza una divisi\u00f3n entera. La soluci\u00f3n es representar la intensidad de la se\u00f1al y la intensidad del ruido con valores en punto flotante.</p> <p>En general, los mensajes de error te dicen d\u00f3nde se ha descubierto el problema, pero a menudo no es ah\u00ed exactamente donde se ha producido.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.1.-Condicionales/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Aprende con Alf</li> <li>Python para todos</li> </ul>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/","title":"UD 2 - 2.2 Iterativas y salto","text":"","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#sentencias-iterativas","title":"Sentencias Iterativas","text":"","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#actualizacion-de-variables","title":"Actualizaci\u00f3n de variables","text":"<p>Uno de los usos habituales de las sentencias de asignaci\u00f3n consiste en realizar una actualizaci\u00f3n sobre una variable \u2013 en la cual el valor nuevo de esa variable depende del antiguo.</p> <pre><code>x = x + 1\n</code></pre> <p>Esto quiere decir \u201ctoma el valor actual de <code>x</code>, a\u00f1\u00e1dele 1, y luego actualiza <code>x</code> con el nuevo valor\u201d.</p> <p>Si intentas actualizar una variable que no existe, obtendr\u00e1s un error, ya que Python eval\u00faa el lado derecho antes de asignar el valor a <code>x</code>:</p> <pre><code>&gt;&gt;&gt; x = x + 1\nNameError: name 'x' is not defined\n</code></pre> <p>Antes de que puedas actualizar una variable, debes  inicializarla, normalmente mediante una simple asignaci\u00f3n:</p> <pre><code>&gt;&gt;&gt; x = 0\n&gt;&gt;&gt; x = x + 1\n</code></pre> <p>Actualizar una variable a\u00f1adi\u00e9ndole 1 se denomina incrementar; restarle 1 recibe el nombre de decrementar (o disminuir).</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#la-sentencia-while","title":"La sentencia <code>while</code>","text":"<p>Los PCs se suelen utilizar a menudo para automatizar tareas repetitivas. Repetir tareas id\u00e9nticas o muy similares sin cometer errores es algo que a las m\u00e1quinas se les da bien y en cambio a las personas no. Como las iteraciones resultan tan habituales, Python proporciona varias caracter\u00edsticas en su lenguaje para hacerlas m\u00e1s sencillas.</p> <p>Una forma de iteraci\u00f3n en Python es la sentencia <code>while</code>. He aqu\u00ed un programa sencillo que cuenta hacia atr\u00e1s desde cinco y luego dice \u201c\u00a1Despegue!\u201d.</p> <pre><code>n = 5\nwhile n &gt; 0:\nprint(n)\nn = n - 1\nprint('\u00a1Despegue!')\n</code></pre> <p>Casi se puede leer la sentencia <code>while</code> como si estuviera escrita en ingl\u00e9s. Significa, \u201cMientras <code>n</code> sea mayor que 0, muestra el valor de <code>n</code> y luego reduce el valor de <code>n</code> en 1 unidad. Cuando llegues a 0, sal de la sentencia <code>while</code> y muestra la palabra <code>\u00a1Despegue!</code>\u201d</p> <p>\u00c9ste es el flujo de ejecuci\u00f3n de la sentencia <code>while</code>, explicado de un modo m\u00e1s formal:</p> <ol> <li>Se eval\u00faa la condici\u00f3n, obteniendo <code>Verdadero</code> or <code>Falso</code>.</li> <li>Si la condici\u00f3n es falsa, se sale de la sentencia <code>while</code> y se contin\u00faa la ejecuci\u00f3n en la siguiente sentencia.</li> <li>Si la condici\u00f3n es verdadera, se ejecuta el cuerpo del <code>while</code> y luego se vuelve al paso 1.</li> </ol> <p>Este tipo de flujo recibe el nombre de bucle, ya que el tercer paso enlaza de nuevo con el primero. Cada vez que se ejecuta el cuerpo del bucle se dice que realizamos una iteraci\u00f3n. Para el bucle anterior, podr\u00edamos decir que \u201cha tenido cinco iteraciones\u201d, lo que significa que el cuerpo del bucle se ha ejecutado cinco veces.</p> <p>El cuerpo del bucle debe cambiar el valor de una o m\u00e1s variables, de modo que la condici\u00f3n pueda en alg\u00fan momento evaluarse como falsa y el bucle termine. La variable que cambia cada vez que el bucle se ejecuta y controla cu\u00e1ndo termina \u00e9ste, recibe el nombre de variable de iteraci\u00f3n. Si no hay variable de iteraci\u00f3n, el bucle se repetir\u00e1 para siempre, resultando as\u00ed un bucle infinito.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#bucles-infinitos","title":"Bucles infinitos","text":"<p>Una fuente de diversi\u00f3n sin fin para los programadores es la constataci\u00f3n de que las instrucciones del champ\u00fa: \u201cEnjabone, aclare, repita\u201d, son un bucle infinito, ya que no hay una variable de iteraci\u00f3n que diga cu\u00e1ntas veces debe ejecutarse el proceso.</p> <p>En el caso de una <code>cuenta atr\u00e1s</code>, podemos verificar que el bucle termina, ya que sabemos que el valor de <code>n</code> es finito, y podemos ver que ese valor se va haciendo m\u00e1s peque\u00f1o cada vez que se repite el bucle, de modo que en alg\u00fan momento llegar\u00e1 a 0. Otras veces un bucle es obviamente infinito, porque no tiene ninguna variable de iteraci\u00f3n.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#bucles-infinitos-y-break","title":"\u201cBucles infinitos\u201d y <code>break</code>","text":"<p>A veces no se sabe si hay que terminar un bucle hasta que se ha recorrido la mitad del cuerpo del mismo. En ese caso se puede crear un bucle infinito a prop\u00f3sito y usar la sentencia <code>break</code> para salir fuera de \u00e9l cuando se desee, aunque no es aconsejable puesto que podemos poner la condici\u00f3n de salida en la evaluaci\u00f3n del <code>while</code>.</p> <p>El bucle siguiente es, obviamente, un bucle infinito, porque la expresi\u00f3n l\u00f3gica de la sentencia <code>while</code> es simplemente la constante l\u00f3gica <code>True (verdadero)</code>;</p> <pre><code>n = 10\nwhile True:\nprint(n, end=' ')\nn = n - 1\nprint('\u00a1Terminado!')\n</code></pre> <p>Si cometes el error de ejecutar este c\u00f3digo, aprender\u00e1s r\u00e1pidamente c\u00f3mo detener un proceso de Python bloqueado en el sistema, o tendr\u00e1s que localizar d\u00f3nde se encuentra el bot\u00f3n de apagado de tu equipo. Este programa funcionar\u00e1 para siempre, o hasta que la bater\u00eda del equipo se termine, ya que la expresi\u00f3n l\u00f3gica al principio del bucle es siempre cierta, en virtud del hecho de que esa expresi\u00f3n es precisamente el valor constante <code>True</code>.</p> <p>A pesar de que en este caso se trata de un bucle infinito in\u00fatil, se puede usar ese dise\u00f1o para construir bucles \u00fatiles, siempre que se tenga la precauci\u00f3n de a\u00f1adir c\u00f3digo en el cuerpo del bucle para salir expl\u00edcitamente, usando <code>break</code> cuando se haya alcanzado la condici\u00f3n de salida.</p> <p>Por ejemplo, sup\u00f3n que quieres recoger entradas de texto del usuario hasta que \u00e9ste escriba <code>fin</code>. Podr\u00edas escribir:</p> <pre><code>while True:\nlinea = input('&gt; ')\nif linea == 'fin':\nbreak\nprint(linea)\nprint('\u00a1Terminado!')\n# C\u00f3digo: https://es.py4e.com/code3/copytildone1.py\n</code></pre> <p>La condici\u00f3n del bucle es <code>True</code>, lo cual es verdadero siempre, as\u00ed que el bucle se repetir\u00e1 hasta que se ejecute la sentencia break.</p> <p>Cada vez que se entre en el bucle, se pedir\u00e1 una entrada al usuario. Si el usuario escribe <code>fin</code>, la sentencia <code>break</code> har\u00e1 que se salga del bucle. En cualquier otro caso, el programa repetir\u00e1 cualquier cosa que el usuario escriba y volver\u00e1 al principio del bucle. \u00c9ste es un ejemplo de su funcionamiento:</p> <pre><code>&gt; hola a todos\nhola a todos\n&gt; he terminado\nhe terminado\n&gt; fin\n\u00a1Terminado!\n</code></pre> <p>\u00bfC\u00f3mo lo har\u00edas sin usar <code>while True:</code> y <code>break</code>?</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#finalizar-iteraciones-con-continue","title":"Finalizar iteraciones con <code>continue</code>","text":"<p>Algunas veces, estando dentro de un bucle se necesita terminar con la iteraci\u00f3n actual y saltar a la siguiente de forma inmediata. En ese caso se puede utilizar la sentencia <code>continue</code> para pasar a la siguiente iteraci\u00f3n sin terminar la ejecuci\u00f3n del cuerpo del bucle para la actual.</p> <p>A continuaci\u00f3n se muestra un ejemplo de un bucle que repite lo que recibe como entrada hasta que el usuario escribe \u201cfin\u201d, pero trata las l\u00edneas que empiezan por el car\u00e1cter almohadilla como l\u00edneas que no deben mostrarse en pantalla (algo parecido a lo que hace Python con los comentarios).</p> <pre><code>while True:\nlinea = input('&gt; ')\nif linea[0] == '#' :\ncontinue\nif linea == 'fin':\nbreak\nprint(linea)\nprint('\u00a1Terminado!')\n# C\u00f3digo: https://es.py4e.com/code3/copytildone2.py\n</code></pre> <p>He aqu\u00ed una ejecuci\u00f3n de ejemplo de ese nuevo programa con la sentencia <code>continue</code> a\u00f1adida.</p> <pre><code>&gt; hola a todos\nhola a todos\n&gt; # no imprimas esto\n&gt; \u00a1imprime esto!\n\u00a1imprime esto!\n&gt; fin\n\u00a1Terminado!\n</code></pre> <p>Todas las l\u00edneas se imprimen en pantalla, excepto la que comienza con el s\u00edmbolo de almohadilla, ya que en ese caso se ejecuta <code>continue</code>, finaliza la iteraci\u00f3n actual y salta de vuelta a la sentencia <code>while</code> para comenzar la siguiente iteraci\u00f3n, de modo que que se omite la sentencia <code>print</code>.</p> <p>\u00bfC\u00f3mo lo har\u00edas sin usar <code>while True:</code>, <code>break</code>, <code>continue</code>?</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#bucles-definidos-usando-for","title":"Bucles definidos usando <code>for</code>","text":"<p>A veces se desea repetir un bucle a trav\u00e9s de un conjunto de cosas, como una lista de palabras, las l\u00edneas de un archivo, o una lista de n\u00fameros. Cuando se tiene una lista de cosas para recorrer, se puede construir un bucle definido usando una sentencia <code>for</code>. A la sentencia <code>while</code> se la llama un bucle  indefinido, porque simplemente se repite hasta que cierta condici\u00f3n se hace <code>Falsa</code>, mientras que el bucle <code>for</code> se repite a trav\u00e9s de un conjunto conocido de elementos, de modo que ejecuta tantas iteraciones como elementos hay en el conjunto.</p> <p>La sintaxis de un bucle <code>for</code> es similar a la del bucle <code>while</code>, en ella hay una sentencia <code>for</code> y un cuerpo que se repite:</p> <pre><code>amigos = ['Joseph', 'Glenn', 'Sally']\nfor amigo in amigos:\nprint('Feliz a\u00f1o nuevo:', amigo)\nprint('\u00a1Terminado!')\n</code></pre> <p>En t\u00e9rminos de Python, la variable <code>amigos</code> es una lista<sup>1</sup> de tres cadenas y el bucle <code>for</code> se mueve recorriendo la lista y ejecuta su cuerpo una vez para cada una de las tres cadenas en la lista, produciendo esta salida:</p> <pre><code>Feliz a\u00f1o nuevo: Joseph\nFeliz a\u00f1o nuevo: Glenn\nFeliz a\u00f1o nuevo: Sally\n\u00a1Terminado!\n</code></pre> <p>La traducci\u00f3n de este bucle <code>for</code> al espa\u00f1ol no es tan directa como en el caso del <code>while</code>, pero si piensas en los amigos como un conjunto, ser\u00eda algo as\u00ed como: \u201cEjecuta las sentencias en el cuerpo del bucle una vez para (for) cada amigo que est\u00e9 en (in) el conjunto llamado amigos.\u201d</p> <p>Revisando el bucle <code>for</code>, for e in son palabras reservadas de Python, mientras que <code>amigo</code> y <code>amigos</code> son variables.</p> <pre><code>for amigo in amigos:\nprint('Feliz a\u00f1o nuevo::', amigo)\n</code></pre> <p>En concreto, <code>amigo</code> es la variable de iteraci\u00f3n para el bucle <code>for</code>. La variable <code>amigo</code> cambia para cada iteraci\u00f3n del bucle y controla cu\u00e1ndo se termina el bucle <code>for</code>. La variable de iteracion se desplaza sucesivamente a trav\u00e9s de las tres cadenas almacenadas en la variable <code>amigos</code>.</p> <p>Otra forma de usar los bucles <code>for</code> es haciendo uso de la instrucci\u00f3n <code>range</code>:</p> <ul> <li><code>range(fin)</code> : Genera una secuencia de n\u00fameros enteros desde 0 hasta <code>fin-1</code>.</li> <li><code>range(inicio, fin, salto)</code> : Genera una secuencia de n\u00fameros enteros desde <code>inicio</code> hasta <code>fin-1</code> con un incremento de <code>salto</code>.</li> </ul> <pre><code>&gt;&gt;&gt; for i in range(1, 10, 2):\n...     print(i, end=\", \")\n...\n1, 3, 5, 7, 9, &gt;&gt;&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#disenos-de-bucles","title":"Dise\u00f1os de bucles","text":"<p>A menudo se usa un bucle <code>for</code> o <code>while</code> para movernos a trav\u00e9s de una lista de elementos o el contenido de un archivo y se busca algo, como el valor m\u00e1s grande o el m\u00e1s peque\u00f1o de los datos que estamos revisando.</p> <p>Los bucles generalmente se construyen as\u00ed:</p> <ul> <li>Se inicializan una o m\u00e1s variables antes de que el bucle comience</li> <li>Se realiza alguna operaci\u00f3n con cada elemento en el cuerpo del bucle, posiblemente cambiando las variables dentro de ese cuerpo.</li> <li>Se revisan las variables resultantes cuando el bucle se completa</li> </ul> <p>Usaremos ahora una lista de n\u00fameros para demostrar los conceptos y construcci\u00f3n de estos dise\u00f1os de bucles.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#bucles-de-recuento-y-suma","title":"Bucles de recuento y suma","text":"<p>Por ejemplo, para contar el n\u00famero de elementos en una lista, podemos escribir el siguiente bucle <code>for</code>:</p> <pre><code>contador = 0\nfor valor in [3, 41, 12, 9, 74, 15]:\ncontador = contador + 1\nprint('Num. elementos: ', contador)\n</code></pre> <p>Ajustamos la variable <code>contador</code> a cero antes de que el bucle comience, despu\u00e9s escribimos un bucle <code>for</code> para movernos a trav\u00e9s de la lista de n\u00fameros. Nuestra variable de iteraci\u00f3n se llama <code>valor</code>, y dado que no usamos <code>valor</code> dentro del bucle, lo \u00fanico que hace es controlar el bucle y hacer que el cuerpo del mismo sea ejecutado una vez para cada uno de los valores de la lista.</p> <p>En el cuerpo del bucle, a\u00f1adimos 1 al valor actual de <code>contador</code> para cada uno de los valores de la lista. Mientras el bucle se est\u00e1 ejecutando, el valor de <code>contador</code> es la cantidad de valores que se hayan visto \u201chasta ese momento\u201d.</p> <p>Una vez el bucle se completa, el valor de <code>contador</code> es el n\u00famero total de elementos. El n\u00famero total \u201ccae en nuestro poder\u201d al final del bucle. Se construye el bucle de modo que obtengamos lo que queremos cuando \u00e9ste termina.</p> <p>Otro bucle similar, que calcula el total de un conjunto de n\u00fameros, se muestra a continuaci\u00f3n:</p> <pre><code>total = 0\nfor valor in [3, 41, 12, 9, 74, 15]:\ntotal = total + valor\nprint('Total: ', total)\n</code></pre> <p>En este bucle, s\u00ed utilizamos la variable de iteraci\u00f3n. En vez de a\u00f1adir simplemente uno a <code>contador</code> como en el bucle previo, ahora durante cada iteraci\u00f3n del bucle a\u00f1adimos el n\u00famero actual (3, 41, 12, etc.) al total en ese momento. Si piensas en la variable <code>total</code>, \u00e9sta contiene la \u201csuma parcial de valores hasta ese momento\u201d. As\u00ed que antes de que el bucle comience, <code>total</code> es cero, porque a\u00fan no se ha examinado ning\u00fan valor. Durante el bucle, <code>total</code> es la suma parcial, y al final del bucle, <code>total</code> es la suma total definitiva de todos los valores de la lista.</p> <p>Cuando el bucle se ejecuta, <code>total</code> acumula la suma de los elementos; una variable que se usa de este modo recibe a veces el nombre de acumulador.</p> <p>Ni el bucle que cuenta los elementos ni el que los suma resultan particularmente \u00fatiles en la pr\u00e1ctica, dado que existen las funciones internas <code>len()</code> y <code>sum()</code> que cuentan el n\u00famero de elementos de una lista y el total de elementos en la misma respectivamente.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#bucles-de-maximos-y-minimos","title":"Bucles de m\u00e1ximos y m\u00ednimos","text":"<p>Para encontrar el valor mayor de una lista o secuencia, construimos el bucle siguiente:</p> <pre><code>mayor = None\nprint('Antes:', mayor)\nfor valor in [3, 41, 12, 9, 74, 15]:\nif mayor is None or valor &gt; mayor :\nmayor = valor\nprint('Bucle:', valor, mayor)\nprint('Mayor:', mayor)\n</code></pre> <p>Cuando se ejecuta el programa, se obtiene la siguiente salida:</p> <pre><code>Antes: None\nBucle: 3 3\nBucle: 41 41\nBucle: 12 41\nBucle: 9 41\nBucle: 74 74\nBucle: 15 74\nMayor: 74\n</code></pre> <p>Debemos pensar en la variable <code>mayor</code> como el \u201cmayor valor visto hasta ese momento\u201d. Antes del bucle, asignamos a <code>mayor</code> el valor <code>None</code>. <code>None</code> es un valor constante especial que se puede almacenar en una variable para indicar que la variable est\u00e1 \u201cvac\u00eda\u201d.</p> <p>Antes de que el bucle comience, el mayor valor visto hasta entonces es <code>None</code>, dado que no se ha visto a\u00fan ning\u00fan valor. Durante la ejecuci\u00f3n del bucle, si <code>mayor</code> es <code>None</code>, entonces tomamos el primer valor que tenemos como el mayor hasta entonces. Se puede ver en la primera iteraci\u00f3n, cuando el valor de <code>valor</code> es 3, mientras que <code>mayor</code> es <code>None</code>, inmediatamente hacemos que <code>mayor</code> pase a ser 3.</p> <p>Tras la primera iteraci\u00f3n, <code>mayor</code> ya no es <code>None</code>, as\u00ed que la segunda parte de la expresi\u00f3n l\u00f3gica compuesta que comprueba si <code>valor &gt; mayor</code> se activar\u00e1 s\u00f3lo cuando encontremos un valor que sea mayor que el \u201cmayor hasta ese momento\u201d. Cuando encontramos un nuevo valor \u201cmayor a\u00fan\u201d, tomamos ese nuevo valor para <code>mayor</code>. Se puede ver en la salida del programa que <code>mayor</code> pasa desde 3 a 41 y luego a 74.</p> <p>Al final del bucle, se habr\u00e1n revisado todos los valores y la variable <code>mayor</code> contendr\u00e1 entonces el mayor valor de la lista.</p> <p>Para calcular el n\u00famero m\u00e1s peque\u00f1o, el c\u00f3digo es muy similar con un peque\u00f1o cambio:</p> <pre><code>print('Antes:', menor)\nfor valor in [3, 41, 12, 9, 74, 15]:\nif menor is None or valor &lt; menor:\nmenor = valor\nprint('Bucle:', valor, menor)\nprint('Menor:', menor)\n</code></pre> <p>De nuevo, <code>menor</code> es el \u201cmenor hasta ese momento\u201d antes, durante y despu\u00e9s de que el bucle se ejecute. Cuando el bucle se ha completado, <code>menor</code> contendr\u00e1 el valor m\u00ednimo de la lista</p> <p>Tambi\u00e9n como en el caso del n\u00famero de elementos y de la suma, las funciones internas <code>max()</code> y <code>min()</code> convierten la escritura de este tipo de bucles en innecesaria.</p> <p>Lo siguiente es una versi\u00f3n simple de la funci\u00f3n interna de Python <code>min()</code>:</p> <pre><code>def min(valores):\nmenor = None\nfor valor in valores:\nif menor is None or valor &lt; menor:\nmenor = valor\nreturn menor\n</code></pre> <p>En esta versi\u00f3n de la funci\u00f3n para calcular el m\u00ednimo, hemos eliminado las sentencias <code>print</code>, de modo que sea equivalente a la funci\u00f3n <code>min</code>, que ya est\u00e1 incorporada dentro de Python.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#depuracion","title":"Depuraci\u00f3n","text":"<p>A medida que vayas escribiendo programas m\u00e1s grandes, puede que notes que vas necesitando emplear cada vez m\u00e1s tiempo en depurarlos. M\u00e1s c\u00f3digo significa m\u00e1s oportunidades de cometer un error y m\u00e1s lugares donde los bugs pueden esconderse.</p> <p>Un m\u00e9todo para acortar el tiempo de depuraci\u00f3n es \u201cdepurar por bisecci\u00f3n\u201d. Por ejemplo, si hay 100 l\u00edneas en tu programa y las compruebas de una en una, te llevar\u00e1 100 pasos.</p> <p>En lugar de eso, intenta partir el problema por la mitad. Busca en medio del programa, o cerca de ah\u00ed, un valor intermedio que puedas comprobar. A\u00f1ade una sentencia <code>print</code> (o alguna otra cosa que tenga un efecto verificable), y haz funcionar el programa.</p> <p>Si en el punto medio la verificaci\u00f3n es incorrecta, el problema deber\u00eda estar en la primera mitad del programa. Si \u00e9sta es correcta, el problema estar\u00e1 en la segunda mitad.</p> <p>Cada vez que realices una comprobaci\u00f3n como esta, reduces a la mitad el n\u00famero de l\u00edneas en las que buscar. Despu\u00e9s de seis pasos (que son muchos menos de 100), lo habr\u00e1s reducido a una o dos l\u00edneas de c\u00f3digo, al menos en teor\u00eda.</p> <p>En la pr\u00e1ctica no siempre est\u00e1 claro qu\u00e9 es \u201cen medio del programa\u201d, y no siempre es posible colocar ah\u00ed una verificaci\u00f3n. No tiene sentido contar las l\u00edneas y encontrar el punto medio exacto. En lugar de eso, piensa en lugares del programa en los cuales pueda haber errores y en lugares donde resulte f\u00e1cil colocar una comprobaci\u00f3n. Luego elige un sitio donde estimes que las oportunidades de que el bug est\u00e9 por delante y las de que est\u00e9 por detr\u00e1s de esa comprobaci\u00f3n son m\u00e1s o menos las mismas.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#actividades","title":"Actividades","text":"<p>Actividad 1: Escribe un programa que lea repetidamente n\u00fameros hasta que el usuario introduzca \u201cfin\u201d. Una vez se haya introducido \u201cfin\u201d, muestra por pantalla el total, la cantidad de n\u00fameros y la media de esos n\u00fameros. Si el usuario introduce cualquier otra cosa que no sea un n\u00famero, (mas adelante veremos como detectar los fallos usando <code>try</code> y <code>except</code>)</p> <pre><code>Introduzca un n\u00famero: 4\nIntroduzca un n\u00famero: 5\nIntroduzca un n\u00famero: dato err\u00f3neo\nEntrada inv\u00e1lida\nIntroduzca un n\u00famero: 7\nIntroduzca un n\u00famero: fin\n16 3 5.33333333333\n</code></pre> <p>Actividad 2: Escribe otro programa que pida una lista de n\u00fameros como la anterior y al final muestre por pantalla el m\u00e1ximo y m\u00ednimo de los n\u00fameros, en vez de la media.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.2.-Iterativas/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Aprende con Alf</li> <li>Python para todos</li> </ul>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/","title":"UD 2 - 2.3 Captura de excepciones","text":"","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#captura-de-excepciones","title":"Captura de excepciones","text":"","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#uso-de-try-y-except","title":"Uso de try y except","text":"<p>Hemos vistos varios casos de c\u00f3digo en donde us\u00e1bamos las funciones <code>input</code> e <code>int</code> para leer y analizar un n\u00famero entero introducido por el usuario. Tambi\u00e9n vimos lo poco seguro que pod\u00eda llegar a resultar hacer algo as\u00ed:</p> <pre><code>&gt;&gt;&gt; velocidad = input(prompt)\n\u00bfCual.... es la velocidad de vuelo de una golondrina sin carga?\n\u00bfTe refieres a una golondrina africana o a una europea?\n&gt;&gt;&gt; int(velocidad)\nValueError: invalid literal for int() with base 10:\n&gt;&gt;&gt;\n</code></pre> <p>Cuando estamos trabajando con el int\u00e9rprete de Python, tras el error simplemente nos aparece de nuevo el prompt, as\u00ed que pensamos \u201c\u00a1epa, me he equivocado!\u201d, y continuamos con la siguiente sentencia.</p> <p>Sin embargo, si se escribe ese c\u00f3digo en un script de Python y se produce el error, el script se detendr\u00e1 inmediatamente, y mostrar\u00e1 un \u201ctraceback\u201d. No ejecutar\u00e1 la siguiente sentencia.</p> <p>He aqu\u00ed un programa de ejemplo para convertir una temperatura desde grados Fahrenheit a grados Celsius:</p> <pre><code>ent = input('Introduzca la Temperatura Fahrenheit:')\nfahr = float(ent)\ncel = (fahr - 32.0) * 5.0 / 9.0\nprint(cel)\n# C\u00f3digo: https://es.py4e.com/code3/fahren.py\n</code></pre> <p>Si ejecutamos este c\u00f3digo y le damos una entrada no v\u00e1lida, simplemente fallar\u00e1 con un mensaje de error bastante antip\u00e1tico:</p> <pre><code>python fahren.py\nIntroduzca la Temperatura Fahrenheit:72\n22.2222222222\n</code></pre> <pre><code>python fahren.py\nIntroduzca la Temperatura Fahrenheit:fred\nTraceback (most recent call last):\nFile \"fahren.py\", line 2, in &lt;module&gt;\nfahr = float(ent)\nValueError: invalid literal for float(): fred\n</code></pre> <p>Existen estructuras de ejecuci\u00f3n condicional dentro de Python para manejar este tipo de errores esperados e inesperados, llamadas <code>try / except</code>. La idea de <code>try</code> y <code>except</code> es que si se sabe que cierta secuencia de instrucciones puede generar un problema, sea posible a\u00f1adir ciertas sentencias para que sean ejecutadas en caso de error. Estas sentencias extras (el bloque except) ser\u00e1n ignoradas si no se produce ning\u00fan error.</p> <p>Puedes pensar en la caracter\u00edstica <code>try</code> y <code>except</code> de Python como una \u201cp\u00f3liza de seguros\u201d en una secuencia de sentencias.</p> <p>Se puede reescribir nuestro conversor de temperaturas de esta forma:</p> <pre><code>ent = input('Introduzca la Temperatura Fahrenheit:')\ntry:\nfahr = float(ent)\ncel = (fahr - 3Python2.0) * 5.0 / 9.0\nprint(cel)\nexcept:\nprint('Por favor, introduzca un n\u00famero')\n# C\u00f3digo: https://es.py4e.com/code3/fahren2.py\n</code></pre> <p>Python comienza ejecutando la secuencia de sentencias del bloque <code>try</code>. Si todo va bien, se saltar\u00e1 todo el bloque <code>except</code> y terminar\u00e1. Si ocurre una excepci\u00f3n dentro del bloque <code>try</code>, Python saltar\u00e1 fuera de ese bloque y ejecutar\u00e1 la secuencia de sentencias del bloque <code>except</code>.</p> <pre><code>python fahren2.py\nIntroduzca la Temperatura Fahrenheit:72\n22.2222222222\n</code></pre> <pre><code>python fahren2.py\nIntroduzca la Temperatura Fahrenheit:fred\nPor favor, introduzca un n\u00famero\n</code></pre> <p>Gestionar una excepci\u00f3n con una sentencia <code>try</code> recibe el nombre de capturar una excepci\u00f3n. En este ejemplo, la cl\u00e1usula <code>except</code> muestra un mensaje de error. En general, capturar una excepci\u00f3n te da la oportunidad de corregir el problema, volverlo a intentar o, al menos, terminar el programa con elegancia.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#capturar-excepciones-concretas","title":"Capturar excepciones concretas","text":"<p>Es posible escribir programas que capturen y manejen determnadas excepciones.\u00a0Durante el siguiente ejemplo, se le pide al usuario que ingrese un numero hasta que se haya ingresado un n\u00famero entero v\u00e1lido, aunque el usuario podra interrumpir el programa (puede variar las formas entres sistemas operativos);\u00a0En linux/windows se utiliza Control-C y esta interrupci\u00f3n generara la\u00a0excepci\u00f3n.<code>KeyboardInterrupt</code></p> <pre><code>&gt;&gt;&gt;x = None\n...while x == None:\n...     try:\n...         x = int(input(\"Please enter a number: \"))\n...     except ValueError:\n...         print(\"Oops!  That was no valid number.  Try again...\")\n</code></pre>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#lanzar-excepciones","title":"Lanzar excepciones","text":"<p>La declaraci\u00f3n <code>raise</code> permite al programador forzar que ocurra una excepci\u00f3n espec\u00edfica.</p> <p>Por ejemplo:</p> <p><pre><code>&gt;&gt;&gt; raise NameError('HiThere')\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: HiThere\n</code></pre> El \u00fanico argumento para<code>raise</code> indica la excepci\u00f3n que se va a generar. Debe ser una instancia de excepci\u00f3n o una clase de excepci\u00f3n (una clase que se deriva de <code>Exception</code>. Si se pasa una clase de excepci\u00f3n, se instanciar\u00e1 impl\u00edcitamente llamando a su constructor sin argumentos:</p> <p><pre><code>raise ValueError  # shorthand for 'raise ValueError()'\n</code></pre> Si quieres saber si se gener\u00f3 una excepci\u00f3n pero no tienes la intenci\u00f3n de manejarla, la siguiente forma de usar la declaraci\u00f3n <code>raise</code>, te permitir\u00e1 volver a generarla:</p> <pre><code>&gt;&gt;&gt; try:\n...     raise NameError('HiThere')\n... except NameError:\n...     print('An exception flew by!')\n...     raise\n...\nAn exception flew by!\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nNameError: HiThere\n</code></pre>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#actividades","title":"Actividades","text":"<p>Actividad 1: Reescribe el programa conversor de temperaturas para que lea repetidamente la temperatura hasta que sea correcta, debe detectar los fallos usando <code>try</code> y <code>except</code>.</p> <p>Actividad 2: Escribe un programa que lea repetidamente la temperadebe detectar los fallos usando <code>try</code> y <code>except</code>.</p>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.3.-Excepciones/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Aprende con Alf</li> <li>Python para todos</li> <li>Documentaci\u00f3n Python.org</li> </ul>","tags":["Software"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/","title":"UD 2 - 2.4 Depurar un programa","text":"","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#depurar-debug-un-programa","title":"Depurar (Debug) un programa","text":"","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#que-es-hacer-debug-o-depurar","title":"\u00bfQu\u00e9 es hacer debug o depurar?","text":"<p>En ocasiones, cuando realizamos un programa, el resultado obtenido no es el esperado, es decir, hemos cometido alg\u00fan error de c\u00e1lculo, el cual hace que el programa funcione pero no lo haga correctamente. En estas ocasiones es muy importante depurar el programa.</p> <p>En la depuraci\u00f3n lo que hacemos es ejecutar el programa paso a paso, as\u00ed podemos ver las instrucciones que se est\u00e1n ejecutando, adem\u00e1s de poder ver los valores que van tomando las variables. Esto nos sirve de ayuda para ver las variables, los valores que van tomando, las instrucciones que se est\u00e1n ejecutando y as\u00ed poder ver d\u00f3nde hemos cometido un error.</p> <p>Para depurar, podemos usar las herramientas que viene en los entornos de desarrollo integrados/editores, como Visual Code, o usar herramientas que vienen con el interprete de Python, como Pdb</p> <p>A continuaci\u00f3n veremos un ejemplo del uso de Visual Code </p>","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#ejemplo-de-uso-de-visual-code","title":"Ejemplo de uso de Visual Code","text":"<p>En Visual Code, el editor de texto que vamos a utilizar, para poder depurar un programa en Python se necesita instalar el plugin correspondiente.</p> <p>Una vez instalado este plugin, vamos a la opci\u00f3n Debug, que se encuentra en la columna izquierda de Visual Code, as\u00ed podemos empezar a depurar nuestro programa.</p> <p>Si el programa a depurar es muy grande, tal vez no nos interese realizar la traza desde el principio, por lo que podemos indicar en qu\u00e9 instrucci\u00f3n empezar la depuraci\u00f3n. De esta forma creamos un breakpoint o un punto de ruptura, con el que conseguimos que cuando la ejecuci\u00f3n llegue a esa instrucci\u00f3n, se pare y empiece a hacer la depuraci\u00f3n.</p> <p>Un breakpoint (o punto de ruptura o punto de parada) es el mecanismo que nos va a permitir detener el flujo de ejecuci\u00f3n de un programa en una instrucci\u00f3n en concreto.</p> <p>En este ejemplo vamos a depurar este programa:</p> <pre><code>    #!usr/bin/env python3\n#Crea una funci\u00f3n \u201cCalcularMaxMin\u201d que recibe una lista con valores num\u00e9ricos y\n#devuelve el valor m\u00e1ximo y el m\u00ednimo. Crea un programa que complete una lista de numeros\n#aleatorios (entre 1 y 100) y muestre el m\u00e1ximo y el m\u00ednimo, utilizando la funci\u00f3n anterior.\n#Por \u00faltimo, pide un n\u00famero (entre 1 y 100) y el programa debe decir si est\u00e1 en la lista anterior.\nimport random\ndef CalcularMaxMin(lista):\nreturn (max(lista),min(lista))\nnumeros = []\n#Inicializo la lista con valores aleatorios\nfor i in range(0..10):\nnumeros.append(random.randint(1,1000))\nvmax,vmin = CalcularMaxMin (numeros)\nprint(\u201cEl valor m\u00e1ximo es \u201c,vmax)\nprint(\u201cEl valor m\u00ednimo es \u201c,vmin)\nnumero = int(input(\u201cDime un n\u00famero del 1 al 100:\u201d))\nwhile numero &gt; 0 or numero &lt; 100:\nprint(\u201cEl n\u00famero debe estar entre 1 y 100\u201d)\nnumero = int(input(\u201cDime un n\u00famero del 1 al 100:\u201d))\nif numero in numero:\nprint(\u201cEl n\u00famero est\u00e1 en la lista\u201d)\nelsa:\nprint(\u201cEl n\u00famero no est\u00e1 en la lista\u201d)      \n</code></pre> <p>Nota: El programa no es correcto. Corrige los errores antes de hacerlo funcionar. Una vez funcione, tendr\u00e1s que depurarlo para que funcione de acuerdo a lo que se pide.</p> <p>Marcamos un breakpoint en la l\u00ednea n\u00famero 11 y pulsamos el bot\u00f3n Start debugging para comenzar la depuraci\u00f3n.</p> <p> </p> <p>Podemos ver que el programa resalta en color la pr\u00f3xima instrucci\u00f3n que se va a ejecutar. Al mismo tiempo observamos que en la parte superior izquierda nos muestra los valores de las variables con las que estamos trabajando. (En el apartado Variables: locals y globals)</p> <p></p> <p>A continuaci\u00f3n ejecutamos la siguiente instrucci\u00f3n, pulsando la opci\u00f3n Step Into o la tecla F11, observamos que se ha creado la variable <code>numeros</code> se ha creado y es una lista vac\u00eda.</p> <p>Step into: Ejecuta una sentencia y en el caso de ser la llamada a una funci\u00f3n, entra dentro de esta para depurarla paso a paso. </p> <p> Seguimos ejecutando la depuraci\u00f3n con la tecla F11 y vemos que el programa entra en un bucle y se van a\u00f1adiendo n\u00fameros aleatorios a la lista. En el apartado de Variables vemos que la variable <code>numeros</code> va cambiando, y tambi\u00e9n su longitud, lo que podemos tambi\u00e9n en el apartado Watch, si a\u00f1adimos una expresi\u00f3n, por ejemplo: <code>len(numeros)</code> o solo <code>numeros</code></p> <p></p> <p>Como podemos comprobar es una forma muy sencilla de ver qu\u00e9 instrucciones se est\u00e1n ejecutando, adem\u00e1s de poder ver en cualquier momento los valores de las variables.</p> <p>En cualquier momento podemos ir a la consola de depuraci\u00f3n, seleccionando en Debug Console. Esta consola se abre en la parte inferior de la pantalla, y en la que podemos ejecutar instrucciones Python en el entorno de nuestro programa, es decir, con el valor de las variables y tal como en ese momento est\u00e1 ejecutado. </p> <p></p> <p>Por ejemplo podemos lanzar las ejecuciones de las sentencias <code>len(numeros)</code> o solo <code>numeros</code>.</p> <p>Si en la consola de depuraci\u00f3n escribimos la variable numeros, nos muestra el valor actual de la misma.</p> <p>Tambi\u00e9n podemos hacer instrucciones m\u00e1s complicada, por ejemplo, podemos comprobar si el n\u00famero 1 est\u00e1 en la variable <code>numeros</code>, escribiendo <code>1 in numeros</code>.</p> <p>Si continuamos ejecutando el programa, la instrucci\u00f3n for va a tener diez iteraciones, y cuando termine pasamos a la ejecuci\u00f3n de una funci\u00f3n en la l\u00ednea 8.</p> <p>Si estamos seguros que dicha funci\u00f3n se ejecuta sin problemas y no necesitemos depurarla, podemos pulsar la opci\u00f3n Step Over o pulsar la tecla F10, y en ese caso se ejecuta la funci\u00f3n pero sin entrar dentro de esta para depurar paso a paso.</p> <p>Step over: Ejecuta una sentencia y en el caso de ser la llamada a una funci\u00f3n, no entra dentro de esta para depurarla.</p> <p>Si realmente queremos ver c\u00f3mo se ejecuta esa funci\u00f3n, pulsamos F11 y la ejecuci\u00f3n ir\u00eda la funci\u00f3n, calcular\u00eda el m\u00e1ximo y el m\u00ednimo de la lista y nos devolver\u00eda esos valores.</p> <p>Por \u00faltimo, en el apartado Calla Stack podremos ver la pila de llamadas que se ha hecho en nuestro programa, pudiendo hacer un seguimiento de qu\u00e9 funci\u00f3n ha llamado a qu\u00e9 otra funci\u00f3n.</p> <p>Esta pr\u00e1ctica es muy recomendable para todo el que est\u00e9 comenzando a programar, para localizar los posibles errores de programaci\u00f3n que se hayan cometido, y adem\u00e1s para aprender c\u00f3mo se ejecutan las instrucciones dentro de nuestro programa.</p>","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.4.-Depurar/#fuente","title":"Fuente","text":"<ul> <li>Como depurar, Open Webinars</li> <li>Depurar con Pdb</li> </ul>","tags":["Software","Depurar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/","title":"UD 2 - 2.5 Documentar el c\u00f3digo","text":"","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#documentar-el-codigo-en-python","title":"Documentar el c\u00f3digo en Python","text":"<p>Intentaremos explicar como documentar el c\u00f3digo de Python. Ya sea un script peque\u00f1o o un proyecto grande, ya sea un principiante o un Pythonista experimentado.</p> <p>La unidad se divide en cuatro secciones principales:</p> <ol> <li>Por qu\u00e9 es tan importante documentar su c\u00f3digo: una introducci\u00f3n a la documentaci\u00f3n y su importancia</li> <li>Comentar vs. Documentar c\u00f3digo: una descripci\u00f3n general de las principales diferencias entre comentar y documentar, as\u00ed como los momentos y formas apropiados para usar los comentarios.</li> <li>Documentaci\u00f3n de la base de c\u00f3digo de Python mediante Docstrings: una inmersi\u00f3n profunda en docstrings para clases, m\u00e9todos de clase, funciones, m\u00f3dulos, paquetes y scripts, as\u00ed como lo que se debe encontrar dentro de cada uno</li> <li>Documentaci\u00f3n de sus proyectos de Python: los elementos necesarios y lo que deben contener para sus proyectos de Python</li> </ol>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#por-que-es-tan-importante-documentar-su-codigo","title":"Por qu\u00e9 es tan importante documentar su c\u00f3digo","text":"<p>Es posible que ya te hayas dado cuenta de la importancia de documentar el c\u00f3digo. Pero si no, ten en cuenta esto que dijo Guido en una PyCon, creador del Python:</p> <p>\u201cCode is more often read than written.\u201d</p> <p>\u2014Guido van Rossum</p> <p>Cuando escribes c\u00f3digo, lo haces dirigido principalmente a dos audiencias: los usuarios y los desarrolladores (incluido tu mismo). Ambos p\u00fablicos son igualmente importantes. Con el tiempo, abrir\u00e1s el c\u00f3digo fuente que creaste en el pasado, y te te preguntar\u00e1s: \"\u00bfQue ... estaba intentando hacer aqu\u00ed?\" Si tiene problemas para tu propio c\u00f3digo, imag\u00ednate lo que pueden experimentar los usuarios u otros desarrolladores cuando intenten usar o contribuir a tu c\u00f3digo.</p> <p>Por otra parte, con el tiempo te encontrar\u00e1s en la siguiente situaci\u00f3n, quieres hacer algo en Python y encuentras lo que parece ser una gran biblioteca que puede hacer el trabajo. Sin embargo, cuando comienzas a usar la biblioteca, buscas ejemplos, art\u00edculos o incluso documentaci\u00f3n oficial sobre c\u00f3mo hacer algo espec\u00edfico y te resulta dif\u00edcil o imposible encontrarlo.</p> <p>Despu\u00e9s de buscar, te das cuenta de que falta algo de documentaci\u00f3n o, lo que es peor, no hay nada de documentaci\u00f3n. Esta situaci\u00f3n, posiblemente te lleve a no usar la biblioteca, sin importar el trabajo que te pod\u00eda haber quitado. Daniele Procida resumi\u00f3 mejor esta situaci\u00f3n:</p> <p>\u201cIt doesn\u2019t matter how good your software is, because **if the documentation is not good enough, people will not use it ** \u201c</p> <p>\u2014Daniel Procida</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#comentar-vs-documentar-codigo","title":"Comentar vs Documentar C\u00f3digo","text":"<p>Antes de que podamos analizar c\u00f3mo documentar su c\u00f3digo Python, debemos distinguir la documentaci\u00f3n de los comentarios.</p> <p>En general, comentar c\u00f3digo es describirlo para los desarrolladores. La audiencia principal del c\u00f3digo fuente ser\u00e1n los desarrolladores que mantendr\u00e1n o usar\u00e1n ese c\u00f3digo. Junto con un c\u00f3digo bien escrito, los comentarios ayudar\u00e1n a comprender mejor el c\u00f3digo y su prop\u00f3sito y dise\u00f1o:</p> <p>\u201cCode tells you how; Comments tell you why.\u201d</p> <p>\u2014 Jeff Atwood (tambi\u00e9n conocido como Coding Horror)</p> <p>Por otra parte, documentar c\u00f3digo es describir su uso y funcionalidad a los usuarios que har\u00e1n uso de este. Si bien puede ser \u00fatil en el proceso de desarrollo, la principal audiencia prevista son los usuarios. Seguidamente veremos c\u00f3mo y cu\u00e1ndo comentar su c\u00f3digo.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#conceptos-basicos-durante-los-comentarios-en-el-codigo","title":"Conceptos b\u00e1sicos durante los comentarios en el c\u00f3digo","text":"<p>En python, los comentarios se crean haciendo uso del car\u00e1cter <code>#</code> al comienzo de la linea. Deben ser declaraciones breves de no m\u00e1s de unas pocas frases. Aqu\u00ed hay un ejemplo simple:</p> <pre><code>def hello_world():\n# A simple comment preceding a simple print statement\nprint(\"Hello World\")\n</code></pre> <p>Seg\u00fan PEP 8 , los comentarios deben tener una longitud m\u00e1xima de 72 caracteres. Esto es cierto aunque tus lineas de c\u00f3digo sean mayores que los 80 caracteres recomendados. Si un comentario va a ser mayor que el l\u00edmite remendado, es apropiado usar varias l\u00edneas para el comentario:</p> <pre><code>def hello_long_world():\n# A very long statement that just goes on and on and on and on and\n# never ends until after it's reached the 80 char limit\nprint(\"Hellooooooooooooooooooooooooooooooooooooooooooooooooooooooo World\")\n</code></pre> <p>Los comentarios pueden tener m\u00faltiples prop\u00f3sitos, que incluyen :</p> <ul> <li>Planificaci\u00f3n y revisi\u00f3n: cuando est\u00e9 desarrollando nuevas partes de tu c\u00f3digo, puede ser apropiado usar primero los comentarios como una forma de planificar o delinear esa secci\u00f3n de c\u00f3digo. Recuerde eliminar estos comentarios una vez que se haya implementado y revisado/probado la funcionalidad real:</li> </ul> <p><pre><code># First step\n# Second step\n# Third step\n</code></pre> * Descripci\u00f3n del c\u00f3digo: los comentarios se pueden usar para explicar la intenci\u00f3n de secciones espec\u00edficas del c\u00f3digo:</p> <p><pre><code># Attempt a connection based on previous settings. If unsuccessful,\n# prompt user for new settings.\n</code></pre> * Descripci\u00f3n algor\u00edtmica: cuando se usan algoritmos, especialmente los complicados, puede ser \u00fatil explicar c\u00f3mo funciona el algoritmo o c\u00f3mo se implementa dentro de su c\u00f3digo. Tambi\u00e9n puede ser apropiado describir por qu\u00e9 se seleccion\u00f3 un algoritmo espec\u00edfico sobre otro.</p> <p><pre><code># Using quick sort for performance gains\n</code></pre> * Etiquetado: para etiquetar secciones espec\u00edficas de c\u00f3digo donde se encuentran problemas conocidos o \u00e1reas de mejora. Algunos ejemplos son: <code>BUG</code>, <code>FIXME</code>y <code>TODO</code>.</p> <pre><code># TODO: Add condition for when val is None\n</code></pre> <p>Los comentarios a su c\u00f3digo deben ser breves y clarificadores. Evite el uso de comentarios largos cuando sea posible. Adem\u00e1s, debe utilizar las siguientes cuatro reglas esenciales sugeridas por Jeff Atwood :</p> <ol> <li>Mantenga los comentarios lo m\u00e1s cerca posible del c\u00f3digo que se describe. Los comentarios que no est\u00e1n cerca del c\u00f3digo al que se refieren, son frustrantes para el lector y se pasan por alto f\u00e1cilmente cuando se realizan actualizaciones.</li> <li>No utilice formatos complejos (como tablas o cifras ASCII). ya que pueden distraer y pueden ser dif\u00edciles de mantener con el tiempo.</li> <li>No incluyas informaci\u00f3n redundante. Suponga que el lector del c\u00f3digo tiene una comprensi\u00f3n b\u00e1sica de los principios de programaci\u00f3n y la sintaxis del lenguaje.</li> <li>Dise\u00f1a el c\u00f3digo para que se comente a s\u00ed mismo. La forma m\u00e1s f\u00e1cil de entender el c\u00f3digo es ley\u00e9ndolo. Cuando dise\u00f1as el c\u00f3digo utilizando conceptos claros (variables y metodos con nombres clarificadores) y f\u00e1ciles de entender, el lector entender\u00e1 la intenci\u00f3n del c\u00f3digo que est\u00e1 leyendo, sin necesidad de comentarios.</li> </ol> <p>Recuerda que los comentarios est\u00e1n dise\u00f1ados para el lector, incluido tu mismo, para ayudarlo a comprender el prop\u00f3sito y el dise\u00f1o del software.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#comentarios-a-traves-de-las-sugerencias-de-tipo-python-35","title":"Comentarios a trav\u00e9s de las sugerencias de tipo (Python 3.5+)","text":"<p>La sugerencia de tipo se agreg\u00f3 a Python 3.5 y es una forma adicional para ayudar a los lectores. Aplica la cuarta sugerencia de Jeff, ya que permite al desarrollador dise\u00f1ar y explicar partes del c\u00f3digo sin comentar. He aqu\u00ed un ejemplo r\u00e1pido:</p> <pre><code>def hello_name(name: str) -&gt; str:\nreturn(f\"Hello {name}\")\n</code></pre> <p>Al examinar la sugerencia de tipo, inmediatamente entiendes que la funci\u00f3n espera que la entrada <code>name</code>sea de tipo <code>str</code>. Tambi\u00e9n entienes que la salida esperada de la funci\u00f3n ser\u00e1 de tipo <code>str</code>. Si bien las sugerencias de tipo ayudan a reducir los comentarios, tenga en cuenta que hacerlo tambi\u00e9n puede generar trabajo adicional al crear o actualizar la documentaci\u00f3n de su proyecto.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#documentar-su-base-de-codigo-de-python-usando-docstrings","title":"Documentar su base de c\u00f3digo de Python usando Docstrings","text":"<p>Ahora que hemos aprendido a comentar, profundicemos en la documentaci\u00f3n del c\u00f3digo de Python. Veremos como usar las cadenas de documentaci\u00f3n <code>docstring</code> y c\u00f3mo usarlas para la documentaci\u00f3n:</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#cadenas-de-documentacion-docstring","title":"Cadenas de documentaci\u00f3n <code>docstring</code>","text":"<p>La documentaci\u00f3n de c\u00f3digo Python se centra en cadenas de documentaci\u00f3n. La propiedad <code>docstring</code> viene predefinida en los objetos y , cuando se configuran correctamente, pueden ayudar a los usuarios de este c\u00f3digo a entender los objetos, y al desarrollador a tener documentado el proyecto. Junto con las cadenas de documentaci\u00f3n, Python tambi\u00e9n tiene la funci\u00f3n <code>help()</code> que imprime la cadena de documentaci\u00f3n de los objetos en la consola. He aqu\u00ed un ejemplo r\u00e1pido:</p> <pre><code>&gt;&gt;&gt; help(str)\nHelp on class str in module builtins:\nclass str(object)\n|  str(object='') -&gt; str\n|  str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\n|\n|  Create a new string object from the given object. If encoding or\n|  errors are specified, then the object must expose a data buffer\n|  that will be decoded using the given encoding and error handler.\n|  Otherwise, returns the result of object.__str__() (if defined)\n|  or repr(object).\n|  encoding defaults to sys.getdefaultencoding().\n|  errors defaults to 'strict'.\n# Truncated for readability\n</code></pre> <p>\u00bfC\u00f3mo se genera esta salida? Como en Python todo es un objeto, puede examinar el directorio del objeto usando el comando <code>dir()</code>, es decir, listar los m\u00e9todos y propiedades del objeto indicado. Hagamos eso y veamos qu\u00e9 encontramos:</p> <pre><code>&gt;&gt;&gt; dir(str)\n['__add__', ..., '__doc__', ..., 'zfill'] # Truncated for readability\n</code></pre> <p>En ese volcado, hay una propiedad interesante, <code>__doc__</code>. Si profundizamos en esta propiedad, veremos lo siguiente:</p> <pre><code>&gt;&gt;&gt; print(str.__doc__)\nstr(object='') -&gt; str\nstr(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or\nerrors are specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.\n</code></pre> <p>Como podemos observar, en la propiedad <code>__doc__</code> se almacena la documentaci\u00f3n del objeto. Esto significa que puedes manipular directamente esa propiedad. Sin embargo, existen restricciones que no nos permiten modificarlo los objetos predeterminados:</p> <pre><code>&gt;&gt;&gt; str.__doc__ = \"I'm a little string doc! Short and stout; here is my input and print me for my out\"\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't set attributes of built-in/extension type 'str'\n</code></pre> <p>Cualquier otro objeto personalizado puede ser manipulado:</p> <pre><code>def say_hello(name):\nprint(f\"Hello {name}, is it me you're looking for?\")\nsay_hello.__doc__ = \"A simple function that says hello... Richie style\"\n</code></pre> <pre><code>&gt;&gt;&gt; help(say_hello)\nHelp on function say_hello in module __main__:\nsay_hello(name)\nA simple function that says hello... Richie style\n</code></pre> <p>Python tiene una caracter\u00edstica m\u00e1s que simplifica la asignaci\u00f3n de contenido a las docstrings. En lugar de manipular directamente la propiedad <code>__doc__</code>, la ubicaci\u00f3n estrat\u00e9gica del literal debajo de la definicion del objeto establecer\u00e1 autom\u00e1ticamente el valor de <code>__doc__</code>. Esto es lo que sucede con el mismo ejemplo que el anterior:</p> <pre><code>def say_hello(name):\n\"\"\"A simple function that says hello... Richie style\"\"\"\nprint(f\"Hello {name}, is it me you're looking for?\")\n</code></pre> <pre><code>&gt;&gt;&gt; help(say_hello)\nHelp on function say_hello in module __main__:\nsay_hello(name)\nA simple function that says hello... Richie style\n</code></pre> <p>Ya que conoces el trasfondo de las docstrings. Ahora es el momento de conocer los diferentes tipos de docstrings y qu\u00e9 informaci\u00f3n deben contener.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#tipos-de-cadenas-de-documentos","title":"Tipos de cadenas de documentos","text":"<p>Las convenciones de docstring se describen en PEP 257. Su prop\u00f3sito es proporcionar a sus usuarios una breve descripci\u00f3n general del objeto. Deben mantenerse lo suficientemente concisos para que sean f\u00e1ciles de mantener, pero a\u00fan as\u00ed ser lo suficientemente elaborados para que los nuevos usuarios entiendan su prop\u00f3sito y c\u00f3mo usar el objeto documentado.</p> <p>En todos los casos, las cadenas de documentaci\u00f3n deben usar el formato de cadena de triples comillas dobles <code>\"\"\"</code>, ya sea con Docstrings que tengan varias l\u00edneas o no. Como m\u00ednimo, una cadena de documentaci\u00f3n debe ser un resumen r\u00e1pido de lo que sea que est\u00e9s describiendo y debe estar contenida en una sola l\u00ednea:</p> <pre><code>\"\"\"This is a quick summary line used as a description of the object.\"\"\"\n</code></pre> <p>Las cadenas de documentos de varias l\u00edneas se utilizan para realizar una descripci\u00f3n mas elaborada del objeto m\u00e1s all\u00e1 de un mero resumen. Todas las Docstrings compuestas por varias l\u00edneas tendr\u00edan que tener las siguientes partes:</p> <ul> <li>Una l\u00ednea de resumen de una l\u00ednea</li> <li>Una l\u00ednea en blanco antes del resumen</li> <li>Cualquier elaboraci\u00f3n adicional para la cadena de documentaci\u00f3n</li> <li>Otra l\u00ednea en blanco</li> </ul> <pre><code>\"\"\"This is the summary line\nThis is the further elaboration of the docstring. Within this section,\nyou can elaborate further on details as appropriate for the situation.\nNotice that the summary and the elaboration is separated by a blank new\nline.\n\"\"\"\n# Notice the blank line above. Code should continue on this line.\n</code></pre> <p>Las Docstrings deben tener la misma longitud que la recomendad para los comentarios (72 caracteres). Adem\u00e1s, se pueden dividir en tres categor\u00edas principales:</p> <ul> <li>Class Docstrings: clase y m\u00e9todos de clase</li> <li>Docstrings de paquetes y m\u00f3dulos: paquetes, m\u00f3dulos y funciones</li> <li>Script Docstrings: Script y funciones</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#docstrings-de-clase","title":"Docstrings de clase","text":"<p>Las Docstrings de clase se crean para la clase en s\u00ed, as\u00ed como para cualquier m\u00e9todo de clase. Se colocan inmediatamente despu\u00e9s de la clase o el m\u00e9todo de clase con una sangr\u00eda de un nivel:</p> <pre><code>class SimpleClass:\n\"\"\"Class docstrings go here.\"\"\"\ndef say_hello(self, name: str):\n\"\"\"Class method docstrings go here.\"\"\"\nprint(f'Hello {name}')\n</code></pre> <p>Las Docstrings de clase deben contener la siguiente informaci\u00f3n:</p> <ul> <li>Un breve resumen de su prop\u00f3sito y comportamiento.</li> <li>Cualquier m\u00e9todo p\u00fablico, junto con una breve descripci\u00f3n.</li> <li>Cualquier propiedad de clase (atributos)</li> <li>Cualquier cosa relacionada con la interfaz para subclases.</li> </ul> <p>Los par\u00e1metros del constructor de clase deben documentarse dentro de la Docstring del m\u00e9todo de clase <code>__init__</code> . Los m\u00e9todos individuales deben documentarse utilizando sus Docstrings individuales, y deben contener lo siguiente:</p> <ul> <li>Una breve descripci\u00f3n de qu\u00e9 es el m\u00e9todo y para qu\u00e9 se utiliza.</li> <li>Todos los argumentos (tanto obligatorios como opcionales) que se pasan.</li> <li>Etiquete cualquier argumento que se considere opcional o que tenga un valor predeterminado</li> <li>Cualquier efecto secundario que ocurra al ejecutar el m\u00e9todo.</li> <li>Cualquier excepci\u00f3n que se plantee</li> <li>Cualquier restricci\u00f3n sobre cu\u00e1ndo se puede llamar al m\u00e9todo</li> </ul> <p>Tomemos un ejemplo simple de una clase de datos que representa un Animal. Esta clase contendr\u00e1 algunas propiedades de clase, propiedades de instancia, un m\u00e9todo <code>__init__</code>, y un m\u00e9todo de instancia:</p> <pre><code>class Animal:\n\"\"\"\n    A class used to represent an Animal\n    ...\n    Attributes\n    ----------\n    says_str : str\n        a formatted string to print out what the animal says\n    name : str\n        the name of the animal\n    sound : str\n        the sound that the animal makes\n    num_legs : int\n        the number of legs the animal has (default 4)\n    Methods\n    -------\n    says(sound=None)\n        Prints the animals name and what sound it makes\n    \"\"\"\nsays_str = \"A {name} says {sound}\"\ndef __init__(self, name, sound, num_legs=4):\n\"\"\"\n        Parameters\n        ----------\n        name : str\n            The name of the animal\n        sound : str\n            The sound the animal makes\n        num_legs : int, optional\n            The number of legs the animal (default is 4)\n        \"\"\"\nself.name = name\nself.sound = sound\nself.num_legs = num_legs\ndef says(self, sound=None):\n\"\"\"\n        Prints what the animals name is and what sound it makes.\n        If the argument `sound` isn't passed in, the default Animal\n        sound is used.\n        Parameters\n        ----------\n        sound : str, optional\n            The sound the animal makes (default is None)\n        Raises\n        ------\n        NotImplementedError\n            If no sound is set for the animal or passed in as a\n            parameter.\n        \"\"\"\nif self.sound is None and sound is None:\nraise NotImplementedError(\"Silent Animals are not supported!\")\nout_sound = self.sound if sound is None else sound\nprint(self.says_str.format(name=self.name, sound=out_sound))\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#docstrings-de-paquetes-y-modulos","title":"Docstrings de paquetes y m\u00f3dulos","text":"<p>Las docstring del paquete deben colocarse en la parte superior del archivo <code>__init__.py</code> del paquete. Esta cadena de documentaci\u00f3n debe enumerar los m\u00f3dulos y subpaquetes que exporta el paquete.</p> <p>Las docstring del m\u00f3dulo son similares a las Docstrings de la clase, salvo que en lugar de que se documenten las clases y los m\u00e9todos de clase, ahora es el m\u00f3dulo y las funciones que se encuentran dentro. Las Docstrings del m\u00f3dulo se colocan en la parte superior del archivo incluso antes de cualquier importaci\u00f3n, y deben incluir lo siguiente:</p> <ul> <li>Una breve descripci\u00f3n del m\u00f3dulo y su prop\u00f3sito.</li> <li>Una lista de cualquier clase, excepci\u00f3n, funci\u00f3n y cualquier otro objeto exportado por el m\u00f3dulo</li> </ul> <p>La docstring para una funci\u00f3n de m\u00f3dulo debe incluir los mismos elementos que un m\u00e9todo de clase:</p> <ul> <li>Una breve descripci\u00f3n de qu\u00e9 es la funci\u00f3n y para qu\u00e9 se utiliza.</li> <li>Todos los argumentos (tanto obligatorios como opcionales) que se pasan.</li> <li>Etiquete cualquier argumento que se considere opcional</li> <li>Cualquier efecto secundario que ocurra al ejecutar la funci\u00f3n</li> <li>Cualquier excepci\u00f3n que se plantee</li> <li>Cualquier restricci\u00f3n sobre cu\u00e1ndo se puede llamar a la funci\u00f3n</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#docstrings-de-scripts","title":"Docstrings de scripts","text":"<p>Los scripts se consideran ejecutables de un solo archivo que se ejecutan desde la consola. Las docstrings para los scripts se colocan en la parte superior del archivo y deben documentarse lo suficientemente bien como para que los usuarios puedan tener una comprensi\u00f3n suficiente de c\u00f3mo usar el script. Deber\u00eda poder usarse para obtener un mensaje de como \"usar el script\", cuando el usuario pasa incorrectamente un par\u00e1metro o usa la opci\u00f3n <code>-h</code> al ejecutar el script.</p> <p>Si usa <code>argparse</code>, puede omitir la documentaci\u00f3n espec\u00edfica, suponiendo que se haya documentado correctamente dentro del par\u00e1metro <code>help</code> de la funci\u00f3n <code>argparser.parser.add_argument</code>. Se recomienda usar la propiedad <code>__doc__</code>para el par\u00e1metro <code>description</code> del constructor <code>argparse.ArgumentParser</code>. Consulte este tutorial sobre bibliotecas de an\u00e1lisis de l\u00ednea de comandos para obtener m\u00e1s detalles sobre c\u00f3mo usar <code>argparse</code>y otros analizadores de l\u00ednea de comandos comunes.</p> <p>Finalmente, cualquier importaci\u00f3n personalizada o de terceros debe incluirse en las docstring para permitir a los usuarios saber qu\u00e9 paquetes pueden ser necesarios para ejecutar el script. Aqu\u00ed hay un ejemplo de un script que se usa para imprimir los encabezados de las columnas de una hoja de c\u00e1lculo:</p> <pre><code>\"\"\"Spreadsheet Column Printer\nThis script allows the user to print to the console all columns in the\nspreadsheet. It is assumed that the first row of the spreadsheet is the\nlocation of the columns.\nThis tool accepts comma separated value files (.csv) as well as excel\n(.xls, .xlsx) files.\nThis script requires that `pandas` be installed within the Python\nenvironment you are running this script in.\nThis file can also be imported as a module and contains the following\nfunctions:\n    * get_spreadsheet_cols - returns the column headers of the file\n    * main - the main function of the script\n\"\"\"\nimport argparse\nimport pandas as pd\ndef get_spreadsheet_cols(file_loc, print_cols=False):\n\"\"\"Gets and prints the spreadsheet's header columns\n    Parameters\n    ----------\n    file_loc : str\n        The file location of the spreadsheet\n    print_cols : bool, optional\n        A flag used to print the columns to the console (default is\n        False)\n    Returns\n    -------\n    list\n        a list of strings used that are the header columns\n    \"\"\"\nfile_data = pd.read_excel(file_loc)\ncol_headers = list(file_data.columns.values)\nif print_cols:\nprint(\"\\n\".join(col_headers))\nreturn col_headers\ndef main():\nparser = argparse.ArgumentParser(description=__doc__)\nparser.add_argument(\n'input_file',\ntype=str,\nhelp=\"The spreadsheet file to pring the columns of\"\n)\nargs = parser.parse_args()\nget_spreadsheet_cols(args.input_file, print_cols=True)\nif __name__ == \"__main__\":\nmain()\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#formatos-de-docstrings","title":"Formatos de docstrings","text":"<p>Es posible que haya notado en los ejemplos vistos hasta ahora de docstrings que exist\u00edan elementos comunes: <code>Arguments</code>, <code>Returns</code>y <code>Attributes</code>. Hay formatos espec\u00edficos de docstrings que se pueden usar para ayudar a los analizadores de docstrings y a los usuarios a tener un formato familiar y conocido. El formato utilizado para los docstrings sigue el estilo NumPy/SciPy. Algunos de los formatos m\u00e1s comunes son los siguientes:</p> Tipo de formato Descripci\u00f3n Con el apoyo de Sphynx especificaci\u00f3n formal docstrings de Google Forma de documentaci\u00f3n recomendada por Google S\u00ed No Texto reestructurado Est\u00e1ndar de documentaci\u00f3n oficial de Python; No es amigable para principiantes pero tiene muchas funciones S\u00ed S\u00ed docstrings NumPy/SciPy La combinaci\u00f3n de NumPy de reStructuredText y Google Docstrings S\u00ed S\u00ed epitexto Una adaptaci\u00f3n Python de Epydoc; Ideal para desarrolladores de Java no oficialmente S\u00ed <p>La selecci\u00f3n del formato a seguir en la creaci\u00f3n de las docstrings es decisi\u00f3n personal, pero una vez eligida una, hay que ce\u00f1irse al mismo formato en todo el documento/proyecto. Los siguientes son ejemplos de cada tipo para darle una idea de c\u00f3mo se ve cada formato de documentaci\u00f3n.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#ejemplo-de-docstrings-de-google","title":"Ejemplo de docstrings de Google","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\nArgs:\n    file_loc (str): The file location of the spreadsheet\n    print_cols (bool): A flag used to print the columns to the console\n        (default is False)\nReturns:\n    list: a list of strings representing the header columns\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#ejemplo-de-texto-reestructurado","title":"Ejemplo de texto reestructurado","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\n:param file_loc: The file location of the spreadsheet\n:type file_loc: str\n:param print_cols: A flag used to print the columns to the console\n    (default is False)\n:type print_cols: bool\n:returns: a list of strings representing the header columns\n:rtype: list\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#ejemplo-de-cadenas-de-documentacion-numpyscipy","title":"Ejemplo de cadenas de documentaci\u00f3n NumPy/SciPy","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\nParameters\n----------\nfile_loc : str\n    The file location of the spreadsheet\nprint_cols : bool, optional\n    A flag used to print the columns to the console (default is False)\nReturns\n-------\nlist\n    a list of strings representing the header columns\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#ejemplo-de-epitexto","title":"Ejemplo de epitexto","text":"<pre><code>\"\"\"Gets and prints the spreadsheet's header columns\n@type file_loc: str\n@param file_loc: The file location of the spreadsheet\n@type print_cols: bool\n@param print_cols: A flag used to print the columns to the console\n    (default is False)\n@rtype: list\n@returns: a list of strings representing the header columns\n\"\"\"\n</code></pre>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#documentacion-de-sus-proyectos-de-python","title":"Documentaci\u00f3n de sus proyectos de Python","text":"<p>Los proyectos de Python vienen en todo tipo de formas, tama\u00f1os y prop\u00f3sitos. La forma en que documente su proyecto debe adaptarse a su situaci\u00f3n espec\u00edfica. Ten en cuenta qui\u00e9nes van a ser los usuarios de tu proyecto y ad\u00e1ptate a sus necesidades. Dependiendo del tipo de proyecto, se recomiendan ciertos aspectos de la documentaci\u00f3n. El dise\u00f1o general del proyecto y su documentaci\u00f3n debe ser el siguiente:</p> <pre><code>project_root/\n\u2502\n\u251c\u2500\u2500 project/  # Project source code\n\u251c\u2500\u2500 docs/\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 HOW_TO_CONTRIBUTE\n\u251c\u2500\u2500 CODE_OF_CONDUCT\n\u251c\u2500\u2500 examples.py\n</code></pre> <p>Los proyectos se pueden subdividir generalmente en tres tipos principales: Privado, Compartido y P\u00fablico/C\u00f3digo Abierto.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#proyectos-privados","title":"Proyectos Privados","text":"<p>Los proyectos privados son proyectos destinados solo para uso personal y, por lo general, no se comparten con otros usuarios o desarrolladores. La documentaci\u00f3n puede ser bastante ligera en este tipo de proyectos. La documentaci\u00f3n recomendada para este tipo de proyectos, seg\u00fan sea necesario:</p> <ul> <li>Readme.md: un breve resumen del proyecto y su prop\u00f3sito. Incluya cualquier requisito especial para la instalaci\u00f3n u operaci\u00f3n del proyecto.</li> <li><code>examples.py</code>: un archivo de secuencia de comandos de Python que brinda ejemplos simples de c\u00f3mo usar el proyecto.</li> </ul> <p>Recuerda, aunque los proyectos privados est\u00e1n destinados a ti, tambi\u00e9n eres considerado un usuario. Piense en cualquier cosa que pueda resultarle confusa en el futuro y aseg\u00farese de capturarla en comentarios, docstring o el archivo Readme.md.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#proyectos-compartidos","title":"Proyectos Compartidos","text":"<p>Los proyectos compartidos son proyectos en los que colaboras con otras personas en el desarrollo y/o uso del proyecto. El \"cliente\" o usuario del proyecto sigue siendo usted mismo y otros desarrolladores que utilizan el proyecto.</p> <p>La documentaci\u00f3n debe ser un poco m\u00e1s rigurosa de lo que debe ser para un proyecto privado, principalmente para ayudar a incorporar nuevos miembros al proyecto o alertar a los contribuyentes/usuarios de nuevos cambios en el proyecto. La documentaci\u00f3n recomendada para estos proyectos es la siguiente:</p> <ul> <li>Readme.md: un breve resumen del proyecto y su prop\u00f3sito. Incluya cualquier requisito especial para instalar u operar el proyecto. Adem\u00e1s, agregue cualquier cambio importante desde la versi\u00f3n anterior.</li> <li><code>examples.py</code>: un archivo de secuencia de comandos de Python que brinda ejemplos simples de c\u00f3mo usar los proyectos.</li> <li>C\u00f3mo contribuir: esto debe incluir c\u00f3mo los nuevos contribuyentes al proyecto pueden comenzar a contribuir.</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#proyectos-publicos-y-de-codigo-abierto","title":"Proyectos p\u00fablicos y de c\u00f3digo abierto","text":"<p>Los proyectos p\u00fablicos y de c\u00f3digo abierto son proyectos que est\u00e1n destinados a compartirse con un gran grupo de usuarios y pueden involucrar a grandes equipos de desarrollo. Estos proyectos deben otorgar una prioridad tan alta a la documentaci\u00f3n del proyecto como al desarrollo real del proyecto en s\u00ed. La documentaci\u00f3n recomendada para estos proyectos es las siguiente:</p> <ul> <li>Readme.md: un breve resumen del proyecto y su prop\u00f3sito. Incluya cualquier requisito especial para instalar u operar los proyectos. Adem\u00e1s, agregue cualquier cambio importante desde la versi\u00f3n anterior. Finalmente, agregue enlaces a documentaci\u00f3n adicional, informes de errores y cualquier otra informaci\u00f3n importante para el proyecto. Dan Bader ha elaborado un excelente tutorial sobre todo lo que debe incluirse en su archivo L\u00e9ame.</li> <li>C\u00f3mo contribuir: esto debe incluir c\u00f3mo pueden ayudar los nuevos contribuyentes al proyecto. Esto incluye el desarrollo de nuevas funciones, la soluci\u00f3n de problemas conocidos, la adici\u00f3n de documentaci\u00f3n, la adici\u00f3n de nuevas pruebas o la notificaci\u00f3n de problemas.</li> <li>C\u00f3digo de conducta: define c\u00f3mo deben comportarse los dem\u00e1s colaboradores al desarrollar o utilizar su software. Esto tambi\u00e9n establece lo que suceder\u00e1 si este c\u00f3digo no es correcto. Si est\u00e1 utilizando Github, se puede generar una plantilla de C\u00f3digo de conducta con la redacci\u00f3n recomendada. Especialmente para proyectos de c\u00f3digo abierto, considere agregar esto.</li> <li>Licencia: un archivo de texto sin formato que describe la licencia que utiliza su proyecto. Especialmente para proyectos de c\u00f3digo abierto, considere agregar esto.</li> <li>docs: una carpeta que contiene m\u00e1s documentaci\u00f3n. La siguiente secci\u00f3n describe con m\u00e1s detalle qu\u00e9 debe incluirse y c\u00f3mo organizar el contenido de esta carpeta.</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#las-cuatro-secciones-principales-de-la-carpeta-docs","title":"Las cuatro secciones principales de la carpeta <code>docs</code>","text":"<p>Daniele Procida dio una maravillosa charla sobre PyCon 2017 y una publicaci\u00f3n de blog posterior sobre la documentaci\u00f3n de proyectos de Python. Menciona que todos los proyectos deben tener las siguientes cuatro secciones principales para ayudarlo a enfocar su trabajo:</p> <ul> <li>Tutoriales: Lecciones que llevan al lector de la mano a trav\u00e9s de una serie de pasos para completar un proyecto (o ejercicio significativo). Orientado al aprendizaje del usuario.</li> <li>Gu\u00edas pr\u00e1cticas: gu\u00edas que llevan al lector a trav\u00e9s de los pasos necesarios para resolver un problema com\u00fan (Recetas orientadas a resolver problemas).</li> <li>Referencias: Explicaciones que aclaran e iluminan un tema en particular. Orientado a la comprensi\u00f3n.</li> <li>Explicaciones: descripciones t\u00e9cnicas de la maquinaria y c\u00f3mo operarla (clases clave, funciones, API, etc.). Art\u00edculo de Think Encyclopedia.</li> </ul> <p>La siguiente tabla muestra c\u00f3mo todas estas secciones se relacionan entre s\u00ed, as\u00ed como su prop\u00f3sito general:</p> M\u00e1s \u00fatil cuando estamos estudiando M\u00e1s \u00fatil cuando estamos programando Paso pr\u00e1ctico Tutoriales Gu\u00edas pr\u00e1cticas Conocimientos te\u00f3ricos Explicaci\u00f3n Referencia <p>Al final, deseas asegurarte de que los usuarios tiene acceso a las respuestas a cualquier pregunta que puedan tener. Al organizar el proyecto de esta manera, podr\u00e1s responder esas preguntas f\u00e1cilmente y en un formato que podr\u00e1n navegar r\u00e1pidamente.</p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#herramientas-y-recursos-de-documentacion","title":"Herramientas y recursos de documentaci\u00f3n","text":"<p>Documentar su c\u00f3digo, especialmente proyectos grandes, puede ser desalentador. Afortunadamente, existen algunas herramientas y referencias para comenzar:</p> Herramienta Descripci\u00f3n Esfinge Una colecci\u00f3n de herramientas para autogenerar documentaci\u00f3n en m\u00faltiples formatos Epydoc Una herramienta para generar documentaci\u00f3n de API para m\u00f3dulos de Python basada en sus docstrings Leer los documentos Creaci\u00f3n, control de versiones y alojamiento autom\u00e1ticos de sus documentos. dox\u00edgeno Una herramienta para generar documentaci\u00f3n compatible con Python, as\u00ed como con muchos otros lenguajes. MkDocs Un generador de sitios est\u00e1ticos para ayudar a construir la documentaci\u00f3n del proyecto utilizando el lenguaje Markdown. Consulta Crea tu documentaci\u00f3n de proyecto de Python con MkDocs para obtener m\u00e1s informaci\u00f3n. pycco Un generador de documentaci\u00f3n \"r\u00e1pido y sucio\" que muestra el c\u00f3digo y la documentaci\u00f3n uno al lado del otro. Consulta Tutorial sobre c\u00f3mo usar pycco . pydoc El m\u00f3dulo pydoc genera autom\u00e1ticamente documentaci\u00f3n a partir de m\u00f3dulos de Python. La documentaci\u00f3n puede presentarse como p\u00e1ginas de texto en la consola, enviarse a un navegador web o guardarse en archivos HTML. . <p>Junto con estas herramientas, hay algunos tutoriales, videos y art\u00edculos adicionales que pueden ser \u00fatiles cuando est\u00e9 documentando su proyecto:</p> <ol> <li>Carol Willing - Pr\u00e1ctica Esfinge - PyCon 2018</li> <li>Daniele Procida - Desarrollo basado en documentaci\u00f3n - Lecciones del Proyecto Django - PyCon 2016</li> <li>Eric Holscher - Documentando su proyecto con Sphinx &amp; Read the Docs - PyCon 2016</li> <li>Titus Brown, Luiz Irber - Crear, construir, probar y documentar un proyecto de Python: un C\u00d3MO pr\u00e1ctico - PyCon 2016</li> <li>reStructuredText Documentaci\u00f3n Oficial</li> <li>Manual de texto reestructurado de Sphinx</li> <li>El generador de documentaci\u00f3n y sistema de ayuda en l\u00ednea pydoc</li> </ol> <p>A veces, la mejor forma de aprender es imitando a los dem\u00e1s. Aqu\u00ed hay algunos excelentes ejemplos de proyectos que usan bien la documentaci\u00f3n:</p> <ul> <li>Django: Documentos ( Fuente )</li> <li>Solicitudes: Documentos ( Fuente )</li> <li>Haga clic en: Documentos ( Fuente )</li> <li>Pandas: Documentos ( Fuente )</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#donde-empiezo","title":"\u00bfD\u00f3nde empiezo?","text":"<p>La documentaci\u00f3n de proyectos tiene una progresi\u00f3n sencilla:</p> <ol> <li>Sin documentaci\u00f3n</li> <li>Algo de documentaci\u00f3n</li> <li>Documentaci\u00f3n completa</li> <li>buena documentacion</li> <li>Gran documentaci\u00f3n</li> </ol> <p>Si no sabes por donde empezar con la documentaci\u00f3n, identifica d\u00f3nde se encuentra tu proyecto ahora en relaci\u00f3n con la progresi\u00f3n anterior. \u00bfTienes alguna documentaci\u00f3n? Si no, entonces comience all\u00ed. Si tiene alguna documentaci\u00f3n pero le faltan algunos de los archivos clave del proyecto, comience agreg\u00e1ndolos.</p> <p>Al final, no te desanimes ni te sientas abrumad@ por la cantidad de trabajo que se requiere para documentar el c\u00f3digo. Una vez que comienzas a documentar el c\u00f3digo, ser\u00e1 m\u00e1s f\u00e1cil continuar. </p>","tags":["Software","Documentar"]},{"location":"section1/u02/teoria/PROG-U2.5.-Documentar/#fuente","title":"Fuente","text":"<ul> <li>Documentando c\u00f3digo python</li> </ul>","tags":["Software","Documentar"]},{"location":"section1/u03/","title":"UD 3 - Estructuras de datos","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u03/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u03/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 6. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos.</p>","tags":["Software"]},{"location":"section1/u03/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han escrito programas que utilicen arrays</li> <li>b) Se han reconocido las librer\u00edas de clases relacionadas con tipos de datos avanzados.</li> <li>c) Se han utilizado listas para almacenar y procesar informaci\u00f3n.</li> <li>d) Se han utilizado iteradores para recorrer los elementos de las listas.</li> <li>e) Se han reconocido las caracter\u00edsticas y ventajas de cada una de la colecciones de datos disponibles.</li> <li>(NO) f) Se han creado clases y m\u00e9todos gen\u00e9ricos.</li> <li>g) Se han utilizado expresiones regulares en la b\u00fasqueda de patrones en cadenas de texto.</li> <li>(NO) h) Se han identificado las clases relacionadas con el tratamiento de documentos XML.</li> <li>(NO) i) Se han realizado programas que realicen manipulaciones sobre documentos XML.</li> </ul>","tags":["Software"]},{"location":"section1/u03/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 2</p> <ul> <li>U3: Estructuras de datos. </li> </ul> <p>En la Unidad 3, veremos:</p> <ul> <li>Listas y tuplas</li> <li>Diccionarios</li> <li>Conjuntos</li> <li>String</li> <li>Expresiones regulares</li> </ul>","tags":["Software"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/","title":"UD 3 - P0: Cadenas","text":"","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#p30-ejercicios","title":"P3.0 - Ejercicios","text":"","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un bucle <code>while</code> que comience con el \u00faltimo car\u00e1cter en la cadena y haga un recorrido hacia atr\u00e1s hasta el primer car\u00e1cter en la cadena, imprimiendo cada letra en una l\u00ednea independiente.</p>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-2","title":"Ejercicio 2","text":"<p>Dado que <code>fruta</code> es una variable de tipo cadena, \u00bfqu\u00e9 significa <code>fruta[:]</code>?</p>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-3","title":"Ejercicio 3","text":"<p>Tienes este c\u00f3digo: <pre><code>palabra = 'banana'\ncontador = 0\nfor letra in palabra:\nif letra == 'a':\ncontador = contador + 1\nprint(contador)\n</code></pre> Encaps\u00falalo en una funci\u00f3n llamada <code>cuenta</code>, y hazla gen\u00e9rica de tal modo que pueda aceptar una cadena y una letra como argumentos.</p>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica000/#ejercicio-4","title":"Ejercicio 4","text":"<p>Hay un m\u00e9todo de cadenas llamado <code>count</code> que es similar a <code>find</code>. Lee la documentaci\u00f3n de este m\u00e9todo en: * M\u00e9todos en ingles * M\u00e9todos en castellano</p> <p>y escribe el c\u00f3digo necesario para invocar a este m\u00e9todo y contar el n\u00famero de veces que una letra aparece en \u201cbanana\u201d.</p>","tags":["Software","Ejercicios","Cadenas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/","title":"UD 3 - P2: Diccionarios","text":"","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#p32-ejercicios-diccionarios","title":"P3.2 - Ejercicios: Diccionarios","text":"","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que guarde en una variable el diccionario <code>{'Euro':'\u20ac', 'Dollar':'$', 'Yen':'\u00a5'}</code>, pregunte al usuario por una divisa y muestre su s\u00edmbolo o un mensaje de aviso si la divisa no est\u00e1 en el diccionario.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que pregunte al usuario su nombre, edad, direcci\u00f3n y tel\u00e9fono y lo guarde en un diccionario. Despu\u00e9s debe mostrar por pantalla el mensaje <code>&lt;nombre&gt; tiene &lt;edad&gt; a\u00f1os, vive en &lt;direcci\u00f3n&gt; y su n\u00famero de tel\u00e9fono es &lt;tel\u00e9fono&gt;</code>.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que guarde en un diccionario los precios de las frutas de la tabla, pregunte al usuario por una fruta, un n\u00famero de kilos y muestre por pantalla el precio de ese n\u00famero de kilos de fruta. Si la fruta no est\u00e1 en el diccionario debe mostrar un mensaje informando de ello.</p> Fruta Precio Pl\u00e1tano 1.35 Manzana 0.80 Pera 0.85 Naranja 0.70","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte una fecha en formato <code>dd/mm/aaaa</code> y muestre por pantalla la misma fecha en formato <code>dd de &lt;mes&gt; de aaaa</code> donde <code>&lt;mes&gt;</code> es el nombre del mes.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene el diccionario con los cr\u00e9ditos de las asignaturas de un curso <code>{'Matem\u00e1ticas': 6, 'F\u00edsica': 4, 'Qu\u00edmica': 5}</code> y despu\u00e9s muestre por pantalla los cr\u00e9ditos de cada asignatura en el formato <code>&lt;asignatura&gt; tiene &lt;cr\u00e9ditos&gt; cr\u00e9ditos</code>, donde <code>&lt;asignatura&gt;</code> es cada una de las asignaturas del curso, y <code>&lt;cr\u00e9ditos&gt;</code> son sus cr\u00e9ditos. Al final debe mostrar tambi\u00e9n el n\u00famero total de cr\u00e9ditos del curso.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que cree un diccionario vac\u00edo y lo vaya llenado con informaci\u00f3n sobre una persona (por ejemplo nombre, edad, sexo, tel\u00e9fono, correo electr\u00f3nico, etc.) que se le pida al usuario. Cada vez que se a\u00f1ada un nuevo dato debe imprimirse el contenido del diccionario.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que cree un diccionario simulando una cesta de la compra. El programa debe preguntar el art\u00edculo y su precio y a\u00f1adir el par al diccionario, hasta que el usuario decida terminar. Despu\u00e9s se debe mostrar por pantalla la lista de la compra y el coste total, con el siguiente formato</p> Lista de la compra Art\u00edculo 1 Precio Art\u00edculo 2 Precio Art\u00edculo 3 Precio \u2026 \u2026 Total Coste","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que cree un diccionario de traducci\u00f3n espa\u00f1ol-ingl\u00e9s. El usuario introducir\u00e1 las palabras en espa\u00f1ol e ingl\u00e9s separadas por dos puntos, y cada par <code>&lt;palabra&gt;:&lt;traducci\u00f3n&gt;</code> separados por comas. El programa debe crear un diccionario con las palabras y sus traducciones. Despu\u00e9s pedir\u00e1 una frase en espa\u00f1ol y utilizar\u00e1 el diccionario para traducirla palabra a palabra. Si una palabra no est\u00e1 en el diccionario debe dejarla sin traducir.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que gestione las facturas pendientes de cobro de una empresa. Las facturas se almacenar\u00e1n en un diccionario donde la clave de cada factura ser\u00e1 el n\u00famero de factura y el valor el coste de la factura. El programa debe preguntar al usuario si quiere a\u00f1adir una nueva factura, pagar una existente o terminar. Si desea a\u00f1adir una nueva factura se preguntar\u00e1 por el n\u00famero de factura y su coste y se a\u00f1adir\u00e1 al diccionario. Si se desea pagar una factura se preguntar\u00e1 por el n\u00famero de factura y se eliminar\u00e1 del diccionario. Despu\u00e9s de cada operaci\u00f3n el programa debe mostrar por pantalla la cantidad cobrada hasta el momento y la cantidad pendiente de cobro.</p>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que permita gestionar la base de datos de clientes de una empresa. Los clientes se guardar\u00e1n en un diccionario en el que la clave de cada cliente ser\u00e1 su NIF, y el valor ser\u00e1 otro diccionario con los datos del cliente (nombre, direcci\u00f3n, tel\u00e9fono, correo, preferente), donde preferente tendr\u00e1 el valor <code>True</code> si se trata de un cliente preferente. El programa debe preguntar al usuario por una opci\u00f3n del siguiente men\u00fa: (1) A\u00f1adir cliente, (2) Eliminar cliente, (3) Mostrar cliente, (4) Listar todos los clientes, (5) Listar clientes preferentes, (6) Terminar. En funci\u00f3n de la opci\u00f3n elegida el programa tendr\u00e1 que hacer lo siguiente:</p> <ol> <li>Preguntar los datos del cliente, crear un diccionario con los datos y a\u00f1adirlo a la base de datos.</li> <li>Preguntar por el NIF del cliente y eliminar sus datos de la base de datos.</li> <li>Preguntar por el NIF del cliente y mostrar sus datos.</li> <li>Mostrar lista de todos los clientes de la base datos con su NIF y nombre.</li> <li>Mostrar la lista de clientes preferentes de la base de datos con su NIF y nombre.</li> <li>Terminar el programa.</li> </ol>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica002/#ejercicio-11","title":"Ejercicio 11","text":"<p>El directorio de los clientes de una empresa est\u00e1 organizado en una cadena de texto como la de m\u00e1s abajo, donde cada l\u00ednea contiene la informaci\u00f3n del nombre, email, tel\u00e9fono, nif, y el descuento que se le aplica. Las l\u00edneas se separan con el car\u00e1cter de cambio de l\u00ednea <code>\\n</code> y la primera l\u00ednea contiene los nombres de los campos con la informaci\u00f3n contenida en el directorio.</p> <pre><code>\"nif;nombre;email;tel\u00e9fono;descuento\\n01234567L;Luis Gonz\u00e1lez;luisgonzalez@mail.com;656343576;12.5\\n71476342J;Macarena Ram\u00edrez;macarena@mail.com;692839321;8\\n63823376M;Juan Jos\u00e9 Mart\u00ednez;juanjo@mail.com;664888233;5.2\\n98376547F;Carmen S\u00e1nchez;carmen@mail.com;667677855;15.7\"\n</code></pre> <p>Escribir un programa que genere un diccionario con la informaci\u00f3n del directorio, donde cada elemento corresponda a un cliente y tenga por clave su nif y por valor otro diccionario con el resto de la informaci\u00f3n del cliente. Los diccionarios con la informaci\u00f3n de cada cliente tendr\u00e1n como claves los nombres de los campos y como valores la informaci\u00f3n de cada cliente correspondientes a los campos. Es decir, un diccionario como el siguiente</p> <pre><code>{'01234567L': {'nombre': 'Luis Gonz\u00e1lez', 'email': 'luisgonzalez@mail.com', 'tel\u00e9fono': '656343576', 'descuento': 12.5}, '71476342J': {'nombre': 'Macarena Ram\u00edrez', 'email': 'macarena@mail.com', 'tel\u00e9fono': '692839321', 'descuento': 8.0}, '63823376M': {'nombre': 'Juan Jos\u00e9 Mart\u00ednez', 'email': 'juanjo@mail.com', 'tel\u00e9fono': '664888233', 'descuento': 5.2}, '98376547F': {'nombre': 'Carmen S\u00e1nchez', 'email': 'carmen@mail.com', 'tel\u00e9fono': '667677855', 'descuento': 15.7}}\n</code></pre>","tags":["Software","Ejercicios","Diccionarios"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/","title":"UD 3 - P3: Conjuntos","text":"","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#p33-ejercicios-conjuntos","title":"P3.3 - Ejercicios: Conjuntos","text":"","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-1","title":"Ejercicio 1","text":"<p>Suponer una lista con datos de las compras hechas por clientes de una empresa a lo largo de un mes, la cual contiene tuplas con informaci\u00f3n de cada venta: (cliente, d\u00eda del mes, monto, domicilio del cliente). Ejemplo:</p> <pre><code>[(\"Nuria Costa\", 5, 12780.78, \"Calle Las Flores 355\"), (\"Jorge Russo\", 7, 699, \"Mirasol 218\"), (\"Nuria Costa\", 7, 532.90, \"Calle Las Flores 355\"), (\"Juli\u00e1n Rodriguez\", 12, 5715.99, \"La Mancha 761\"), (\"Jorge Russo\", 15, 958, \"Mirasol 218\")]\n</code></pre> <p>Escribir una funci\u00f3n que reciba como par\u00e1metro una lista con el formato mencionado anteriormente y retorne los domicilios de cada cliente al cual se le debe enviar una factura de compra. Notar que cada cliente puede haber hecho m\u00e1s de una compra en el mes, por lo que la funci\u00f3n debe retornar una estructura que contenga cada domicilio una sola vez.</p>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-2","title":"Ejercicio 2","text":"<p>Solicitar al usuario que introduzca los nombres de pila de los alumnos de primaria de una escuela, finalizando cuando se introduzca \u201cx\u201d. A continuaci\u00f3n, solicitar que introduzca los nombres de los alumnos de secundaria, finalizando al introducir \u201cx\u201d.</p> <ul> <li>Mostrar los nombres de todos los alumnos de primaria y los de secundaria, sin repeticiones.</li> <li>Mostrar qu\u00e9 nombres se repiten entre los alumnos de primaria y secundaria.</li> <li>Mostrar qu\u00e9 nombres de primaria no se repiten en los de nivel secundaria.</li> <li>Mostrar si todos los nombres de primaria est\u00e1n incluidos en secundaria.</li> </ul>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/practica/PROG-U3.-Practica003/#ejercicio-3","title":"Ejercicio 3","text":"<p>El conjunto potencia de un conjunto S es el conjunto de todos los subconjuntos de S.</p> <p>Por ejemplo, el conjunto potencia de <code>{1,2,3}</code> es:</p> <pre><code>{\u2205,{1},{2},{3},{1,2},{1,3},{2,3},{1,2,3}}\n</code></pre> <p>Escriba la funci\u00f3n <code>conjunto_potencia(s)</code> que reciba como par\u00e1metro un conjunto cualquiera <code>s</code> y retorne su \u00ablista potencia\u00bb (la lista de todos sus subconjuntos):</p> <pre><code>&gt;&gt;&gt; conjunto_potencia({6, 1, 4})\n[set(), set([6]), set([1]), set([4]), set([6, 1]), set([6, 4]), set([1, 4]), set([6, 1, 4])]\n</code></pre>","tags":["Software","Ejercicios","Conjuntos"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/","title":"UD 3 - 3.0 Cadenas","text":"","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#cadenas","title":"Cadenas","text":"<p>Una cadena es una secuencia de caracteres.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#una-cadena-es-una-secuencia","title":"Una cadena es una secuencia","text":"<p>Puedes acceder a los caracteres de uno en uno con el operador corchete:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; letra = fruta[1]\n</code></pre> <p>La segunda sentencia extrae el car\u00e1cter en la posici\u00f3n del \u00edndice 1 de la variable <code>fruta</code> y la asigna a la variable <code>letra</code>.</p> <p>La expresi\u00f3n en los corchetes es llamada \u00edndice. El \u00edndice indica qu\u00e9 car\u00e1cter de la secuencia quieres (de ah\u00ed el nombre).</p> <p>Pero podr\u00edas no obtener lo que esperas:</p> <pre><code>&gt;&gt;&gt; print(letra)\na\n</code></pre> <p>Para la mayor\u00eda de las personas, la primer letra de \u201cbanana\u201d es \u201cb\u201d, no \u201ca\u201d. Pero en Python, el \u00edndice es un desfase desde el inicio de la cadena, y el desfase de la primera letra es cero.</p> <pre><code>&gt;&gt;&gt; letra = fruta[0]\n&gt;&gt;&gt; print(letra)\nb\n</code></pre> <p>As\u00ed que \u201cb\u201d es la letra 0 (\u201ccero\u201d) de \u201cbanana\u201d, \u201ca\u201d es la letra con \u00edndice 1, y \u201cn\u201d es la que tiene \u00edndice 2, etc.</p> <p></p> <p>Indices de Cadenas</p> <p>Puedes usar cualquier expresi\u00f3n, incluyendo variables y operadores, como un \u00edndice, pero el valor del \u00edndice tiene que ser un entero. De otro modo obtendr\u00e1s:</p> <pre><code>&gt;&gt;&gt; letra = fruta[1.5]\nTypeError: string indices must be integers\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#obtener-el-tamano-de-una-cadena-usando-len","title":"Obtener el tama\u00f1o de una cadena usando <code>len</code>","text":"<p><code>len</code> es una funci\u00f3n nativa que devuelve el n\u00famero de caracteres en una cadena:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; len(fruta)\n6\n</code></pre> <p>Para obtener la \u00faltima letra de una cadena, podr\u00edas estar tentado a probar algo como esto:</p> <pre><code>&gt;&gt;&gt; tama\u00f1o = len(fruta)\n&gt;&gt;&gt; ultima = fruta[tama\u00f1o]\nIndexError: string index out of range\n</code></pre> <p>La raz\u00f3n de que haya un <code>IndexError</code> es que ah\u00ed no hay ninguna letra en \u201cbanana\u201d con el \u00edndice 6. Puesto que empezamos a contar desde cero, las seis letras est\u00e1n enumeradas desde 0 hasta 5. Para obtener el \u00faltimo car\u00e1cter, tienes que restar 1 a <code>length</code>:</p> <pre><code>&gt;&gt;&gt; ultima = fruta[tama\u00f1o-1]\n&gt;&gt;&gt; print(ultima)\na\n</code></pre> <p>Alternativamente, puedes usar \u00edndices negativos, los cuales cuentan hacia atr\u00e1s desde el final de la cadena. La expresi\u00f3n <code>fruta[-1]</code> devuelve la \u00faltima letra, <code>fruta[-2]</code> la pen\u00faltima letra, y as\u00ed sucesivamente.</p> <p>IMPORTANTE: En las secuencias, el \u00edndice empieza en la posici\u00f3n <code>0</code> y termina en la posici\u00f3n <code>len() - 1</code></p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#iteradores-recorriendo-una-cadena-mediante-un-bucle","title":"Iteradores: Recorriendo una cadena mediante un bucle","text":"<p>Muchos de los c\u00e1lculos requieren procesar una cadena car\u00e1cter por car\u00e1cter. Frecuentemente empiezan desde el inicio, seleccionando cada car\u00e1cter presente, haciendo algo con \u00e9l, y continuando hasta el final. Este patr\u00f3n de procesamiento es llamado un iterador. Una manera de escribir un iterador es con un bucle <code>while</code>:</p> <pre><code>indice = 0\nwhile indice &lt; len(fruta):\nletra = fruta[indice]\nprint(letra)\nindice = indice + 1\n</code></pre> <p>Este bucle recorre la cadena e imprime cada letra en una l\u00ednea cada una. La condici\u00f3n del bucle es <code>indice &lt; len(fruta)</code>, as\u00ed que cuando <code>indice</code> es igual al tama\u00f1o de la cadena, la condici\u00f3n es falsa, y el c\u00f3digo del bucle no se ejecuta. El \u00faltimo car\u00e1cter accedido es el que tiene el \u00edndice <code>len(fruta)-1</code>, el cual es el \u00faltimo car\u00e1cter en la cadena.</p> <p>Otra forma de escribir un iterador es con un bucle <code>for</code>:</p> <pre><code>for caracter in fruta:\nprint(caracter)\n</code></pre> <p>Cada vez que iteramos el bucle, el siguiente car\u00e1cter en la cadena es asignado a la variable <code>caracter</code>. El ciclo contin\u00faa hasta que no quedan caracteres.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#rebanado-slicing-de-una-cadena","title":"Rebanado (slicing) de una cadena","text":"<p>Un segmento de una cadena es llamado rebanado. Seleccionar un rebanado es similar a seleccionar un car\u00e1cter:</p> <pre><code>&gt;&gt;&gt; s = 'Monty Python'\n&gt;&gt;&gt; print(s[0:5])\nMonty\n&gt;&gt;&gt; print(s[6:12])\nPython\n</code></pre> <p>El operador <code>[n:m]</code> retorna la parte de la cadena desde el \u201cn-\u00e9simo\u201d car\u00e1cter hasta el \u201cm-\u00e9simo\u201d car\u00e1cter, incluyendo el primero pero excluyendo el \u00faltimo.</p> <p>Si omites el primer \u00edndice (antes de los dos puntos), el rebanado comienza desde el inicio de la cadena. Si omites el segundo \u00edndice, el rebanado va hasta el final de la cadena:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; fruta[:3]\n'ban'\n&gt;&gt;&gt; fruta[3:]\n'ana'\n</code></pre> <p>Si el primer \u00edndice es mayor que o igual que el segundo, el resultado es una cadena vac\u00eda, representado por dos comillas:</p> <pre><code>&gt;&gt;&gt; fruta = 'banana'\n&gt;&gt;&gt; fruta[3:3]\n''\n</code></pre> <p>Una cadena vac\u00eda no contiene caracteres y tiene un tama\u00f1o de 0, pero fuera de esto es lo mismo que cualquier otra cadena.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#los-cadenas-son-inmutables","title":"Los cadenas son inmutables","text":"<p>Puede ser tentador utilizar el operador [] en el lado izquierdo de una asignaci\u00f3n, con la intenci\u00f3n de cambiar un car\u00e1cter en una cadena. Por ejemplo:</p> <pre><code>&gt;&gt;&gt; saludo = 'Hola, mundo!'\n&gt;&gt;&gt; saludo[0] = 'J'\nTypeError: 'str' object does not support item assignment\n</code></pre> <p>El \u201cobjeto\u201d en este caso es la cadena y el \u201c\u00edtem\u201d es el car\u00e1cter que tratamos de asignar. Por ahora, un objeto es la misma cosa que un valor, pero vamos a redefinir esa definici\u00f3n despu\u00e9s. Un \u00edtem es uno de los valores en una secuencia.</p> <p>La raz\u00f3n por la cual ocurre el error es que las cadenas son inmutables, lo cual significa que no puedes modificar una cadena existente. Lo mejor que puedes hacer es crear una nueva cadena que sea una variaci\u00f3n de la original:</p> <pre><code>&gt;&gt;&gt; saludo = 'Hola, mundo!'\n&gt;&gt;&gt; nuevo_saludo = 'J' + saludo[1:]\n&gt;&gt;&gt; print(nuevo_saludo)\nJola, mundo!\n</code></pre> <p>Este ejemplo concatena una nueva letra a una parte de <code>saludo</code>. Esto no tiene efecto sobre la cadena original.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#iterando-y-contando","title":"Iterando y contando","text":"<p>El siguiente programa cuenta el n\u00famero de veces que la letra \u201ca\u201d aparece en una cadena:</p> <pre><code>palabra = 'banana'\ncontador = 0\nfor letra in palabra:\nif letra == 'a':\ncontador = contador + 1\nprint(contador)\n</code></pre> <p>Este programa demuestra otro patr\u00f3n de computaci\u00f3n llamado contador. La variable <code>contador</code> es inicializada a 0 y despu\u00e9s se incrementa cada vez que una \u201ca\u201d es encontrada. Cuando el bucle termina, <code>contador</code> contiene el resultado: el n\u00famero total de a\u2019s.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#el-operador-in","title":"El operador <code>in</code>","text":"<p>La palabra <code>in</code> es un operador booleano que toma dos cadenas y regresa <code>True</code> si la primera cadena aparece como una subcadena de la segunda:</p> <pre><code>&gt;&gt;&gt; 'a' in 'banana'\nTrue\n&gt;&gt;&gt; 'semilla' in 'banana'\nFalse\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#comparacion-de-cadenas","title":"Comparaci\u00f3n de cadenas","text":"<p>Los operadores de comparaci\u00f3n funcionan en cadenas. Para ver si dos cadenas son iguales:</p> <pre><code>if palabra == 'banana':\nprint('Muy bien, bananas.')\n</code></pre> <p>Otras operaciones de comparaci\u00f3n son \u00fatiles para poner palabras en orden alfab\u00e9tico:</p> <pre><code>if palabra &lt; 'banana':\nprint('Tu palabra, ' + palabra + ', est\u00e1 antes de banana.')\nelif palabra &gt; 'banana':\nprint('Tu palabra, ' + palabra + ', est\u00e1 despu\u00e9s de banana.')\nelse:\nprint('Muy bien, bananas.')\n</code></pre> <p>Python no maneja letras may\u00fasculas y min\u00fasculas de la misma forma que la gente lo hace. Todas las letras may\u00fasculas van antes que todas las letras min\u00fasculas, por ejemplo:</p> <pre><code>Tu palabra, Pi\u00f1a, est\u00e1 antes que banana.\n</code></pre> <p>Una forma com\u00fan de manejar este problema es convertir cadenas a un formato est\u00e1ndar, como todas a min\u00fasculas, antes de llevar a cabo la comparaci\u00f3n. Ten en cuenta eso en caso de que tengas que defenderte contra un hombre armado con una Pi\u00f1a.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#metodos-de-cadenas","title":"M\u00e9todos de cadenas","text":"<p>Los cadenas son un ejemplo de objetos en Python. Un objeto contiene tanto datos (el valor de la cadena misma) como m\u00e9todos, los cuales son efectivamente funciones que est\u00e1n implementadas dentro del objeto y que est\u00e1n disponibles para cualquier instancia del objeto.</p> <p>Python tiene una funci\u00f3n llamada <code>dir</code> la cual lista los m\u00e9todos disponibles para un objeto. La funci\u00f3n <code>type</code> muestra el tipo de un objeto y la funci\u00f3n <code>dir</code> muestra los m\u00e9todos disponibles.</p> <pre><code>&gt;&gt;&gt; cosa = 'Hola mundo'\n&gt;&gt;&gt; type(cosa)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; dir(cosa)\n['capitalize', 'casefold', 'center', 'count', 'encode',\n'endswith', 'expandtabs', 'find', 'format', 'format_map',\n'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit',\n'isidentifier', 'islower', 'isnumeric', 'isprintable',\n'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',\n'lstrip', 'maketrans', 'partition', 'replace', 'rfind',\n'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip',\n'split', 'splitlines', 'startswith', 'strip', 'swapcase',\n'title', 'translate', 'upper', 'zfill']\n&gt;&gt;&gt; help(str.capitalize)\nHelp on method_descriptor:\ncapitalize(...)\nS.capitalize() -&gt; str\nReturn a capitalized version of S, i.e. make the first character have upper case and the rest lower case.\n&gt;&gt;&gt;\n</code></pre> <p>Llamar a un m\u00e9todo es similar a llamar una funci\u00f3n (esta toma argumentos y devuelve un valor) pero la sintaxis es diferente. Llamamos a un m\u00e9todo uniendo el nombre del m\u00e9todo al de la variable, usando un punto como delimitador. Aunque la funci\u00f3n <code>dir</code> lista los m\u00e9todos y puedes usar la funci\u00f3n <code>help</code> para obtener una breve documentaci\u00f3n de un m\u00e9todo, una mejor fuente de documentaci\u00f3n para los m\u00e9todos de cadenas se puede encontrar en M\u00e9todos en ingl\u00e9s y M\u00e9todos en castellano</p> <p>Por ejemplo, el m\u00e9todo <code>upper</code> toma una cadena y devuelve una nueva cadena con todas las letras en may\u00fascula:</p> <p>En vez de la sintaxis de funci\u00f3n <code>upper(palabra)</code>, \u00e9ste utiliza la sintaxis de m\u00e9todo <code>palabra.upper()</code>.</p> <pre><code>&gt;&gt;&gt; palabra = 'banana'\n&gt;&gt;&gt; nueva_palabra = palabra.upper()\n&gt;&gt;&gt; print(nueva_palabra)\nBANANA\n</code></pre> <p>Esta forma de notaci\u00f3n con punto especifica el nombre del m\u00e9todo, <code>upper</code>, y el nombre de la cadena al que se le aplicar\u00e1 el m\u00e9todo, <code>palabra</code>. Los par\u00e9ntesis vac\u00edos indican que el m\u00e9todo no toma argumentos.</p> <p>Una llamada a un m\u00e9todo es conocida como una invocaci\u00f3n; en este caso, dir\u00edamos que estamos invocando <code>upper</code> en <code>palabra</code>.</p> <p>Por ejemplo, existe un m\u00e9todo de cadena llamado <code>find</code> que busca la posici\u00f3n de una cadena dentro de otra:</p> <pre><code>&gt;&gt;&gt; palabra = 'banana'\n&gt;&gt;&gt; indice = palabra.find('a')\n&gt;&gt;&gt; print(indice)\n1\n</code></pre> <p>En este ejemplo, invocamos <code>find</code> en <code>palabra</code> y pasamos la letra que estamos buscando como un par\u00e1metro.</p> <p>El m\u00e9todo <code>find</code> puede encontrar subcadenas as\u00ed como caracteres:</p> <pre><code>&gt;&gt;&gt; palabra.find('na')\n2\n</code></pre> <p>Tambi\u00e9n puede tomar como un segundo argumento el \u00edndice desde donde debe empezar:</p> <pre><code>&gt;&gt;&gt; palabra.find('na', 3)\n4\n</code></pre> <p>Una tarea com\u00fan es eliminar los espacios en blanco (espacios, tabs, o nuevas l\u00edneas) en el inicio y el final de una cadena usando el m\u00e9todo <code>strip</code>:</p> <pre><code>&gt;&gt;&gt; linea = '  Aqu\u00ed vamos  '\n&gt;&gt;&gt; linea.strip()\n'Aqu\u00ed vamos'\n</code></pre> <p>Algunos m\u00e9todos como <code>startswith</code> devuelven valores booleanos.</p> <pre><code>&gt;&gt;&gt; linea = 'Que tengas un buen d\u00eda'\n&gt;&gt;&gt; linea.startswith('Que')\nTrue\n&gt;&gt;&gt; linea.startswith('q')\nFalse\n</code></pre> <p>Puedes notar que <code>startswith</code> requiere que el formato (may\u00fasculas y min\u00fasculas) coincida, de modo que a veces tendremos que tomar la l\u00ednea y cambiarla completamente a min\u00fasculas antes de hacer la verificaci\u00f3n, utilizando el m\u00e9todo <code>lower</code>.</p> <pre><code>&gt;&gt;&gt; linea = 'Que tengas un buen d\u00eda'\n&gt;&gt;&gt; linea.startswith('q')\nFalse\n&gt;&gt;&gt; linea.lower()\n'que tengas un buen d\u00eda'\n&gt;&gt;&gt; linea.lower().startswith('q')\nTrue\n</code></pre> <p>En el \u00faltimo ejemplo, el m\u00e9todo <code>lower</code> es llamado y despu\u00e9s usamos <code>startswith</code> para ver si la cadena resultante en min\u00fasculas comienza con la letra \u201cq\u201d. Siempre y cuando seamos cuidadosos con el orden, podemos hacer m\u00faltiples llamadas a m\u00e9todos en una sola expresi\u00f3n.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#analizando-cadenas","title":"Analizando cadenas","text":"<p>Frecuentemente, queremos examinar una cadena para encontrar una subcadena. Por ejemplo, si se nos presentaran una seria de l\u00edneas con el siguiente formato:</p> <p><code>From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008</code></p> <p>y quisi\u00e9ramos obtener \u00fanicamente la segunda parte de la direcci\u00f3n de correo (esto es, <code>uct.ac.za</code>) de cada l\u00ednea, podemos hacer esto utilizando el m\u00e9todo <code>find</code> y una parte de la cadena.</p> <p>Primero tenemos que encontrar la posici\u00f3n de la arroba en la cadena. Despu\u00e9s, tenemos que encontrar la posici\u00f3n del primer espacio despu\u00e9s de la arroba. Y despu\u00e9s partiremos la cadena para extraer la porci\u00f3n de la cadena que estamos buscando.</p> <pre><code>&gt;&gt;&gt; dato = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'\n&gt;&gt;&gt; arrobapos = dato.find('@')\n&gt;&gt;&gt; print(arrobapos)\n21\n&gt;&gt;&gt; espos = dato.find(' ',arrobapos)\n&gt;&gt;&gt; print(espos)\n31\n&gt;&gt;&gt; direccion = dato[arrobapos+1:espos]\n&gt;&gt;&gt; print(direccion)\nuct.ac.za\n&gt;&gt;&gt;\n</code></pre> <p>Utilizamos una versi\u00f3n del m\u00e9todo <code>find</code> que nos permite especificar la posici\u00f3n en la cadena desde donde queremos que <code>find</code> comience a buscar. Cuando recortamos una parte de una cadena, extraemos los caracteres desde \u201cuno despu\u00e9s de la arroba hasta,  pero no incluyendo , el car\u00e1cter de espacio\u201d.</p> <p>La documentaci\u00f3n del m\u00e9todo <code>find</code> est\u00e1 disponible en</p> <p>M\u00e9todos en castellano.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#el-operador-de-formato","title":"El operador de formato","text":"<p>El operador de formato <code>%</code> nos permite construir cadenas, reemplazando partes de las cadenas con datos almacenados en variables. Cuando lo aplicamos a enteros, <code>%</code> es el operador m\u00f3dulo. Pero cuando es aplicado a una cadena, <code>%</code> es el operador de formato.</p> <p>El primer operando es la cadena a formatear, la cual contiene una o m\u00e1s secuencias de formato que especifican c\u00f3mo el segundo operando es formateado. El resultado es una cadena.</p> <p>Por ejemplo, la secuencia de formato <code>%d</code> significa que el segundo operando deber\u00eda ser formateado como un entero (\u201cd\u201d significa \u201cdecimal\u201d):</p> <pre><code>&gt;&gt;&gt; camellos = 42\n&gt;&gt;&gt; '%d' % camellos\n'42'\n</code></pre> <p>El resultado es la cadena \u201842\u2019, el cual no debe ser confundido con el valor entero 42.</p> <p>Una secuencia de formato puede aparecer en cualquier lugar en la cadena, as\u00ed que puedes meter un valor en una frase:</p> <pre><code>&gt;&gt;&gt; camellos = 42\n&gt;&gt;&gt; 'Yo he visto %d camellos.' % camellos\n'Yo he visto 42 camellos.'\n</code></pre> <p>Si hay m\u00e1s de una secuencia de formato en la cadena, el segundo argumento tiene que ser una tupla. Cada secuencia de formato es relacionada con un elemento de la tupla, en orden.</p> <p>El siguiente ejemplo usa <code>%d</code> para formatear un entero, <code>%g</code> para formatear un n\u00famero de punto flotante (no preguntes por qu\u00e9), y <code>%s</code> para formatear una cadena:</p> <pre><code>&gt;&gt;&gt; 'En %d a\u00f1os yo he visto %g %s.' % (3, 0.1, 'camellos')\n'En 3 a\u00f1os yo he visto 0.1 camellos.'\n</code></pre> <p>El n\u00famero de elementos en la tupla debe coincidir con el n\u00famero de secuencias de formato en la cadena. El tipo de los elementos tambi\u00e9n debe coincidir con la secuencia de formato:</p> <pre><code>&gt;&gt;&gt; '%d %d %d' % (1, 2)\nTypeError: not enough arguments for format string\n&gt;&gt;&gt; '%d' % 'dolares'\nTypeError: %d format: a number is required, not str\n</code></pre> <p>En el primer ejemplo, no hay suficientes elementos; en el segundo, el elemento es de un tipo incorrecto.</p> <p>El operador de formato es poderoso, pero puede ser dif\u00edcil de usar. Puedes leer m\u00e1s al respecto en</p> <p>https://docs.python.org/library/stdtypes.html#printf-style-string-formatting.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#depuracion","title":"Depuraci\u00f3n","text":"<p>Una habilidad que debes desarrollar cuando programas es siempre preguntarte a ti mismo, \u201c\u00bfQu\u00e9 podr\u00eda fallar aqu\u00ed?\u201d o alternativamente, \u201c\u00bfQu\u00e9 cosa il\u00f3gica podr\u00eda hacer un usuario para hacer fallar nuestro (aparentemente) perfecto programa?\u201d</p> <p>Por ejemplo, observa el programa que utilizamos para demostrar el bucle <code>while</code> en el apartado de iteraciones:</p> <pre><code>linea = input('&gt; ')\nwhile linea != 'fin':\nif linea[0] != '#' :\nprint(linea)\nlinea = input('&gt; ')\nprint('\u00a1Terminado!')\n# C\u00f3digo: https://es.py4e.com/code3/copytildone2.py\n</code></pre> <p>Mira lo que pasa cuando el usuario introduce una l\u00ednea vac\u00eda como entrada:</p> <pre><code>&gt; hola a todos\nhola a todos\n&gt; # no imprimas esto\n&gt; \u00a1imprime esto!\n\u00a1imprime esto!\n&gt;\nTraceback (most recent call last):\nFile \"copytildone.py\", line 3, in &lt;module&gt;\nif linea[0] != '#' :\nIndexError: string index out of range\n</code></pre> <p>El c\u00f3digo funciona bien hasta que se presenta una l\u00ednea vac\u00eda. En ese momento no hay un car\u00e1cter cero, por lo que obtenemos una traza de error (traceback). Existen dos soluciones a esto para convertir la l\u00ednea tres en \u201csegura\u201d, incluso si la l\u00ednea est\u00e1 vac\u00eda.</p> <p>Una posibilidad es simplemente usar el m\u00e9todo <code>startswith</code> que devuelve <code>False</code> si la cadena est\u00e1 vac\u00eda.</p> <pre><code>if linea.startswith('#'):\n</code></pre> <p>Otra forma segura es escribir una sentencia <code>if</code> utilizando el patr\u00f3n guardi\u00e1n y asegurarse que la segunda expresi\u00f3n l\u00f3gica es evaluada s\u00f3lo cuando hay al menos un car\u00e1cter en la cadena:</p> <pre><code>if len(linea) &gt; 0 and linea[0] != '#':\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#metodos-string","title":"M\u00e9todos String","text":"<p>Algunos m\u00e9todos de la clase String son: </p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringcapitalize","title":"string.capitalize()","text":"<p>El m\u00e9todo capitalize() devuelve una copia de la cadena con su primera letra en may\u00fascula. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.capitalize()\n'Mi diario python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringendswithsufijo","title":"string.endswith(sufijo)","text":"<p>El m\u00e9todo endswith() devuelve True si la cadena termina con el sufijo especificado. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.endswith(\"python\")\nTrue\n&gt;&gt;&gt; texto.endswith(\"thon\")\nTrue\n&gt;&gt;&gt; texto.endswith(\"py\")\nFalse\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringexpandtabstamano_de_tab8","title":"string.expandtabs(tama\u00f1o_de_tab=8)","text":"<p>El m\u00e9todo expandtabs devuelva una copia de la cadena en la que todos los caracteres de las pesta\u00f1as se reemplazan por uno o m\u00e1s espacios, seg\u00fan la columna actual y el tama\u00f1o de la pesta\u00f1a. Para expandir la cadena, la columna actual se establece en cero y la cadena se examina car\u00e1cter por car\u00e1cter. Si el car\u00e1cter es una pesta\u00f1a ( <code>t</code>), se insertan uno o m\u00e1s caracteres de espacio en el resultado hasta que la columna actual sea igual a la siguiente posici\u00f3n de la pesta\u00f1a. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mitdiariotpython\"\n&gt;&gt;&gt; texto.expandtabs(4)\n'mi  diario  python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringfindsub","title":"string.find(sub)","text":"<p>Devuelve el \u00edndice m\u00e1s bajo de la cadena en la subcadena sub se encuentra dentro de la rebanada <code>s[start:end]</code>. Devuelve -1 si no se encuentra el sub. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.find(\"mi\")\n0\n&gt;&gt;&gt; texto.find(\"m\")\n0\n&gt;&gt;&gt; texto.find(\"i\")\n1\n&gt;&gt;&gt; texto.find(\"python\")\n10\n&gt;&gt;&gt; texto.find(\"py\")\n10\n&gt;&gt;&gt; texto.find(\"p y\")\n-1\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringformat","title":"string.format()","text":"<p>Nos permite realizar una operaci\u00f3n de formato de cadena. La cadena en la que se llama a este m\u00e9todo puede contener texto literal o campos de reemplazo delimitados por llaves <code>{}</code>. Cada campo de reemplazo contiene el \u00edndice num\u00e9rico de un argumento posicional o el nombre de un argumento de palabra clave. Devuelve una copia de la cadena donde cada campo de reemplazo se reemplaza con el valor de la cadena del argumento correspondiente. Ejemplo:</p> <pre><code>&gt;&gt;&gt; \"La suma de 1 + 2 es {0}\".format(1+2)\n'La suma de 1 + 2 es 3'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringindexsub","title":"string.index(sub)","text":"<p>El m\u00e9todo index es muy similar al m\u00e9todo find. Con la diferencia de que cuando no se encuentra la subcadena, index lanza un ValueError.</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.index(\"mi\")\n0\n&gt;&gt;&gt; texto.index(\"PYTHON\")\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: substring not found\n&gt;&gt;&gt;\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringisalpha","title":"string.isalpha()","text":"<p>Devuelve verdadero si todos los caracteres de la cadena son alfanum\u00e9ricos y hay al menos un car\u00e1cter, de lo contrario es falso. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.isalpha()\nFalse\n&gt;&gt;&gt; \"midiariopython\".isalpha()\nTrue\n</code></pre> <p>Si te preguntas \u00bfpor que \u201cmi diario python\u201d a lanzado False?. Es porque los espacios no son un car\u00e1cter alfanum\u00e9rico.</p>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringisdigit","title":"string.isdigit()","text":"<p>El m\u00e9todo isdigit() devuelve True si todos los caracteres de la cadena son d\u00edgitos. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; digitos = \"12345\"\n&gt;&gt;&gt; texto.isdigit()\nFalse\n&gt;&gt;&gt; digitos.isdigit()\nTrue\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringisspace","title":"string.isspace()","text":"<p>El m\u00e9todo isspace() devuelve True si solo hay caracteres de espacio en blanco. Ejemplo:</p> <pre><code>&gt;&gt;&gt; \" \".isspace()\nTrue\n&gt;&gt;&gt; \"  a\".isspace()\nFalse\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringlower","title":"string.lower()","text":"<p>El m\u00e9todo lower devuelve una copia de la cadena con todos sus caracteres en min\u00fasculas. Ejemplo:</p> <pre><code>&gt;&gt;&gt; \"Hola Mundo\".lower()\n'hola mundo'\n&gt;&gt;&gt; \"PYTHON\".lower()\n'python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringupper","title":"string.upper()","text":"<p>El m\u00e9todo upper() devuelve la una copia de la cadena con todos su caracteres en may\u00fasculas. Ejemplo:</p> <pre><code>&gt;&gt;&gt; texto = \"mi diario python\"\n&gt;&gt;&gt; texto.upper()\n'MI DIARIO PYTHON'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringlstripchars","title":"string.lstrip(chars)","text":"<p>El m\u00e9todo lstrip devuelve una copia de la cadena con los caracteres iniciales eliminados. El argumento chars es una cadena que especifica el conjunto de caracteres que se eliminar\u00e1n. Ejemplo:</p> <pre><code>&gt;&gt;&gt; web = \"www.pythondiario.com\"\n&gt;&gt;&gt; web.lstrip(\"w.\")\n'pythondiario.com'\n&gt;&gt;&gt;\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringreplacestring_viejo-string_nuevo","title":"string.replace(string_viejo, string_nuevo)","text":"<p>El m\u00e9todo replace() devuelve una copia de la cadena con la subcadena vieja remplazada por una nueva. Veamos un ejemplo para entenderlo mejor:</p> <pre><code>&gt;&gt;&gt; cadena = \"Hola Mundo\"\n&gt;&gt;&gt; cadena.replace(\"Mundo\", \"Internet\")\n'Hola Internet'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringpartitionchar","title":"string.partition(char)","text":"<p>El m\u00e9todo partition() divide la cadena en la primera aparici\u00f3n de char y devuelve una tupla que contiene la parte anterior a char, el mismo char, y la parte posterior de char. Suena un poco confuso, veamos un ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Hola Mundo\"\n&gt;&gt;&gt; cadena.partition(\"la\")\n('Ho', 'la', ' Internet')\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringtitle","title":"string.title()","text":"<p>El m\u00e9todo title() devuelve una copia de la cadena donde las palabras comienzan con una letra may\u00fascula. Veamos un ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"mi diario python\"\n&gt;&gt;&gt; cadena.title()\n'Mi Diario Python'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringswapcase","title":"string.swapcase()","text":"<p>El m\u00e9todo swapcase() devuelve una copia de la cadena con los caracteres en may\u00fasculas convertidos en min\u00fasculas y viceversa.</p> <p>Ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Mi Diario Python\"\n&gt;&gt;&gt; cadena.swapcase()\n'mI dIARIO pYTHON'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#strigstartswithprefijo","title":"strig.startswith(prefijo)","text":"<p>El m\u00e9todo startswith() devuelve True si la cadena comienza con el prefijo, de lo contrario devuelve False. Ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Mi Diario Python\"\n&gt;&gt;&gt; cadena.startswith(\"Mi\")\nTrue'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringsplitsep","title":"string.split(sep)","text":"<p>El m\u00e9todo split() devuelve una lista de las palabras en la cadena, utilizando a sep como la cadena delimitadora. Ejemplo:</p> <pre><code>&gt;&gt;&gt; cadena = \"Luis,Jose,Maria,Sofia,Miguel\"\n&gt;&gt;&gt; cadena.split(\",\")\n['Luis', 'Jose', 'Maria', 'Sofia', 'Miguel']\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#stringzfillancho","title":"string.zfill(ancho)","text":"<p>El m\u00e9todo zfill() devuelve una copia de la cadena que se rellena con 0 d\u00edgitos ASCII para hacer una cadena de ancho de longitud . Ejemplo:</p> <pre><code>&gt;&gt;&gt; \"356\".zfill(6)\n'000356'\n</code></pre>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.0.-Cadenas/#fuente","title":"Fuente","text":"<ul> <li>P\u00e1gina de Juan Jose Lozano Gomez sobre Python</li> <li>Python para todos</li> <li>Ejemplos con m\u00e9todos de String</li> <li>Estructuras de datos</li> <li>Aprende con Alf</li> </ul>","tags":["Software","Cadenas"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/","title":"UD 3 - 3.1 Listas","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#listas","title":"Listas","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#estructuras-de-datos","title":"Estructuras de datos","text":"<p>Las estructuras de datos en programaci\u00f3n son un modo de representar informaci\u00f3n en una computadora, aunque adem\u00e1s, cuentan con un comportamiento interno. \u00bfQu\u00e9 significa? Que se rige por determinadas reglas/restricciones que han sido dadas por la forma en que est\u00e1 construida internamente.</p> <p>\u00bfPor qu\u00e9 es importante conocerlas? Cuando inicias en el mundo de la programaci\u00f3n y te metes de lleno en el mundo de Python, las estructuras de datos son fundamentales. Conocer sobre listas, \u00e1rboles y grafos te permitir\u00e1 organizar mejor la informaci\u00f3n y crear c\u00f3digo m\u00e1s eficiente. Adem\u00e1s, es clave para mejorar tus habilidades t\u00e9cnicas y enfrentarte con \u00e9xito a cada reto en tus futuras entrevistas laborales.</p> <p>En Python estas estructuras vienen definidas en la biblioteca est\u00e1ndar de Python</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#para-que-sirven-las-estructuras-de-datos","title":"\u00bfPara qu\u00e9 sirven las estructuras de datos?","text":"<p>En el \u00e1mbito de la inform\u00e1tica, las estructuras de datos son aquellas que nos permiten, como desarrolladores, organizar la informaci\u00f3n de manera eficiente, y en definitiva dise\u00f1ar la soluci\u00f3n correcta para un determinado problema.</p> <p>Ya sean las m\u00e1s utilizadas com\u00fanmente -como las  variables ,  arrays , conjuntos **o  **clases - o las dise\u00f1adas para un prop\u00f3sito espec\u00edfico - \u00e1rboles ,  grafos ,  tablas , etc.-, una **estructura de datos **nos permite trabajar en un algo nivel de abstracci\u00f3n almacenando informaci\u00f3n para luego acceder a ella, modificarla y manipularla.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#cuales-son-los-tipos-de-estructuras-de-datos","title":"\u00bfCu\u00e1les son los tipos de estructuras de datos?","text":"<p>Primero, debemos diferenciar entre estructura de dato est\u00e1tica y estructura de dato din\u00e1mica</p> <p>Las estructuras de datos est\u00e1ticas son aquellas en las que el tama\u00f1o ocupado en memoria se define antes de que el programa se ejecute y no puede modificarse dicho tama\u00f1o durante la ejecuci\u00f3n del programa, mientras que una estructura de datos din\u00e1mica es aquella en la que el tama\u00f1o ocupado en memoria puede modificarse durante la ejecuci\u00f3n del programa.</p> <p>Cada tipo de estructura depender\u00e1 del tipo de aplicaci\u00f3n que se requiera. Una t\u00edpica dentro de las estructuras de datos est\u00e1ticas son los arrays:</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#arrays","title":"Arrays","text":"<p>\u00bfQu\u00e9 es un array en programaci\u00f3n? Un array **es un tipo de **dato estructurado que permite almacenar un conjunto de datos homog\u00e9neo y ordenado, es decir, todos ellos del mismo tipo y relacionados. Su condici\u00f3n de  homog\u00e9neo , indica que sus elementos est\u00e1n compuestos por el mismo tipo de dato, y su condici\u00f3n de *ordenado *hace que se pueda identificar del primer al \u00faltimo elemento que lo compone.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#estructura-de-datos-dinamicas","title":"Estructura de datos din\u00e1micas","text":"<p>Por otro lado, vimos que en programaci\u00f3n existen  estructuras de datos din\u00e1micas , es decir, una colecci\u00f3n de elementos -nodos- que normalmente se utilizan para dejar asentados registros. A diferencia de un array que contiene espacio para almacenar un n\u00famero fijo de elementos, una estructura din\u00e1mica de datos se ampl\u00eda y contrae durante la ejecuci\u00f3n del programa. Veamos algunos casos:</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#estructura-de-datos-lineales","title":"Estructura de datos lineales","text":"<p>Las **estructuras de datos lineales ** son aquellas en las que los elementos ocupan lugares sucesivos en la estructura y cada uno de ellos tiene un \u00fanico sucesor y un \u00fanico predecesor, es decir, sus elementos est\u00e1n ubicados uno al lado del otro relacionados en forma lineal.</p> <p>Hay tres tipos de estructuras de datos lineales:</p> <ul> <li>Listas enlazadas</li> <li>Pilas</li> <li>Colas</li> </ul> <p>Listas enlazadas</p> <p>En las estructuras de datos, las listas enlazadas se construyen con elementos que est\u00e1n ubicados en una secuencia. Aqu\u00ed, cada elemento se conecta con el siguiente a trav\u00e9s de un enlace que contiene la posici\u00f3n del siguiente elemento. De este modo, teniendo la referencia del principio de la lista podemos acceder a todos los elementos de la misma.</p> <p> Lista simplemente enlazada.</p> <p>Pila</p> <p>La pila es un tipo especial de lista lineal dentro de las **estructuras de datos din\u00e1micas **que permite almacenar y recuperar datos, siendo el modo de acceso a sus elementos de tipo LIFO (del ingl\u00e9s  Last In, First Out , es decir,  \u00faltimo en entrar, primero en salir ). \u00bfC\u00f3mo funciona? A trav\u00e9s de dos operaciones b\u00e1sicas: apilar (push), que coloca un objeto en la pila, y su operaci\u00f3n inversa, desapilar (pop), que retira el \u00faltimo elemento apilado.</p> <p></p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#estructura-de-datos-no-lineales","title":"Estructura de datos no lineales","text":"<p>Las  estructuras de datos no lineales , tambi\u00e9n llamadas multienlazadas, son aquellas en las que cada elemento puede estar enlazado a cualquier otro componente. Es decir, cada elemento puede tener varios sucesores o varios predecesores.</p> <p>Existen dos tipos:</p> <ul> <li>\u00c1rboles</li> <li>Grafos</li> </ul> <p>\u00c1rboles</p> <p>En estructura de datos, los \u00e1rboles consisten en una **estructura no lineal **que se utiliza para representar datos con una relaci\u00f3n jer\u00e1rquica en la que cada elemento tiene un \u00fanico antecesor y puede tener varios sucesores.</p> <p>Los mismos se encuentran clasificados en: \u00e1rbol general, un \u00e1rbol donde cada elemento puede tener un n\u00famero ilimitado de sub \u00e1rboles y \u00e1rboles binarios, que son una estructura de datos homog\u00e9nea, din\u00e1mica y no lineal en donde a cada elemento le pueden seguir como m\u00e1ximo dos nodos.</p> <p></p> <p>Grafos</p> <p>Otro tipo de no lineal de estructura de datos en programaci\u00f3n, son los  grafos. Se trata de una estructura matem\u00e1tica formada por un conjunto de puntos \u2014una estructura de datos\u2014 y un conjunto de l\u00edneas, cada una de las cuales une un punto a otro. Los puntos se llaman nodos o v\u00e9rtices del grafo y las l\u00edneas se llaman aristas o arcos.</p> <p></p> <p>Ya sabes, las estructuras de datos en programaci\u00f3n son un aspecto clave para conocer. Nos permiten mejorar nuestro c\u00f3digo y habilidades t\u00e9cnicas, y en definitiva, resolver de manera eficiente problemas complejos.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#que-es-una-lista","title":"Qu\u00e9 es una lista","text":"<p>Las listas en Python son un tipo  contenedor, compuesto, que se usan para almacenar conjuntos de elementos relacionados del mismo tipo o de tipos distintos.</p> <p>Junto a las clases  <code>tuple</code>, <code>range</code> y <code>str</code>, son uno de los tipos de secuencia en Python, con la particularidad de que son mutables. Esto \u00faltimo quiere decir que su contenido se puede modificar despu\u00e9s de haber sido creada.</p> <p>Para crear una lista en Python, simplemente hay que encerrar una secuencia de elementos separados por comas entre par\u00e9ntesis cuadrados <code>[]</code>.</p> <p>Por ejemplo, para crear una lista con los n\u00fameros del 1 al 10 se har\u00eda del siguiente modo:</p> <pre><code>&gt;&gt;&gt; numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p>Como te dec\u00eda, las listas pueden almacenar elementos de distinto tipo. La siguiente lista tambi\u00e9n es v\u00e1lida:</p> <pre><code>&gt;&gt;&gt; elementos = [3, 'a', 8, 7.2, 'hola']\n</code></pre> <p>Incluso pueden contener otros elementos compuestos, como objetos u otras listas:</p> <pre><code>&gt;&gt;&gt; lista = [1, ['a', 'e', 'i', 'o', 'u'], 8.9, 'hola']\n</code></pre> <p>Las listas tambi\u00e9n se pueden crear usando el constructor de la clase, <code>list(iterable)</code>. En este caso, el constructor crea una lista cuyos elementos son los mismos y est\u00e1n en el mismo orden que los \u00edtems del iterable. El objeto iterable puede ser o una secuencia, un contenedor que soporte la iteraci\u00f3n o un objeto iterador.</p> <p>Por ejemplo, el tipo str tambi\u00e9n es un tipo secuencia. Si pasamos un string al constructor <code>list()</code> crear\u00e1 una lista cuyos elementos son cada uno de los caracteres de la cadena:</p> <pre><code>&gt;&gt;&gt; vocales = list('aeiou')\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n</code></pre> <p>Termino esta secci\u00f3n mostrando dos alternativas de crear una lista vac\u00eda:</p> <pre><code>&gt;&gt;&gt; lista_1 = []  # Opci\u00f3n 1\n&gt;&gt;&gt; lista_2 = list()  # Opci\u00f3n 2\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#como-acceder-a-los-elementos-de-una-lista-en-python","title":"C\u00f3mo acceder a los elementos de una lista en Python","text":"<p>Para acceder a un elemento de una lista se utilizan los \u00edndices.  Un \u00edndice es un n\u00famero entero que indica la posici\u00f3n de un elemento en una lista . El primer elemento de una lista siempre comienza en el \u00edndice 0.</p> <p>Por ejemplo, en una lista con 4 elementos, los \u00edndices de cada uno de los \u00edtems ser\u00edan 0, 1, 2 y 3.</p> <pre><code>&gt;&gt;&gt; lista = ['a', 'b', 'd', 'i', 'j']\n&gt;&gt;&gt; lista[0]  # Primer elemento de la lista. \u00cdndice 0\n&gt;&gt;&gt; 'a'\n&gt;&gt;&gt; lista[3]  # Cuarto elemento de la lista. \u00cdndice 3\n&gt;&gt;&gt; 'i'\n</code></pre> <p>Si se intenta acceder a un \u00edndice que est\u00e1 fuera del rango de la lista, el int\u00e9rprete lanzar\u00e1 la excepci\u00f3n <code>IndexError</code>. De igual modo, si se utiliza un \u00edndice que no es un n\u00famero entero, se lanzar\u00e1 la excepci\u00f3n <code>TypeError</code>:</p> <pre><code>&gt;&gt;&gt; lista = [1, 2, 3]  # Los \u00edndices v\u00e1lidos son 0, 1 y 2\n&gt;&gt;&gt; lista[8]\n&gt;&gt;&gt; Traceback (most recent call last):\n&gt;&gt;&gt; File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n&gt;&gt;&gt; IndexError: list index out of range\n&gt;&gt;&gt; lista[1.0]\n&gt;&gt;&gt; Traceback (most recent call last):\n&gt;&gt;&gt; File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n&gt;&gt;&gt; TypeError: list indices must be integers or slices, not float\n</code></pre> <p>Como hemos visto, las listas pueden contener otros elementos de tipo secuencia de forma anidada. Por ejemplo, una lista que uno de sus \u00edtems es otra lista. Del mismo modo, se puede acceder a los elementos de estos tipos usando \u00edndices compuestos o anidados:</p> <pre><code>&gt;&gt;&gt; lista = ['a', ['d', 'b'], 'z']\n&gt;&gt;&gt; lista[1][1]  # lista[1] hace referencia a la lista anidada\n&gt;&gt;&gt; 'b'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#acceso-a-los-elementos-usando-un-indice-negativo","title":"Acceso a los elementos usando un \u00edndice negativo","text":"<p>En Python est\u00e1 permitido usar \u00edndices negativos para acceder a los elementos de una secuencia. En este caso, el \u00edndice -1 hace referencia al \u00faltimo elemento de la secuencia, el -2 al pen\u00faltimo y as\u00ed, sucesivamente:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[-1]\n&gt;&gt;&gt; 'u'\n&gt;&gt;&gt; vocales[-4]\n&gt;&gt;&gt; 'e'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#acceso-a-un-subconjunto-de-elementos","title":"Acceso a un subconjunto de elementos","text":"<p>Tambi\u00e9n es posible acceder a un subconjunto de elementos de una lista utilizando rangos en los \u00edndices. Esto es usando el operador <code>[:]</code>:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[2:3]  # Elementos desde el \u00edndice 2 hasta el \u00edndice 3-1\n&gt;&gt;&gt; ['i']\n&gt;&gt;&gt; vocales[2:4]  # Elementos desde el 2 hasta el \u00edndice 4-1\n&gt;&gt;&gt; ['i', 'o']\n&gt;&gt;&gt; vocales[:]  # Todos los elementos\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[1:]  # Elementos desde el \u00edndice 1\n&gt;&gt;&gt; ['e', 'i', 'o', 'u']\n&gt;&gt;&gt; vocales[:3]  # Elementos hasta el \u00edndice 3-1\n&gt;&gt;&gt; ['a', 'e', 'i']\n</code></pre> <p>Tambi\u00e9n es posible acceder a los elementos de una lista indicando un paso con el operador <code>[::]</code>:</p> <pre><code>&gt;&gt;&gt; letras = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n&gt;&gt;&gt; letras[::2]  # Acceso a los elementos de 2 en 2\n&gt;&gt;&gt; ['a', 'c', 'e', 'g', 'i', 'k']\n&gt;&gt;&gt; letras[1:5:2]  # Elementos del \u00edndice 1 al 4 de 2 en 2\n&gt;&gt;&gt; ['b', 'd']\n&gt;&gt;&gt; letras[1:6:3]  # Elementos del \u00edndice 1 al 5 de 3 en 3\n&gt;&gt;&gt; ['b', 'e']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#for-list-python-recorrer-una-lista","title":"for list Python \u2013 Recorrer una lista","text":"<p>Ya hemos visto que se puede usar el bucle for en Python para recorrer los elementos de una secuencia. En nuestro caso, para recorrer una lista en Python utilizar\u00edamos la siguiente estructura:</p> <pre><code>&gt;&gt;&gt; colores = ['azul', 'blanco', 'negro']\n&gt;&gt;&gt; for color in colores:\n&gt;&gt;&gt; print(color)\n&gt;&gt;&gt; azul\n&gt;&gt;&gt; blanco\n&gt;&gt;&gt; negro\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#anadir-elementos-a-una-lista-en-python","title":"A\u00f1adir elementos a una lista en Python","text":"<p>Tal y como te he adelantado, las listas son secuencias mutables, es decir, sus elementos pueden ser modificados (se pueden a\u00f1adir nuevos \u00edtems, actualizar o eliminar).</p> <p>Para a\u00f1adir un nuevo elemento a una lista se utiliza el m\u00e9todo <code>append()</code> y para a\u00f1adir varios elementos, el m\u00e9todo <code>extend()</code>:</p> <pre><code>&gt;&gt;&gt; vocales = ['a']\n&gt;&gt;&gt; vocales.append('e')  # A\u00f1ade un elemento\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e']\n&gt;&gt;&gt; vocales.extend(['i', 'o', 'u'])  # A\u00f1ade un grupo de elementos\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n</code></pre> <p>Tambi\u00e9n es posible utilizar el operador de concatenaci\u00f3n <code>+</code> para unir dos listas en una sola. El resultado es una nueva lista con los elementos de ambas:</p> <pre><code>&gt;&gt;&gt; lista_1 = [1, 2, 3]\n&gt;&gt;&gt; lista_2 = [4, 5, 6]\n&gt;&gt;&gt; nueva_lista = lista_1 + lista_2\n&gt;&gt;&gt; nueva_lista\n&gt;&gt;&gt; [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Por otro lado, el operador <code>*</code> repite el contenido de una lista <code>n</code> veces:</p> <pre><code>&gt;&gt;&gt; numeros = [1, 2, 3]\n&gt;&gt;&gt; numeros *= 3\n&gt;&gt;&gt; numeros\n&gt;&gt;&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code></pre> <p>Y para terminar esta secci\u00f3n, indicarte que tambi\u00e9n es posible a\u00f1adir un elemento en una posici\u00f3n concreta de una lista con el m\u00e9todo <code>insert(\u00edndice, elemento)</code>. Los elementos cuyo \u00edndice sea mayor a <code>\u00edndice</code> se desplazan una posici\u00f3n a la derecha:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'u']\n&gt;&gt;&gt; vocales.insert(2, 'i')\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'u']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#modificar-elementos-de-una-lista","title":"Modificar elementos de una lista","text":"<p>Es posible modificar un elemento de una lista en Python con el operador de asignaci\u00f3n <code>=</code>. Para ello, lo \u00fanico que necesitas conocer es el \u00edndice del elemento que quieres modificar o el rango de \u00edndices:</p> <pre><code>&gt;&gt;&gt; vocales = ['o', 'o', 'o', 'o', 'u']\n# Actualiza el elemento del \u00edndice 0\n&gt;&gt;&gt; vocales[0] = 'a'\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'o', 'o', 'o', 'u']\n# Actualiza los elementos entre las posiciones 1 y 2\n&gt;&gt;&gt; vocales[1:3] = ['e', 'i']\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'i', 'o', 'u']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#eliminar-un-elemento-de-una-lista-en-python","title":"Eliminar un elemento de una lista en Python","text":"<p>En Python se puede eliminar un elemento de una lista de varias formas.</p> <p>Con la sentencia <code>del</code> se puede eliminar un elemento a partir de su \u00edndice:</p> <pre><code># Elimina el elemento del \u00edndice 1\n&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; del vocales[1]\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'i', 'o', 'u']\n# Elimina los elementos con \u00edndices 2 y 3\n&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; del vocales[2:4]\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; ['a', 'e', 'u']\n##### Elimina todos los elementos\n&gt;&gt;&gt; del vocales[:]\n&gt;&gt;&gt; vocales\n&gt;&gt;&gt; []\n</code></pre> <p>Adem\u00e1s de la sentencia <code>del</code>, podemos usar los m\u00e9todos <code>remove()</code> y <code>pop([i])</code>. <code>remove()</code> elimina la primera ocurrencia que se encuentre del elemento en una lista. Por su parte, <code>pop([i])</code> obtiene el elemento cuyo \u00edndice sea igual a <code>i</code> y lo elimina de la lista. Si no se especifica ning\u00fan \u00edndice, recupera y elimina el \u00faltimo elemento.</p> <pre><code>&gt;&gt;&gt; letras = ['a', 'b', 'k', 'a', 'v']\n# Elimina la primera ocurrencia del car\u00e1cter a\n&gt;&gt;&gt; letras.remove('a')\n&gt;&gt;&gt; letras\n&gt;&gt;&gt; ['b', 'k', 'a', 'v']\n# Obtiene y elimina el \u00faltimo elemento\n&gt;&gt;&gt; letras.pop()\n&gt;&gt;&gt; 'v'\n&gt;&gt;&gt; letras\n&gt;&gt;&gt; ['b', 'k', 'a']\n</code></pre> <p>Finalmente, es posible eliminar todos los elementos de una lista a trav\u00e9s del m\u00e9todo <code>clear()</code>:</p> <pre><code>&gt;&gt;&gt; letras = ['a', 'b', 'c']\n&gt;&gt;&gt; letras.clear()\n&gt;&gt;&gt; letras\n&gt;&gt;&gt; []\n</code></pre> <p>El c\u00f3digo anterior ser\u00eda equivalente a <code>del letras[:]</code>.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#longitud-len-de-una-lista-en-python","title":"Longitud (len) de una lista en Python","text":"<p>Como cualquier tipo secuencia, para conocer la longitud de una lista en Python se hace uso de la funci\u00f3n <code>len()</code>. Esta funci\u00f3n devuelve el n\u00famero de elementos de una lista:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt;\n&gt;&gt;&gt; len(vocales)\n&gt;&gt;&gt; 5\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#como-saber-si-un-elemento-esta-en-una-lista-en-python","title":"C\u00f3mo saber si un elemento est\u00e1 en una lista en Python","text":"<p>Ya adelant\u00e9 en el tutorial sobre operadores en Python, que para saber si un elemento est\u00e1 contenido en una lista, se utiliza el operador de pertenencia <code>in</code>:</p> <pre><code>&gt;&gt;&gt; vocales = ['a', 'e', 'i', 'o', 'u']\n&gt;&gt;&gt; if 'a' in vocales:\n&gt;&gt;&gt; ...     print('S\u00ed')\n&gt;&gt;&gt; ...\n&gt;&gt;&gt; S\u00ed\n&gt;&gt;&gt; if 'b' not in vocales:\n&gt;&gt;&gt; ...     print('No')\n&gt;&gt;&gt; ...\n&gt;&gt;&gt; No\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#sort-list-python-ordenar-una-lista-en-python","title":"sort list Python \u2013 Ordenar una lista en Python","text":"<p>Las listas son secuencias ordenadas. Esto quiere decir que sus elementos siempre se devuelven en el mismo orden en que fueron a\u00f1adidos.</p> <p>No obstante, es posible ordenar los elementos de una lista con el m\u00e9todo <code>sort()</code>. El m\u00e9todo <code>sort()</code> ordena los elementos de la lista utilizando \u00fanicamente el operador <code>&lt;</code> y modifica la lista actual (no se obtiene una nueva lista):</p> <pre><code># Lista desordenada de n\u00fameros enteros\n&gt;&gt;&gt; numeros = [3, 2, 6, 1, 7, 4]\n# Identidad del objeto numeros\n&gt;&gt;&gt; id(numeros)\n&gt;&gt;&gt; 4475439216\n# Se llama al m\u00e9todo sort() para ordenar los elementos de la lista\n&gt;&gt;&gt; numeros.sort()\n&gt;&gt;&gt; numeros\n&gt;&gt;&gt; [1, 2, 3, 4, 6, 7]\n# Se comprueba que la identidad del objeto numeros es la misma\n&gt;&gt;&gt; id(numeros)\n&gt;&gt;&gt; 4475439216\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#listado-de-metodos-de-la-clase-list","title":"Listado de m\u00e9todos de la clase list","text":"<p>Termino este tutorial mostrando la lista completa de m\u00e9todos de la clase list. Algunos de ellos ya se han mencionado en las secciones anteriores.</p> M\u00e9todo Descripci\u00f3n <code>append()</code> A\u00f1ade un nuevo elemento al final de la lista. <code>extend()</code> A\u00f1ade un grupo de elementos (iterables) al final de la lista. <code>insert(indice, elemento)</code> Inserta un elemento en una posici\u00f3n concreta de la lista. <code>remove(elemento)</code> Elimina la primera ocurrencia del elemento en la lista. <code>pop([i])</code> Obtiene y elimina el elemento de la lista en la posici\u00f3n i. Si no se especifica, obtiene y elimina el \u00faltimo elemento. <code>clear()</code> Borra todos los elementos de la lista. <code>index(elemento)</code> Obtiene el \u00edndice de la primera ocurrencia del elemento en la lista. Si el elemento no se encuentra, se lanza la excepci\u00f3n<code>ValueError</code>. <code>count(elemento)</code> Devuelve el n\u00famero de ocurrencias del elemento en la lista. <code>sort()</code> Ordena los elementos de la lista utilizando el operador<code>&lt;</code>. <code>reverse()</code> Obtiene los elementos de la lista en orden inverso. <code>copy()</code> Devuelve una copia poco profunda de la lista.","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#copia-de-listas","title":"Copia de listas","text":"<p>Existen dos formas de copiar listas:</p> <ul> <li>Copia por referencia <code>l1 = l2</code>: Asocia a la variable <code>l1</code> la misma lista que tiene asociada la variable <code>l2</code>, es decir, ambas variables apuntan a la misma direcci\u00f3n de memoria. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> o <code>l2</code> afectar\u00e1 a la misma lista.</li> <li>Copia por valor <code>l1 = list(l2)</code>: Crea una copia de la lista asociada a <code>l2</code> en una direcci\u00f3n de memoria diferente y se la asocia a <code>l1</code>. Las variables apuntan a direcciones de memoria diferentes que contienen los mismos datos. Cualquier cambio que hagamos a trav\u00e9s de <code>l1</code> no afectar\u00e1 a la lista de <code>l2</code> y viceversa.</li> </ul> <pre><code>&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; # copia por referencia\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b\n[1, 2, 3]\n&gt;&gt;&gt; b.remove(2)\n&gt;&gt;&gt; b\n[1, 3]\n&gt;&gt;&gt; a\n[1, 3]\n</code></pre> <pre><code>&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; # copia por referencia\n&gt;&gt;&gt; b = list(a)\n&gt;&gt;&gt; b\n[1, 2, 3]\n&gt;&gt;&gt; b.remove(2)\n&gt;&gt;&gt; b\n[1, 3]\n&gt;&gt;&gt; a\n[1, 2, 3]\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#depuracion","title":"Depuraci\u00f3n","text":"<p>El uso descuidado de listas (y otros objetos mutables) puede llevar a largas horas de depuraci\u00f3n. Aqu\u00ed est\u00e1n algunos de los errores m\u00e1s comunes y las formas de evitarlos:</p> <ol> <li>No olvides que la mayor\u00eda de m\u00e9todos de listas modifican el argumento y regresan <code>None</code>. Esto es lo opuesto a los m\u00e9todos de cadenas, que regresan una nueva cadena y dejan la original sin modificar.</li> </ol> <p>Si est\u00e1s acostumbrado a escribir c\u00f3digo de cadenas como este:</p> <pre><code>palabra = palabra.strip()\n</code></pre> <p>Est\u00e1s propenso a escribir c\u00f3digo de listas como este:</p> <pre><code>t = t.sort()           # \u00a1EQUIVOCADO!\n</code></pre> <p>Debido a que <code>sort</code> regresa <code>None</code>, la siguiente operaci\u00f3n que hagas con <code>t</code> es probable que falle.</p> <p>Antes de usar m\u00e9todos y operadores de listas, deber\u00edas leer la documentaci\u00f3n cuidadosamente y despu\u00e9s probarlos en modo interactivo. Los m\u00e9todos y operadores que las listas comparten con otras secuencias (como cadenas) est\u00e1n documentados en:</p> <p>docs.python.org/library/stdtypes.html#common-sequence-operations</p> <p>Los m\u00e9todos y operadores que solamente aplican a secuencias mutables est\u00e1n documentados en:</p> <p>docs.python.org/library/stdtypes.html#mutable-sequence-types 2. Elige un estilo y ap\u00e9gate a \u00e9l.    Parte del problema con listas es que hay demasiadas formas de hacer las cosas. Por ejemplo, para remover un elemento de una lista, puedes utilizar <code>pop</code>, <code>remove</code>, <code>del</code>, o incluso una asignaci\u00f3n por rebanado.    Para agregar un elemento, puedes utilizar el m\u00e9todo <code>append</code> o el operador <code>+</code>. Pero no olvides que esos tambi\u00e9n son correctos:</p> <pre><code>t.append(x)\nt = t + [x]\n</code></pre> <p>Y esos son incorrectos:</p> <pre><code>t.append([x])          # \u00a1EQUIVOCADO!\nt = t.append(x)        # \u00a1EQUIVOCADO!\nt + [x]                # \u00a1EQUIVOCADO!\nt = t + x              # \u00a1EQUIVOCADO!\n</code></pre> <p>Prueba cada uno de esos ejemplos en modo interactivo para asegurarte que entiendes lo que hacen. Nota que solamente la \u00faltima provoca un error en tiempo de ejecuci\u00f3n (runtime error); los otros tres son v\u00e1lidos, pero hacen la funci\u00f3n equivocada. 3. Hacer copias para evitar alias.    Si quieres utilizar un m\u00e9todo como <code>sort</code> que modifica el argumento, pero necesitas mantener la lista original tambi\u00e9n, puedes hacer una copia.</p> <pre><code>orig = t[:]\nt.sort()\n</code></pre> <p>En este ejemplo podr\u00edas tambi\u00e9n usar la funci\u00f3n interna <code>sorted</code>, la cual regresa una lista nueva y ordenada, y deja la original sin modificar. \u00a1Pero en ese caso deber\u00edas evitar usar <code>sorted</code> como un nombre de variable! 4. Listas, <code>split</code>, y archivos    Cuando leemos y analizamos archivos, hay muchas oportunidades de encontrar entradas que pueden hacer fallar a nuestro programa, as\u00ed que es una buena idea revisar el patr\u00f3n guardi\u00e1n cuando escribimos programas que leen a trav\u00e9s de un archivo y buscan una \u201caguja en un pajar\u201d.    Vamos a revisar nuestro programa que busca por el d\u00eda de la semana en las l\u00edneas que contienen \u201cfrom\u201d en el archivo\":</p> <pre><code>From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008\n</code></pre> <p>Puesto que estamos dividiendo esta l\u00ednea en palabras, podr\u00edamos apa\u00f1arnos con el uso de <code>startswith</code> y simplemente buscar la primera palabra de la l\u00ednea para determinar si estamos interesados en esa l\u00ednea o no. Podemos saltarnos las l\u00edneas que no tienen \u201cFrom\u201d como  primer palabra, tal como sigue:</p> <pre><code>manejador = open('mbox-short.txt')\nfor linea in manejador:\npalabras = linea.split()\nif palabras[0] != 'From' : continue # Hay otra forma, evita continue\nprint(palabras[2])\n</code></pre> <p>Esto se ve mucho m\u00e1s simple y ni siquiera necesitamos hacer <code>rstrip</code> para borrar el salto de l\u00ednea al final del archivo. Pero, \u00bfes mejor?</p> <pre><code>python search8.py\nSat\nTraceback (most recent call last):\nFile \"search8.py\", line 5, in &lt;module&gt;\nif palabras[0] != 'From' : continue\nIndexError: list index out of range\n</code></pre> <p>De alguna manera funciona y vemos el d\u00eda de la primera l\u00ednea (Sat), pero luego el programa falla con un error. \u00bfQu\u00e9 fue lo que fall\u00f3? \u00bfQu\u00e9 datos estropearon e hicieron fallar a nuestro elegante, inteligente, y muy Pyth\u00f3nico programa?</p> <p>Puedes mirar el c\u00f3digo por un largo tiempo y tratar de resolverlo o preguntar a alguien m\u00e1s, pero el m\u00e9todo m\u00e1s r\u00e1pido e inteligente es agregar una sentencia <code>print</code>. El mejor lugar para agregar la sentencia <code>print</code> es justo antes de la l\u00ednea donde el programa fall\u00f3, e imprimir los datos que parece que causan la falla.</p> <p>Ahora bien, este m\u00e9todo podr\u00eda generar muchas l\u00edneas de salida, pero al menos tendr\u00e1s inmediatamente alguna pista de cu\u00e1l es el problema. As\u00ed que agregamos un print a la variable <code>palabras</code> justo antes de la l\u00ednea cinco. Incluso podemos agregar un prefijo \u201cDepuraci\u00f3n:\u201d a la l\u00ednea de modo que mantenemos nuestra salida regular separada de la salida de mensajes de depuraci\u00f3n.</p> <pre><code>for linea in manejador:\npalabras = line.split()\nprint('Depuraci\u00f3n:', palabras)\nif palabras[0] != 'From' : continue\nprint(palabras[2])\n</code></pre> <p>Cuando ejecutamos el programa, se generan muchos mensajes de salida en la pantalla, pero al final, vemos nuestra salida de depuraci\u00f3n y el mensaje de error, de modo que sabemos qu\u00e9 sucedi\u00f3 justo antes del error.</p> <pre><code>Depuraci\u00f3n: ['X-DSPAM-Confidence:', '0.8475']\nDepuraci\u00f3n: ['X-DSPAM-Probability:', '0.0000']\nDepuraci\u00f3n: []\nTraceback (most recent call last):\n  File \"search9.py\", line 6, in &lt;module&gt;\n    if palabras[0] != 'From' : continue\nIndexError: list index out of range\n</code></pre> <p>Cada l\u00ednea de depuraci\u00f3n imprime la lista de palabras que obtuvimos cuando la funci\u00f3n <code>split</code> dividi\u00f3 la l\u00ednea en palabras. Cuando el programa falla, la lista de palabras est\u00e1 vac\u00eda <code>[]</code>. Si abrimos el archivo en un editor de texto y miramos el archivo, en ese punto se ve lo siguiente:</p> <pre><code>X-DSPAM-Result: Innocent\nX-DSPAM-Processed: Sat Jan  5 09:14:16 2008\nX-DSPAM-Confidence: 0.8475\nX-DSPAM-Probability: 0.0000\n\nDetails: http://source.sakaiproject.org/viewsvn/?view=rev&amp;rev=39772\n</code></pre> <p>\u00a1El error ocurre cuando nuestro programa encuentra una l\u00ednea vac\u00eda! Por supuesto, hay \u201ccero palabras\u201d en una lista vac\u00eda. \u00bfPor qu\u00e9 no pensamos en eso cuando est\u00e1bamos escribiendo el c\u00f3digo? Cuando el c\u00f3digo busca la primera palabra (<code>palabras[0]</code>) para revisar si coincide con \u201cFrom\u201d, obtenemos un error \u201cindex out of range\u201d (\u00edndice fuera de rango).</p> <p>Este es, por supuesto, el lugar perfecto para agregar algo de c\u00f3digo guardi\u00e1n para evitar revisar si la primera palabra no existe. Hay muchas maneras de proteger este c\u00f3digo; vamos a optar por revisar el n\u00famero de palabras que tenemos antes de mirar la primera palabra:</p> <pre><code>manejador = open('mbox-short.txt')\ncontador = 0\nfor linea in manejador:\n    palabras = linea.split()\n    # print 'Depuraci\u00f3n:', palabras\n    if len(palabras) == 0 : continue\n    if palabras[0] != 'From' : continue\n    print(palabras[2])\n</code></pre> <p>Posteriormente comentaremos la sentencia de depuraci\u00f3n en vez de borrarla, en caso de que nuestra modificaci\u00f3n falle y tengamos que depurar de nuevo. Luego, agregamos una sentencia guardi\u00e1n que revisa si tenemos cero palabras, y si as\u00ed fuera, saltaremos a la siguiente l\u00ednea en el archivo.</p> <p>Podemos pensar en las dos sentencias <code>continue</code> (seguro que encuetnras otra forma que no sea con <code>continue</code>) que se usan para solo procesar las l\u00edneas que son \u201cinteresantes\u201d en nuestro proceso. Una l\u00ednea que no tenga palabras \u201cno es interesante\u201d para nosotros as\u00ed que saltamos a la siguiente l\u00ednea. Una l\u00ednea que no tenga \u201cFrom\u201d como su primera palabra tampoco nos interesa as\u00ed que la saltamos.</p> <p>El programa modificado se ejecuta con \u00e9xito, as\u00ed que quiz\u00e1s es correcto. Nuestra sentencia guardi\u00e1n se asegura de que <code>palabras[0]</code> nunca falle, pero quiz\u00e1 no sea suficiente. Cuando estamos programando, siempre debemos pensar, \u201c\u00bfqu\u00e9 podr\u00eda salir mal?\u201d</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.1.-Listas/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/","title":"UD 3 - 3.1 Tuplas","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#tuplas","title":"Tuplas","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#diferencia-entre-tuplas-y-listas","title":"Diferencia entre tuplas y listas.","text":"<p>Una lista no es lo mismo que una tupla. Ambas son un conjunto ordenado de valores, en donde este \u00faltimo puede ser cualquier objeto: un n\u00famero, una cadena, una funci\u00f3n, una clase, una instancia, etc. La diferencia es que las listas presentan una serie de funciones adicionales que permiten un amplio manejo de los valores que contienen. Bas\u00e1ndonos en esta definici\u00f3n, puede decirse que las listas son din\u00e1micas, mientras que las tuplas son est\u00e1ticas.</p> <p>La principal diferencia entre las listas y las tuplas de Python, y el motivo por el que muchos usuarios solamente utilizar listas, es que las listas son mutables mientras que las tuplas son inmutables. \u00bfPero qu\u00e9 significa ser mutable o no? B\u00e1sicamente un objeto mutable se puede modificar una vez creado mientras que uno que no lo es no. As\u00ed el contenido de las listas se puede modificar durante la ejecuci\u00f3n del programa mientras para las tuplas no es posible alterar su contenido. Las tuplas se podr\u00e1n usar como las listas teniendo en cuenta su inmutabilidad.</p> <p>El hecho de ser mutable tiene adem\u00e1s otras consecuencias. Para ser mutables las listas se almacena en dos bloques de memoria, mientras que las tuplas solo necesitan uno. Lo que provoca que las tuplas ocupen menos memoria que las listas. Adem\u00e1s, por el hecho de no ser mutables, es m\u00e1s r\u00e1pido manejar tuplas que listas. Debido a esto, hay que tener en cuenta lo anterior para elegir en nuestros algoritmos el tipo que mejor se adapte. En el caso de que no sea necesario modificar el contenido de los datos la mejor opci\u00f3n es la tupla, ya que es ocupa menos memoria y es m\u00e1s r\u00e1pida. En el resto de los casos la mejor opci\u00f3n ser\u00e1 utilizar listas.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#que-es-una-tupla","title":"Qu\u00e9 es una tupla","text":"<p>La clase tuple en Python es un tipo contenedor, compuesto, que en un principio se pens\u00f3 para almacenar grupos de elementos heterog\u00e9neos, aunque tambi\u00e9n puede contener elementos homog\u00e9neos.</p> <p>Junto a las clases list y  range , es uno de los tipos de secuencia en Python, con la particularidad de que son  inmutables . Esto \u00faltimo quiere decir que su contenido NO se puede modificar despu\u00e9s de haber sido creada.</p> <p>En general, para crear una tupla en Python simplemente hay que definir una secuencia de elementos separados por comas.</p> <p>Por ejemplo, para crear una tupla con los n\u00fameros del 1 al 5 se har\u00eda del siguiente modo:</p> <pre><code>&gt;&gt;&gt; numeros = 1, 2, 3, 4, 5\n</code></pre> <p>La clase <code>tuple</code> tambi\u00e9n puede almacenar elementos de distinto tipo:</p> <pre><code>&gt;&gt;&gt; elementos = 3, 'a', 8, 7.2, 'hola'\n</code></pre> <p>Incluso pueden contener otros elementos compuestos y objetos, como listas, otras tuplas, etc.:</p> <pre><code>&gt;&gt;&gt; tup = 1, ['a', 'e', 'i', 'o', 'u'], 8.9, 'hola'\n</code></pre> <p>A continuaci\u00f3n se ven las diferentes formas que existen de crear una tupla en Python:</p> <ul> <li>Para crear una tupla vac\u00eda, usa par\u00e9ntesis <code>()</code> o el constructor de la clase <code>tuple()</code> sin par\u00e1metros.</li> <li>Para crear una tupla con un \u00fanico elemento: <code>elem,</code> o <code>(elem, )</code>. Observa que siempre se a\u00f1ade una coma.</li> <li>Para crear una tupla de varios elementos, sep\u00e1ralos con comas: <code>a, b, c</code> o <code>(a, b, c)</code>.</li> <li>Las tuplas tambi\u00e9n se pueden crear usando el constructor de la clase, <code>tuple(iterable)</code>. En este caso, el constructor crea una tupla cuyos elementos son los mismos y est\u00e1n en el mismo orden que los \u00edtems del iterable. El objeto iterable puede ser una secuencia, un contenedor que soporte la iteraci\u00f3n o un objeto iterador.</li> </ul> <p>\ufe0fIMPORTANTE: El hecho que determina que una secuencia de elementos sea una tupla es la coma <code>,</code> no los par\u00e9ntesis. Los par\u00e9ntesis son opcionales y solo se necesitan para crear una tupla vac\u00eda o para evitar ambig\u00fcedades.</p> <pre><code># Aqu\u00ed, a, b y c no son una tupla, sino tres argumentos con\n# los que se llama a la funci\u00f3n \"una_funcion\"\n&gt;&gt;&gt; una_funcion(a, b, c)\n# Aqu\u00ed, a, b y c son tres elementos de una tupla. Esta tupla,\n# es el \u00fanico argumento con el que se invoca a la\n# funci\u00f3n \"una_funcion\"\n&gt;&gt;&gt; una_funcion((a, b, c))\n</code></pre> <p>La forma de crear una tupla sin par\u00e9ntesis es conocida como tuple packing (algo as\u00ed como empaquetado de tuplas).</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#como-acceder-a-los-elementos-de-una-tupla-en-python","title":"C\u00f3mo acceder a los elementos de una tupla en Python","text":"<p>Para acceder a un elemento de una tupla se utilizan los \u00edndices. Un \u00edndice es un n\u00famero entero que indica la posici\u00f3n de un elemento en una tupla. El primer elemento de una tupla siempre comienza en el \u00edndice 0.</p> <p>Por ejemplo, en una tupla con 3 elementos, los \u00edndices de cada uno de los \u00edtems ser\u00edan 0, 1 y 2.</p> <pre><code>&gt;&gt;&gt; tupla = ('a', 'b', 'd')\n&gt;&gt;&gt; tupla[0]  # Primer elemento de la tupla. \u00cdndice 0\n'a'\n&gt;&gt;&gt; tupla[1]  # Segundo elemento de la tupla. \u00cdndice 1\n'b'\n</code></pre> <p>Si se intenta acceder a un \u00edndice que est\u00e1 fuera del rango de la tupla, el int\u00e9rprete lanzar\u00e1 la excepci\u00f3n <code>IndexError</code>. De igual modo, si se utiliza un \u00edndice que no es un n\u00famero entero, se lanzar\u00e1 la excepci\u00f3n <code>TypeError</code>:</p> <pre><code>&gt;&gt;&gt; tupla = 1, 2, 3  # Los \u00edndices v\u00e1lidos son 0, 1 y 2\n&gt;&gt;&gt; tupla[8]\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nIndexError: tuple index out of range\n&gt;&gt;&gt; tupla[1.0]\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nTypeError: tuple indices must be integers or slices, not float\n&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#acceso-a-los-elementos-usando-un-indice-negativo","title":"Acceso a los elementos usando un \u00edndice negativo","text":"<p>Al igual que ocurre con las listas (y todos los tipos secuenciales), est\u00e1 permitido usar \u00edndices negativos para acceder a los elementos de una tupla. En este caso, el \u00edndice -1 hace referencia al \u00faltimo elemento de la secuencia, el -2 al pen\u00faltimo y as\u00ed, sucesivamente:</p> <pre><code>&gt;&gt;&gt; bebidas = ('agua', 'caf\u00e9', 'batido', 'sorbete')\n&gt;&gt;&gt; bebidas[-1]\n'sorbete'\n&gt;&gt;&gt; bebidas[-3]\n'caf\u00e9'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#acceso-a-un-subconjunto-de-elementos","title":"Acceso a un subconjunto de elementos","text":"<p>Tambi\u00e9n es posible acceder a un subconjunto de elementos de una tupla utilizando el operador <code>[:]</code>:</p> <pre><code>&gt;&gt;&gt; vocales = 'a', 'e', 'i', 'o', 'u'\n&gt;&gt;&gt; vocales[2:3]  # Elementos desde el \u00edndice 2 hasta el \u00edndice 3-1\n('i',)\n&gt;&gt;&gt; vocales[2:4]  # Elementos desde el 2 hasta el \u00edndice 4-1\n('i', 'o')\n&gt;&gt;&gt; vocales[:]  # Todos los elementos\n('a', 'e', 'i', 'o', 'u')\n&gt;&gt;&gt; vocales[1:]  # Elementos desde el \u00edndice 1\n('e', 'i', 'o', 'u')\n&gt;&gt;&gt; vocales[:3]  # Elementos hasta el \u00edndice 3-1\n('a', 'e', 'i')\n</code></pre> <p>O indicando un salto entre los elementos con el operador <code>[::]</code>:</p> <pre><code>&gt;&gt;&gt; pares = 2, 4, 6, 8, 10, 12, 14\n&gt;&gt;&gt; pares[::2]  # Acceso a los elementos de 2 en 2\n(2, 6, 10, 14)\n&gt;&gt;&gt; pares[1:5:2]  # Elementos del \u00edndice 1 al 4 de 2 en 2\n(4, 8)\n&gt;&gt;&gt; pares[1:6:3]  # Elementos del \u00edndice 1 al 5 de 3 en 3\n(4, 10)\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#tuple-unpacking","title":"tuple unpacking","text":"<p>El concepto conocido como tuple unpacking (desempaquetado de una tupla) se puede aplicar sobre cualquier objeto de tipo secuencia, aunque se usa mayoritariamente con las tuplas, y consiste en lo siguiente:</p> <pre><code>&gt;&gt;&gt; bebidas = 'agua', 'caf\u00e9', 'batido'\n&gt;&gt;&gt; a, b, c = bebidas\n&gt;&gt;&gt; a\n'agua'\n&gt;&gt;&gt; b\n'caf\u00e9'\n&gt;&gt;&gt; c\n'batido'\n</code></pre> <p>Como puedes apreciar, es un tipo de asignaci\u00f3n m\u00faltiple. Requiere que haya tantas variables a la izquierda del operador de asignaci\u00f3n <code>=</code> como elementos haya en la secuencia.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#for-tuple-python-recorrer-una-tupla","title":"for tuple Python \u2013 Recorrer una tupla","text":"<p>El bucle <code>for</code> en Python es una de las estructuras ideales para iterar sobre los elementos de una secuencia. Para recorrer una tupla en Python utiliza la siguiente estructura:</p> <pre><code>&gt;&gt;&gt; colores = 'azul', 'blanco', 'negro'\n&gt;&gt;&gt; for color in colores:\n...   print(color)\nazul\nblanco\nnegro\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#modificar-una-tupla-en-python","title":"Modificar una tupla en Python","text":"<p>Como hemos dicho ya, las tuplas son objetos inmutables. No obstante, las tuplas pueden contener objetos u otros elementos de tipo secuencia, por ejemplo, una lista. Estos objetos, si son mutables, s\u00ed se pueden modificar:</p> <pre><code>&gt;&gt;&gt; tupla = (1, ['a', 'b'], 'hola', 8.2)\n&gt;&gt;&gt; tupla[1].append('c')  # tupla[1] hace referencia a la lista\n&gt;&gt;&gt; tupla\n(1, ['a', 'b', 'c'], 'hola', 8.2)\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#longitud-len-de-una-tupla-en-python","title":"Longitud (len) de una tupla en Python","text":"<p>Como cualquier tipo secuencia, para conocer la longitud de una tupla en Python se hace uso de la funci\u00f3n <code>len()</code>. Esta funci\u00f3n devuelve el n\u00famero de elementos de una tupla:</p> <pre><code>&gt;&gt;&gt; vocales = ('a', 'e', 'i', 'o', 'u')\n&gt;&gt;&gt; len(vocales)\n5\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#como-saber-si-un-elemento-esta-en-una-tupla-en-python","title":"C\u00f3mo saber si un elemento est\u00e1 en una tupla en Python","text":"<p>Como hemos visto en otras unidades, para saber si un elemento est\u00e1 contenido en una tupla, se utiliza el operador de pertenencia <code>in</code>:</p> <pre><code>&gt;&gt;&gt; colores = 'azul', 'blanco', 'negro'\n&gt;&gt;&gt; if 'azul' in colores:\n...     print('S\u00ed')\n...     \nS\u00ed\n&gt;&gt;&gt; if 'verde' not in colores:\n...     print('No')\n...     \nNo\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#listado-de-metodos-de-la-clase-tuple-en-python","title":"Listado de m\u00e9todos de la clase tuple en Python","text":"<p>Para terminar, se muestran los m\u00e9todos de la clase tuple en Python, que son los m\u00e9todos definidos para cualquier tipo secuencial:</p> M\u00e9todo Descripci\u00f3n <code>index(elemento)</code> Obtiene el \u00edndice de la primera ocurrencia del elemento en la tupla. Si el elemento no se encuentra, se lanza la excepci\u00f3n<code>ValueError</code>. <code>count(elemento)</code> Devuelve el n\u00famero de ocurrencias del elemento en la tupla.","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.2.-Tuplas/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/","title":"UD 3 - 3.3 Diccionarios","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#diccionarios","title":"Diccionarios","text":"<p>La clase dict de Python es un tipo mapa que asocia claves a valores. A diferencia de los tipos secuenciales <code>list</code>, <code>tuple</code>, <code>range</code> o <code>str</code>, que son indexados por un \u00edndice num\u00e9rico, los diccionarios son indexados por claves. Estas claves siempre deben ser de un tipo inmutable, concretamente un tipo hashable.</p> <p>\ud83c\udfaf NOTA: Un objeto es hashable si tiene un valor de hash que no cambia durante todo su ciclo de vida. En principio, los objetos que son instancias de clases definidas por el usuario son hashables. Tambi\u00e9n lo son la mayor\u00eda de tipos inmutables definidos por Python (<code>int</code>,<code>float</code> o <code>str</code>).</p> <p>Piensa siempre en un diccionario como un contenedor de pares clave: valor, en el que la clave puede ser de cualquier tipo hashable y es \u00fanica en el diccionario que la contiene. Generalmente, se suelen usar como claves los tipos <code>int</code> y <code>str</code> aunque, como se ha comentado, cualquier tipo hashable puede ser una clave.</p> <p>Las principales operaciones que se suelen realizar con diccionarios son almacenar un valor asociado a una clave y recuperar un valor a partir de una clave. Esta es la esencia de los diccionarios y es aqu\u00ed donde son realmente importantes. En un diccionario, el acceso a un elemento a partir de una clave es una operaci\u00f3n realmente r\u00e1pida, eficaz y que consume pocos recursos si lo comparamos con c\u00f3mo lo har\u00edamos con otros tipos de datos.</p> <p>Otras caracter\u00edsticas a resaltar de los diccionarios:</p> <ul> <li>Es un tipo mutable, es decir, su contenido se puede modificar despu\u00e9s de haber sido creado.</li> <li>Es un tipo ordenado. Preserva el orden en que se insertan los pares clave: valor.</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#como-crear-un-diccionario","title":"C\u00f3mo crear un diccionario","text":"<p>En Python hay varias formas de crear un diccionario. Las veremos todas a continuaci\u00f3n.</p> <p>La m\u00e1s simple es encerrar una secuencia de pares clave: valor separados por comas entre llaves <code>{}</code></p> <pre><code>&gt;&gt;&gt; d = {1: 'hola', 89: 'Pythonista', 'a': 'b', 'c': 27}\n</code></pre> <p>En el diccionario anterior, los enteros <code>1</code> y <code>89</code> y las cadenas <code>'a'</code> y <code>'c'</code> son las claves. Como ves, se pueden mezclar claves y valores de distinto tipo sin problema.</p> <p>Para crear un diccionario vac\u00edo, simplemente asigna a una variable el valor <code>{}</code>.</p> <p>Tambi\u00e9n se puede usar el constructor de la clase <code>dict()</code> de varias maneras:</p> <ul> <li>Sin par\u00e1metros . Esto crear\u00e1 un diccionario vac\u00edo.</li> <li>Con pares clave: valor encerrados entre llaves.</li> <li>Con argumentos con nombre. El nombre del argumento ser\u00e1 la clave en el diccionario. En este caso, las claves solo pueden ser identificadores v\u00e1lidos y mantienen el orden en el que se indican. No se podr\u00eda, por ejemplo, tener n\u00fameros enteros como claves.</li> <li>Pasando un iterable. En este caso, cada elemento del iterable debe ser tambi\u00e9n un iterable con solo dos elementos. El primero se toma como clave del diccionario y el segundo como valor. Si la clave aparece varias veces, el valor que prevalece es el \u00faltimo.</li> </ul> <p>Veamos un ejemplo con todo lo anterior. Vamos a crear el mismo diccionario de todos los modos que te he explicado:</p> <pre><code># 1. Pares clave: valor encerrados entre llaves\n&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3}\n# 2. Argumentos con nombre\n&gt;&gt;&gt; d2 = dict(uno=1, dos=2, tres=3)\n&gt;&gt;&gt; d2\n{'uno': 1, 'dos': 2, 'tres': 3}\n# 3. Pares clave: valor encerrados entre llaves\n&gt;&gt;&gt; d3 = dict({'uno': 1, 'dos': 2, 'tres': 3})\n&gt;&gt;&gt; d3\n{'uno': 1, 'dos': 2, 'tres': 3}\n# 4. Iterable que contiene iterables con dos elementos\n&gt;&gt;&gt; d4 = dict([('uno', 1), ('dos', 2), ('tres', 3)])\n&gt;&gt;&gt; d4\n{'uno': 1, 'dos': 2, 'tres': 3}\n# 5. Diccionario vac\u00edo\n&gt;&gt;&gt; d5 = {}\n&gt;&gt;&gt; d5\n{}\n# 6. Diccionario vac\u00edo usando el constructor\n&gt;&gt;&gt; d6 = dict()\n&gt;&gt;&gt; d6\n{}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#como-acceder-a-los-elementos-de-un-diccionario-en-python","title":"C\u00f3mo acceder a los elementos de un diccionario en Python","text":"<p>Acceder a un elemento de un diccionario es una de las principales operaciones por las que existe este tipo de dato. El acceso a un valor se realiza mediante indexaci\u00f3n de la clave. Para ello, simplemente encierra entre corchetes la clave del elemento <code>d[clave]</code>. En caso de que la clave no exista, se lanzar\u00e1 la excepci\u00f3n <code>KeyError</code>.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; d['dos']\n2\n&gt;&gt;&gt; d[4]\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 4\n&gt; \n</code></pre> <p>La clase <code>dict</code> tambi\u00e9n ofrece el m\u00e9todo <code>get(clave [, valor por defecto])</code>. Este m\u00e9todo devuelve el valor correspondiente a la clave <code>clave</code>. En caso de que la clave no exista no lanza ning\u00fan error, sino que devuelve el segundo argumento <code>valor por defecto</code>. Si no se proporciona este argumento, se devuelve el valor <code>None</code>.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; d.get('uno')\n1\n# Devuelve 4 como valor por defecto si no encuentra la clave\n&gt;&gt;&gt; d.get('cuatro', 4)\n4\n# Devuelve None como valor por defecto si no encuentra la clave\n&gt;&gt;&gt; a = d.get('cuatro')\n&gt;&gt;&gt; a\n&gt;&gt;&gt; type(a)\n&lt;class 'NoneType'&gt;\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#for-dict-python-recorrer-un-diccionario","title":"for dict Python \u2013 Recorrer un diccionario","text":"<p>Hay varias formas de recorrer los elementos de un diccionario: recorrer solo las claves, solo los valores o recorrer a la vez las claves y los valores. Puedes ver aqu\u00ed c\u00f3mo usar el bucle for para recorrer un diccionario.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; for e in d:\n...     print(e)\n... \nuno\ndos\ntres\n# Recorrer las claves del diccionario\n&gt;&gt;&gt; for k in d.keys():\n...     print(k)\n...   \nuno\ndos\ntres\n# Recorrer los valores del diccionario\n&gt;&gt;&gt; for v in d.values():\n...     print(v)\n...   \n1\n2\n3\n# Recorrer los pares clave valor\n&gt;&gt;&gt; for i in d.items():\n...     print(i)\n...   \n('uno', 1)\n('dos', 2)\n('tres', 3)\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#anadir-elementos-a-un-diccionario-en-python","title":"A\u00f1adir elementos a un diccionario en Python","text":"<p>Como hemos comentado, la clase <code>dict</code> es mutable, por lo que se pueden a\u00f1adir, modificar y/o eliminar elementos despu\u00e9s de haber creado un objeto de este tipo.</p> <p>Para a\u00f1adir un nuevo elemento a un diccionario existente, se usa el operador de asignaci\u00f3n <code>=</code>. A la izquierda del operador aparece el objeto diccionario con la nueva clave entre corchetes <code>[]</code> y a la derecha el valor que se asocia a dicha clave.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2}\n# A\u00f1ade un nuevo elemento al diccionario\n&gt;&gt;&gt; d['tres'] = 3\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3}\n</code></pre> <p>\ud83c\udfaf NOTA: Si la clave ya existe en el diccionario, se actualiza su valor.</p> <p>Tambi\u00e9n existe el m\u00e9todo <code>setdefault(clave[, valor])</code>. Este m\u00e9todo devuelve el valor de la clave si ya existe y, en caso contrario, le asigna el valor que se pasa como segundo argumento. Si no se especifica este segundo argumento, por defecto es <code>None</code>.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d.setdefault('uno', 1.0)\n1\n&gt;&gt;&gt; d.setdefault('tres', 3)\n3\n&gt;&gt;&gt; d.setdefault('cuatro')\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3, 'cuatro': None}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#modificar-elementos-de-un-diccionario","title":"Modificar elementos de un diccionario","text":"<p>En el apartado anterior hemos visto que para actualizar el valor asociado a una clave, simplemente se asigna un nuevo valor a dicha clave del diccionario.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d['uno'] = 1.0\n&gt;&gt;&gt; d\n{'uno': 1.0, 'dos': 2}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#eliminar-un-elemento-de-un-diccionario-en-python","title":"Eliminar un elemento de un diccionario en Python","text":"<p>En Python existen diversos modos de eliminar un elemento de un diccionario. Son los siguientes:</p> <ul> <li><code>pop(clave [, valor por defecto])</code>: Si la <code>clave</code> est\u00e1 en el diccionario, elimina el elemento y devuelve su valor; si no, devuelve el <code>valor por defecto</code>. Si no se proporciona el <code>valor por defecto</code> y la <code>clave</code> no est\u00e1 en el diccionario, se lanza la excepci\u00f3n <code>KeyError</code>.</li> <li><code>popitem()</code>: Elimina el \u00faltimo par clave: valor del diccionario y lo devuelve. Si el diccionario est\u00e1 vac\u00edo se lanza la excepci\u00f3n <code>KeyError</code>. (NOTA: En versiones anteriores a Python 3.7, se elimina/devuelve un par aleatorio, no se garantiza que sea el \u00faltimo).</li> <li><code>del d[clave]</code>: Elimina el par  clave: valor . Si no existe la clave, se lanza la excepci\u00f3n <code>KeyError</code>.</li> <li><code>clear()</code>: Borra todos los pares clave: valor del diccionario.</li> </ul> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3, 'cuatro': 4, 'cinco': 5}\n# Elimina un elemento con pop()\n&gt;&gt;&gt; d.pop('uno')\n1\n&gt;&gt;&gt; d\n{'dos': 2, 'tres': 3, 'cuatro': 4, 'cinco': 5}\n# Trata de eliminar una clave con pop() que no existe\n&gt;&gt;&gt; d.pop(6)\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 6\n# Elimina un elemento con popitem()\n&gt;&gt;&gt; d.popitem()\n('cinco', 5)\n&gt;&gt;&gt; d\n{'dos': 2, 'tres': 3, 'cuatro': 4}\n# Elimina un elemento con del\n&gt;&gt;&gt; del d['tres']\n&gt;&gt;&gt; d\n{'dos': 2, 'cuatro': 4}\n# Trata de eliminar una clave con del que no existe\n&gt;&gt;&gt; del d['seis']\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 'seis'\n# Borra todos los elementos del diccionario\n&gt;&gt;&gt; d.clear()\n&gt;&gt;&gt; d\n{}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#numero-de-elementos-len-de-un-diccionario-en-python","title":"N\u00famero de elementos (len) de un diccionario en Python","text":"<p>Al igual que sucede con otros tipos contenedores, se puede usar la funci\u00f3n de Python <code>len()</code> para obtener el n\u00famero de elementos de un diccionario.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; len(d)\n3\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#comprobar-si-un-elemento-esta-en-un-diccionario-en-python","title":"Comprobar si un elemento est\u00e1 en un diccionario en Python","text":"<p>Al operar con diccionarios, se puede usar el operador de pertenencia <code>in</code> para comprobar si una clave est\u00e1 contenida, o no, en un diccionario. Esto resulta \u00fatil, por ejemplo, para asegurarnos de que una clave existe antes de intentar eliminarla.</p> <pre><code>&gt;&gt;&gt; print('uno' in d)\nTrue\n&gt;&gt;&gt; print(1 in d)\nFalse\n&gt;&gt;&gt; print(1 not in d)\nTrue\n# Intenta eliminar la clave 1 si existe\n&gt;&gt;&gt; if 1 in d:\n...     del d[1]\n...   \n&gt;&gt;&gt; d\n{'uno': 1, 'dos': 2, 'tres': 3}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#comparar-si-dos-diccionarios-son-iguales","title":"Comparar si dos diccionarios son iguales","text":"<p>En Python se puede utilizar el operador de igualdad <code>==</code> para comparar si dos diccionarios son iguales.  Dos diccionarios son iguales si contienen el mismo conjunto de pares clave: valor , independientemente del orden que tengan.</p> <p>Otro tipo de comparaciones entre diccionarios no est\u00e1n permitidas. Si se intenta, el int\u00e9rprete lanzar\u00e1 la excepci\u00f3n <code>TypeError</code>.</p> <pre><code>&gt;&gt;&gt; d1 = {'uno': 1, 'dos': 2}\n&gt;&gt;&gt; d2 = {'dos': 2, 'uno': 1}\n&gt;&gt;&gt; d3 = {'uno': 1}\n&gt;&gt;&gt; print(d1 == d2)\nTrue\n&gt;&gt;&gt; print(d1 == d3)\nFalse\n&gt;&gt;&gt; print(d1 &gt; d2)\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nTypeError: '&gt;' not supported between instances of 'dict' and 'dict'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#diccionarios-anidados-en-python","title":"Diccionarios anidados en Python","text":"<p>Un diccionario puede contener un valor de cualquier tipo, entre ellos, otro diccionario. Este hecho se conoce como diccionarios anidados.</p> <p>Para acceder al valor de una de las claves de un diccionario interno, se usa el operador de indexaci\u00f3n anidada <code>[clave1][clave2]...</code></p> <p>Ve\u00e1moslo con un ejemplo:</p> <pre><code>&gt;&gt;&gt; d = {'d1': {'k1': 1, 'k2': 2}, 'd2': {'k1': 3, 'k4': 4}}\n&gt;&gt;&gt; d['d1']['k1']\n1\n&gt;&gt;&gt; d['d2']['k1']\n3\n&gt;&gt;&gt; d['d2']['k4']\n4\n&gt;&gt;&gt; d['d3']['k4']\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 'd3'\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#obtener-una-lista-con-las-claves-de-un-diccionario","title":"Obtener una lista con las claves de un diccionario","text":"<p>En ocasiones, es necesario tener almacenado en una lista las claves de un diccionario. Para ello, simplemente pasa el diccionario como argumento del constructor <code>list()</code>. Esto devolver\u00e1 las claves del diccionario en una lista.</p> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n&gt;&gt;&gt; list(d)\n['uno', 'dos', 'tres']\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#objetos-vista-de-un-diccionario","title":"Objetos vista de un diccionario","text":"<p>La clase dict implementa tres m\u00e9todos muy particulares, dado que devuelven un tipo de dato, iterable, conocido como objetos vista. Estos objetos ofrecen una vista de las claves y valores contenidos en el diccionario y si el diccionario se modifica, dichos objetos se actualizan al instante.</p> <p>Los m\u00e9todos son los siguientes:</p> <ul> <li><code>keys()</code>: Devuelve una vista de las claves del diccionario.</li> <li><code>values()</code>: Devuelve una vista de los valores del diccionario.</li> <li><code>items()</code>: Devuelve una vista de pares (clave, valor) del diccionario.</li> </ul> <pre><code>&gt;&gt;&gt; d = {'uno': 1, 'dos': 2, 'tres': 3}\n# d.keys() es diferente a list(d), aunque ambos\n# contengan las claves del diccionario\n# d.keys() es de tipo dict_keys y list(d) es de tipo list\n&gt;&gt;&gt; v = d.keys()\n&gt;&gt;&gt; type(v)\n&lt;class 'dict_keys'&gt;\n&gt;&gt;&gt; v\ndict_keys(['uno', 'dos', 'tres'])\n&gt;&gt;&gt; l = list(d)\n&gt;&gt;&gt; type(l)\n&lt;class 'list'&gt;\n&gt;&gt;&gt; l\n['uno', 'dos', 'tres']\n&gt;&gt;&gt; v = d.values()\n&gt;&gt;&gt; type(v)\n&lt;class 'dict_values'&gt;\n&gt;&gt;&gt; v\ndict_values([1, 2, 3])\n&gt;&gt;&gt; v = d.items()\n&gt;&gt;&gt; type(v)\n&lt;class 'dict_items'&gt;\n&gt;&gt;&gt; v\ndict_items([('uno', 1), ('dos', 2), ('tres', 3)])\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#listado-de-metodos-de-la-clase-dict","title":"Listado de m\u00e9todos de la clase dict","text":"<p>Finalmente, enumeramos 0el listado de los principales m\u00e9todos de la clase dict. Algunos de ellos ya los hemos visto durante la unidad:</p> M\u00e9todo Descripci\u00f3n <code>clear()</code> Elimina todos los elementos del diccionario. <code>copy()</code> Devuelve una copia poco profunda del diccionario. <code>get(clave[, valor])</code> Devuelve el valor de la<code>clave</code>. Si no existe, devuelve el valor <code>valor</code> si se indica y si no, <code>None</code>. <code>items()</code> Devuelve una vista de los pares*clave: valor* del diccionario. <code>keys()</code> Devuelve una vista de las claves del diccionario. <code>pop(clave[, valor])</code> Devuelve el valor del elemento cuya clave es<code>clave</code> y elimina el elemento del diccionario. Si la clave no se encuentra, devuelve <code>valor</code> si se proporciona. Si la clave no se encuentra y no se indica <code>valor</code>, lanza la excepci\u00f3n <code>KeyError</code>. <code>popitem()</code> Devuelve un par*(clave, valor)* aleatorio del diccionario. Si el diccionario est\u00e1 vac\u00edo, lanza la excepci\u00f3n<code>KeyError</code>. <code>setdefault(clave[, valor])</code> Si la<code>clave</code> est\u00e1 en el diccionario, devuelve su valor. Si no lo est\u00e1, inserta la <code>clave</code> con el valor <code>valor</code> y lo devuelve (si no se especifica <code>valor</code>, por defecto es <code>None</code>). <code>update(iterable)</code> Actualiza el diccionario con los pares*clave: valor* del <code>iterable</code>. <code>values()</code> Devuelve una vista de los valores del diccionario.","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#depuracion","title":"Depuraci\u00f3n","text":"<p>Conforme trabajes con conjuntos de datos m\u00e1s grandes puede ser complicado depurar imprimiendo y revisando los datos a mano. Aqu\u00ed hay algunas sugerencias para depurar grandes conjuntos de datos:</p> <ul> <li>Reducir la entrada: Si es posible, trata de reducir el tama\u00f1o del conjunto de datos. Por ejemplo, si el programa lee un archivo de texto, comienza solamente con las primeras 10 l\u00edneas, o con el ejemplo m\u00e1s peque\u00f1o que puedas encontrar. Puedes ya sea editar los archivos directamente, o (mejor) modificar el programa para que solamente lea las primeras <code>n</code> n\u00famero de l\u00edneas.</li> </ul> <p>Si hay un error, puedes reducir <code>n</code> al valor m\u00e1s peque\u00f1o que produce el error, y despu\u00e9s incrementarlo gradualmente conforme vayas encontrando y corrigiendo errores.</p> <ul> <li>Revisar extractos y tipos: En lugar de imprimir y revisar el conjunto de datos completo, considera imprimir extractos de los datos: por ejemplo, el n\u00famero de elementos en un diccionario o el total de una lista de n\u00fameros.</li> </ul> <p>Una causa com\u00fan de errores en tiempo de ejecuci\u00f3n es un valor que no es el tipo correcto. Para depurar este tipo de error, generalmente es suficiente con imprimir el tipo de un valor.</p> <ul> <li>Escribe auto-verificaciones: Algunas veces puedes escribir c\u00f3digo para revisar errores autom\u00e1ticamente. Por ejemplo, si est\u00e1s calculando el promedio de una lista de n\u00fameros, podr\u00edas verificar que el resultado no sea m\u00e1s grande que el elemento m\u00e1s grande de la lista o que sea menor que el elemento m\u00e1s peque\u00f1o de la lista. Esto es llamado \u201cprueba de sanidad\u201d porque detecta resultados que son \u201ccompletamente il\u00f3gicos\u201d.</li> </ul> <p>Otro tipo de prueba compara los resultados de dos diferentes c\u00e1lculos para ver si son consistentes. Esto es conocido como \u201cprueba de consistencia\u201d.</p> <p>Imprimir una salida ordenada: Dar un formato a los mensajes de depuraci\u00f3n puede facilitar encontrar un error. </p> <p>De nuevo, el tiempo que inviertas haciendo una buena estructura puede reducir el tiempo que inviertas en depurar.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.3.-Diccionarios/#fuente","title":"Fuente","text":"<ul> <li>Pagina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/","title":"UD 3 - 3.4 Conjuntos","text":"","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#conjuntos","title":"Conjuntos","text":"<p>El tipo set en Python es la clase utilizada por el lenguaje para representar los conjuntos. Un conjunto es una colecci\u00f3n desordenada de elementos \u00fanicos, es decir, que no se repiten.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#que-es-el-tipo-set-en-python","title":"Qu\u00e9 es el tipo set en Python","text":"<p>La principal caracter\u00edstica de este tipo de datos es que es una colecci\u00f3n cuyos elementos no guardan ning\u00fan orden y que adem\u00e1s son \u00fanicos.</p> <p>Estas caracter\u00edsticas hacen que los principales usos de esta clase sean conocer si un elemento pertenece o no a una colecci\u00f3n y eliminar duplicados de un tipo secuencial (list, tuple o str).</p> <p>Adem\u00e1s, esta clase tambi\u00e9n implementa las t\u00edpicas operaciones matem\u00e1ticas sobre conjuntos:  uni\u00f3n ,  intersecci\u00f3n ,  diferencia , \u2026</p> <p>Para crear un conjunto, basta con encerrar una serie de elementos entre llaves <code>{}</code>, o bien usar el constructor de la clase <code>set()</code> y pasarle como argumento un objeto iterable (como una  lista , una  tupla , una cadena \u2026).</p> <pre><code># Crea un conjunto con una serie de elementos entre llaves\n# Los elementos repetidos se eliminan\n&gt;&gt;&gt; c = {1, 3, 2, 9, 3, 1}\n&gt;&gt;&gt; c\n{1, 2, 3, 9}\n# Crea un conjunto a partir de un string\n# Los caracteres repetidos se eliminan\n&gt;&gt;&gt; a = set('Hola Pythonista')\n&gt;&gt;&gt; a\n{'a', 'H', 'h', 'y', 'n', 's', 'P', 't', ' ', 'i', 'l', 'o'}\n# Crea un conjunto a partir de una lista\n# Los elementos repetidos de la lista se eliminan\n&gt;&gt;&gt; unicos = set([3, 5, 6, 1, 5])\n&gt;&gt;&gt; unicos\n{1, 3, 5, 6}\n</code></pre> <p>Para crear un conjunto vac\u00edo, simplemente llama al constructor <code>set()</code> sin par\u00e1metros.</p> <p>\u2757\ufe0f  **IMPORTANTE: ** <code>{}</code> NO crea un conjunto vac\u00edo, sino un diccionario vac\u00edo. Usa <code>set()</code> si quieres crear un conjunto sin elementos.</p> <p>\ud83c\udfaf NOTA: Los elementos que se pueden a\u00f1adir a un conjunto deben ser de tipo  hashable . Un objeto es hashable si tiene un valor de hash que no cambia durante todo su ciclo de vida. En principio, los objetos que son instancias de clases definidas por el usuario son  hashables . Tambi\u00e9n lo son la mayor\u00eda de tipos inmutables definidos por Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#set-vs-frozenset","title":"set vs frozenset","text":"<p>En realidad, en Python existen dos clases para representar conjuntos: <code>set</code> y <code>frozenset</code>. La principal diferencia es que <code>set</code> es mutable, por lo que despu\u00e9s de ser creado, se pueden a\u00f1adir y/o eliminar elementos del conjunto, como veremos en secciones posteriores. Por su parte, <code>frozenset</code> es inmutable y su contenido no puede ser modificado una vez que ha sido inicializado.</p> <p>Para crear un conjunto de tipo <code>frozenset</code>, se usa el constructor de la clase <code>frozenset()</code>:</p> <pre><code>&gt;&gt;&gt; f = frozenset([3, 5, 6, 1, 5])\n&gt;&gt;&gt; f\nfrozenset({1, 3, 5, 6})\n</code></pre> <p>\ud83c\udfaf NOTA: El \u00fanico modo en Python de tener un conjunto de conjuntos es utilizando objetos de tipo frozenset como elementos del propio conjunto.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#como-acceder-a-los-elementos-de-un-conjunto-en-python","title":"C\u00f3mo acceder a los elementos de un conjunto en Python","text":"<p>Dado que los conjuntos son colecciones desordenadas, en ellos no se guarda la posici\u00f3n en la que son insertados los elementos como ocurre en los tipos <code>list</code> o <code>tuple</code>. Es por ello que no se puede acceder a los elementos a trav\u00e9s de un \u00edndice.</p> <p>Sin embargo, s\u00ed se puede acceder y/o recorrer todos los elementos de un conjunto usando un bucle for:</p> <pre><code>&gt;&gt;&gt; mi_conjunto = {1, 3, 2, 9, 3, 1}\n&gt;&gt;&gt; for e in mi_conjunto:\n...     print(e)\n...     \n1\n2\n3\n9\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#anadir-elementos-a-un-conjunto-set-en-python","title":"A\u00f1adir elementos a un conjunto (set) en Python","text":"<p>Para a\u00f1adir un elemento a un conjunto se utiliza el m\u00e9todo <code>add()</code>. Tambi\u00e9n existe el m\u00e9todo <code>update()</code>, que puede tomar como argumento una lista, tupla, string, conjunto o cualquier objeto de tipo iterable.</p> <pre><code>&gt;&gt;&gt; mi_conjunto = {1, 3, 2, 9, 3, 1}\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 9}\n# A\u00f1ade el elemento 7 al conjunto\n&gt;&gt;&gt; mi_conjunto.add(7)\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 7, 9}\n# A\u00f1ade los elementos 5, 3, 4 y 6 al conjunto\n# Los elementos repetidos no se a\u00f1aden al conjunto\n&gt;&gt;&gt; mi_conjunto.update([5, 3, 4, 6])\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 4, 5, 6, 7, 9}\n</code></pre> <p>\ud83c\udfaf NOTA: <code>add()</code> y <code>update()</code> no a\u00f1aden elementos que ya existen al conjunto.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#eliminar-un-elemento-de-un-conjunto-en-python","title":"Eliminar un elemento de un conjunto en Python","text":"<p>La clase <code>set</code> ofrece cuatro m\u00e9todos para eliminar elementos de un conjunto. Son: <code>discard()</code>, <code>remove()</code>, <code>pop()</code> y <code>clear()</code>. A continuaci\u00f3n se explica qu\u00e9 hace cada uno de ellos.</p> <ul> <li><code>discard(elemento)</code> y <code>remove(elemento)</code> eliminan <code>elemento</code> del conjunto. La \u00fanica diferencia es que si <code>elemento</code> no existe, <code>discard()</code> no hace nada mientras que <code>remove()</code> lanza la excepci\u00f3n <code>KeyError</code>.</li> <li><code>pop()</code> es un tanto peculiar. Este m\u00e9todo devuelve un elemento aleatorio del conjunto y lo elimina del mismo. Si el conjunto est\u00e1 vac\u00edo, lanza la excepci\u00f3n <code>KeyError</code>.</li> <li><code>clear()</code> elimina todos los elementos contenidos en el conjunto.</li> </ul> <pre><code>&gt;&gt;&gt; mi_conjunto = {1, 3, 2, 9, 3, 1, 6, 4, 5}\n&gt;&gt;&gt; mi_conjunto\n{1, 2, 3, 4, 5, 6, 9}\n# Elimina el elemento 1 con remove()\n&gt;&gt;&gt; mi_conjunto.remove(1)\n&gt;&gt;&gt; mi_conjunto\n{2, 3, 4, 5, 6, 9}\n# Elimina el elemento 4 con discard()\n&gt;&gt;&gt; mi_conjunto.discard(4)\n&gt;&gt;&gt; mi_conjunto\n{2, 3, 5, 6, 9}\n# Trata de eliminar el elemento 7 (no existe) con remove()\n# Lanza la excepci\u00f3n KeyError\n&gt;&gt;&gt; mi_conjunto.remove(7)\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 7\n# Trata de eliminar el elemento 7 (no existe) con discard()\n# No hace nada\n&gt;&gt;&gt; mi_conjunto.discard(7)\n&gt;&gt;&gt; mi_conjunto\n{2, 3, 5, 6, 9}\n# Obtiene y elimina un elemento aleatorio con pop()\n&gt;&gt;&gt; mi_conjunto.pop()\n2\n&gt;&gt;&gt; mi_conjunto\n{3, 5, 6, 9}\n# Elimina todos los elementos del conjunto\n&gt;&gt;&gt; mi_conjunto.clear()\n&gt;&gt;&gt; mi_conjunto\nset()\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#numero-de-elementos-len-de-un-conjunto","title":"N\u00famero de elementos (len) de un conjunto","text":"<p>Como con cualquier otra colecci\u00f3n, puedes usar la funci\u00f3n <code>len()</code> para obtener el n\u00famero de elementos contenidos en un conjunto:</p> <pre><code>&gt;&gt;&gt; mi_conjunto = set([1, 2, 5, 3, 1, 5])\n&gt;&gt;&gt; len(mi_conjunto)\n4\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#como-saber-si-un-elemento-esta-en-un-conjunto","title":"C\u00f3mo saber si un elemento est\u00e1 en un conjunto","text":"<p>Con los conjuntos tambi\u00e9n se puede usar el operador de pertenencia <code>in</code> para comprobar si un elemento est\u00e1 contenido, o no, en un conjunto: <pre><code>&gt;&gt;&gt; mi_conjunto = set([1, 2, 5, 3, 1, 5])\n&gt;&gt;&gt; print(1 in mi_conjunto)\nTrue\n&gt;&gt;&gt; print(6 in mi_conjunto)\nFalse\n&gt;&gt;&gt; print(2 not in mi_conjunto)\nFalse\n</code></pre></p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#operaciones-sobre-conjuntos-en-python-set-operations","title":"Operaciones sobre conjuntos en Python (set operations)","text":"<p>Uno de los principales usos del tipo <code>set</code> es utilizarlo en operaciones del \u00e1lgebra de conjuntos: uni\u00f3n, intersecci\u00f3n, diferencia, diferencia sim\u00e9trica, \u2026</p> <p>A continuaci\u00f3n veremos c\u00f3mo llevar a cabo estas operaciones en Python.</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#union-de-conjuntos-en-python","title":"Uni\u00f3n de conjuntos en Python","text":"<p>La uni\u00f3n de dos conjuntos A y B es el conjunto A \u222a B que contiene todos los elementos de A y de B.</p> <p>En Python se utiliza el operador <code>|</code> para realizar la uni\u00f3n de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\n&gt;&gt;&gt; a | b\n{1, 2, 3, 4, 6, 8}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#interseccion-de-conjuntos-en-python","title":"Intersecci\u00f3n de conjuntos en Python","text":"<p>La intersecci\u00f3n de dos conjuntos A y B es el conjunto A \u2229 B que contiene todos los elementos comunes de A y B.</p> <p>En Python se utiliza el operador <code>&amp;</code> para realizar la intersecci\u00f3n de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\n&gt;&gt;&gt; a &amp; b\n{2, 4}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#diferencia-de-conjuntos-en-python","title":"Diferencia de conjuntos en Python","text":"<p>La diferencia entre dos conjuntos A y B es el conjunto A  B que contiene todos los elementos de A que no pertenecen a B.</p> <p>En Python se utiliza el operador <code>-</code> para realizar la diferencia de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\n&gt;&gt;&gt; a - b\n{1, 3}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#diferencia-simetrica-de-conjuntos-en-python","title":"Diferencia sim\u00e9trica de conjuntos en Python","text":"<p>La diferencia sim\u00e9trica entre dos conjuntos A y B es el conjunto que contiene los elementos de A y B que no son comunes.</p> <p>En Python se utiliza el operador <code>^</code> para realizar la diferencia sim\u00e9trica de dos o m\u00e1s conjuntos.</p> <pre><code>&gt;&gt;&gt; a = {1, 2, 3, 4}\n&gt;&gt;&gt; b = {2, 4, 6, 8}\na ^ b\n{1, 3, 6, 8}\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#inclusion-de-conjuntos-en-python","title":"Inclusi\u00f3n de conjuntos en Python","text":"<p>Dado un conjunto A, subcolecci\u00f3n del conjunto B o igual a este, sus elementos son un subconjunto de B. Es decir, A es un subconjunto de B y B es un superconjunto de A.</p> <p>En Python se utiliza el operador <code>&lt;=</code> para comprobar si un conjunto A es subconjunto de B y el operador <code>&gt;=</code> para comprobar si un conjunto A es superconjunto de B.</p> <pre><code>&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2, 3, 4}\n&gt;&gt;&gt; a &lt;= b\nTrue\n&gt;&gt;&gt; a &gt;= b\nFalse\n&gt;&gt;&gt; b &gt;= a\nTrue\n&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2}\n&gt;&gt;&gt; a &lt; b  # Ojo al operador &lt; sin el =\nFalse\n&gt;&gt;&gt; a &lt;= b\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#conjuntos-disjuntos-en-python","title":"Conjuntos disjuntos en Python","text":"<p>Dos conjuntos A y B son disjuntos si no tienen elementos en com\u00fan, es decir, la intersecci\u00f3n de A y B es el conjunto vac\u00edo.</p> <p>En Python se utiliza el m\u00e9todo <code>isdisjoint()</code> de la clase <code>set</code> para comprobar si un conjunto es disjunto de otro.</p> <pre><code>&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2, 3, 4}\n&gt;&gt;&gt; a.isdisjoint(b)\nFalse\n&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {3, 4}\n&gt;&gt;&gt; a.isdisjoint(b)\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#igualdad-de-conjuntos-en-python","title":"Igualdad de conjuntos en Python","text":"<p>En Python dos conjuntos son iguales si y solo si todos los elementos de un conjunto est\u00e1n contenidos en el otro. Esto quiere decir que cada uno es un subconjunto del otro.</p> <pre><code>&gt;&gt;&gt; a = {1, 2}\n&gt;&gt;&gt; b = {1, 2}\n&gt;&gt;&gt; id(a)\n4475070656\n&gt;&gt;&gt; id(b)\n4475072096\n&gt;&gt;&gt; a == b\nTrue\n</code></pre>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#metodos-de-la-clase-set-en-python","title":"M\u00e9todos de la clase set en Python","text":"<p>Se finaliza, listando los m\u00e9todos principales de la clase <code>set</code> en Python:</p> M\u00e9todo Descripci\u00f3n <code>add(e)</code> A\u00f1ade un elemento al conjunto. <code>clear()</code> Elimina todos los elementos del conjunto. <code>copy()</code> Devuelve una copia superficial del conjunto. <code>difference(iterable)</code> Devuelve la diferencia del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>difference_update(iterable)</code> Actualiza el conjunto tras realizar la diferencia con el<code>iterable</code>. <code>discard(e)</code> Elimina, si existe, el elemento del conjunto. <code>intersection(iterable)</code> Devuelve la intersecci\u00f3n del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>intersection_update(iterable)</code> Actualiza el conjunto tras realizar la intersecci\u00f3n con el<code>iterable</code>. <code>isdisjoint(iterable)</code> Devuelve<code>True</code> si dos conjuntos son disjuntos. <code>issubset(iterable)</code> Devuelve<code>True</code> si el conjunto es subconjunto del <code>iterable</code>. <code>issuperset(iterable)</code> Devuelve<code>True</code> si el conjunto es superconjunto del <code>iterable</code>. <code>pop()</code> Obtiene y elimina un elemento de forma aleatoria del conjunto. <code>remove(e)</code> Elimina el elemento del conjunto. Si no existe lanza un error. <code>symmetric_difference(iterable)</code> Devuelve la diferencia sim\u00e9trica del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>symmetric_difference_update(iterable)</code> Actualiza el conjunto tras realizar la diferencia sim\u00e9trica con el<code>iterable</code>. <code>union(iterable)</code> Devuelve la uni\u00f3n del conjunto con el<code>iterable</code> como un conjunto nuevo. <code>update(iterable)</code> Actualiza el conjunto tras realizar la uni\u00f3n con el<code>iterable</code>. <p>\u2757\ufe0f NOTA: Los operadores <code>|</code>, <code>&amp;</code>, \u2026 toman siempre como operandos objetos de tipo <code>set</code>. Sin embargo, sus respectivas versiones como m\u00e9todos <code>union()</code>, <code>intersection()</code>, \u2026 toman como argumentos un iterable ( lista ,  tupla ,  conjunto , etc.).</p>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.4.-Conjuntos/#fuente","title":"Fuente","text":"<ul> <li>P\u00e1gina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> <li>Operaciones con conjuntos</li> </ul>","tags":["Software"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/","title":"UD 3 - 3.5 Funciones","text":"","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#funciones","title":"Funciones","text":"<p>Las funciones en Python, y en cualquier lenguaje de programaci\u00f3n, son estructuras esenciales de c\u00f3digo. Una funci\u00f3n es un grupo de instrucciones que constituyen una unidad l\u00f3gica del programa y resuelven un problema muy concreto.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#que-son-las-funciones-en-python","title":"Qu\u00e9 son las funciones en Python","text":"<p>Las funciones en Python constituyen unidades l\u00f3gicas de un programa y tienen un doble objetivo:</p> <ul> <li>Dividir y organizar el c\u00f3digo en partes m\u00e1s sencillas.</li> <li>Encapsular el c\u00f3digo que se repite a lo largo de un programa para ser reutilizado.</li> </ul> <p>Python ya define de serie un conjunto de funciones que podemos utilizar directamente en nuestras aplicaciones. Algunas de ellas ya las has utilizado. Por ejemplo, la funci\u00f3n <code>len()</code>, que obtiene el n\u00famero de elementos de un objeto contenedor como una lista, una tupla, un diccionario o un conjunto. Tambi\u00e9n hemos visto la funci\u00f3n <code>print()</code>, que muestra por consola un texto.</p> <p>Puedes encontrar una lista de funciones predefinidas en Python aqu\u00ed</p> <p>Sin embargo, t\u00fa como programador, puedes definir tus propias funciones para estructurar el c\u00f3digo de manera que sea m\u00e1s legible y para reutilizar aquellas partes que se repiten a lo largo de una aplicaci\u00f3n. Esto es una tarea fundamental a medida que va creciendo el n\u00famero de l\u00edneas de un programa.</p> <p>La idea la puedes observar en la siguiente imagen: </p> <p>En principio, un programa es una secuencia ordenada de instrucciones que se ejecutan una a continuaci\u00f3n de la otra. Sin embargo, cuando se utilizan funciones, puedes agrupar parte de esas instrucciones como una unidad m\u00e1s peque\u00f1a que ejecuta dichas instrucciones y suele devolver un resultado.</p> <p>En el siguiente apartado te muestro c\u00f3mo definir una funci\u00f3n en Python.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#como-definir-una-funcion-en-python","title":"C\u00f3mo definir una funci\u00f3n en Python","text":"<p>La siguiente imagen muestra el esquema de una funci\u00f3n en Python:</p> <p></p> <p>Para definir una funci\u00f3n en Python: * Se utiliza la palabra reservada <code>def</code>.  * A continuaci\u00f3n viene el nombre o identificador de la funci\u00f3n que es el que se utiliza para invocarla.  * Despu\u00e9s del nombre hay que incluir los par\u00e9ntesis y una lista opcional de par\u00e1metros.  * Por \u00faltimo, la cabecera o definici\u00f3n de la funci\u00f3n termina con dos puntos.</p> <p>Tras los dos puntos se incluye el cuerpo de la funci\u00f3n (con un sangrado mayor, generalmente cuatro espacios) que no es m\u00e1s que el conjunto de instrucciones que se encapsulan en dicha funci\u00f3n y que le dan significado.</p> <p>En \u00faltimo lugar y de manera opcional, se a\u00f1ade la instrucci\u00f3n con la palabra reservada <code>return</code> para devolver un resultado.</p> <p>\u2757NOTA: Cuando la primera instrucci\u00f3n de una funci\u00f3n es un <code>string</code> encerrado entre tres comillas simples <code>'''</code> o dobles <code>\"\"\"</code>, a dicha instrucci\u00f3n se le conoce como <code>docstring</code>. El <code>docstring</code> es una cadena que se utiliza para documentar la funci\u00f3n, es decir, indicar qu\u00e9 hace dicha funci\u00f3n.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#como-usar-o-llamar-a-una-funcion","title":"C\u00f3mo usar o llamar a una funci\u00f3n","text":"<p>Para usar o invocar a una funci\u00f3n, simplemente hay que escribir su nombre como si de una instrucci\u00f3n m\u00e1s se tratara. Eso s\u00ed, pasando los argumentos necesarios seg\u00fan los par\u00e1metros que defina la funci\u00f3n.</p> <p>Ve\u00e1moslo con un ejemplo. Vamos a crear una funci\u00f3n que muestra por pantalla el resultado de multiplicar un n\u00famero por cinco:</p> <pre><code>def multiplica_por_5(numero):\nprint(f'{numero} * 5 = {numero * 5}')\nprint('Comienzo del programa')    \nmultiplica_por_5(7)\nprint('Siguiente')\nmultiplica_por_5(113)\nprint('Fin')\n</code></pre> <p>La funci\u00f3n <code>multiplica_por_5()</code> define un par\u00e1metro llamado numero que es el que se utiliza para multiplicar por 5. El resultado del programa anterior ser\u00eda el siguiente:</p> <pre><code>Comienzo del programa\n7 * 5 = 35\nSiguiente\n113 * 5 = 565\nFin\n</code></pre> <p>Como puedes observar, el programa comienza su ejecuci\u00f3n en la l\u00ednea 4 y va ejecutando las instrucciones una a una de manera ordenada. Cuando se encuentra el nombre de la funci\u00f3n <code>multiplica_por_5()</code>, el flujo de ejecuci\u00f3n pasa a la primera instrucci\u00f3n de la funci\u00f3n. Cuando se llega a la \u00faltima instrucci\u00f3n de la funci\u00f3n, el flujo del programa sigue por la instrucci\u00f3n que hay a continuaci\u00f3n de la llamada de la funci\u00f3n.</p> <p>\u2757IMPORTANTE: Diferencia entre par\u00e1metro y  argumento . La funci\u00f3n <code>multiplica_por_5()</code> define un par\u00e1metro llamado <code>numero</code>. Sin embargo, cuando desde el c\u00f3digo se invoca a la funci\u00f3n, por ejemplo, <code>multiplica_por_5(7)</code>, se dice que se llama a multiplica por cinco con el argumento <code>7</code>.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#sentencia-return","title":"Sentencia return","text":"<p>Se indicaba anteriormente que cuando acaba la \u00faltima instrucci\u00f3n de una funci\u00f3n, el flujo del programa contin\u00faa por la instrucci\u00f3n que sigue a la llamada de dicha funci\u00f3n. Hay una excepci\u00f3n: usar la sentencia <code>return</code>. <code>return</code> hace que termine la ejecuci\u00f3n de la funci\u00f3n cuando aparece y el programa contin\u00faa por su flujo normal.</p> <p>Adem\u00e1s, <code>return</code> se puede utilizar para devolver un valor.</p> <p>La sentencia <code>return</code> es opcional, puede devolver, o no, un valor y es posible que aparezca m\u00e1s de una vez dentro de una misma funci\u00f3n.</p> <p>A continuaci\u00f3n hay varios ejemplos:</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#return-que-no-devuelve-ningun-valor","title":"return que no devuelve ning\u00fan valor","text":"<p>La siguiente funci\u00f3n muestra por pantalla el cuadrado de un n\u00famero solo si este es par:</p> <pre><code>&gt;&gt;&gt; def cuadrado_de_par(numero):\n...     if not numero % 2 == 0:\n...         return\n...     else:\n...         print(numero ** 2)\n...     \n&gt;&gt;&gt; cuadrado_de_par(8)\n64\n&gt;&gt;&gt; cuadrado_de_par(3)\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#varios-return-en-una-misma-funcion","title":"Varios return en una misma funci\u00f3n","text":"<p>La funci\u00f3n es_par() devuelve True si un n\u00famero es par y False en caso contrario:</p> <pre><code>&gt;&gt;&gt; def es_par(numero):\n...     if numero % 2 == 0:\n...         return True\n...     else:\n...         return False\n...     \n&gt;&gt;&gt; es_par(2)\nTrue\n&gt;&gt;&gt; es_par(5)\nFalse\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#devolver-mas-de-un-valor-con-return-en-python","title":"Devolver m\u00e1s de un valor con return en Python","text":"<p>En Python, es posible devolver m\u00e1s de un valor con una sola sentencia <code>return</code>. Por defecto, con <code>return</code> se puede devolver una tupla de valores. Un ejemplo ser\u00eda la siguiente funci\u00f3n <code>cuadrado_y_cubo()</code> que devuelve el cuadrado y el cubo de un n\u00famero:</p> <pre><code>&gt;&gt;&gt; def cuadrado_y_cubo(numero):\n...     return numero ** 2, numero ** 3\n...\n&gt;&gt;&gt; cuad, cubo = cuadrado_y_cubo(4)\n&gt;&gt;&gt; cuad\n16\n&gt;&gt;&gt; cubo\n64\n</code></pre> <p>Sin embargo, se puede usar otra t\u00e9cnica devolviendo los diferentes resultados/valores en una lista. Por ejemplo, la funci\u00f3n <code>tabla_del()</code> que se muestra a continuaci\u00f3n hace esto:</p> <pre><code>&gt;&gt;&gt; def tabla_del(numero):\n...     resultados = []\n...     for i in range(11):\n...         resultados.append(numero * i)\n...     return resultados\n...\n&gt;&gt;&gt; res = tabla_del(3)\n&gt;&gt;&gt; res\n[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#en-python-una-funcion-siempre-devuelve-un-valor","title":"En Python una funci\u00f3n siempre devuelve un valor","text":"<p>Python, a diferencia de otros lenguajes de programaci\u00f3n, no tiene procedimientos. Un procedimiento ser\u00eda como una funci\u00f3n pero que no devuelve ning\u00fan valor.</p> <p>\u00bfPor qu\u00e9 no tiene procedimientos si hemos vistos ejemplos de funciones que no retornan ning\u00fan valor? Porque Python, internamente, devuelve por defecto el valor <code>None</code> cuando en una funci\u00f3n no aparece la sentencia <code>return</code> o esta no devuelve nada.</p> <pre><code>&gt;&gt;&gt; def saludo(nombre):\n...     print(f'Hola {nombre}')\n...     \n&gt;&gt;&gt; print(saludo('j2logo'))\nHola j2logo\nNone\n</code></pre> <p>Como puedes ver en el ejemplo anterior, el <code>print</code> que envuelve a la funci\u00f3n <code>saludo()</code> muestra <code>None</code>.</p>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#parametros-de-las-funciones-en-python","title":"Par\u00e1metros de las funciones en Python","text":"<p>Una funci\u00f3n puede definir, opcionalmente, una secuencia de par\u00e1metros con los que invocarla. \u00bfC\u00f3mo se asignan en Python los valores a los par\u00e1metros? \u00bfSe puede modificar el valor de una variable dentro de una funci\u00f3n?</p> <p>Antes de contestar a estas dos preguntas, tenemos que conocer los conceptos de programaci\u00f3n paso por valor y  paso por referencia .</p> <ul> <li>Paso por valor: Un lenguaje de programaci\u00f3n que utiliza paso por valor de los argumentos, lo que realmente hace es copiar el valor de las variables en los respectivos par\u00e1metros. Cualquier modificaci\u00f3n del valor del par\u00e1metro, no afecta a la variable externa correspondiente.</li> <li>Paso por referencia: Un lenguaje de programaci\u00f3n que utiliza paso por referencia, lo que realmente hace es copiar en los par\u00e1metros la direcci\u00f3n de memoria de las variables que se usan como argumento. Esto implica que realmente hagan referencia al mismo objeto/elemento y cualquier modificaci\u00f3n del valor en el par\u00e1metro afectar\u00e1 a la variable externa correspondiente.</li> </ul> <p>Muchos lenguajes de programaci\u00f3n usan a la vez paso por valor y por referencia en funci\u00f3n del tipo de la variable. Por ejemplo, paso por valor para los tipos simples: entero, float, \u2026 y paso por referencia para los objetos.</p> <p>Sin embargo, en Python todo es un objeto. Entonces, \u00bfc\u00f3mo se pasan los argumentos en Python, por valor o por referencia? Lo que ocurre en Python realmente es que se pasa por valor la referencia del objeto \u00bfQu\u00e9 implicaciones tiene esto? B\u00e1sicamente que si el tipo que se pasa como argumento es inmutable, cualquier modificaci\u00f3n en el valor del par\u00e1metro no afectar\u00e1 a la variable externa pero, si es mutable (como una lista o diccionario), s\u00ed se ver\u00e1 afectado por las modificaciones. As\u00ed que, \u00a1\u00a1\u00a1cuidado!!! </p> <p>Una vez aclarado este tema, a continuaci\u00f3n encontrar\u00e1s unos tutoriales muy, muy interesantes para que sigas profundizando sobre los tipos de par\u00e1metros en Python:</p> <ul> <li>Tipos de par\u00e1metros</li> <li>*args y **kwargs. N\u00famero de par\u00e1metros indefinido</li> </ul>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#ambito-y-ciclo-de-vida-de-las-variables","title":"\u00c1mbito y ciclo de vida de las variables","text":"<p>En cualquier lenguaje de programaci\u00f3n de alto nivel, toda variable est\u00e1 definida dentro de un  \u00e1mbito . Esto es, los sitios en los que la variable tiene sentido y d\u00f3nde se puede utilizar.</p> <p>Los par\u00e1metros y variables definidos dentro de una funci\u00f3n tienen un \u00e1mbito local, local a la propia funci\u00f3n. Por tanto, estos par\u00e1metros y variables no pueden ser utilizados fuera de la funci\u00f3n porque no ser\u00edan reconocidos.</p> <p>El ciclo de vida de una variable determina el tiempo en que una variable permanece en memoria. Una variable dentro de una funci\u00f3n existe en memoria durante el tiempo en que est\u00e1 ejecut\u00e1ndose dicha funci\u00f3n. Una vez que termina su ejecuci\u00f3n, sus variables y par\u00e1metros desaparecen de memoria y, por tanto, no pueden ser referenciados.</p> <pre><code>&gt;&gt;&gt; def saludo(nombre):\n...     x = 10\n...     print(f'Hola {nombre}')\n...     \n&gt;&gt;&gt; saludo('Alumno')\nHola Alumno\n&gt;&gt;&gt; print(x)\nTraceback (most recent call last):\nFile \"&lt;input&gt;\", line 1, in &lt;module&gt;\nNameError: name 'x' is not defined\n</code></pre> <p>Como ves, en el ejemplo anterior, al tratar de mostrar por pantalla el valor de la variable <code>x</code>, el int\u00e9rprete mostrar\u00e1 un error.</p> <p>El siguiente ejemplo es diferente:</p> <pre><code>&gt;&gt;&gt; def muestra_x():\n...     x = 10\n...     print(f'x vale {x}')\n...     \n&gt;&gt;&gt; x = 20\n&gt;&gt;&gt; muestra_x()\nx vale 10\n&gt;&gt;&gt; print(x)\n20\n</code></pre> <p>Lo que sucede en este ejemplo es que dentro de la funci\u00f3n <code>muestra_x()</code> se est\u00e1 creando una nueva variable <code>x</code> que, precisamente, tiene el mismo nombre que la variable definida fuera de la funci\u00f3n. Por tanto, <code>x</code> dentro de la funci\u00f3n tiene el valor <code>10</code>, pero una vez que la funci\u00f3n termina, <code>x</code> hace referencia a la variable definida fuera, cuyo valor es <code>20</code>.</p> <p>Las variables definidas fuera de una funci\u00f3n tienen un \u00e1mbito conocido como global y son visibles dentro de las funciones, d\u00f3nde solo se puede consultar su valor.</p> <pre><code>&gt;&gt;&gt; y = 20\n&gt;&gt;&gt; def muestra_x():\n...     x = 10\n...     print(f'x vale {x}')\n...     print(f'y vale {y}')\n...     \n&gt;&gt;&gt; muestra_x()\nx vale 10\ny vale 20\n</code></pre> <p>Para modificar dentro de una funci\u00f3n una variable definida fuera de la misma, hay que usar la palabra reservada <code>global</code> para declarar la variable dentro de la funci\u00f3n.</p> <pre><code>&gt;&gt;&gt; y = 20\n&gt;&gt;&gt; x = 3\n&gt;&gt;&gt; def muestra_x():\n...     global x\n...     x += 1\n...     print(f'x vale {x}')\n...     print(f'y vale {y}')\n...     \n&gt;&gt;&gt; muestra_x()\nx vale 4\ny vale 20\n</code></pre>","tags":["Software","Funciones"]},{"location":"section1/u03/teoria/PROG-U3.5.-Funciones/#fuente","title":"Fuente","text":"<ul> <li>P\u00e1gina de Juan Jose Lozano Gomez sobre Python</li> <li>Estructuras de datos</li> <li>Python para todos</li> <li>Aprende con Alf</li> <li>Tipos mutables e inmutables</li> </ul>","tags":["Software","Funciones"]},{"location":"section1/u04/","title":"UD 3 - Estructuras de datos","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u04/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u04/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 6. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos.</p>","tags":["Software"]},{"location":"section1/u04/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han escrito programas que utilicen arrays</li> <li>b) Se han reconocido las librer\u00edas de clases relacionadas con tipos de datos avanzados.</li> <li>c) Se han utilizado listas para almacenar y procesar informaci\u00f3n.</li> <li>d) Se han utilizado iteradores para recorrer los elementos de las listas.</li> <li>e) Se han reconocido las caracter\u00edsticas y ventajas de cada una de la colecciones de datos disponibles.</li> <li>(NO) f) Se han creado clases y m\u00e9todos gen\u00e9ricos.</li> <li>g) Se han utilizado expresiones regulares en la b\u00fasqueda de patrones en cadenas de texto.</li> <li>(NO) h) Se han identificado las clases relacionadas con el tratamiento de documentos XML.</li> <li>(NO) i) Se han realizado programas que realicen manipulaciones sobre documentos XML.</li> </ul>","tags":["Software"]},{"location":"section1/u04/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 2</p> <ul> <li>U3: Estructuras de datos. </li> </ul> <p>En la Unidad 3, veremos:</p> <ul> <li>Listas y tuplas</li> <li>Diccionarios</li> <li>Conjuntos</li> <li>String</li> <li>Expresiones regulares</li> </ul>","tags":["Software"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/practica/PROG-U4.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/","title":"Apuntes de [Kotlin]","text":"<p>Kotlin es un lenguaje de programaci\u00f3n de c\u00f3digo abierto de tipo est\u00e1tico que se dirige a JVM, Android, JavaScript y Native. Est\u00e1 desarrollado por JetBrains. El proyecto se inici\u00f3 en 2010 y fue de c\u00f3digo abierto desde muy temprano. El primer lanzamiento oficial 1.0 fue en febrero de 2016.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#caracteristicas","title":"Caracter\u00edsticas","text":"<p>Un lenguaje de programaci\u00f3n se dise\u00f1a generalmente con un prop\u00f3sito espec\u00edfico en mente. Este prop\u00f3sito puede ser cualquier cosa, desde servir a un entorno espec\u00edfico (por ejemplo, la web) hasta un determinado paradigma (por ejemplo, la programaci\u00f3n funcional). En el caso de Kotlin el objetivo es construir un lenguaje productivo y pragm\u00e1tico, que tenga todas las caracter\u00edsticas que un desarrollador necesita y que sea f\u00e1cil de usar.</p> <p>Kotlin fue dise\u00f1ado inicialmente para trabajar con otros lenguajes de JVM, pero ahora ha evolucionado para ser mucho m\u00e1s: tambi\u00e9n funciona en el navegador y como una aplicaci\u00f3n nativa.</p> <p>Kotlin es multiparadigma, con soporte para paradigmas de programaci\u00f3n orientada a objetos, procedimentales y funcionales, sin forzar el uso de ninguno de ellos. Por ejemplo, a diferencia de Java, puede definir funciones de nivel superior, sin tener que declararlas dentro de una clase.</p> <ul> <li>100% interoperable con Java.</li> <li>100% compatible con Java 6..., por lo que puede crear aplicaciones para la mayor\u00eda de los dispositivos Android.</li> <li>Se ejecuta en la JVM, puede transpilarse (traducirse) a JavaScript e incluso puede ejecutarse de forma nativa, con interoperabilidad con las bibliotecas C y Objective-C (macOs e iOS).</li> <li>No hay necesidad de terminar las frases con punto y coma <code>;</code>. Los bloques de c\u00f3digo est\u00e1n delimitados por corchetes <code>{ }</code>.</li> <li>Soporte de primera clase para valores constantes y colecciones inmutables (ideal para programaci\u00f3n paralela y funcional).</li> <li>Las funciones pueden ser elementos de nivel superior (es decir, no hay necesidad de poner todo dentro de una clase).</li> <li>Las funciones son ciudadanos de primera clase: pueden transmitirse como cualquier otro tipo y utilizarse como argumento de las funciones. Lambda (es decir, funciones an\u00f3nimas) son muy compatibles con la biblioteca est\u00e1ndar.</li> <li>No hay una palabra clave <code>static</code>, sino que hay mejores alternativas.</li> <li>Clases de datos son clases especiales dise\u00f1adas para contener datos.</li> <li>Todo es una expresi\u00f3n: <code>if</code>, <code>for</code>, etc... Todos pueden devolver valores.</li> <li>La expresi\u00f3n <code>when</code> es como un interruptor con superpoderes.</li> </ul> <p>M\u00e1s informaci\u00f3n:</p> <p>https://kotlinlang.org/docs/reference/comparison-to-java.html https://kotlinlang.org/docs/reference/server-overview.html https://kotlinlang.org/docs/reference/evolution/kotlin-evolution.html</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#kotlin-en-linea-de-comandos","title":"Kotlin en l\u00ednea de comandos","text":"<ul> <li>Instalar el compilador desde l\u00ednea de comandos desde aqu\u00ed</li> <li>Compilar la aplicaci\u00f3n usando el compilador de Kotlin: <code>$ kotlinc name.kt -include-runtime -d name.jar</code></li> <li>Ejecutar el programa: <code>$ java -jar name.jar</code></li> <li>Ejecutar la consola 'REPL': <code>$ kotlinc-jvm</code></li> <li>Usar la l\u00ednea de comandos para ejecutar scripts (.kts): <code>$ kotlinc -script name.kts [params]</code></li> <li>Compilar una biblioteca sin la 'runtime' para ser usada en otros programas: <code>$ kotlinc name.kt -d name.jar</code></li> <li>Ejecutar binarios producidos por el compilador de Kotlin: <code>$ kotlin -classpath name.jar HelloKt (HelloKt is the main class name inside the file named name.kt)</code></li> </ul> <p>M\u00e1s informaci\u00f3n: https://kotlinlang.org/docs/command-line.html</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<p>El punto de entrada en un programa escrito en Kotlin (y en Java) es la funci\u00f3n <code>main(args: Array&lt;String&gt;)</code>. Esta funci\u00f3n recibe un array que contiene los argumentos de la l\u00ednea de comandos.</p> <pre><code>fun main(args: Array&lt;String&gt;) {\nprintln(\"Hello World!\")\n}\n</code></pre> <p>Aunque a partir de la versi\u00f3n <code>1.3</code> puedes declarar <code>main</code> sin ning\u00fan par\u00e1metro.</p> <pre><code>fun main() {\nprintln(\"Hello World!\")\n}\n</code></pre> <p>Las funciones y variables en Kotlin pueden declararse en un \"nivel superior\", es decir, no necesitan estar dentro de una clase, por tanto, directamente dentro de un paquete.</p> <p>Si un archivo Kotlin contiene una sola clase (potencialmente con declaraciones de nivel superior relacionadas), su nombre debe ser el mismo que el nombre de la clase, con la extensi\u00f3n '.kt'. Si un archivo contiene varias clases, o solo declaraciones de nivel superior, el nombre debe describir lo que contiene el archivo en formato 'UpperCamelCase' (e.g. <code>ProcessDeclarations.kt</code>)</p> <p>Kotlin sigue las convenciones de nomenclatura de Java. Los nombres de los paquetes se escriben siempre en min\u00fasculas y sin guiones bajos (e.g. <code>org.example.myproject</code>)</p> <p>Los nombres de las clases y los objetos se escriben en 'UpperCamelCase':</p> <pre><code>open class DeclarationProcessor { ... }\nobject EmptyDeclarationProcessor : DeclarationProcessor() { ... }\n</code></pre> <p>Los nombres de funciones, propiedades y variables locales en 'lowerCamelCase':</p> <pre><code>fun processDeclarations() { ... }\nvar declarationCount = ...\n</code></pre> <p>Los nombres de las constantes (propiedades marcadas con <code>const</code>) deben usar nombres en may\u00fasculas y separados por un gui\u00f3n bajo:</p> <pre><code>const val MAX_COUNT = 8\nval USER_NAME_FIELD = \"UserName\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#variables-y-tipos-basicos","title":"Variables y tipos b\u00e1sicos","text":"<p>https://kotlinlang.org/docs/basic-types.html#basic-types</p> <p>En Kotlin, todo es un objeto en el sentido de que podemos llamar funciones y propiedades de miembro en cualquier variable. Algunos de los tipos como los n\u00fameros, los caracteres o los booleanos pueden tener una representaci\u00f3n interna especial que se representa como valores primitivos en tiempo de ejecuci\u00f3n, pero para el usuario se comportan como clases ordinarias.</p> <p>La declaraci\u00f3n de valores se realiza utilizando <code>var</code> o <code>val</code>:</p> <ul> <li>Los valores constantes se declaran como <code>val</code> y son inmutables o 'read-only', es decir, que no se pueden reasignar.</li> <li>Las variables se declaran como <code>var</code> y son mutables, por lo que se le pueden asignar un nuevo valor pero \u00fanicamente del mismo tipo declarado.</li> </ul> <p>La recomendaci\u00f3n es crear valores constantes inmutables, que son m\u00e1s seguras en entornos 'multithreading' ya que no se pueden modificar y utilizar las variables mutables cuando sea necesario.</p> <p>Este soporte de primera clase para los valores constantes es importante por una raz\u00f3n: la programaci\u00f3n funcional. En la programaci\u00f3n funcional, el uso de los valores constantes permiten algunas optimizaciones que aumentan el rendimiento. Por ejemplo, los c\u00e1lculos pueden ser paralelos ya que existe una garant\u00eda de que el valor no cambiar\u00e1 entre dos ejecuciones paralelas, dado que no puede cambiar.</p> <pre><code>val fooVal = 10     // val es inmutable y no podr\u00e1 ser reutilizada\nval otherVal\notherVal = \"My Value\"   // Podemos declarar la variable 'val' en una l\u00ednea y asignarle valor posteriormente. Sigue siendo una sola asignaci\u00f3n.\nvar fooVar = 10\nfooVar = 20     // Se le puede asignar un nuevo valor pero \u00fanicamente del mismo tipo.\n</code></pre> <p>En la mayor\u00eda de los casos, Kotlin puede determinar o inferir cu\u00e1l es el tipo de una variable, por lo que no tenemos que especificarla expl\u00edcitamente. Cuando la variable no se inicialice deberemos indicar expl\u00edcitamente el tipo de la variable ya que Kotlin no puede inferir el tipo si no se inicializa.</p> <pre><code>val foo: Int = 7\nval bar = 10    // Kotlin infiere autom\u00e1ticamente el tipo\nval hello: String   // Si no se inicializa hay que especificar el tipo\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#numbers","title":"Numbers","text":"<p>https://kotlinlang.org/docs/numbers.html</p> <p>Kotlin proporciona los tipos <code>Byte</code>, <code>Short</code>, <code>Int</code> y <code>Long</code> para enteros.</p> <p></p> <p>Y los tipos <code>Float</code> y <code>Double</code> para n\u00fameros en coma flotante:</p> <p></p> <pre><code>val double: Double = 64.0   // 64 bits\nval float: Float = 32.0F // or 32f (32 bits)\nval long: Long = 64L    // 64 bits\nval int: Int = 32       // 32 bits\nval short: Short = 16   // 16 bits\nval byte: Byte = 8      // 8 bits\nval hexadecimal: Int = 0x16\nval binary: Int = 0b101\nval char: Char = 'a'\n</code></pre> <p>Todas las variables inicializadas con un entero no deben exceder el tama\u00f1o m\u00e1ximo de <code>Int</code> ya que Kotlin infiere el tipo <code>Int</code> si no se especifica expl\u00edcitamente el tipo o se a\u00f1ade el ap\u00e9ndice 'L' al valor. En el caso de n\u00fameros en coma flotante, Kotlin infiere el tipo <code>Double</code> si no se indica el tipo expl\u00edcitamente o se marca el valor en coma flotante con el ap\u00e9ndice 'F'.</p> <pre><code>val a = 1   // Kotlin infiere el tipo 'Int'\nval b = 1L  // Kotlin infiere el tipo 'Long'\nval c = 3.14    // Kotlin infiere el tipo 'Double'\nval d = 2.7123F  // Kotlin infiere el tipo 'Float'\n</code></pre> <p>A diferencia de Java, en Kotlin todos los tipos son objetos y por tanto no hay 'wrappers' u objetos envoltorio tipo <code>Integer</code>, <code>Double</code>, etc...</p> <p>Los guiones bajos se pueden utilizar para hacer que los n\u00fameros grandes sean m\u00e1s legibles:</p> <pre><code>val million = 1_000_000\n</code></pre> <p>La conversi\u00f3n debe ser invocada expl\u00edcitamente. Hay conversiones desde un tipo al resto de tipos:</p> <ul> <li><code>toByte()</code>: Byte</li> <li><code>toShort()</code>: Short</li> <li><code>toInt()</code>: Int</li> <li><code>toLong()</code>: Long</li> <li><code>toFloat()</code>: Float</li> <li><code>toDouble()</code>: Double</li> <li><code>toChar()</code>: Char</li> </ul> <pre><code>val otherLong = int.toLong()\nval direct = 25.toLong()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#characters","title":"Characters","text":"<p>https://kotlinlang.org/docs/characters.html</p> <p>Los caracteres no son n\u00fameros en Kotlin, a diferencia de Java. En Kotlin los caracteres se representan con el tipo <code>Char</code>:</p> <p>Los literales de car\u00e1cter se escriben con comillas simples como por ejemplo <code>'a'</code>. Los caracteres especiales se escapan con la barra invertida <code>'\\'</code>. Est\u00e1n soportadas las siguientes secuencias de escape: <code>\\t</code>, <code>\\b</code>, <code>\\n</code>, <code>\\r</code>, <code>\\'</code>, <code>\\\"</code>, <code>\\\\</code>, <code>\\$</code>. </p> <p>Podemos convertir de forma expl\u00edcitia un car\u00e1cter en un n\u00famero de tipo <code>Int</code>:</p> <pre><code>fun decimalDigitValue(c: Char): Int {\nif (c !in '0'..'9')\nthrow IllegalArgumentException(\"Out of range\")\nreturn c.toInt() - '0'.toInt() // Explicit conversions to numbers\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#strings","title":"Strings","text":"<p>https://kotlinlang.org/docs/strings.html</p> <p>Las cadenas son secuencias de caracteres inmutables y se representan con el tipo <code>String</code> de manera similar a Java. Las cadenas se crean usando las comillas dobles. El escapado de caracteres se hace con una barra invertida <code>'\\'</code>.</p> <pre><code>val fooString = \"My String Is Here!\"\nval barString = \"Printing on a new line?\\nNo Problem!\"\nval bazString = \"Do you want to add a tab?\\tNo Problem!\"\nprintln(fooString)\nprintln(barString)\nprintln(bazString)\nprintln(\"John Doe\"[2]) // =&gt; h\nprintln(\"John Doe\".startsWith(\"J\")) // =&gt; true\n</code></pre> <p>Se puede acceder a los elementos de una cadena como si fuera un array (e.g. <code>s[i]</code>) e iterar con un bucle tipo <code>for</code>:</p> <pre><code>for (c in str) {\nprintln(c)\n}\n</code></pre> <p>Se puede utilizar el operador <code>+</code> para concatenar cadenas entre s\u00ed y con valores de otro tipo siempre y cuando uno de los elementos de la expresi\u00f3n sea una cadena:</p> <pre><code>val s = \"abc\" + 1\nprintln(s + \"def\")\n</code></pre> <p>Una cadena sin formato o 'raw string' est\u00e1 delimitada por una comilla triple (\"\"\"). Las cadenas sin formato pueden contener nuevas l\u00edneas y cualquier otro car\u00e1cter. Estas cadenas sin formato tambi\u00e9n tiene soporte para las 'string templates':</p> <pre><code>val fooRawString = \"\"\"\nfun helloWorld(val name : String) {\n    println(\"Hello, world!\")\n}\nval hello = $who\nval result = ${2 + 2}\n\"\"\"\n</code></pre> <p>Con la funci\u00f3n <code>trimMargin()</code> podemos eliminar los espacios en blanco:</p> <pre><code>val text = \"\"\"\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#string-templates","title":"String templates","text":"<p>https://kotlinlang.org/docs/strings.html#string-templates</p> <p>Un literal de cadena puede contener expresiones de plantilla o 'template expressions', que son fragmentos de c\u00f3digo que ser\u00e1 evaluado y cuyo resultado ser\u00e1 concatenado en la cadena. Son una forma simple y efectiva de incrustar valores, variables o incluso expresiones dentro de una cadena.</p> <p>Una expresi\u00f3n de plantilla comienza con un signo de d\u00f3lar (<code>$</code>) y consisten en un nombre de una variable (por ejemplo <code>$i</code>) o en una expresi\u00f3n (como por ejemplo <code>${name.length}</code>) en cuyo caso se utilizan llaves (<code>{}</code>):</p> <pre><code>val name = \"John Doe\"\nprintln(\"$name has ${name.length} characters\") // =&gt; John Doe has 8 characters\nval age = 40\nprintln(\"You are ${if (age &gt; 60) \"old\" else \"young\"}\") // =&gt; You are young\n</code></pre> <p>Las plantillas son compatibles tanto dentro de cadenas sin procesar como dentro de cadenas escapadas. En caso de necesitar representar el literal del d\u00f3lar en una cadena sin escapar se utiliza esta sintaxis:</p> <pre><code>val price = \"\"\"\n${'$'}9.99\n\"\"\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#arrays","title":"Arrays","text":"<p>https://kotlinlang.org/docs/arrays.html</p> <p>Una matriz est\u00e1 representada por la clase <code>Array</code> y es invariante, por lo que, por ejemplo, no se puede asignar un <code>Array&lt;String&gt;</code> a un tipo de variable <code>Array&lt;Any&gt;</code>.</p> <p>En Kotlin, podemos crear una matriz de elementos del mismo tipo o de distinto tipo utilizando la funci\u00f3n de biblioteca <code>arrayOf()</code> y pas\u00e1ndole los elementos a a\u00f1adir:</p> <pre><code>val cardNames = arrayOf(\"Jack\", \"Queen\", \"King\", 3, false)\nprintln(cardNames[1])   // =&gt; Queen\n</code></pre> <p>Podemos forzar la creaci\u00f3n de arrays del mismo tipo. De esta forma el compilador comprobar\u00e1 el tipo de los elementos que se a\u00f1aden y evitar\u00e1 que se a\u00f1adan elementos de tipos no v\u00e1lidos:</p> <pre><code>val myArray = arrayOf&lt;Int&gt;(1, 2, 3, 4)\nprintln(myArray.contentToString()) // =&gt; [1, 2, 3, 4]\n</code></pre> <p>La biblioteca est\u00e1ndar de Kotlin provee funciones para crear arrays de tipos primitivos como <code>intArrayOf()</code>, <code>longArrayOf()</code>, <code>charArrayOf()</code>, <code>doubleArrayOf()</code>, etc... Cada una de estas funciones devuelven una instancia de su equivalente en Kotlin como <code>IntArray</code>, <code>LongArray</code>, <code>CharArray</code>, <code>DoubleArray</code>, etc...:</p> <pre><code>val cards = intArrayOf(10, 11, 12) // IntArray\nprintln(\"${cards[1]}\") // =&gt; 11\n</code></pre> <p>Para mejorar la eficiencia y rendimiento del c\u00f3digo, cuando se utilicen tipos primitivos hay que utilizar las funciones <code>intArrayOf()</code>, <code>longArrayOf()</code>, etc.. en vez de <code>arrayOf()</code> para as\u00ed evitar el coste asociado a las operaciones de 'boxing'/'unboxing'.</p> <p>Alternativamente, podemos crear una matriz a partir de un tama\u00f1o inicial y una funci\u00f3n, que se utiliza para generar cada elemento usando el constructor <code>Array()</code>:</p> <pre><code>val allCards = Array(12, { i -&gt; i + 1 })\nprintln(\"${allCards.first()} - ${allCards.last()}\") // =&gt; 1 - 12\n</code></pre> <p>Iterando sobre la matriz con <code>indices</code>:</p> <pre><code>for (index in cardNames.indices) {\nprintln(\"Element $index is ${cardNames[index]}\")\n}\n</code></pre> <p>Otra forma posible de iterar es usando la funci\u00f3n <code>withIndex()</code>:</p> <pre><code>for ((index, value) in cardNames.withIndex()) {\nprintln(\"$index - $value\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#packages","title":"Packages","text":"<p>https://kotlinlang.org/docs/packages.html</p> <p>La palabra clave <code>package</code> funciona de la misma manera que en Java. El nombre del paquete se usa para construir el \"Fully Qualified Name\" (FQN) de una clase, objeto, interfaz o funci\u00f3n.</p> <p>Todo el contenido (como clases y funciones) de un fichero fuente est\u00e1n contenidos en el paquete declarado. Los nombres de los paquetes se escriben en min\u00fascula y sin guiones bajos:</p> <pre><code>package com.example.kotlin\nclass MyClass { /*...*/ }\nfun saySomething(): String { /*...*/  }\n</code></pre> <p>En el ejemplo, el FQN de la clase ser\u00e1 <code>com.example.kotlin.MyClass</code>.</p> <p>Dado que podemos tener 'top-level functions' como la funci\u00f3n <code>saySomething()</code> del ejemplo, el FQN de esta funci\u00f3n ser\u00e1 <code>com.example.kotlin.saySomething</code>.</p> <p>Si no se especifica un paquete, el contenido del fichero fuente pertenece al paquete 'default'.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#imports","title":"Imports","text":"<p>https://kotlinlang.org/docs/packages.html#imports</p> <p>En Kotlin, usamos la declaraci\u00f3n de importaci\u00f3n para permitir que el compilador localice las clases e interfaces, propiedades, enumeraciones, funciones y objetos que se importar\u00e1n.</p> <p>En Java, por otro lado, solo est\u00e1 permitido importar clases o interfaces.</p> <pre><code>// 'Bar' esta disponible en el c\u00f3digo\nimport foo.Bar\n// Si existe cierta ambig\u00fcedad podemos usar la palabra clave 'as'\nimport foo.Bar\nimport bar.Bar as bBar\n// Todo el contenido de 'foo' est\u00e1 disponible\nimport foo.*\n</code></pre> <p>Por defecto, al igual que en Java, el compilador importa de forma impl\u00edcita una serie de paquetes y por tanto est\u00e1n disponibles de forma autom\u00e1tica:</p> <ul> <li>kotlin.*</li> <li>kotlin.annotation.*</li> <li>kotlin.collections.*</li> <li>kotlin.comparisons.*</li> <li>kotlin.io.*</li> <li>kotlin.ranges.*</li> <li>kotlin.sequences.*</li> <li>kotlin.text.*</li> </ul> <p>Additional packages are imported depending on the target platform:</p> <ul> <li>JVM:</li> <li>java.lang.*</li> <li>kotlin.jvm.*</li> <li>JS:</li> <li>kotlin.js.*</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#comentarios","title":"Comentarios","text":"<pre><code>// Single-line comments start with //\n/*\nMulti-line comments look like this.\n*/\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#control-de-flujo-y-bucles","title":"Control de flujo y bucles","text":"<p>https://kotlinlang.org/docs/control-flow.html#control-flow-if-when-for-while</p> <p>Kotlin tiene 4 construcciones de control de flujo: <code>if</code>, <code>when</code>, <code>for</code> y <code>while</code>.  <code>if</code> y <code>when</code> son expresiones, por lo que devuelven un valor; <code>for</code> y <code>when</code> son declaraciones, por lo que no devuelven un valor. <code>if</code> y <code>when</code> tambi\u00e9n se pueden utilizar como sentencias, es decir, se pueden utilizar de forma aut\u00f3noma y sin devolver un valor.</p> <p>Un bucle <code>for</code> puede usarse con cualquier elemento que proporcione un iterador como rangos, colecciones, etc...:</p> <pre><code>for (c in \"hello\") {\nprintln(c)\n}\nfor (i in 1..3) {\nprintln(i)\n}\nfor (i in 6 downTo 0 step 2) {\nprintln(i)\n}\n</code></pre> <p>Los bucles <code>while</code> y <code>do-while</code> funcionan de la misma manera que en otros lenguajes:</p> <pre><code>while (x &gt; 0) {\nx--\n}\ndo {\nval y = retrieveData()\n} while (y != null) // y is visible here!\n</code></pre> <p>La instrucci\u00f3n <code>if</code> y <code>if..else</code> funciona igual que en Java. Adem\u00e1s, en Kotlin los bloques <code>if</code> se pueden utilizar como una expresi\u00f3n que devuelve un valor. Por este motivo el operador ternario 'condition ? then: else' no es necesario en Kotlin:</p> <pre><code>// Traditional usage\nvar max = a\nif (a &lt; b) max = b\n// With else\nvar max: Int\nif (a &gt; b) {\nmax = a\n} else {\nmax = b\n}\n// As expression\nval max = if (a &gt; b) a else b\n// With blocks\n// returns a or 5\nvar top = if (a &gt; 5) {\nprintln(\"a is greater than 5\")\na\n} else {\nprintln(\"5 is greater than a\")\n5\n}\n</code></pre> <p>Los bloques <code>when</code> se pueden usar como una alternativa a las cadenas <code>if-else-if</code> o en substituci\u00f3n de los <code>switch</code>. Si no se proporciona ning\u00fan argumento, las condiciones de la rama son simplemente expresiones booleanas, y una rama se ejecuta cuando su condici\u00f3n es verdadera:</p> <pre><code>when {\nx.isOdd() -&gt; print(\"x is odd\")\nx.isEven() -&gt; print(\"x is even\")\nelse -&gt; print(\"x is funny\")\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede usar con un argumento. Si ninguna de las opciones coincide con el argumento, se ejecuta la opci\u00f3n del bloque <code>else</code>:</p> <pre><code>when (x) {\n1 -&gt; print(\"x == 1\")\n2 -&gt; print(\"x == 2\")\nelse -&gt; {\nprintln(\"none of the above\") // N\u00f3tese el uso de llaves para delimitar el bloque de c\u00f3digo\n}\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede utilizar como una expresi\u00f3n que devuelve un valor. En este caso el bloque <code>else</code> es obligatorio. De hecho, la \u00fanica excepci\u00f3n a esta regla es si el compilador puede garantizar que siempre devuelve un valor. Por lo tanto, si las ramas normales cubren todos los valores posibles, entonces no hay necesidad de una rama <code>else</code>:</p> <pre><code>val result = when (i) {\n0, 21 -&gt; \"0 or 21\"\nin 1..20 -&gt; \"in the range 1 to 20\"\nelse -&gt; \"none of the above\"\n}\nprintln(result)\nval check = true\nval result = when(check) {   // All results are covered\ntrue -&gt; println(\"it's true\")\nfalse -&gt; println(\"it's false\")\n}\n</code></pre> <p>Se pueden utilizar expresiones arbitrarias, y no solo constantes, como condiciones en los bloques:</p> <pre><code>when (x) {\nparseInt(s) -&gt; print(\"s encodes x\")\nelse -&gt; print(\"s does not encode x\")\n}\n</code></pre> <p>Si muchos casos deben manejarse de la misma manera, las condiciones de la rama pueden combinarse con una coma:</p> <pre><code>when (x) {\n0, 1 -&gt; print(\"x == 0 or x == 1\")\nelse -&gt; print(\"otherwise\")\n}\n</code></pre> <p>Tambi\u00e9n podemos verificar si un valor est\u00e1 dentro <code>in</code> o no est\u00e1 dentro <code>!in</code> de un rango o una colecci\u00f3n:</p> <pre><code>when (x) {\nin 1..10 -&gt; print(\"x is in the range\")\nin validNumbers -&gt; print(\"x is valid\")\n!in 10..20 -&gt; print(\"x is outside the range\")\nelse -&gt; print(\"none of the above\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#funciones","title":"Funciones","text":"<p>https://kotlinlang.org/docs/functions.html</p> <p>Las funciones se declaran usando la palabra clave <code>'fun'</code>. Los nombres de las funciones empiezan con min\u00fascula. Los par\u00e1metros de la funci\u00f3n se especifican entre par\u00e9ntesis despu\u00e9s del nombre de la funci\u00f3n y tienen la forma <code>'name: type'</code>. El tipo de cada par\u00e1metro debe especificarse expl\u00edcitamente y no puede omitirse.</p> <pre><code>fun powerOf(number: Int, exponent: Int) { ... }\n</code></pre> <p>Los par\u00e1metros de la funci\u00f3n pueden tener opcionalmente un valor por defecto, que se utilizar\u00e1 en caso de se omita el argumento al invocar la funci\u00f3n. El tipo de retorno de la funci\u00f3n, si es necesario, se especifica despu\u00e9s de los par\u00e1metros:</p> <pre><code>fun hello(name: String = \"world\"): String { // valor por defecto\nreturn \"Hello, $name!\"\n}\nhello(\"foo\") // =&gt; Hello, foo!\nhello(name = \"bar\") // =&gt; Hello, bar!\nhello() // =&gt; Hello, world!\nfun bye(bye: String = \"Bye\", name: String): String {\nreturn \"$bye, $name!!\"\n}\nbye(name = \"John\", bye = \"Good bye\") // =&gt; Good bye, John!!\nbye(name = \"John\") // =&gt; Bye, John!!\n</code></pre> <p>Si un par\u00e1metro por defecto precede a un par\u00e1metro sin valor predeterminado, el valor por defecto solo se puede usar llamando a la funci\u00f3n con argumentos con nombre:</p> <pre><code>fun foo(bar: Int = 0, baz: Int) { ... }\nfoo(baz = 1) // The default value bar = 0 is used\n</code></pre> <p>Dado que Java no admite valores de par\u00e1metros por defecto en los m\u00e9todos, deber\u00e1 especificar todos los valores de par\u00e1metros expl\u00edcitamente cuando llame a una funci\u00f3n de Kotlin desde Java. Kotlin nos proporciona la funcionalidad para facilitar las llamadas de Java al anotar la funci\u00f3n Kotlin con <code>'@JvmOverloads'</code>. Esta anotaci\u00f3n le indicar\u00e1 al compilador de Kotlin que genere las funciones sobrecargadas de Java para nosotros.</p> <pre><code>@JvmOverloads\nfun calCircumference(radius: Double, pi: Double = Math.PI): Double = (2 * pi) * radius\n// En Java\ndouble calCircumference(double radius, double pi);\ndouble calCircumference(double radius);\n</code></pre> <p>Cuando una funci\u00f3n no devuelve ning\u00fan valor significativo, su tipo de devoluci\u00f3n por defecto es <code>Unit</code>. En ese caso indicar el tipo de retorno es opcional. El tipo <code>Unit</code> es un objeto en Kotlin que es similar a los tipos <code>void</code> en Java y C.</p> <pre><code>fun hello(name: String): Unit {\nprint(\"Hello $name\")\n}\nfun sayHello(name: String) { // compila ya que el compilador infiere el tipo 'Unit'\nprint(\"Hello $name\")\n}\n</code></pre> <p>Los par\u00e1metros con nombre permiten c\u00f3digo m\u00e1s legible al nombrar los par\u00e1metros que se pasan a una funci\u00f3n cuando se invoca. Una vez que se utiliza un nombre en un par\u00e1metro, el resto de par\u00e1metros tambi\u00e9n deben asignarse con nombre:</p> <pre><code>fun area(width: Int, height: Int): Int {\nreturn width * height\n}\narea(10, 12)\narea(width = 10, height = 12) // c\u00f3digo m\u00e1s legible\narea(height = 12, width = 10) // podemos cambiar el orden\narea(10, height = 12) // argumento por posici\u00f3n y argumentos con nombre\narea(width = 10, 12) // \u00a1incorrecto! no se permiten argumentos con nombre antes de argumentos por posici\u00f3n\nfun bar(k: Int, m: Long = 1L, j: Boolean = true) = println(\"$k - $m - $j\")\n// Una vez que un par\u00e1metro ha sido nombrado, todos los siguientes par\u00e1metros deben ser nombrados\nbar(10) // =&gt; Se omiten los par\u00e1mentros por defecto\nbar(15, 30L)\nbar(20, 2L, true)\nbar(m = 30L, j = false, k = 10)\nbar(k = 10, m = 20L, j = true)\nbar(5, m = 2L, j = true)\nbar(6, 1L, j = true)\n</code></pre> <p>Cuando se invoca una funci\u00f3n con argumentos posicionales y con nombre, todos los argumentos posicionales deben colocarse antes del primero argumento con nombre. Por ejemplo, la llamada <code>f(1, y = 2)</code> est\u00e1 permitida, pero <code>f(x = 1, 2)</code> no est\u00e1 permitida.</p> <p>Para pasar un n\u00famero variable de argumentos a una funci\u00f3n podemos usar la palabra clave <code>'vararg'</code> delante del nombre de una variable. Por tanto la funci\u00f3n aceptar\u00e1 una lista de par\u00e1metros separados por comas que el compilador envolver\u00e1 en una array. Por tanto, dentro de la funci\u00f3n accederemos a los par\u00e1metros mediante la notaci\u00f3n de array.</p> <p>Este tipo de par\u00e1metros se puede combinar con otros par\u00e1metros. Normalmente el par\u00e1metro <code>'vararg'</code> ser\u00e1 el \u00faltimo de la lista. Si hay otros par\u00e1metros despu\u00e9s de <code>'vararg'</code>, deber\u00e1n usarse par\u00e1metros con nombre:</p> <pre><code>fun varargExample(vararg names: Int) {\nprintln(\"Argument has ${names.size} elements\")\n}\nvarargExample() // =&gt; Argument has 0 elements\nvarargExample(1) // =&gt; Argument has 1 elements\nvarargExample(1, 2, 3) // =&gt; Argument has 3 elements\nfun car(vararg model: String, year: Int) {}\ncar(\"Audi\", \"A6\", year = 2005) // par\u00e1metros con nombre despu\u00e9s de 'vararg'\n</code></pre> <p>Para utilizar un array para suministrar un n\u00famero variable de argumentos se utiliza el operador <code>'*'</code> tambi\u00e9n llamado 'spread operator' delante del nombre de la variable del array:</p> <pre><code>val intArray = intArrayOf(1, 2, 3, 4)\nval array = Array(5, { i -&gt; i + 1 })\nvarargExample(*intArray) // =&gt; Argument has 4 elements\nvarargExample(*array.toIntArray()) // =&gt; Argument has 5 elements\n</code></pre> <p>Cuando una funci\u00f3n consiste en una sola expresi\u00f3n, se pueden omitir los par\u00e9ntesis. El cuerpo se especifica despu\u00e9s de un s\u00edmbolo <code>'='</code>:</p> <pre><code>fun odd(x: Int): Boolean = x % 2 == 1\n</code></pre> <p>Declarar expl\u00edcitamente el tipo de retorno de una funci\u00f3n cuando es una expresi\u00f3n es opcional cuando puede ser inferido por el compilador o cuando el tipo de retorno es <code>'Unit'</code>. Cuando el cuerpo de una funci\u00f3n es un bloque hay que especificar el tipo de retorno ya que el compilador no puede inferirlo:</p> <pre><code>fun even(x: Int) = x % 2 == 0  // Optional\nfun printHello(name: String?) { // 'Unit'\nif (name != null)\nprintln(\"Hello ${name}\")\nelse\nprintln(\"Hi there!\")\n// `return Unit` or `return` is optional\n}\n</code></pre> <p>A veces queremos devolver m\u00faltiples valores desde una funci\u00f3n. Una forma es usar el tipo <code>'Pair'</code> de Kotlin. Esta estructura incluye dos valores a los que luego se puede acceder. Este tipo de Kotlin puede aceptar cualquier tipo que suministre a su constructor. Y, lo que es m\u00e1s, los dos tipos ni siquiera necesitan ser iguales. Kotlin tambi\u00e9n provee el tipo <code>'Triple'</code> que retorna tres valores:</p> <pre><code>fun getNumbers(num: Int): Pair&lt;Int?, Int?&gt; {\nrequire(num &gt; 0, { \"Error: num is less than 0\" })\nreturn Pair(num, num * 2)\n}\nval(num, num2) = getNumbers(10) // destructuring\n</code></pre> <p>En Kotlin, podemos hacer que la creaci\u00f3n de una instancia 'Pair' sea m\u00e1s compacta y legible utilizando la funci\u00f3n 'to', que es una funci\u00f3n 'infix' en lugar del constructor de 'Pair'.</p> <pre><code>val nigeriaCallingCodePair = 234 to \"Nigeria\"\nval nigeriaCallingCodePair2 = Pair(234, \"Nigeria\") // Same as above\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#extension-functions","title":"Extension functions","text":"<p>Las 'extension functions' son una forma de agregar nuevas funcionalidades a una clase sin tener que heredar de dicha clase. Esto es similar a los m\u00e9todos de extensi\u00f3n de C#. Una funci\u00f3n de extensi\u00f3n se declara fuera de la clase que quiere extender. En otras palabras, tambi\u00e9n es una 'top-level function'. Junto con las funciones de extensi\u00f3n, Kotlin tambi\u00e9n admite propiedades de extensi\u00f3n.</p> <p>Para crear una 'extension function', debe prefijar el nombre de la clase que est\u00e1 extendiendo antes del nombre de la funci\u00f3n. El nombre de la clase o el tipo en el que se define la extensi\u00f3n se denomina tipo de receptor, y el objeto receptor es la instancia de clase o el valor concreto sobre el que se llama a la funci\u00f3n de extensi\u00f3n.</p> <pre><code>fun String.remove(c: Char): String {  // 'String' es el tipo receptor\nreturn this.filter { it != c }     // 'this' corresponde al objeto receptor\n}\nprintln(\"Hello, world!\".remove('l')) // =&gt; Heo, word!  // \"Hello World\" es el objeto receptor\n</code></pre> <p>En caso de que una 'extension function' tenga la misma firma (mismo nombre y misma lista de par\u00e1metros) que una funci\u00f3n miembro, es decir, una funci\u00f3n de la clase, el compilador invocar\u00e1 antes la funci\u00f3n miembro que la funci\u00f3n de extensi\u00f3n aunque no se generar\u00e1 ning\u00fan error de compilaci\u00f3n:</p> <pre><code>class C {\nfun foo() { println(\"member\") }\n}\nfun C.foo() {\nprintln(\"extension\")\n}\nfun C.foo(i: Int) {\nprintln(\"extension &amp; overrided\")\n}\nC().foo() // =&gt; member\nC().foo(5) // =&gt; extension &amp; overrided\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#top-level-functions","title":"Top-level functions","text":"<p>Las funciones de nivel superior son funciones que se definen fuera de cualquier clase, objeto o interfaz. Esto significa que son funciones a las que llama directamente, sin la necesidad de crear ning\u00fan objeto o llamar a ninguna clase. Dado que Java no soporta este tipo de funciones el compilador de Kotlin genera una clase con m\u00e9todos est\u00e1ticos. Este tipo de funciones son especialmente \u00fatiles para crear funciones de utilidad o de ayuda.</p> <pre><code>// Code defined inside a file called 'UserUtils.kt'\n@file:JvmName(\"UserUtils\")\npackage com.example.project.utils\nfun checkUserStatus(): String {\nreturn \"online\"\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#high-order-functions","title":"High-Order Functions","text":"<p>Las funciones en Kotlin son de primera clase, lo que significa que pueden ser almacenadas en variables y estructuras de datos, pasadas como argumentos y devueltas desde otras funciones de orden superior. Puede operar con funciones de cualquier manera que sea posible para otros valores no funcionales.</p> <p>Para facilitar esto, Kotlin, como lenguaje de programaci\u00f3n est\u00e1ticamente tipado, utiliza una familia de tipos de funci\u00f3n para representar funciones y proporciona un conjunto de construcciones de lenguaje especializadas, tales como expresiones lambda.</p> <p>Una 'high-order function' o funci\u00f3n de orden superior es una funci\u00f3n que puede tomar funciones como par\u00e1metros y/o devolver una funci\u00f3n como tipo de retorno.</p> <pre><code>// Funci\u00f3n con dos par\u00e1metros, el segundo de ellos es una funci\u00f3n\nfun foo(str: String, fn: (String) -&gt; String): Unit {\nval applied = fn(str)\nprintln(applied)\n}\nfoo(\"Hello\", { it.reversed() }) // =&gt; olleH\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n\nfun isPositive(n: Int): (Int) -&gt; Boolean {\nreturn { n &gt; 0 } // return a function. Instead 'return value' we have 'return { function }'\n}\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n de forma m\u00e1s compacta\nfun modulo(k: Int): (Int) -&gt; Boolean = { it % k == 0 }\n// fun modulo(k: Int): (Int) -&gt; Boolean = { n:Int -&gt; n % k == 0 } //igual que la definici\u00f3n de arriba.  \nval evens = listOf(1, 2, 3, 4, 5, 6).filter(modulo(2)) // =&gt; [2, 4, 6]\n// Asignar la funci\u00f3n a una variable\nval isEven: (Int) -&gt; Boolean = modulo(2)\nlistOf(1, 2, 3, 4).filter(isEven) // =&gt; [2, 4]\nlistOf(5, 6, 7, 8).filter(isEven) // =&gt; [6, 8]\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#functions-types-lambdas","title":"Functions types &amp; Lambdas","text":"<p>Un tipo funci\u00f3n es un tipo que consta de una firma de funci\u00f3n, es decir, dos par\u00e9ntesis que contiene la lista de par\u00e1metros (que son opcionales) y un tipo de retorno. Ambas partes est\u00e1n separadas por el operador <code>'-&gt;'</code>.</p> <p>Cuando se define un tipo funci\u00f3n, siempre se debe indicar expl\u00edcitamente el tipo de retorno. Cuando se declaran funciones normales que devuelven <code>Unit</code>, se puede omitir el tipo de retorno ya que el compilador lo infiere, pero no se puede omitir en los tipos funci\u00f3n. Adem\u00e1s, debe poner los par\u00e9ntesis para los par\u00e1metros, incluso cuando el tipo funci\u00f3n no acepta ning\u00fan par\u00e1metro.</p> <pre><code>fun executor(action:() -&gt; Unit) {\naction()\n}\n// 'action' es el nombre del par\u00e1metro y su tipo es '() -&gt; Unit' que es una funci\u00f3n.\n// Por tanto el tipo de 'action' es un tipo funci\u00f3n.\n</code></pre> <ul> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve 'Unit': <code>() -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve un String: <code>() -&gt; String</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma un String y no devuelve nada: <code>(String) -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma dos par\u00e1metros y no devuelve nada: <code>(String, Float) -&gt; Unit</code></li> </ul> <p>Debido a que un tipo funci\u00f3n es solo un tipo, significa que puede asignar una funci\u00f3n a una variable, puede pasarla como un argumento a otra funci\u00f3n o puede devolverla desde una funci\u00f3n tal y como suceden en las `high-order functions':</p> <pre><code>val saySomething: (String) -&gt; Unit = { x -&gt; println(x) }\nsaySomething(\"Good morning\") // =&gt; Good morning\n</code></pre> <p>Una forma de instanciar una funci\u00f3n tipo es usando el operador <code>'::'</code>. Tambi\u00e9n podemos usar este operardor para pasar un tipo funci\u00f3n como par\u00e1metro de otra funci\u00f3n especificando su nombre con el operador y sin utilizar los par\u00e9ntesis:</p> <pre><code>fun businessEmail(s: String): Boolean {\nreturn s.contains(\"@\") &amp;&amp; s.contains(\"business.com\")\n}\nisAnEmail(::businessEmail) // Invocar una 'high-order function' pas\u00e1ndole otra funci\u00f3n por su nombre\nfun tell(text: String) {\nprintln(text)\n}\nvar saySomething: (String) -&gt; Unit // La variable 'saySomething' es una variable de tipo funci\u00f3n\nsaySomething = ::tell // instanciar el tipo funci\u00f3n y asignarlo a la variable 'saySomething'\nsaySomething(\"Hello\") //=&gt; Hello\n</code></pre> <p>En particular, una lambda es una funci\u00f3n literal: una funci\u00f3n an\u00f3nima que no se declara pero se usa directamente como una expresi\u00f3n.</p> <p>B\u00e1sicamente, una lambda es un bloque de c\u00f3digo que se puede pasar como cualquier otro literal (por ejemplo, simplemente como una cadena literal <code>\"una cadena\"</code>). La combinaci\u00f3n de estas caracter\u00edsticas permite a Kotlin soportar la programaci\u00f3n funcional b\u00e1sica.</p> <p>En el ejemplo una variable 'sum' de tipo funci\u00f3n y a la que le asignamos directamente una funci\u00f3n 'lambda' con dos par\u00e1metros:</p> <pre><code>// Asignando una funci\u00f3n 'lambda'\nval sum: (Int, Int) -&gt; Int = { x, y -&gt; x + y }\nsum(10, 20) // =&gt; 30\n// Equivalente usando el operador '::'\nfun operation(x: Int, y: Int): Int {\nreturn x + y\n}\nval sum: (Int, Int) -&gt; Int = ::operation\nsum(10, 20) // =&gt; 30\n</code></pre> <p>En Kotlin, por convenci\u00f3n si una funci\u00f3n 'lambda' tiene solo un par\u00e1metro, su declaraci\u00f3n puede omitirse (junto con -&gt;). El nombre del \u00fanico par\u00e1metro ser\u00e1 <code>'it'</code>.</p> <pre><code>val isNegative: (Int) -&gt; Boolean = { it &lt; 0 } // este literal es del tipo '(it: Int) -&gt; Boolean'\nisNegative(-5) // =&gt; true\n</code></pre> <p>Otra convenci\u00f3n es que si el \u00faltimo par\u00e1metro de una funci\u00f3n acepta una funci\u00f3n, una expresi\u00f3n 'lambda' que es pasada como el argumento correspondiente se puede colocar fuera de los par\u00e9ntesis:</p> <pre><code>// lambda expression inside parentheses\nval upperCaseLetters = \"Hello World\".filter({ it.isUpperCase() })\n// lambda outside parentheses\nval lowerCaseLetters = \"Hello World\".filter { it.isLowerCase() }\nprintln(\"$upperCaseLetters - $lowerCaseLetters\") // =&gt; HW - elloorld\n</code></pre> <p>El siguiente ejemplo tenemos una funci\u00f3n de orden superior que acepta una funci\u00f3n lambda <code>{ (String) -&gt; Boolean }</code> como par\u00e1metro. Se expresa como \"acepta una funci\u00f3n 'from String to Boolean'\":</p> <pre><code>// El par\u00e1metro 'email' podemos usarlo como una funci\u00f3n que acepta una cadena y devuelve un booleano.\nfun isAnEmail(email: (String) -&gt; Boolean) {\nemail(\"myemail@example.com\")\n}\nisAnEmail({ s: String -&gt; s.contains(\"@\") }) // forma completa\nisAnEmail { s: String -&gt; s.contains(\"@\") } // Los par\u00e9ntesis son opcionales\nisAnEmail { it.contains(\"@\") } // Uso de 'it'\n</code></pre> <p>Para par\u00e1metros no utilizados se utiliza el operador <code>'_'</code>:</p> <pre><code>val unusedSecondParam: (String, Int) -&gt; Boolean = { s, _ -&gt;\ns.length &gt; 10\n}\nunusedSecondParam(\"Hello World\", 0) // 0 is unused\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#anonymous-functions","title":"Anonymous functions","text":"<p>Una funci\u00f3n an\u00f3nima se parece mucho a una declaraci\u00f3n de funci\u00f3n normal, excepto que se omite su nombre. Su cuerpo puede ser una expresi\u00f3n o un bloque:</p> <pre><code>// Funci\u00f3n an\u00f3nima cuyo cuerpo es una expresi\u00f3n\nfun(x: Int, y: Int): Int = x + y\n// Funci\u00f3n an\u00f3nima con bloque\nfun(x: Int, y: Int): Int {\nreturn x + y\n}\n</code></pre> <p>El tipo de los par\u00e1metros de una funci\u00f3n an\u00f3nima pueden omitirse si se pueden inferir por el contexto:</p> <pre><code>ints.filter(fun(item) = item &gt; 0)\n</code></pre> <p>La inferencia de tipo de retorno para funciones an\u00f3nimas funciona igual que para las funciones normales: el tipo de retorno se deduce autom\u00e1ticamente para funciones an\u00f3nimas con un cuerpo de expresi\u00f3n y debe especificarse expl\u00edcitamente (o se supone que es <code>'Unit'</code>) para funciones an\u00f3nimas con un cuerpo de bloque.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#closures","title":"Closures","text":"<p>Un 'closure' es una funci\u00f3n que tiene acceso a variables y par\u00e1metros que se definen en un \u00e1mbito externo. A diferencia de Java, las variables 'capturadas' pueden ser modificadas.</p> <pre><code>fun printFilteredNamesByLength(length: Int) {\nval names = arrayListOf(\"Adam\", \"Andrew\", \"Chike\", \"Kechi\")\nval filterResult = names.filter {\nit.length == length     // 'length' se define fuera del \u00e1mbito de la lambda\n}\nprintln(filterResult)\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#local-or-nested-functions","title":"Local or Nested Functions","text":"<p>Para llevar m\u00e1s lejos la modularizaci\u00f3n de programas, Kotlin nos proporciona funciones locales, tambi\u00e9n conocidas como funciones anidadas o 'nested functions'. Una funci\u00f3n local es una funci\u00f3n que se declara dentro de otra funci\u00f3n.</p> <p>Podemos hacer que nuestras funciones locales sean m\u00e1s concisas al no pasarles par\u00e1metros expl\u00edcitamente. Esto es posible porque las funciones locales tienen acceso a todos los par\u00e1metros y variables de la funci\u00f3n de cierre.</p> <pre><code>fun printCircumferenceAndArea(radius: Double): Unit {\nfun calCircumference(radius: Double): Double = (2 * Math.PI) * radius\nval circumference = \"%.2f\".format(calCircumference(radius))\nfun calArea(radius: Double): Double = (Math.PI) * Math.pow(radius, 2.0)\nval area = \"%.2f\".format(calArea(radius))\nprint(\"The circle circumference of $radius radius is $circumference and area is $area\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#infix-functions","title":"Infix Functions","text":"<p>Las funciones marcadas con la palabra clave <code>'infix'</code> se pueden llamar usando la notaci\u00f3n 'infix' (omitiendo el punto y los par\u00e9ntesis para la llamada). Estas funciones deben cumplir los siguientes requisitos:</p> <ul> <li>Tienen que ser miembros de una clase o funciones de extensi\u00f3n</li> <li>Deben tener un solo par\u00e1metro</li> <li>Este par\u00e1metro no ser\u00e1 <code>'vararg'</code> ni tener valor por defecto</li> </ul> <p>Para invocar una funci\u00f3n <code>'infix'</code> en Kotlin no necesitamos usar la notaci\u00f3n de puntos ni los par\u00e9ntesis. Hay que tener en cuenta que las funciones <code>'infix'</code> siempre requieren que se especifiquen tanto el receptor como el par\u00e1metro. Cuando se invoca un m\u00e9todo en el receptor actual, como por ejemplo dentro de la clase, se necesita usar explicitamente la notaci\u00f3n <code>'this'</code>. A diferencia de las llamadas a m\u00e9todos regulares, no se puede omitir.</p> <pre><code>class Student {\nvar kotlinScore = 0.0\ninfix fun addKotlinScore(score: Double): Unit {\nthis.kotlinScore = kotlinScore + score\n}\nfun build() {\nthis addKotlinScore 95.0   // Correcto\naddKotlinScore(95.0)       // Correcto\naddKotlinScore 95.0        // Incorrectp: hay que especificar el receptor ('this')\n}\n}\nval student = Student()\nstudent addKotlinScore 95.00 // Invocando la funci\u00f3n usando la notaci\u00f3n 'infix'\nstudent.addKotlinScore(95) // Invocando la funci\u00f3n con notaci\u00f3n normal\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#inline-functions","title":"Inline functions","text":"<p>El compilador de Kotlin crea una clase an\u00f3nima en versiones anteriores de Java cuando creamos o utilizamos expresiones lambda. Esto genera una sobrecarga, adem\u00e1s de la carga de memoria que se genera cuando en una funci\u00f3n lambda hace uso de variables de fuera de su entorno como en las 'closures'.</p> <p>Para evitar esta sobrecarga tenemos el modificador <code>'inline'</code> para las funciones. Una 'High-Order function' con el modificador <code>'inline'</code> se integrar\u00e1 durante la compilaci\u00f3n del c\u00f3digo. En otras palabras, el compilador copiar\u00e1 la 'lambda' (o funci\u00f3n literal) y tambi\u00e9n el cuerpo de la funci\u00f3n de orden superior y los pegar\u00e1 en el sitio de la llamada.</p> <p>Con este mecanismo, nuestro c\u00f3digo se ha optimizado significativamente, no m\u00e1s creaci\u00f3n de clases an\u00f3nimas o asignaciones de memoria extra. Por otro lado el uso de <code>'inline'</code> hace que el compilador genere ficheros bytecode m\u00e1s grandes. Por esta raz\u00f3n, se recomienda encarecidamente que solo se incluyan funciones de orden superior m\u00e1s peque\u00f1as que acepten lambda como par\u00e1metros.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> <li>https://revilofe.github.io/IESRA-DAM-Prog/#/</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.1.-kotlin/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>","tags":["Software","kotlin"]},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/","title":"Apuntes de [Kotlin]","text":""},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#colecciones","title":"Colecciones","text":"<p>Kotlin proporciona su API de colecciones como una biblioteca est\u00e1ndar construida sobre la API de colecciones de Java como 'ArrayList', 'Maps', etc... Kotlin tiene dos variantes de colecciones: mutables e inmutables. Una colecci\u00f3n mutable nos brinda la capacidad de modificar una colecci\u00f3n ya sea agregando, eliminando o reemplazando un elemento. Las colecciones inmutables no se pueden modificar y no tienen estos m\u00e9todos de ayuda.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#lists-inmutable","title":"Lists - [Inmutable]","text":"<p>Una lista es una colecci\u00f3n ordenada de elementos. Esta es una colecci\u00f3n popular ampliamente utilizada.</p> <p>Podemos crear una lista inmutable usando la funci\u00f3n <code>listOf()</code>. Los elementos no se pueden agregar ni eliminar.</p> <pre><code>val fooList = listOf(\"a\", \"b\", \"c\", 1, false)\nval numbers: List&lt;Int&gt; = listOf(1, 2, 3, 4)\nval emptyList: List&lt;String&gt; = emptyList&lt;String&gt;() // lista vac\u00eda\nval nonNullsList: List&lt;String&gt; = listOfNotNull(2, 45, 2, null, 5, null) // lista de valores no nulos\nprintln(fooList.size) // =&gt; 3\nprintln(fooList.first()) // =&gt; a\nprintln(fooList.last()) // =&gt; c\nprintln(fooList.indexOf(\"b\")) // 1\n// Se puede acceder a los elementos de una lista por su \u00edndice\nprintln(fooList[1]) // =&gt; b\n</code></pre> <p>Se puede crear una lista mutable utilizando la funci\u00f3n <code>mutableListOf()</code>:</p> <pre><code>val fooMutableList = mutableListOf(\"a\", \"b\", \"c\")\nfooMutableList.add(\"d\")\nprintln(fooMutableList.last()) // =&gt; d\nprintln(fooMutableList.size) // =&gt; 4\n</code></pre> <p>Con la funci\u00f3n <code>'arrayListOf()'</code> crea una lista mutable y devuelve un tipo 'ArrayList' de la API de colecciones de Java.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#sets-inmutable","title":"Sets - [Inmutable]","text":"<p>Un conjunto o 'set' es una colecci\u00f3n desordenada de elementos \u00fanicos. En otras palabras, es una colecci\u00f3n que no admite duplicados.</p> <p>Podemos crear un conjunto (o 'set') inmutable utilizando la funci\u00f3n <code>'setOf()'</code>:</p> <pre><code>val fooSet = setOf(\"a\", \"b\", \"c\")\nprintln(fooSet.contains(\"a\")) // =&gt; true\nprintln(fooSet.contains(\"z\")) // =&gt; false\n</code></pre> <p>Con la funci\u00f3n <code>'mutableSetOf()'</code> podemos crear un conjunto mutable:</p> <pre><code>// creates a mutable set of int types only\nval intsMutableSet: MutableSet&lt;Int&gt; = mutableSetOf(3, 5, 6, 2, 0)\nintsMutableSet.add(8)\nintsMutableSet.remove(3)\n</code></pre> <p>La funci\u00f3n <code>'hashSetOf()'</code> retorna un 'HashSet' de la API de colecciones de Java el cual almacena los elementos en una tabla 'hash'. Podemos a\u00f1adir o quitar elementos de este conjunto porque es mutable.</p> <p>La funci\u00f3n <code>'linkedSetOf()'</code> retorna un 'LinkedHashSet' de la API de colecciones de Java. Tambi\u00e9n es un conjunto mutable.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#maps-inmutable","title":"Maps - [Inmutable]","text":"<p>Los mapas asocian una clave a un valor. Las claves deben ser \u00fanicas, y por tanto no se permite duplicados. En cambio no hay obligaci\u00f3n de que los valores asociados sean \u00fanicos. Cada clave s\u00f3lo podr\u00e1 asociarse a un solo elemento. De esa manera, cada clave se puede usar para identificar de forma \u00fanica el valor asociado, ya que el mapa se asegura de que no pueda haber claves duplicadas en la colecci\u00f3n. Los mapas implementan un forma eficiente de obtener el valor correspondiente a una determinada clave.</p> <p>Podemos crear un mapa ('map') inmutable usando la funci\u00f3n <code>'mapOf()'</code>:</p> <pre><code>val fooMap = mapOf(\"a\" to 8, \"b\" to 7, \"c\" to 9)\n// Se puede acceder a los valores en el mapa por su clave\nprintln(fooMap[\"a\"]) // =&gt; 8\n// iterar por un mapa con un bucle 'for'\nfor ((key, value) in fooMap) {\nprintln(\"Key $key and value $value\")\n}\n</code></pre> <p>La funci\u00f3n <code>'linkedHashMap()'</code> retorna un 'LinkedHasMap' de la API de colecciones de Java, que es mutable.</p> <p>La funci\u00f3n <code>'sortedMapOf()'</code> retorna un 'SortedMap' de la API de colecciones de Java que tambi\u00e9n es mutable.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#sequences","title":"Sequences","text":"<p>Las secuencias representan colecciones 'lazily-evaluated'. Podemos crear una secuencia utilizando la funci\u00f3n <code>'generateSequence()'</code>. Las secuencias son excelentes  cuando el tama\u00f1o de la colecci\u00f3n es desconocido a priori:</p> <pre><code>val fooSequence = generateSequence(1, { it + 1 })\nval x = fooSequence.take(10).toList()\nprintln(x) // =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// An example of using a sequence to generate Fibonacci numbers:\nfun fibonacciSequence(): Sequence&lt;Long&gt; {\nvar a = 0L\nvar b = 1L\nfun next(): Long {\nval result = a + b\na = b\nb = result\nreturn a\n}\nreturn generateSequence(::next)\n}\nval y = fibonacciSequence().take(10).toList()\nprintln(y) // =&gt; [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n</code></pre> <p>Kotlin proporciona 'higher-order functions' para trabajar con colecciones:</p> <pre><code>val z = (1..9).map { it * 3 }\n.filter { it &lt; 20 }\n.groupBy { it % 2 == 0 }\n.mapKeys { if (it.key) \"even\" else \"odd\" }\nprintln(z) // =&gt; {odd=[3, 9, 15], even=[6, 12, 18]}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#destructuring-data","title":"Destructuring data","text":"<p>Los objetos pueden ser desestructurados en m\u00faltiples variables. Esta sintaxis se llama declaraci\u00f3n de desestructuraci\u00f3n. Una declaraci\u00f3n de desestructuraci\u00f3n crea m\u00faltiples variables a la vez.</p> <pre><code>val (a, b, c) = fooCopy\nprintln(\"$a $b $c\") // =&gt; 1 100 4\n</code></pre> <p>Desestructurando en un bucle <code>'for'</code>:</p> <pre><code>for ((a, b, c) in listOf(fooData)) {\nprintln(\"$a $b $c\") // =&gt; 1 100 4\n}\nval mapData = mapOf(\"a\" to 1, \"b\" to 2)\n// Map.Entry is destructurable as well\nfor ((key, value) in mapData) {\nprintln(\"$key -&gt; $value\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#rangos-de-valores","title":"Rangos de valores","text":"<p>Un rango se define como un intervalo que tiene un valor de inicio y un valor final. Los rangos son cerrados, lo que significa que el valor inicial y final est\u00e1n incluidos en el rango. Los rangos se crean con el operados <code>..</code> o con funciones como <code>rangeTo()</code> o <code>downTo()</code>.</p> <p>Para crear un intervalo sin incluir el \u00faltimo elemento usamos la funci\u00f3n <code>until</code>.</p> <pre><code>val oneToNine = 1..9\nval oneToFive: IntRange = 1.rangeTo(5)\nval fiveToOne = 5.downTo(1)\nprint(fiveToOne)  // =&gt; 5 downTo 1 step 1\nval oneToTen = (1..10).step(2).reversed() // =&gt; 9, 7, 5, 3, 1\nprintln(\"${tenToOne.first} - ${tenToOne.last}\") // =&gt; 10 - 1\nval oneToFour = 1.until(5)\nprint(r) // =&gt; 1..4\n</code></pre> <p>Lost tipos <code>IntRange</code>, <code>LongRange</code>, <code>CharRange</code> tienen una caracter\u00edstica extra y es que permite iterar sobre los intervalos.</p> <p>Una vez que se crea un intervalo, se puede usar el operador <code>in</code> para probar si un valor dado est\u00e1 incluido en el intervalo o el operador <code>!in</code> para comprobar si un valor no est\u00e1 en el intervalo:</p> <pre><code>// Iterar con un bucle 'for'\nfor (i in 1..10) { // equivalent of 1 &lt;= i &amp;&amp; i &lt;= 10\nprint(i)\n}\n// Iterar en sentido inverso\nfor (i in 4 downTo 1) {\nprint(i)\n}\n// Iterar por un intervalo sin incluir el \u00faltimo elemento\nfor (i in 1 until 10) {\n// i in [1, 10), 10 is excluded\nprintln(i)\n}\n// Pasos arbitrarios\nfor (i in 1..4 step 2) {\nprint(i)\n}\nfor (i in 4 downTo 1 step 2) {\nprint(i)\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#smart-casting","title":"Smart Casting","text":"<p>Podemos verificar si un objeto es de un tipo en particular usando el operador <code>is</code> o si no es de un tipo con el operador <code>!is</code>.</p> <p>Si un objeto pasa una verificaci\u00f3n de tipo entonces se puede usar como ese tipo sin realizar la conversi\u00f3n expl\u00edcitamente:</p> <pre><code>fun smartCastExample(x: Any): Boolean {\nif (x is Boolean) {\n// x is automatically cast to Boolean\nreturn x\n} else if (x is Int) {\n// x is automatically cast to Int\nreturn x &gt; 0\n} else if (x is String) {\n// x is automatically cast to String\nreturn x.isNotEmpty()\n} else {\nreturn false\n}\n}\nprintln(smartCastExample(\"Hello, world!\")) // =&gt; true\nprintln(smartCastExample(\"\")) // =&gt; false\nprintln(smartCastExample(5)) // =&gt; true\nprintln(smartCastExample(0)) // =&gt; false\nprintln(smartCastExample(true)) // =&gt; true\n</code></pre> <p>La conversi\u00f3n inteligente ('smart cast') tambi\u00e9n funciona con bloques <code>when</code> o bucles <code>while</code>:</p> <pre><code>fun smartCastWhenExample(x: Any) = when (x) {\nis Boolean -&gt; x\nis Int -&gt; x &gt; 0\nis String -&gt; x.isNotEmpty()\nelse -&gt; false\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#conversion-explicita-o-explicit-casting","title":"Conversi\u00f3n expl\u00edcita o 'Explicit Casting'","text":"<p>Podemos usar el operador <code>as</code> (o el operador de conversi\u00f3n no segura o 'unsafe cast operator') para convertir expl\u00edcitamente una referencia de un tipo a otro tipo en Kotlin. Si la operaci\u00f3n de conversi\u00f3n expl\u00edcita es ilegal, tenga en cuenta que se lanzar\u00e1 una excepci\u00f3n de tipo 'ClassCastException'.</p> <p>Para evitar que se lance una excepci\u00f3n al realizar la conversi\u00f3n, podemos usar el operador de conversi\u00f3n seguro <code>as?</code>. Este operador intentar\u00e1 la conversi\u00f3n y si no se puede realizar la conversi\u00f3n devolver\u00e1 <code>'null'</code> en vez de lanzar la excepci\u00f3n. Por tanto la variable que contiene el resultado de una conversi\u00f3n segura debe ser capaz de mantener un resultado nulo:</p> <pre><code>val circle = shape as Circle\nval circle: Circle? = shape as? Circle // Conversi\u00f3n segura\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#valores-nulos-nullable-types","title":"Valores nulos ('nullable types')","text":"<p>Para que una variable contenga el valor 'null' debe especificarse expl\u00edcitamente como 'nullable'. Una variable se puede especificar como 'nullable' agregando un <code>?</code> a su tipo.</p> <p>Podemos acceder a una variable o m\u00e9todo 'nullable' utilizando el operador <code>'?.'</code> tambi\u00e9n llamado 'Safe Call Operator'. Un m\u00e9todo o variable s\u00f3lo ser\u00e1 invocado si tiene una valor no nulo. En caso de que sea nulo ser\u00e1 ignorado evitando un 'NullPointerException'</p> <p>Kotlin provee el operador <code>'?:'</code>, tambi\u00e9n llamado 'Elvis Operator' para especificar un valor alternativo para usar si una variable es nula. Cuando la expresi\u00f3n de la izquierda del operador <code>'?:'</code> no es nulo entonces lo devuelve. En caso de que sea nulo devuelve la expresi\u00f3n de la derecha. La expresi\u00f3n de la derecha s\u00f3lo ser\u00e1 evaluada si la expresi\u00f3n de la izquierda es 'null'.</p> <pre><code>val name: String = null // no compilar\u00e1 ya que no puede contener valores nulos\nvar fooNullable: String? = \"abc\"\nfooNullable?.length // =&gt; 3\n// 'Elvis Operator'\nfooNullable?.length ?: -1 // =&gt; 3\nfooNullable = null\nval len: Int? = fooNullable?.length // El tipo de retorno de 'fooNullable' puede ser 'null' y por tanto debemos usar Int?\nfooNullable?.length // =&gt; null\nfooNullable?.length ?: -1 // =&gt; -1\n// Encadenar 'safe calls'. La cadena retorna 'null' si alguna de ellas es 'null'\nfun getCountryNameSafe(person: Person?): String? {\nreturn person?.address?.city?.country?.name\n}\n// Dado que 'throw' y 'return' son expresiones en Kotlin se pueden usar en la parte derecha del operador 'Elvis'\nfun foo(node: Node): String? {\nval parent = node.getParent() ?: return null\nval name = node.getName() ?: throw IllegalArgumentException(\"name expected\")\n// ...\n}\n</code></pre> <p>De manera similar, podemos devolver tipos 'nullable' y no 'nullable'  desde una funci\u00f3n.</p> <pre><code>fun getName(): String? = name // Esta funci\u00f3n puede o no devolver una referencia nula.\nfun getNotNullName(): String = name ?: \"John\" // Esta funci\u00f3n no devolver\u00e1 una referencia nula\ngetName() // =&gt; null\ngetNotNullName() // =&gt; John\n</code></pre> <p>Con 'smart cast', el compilador rastrea las condiciones dentro de una expresi\u00f3n <code>'if'</code>. Si realizamos la verificaci\u00f3n de que una variable no es nula, entonces el compilador nos permitir\u00e1 acceder a la variable como si hubiera sido declarada como un tipo no anulable:</p> <pre><code>var l = if (name != null) name.length else -1\n</code></pre> <p>El operador de aserci\u00f3n no-nulo <code>'!!'</code> convierte cualquier valor a un tipo no nulo y lanza una excepci\u00f3n 'NullPointerException' si el valor es nulo.</p> <pre><code>val length: Int = name!!.length\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#igualdad","title":"Igualdad","text":"<p>En Kotlin hay tenemos la igualdad estructural y la igualdad referencial.</p> <p>La igualdad estructural se comprueba con la operaci\u00f3n <code>'=='</code> y la parte contraria <code>'!='</code> y se utiliza para comprobar si dos valores o variables son iguales (<code>equals()</code>)</p> <pre><code>if (a == b) {\n// ...\n} else {\n// ...\n}\n</code></pre> <p>La igualdad referencial se comprueba con la operaci\u00f3n <code>'==='</code> y su contraparte <code>'!=='</code> y eval\u00faa a <code>true</code> si y s\u00f3lo si dos referencias apuntan al mismo objeto.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#standard-library-functions","title":"[Standard Library Functions]","text":"<p>Son funciones que proporciona Kotlin para aumentar la biblioteca est\u00e1ndar de Java.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#apply","title":"[Apply]","text":"<p><code>'apply'</code> es una funci\u00f3n de extensi\u00f3n de la biblioteca est\u00e1ndar de Kotlin declarada en <code>'Any'</code>, por lo que puede ser invocada en cualquier tipo de instancia. <code>'apply'</code> acepta una expresi\u00f3n lambda que es invocada y el receptor es la instancia donde es llamada. La funci\u00f3n <code>'apply'</code> devuelve una instacia del original.</p> <p>Su uso principal es hacer que el c\u00f3digo que necesita inicializar una instancia sea m\u00e1s legible permitiendo que las funciones y las propiedades se llamen directamente dentro de la funci\u00f3n antes de devolver el valor en s\u00ed.</p> <pre><code>data class Person(var firstName: String, var lastName : String)\nvar person = Person(\"John\", \"Doe\")\nperson.apply { this.firstName = \"Bruce\" }\nprint(person) // =&gt; Person(firstName=Bruce, lastName=Doe)\n// 'apply' retorna la instancia original.\nperson.apply { this.firstName = \"Bruce\" }.firstName = \"Steve\"\nprint(person) // =&gt; Person(firstName=Steve, lastName=Doe)\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#let","title":"[Let]","text":"<p>La funci\u00f3n <code>'let'</code> toma el objeto sobre el que se invoca como par\u00e1metro y devuelve el resultado de la expresi\u00f3n lambda. Es \u00fatil cuando desea ejecutar alg\u00fan c\u00f3digo en un objeto antes de devolver alg\u00fan valor diferente y no necesita mantener una referencia al original:</p> <pre><code>fun main(args: Array&lt;String&gt;) {\nvar str = \"Hello World\"\nstr.let { println(\"$it!!\") } // =&gt; Hello World!!\nprintln(str) // =&gt; Hello World\n}\nvar strLength = str.let { \"$it function\".length } // devuelve el resultado de la expresi\u00f3n lambda\nprintln(\"strLength is $strLength\") // =&gt; strLength is 25\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#with","title":"[With]","text":"<p>La funci\u00f3n <code>'with'</code> es una funci\u00f3n de nivel superior dise\u00f1ada para los casos en los que desea llamar a m\u00faltiples funciones en un objeto y no desea repetir el receptor cada vez. La funci\u00f3n <code>'with'</code> acepta un receptor y un cierre para operar en dicho receptor:</p> <pre><code>data class Person(var firstName: String, var lastName : String)\nvar person = Person(\"John\", \"Doe\")\nwith(person)\n{\nfirstName = \"Bruce\"\nlastName = \"Doe\"\n}\n// notaci\u00f3n sin 'with'\nperson.firstName = \"John\"\nperson.lastName = \"Doe\"\n</code></pre> <p>La \u00faltima expresi\u00f3n en un bloque <code>'with'</code> se retorna como resultado:</p> <pre><code>var name = with(person)\n{\nfirstName = \"John\"\nlastName = \"Doe\"\n\"$firstName $lastName\" // se retorna este valor y se almacena en 'name'\n}\nprintln(name) // =&gt; John Doe\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#run","title":"[Run]","text":"<p><code>'Run'</code> es una funci\u00f3n que combina las caracter\u00edsticas de <code>'with'</code> y <code>'let'</code>. Esto significa que se pasa una expresi\u00f3n lambda a la funci\u00f3n <code>'run'</code> y la instancia del objeto es el receptor. El valor de retorno de la expresi\u00f3n lambda se usa como valor de retorno:</p> <pre><code>person.run {\nthis.firstName = \"Bruce\"\n}\nprint(person) // =&gt; Person(firstName=Bruce, lastName=Doe)\n</code></pre> <p>La diferencia clave entre <code>'let'</code> y <code>'run'</code> es que con <code>'run'</code> el receptor es la instancia,  mientras que en <code>'let'</code>, el argumento de la expresi\u00f3n lambda es la instancia.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#repeat","title":"[Repeat]","text":"<p>Esta funci\u00f3n acepta un entero y una funci\u00f3n literal. La funci\u00f3n literal ser\u00e1 invocada las veces indicadas por el valor entero.</p> <pre><code>repeat(10, { println(\"Hello\") })\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#lazy","title":"[Lazy]","text":"<p>La funci\u00f3n <code>'lazy'</code> es una funci\u00f3n cuya utilidad es envolver funciones costosas en t\u00e9rminos de rendimiento o de recursos y que ser\u00e1n invocadas cuando sean requeridas por primera vez. La ventaja de utilizar esta funci\u00f3n proporcionada por la biblioteca est\u00e1ndar de Kotlin es que el compilador mantendr\u00e1 la invocaci\u00f3n sincronizada evitando que sea invocada m\u00e1s de una vez.</p> <pre><code>fun readStringFromDatabase(): String = ... // expensive operation\nval lazyString = lazy { readStringFromDatabase() }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#use","title":"[Use]","text":"<p>La funci\u00f3n <code>'use'</code> es similar a la declaraci\u00f3n <code>'try-with-resources'</code> presente en Java 7. La funci\u00f3n <code>'use'</code> se define como una funci\u00f3n de extensi\u00f3n de la interfaz 'Closeable'. Ejecuta la funci\u00f3n y luego 'cierra' el recurso de forma segura.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#assertions","title":"Assertions","text":"<p>Kotlin proporciona un conjunto de funciones que nos permiten agregar una cantidad limitada de especificaciones formales a nuestro c\u00f3digo. Una especificaci\u00f3n formal es una aserci\u00f3n que siempre debe ser verdadera o falsa en la ubicaci\u00f3n cuando se ejecuta la aserci\u00f3n. Estos tambi\u00e9n se conocen como contratos o dise\u00f1o por contrato:</p> <ul> <li><code>'require()'</code> y <code>'requireNotNull()'</code> lanza una excepci\u00f3n de tipo 'IllegalArgumentException' y se utiliza para garantizar que los argumentos cumplan el contrato.</li> <li><code>'assert()'</code> lanza una excepci\u00f3n 'AssertionException' y se utiliza para garantizar que nuestro estado interno es consistente.</li> <li><code>'check()'</code> y <code>'error()'</code> lanza una excepci\u00f3n 'IllegalStateException' y tambi\u00e9n se usa para mantener la consistencia del estado interno.</li> </ul> <p>Estas funciones son similares. La clave que las diferencia es el tipo de excepci\u00f3n que se plantea.</p> <pre><code>fun neverEmpty(str: String) {\nrequire(str.length &gt; 0, { \"String should not be empty\" })\nprintln(str)\n}\nfun foo(k: Int, value: Boolean) {\nrequire(k &gt; 10, { \"k should be greater than 10\" }) // =&gt; throws an IllegalArgumentException\nrequireNotNull(k) // =&gt; throws an IllegalArgumentException if the value is null.\ncheck(value) // =&gt; throws an IllegalStateException if the value is false\nif (k == 20) error(\"Error: k == 20\") // =&gt; throws an IllegalStateException\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#excepciones","title":"Excepciones","text":"<p>En Kotlin todas las excepciones son subclases de la clase <code>'Throwable'</code>. Cada excepci\u00f3n tiene un mensaje, un seguimiento de la pila y una causa opcional. Kotlin no tiene 'checked exceptions' a diferencia de Java, que realiza la distinci\u00f3n entre tipos de excepciones.</p> <p>Para lanzar un objeto de excepci\u00f3n, se utiliza la palabra clave <code>'throw'</code>:</p> <pre><code>throw Exception(\"Message\")\n</code></pre> <p>Para capturar una excepci\u00f3n lanzada se utiliza un bloque <code>'try'</code>:</p> <pre><code>try {\n// some code\n}\ncatch (e: SomeException) {\n// handler\n}\nfinally {\n// optional finally block\n}\n</code></pre> <p>Puede haber 0 o m\u00e1s bloques <code>'catch'</code>. Los bloques <code>'finally'</code> son opcionales y puede omitirse. Sin embargo, tiene que haber al menos un bloque <code>'catch'</code> o <code>'finally'</code>.</p> <p>Al igual que muchas otras instrucciones en Kotlin, <code>'try'</code> es una expresi\u00f3n y por tanto puede devolver un valor:</p> <pre><code>val a: Int? = try { parseInt(input) } catch (e: NumberFormatException) { null }\n</code></pre> <p>El valor devuelto por un <code>'try'</code> que act\u00faa como expresi\u00f3n es la \u00faltima expresi\u00f3n en el bloque <code>'try'</code> o la \u00faltima expresi\u00f3n en el bloque <code>'catch'</code>. El contenido del bloque <code>'finally'</code> no afecta al resultado de la expresi\u00f3n.</p> <p><code>'throw'</code> es una expresi\u00f3n en Kotlin, as\u00ed que se puede usar, por ejemplo, como parte de una 'Elvis expression':</p> <pre><code>val s = person.name ?: throw IllegalArgumentException(\"Name required\")\n</code></pre> <p>El tipo de retorno de una expresi\u00f3n <code>'throw'</code> es el tipo especial <code>'Nothing'</code>. Este tipo no tiene valores y se utiliza para marcar ubicaciones del c\u00f3digo que nunca se pueden alcanzar.</p> <pre><code>fun fail(message: String): Nothing {\nthrow IllegalArgumentException(message)\n}\n</code></pre> <p>Cuando llame a la funci\u00f3n del ejemplo anterior, el compilador sabr\u00e1 que la ejecuci\u00f3n no contin\u00faa m\u00e1s all\u00e1 de la llamada:</p> <pre><code>val s = person.name ?: fail(\"Name required\")\nprintln(s)     // 's' is known to be initialized at this point\n</code></pre> <p>Otro caso en el que puede encontrar este tipo es la inferencia de tipos. La variante 'nullable' de este tipo, <code>'Nothing?'</code>, tiene exactamente un valor posible, que es el valor <code>'null'</code>. Si se usa el valor nulo para inicializar un valor de un tipo inferido y no hay otra informaci\u00f3n que se pueda usar para determinar un tipo m\u00e1s espec\u00edfico, el compilador inferir\u00e1 el tipo <code>'Nothing?'</code>:</p> <pre><code>val x = null           // 'x' tiene el tipo `Nothing?`\nval l = listOf(null)   // 'l' tiene el tipo `List&lt;Nothing?&gt;\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#anotaciones","title":"Anotaciones","text":"<p>Las anotaciones permiten a los desarrolladores agregar un significado adicional a las clases, interfaces, par\u00e1metros, etc., en el momento de la compilaci\u00f3n. Las anotaciones pueden ser utilizadas por el compilador o por su propio c\u00f3digo a trav\u00e9s de la reflexi\u00f3n en tiempo de ejecuci\u00f3n. Dependiendo del valor de la anotaci\u00f3n, el significado del programa o los datos puede cambiar.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmstatic","title":"[@JvmStatic]","text":"<p>Kotlin representa funciones de nivel de paquete (funciones fuera de una clase) como m\u00e9todos est\u00e1ticos. Kotlin tambi\u00e9n puede generar m\u00e9todos est\u00e1ticos para funciones definidas en 'objects' y 'companin objects' si anota esas funciones como <code>'@JvmStatic'</code>. Si usa esta anotaci\u00f3n, el compilador generar\u00e1 tanto un m\u00e9todo est\u00e1tico en la clase envolvente del objeto como un m\u00e9todo de instancia en el propio objeto.</p> <pre><code>class C {\ncompanion object {\n@JvmStatic fun foo() {}\nfun bar() {}\n}\n}\n// Ahora 'foo()' es est\u00e1tico en Java pero no 'bar()'\nC.foo(); // correcto\nC.bar(); // error: 'bar()' no es un m\u00e9todo est\u00e1tico\nC.Companion.foo(); // correcto\nC.Companion.bar(); // la \u00fanica forma de invocar a 'bar()'\nobject Obj {\n@JvmStatic fun foo() {}\nfun bar() {}\n}\n// In Java:\nObj.foo(); // correcto\nObj.bar(); // error\nObj.INSTANCE.bar(); // correcto, una llamada a trav\u00e9s de la instancia 'Singleton'\nObj.INSTANCE.foo(); // correcto\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#throws","title":"[@Throws]","text":"<p>Dado que todas las excepciones en Kotlin son 'unchecked exceptions', no es necesario agregar una lista de posibles excepciones a las firmas de m\u00e9todos como las que hay en Java. Sin embargo, es posible que deseamos informar a los usuarios de Java que nuestra API produce excepciones en ciertas situaciones. Podemos hacer esto utilizando la anotaci\u00f3n <code>'@Throws'</code>, que se utiliza para indicar al compilador que genere cl\u00e1usulas de lanzamiento en los m\u00e9todos generados.</p> <pre><code>@Throws(FileNotFoundException::class)\nfun fileExists(path: String) {\n// ...\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmoverloads","title":"[@JvmOverloads]","text":"<p>Dada una funci\u00f3n con par\u00e1metros por defecto, <code>'@JvmOverloads'</code> har\u00e1 que el compilador cree m\u00faltiples m\u00e9todos sobrecargados para cada par\u00e1metro predeterminado.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmname","title":"[@JvmName]","text":"<p>Podemos cambiar el nombre del fichero creado por Kotlin con la anotaci\u00f3n <code>'@JvmName'</code>:</p> <pre><code>// example.kt (sin @JvmName)\npackage demo\nclass Foo\nfun bar() { ... }\n// En Java\nnew demo.Foo();\ndemo.ExampleKt.bar();\n// Usamos la anotaci\u00f3n '@JvmName' al principio del fichero para indicar al compilador el nombre del fichero\n@file:JvmName(\"DemoUtils\")\npackage demo\nclass Foo\nfun bar() { ... }\n// Ahora en Java\nnew demo.Foo();\ndemo.DemoUtils.bar();\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#jvmmultifileclass","title":"[@JvmMultifileClass]","text":"<p>Adem\u00e1s de indicarle al compilador el nombre del fichero con <code>'@JvmName'</code> podemos indicarle que combine todas las funciones de nivel superior de varios ficheros en Kotlin en una \u00fanica clase Java con la anotaci\u00f3n <code>'@JvmMultifileClass'</code>.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#reflection","title":"[Reflection]","text":"<p>Reflection es el nombre dado a la inspecci\u00f3n del c\u00f3digo en tiempo de ejecuci\u00f3n en lugar de tiempo de compilaci\u00f3n. Puede usarse para crear instancias de clases, buscar funciones e invocarlas, inspeccionar anotaciones, buscar campos y descubrir par\u00e1metros y gen\u00e9ricos, todo sin conocer esos detalles en el momento de la compilaci\u00f3n.</p> <p>Por ejemplo, si necesitamos persistir tipos en una base de datos y a priori no conocemos el tipo de datos podemos utilizar la reflexi\u00f3n para conocer el tipo de datos en tiempo de ejecuci\u00f3n y crear la SQL apropiada a ese tipo.</p> <p>Para usar la reflexi\u00f3n en Kotlin hay que importar el paquete <code>kotlin.reflect</code>.</p> <p><code>'KClass'</code> es el tipo central utilizado en la reflexi\u00f3n de Kotlin. Cada tipo tiene una instancia de <code>'KClass'</code> en tiempo de ejecuci\u00f3n que contiene detalles de las funciones, propiedades, anotaciones, etc., para ese tipo. Para obtener una instancia de <code>'KClass'</code> para cualquier tipo, usamos la sintaxis especial <code>'::class'</code> en una instancia de ese tipo:</p> <pre><code>val name = \"George\"\nval kclass = name::class // =&gt; class kotlin.String\ndata class Person(val firstName: String, val lastName: String)\nprintln(Person::class.qualifiedName) // =&gt; Person\nprintln(Person::class.isData) // =&gt; true\n</code></pre> <p>Podemos obtener una referencia a la clase utilizando el 'fully qualified name or FQN' de la clase y la API 'reflection' de Java. Si el compilador no encuentra la clase lanza una 'ClassNotFoundException':</p> <pre><code>package com.example\ndata class Person(val firstName: String, val lastName: String)\nval kClass = Class.forName(\"com.example.Person\").kotlin // =&gt; class com.example.Personal\n</code></pre> <p>Para crear instancias de tipo sin conocer el tipo en tiempo de ejecuci\u00f3n podemos invocar la funci\u00f3n <code>'createInstance()'</code> en una referencia de <code>'KClass'</code>. Podemos usar esta funci\u00f3n con clases sin par\u00e1metros o con par\u00e1metros opcionales, es decir, que tengan valor por defecto:</p> <pre><code>class PositiveInteger(value: Int = 0)\nfun createInteger(kclass: KClass&lt;PositiveInteger&gt;): PositiveInteger {\nreturn kclass.createInstance()\n}\n</code></pre> <p>Podemos devolver una lista de todos los constructores declarados en un tipo dado usando la propiedad <code>'constructor'</code> disponible en el tipo <code>'KClass'</code>. Podemos instanciar una clase usando el constructor con la instrucci\u00f3n <code>'call'</code> o <code>'callBy'</code>:</p> <pre><code>class Person constructor(val firstName: String, val lastName: String)\nfun &lt;T : Any&gt; printConstructors(kclass: KClass&lt;T&gt;) {\nkclass.constructors.forEach {\nprintln(it.parameters)\n}\n}\nprintConstructors(Person::class) // Muestra el/los constructor/es de la clase 'Person'\n// Recupera el primer constructor. Si no encuentra ninguno lanza una excepci\u00f3n.\nval constructor = Person::class.constructors.first()\nval person = constructor.call(\"John\", \"Doe\") // Invocar al constructor con 'call'\nprintln(person.firstName) // =&gt; John\n</code></pre> <p>Adem\u00e1s de los constructores de una clase, tambi\u00e9n podemos acceder y listar las funciones de una clase con la propiedad <code>'functions'</code> disponible en el tipo <code>'KClass'</code>:</p> <pre><code>class Person constructor(val firstName: String, val lastName: String) {\nfun getName(): String {\nreturn \"$firstName $lastName\"\n}\n}\nfun &lt;T : Any&gt; printFunctions(kclass: KClass&lt;T&gt;) {\nkclass.functions.forEach {\nprintln(it.name)\n}\n}\nprintFunctions(Person::class) // =&gt; getName equals hashCode toString\nval function = Person::class.functions.find { it.name == \"getName\" }\nval person = Person(\"John\", \"Doe\")\nfunction?.call(person) // =&gt; John Doe\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#coroutines","title":"Coroutines","text":"<p>(todo)</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#testing","title":"Testing","text":"<p>KotlinTest es el framework para probar y testear el c\u00f3digo en Kotlin. A\u00f1adir la dependencia a Gradle: <code>testCompile 'io.kotlintest:kotlintest:x.y.z'</code>.</p> <p>Normalmente, para mantener ordenada la estructura del proyecto los ficheros de test se ubican en <code>src/test/kotlin</code></p> <p>Una especificaci\u00f3n o 'spec' es simplemente la manera en que las pruebas se presentan en los archivos de clase. Hay varias especificaciones diferentes disponibles como FunSpec, StringSpec+*, **ShouldSpec. etc...</p> <p>La especificaci\u00f3n FunSpec permite crear pruebas similares al estilo jUnit. Para escribir un test unitario invocamos la funci\u00f3n 'test' que toma dos par\u00e1metros. El primer par\u00e1metro es una descripci\u00f3n de la prueba unitaria y el segundo es una funci\u00f3n literal que contiene el cuerpo de la prueba. La descripci\u00f3n o nombre de la prueba aparecer\u00e1 en la salida, as\u00ed que permite saber que prueba/s han pasado la prueba y cu\u00e1les han fallado.</p> <pre><code>class StringTestWithFunSpec : FunSpec() {\ninit {\ntest(\"String.startsWith should be true for a prefix\") {\n\"helloworld\".startsWith(\"hello\") shouldBe true\n}\ntest(\"String.endsWith should be true for a prefix\") {\n\"helloworld\".endsWith(\"world\") shouldBe true\n}\n}\n}\n</code></pre> <p>La especificaci\u00f3n StringSpec es la especificaci\u00f3n recomendada por los autores de Kotlin y es la especificaci\u00f3n m\u00e1s simple y compacta ya que reduce la sintaxis al m\u00ednimo. Se escribe una cadena seguida de una expresi\u00f3n lambda para probar el c\u00f3digo:</p> <pre><code>class StringTestWithStringSpec : StringSpec() {\ninit {\n\"strings.length should return size of string\" {\n\"hello\".length shouldBe 5\n\"hello\" shouldBe haveLength(5)\n}\n}\n}\n</code></pre> <p>La especificaci\u00f3n ShouldSpec es similar a FunSpec pero usa la palabra clave <code>'should'</code> en vez de <code>'test'</code>:</p> <pre><code>class StringTestWithShouldSpec : ShouldSpec() {\ninit {\nshould(\"return the length of the string\") {\n\"sammy\".length shouldBe 5\n\"\".length shouldBe 0\n}\n// Nested form\n\"String.length\" {\nshould(\"return the length of the string\") {\n\"sammy\".length shouldBe 5\n\"\".length shouldBe 0\n}\n}\n}\n}\n</code></pre> <p>La especificaci\u00f3n WordSpec usa tambi\u00e9n la palabra clave <code>'should'</code>. Esta especificaci\u00f3n permite anidar las pruebas:</p> <pre><code>class StringTestWithWordSpec : WordSpec() {\ninit {\n\"String.length\" should {\n\"return the length of the string\" {\n\"sammy\".length shouldBe 5\n\"\".length shouldBe 0\n}\n}\n}\n}\n</code></pre> <p>La especificaci\u00f3n BehaviorSpec utiliza las palabras clave <code>'given'</code>, <code>'when'</code> y <code>'then'</code> para crear pruebas unitarias m\u00e1s cercanas al lenguaje natural:</p> <pre><code>class StringTestWithBehaviorSpec : BehaviorSpec() {\ninit {\ngiven(\"a stack\") {\nval stack = Stack&lt;String&gt;()\n`when`(\"an item is pushed\") {\nstack.push(\"kotlin\")\nthen(\"the stack should not be empty\") {\nstack.isEmpty() shouldBe true\n}\n}\n`when`(\"the stack is popped\") {\nstack.pop()\nthen(\"it should be empty\") {\nstack.isEmpty() shouldBe false\n}\n}\n}\n}\n}\n</code></pre> <p>La especificaci\u00f3n FeatureSpec es similar a la especificaci\u00f3n BehaviorSpec pero utiliza las palabras clave <code>'feature'</code> y <code>'scenario'</code>:</p> <pre><code>class StringTestWithFeatureSpec : FeatureSpec() {\ninit {\nfeature(\"Hello World\") {\nscenario(\"should starts with 'Hello'\") {\n\"Hello World\".startsWith(\"Hello\")\n}\nscenario(\"should ends with 'World'\") {\n\"Hello World\".endsWith(\"World\")\n}\n}\n}\n}\n</code></pre> <p>Los matchers prueban alguna propiedad, indicada por el nombre del matcher, m\u00e1s all\u00e1 de la simple igualdad. Por ejemplo, un comparador puede verificar si una cadena est\u00e1 vac\u00eda o si un entero es positivo.</p> <pre><code>// [String matchers]\nclass StringTestWithDifferentMatchers : StringSpec() {\ninit {\n\"Tests string prefixes\" {\n\"Hello\".startsWith(\"He\") shouldBe true\n\"Hello\" shouldBe startWith(\"He\")\n}\n\"Tests substrings\"{\n\"Hello\" shouldBe include(\"el\")\n}\n\"Test string suffixes\" {\n\"Hello\".endsWith(\"llo\") shouldBe true\n\"Hello\" shouldBe endWith(\"llo\")\n}\n\"Tests the length of a string\" {\n\"Hello\".length shouldBe 5\n\"Hello\" shouldBe haveLength(5)\n}\n\"Tests the equality using a regular expression\" {\n\"Hello\" shouldBe match(\"He...\")\n}\n}\n}\n// [Collection matchers]\nclass CollectionTestWithDifferentMatchers : StringSpec() {\nprivate val listWithDifferentIntegers = listOf(1, 2, 3, 4, 5)\nprivate val mapWithKeyAndValues = mapOf&lt;Int, String&gt;(1 to \"Hello\", 2 to \"World\")\ninit {\n\"Tests that a collection should contain the given element\" {\nlistWithDifferentIntegers shouldBe contain(3)\n}\n\"Test the size of the collection\" {\nlistWithDifferentIntegers shouldBe haveSize&lt;Int&gt;(5)\n}\n\"Tests that the collections should be sorted\" {\nlistWithDifferentIntegers shouldBe sorted&lt;Int&gt;()\n}\n\"Tests that the collection has a single element that is equal to the given element\" {\nlistWithDifferentIntegers shouldNotBe singleElement(2)\n}\n\"Tests that the collection contains all the given elements. The order of these elements does not matter.\" {\nlistWithDifferentIntegers shouldBe containsAll(1, 2, 4)\n}\n\"Tests whether the collection is empty or not\" {\nlistWithDifferentIntegers shouldNotBe beEmpty&lt;Int&gt;()\n}\n\"Tests whether the map contains mapping from a key to any value\" {\nmapWithKeyAndValues shouldBe haveKey(2)\n}\n\"Tests whether the map contains the value for at least one key\" {\nmapWithKeyAndValues shouldBe haveValue(\"Hello\")\n}\n\"Tests that the map contains the exact mapping of the key to the value\" {\nmapWithKeyAndValues shouldBe contain(2, \"World\")\n}\n}\n}\n// [Floating point matchers]\n// En valores en punto flotante m\u00e1s que la igualdad absoluta se utiliza la 'tolerancia' que es el valor m\u00ednimo entre dos valores que satisfacen el criterio de igualdad\nclass FloatNumberTestWithTolerance : StringSpec() {\nprivate val randomDouble = 18.005\nprivate val enoughDouble = 18.006\ninit {\n\"Test if two numbers are equals\" {\nrandomDouble shouldNotBe equals(enoughDouble)\nrandomDouble shouldBe (enoughDouble plusOrMinus 0.01)\n}\n}\n}\n// [Exception matchers]\n// 'shouldThrow fallar\u00e1 si se lanza una excepci\u00f3n diferente\nclass ExceptionTest : StringSpec() {\ninit {\n\"Testing IllegalArgumentException\" {\nshouldThrow&lt;IllegalArgumentException&gt; {\naddNumberToTwo(10.0) shouldEqual 10.5\n}\n}\n}\n}\n@Throws(IllegalArgumentException::class)\nfun addNumberToTwo(a: Any): Int {\nif (a !is Int) {\nthrow IllegalArgumentException(\"Number must be an integer\")\n}\nreturn 2 + a\n}\n</code></pre> <p>Los matchers se pueden combinar usando los operadores de la l\u00f3gica booleana como <code>'and'</code> y <code>'or'</code>:</p> <pre><code>class CombiningMatchers : StringSpec() {\ninit {\n\"Combining matchers\" {\n\"Hello World\" should (startWith(\"Hel\") and endWith(\"rld\"))\n}\n}\n}\n</code></pre> <p>Un inspector en KotlinTest es la forma m\u00e1s f\u00e1cil de probar el contenido de 'collections':</p> <pre><code>val kings = listOf(\"Stephen I\", \"Henry I\", \"Henry II\", \"Henry III\", \"William I\", \"William III\")\nclass InspectorTests : StringSpec() {\ninit {\n\"all kings should have a regal number\" {\nforAll(kings) {\nit should endWith(\"I\")\n}\n}\n\"only one king has the name Stephen\" {\nforOne(kings) {\nit should startWith(\"Stephen\")\n}\n}\n\"some kings have regal number II\" {\nforSome(kings) {\nit should endWith(\"II\")\n}\n}\n\"at least one King has the name Henry\" {\nforAtLeastOne(kings) {\nit should startWith(\"Henry\")\n}\n}\n}\n}\n</code></pre> <p>A veces es posible que sea necesario ejecutar algo de c\u00f3digo, antes de que se ejecuten las pruebas o despu\u00e9s de que se completen todas las pruebas (sean exitosas o no). Esto se puede lograr mediante el uso de la clase abstracta <code>'ProjectConfig'</code>. Para usar esto, simplemente se crea un objeto que extienda de esta clase abstracta y asegurarse que est\u00e9 en la ruta de la clase. KotlinTest lo encontrar\u00e1 autom\u00e1ticamente y lo invocar\u00e1:</p> <pre><code>object codeExecutionBeforeAndAfterTestCases : ProjectConfig() {\noverride fun beforeAll() {\n// ...code\n}\noverride fun afterAll() {\n// ...code\n}\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#java-interop","title":"Java Interop","text":""},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#calling-java-from-kotlin","title":"Calling Java from Kotlin","text":"<p>Kotlin est\u00e1 dise\u00f1ado teniendo en cuenta la interoperabilidad de Java. El c\u00f3digo Java existente puede llamarse desde Kotlin de una manera natural, y el c\u00f3digo Kotlin tambi\u00e9n se puede usar desde Java sin problemas.</p> <p>Casi todo el c\u00f3digo de Java se puede utilizar sin problemas:</p> <pre><code>import java.util.*\nfun demo(source: List&lt;Int&gt;) {\nval list = ArrayList&lt;Int&gt;()\n// 'for'-loops work for Java collections:\nfor (item in source) {\nlist.add(item)\n}\n// Operator conventions work as well:\nfor (i in 0..source.size - 1) {\nlist[i] = source[i] // get and set are called\n}\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#getters-and-setters","title":"'Getters' and 'Setters'","text":"<p>Los m\u00e9todos que siguen las convenciones de Java para 'getters' y 'setters' (m\u00e9todos sin argumentos con nombres que comienzan con 'get' y m\u00e9todos con argumentos \u00fanicos con nombres que comienzan con 'set') se representan como propiedades en Kotlin.</p> <p>Los m\u00e9todos de acceso booleanos (donde el nombre del 'getter' comienza con 'is' y el nombre del 'setter' comienza con 'set') se representan como propiedades que tienen el mismo nombre que el m\u00e9todo 'getter':</p> <pre><code>import java.util.Calendar\nfun calendarDemo() {\nval calendar = Calendar.getInstance()\nif (calendar.firstDayOfWeek == Calendar.SUNDAY) {  // call getFirstDayOfWeek()\ncalendar.firstDayOfWeek = Calendar.MONDAY      // call setFirstDayOfWeek()\n}\nif (!calendar.isLenient) {                         // call isLenient()\ncalendar.isLenient = true                      // call setLenient()\n}\n}\n</code></pre> <p>Si la clase Java solo tiene un 'setter', no ser\u00e1 visible como una propiedad en Kotlin, ya que Kotlin no admite propiedades que tengan \u00fanicamente el m\u00e9todo 'setter'.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#void-como-retorno","title":"'Void' como retorno","text":"<p>Si un m\u00e9todo Java devuelve <code>'void'</code>, devolver\u00e1 <code>'Unit'</code> cuando se llame desde Kotlin. Si, por casualidad, alguien usa ese valor de retorno, el compilador de Kotlin lo asignar\u00e1 en el sitio de la llamada, ya que el valor en s\u00ed mismo se conoce de antemano (es <code>'Unit'</code>).</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#escapar-palabras-clave-en-kotlin","title":"Escapar palabras clave en Kotlin","text":"<p>Algunas de las palabras clave de Kotlin son identificadores v\u00e1lidos en Java, como por ejemplo <code>'in'</code>, <code>'object'</code>, <code>'is'</code>, etc... Si una biblioteca de Java usa una palabra clave de Kotlin para un m\u00e9todo, se puede escapar usando las comillas invertidas (`):</p> <pre><code>// Java\npublic class Date {\npublic void when(str:String) { .... }\n}\n// Kotlin\ndate.`when`(\"2016\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#null-safety","title":"Null-Safety","text":"<p>Cualquier referencia en Java puede ser nula, lo que hace que los requisitos de Kotlin de seguridad con los valores nulos no sean pr\u00e1cticos para los objetos procedentes de Java. Los tipos de declaraciones de Java se tratan especialmente en Kotlin y se llaman <code>'platform types'</code>. Los controles nulos son relajados para tales tipos, por lo que las garant\u00edas de seguridad para ellos son las mismas que en Java.</p> <pre><code>val list = ArrayList&lt;String&gt;() // non-null (constructor result)\nlist.add(\"Item\")\nval size = list.size // non-null (primitive int)\nval item = list[0] // platform type inferred (ordinary Java object)\nitem.substring(1) // allowed, may throw an exception if item == null\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#checked-exceptions","title":"'Checked exceptions'","text":"<p>Kotlin no tiene 'checked exceptions'. Por lo tanto, los m\u00e9todos Java que tienen 'checked exceptions' se tratan de la misma manera que el resto de m\u00e9todos.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#calling-kotlin-from-java","title":"Calling Kotlin from Java","text":"<p>Al igual que Java se puede usar sin problemas en Kotlin, Kotlin se puede usar f\u00e1cilmente desde Java.</p>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#top-level-functions","title":"Top-level functions","text":"<p>La JVM no admite funciones de nivel superior. Por lo tanto, para hacer que funcionen con Java, el compilador Kotlin crea una clase Java con el nombre del paquete. Las funciones se definen luego como m\u00e9todos est\u00e1ticos Java en esta clase, que deben ser instanciados antes de su uso.</p> <pre><code>// Kotlin\npackage org.example.utils\nfun cube(n: Int): Int = n * n * n\n// Java\nimport org.example.utils.Utils;\nUtilsKt.cube(3);\n</code></pre> <p>Como se indica en la secci\u00f3n de \"Anotaciones\", podemos indicar al compilador el nombre del fichero con la anotaci\u00f3n <code>'@JvmName'</code>:</p> <pre><code>// Kotlin\n@file:JvmName(\"Utils\")\npackage org.example.utils\nfun cube(n: Int): Int = n * n * n\n// Java\nimport org.example.utils.Utils;\nUtils.cube(3);\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#default-parameters","title":"Default parameters","text":"<p>la JVM no tiene soporte para los par\u00e1metros por defecto. Por lo tanto, cuando una funci\u00f3n se define con los valores predeterminados, el compilador debe crear una sola funci\u00f3n sin los par\u00e1metros predeterminados. Sin embargo, podemos indicarle al compilador que cree m\u00faltiples sobrecargas de la funci\u00f3n para cada par\u00e1metro predeterminado con la anotaci\u00f3n <code>'@JvmOverloads'</code>. Luego, los usuarios de Java pueden ver las diversas funciones y elegir cu\u00e1l es la m\u00e1s adecuada. Esta anotaci\u00f3n funciona tanto para constructores, funciones o m\u00e9todos est\u00e1ticos:</p> <pre><code>// Kotlin\nclass Foo @JvmOverloads constructor(x: Int, y: Double = 0.0) {\n@JvmOverloads fun f(a: String, b: Int = 0, c: String = \"abc\") { ... }\n}\n// Java\n// Constructors:\nFoo(int x, double y)\nFoo(int x)\n// Methods\nvoid f(String a, int b, String c) { }\nvoid f(String a, int b) { }\nvoid f(String a) { }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#objects-and-static-methods","title":"Objects and static methods","text":"<p>Los 'named objects' y los 'companion objects' se generan como instancias 'singleton' de una clase. Sin embargo, podemos indicar al compilador que genere la funci\u00f3n como una m\u00e9todo est\u00e1tico en Java con la anotaci\u00f3n <code>'@JvmStatic'</code>:</p> <pre><code>// Kotlin\nobject Console {\nfun clear() : Unit { } // Normal\n@JvmStatic fun exit() : Unit { } // Con anotaci\u00f3n\n}\n// Java\nConsole.INSTANCE.clear() // Normal\nConsole.exit() // Con anotaci\u00f3n\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#checked-exceptions_1","title":"Checked exceptions","text":"<p>En Java, solo podemos detectar las 'checked exceptions'  si est\u00e1n declaradas en el m\u00e9todo, incluso si el cuerpo del m\u00e9todo lanza esa excepci\u00f3n. Por lo tanto, si tenemos una funci\u00f3n que se utilizar\u00e1 desde Java y queremos permitir que las personas detecten una excepci\u00f3n, debemos informar al compilador para que agregue la excepci\u00f3n a la firma del m\u00e9todo. Para ello usamos la anotaci\u00f3n <code>'@Throws'</code>:</p> <pre><code>// Kotlin\n@Throws(IOException::class)\nfun createDirectory(file: File) {\nif (file.exists()) throw IOException(\"Directory already exists\")\nfile.createNewFile()\n}\n// Java\ntry {\nUtilsKt.createDirectory(new File(\"file.txt\"));\n} catch (IOException e) {\n// handle exception here\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.2.-kotlinColeciones/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/","title":"Apuntes de [Kotlin]","text":""},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#clases-y-objetos","title":"Clases y objetos","text":""},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#clases","title":"Clases","text":"<p>Las clases son los bloques de construcci\u00f3n principales de cualquier lenguaje de programaci\u00f3n orientado a objetos. Las clases son esencialmente tipos personalizados: un grupo de variables y m\u00e9todos unidos en una estructura coherente. Para definir una clase se usa la palabra clave <code>'class'</code>.</p> <pre><code>class Invoice { ... }\n</code></pre> <p>La declaraci\u00f3n de clase consiste en el nombre de la clase, el encabezado de la clase (especificando sus par\u00e1metros de tipo, el constructor primario, etc.) y el cuerpo de clase, rodeado de llaves. Tanto el encabezado como el cuerpo son opcionales. Si la clase no tiene cuerpo se pueden omitir las llaves.</p> <p>Si no se especifica visibilidad, la visibilidad por defecto es <code>public</code> y por tanto cualquiera puede crear instancias de dicha clase.</p> <pre><code>class Empty\n</code></pre> <p>En comparaci\u00f3n con Java, puede definir varias clases dentro del mismo archivo fuente.</p> <p>La clases pueden contener:</p> <ul> <li>Constructores y bloques <code>'init'</code></li> <li>Funciones</li> <li>Propiedades</li> <li>Clases anidadas e internas</li> <li>Declaraciones de tipo <code>'object'</code></li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constructores","title":"Constructores","text":"<p>Una clase en Kotlin puede tener un constructor primario y uno o m\u00e1s constructores secundarios.</p> <p>El constructor primario es parte del encabezado de la clase. Este constructor va despu\u00e9s del nombre de la clase (y los par\u00e1metros de tipo que son opcionales). Por defecto, todos los constructores son p\u00fablicos, lo que equivale efectivamente a que sean visible en todas partes donde la clase sea visible.</p> <pre><code>class Person constructor(firstName: String) { ... }\n</code></pre> <p>Si el constructor principal no tiene anotaciones o modificadores de visibilidad, la palabra clave <code>'constructor'</code> se puede omitir:</p> <pre><code>// Podemos omitir la palabra clave 'constructor'\nclass Person(firstName: String) { ... }\n// Las anotaciones o modificadores de visibilidad requieren la palabra clave 'constructor'\nclass Customer public @Inject constructor(name: String) { ... }\n</code></pre> <p>Si una clase no-abstracta no declara ning\u00fan constructor (primario o secundario), tendr\u00e1 un constructor primario sin argumentos generado autom\u00e1ticamente. La visibilidad del constructor ser\u00e1 p\u00fablica por defecto. Si no desea que su clase tenga un constructor p\u00fablico, es necesario declarar un constructor vac\u00edo con una visibilidad que no sea la predeterminada:</p> <pre><code>// Clase con un constructor privado\nclass DontCreateMe private constructor () { ... }\n</code></pre> <p>Para crear una instancia de una clase, se invoca al constructor como si de una funci\u00f3n regular se tratase. En Kotlin no existe la palabra clave 'new':</p> <pre><code>class Person(val name: String) {\nconstructor(name: String, parent: Person) : this(name) {\nparent.children.add(this)\n}\n}\nval person = Person(\"John\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constructor-primario","title":"Constructor primario","text":"<p>El constructor primario no puede contener ning\u00fan c\u00f3digo. El c\u00f3digo de inicializaci\u00f3n se puede colocar en bloques de inicializaci\u00f3n, que se definen con la palabra clave <code>'init'</code>.</p> <p>Durante una inicializaci\u00f3n de la instancia, los bloques de inicializaci\u00f3n se ejecutan en el mismo orden en que aparecen en el cuerpo de la clase, intercalados con los inicializadores de propiedades:</p> <pre><code>class InitOrderDemo(name: String) {\nval firstProperty = \"First property: $name\"\ninit {\nprintln(\"First initializer block that prints ${name}\")\n}\nval secondProperty = \"Second property: ${name.length}\"\ninit {\nprintln(\"Second initializer block that prints ${name.length}\")\n}\n}\n</code></pre> <p>Los bloques <code>'init'</code> pueden usarse para validar las propiedades o par\u00e1metros mediante la palabra clave <code>'require'</code>:</p> <pre><code>class Person (val firstName: String, val lastName: String, val age: Int?) {\ninit{\nrequire(firstName.trim().length &gt; 0) { \"Invalid firstName argument.\" }\nrequire(lastName.trim().length &gt; 0) { \"Invalid lastName argument.\" }\nif (age != null) {\nrequire(age &gt;= 0 &amp;&amp; age &lt; 150) { \"Invalid age argument.\" }\n}\n}\n}\n</code></pre> <p>Tenga en cuenta que los par\u00e1metros del constructor primario se pueden usar en los bloques de inicializaci\u00f3n. Tambi\u00e9n pueden ser utilizados en los inicializadores de las propiedades en el cuerpo de la clase:</p> <pre><code>class Customer(name: String) {\n// Uso del par\u00e1metro 'name' para inicializar la propiedad 'customerKey'\nval customerKey = name.toUpperCase()\n}\n</code></pre> <p>De hecho, para declarar propiedades e inicializarlas desde el constructor principal, Kotlin tiene una sintaxis concisa:</p> <pre><code>class Person(val firstName: String, val lastName: String, var age: Int) { ... }\n</code></pre> <p>De la misma forma que las propiedades definidas en el cuerpo de la clase, las propiedades declaradas en el constructor primario pueden ser mutables (<code>'var'</code>) o de solo lectura (<code>'val'</code>).</p> <p>Cuando se usa el prefijo <code>'val'</code> Kotlin genera autom\u00e1ticamente el m\u00e9todo <code>'getter()'</code> y cuando se usa el prefijo <code>'var'</code> Kotlin genera el <code>'getter()'</code> y <code>'setter()'</code>. Si no necesitamos los accesores se puede definir el constructor sin los prefijos. De esta forma podemos definir nuestros propios m\u00e9todos accesores.</p> <p>En este ejemplo, el constructor principal de la primera clase define las propiedades, mientras que el segundo no lo hace:</p> <pre><code>// class with primary constructor that defines properties\nclass Info (var name: String, var number: Int)\n// class with primary constructor that does not define properties\nclass Info (name: String, number: Int)\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constructor-secundario","title":"Constructor secundario","text":"<p>La clase tambi\u00e9n puede declarar uno o varios constructores secundarios, que se definen con la palabra clave <code>'constructor'</code>:</p> <pre><code>class Person {\n// Constructor secundario\nconstructor(parent: Person) {\nparent.children.add(this)\n}\n}\n</code></pre> <p>Si la clase tiene un constructor primario, cada constructor secundario debe delegar en el constructor primario, ya sea directamente o indirectamente a trav\u00e9s de otro/s constructor/es secundario/s. La delegaci\u00f3n en otro constructor de la misma clase se hace usando la palabra clave <code>'this'</code>:</p> <pre><code>class Person(val name: String) { // Constructor primario\n// Constructor secundario\n// Usamos 'this' para invocar al constructor primario\nconstructor(name: String, parent: Person) : this(name) {\nparent.children.add(this)\n}\n}\n</code></pre> <p>Hay que tenera en cuenta que el c\u00f3digo en los bloques de inicializaci\u00f3n se convierte efectivamente en parte del constructor primario. La delegaci\u00f3n en el constructor primario ocurre como la primera instrucci\u00f3n en el constructor secundario, por lo que el c\u00f3digo en todos los bloques de inicializaci\u00f3n se ejecuta antes que el constructor secundario. Incluso si la clase no tiene un constructor primario, la delegaci\u00f3n todav\u00eda ocurre impl\u00edcitamente y los bloques de inicializaci\u00f3n a\u00fan se ejecutan antes:</p> <pre><code>class Constructors {\ninit {\nprintln(\"Init block\") // Se ejecuta antes que el constructor secundario\n}\nconstructor(i: Int) {\nprintln(\"Constructor\")\n}\n}\n</code></pre> <p>La diferencia importante entre los constructores secundarios y primarios es que los par\u00e1metros de los constructores primarios pueden definir propiedades, mientras que los par\u00e1metros de un constructor secundario siempre son solo par\u00e1metros.</p> <p>Si los par\u00e1metros de un constructor primario tambi\u00e9n son propiedades, ser\u00e1n accesibles a lo largo de todo el ciclo de vida del objeto, al igual que las propiedades normales. Mientras que, si son simples par\u00e1metros, obviamente s\u00f3lo son accesibles dentro del constructor, como cualquier otro par\u00e1metro de una funci\u00f3n.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#propiedades","title":"Propiedades","text":"<p>En Kotlin no se utiliza el concepto de 'campo' cuando hablamos de variables de instancia sino que se emplea el concepto de propiedades.</p> <p>Las propiedades de una clase pueden declararse como mutables (<code>var</code>), o de inmutables o de s\u00f3lo lectura (<code>val</code>):</p> <pre><code>class Address {\nvar name: String = ...\nvar street: String = ...\nvar city: String = ...\nvar state: String? = ...\nvar zip: String = ...\n}\n</code></pre> <p>Para acceder a las propiedades de una clase usamos el operador punto <code>'.'</code> ya que a diferencia de Java no hay que utilizar <code>getters()</code> ni <code>setters()</code> si hemos definido la propiedad con <code>'val'</code> o <code>'var'</code>. Para usar la propiedad, simplemente nos referimos a ella por su nombre, como si fuera un campo en Java:</p> <pre><code>fun copyAddress(address: Address): Address {\nval result = Address() // there's no 'new' keyword in Kotlin\nresult.name = address.name // accessors are called\nresult.street = address.street\n// ...\nreturn result\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#getters-and-setters","title":"'Getters()' and 'Setters()'","text":"<p>La sintaxis completa de definici\u00f3n de una propiedad en Kotlin:</p> <pre><code>{var|val} &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]\n[&lt;getter&gt;]\n[&lt;setter&gt;]\n</code></pre> <p>El inicializador y las funciones <code>'getter()'</code> (y <code>'setter()'</code> si es una propiedad mutable) son opcionales. El tipo de la propiedad es opcional si puede inferirse desde el inicializador o desde el tipo de retorno del <code>'getter()'</code>.</p> <pre><code>var allByDefault: Int? // error: se requiere un inicializador expl\u00edcito.\nvar initialized = 1 // propiedad de tipo Int, getter y setter por defecto\nval simple: Int? // propiedad de tipo Int, getter por defecto, debe ser inicializada por el constructor\nval inferredType = 1 // propiedad de tipo Int y getter por defecto\n</code></pre> <p>Si las funciones <code>'getter()'</code> (y <code>'setter()'</code> en propiedades mutables) por defecto no son suficientes se puede codificar funciones <code>'getter()'</code> o <code>'setter()'</code> propias como cualquier otra funci\u00f3n. Estas funciones est\u00e1n dentro de la propiedad y por tanto tienen que ser identadas correctamente</p> <pre><code>val isEmpty: Boolean\nget() = this.size == 0\nvar stringRepresentation: String\nget() = this.toString()\nset(value) {\nsetDataFromString(value) // parses the string and assigns values to other properties\n}\n</code></pre> <p>N\u00f3tese que por convenci\u00f3n, el nombre del par\u00e1metro de la funci\u00f3n <code>'setter()'</code> es <code>'value'</code> pero no es obligatorio y puede escogerse otro nombre.</p> <p>Las propiedades pueden ser 'private', 'protected', o 'public' (visibilidad por defecto).</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#backing-fields","title":"Backing Fields","text":"<p>El campo de respaldo o 'backing field' es un campo generado autom\u00e1ticamente para cualquier propiedad que solo puede usarse dentro de los accesores (getter o setter).</p> <p>Estar\u00e1 presente solo si utiliza la implementaci\u00f3n predeterminada de al menos uno de los accesores, o si un descriptor de acceso personalizado lo hace referencia a trav\u00e9s del identificador <code>'field'</code>. Este campo de respaldo se usa para evitar la llamada recursiva y por tanto evitar un 'StackOverflowError'.</p> <p>Kotlin proporciona autom\u00e1ticamente este campo de respaldo. Se puede hacer referencia a este campo en los accesores utilizando el identificador <code>'field'</code>:</p> <pre><code>var counter = 0 // Note: the initializer assigns the backing field directly\nset(value) {\nif (value &gt;= 0) field = value\n}\n</code></pre> <p>Este campo es necesario ya que el siguiente c\u00f3digo genera un 'StackOverflowError'. Cuando Kotlin encuentra la propiedad 'selectedColor' llama al <code>'getter()'</code> correspondiente. Si usamos 'selectedColor' dentro de la definici\u00f3n del propio <code>'getter()'</code> es cuando se producen llamadas recursivas que acaban generando un desbordamiento de la pila. Kotlin provee del 'backing field' para evitarlo.</p> <pre><code>var selectedColor: Int = someDefaultValue\nget() = selectedColor\nset(value) {\nthis.selectedColor = value\ndoSomething()\n}\n// C\u00f3digo correcto\nvar selectedColor: Int = someDefaultValue\nget() = field\nset(value) {\nfield = value\ndoSomething()\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#constantes-en-tiempo-de-compilacion","title":"Constantes en tiempo de compilaci\u00f3n","text":"<p>Las propiedades cuyo valor se conoce en el momento de la compilaci\u00f3n se pueden marcar como constantes de tiempo de compilaci\u00f3n utilizando el modificador <code>'const'</code>. Tales propiedades necesitan cumplir los siguientes requisitos:</p> <ul> <li>Top-level o miembros de un <code>'objet'</code></li> <li>Inicializado con un valor de tipo String o un tipo primitivo</li> <li>No tener un <code>'getter()'</code> propio</li> </ul> <p>Estas propiedades pueden ser utilizadas en anotaciones:</p> <pre><code>const val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#late-initialized-properties-and-variables","title":"Late-Initialized Properties and Variables","text":"<p>Normalmente, las propiedades declaradas con un tipo no nulo deben inicializarse en el constructor. Sin embargo, bastante a menudo esto no es conveniente. Por ejemplo, las propiedades se pueden inicializar mediante la inyecci\u00f3n de dependencias, o en el m\u00e9todo de configuraci\u00f3n de una prueba de unidad. En este caso, no puede proporcionar un inicializador que no sea nulo en el constructor, pero a\u00fan as\u00ed desea evitar las comprobaciones nulas al hacer referencia a la propiedad dentro del cuerpo de una clase.</p> <p>Para manejar este caso, puede marcar la propiedad con el modificador <code>'lateinit'</code>:</p> <pre><code>public class MyTest {\nlateinit var subject: TestSubject\n@SetUp fun setup() {\nsubject = TestSubject()\n}\n@Test fun test() {\nsubject.method() // dereference directly\n}\n}\n</code></pre> <p>Para usar este modificador hay que cumplir ciertos requisitos:</p> <ul> <li>Se puede usar \u00fanicamente en las propiedades <code>'var'</code> declaradas dentro del cuerpo de una clase. Por tanto no se puede usar en propiedades declaradas en el constructor principal.</li> <li>La propiedad no tiene un <code>'getter()'</code> o <code>'setter()'</code> personalizado.</li> </ul> <p>Acceder a una propiedad antes de que haya sido inicializada lanzar\u00e1 una 'UninitializedPropertyAccessException'.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#member-functions","title":"Member Functions","text":"<p>Una funci\u00f3n miembro es una funci\u00f3n que se define dentro de una clase, objeto o interfaz. Las funciones miembro se invocan con el operador <code>'.'</code>:</p> <pre><code>class Sample() {\nfun foo() {\nprint(\"Foo\")\n}\n}\nSample().foo() // crea una instancia de 'Sample' e invoca el m\u00e9todo 'foo'\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#herencia","title":"Herencia","text":"<p>La herencia es fundamental para la programaci\u00f3n orientada a objetos. Nos permite crear nuevas clases que reutilizan, ampl\u00edan y/o modifican el comportamiento de los preexistentes. La clase preexistente se llama superclase (o clase base), y la clase nueva que estamos creando se llama clase derivada. Una clase derivada obtendr\u00e1 impl\u00edcitamente todos los campos, propiedades y m\u00e9todos de la superclase (y de la superclase de la superclase si es el caso).</p> <p>Hay una restricci\u00f3n en cuanto a cu\u00e1ntas clases podemos heredar; en una JVM, solo puede tener una clase base. Pero se puede heredar de m\u00faltiples interfaces.</p> <p>La herencia es transitiva. Si la clase C se deriva de la clase B y esa clase B se deriva de una clase A dada, entonces la clase C es una clase derivada de A.</p> <p>Todas las clases en Kotlin tienen una superclase com\u00fan <code>'Any'</code>, que es la superclase predeterminada para una clase sin supertipos declarados. Esta clase <code>'Any'</code> tiene unos pocos m\u00e9todos b\u00e1sicos como <code>equals()</code> o <code>toString()</code>:</p> <pre><code>// Hereda de 'Any' implicitamente\nclass Example\n</code></pre> <p>Para declarar que una clase hereda de una clase base, colocamos el tipo de la clase base despu\u00e9s de dos puntos en el encabezado de la clase derivada. Por defecto en Kotlin las clases est\u00e1n cerradas a la herencia, es decir, son <code>'final'</code>. Para permitir que una clase sea heredada, hay que utilizar la palabra clave <code>'open'</code>.</p> <pre><code>open class Base(p: Int)\n// the derived class has a primary constructor\nclass DerivedWithConstructor(p: Int) : Base(p)\n</code></pre> <p>Si la clase derivada tiene un constructor primario, la clase base puede (y debe) inicializarse all\u00ed mismo, utilizando los par\u00e1metros del constructor primario.</p> <p>Si la clase no tiene un constructor primario, entonces cada constructor secundario tiene que inicializar el tipo base usando la palabra clave <code>'super'</code>, o delegar a otro constructor que haga eso. Tenga en cuenta que en este caso, diferentes constructores secundarios pueden llamar a diferentes constructores de la clase base:</p> <pre><code>open class Base(p: Int) {\nconstructor(p: Int, q: Int): this(p)\n}\nclass DerivedWithoutConstructor : Base {\n// calling the base constructor with super()\nconstructor(p: Int) : super(p)\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#sobreescritura-de-metodos","title":"Sobreescritura de m\u00e9todos","text":"<p>Kotlin requiere anotaciones expl\u00edcitas para la sobreescritura de funciones miembro.</p> <p>Para que una funci\u00f3n pueda ser sobreescrita se utiliza la palabra clave <code>'open'</code> delante del nombre de la funci\u00f3n. Dado que las clases son finales en Kotlin, s\u00f3lo podemos utilizar la palabra clave <code>'open'</code> en funciones miembro de clases que tambi\u00e9n hayan sido definidas como <code>'open'</code>.</p> <p>Para indicar que una funci\u00f3n en la clase derivada sobreescribe una funci\u00f3n de la clase padre se utiliza la palabra clave <code>'override'</code> delante del nombre de la funci\u00f3n. De esta forma le indicamos al compilador que esta funci\u00f3n sobreescribe una funci\u00f3n de la clase padre y puede realizar las comprobaciones en tiempo de compilaci\u00f3n.</p> <p>Una funci\u00f3n con la palabra clave <code>'override'</code> tambi\u00e9n es <code>'open'</code> por definici\u00f3n y puede ser sobreescrita por las subclases sucesivas. Es posible marcar una funci\u00f3n <code>'override'</code> con la palabra clave <code>'final'</code> para evitar que sea sobreescrita.</p> <pre><code>open class Base {\nopen fun v() { ... }\nopen fun x(p: Int) { ... }\nfun nv() { ... }\n}\nclass Derived: Base() {\noverride fun v() { ... }\nfinal override fun x(p: Int) { ... } // Restringir la sobreescritura\n}\n</code></pre> <p>En Kotlin, la herencia est\u00e1 regulada por la siguiente regla: si una clase hereda varias implementaciones del mismo miembro de sus superclases inmediatas, debe invalidar este miembro y proporcionar su propia implementaci\u00f3n. Para denotar el supertipo del cual se toma la implementaci\u00f3n heredada, usamos la palaba clave <code>'super'</code> calificado por el nombre de supertipo entre par\u00e9ntesis angulares, por ejemplo, <code>super&lt;Base&gt;</code>:</p> <pre><code>open class A {\nopen fun f() { print(\"A\") }\nfun a() { print(\"a\") }\n}\ninterface B {\nfun f() { print(\"B\") } // interface members are 'open' by default\nfun b() { print(\"b\") }\n}\nclass C() : A(), B {\n// El compilador requiere que 'f()' sea sobreescrito para eliminar la ambig\u00fcedad\noverride fun f() {\nsuper&lt;A&gt;.f() // call to A.f()\nsuper&lt;B&gt;.f() // call to B.f()\n}\n}\n</code></pre> <p>En la sobreescritura de m\u00e9todos con valores por defecto siempre se utilizan los mismos valores de par\u00e1metros por defecto que el m\u00e9todo base. Cuando se sobreescribe un m\u00e9todo, los valores por defecto deben omitirse de la firma:</p> <pre><code>open class A {\nopen fun foo(i: Int = 10) { ... }\n}\nclass B : A() {\noverride fun foo(i: Int) { ... }  // no default value allowed\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#sobreescritura-de-propiedades","title":"Sobreescritura de propiedades","text":"<p>La sobreescritura de propiedades funciona de manera similar a la sobreescritura de m\u00e9todos.</p> <p>Las propiedades declaradas en una superclase que luego se vuelven a declarar en una clase derivada deben ir precedidas por la palabra clave <code>'override'</code> y deben tener un tipo compatible. Tambi\u00e9n se puede usar la palabra clave <code>'override'</code> como parte de la declaraci\u00f3n de una propiedad en un constructor primario.</p> <p>Cada propiedad declarada puede ser sobreescrita por una propiedad con un inicializador o por una propiedad con un m\u00e9todo <code>'getter()'</code></p> <pre><code>open class Foo {\nopen val x: Int get() { ... }\n}\nclass Bar : Foo() {\noverride val x: Int = ...\n}\ninterface Foo1 {\nval count: Int\n}\nclass Bar1(override val count: Int) : Foo1\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#orden-de-inicializacion","title":"Orden de inicializaci\u00f3n","text":"<p>Durante la construcci\u00f3n de una nueva instancia de una clase derivada, la inicializaci\u00f3n de la clase base se realiza como primer paso (precedida solo por la evaluaci\u00f3n de los argumentos para el constructor de la clase base) y, por lo tanto, ocurre antes de que se ejecute la l\u00f3gica de inicializaci\u00f3n de la clase derivada.</p> <p>Por lo tanto, durante la inicializaci\u00f3n de las propiedades de la clase base las propiedades de la clase derivada a\u00fan no se han inicializado. Si alguna de esas propiedades se utilizan (de forma directa o indirecta) en la inicializaci\u00f3n de la clase base se pueden producir comportamientos extra\u00f1os o errores en tiempo de ejecuci\u00f3n.</p> <pre><code>open class Base(val name: String) {\ninit {\nprintln(\"Initializing Base\")\n}\nopen val size: Int =\nname.length.also { println(\"Initializing size in Base: $it\") }\n}\nclass Derived(name: String, val lastName: String) : Base(name.capitalize().also { println(\"Argument for Base: $it\") }) {\ninit {\nprintln(\"Initializing Derived\")\n}\noverride val size: Int =\n(super.size + lastName.length).also { println(\"Initializing size in Derived: $it\") }\n}\n// Argument for Base: Hello\n// Initializing Base\n// Initializing size in Base: 5\n// Initializing Derived\n// Initializing size in Derived: 10\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#invocar-la-implementacion-de-la-superclase","title":"Invocar la implementaci\u00f3n de la superclase","text":"<p>El c\u00f3digo en una clase derivada puede llamar a funciones en la superclase e implementaciones de accesores de propiedades usando la palabra clave <code>'super'</code>:</p> <pre><code>open class Foo {\nopen fun f() { println(\"Foo.f()\") }\nopen val x: Int get() = 1\n}\nclass Bar : Foo() {\noverride fun f() {\nsuper.f()  // Calling the super function  \nprintln(\"Bar.f()\")\n}\noverride val x: Int get() = super.x + 1\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#clases-abstractas","title":"Clases abstractas","text":"<p>Kotlin admite clases abstractas al igual que Java. Una clase abstracta es una clase con m\u00e9todos marcados como abstractos y que por tanto no puede ser instanciada. Si una clase tiene uno o varios m\u00e9todos abstractos es una clase abstracta y se indica con la palabra clave <code>'abstract'</code>.</p> <p>La subclase concreta de una clase abstracta deber\u00e1 implementar todos los m\u00e9todos y propiedades definidos en la clase abstracta; de lo contrario, tambi\u00e9n ser\u00e1 considerada como una clase abstracta.</p> <pre><code>open class Person {\nopen fun fullName(): String { ... }\n}\nabstract class Employee (val firstName: String, val lastName: String): Person() {\n// Variable de intancia en una clase abstracta\nval propFoo: String = \"bla bla\"\nabstract fun earnings(): Double\n// Podemos tener m\u00e9todos con implementaci\u00f3n por defecto\noverride fun fullName(): String {\nreturn lastName + \" \" + firstName;\n}\n}\n</code></pre> <p>Las clases abstractas pueden contener m\u00e9todos con implementaci\u00f3n por defecto como cualquier otra clase. Las subclases de la clase abstracta pueden sobreescribir la implementaci\u00f3n predeterminada de un m\u00e9todo pero solo si el m\u00e9todo tiene el modificador <code>'open'</code>. Los m\u00e9todos marcados como <code>'abstract'</code> tambi\u00e9n son <code>'open'</code> por defecto. Las clases abstractas tambi\u00e9n pueden definir variables de instancia al contrario que pasa con las interfaces.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#interfaces","title":"Interfaces","text":"<p>Las interfaces en Kotlin son muy similares a Java 8. Pueden contener declaraciones de m\u00e9todos abstractos, as\u00ed como implementaciones de m\u00e9todos. Lo que los diferencia de las clases abstractas es que las interfaces no pueden almacenar el estado, es decir, no pueden tener variables de instancia. Pueden tener propiedades, pero estas deben ser abstractas o proporcionar implementaciones de accesores.</p> <p>Una interfaz se define usando la palabra clave <code>'interface'</code>. Un m\u00e9todo en una interfaz es abstracto por defecto si no se proporciona una implementaci\u00f3n.</p> <pre><code>interface MyInterface {\nfun bar()  // abstract by default\nfun foo() {\n// optional body\n}\n}\n</code></pre> <p>Una clase u objeto pueden implementar una o varias interfaces:</p> <pre><code>class Child : MyInterface {\noverride fun bar() {\n// body\n}\n}\n</code></pre> <p>En una interfaz se pueden declarar propiedades. Una propiedad declarada en una interfaz puede ser abstracta o puede proporcionar implementaciones para el <code>'getter()'</code> o <code>'setter()'</code>. Las propiedades declaradas en interfaces no pueden tener 'backing fields' y, por lo tanto, los accesores declarados en interfaces no pueden hacer referencia a ellos.</p> <pre><code>interface MyInterface {\nval prop: Int // abstract\nval propertyWithImplementation: String\nget() = \"foo\"\nfun foo() {\nprint(prop)\n}\n}\nclass Child : MyInterface {\noverride val prop: Int = 29\n}\n</code></pre> <p>Una interfaz puede derivar de otras interfaces y, por lo tanto, proporcionar implementaciones para sus miembros y declarar nuevas funciones y propiedades. Naturalmente, las clases que implementen dicha interfaz solo tienen que definir las implementaciones que faltan:</p> <pre><code>interface Named {\nval name: String\n}\ninterface Person : Named {\nval firstName: String\nval lastName: String\noverride val name: String get() = \"$firstName $lastName\"\n}\ndata class Employee(\n// implementing 'name' is not required\noverride val firstName: String,\noverride val lastName: String,\nval position: Position\n) : Person\n</code></pre> <p>En el caso de clases que hereden de varias interfaces, para evitar ambig\u00fcedades la subclase deber\u00e1 proporcionar implementaciones tanto para m\u00e9todos que tienen una implementaci\u00f3n en una de las interfaces como en m\u00e9todos que tiene implementaciones en varias interfaces.</p> <pre><code>interface A {\nfun foo() { print(\"A\") }\nfun bar()  // abstract\n}\ninterface B {\nfun foo() { print(\"B\") }\nfun bar() { print(\"bar\") }\n}\nclass C : A {\noverride fun bar() { print(\"bar\") }\n}\n// la clase 'D' tieen que implementar tanto foo() como bar()\nclass D : A, B {\noverride fun foo() {\nsuper&lt;A&gt;.foo()\nsuper&lt;B&gt;.foo()\n}\noverride fun bar() {\nsuper&lt;B&gt;.bar()\n}\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#visibilidad","title":"Visibilidad","text":"<p>Las clases, objetos, interfaces, constructores, funciones, propiedades y sus 'setters' pueden tener modificadores de visibilidad. (Los 'setters' siempre tienen la misma visibilidad que la propiedad).</p> <ul> <li>Public - Este es el valor predeterminado, y se puede acceder a cualquier clase, funci\u00f3n, propiedad, interfaz u objeto que tenga este modificador desde cualquier lugar.</li> <li>Private - Se puede acceder a una funci\u00f3n, interfaz o clase de nivel superior que se declara como privada solo dentro del mismo archivo.</li> </ul> <p>Cualquier funci\u00f3n o propiedad que se declare privada dentro de una clase, objeto o interfaz solo puede ser visible para otros miembros de esa misma clase, objeto o interfaz.</p> <p>Un constructor privado debe usar la palabra clave <code>'constructor'</code>. Si un constructor es marcado como privado no se puede instanciar un objeto con ese constructor.</p> <pre><code>class Car private constructor(val name: String, val plateNo: String) {\n// ....\n}\n</code></pre> <ul> <li>Protected - Solo se puede aplicar a propiedades o funciones dentro de una clase, objeto o interfaz, no se puede aplicar a funciones, clases o interfaces de nivel superior. Las propiedades o funciones con este modificador solo son accesibles dentro de la clase que lo define y cualquier subclase.</li> <li>Internal - En un proyecto que tiene un m\u00f3dulo (m\u00f3dulo Gradle o Maven), una clase, objeto, interfaz o funci\u00f3n especificada con este modificador dentro de ese m\u00f3dulo solo es accesible desde ese m\u00f3dulo.</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#data-classes","title":"Data classes","text":"<p>Las Data classes son una forma concisa de crear clases que solo contienen datos. Estas clases se definen con la palabra clave <code>'data'</code>.</p> <pre><code>data class User(val name: String, val age: Int)\n</code></pre> <p>De forma autom\u00e1tica el compilador crear los m\u00e9todos <code>hashCode()</code>, <code>equals()</code>, <code>copy()</code> y <code>toString()</code> a partir de todas las propiedades declaradas en el constructor primario. Tambi\u00e9n se generan las funciones <code>componentN()</code> que corresponden a las propiedades declaradas en orden en el constructor primario.</p> <p>Para evitar comportamientos extra\u00f1os estas clases deben cumplir ciertos requisitos:</p> <ul> <li>El constructor primario necesita tener al menos un par\u00e1metro.</li> <li>Todos los par\u00e1metros del constructor primario estar\u00e1n marcados como <code>'val'</code> o <code>'var'</code>.</li> <li>Una 'data class' no puede ser <code>'abstract'</code>, <code>'open'</code>, <code>'sealed'</code> o <code>'inner'</code>.</li> <li>(Antes de 1.1) Las 'data classes' no pueden extender de otras clases (pero pueden implementar interfaces).</li> </ul> <p>El compilador s\u00f3lo tiene en cuenta las propiedades declaradas en el constructor primario a la hora de generar los m\u00e9todos de forma autom\u00e1tica. Por tanto, para excluir propiedades se deben declarar en el cuerpo de la clase.</p> <pre><code>data class DataClassExample(val x: Int, val y: Int, val z: Int) {\n// Propiedad excluida\nvar xx; Int = 0\n}\nval fooData = DataClassExample(1, 2, 4)\nval fooCopy = fooData.copy(y = 100)\n// El formato de 'toString()' es el mismo 'ClassName(prop=xx, prop=yy, ....)'\nprintln(fooData) // =&gt; DataClassExample(x=1, y=2, z=4)\nprintln(fooCopy) // =&gt; DataClassExample(x=1, y=100, z=4)\n</code></pre> <p>El compilador genera la funci\u00f3n <code>copy()</code> que permite copiar un objeto y en caso necesario, crear la copia alterando algunas de sus propiedades y manteniendo el resto.</p> <pre><code>data class User(val name: String, val age: Int)\n// Funci\u00f3n 'copy()' generada autom\u00e1ticamente\n// fun copy(name: String = this.name, age: Int = this.age) = User(name, age)\nval jack = User(name = \"Jack\", age = 1)\n// Copiamos el objeto pero modificando la propiedad 'age'\nval olderJack = jack.copy(age = 2)\n</code></pre> <p>Las funciones <code>componentN()</code> permite desestructurar las propiedades:</p> <pre><code>val jane = User(\"Jane\", 35)\nval (name, age) = jane\nprintln(\"$name, $age years of age\") // =&gt; Jane, 35 years of age\n</code></pre> <p>Cada tipo se deriva de <code>'Any'</code>, que viene con una declaraci\u00f3n de m\u00e9todo <code>'hashCode()'</code>. Esto es el equivalente de un m\u00e9todo <code>'hashCode()'</code> de clase 'Object' de Java. Este m\u00e9todo es importante cuando se insertan instancias del objeto en colecciones, como un mapa. Al implementar este m\u00e9todo, se debe cumplir con una serie de requisitos:</p> <ol> <li>Cuando se invoque en el mismo objeto m\u00e1s de una vez durante el tiempo de ejecuci\u00f3n, el m\u00e9todo <code>'hashCode()'</code> debe devolver constantemente el mismo valor, dado que el objeto no se modific\u00f3.</li> <li>Si para dos objetos el m\u00e9todo <code>'equals()'</code>  devuelve true, entonces llamar al m\u00e9todo <code>'hashCode()'</code> en cada uno de ellos deber\u00eda devolver el mismo valor entero.</li> <li>Si dos objetos no son iguales, es decir, que el m\u00e9todo <code>'equals()'</code> devuelve false cuando se comparan, no es un requisito que cada m\u00e9todo <code>'hashCode()'</code> del objeto devuelva valores distintos. Sin embargo, producir un entero distinto para objetos desiguales podr\u00eda mejorar el rendimiento de las colecciones basadas en 'hash'.</li> </ol> <p>Las 'data classes' son un forma compacta y legible de devolver dos o m\u00e1s valores de una funci\u00f3n. Otra alternativa, menos legible, es utilizar el tipo <code>'Pair'</code> o <code>'Triple'</code> proporcionado por Kotlin:</p> <pre><code>data class Result(val result: Int, val status: Boolean)\nfun checkStatus() = Result(10, true)  // funci\u00f3n que retorna un tipo 'Result'\nval (result, status) = checkStatus() // usamos la desestructuraci\u00f3n de datos para acceder a los datos\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#sealed-classes","title":"Sealed classes","text":"<p>En Kotlin una 'sealed class' es una clase abstracta (no se puede crear instancias) que otras clases pueden extender. Estas subclases se definen dentro del cuerpo de la 'sealed class', en el mismo archivo por lo que podemos conocer todas las subclases posibles simplemente viendo el archivo.</p> <p>Las 'sealed class' se utilizan para representar jerarqu\u00edas de clases restringidas, de forma que una clase solo pueda heredar de un conjunto limidado de tipos. Son, en cierto sentido, una extensi\u00f3n de las clases de enumeraci\u00f3n.</p> <ul> <li>Podemos agregar el modificador <code>'abstract'</code>, pero esto es redundante porque estas clases son abstractas por defecto.</li> <li>No pueden tener el modificador <code>'open'</code> ni <code>'final'</code>.</li> <li>Podemos declarar clases de datos y objetos como subclases a una 'sealed class' (a\u00fan deben declararse en el mismo archivo).</li> <li>No pueden tener constructores p\u00fablicos ya que sus constructores son privados de forma predeterminada.</li> </ul> <pre><code>// shape.kt\nsealed class Shape\nclass Circle : Shape()\nclass Triangle : Shape()\nclass Rectangle: Shape()\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#generics","title":"Generics","text":"<p>'Covariance' y 'contravariance' son t\u00e9rminos que hacen referencia a la capacidad de usar un tipo m\u00e1s derivado (m\u00e1s espec\u00edfico) o menos derivado (menos espec\u00edfico) que el indicado originalmente. Los par\u00e1metros de tipo gen\u00e9rico admiten estos t\u00e9rminos para proporcionar mayor flexibilidad a la hora de asignar y usar tipos gen\u00e9ricos. Cuando se hace referencia a un sistema de tipos, se definen como:</p> <ul> <li>'Covariance' -&gt; Permite usar un tipo m\u00e1s derivado que el especificado originalmente. Puede asignar una instancia de <code>Class&lt;Derived&gt;</code> a una variable de tipo <code>Class&lt;Base&gt;</code>.</li> <li>'Contravariance' -&gt; Permite usar un tipo m\u00e1s gen\u00e9rico (menos derivado) que el especificado originalmente. Puede asignar una instancia de <code>Class&lt;Base&gt;</code> a una variable de tipo <code>Class&lt;Derived&gt;</code>.</li> <li>'Invariance' -&gt; Significa que solo se puede usar el tipo especificado originalmente. As\u00ed, un par\u00e1metro de tipo gen\u00e9rico invariable no es covariante ni contravariante. No se puede asignar una instancia de <code>List&lt;Base&gt;</code> a una variable de tipo <code>List&lt;Derived&gt;</code> o viceversa.</li> </ul> <p>Al igual que en Java, en Kotlin las clases pueden tener tipos con par\u00e1metros.</p> <pre><code>class Box&lt;T&gt;(t: T) {\nvar value = t\n}\n</code></pre> <p>En general, para crear una instancia de una clase gen\u00e9rica tenemos que proveer el tipo a la clase:</p> <pre><code>val box: Box&lt;Int&gt; = Box&lt;Int&gt;(1)\n</code></pre> <p>Si los par\u00e1metros se pueden inferir, como por ejemplo de los argumentos del constructor o por alg\u00fan otro medio, se pueden omitir los argumentos de tipo:</p> <pre><code>val box = Box(1) // '1' tiene tipo Int as\u00ed que el compilador infiere el tipo \"Box&lt;Int&gt;\"\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#la-palabra-clave-out","title":"La palabra clave 'out'","text":"<p>Digamos que queremos crear una clase de productor que producir\u00e1 un resultado de alg\u00fan tipo 'T'. A veces; queremos asignar ese valor producido a una referencia que es de un supertipo del tipo 'T'.</p> <p>Para lograr eso usando Kotlin, necesitamos usar la palabra clave <code>'out'</code> en el tipo gen\u00e9rico. Esto significa que podemos asignar esta referencia a cualquiera de sus supertipos. El valor de salida solo puede ser producido por la clase dada pero no consumido:</p> <pre><code>class ParameterizedProducer&lt;out T&gt;(private val value: T) {\nfun get(): T {\nreturn value\n}\n}\nval a = ParameterizedProducer(\"string\") // ParameterizedProducer&lt;String&gt;\nval x: ParameterizedProducer&lt;Any&gt; = a // Correcto\nval b = ParameterizedProducer(10) // ParameterizedProducer&lt;Int&gt;\nval y: ParameterizedProducer&lt;Number&gt; = b // Correcto\nval z: ParameterizedProducer&lt;String&gt; = b // \u00a1Error de compilaci\u00f3n!\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#la-palabra-clave-in","title":"La palabra clave 'in'","text":"<p>A veces, tenemos una situaci\u00f3n opuesta, lo que significa que tenemos una referencia de tipo T y queremos poder asignarla al subtipo de T.</p> <p>Podemos usar la palabra clave <code>'in'</code> en el tipo gen\u00e9rico si queremos asignarlo a la referencia de su subtipo. La palabra clave <code>'in'</code> solo se puede utilizar en el tipo de par\u00e1metro que se consume, no se produce:</p> <pre><code>class ParameterizedConsumer&lt;in T&gt; {\nfun toString(value: T): String {  // 'toString()' will only be consuming a value of type T.\nreturn value.toString()\n}\n}\nval a = ParameterizedConsumer&lt;Number&gt;()\nval b: ParameterizedConsumer&lt;Double&gt; = a // Correcto\nval c: ParameterizedConsumer&lt;Int&gt; = a // Correcto\nval d: ParameterizedConsumer&lt;String&gt; = a // \u00a1Error de compilaci\u00f3n!\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#star-projections","title":"Star projections","text":"<p>Hay situaciones en las que no es importante el tipo espec\u00edfico de un valor. Para ello usamos el operador <code>'*'</code> o 'star projection':</p> <pre><code>fun printArray(array: Array&lt;*&gt;) {\narray.forEach { println(it) }\n}\n// Podemos pasar una matriz de cualquier tipo al m\u00e9todo 'printArray()'\nprintArray(arrayOf(1,2,3))\nprintArray(arrayOf(\"hello\", \"World!!\", 5))\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#generic-functions","title":"Generic functions","text":"<p>Las funciones tambi\u00e9n pueden ser gen\u00e9ricas en los tipos que utilizan. Esto permite escribir una funci\u00f3n que puede funcionar con cualquier tipo, en lugar de solo un tipo espec\u00edfico. Para ello, definimos los par\u00e1metros de tipo en la firma de funci\u00f3n.</p> <pre><code>fun &lt;T&gt; choose(t1: T, t2: T, t3: T): T {\nreturn when (Random().nextInt(3)) {\n0 -&gt; t1\n1 -&gt; t2\nelse -&gt; t3\n}\n}\n// Podemos usar esta funci\u00f3n con enteros. Si el compilador puede inferir el tipo se puede omitir.\nval r = choose&lt;Int&gt;(5, 7, 9)\nval r = choose(5, 7, 9)\n// Tambi\u00e9n es v\u00e1lido usar la funci\u00f3n con Strings\nval s = choose&lt;String&gt;(\"BMW\", \"Audi\", \"Ford\")\nval s = choose(\"BMW\", \"Audi\", \"Ford\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#generic-constraints","title":"Generic constraints","text":"<p>El conjunto de todos los tipos posibles que pueden sustituirse por un par\u00e1metro de tipo dado puede estar restringido por restricciones gen\u00e9ricas.</p> <p>El tipo m\u00e1s com\u00fan de restricci\u00f3n es un l\u00edmite superior que corresponde a la palabra clave de extensi\u00f3n de Java:</p> <pre><code>fun &lt;T : Comparable&lt;T&gt;&gt; sort(list: List&lt;T&gt;) {  ... }\nsort(listOf(1, 2, 3)) // OK. Int is a subtype of Comparable&lt;Int&gt;\nsort(listOf(HashMap&lt;Int, String&gt;())) // Error: HashMap&lt;Int, String&gt; is not a subtype of Comparable&lt;HashMap&lt;Int, String&gt;&gt;\n</code></pre> <p>El l\u00edmite superior predeterminado (si no se especifica) es <code>'Any?'</code>.</p>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#nested-classes","title":"Nested classes","text":"<p>Al igual que las funciones, Kotlin permite las clases internas, es decir, clases definidas dentro de otra clase. Son equivalentes a las clases internas est\u00e1ticas en Java.</p> <pre><code>class OuterClass {\nclass NestedClass {\nfun nestedClassFunc() { }\n}\n}\nval nestedClass = OuterClass.NestedClass().nestedClassFunc()\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#inner-class","title":"Inner class","text":"<p>Las clases internas, por otro lado, pueden hacer referencia a la clase externa en la que se declar\u00f3. Para crear una clase interna, colocamos la palabra clave <code>'inner'</code> antes de la palabra clave <code>'class'</code>.</p> <pre><code>class OuterClass() {\nval oCPropt: String = \"Yo\"\ninner class InnerClass {\nfun innerClassFunc() {\nval outerClass = this@OuterClass\nprint(outerClass.oCPropt)\n}\n}\n}\nval demo = OuterClass().InnerClass().innerClassFunc() // =&gt; yo\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#enumeraciones","title":"Enumeraciones","text":"<p>Las clases de enumeraci\u00f3n son similares a los tipos 'enum' de Java. El uso m\u00e1s b\u00e1sico de las clases de enumeraci\u00f3n es la implementaci\u00f3n de enumeraciones de tipos seguros. Cada constante de la enumeraci\u00f3n es un objeto. Las constantes de la enumeraci\u00f3n est\u00e1n separadas por comas.</p> <pre><code>enum class Country {\nSpain, France, Portugal\n}\n</code></pre> <p>Las enumeraciones pueden tener constructor:</p> <pre><code>enum class Direction(val angle: Int) {\nNorth(90), West(180), South(270), East(0)\n}\n</code></pre> <p>En Kotlin las constantes de la enumeraci\u00f3n pueden declarar sus propias clases an\u00f3nimas con sus m\u00e9todos correspondientes, as\u00ed como sobreescribir m\u00e9todos primarios.</p> <p>Si la enumeraci\u00f3n define alg\u00fan miembro, debe separar las definiciones de constantes de enumeraci\u00f3n de las definiciones de miembros con un punto y coma, al igual que en Java.</p> <pre><code>enum class ProtocolState {\nWAITING {\noverride fun signal() = TALKING\n},\nTALKING {\noverride fun signal() = WAITING\n};\nabstract fun signal(): ProtocolState\n}\n</code></pre> <p>En Kotlin las enumeraciones disponen de forma predeterminada de los m\u00e9todos:</p> <ul> <li><code>EnumClass.valueOf(value: String): EnumClass</code> -&gt; Devuelve la constante de enumeraci\u00f3n por su nombre. Lanza un 'IllegalArgumentException' si no existe la constante.</li> <li><code>EnumClass.values(): Array&lt;EnumClass&gt;</code> -&gt; Retorna un array con las constantes de enumeraci\u00f3n.</li> </ul> <p>Adem\u00e1s de los m\u00e9todos las instancias de enumeraci\u00f3n vienen con dos propiedades predefinidas. Uno es <code>'name'</code> de tipo 'String' y el segundo es <code>'ordinal'</code> de tipo 'Int' para obtener la posici\u00f3n de la constante dentro de la enumeraci\u00f3n, teniendo en cuenta que empiezan por 0:</p> <pre><code>enum class Country {\nSpain, France, Portugal\n}\nprintln(Country.Spain) // =&gt; Spain\nprintln(Country.valueOf(\"Spain\")) // =&gt; Spain\nprintln(Country.Portugal.name) // =&gt; Portugal\nprintln(Country.France.ordinal) // =&gt; 1\nfun countries() {\nfor (country in Country.values()) {\nprintln(\"Country: $country\")\n}\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#objects","title":"Objects","text":"<p>Los objetos son muy similares a las clases. A veces necesitamos crear un objeto con una ligera modificaci\u00f3n de alguna clase, sin declarar expl\u00edcitamente una nueva subclase para ello. Java maneja este caso con clases internas an\u00f3nimas. Kotlin generaliza ligeramente este concepto con 'object expressions' y 'objects declarations'.</p> <p>Estas son algunas de las caracter\u00edsticas de los objetos en Kotlin:</p> <ul> <li>Pueden tener propiedades, m\u00e9todos y un bloque init.</li> <li>Estas propiedades o m\u00e9todos pueden tener modificadores de visibilidad.</li> <li>No pueden tener constructores (primarios o secundarios).</li> <li>Pueden extender otras clases o implementar una interfaz.</li> </ul> <p>Hay importantes diferencias sem\u00e1nticas entre un 'object expression' y un 'object declaration'</p> <ul> <li>Los 'object expression' se ejecutan (y se inicializan) inmediatamente, donde se usan.</li> <li>Los 'object declaration' se inicializan cuando se accede por primera vez.</li> <li>Por su parte, un 'companion object' se inicializa cuando se cargala clase correspondiente.</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#objects-expressions","title":"Objects expressions","text":"<p>Para crear un objeto de una clase an\u00f3nima que hereda de alg\u00fan tipo (o tipos), escribimos:</p> <pre><code>fun countClicks(window: JComponent) {\nvar clickCount = 0\nvar enterCount = 0\nwindow.addMouseListener(object : MouseAdapter() {\noverride fun mouseClicked(e: MouseEvent) {\nclickCount++\n}\noverride fun mouseEntered(e: MouseEvent) {\nenterCount++\n}\n})\n// ...\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#objects-declarations","title":"Objects declarations","text":"<p>Colocamos la palabra clave <code>'object'</code> antes del nombre del objeto que queremos crear. De hecho, estamos creando un SINGLETON cuando creamos objetos en Kotlin usando esta construcci\u00f3n ya que solo existe una instancia de un objeto.</p> <pre><code>object ObjectExample {\nval baseUrl: String = \"http://www.myapi.com/\"\nfun hello(): String {\nreturn \"Hello\"\n}\n}\nprintln(ObjectExample.hello()) // =&gt; Hello\nfun useObject() {\nObjectExample.hello() // =&gt; Hello\nval someRef: Any = ObjectExample // Usamos el nombre de los objetos tal como son\n}\n</code></pre> <p>Al igual que una declaraci\u00f3n de variable, una declaraci\u00f3n de objeto no es una expresi\u00f3n y no se puede utilizar en el lado derecho de una declaraci\u00f3n de asignaci\u00f3n.</p> <p>Los objetos en Kotlin pueden utilizarse tambi\u00e9n para crear constantes.</p> <pre><code>object APIConstants {\nval baseUrl: String = \"http://www.myapi.com/\"\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#companion-objects","title":"Companion objects","text":"<p>Los 'companion objects' son un tipo de 'object declaration'. Como Kotlin no admite clases, m\u00e9todos o propiedades est\u00e1ticas como las que tenemos en Java, Kotlin provee los 'companion objects'. Estos objetos son b\u00e1sicamente un objeto que pertenece a una clase que se conoce como la clase complementaria del objeto. Este objeto se indica con la palabra clave <code>'companion'</code>.</p> <p>Similar a los m\u00e9todos est\u00e1ticos en Java, un 'companion object' no est\u00e1 asociado con una instancia de clase, sino con la propia clase.</p> <p>Se puede llamar a los miembros del 'companion object' usando simplemente el nombre de la clase como el calificador, como si fuera un m\u00e9todo est\u00e1tico.</p> <p>Un 'companion object' puede tener nombre que facilitar\u00e1 el ser invocado desde Java aunque es opcional.</p> <pre><code>class Person private constructor(var firstName: String, var lastName: String) {\n// Podemos omitir el nombre del objeto\ncompanion object {\nvar count: Int = 0\nfun create(firstName: String, lastName: String): Person = Person(firstName, lastName)\n// Podemos tener bloques 'init' dentro de un 'companion object'\ninit {\nprintln(\"Person companion object created\")\n}\n}\n}\nval person = Person.create(\"John\", \"Doe\")\nclass MyClass {\nfun sayHello() = println(\"hello\")\n// Objeto con el nombre 'Factory' y que utilizaremos como 'Factory Pattern'\ncompanion object Factory {\nfun create(): MyClass = MyClass()\nfun sayHelloFromCompanion() = MyClass().sayHello() // Podemos acceder a miembros de la clase\n}\n}\nval myClass = MyClass.create()\nMyClass().sayHello() // incorrecto\nMyClass.Factory.sayHelloFromCompanion() // Invocar un m\u00e9todo del 'companion'\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.3.-kotlinPOO/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/","title":"Apuntes de [Kotlin]","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#summary","title":"Summary","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#basics","title":"Basics","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#package-definition-and-imports","title":"Package definition and imports","text":"<p>Package specification should be at the top of the source file:</p> <pre><code>package my.demo\nimport kotlin.text.*\n// ...\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#entry-point","title":"Entry point","text":"<p>An entry point of a Kotlin application is the <code>main()</code> function:</p> <pre><code>fun main(args: Array&lt;String&gt;) {\nprintln(\"Hello, World\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#comments","title":"Comments","text":"<p>Just like most modern languages, Kotlin supports single-line (or end-of-line) and multi-line (block) comments:</p> <pre><code>// This is an end-of-line comment\n/* This is a block comment\n   on multiple lines. */\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#declaring-variables","title":"Declaring variables","text":"<p>Read-only local variables are defined using the keyword <code>val</code>. They can be assigned a value only once:</p> <pre><code>val a: Int = 1  // immediate assignment\nval b = 2   // `Int` type is inferred\nval c: Int  // Type required when no initializer is provided\nc = 3       // deferred assignment\n</code></pre> <p>Variables that can be reassigned use the <code>var</code> keyword:</p> <pre><code>var x = 5 // `Int` type is inferred\nx += 1\n</code></pre> <p>Top-level variables:</p> <pre><code>val PI = 3.14\nvar x = 0\nfun incrementX() {\nx += 1\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#nullable-values-and-null-checks","title":"Nullable values and null checks","text":"<p>A reference must be explicitly marked as nullable when <code>null</code> value is possible.</p> <pre><code>var name: String? = null\nval length: Int\nlength = name?.length ?: 0      // length, or 0 if name is null\nlength = name?.length ?: return     // length, or return when name is null\nlength = name?.length ?: throw Error()      // length, or throw error when name is null\n</code></pre> <p>Return <code>null</code> if <code>str</code> does not hold an integer:</p> <pre><code>fun parseInt(str: String): Int? {\n// ...\n}\n</code></pre> <p>Use a function returning nullable value:</p> <pre><code>fun printProduct(arg1: String, arg2: String) {\nval x = parseInt(arg1)\nval y = parseInt(arg2)\n// Using `x * y` yields error because they may hold nulls.\nif (x != null &amp;&amp; y != null) {\n// x and y are automatically cast to non-nullable after null check\nprintln(x * y)\n}\nelse {\nprintln(\"'$arg1' or '$arg2' is not a number\")\n}\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#string-templates","title":"String templates","text":"<pre><code>var a = 1\n// simple name in template:\nval s1 = \"a is $a\"\na = 2\n// arbitrary expression in template:\nval s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\"\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#control-flow","title":"Control Flow","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#if-as-an-expression","title":"'If' as an expression","text":"<p>In Kotlin, <code>if</code> can also be used as an expression:</p> <pre><code>fun bigger(a: Int, b: Int) = if (a &gt; b) a else b\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#for-loop","title":"'For' loop","text":"<pre><code>val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\nfor (item in items) {\nprintln(item)\n}\n</code></pre> <pre><code>val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\nfor (index in items.indices) {\n    println(\"item at $index is ${items[index]}\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#while-loop","title":"'While' loop","text":"<pre><code>val items = listOf(\"apple\", \"banana\", \"kiwifruit\")\nvar index = 0\nwhile (index &lt; items.size) {\nprintln(\"item at $index is ${items[index]}\")\nindex++\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#when-expression","title":"'When' expression","text":"<pre><code>fun numberTypeName(x: Number) = when(x) {\n0 -&gt; \"Zero\" // Equality check\nin 1..4 -&gt; \"Four or less\" // Range check\n5, 6, 7 -&gt; \"Five to seven\" // Multiple values\nis Byte -&gt; \"Byte\" // Type check\nelse -&gt; \"Some number\"\n}\n</code></pre> <pre><code>fun describe(obj: Any): String =\nwhen (obj) {\n1          -&gt; \"One\"\n\"Hello\"    -&gt; \"Greeting\"\nis Long    -&gt; \"Long\"\n!is String -&gt; \"Not a string\"\nelse       -&gt; \"Unknown\"\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#when-expression-with-predicates","title":"'When' expression with predicates","text":"<pre><code>fun signAsString(x: Int)= when {\nx &lt; 0 -&gt; \"Negative\"\nx == 0 -&gt; \"Zero\"\nelse -&gt; \"Positive\"\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#functions","title":"Functions","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#declaring-function","title":"Declaring function","text":"<p>Function having two <code>Int</code> parameters with <code>Int</code> return type:</p> <pre><code>fun sum(a: Int, b: Int): Int {\nreturn a + b\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#single-expression-function","title":"Single-expression function","text":"<p>Function with an expression body and inferred return type:</p> <pre><code>fun sum(a: Int, b: Int) = a + b\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#return-unit","title":"Return 'Unit'","text":"<p>Function returning no meaningful value:</p> <pre><code>fun printSum(a: Int, b: Int): Unit {\nprintln(\"sum of $a and $b is ${a + b}\")\n}\n</code></pre> <p><code>Unit</code> return type can be omitted:</p> <pre><code>fun printSum(a: Int, b: Int) {\nprintln(\"sum of $a and $b is ${a + b}\")\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#function-types","title":"Function types","text":"<p><code>() -&gt; Unit</code> - takes no arguments and returns nothing (Unit). <code>(Int, Int) -&gt; Int</code> - takes two arguments of type Int and returns Int. <code>(() -&gt; Unit) -&gt; Int</code> - takes another function and returns Int. <code>(Int) -&gt; () -&gt; Unit</code> - takes argument of type Int and returns function.</p>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#function-literals","title":"Function literals","text":"<pre><code>// Simple lambda expression\nval add: (Int, Int) -&gt; Int = { i, j -&gt; i + j }\nval printAndDouble: (Int) -&gt; Int = {\nprintln(it)\n// When single parameter, we can reference it using `it`\nit * 2 // In lambda, last expression is returned\n}\n// Anonymous function alternative\nval printAndDoubleFun: (Int) -&gt; Int = fun(i: Int): Int {\nprintln(i) // Single argument can\u2019t be referenced by `it`\nreturn i * 2 // Needs return like any function\n}\nval i = printAndDouble(10) // 10\nprint(i) // 20\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#extension-functions","title":"Extension functions","text":"<pre><code>fun Int.isEven() = this % 2 == 0\nprint(2.isEven()) // true\nfun List&lt;Int&gt;.average() = 1.0 * sum() / size\nprint(listOf(1, 2, 3, 4).average()) // 2.5\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#classes","title":"Classes","text":""},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#primary-constructor","title":"Primary constructor","text":"<pre><code>// val declares a read-only property, var a mutable one\nclass Person(val name: String, var age: Int)\n// name is read-only, age is mutable\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#inheritance","title":"Inheritance","text":"<pre><code>open class Person(val name: String) {\nopen fun hello() = \"Hello, I am $name\"\n// Final by default so we need open\n}\nclass PolishPerson(name: String) : Person(name) {\noverride fun hello() = \"Dzie\u0144 dobry, jestem $name\"\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#properties-with-accessors","title":"Properties with accessors","text":"<pre><code>class Person(var name: String, var surname: String) {\nvar fullName: String\nget() = \"$name $surname\"\nset(value) {\nval (first, rest) = value.split(\" \", limit = 2)\nname = first\nsurname = rest\n}\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#data-classes","title":"Data classes","text":"<pre><code>data class Person(val name: String, var age: Int)\nval mike = Person(\"Mike\", 23)\n// Modifier data adds:\n// 1. toString that displays all primary constructor properties\nprint(mike.toString()) // Person(name=Mike, age=23)\n// 2. equals that compares all primary constructor properties\nprint(mike == Person(\"Mike\", 23)) // True\nprint(mike == Person(\"Mike\", 21)) // False\n// 3. hashCode that is based on all primary constructor properties\nval hash = mike.hashCode()\nprint(hash == Person(\"Mike\", 23).hashCode()) // True\nprint(hash == Person(\"Mike\", 21).hashCode()) // False\n// 4. component1, component2 etc. that allows deconstruction\nval (name, age) = mike\nprint(\"$name $age\") // Mike 23\n// 5. copy that returns copy of object with concrete properties changed\nval jake = mike.copy(name = \"Jake\")\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#collection-literals","title":"Collection Literals","text":"<pre><code>listOf(1,2,3,4) // List&lt;Int&gt;\nmutableListOf(1,2,3,4) // MutableList&lt;Int&gt;\nsetOf(\"A\", \"B\", \"C\") // Set&lt;String&gt;\nmutableSetOf(\"A\", \"B\", \"C\") // MutableSet&lt;String&gt;\narrayOf('a', 'b', 'c') // Array&lt;Char&gt;\nmapOf(1 to \"A\", 2 to \"B\") // Map&lt;Int, String&gt;\nmutableMapOf(1 to \"A\", 2 to \"B\")\n// MutableMap&lt;Int, String&gt;\nsequenceOf(4,3,2,1) // Sequence&lt;Int&gt;\n1 to \"A\" // Pair&lt;Int, String&gt;\nList(4) { it * 2 } // List&lt;Int&gt;\ngenerateSequence(4) { it + 2 } // Sequence&lt;Int&gt;\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#collection-processing","title":"Collection Processing","text":"<pre><code>students\n.fiter { it.passing &amp;&amp; it.averageGrade &gt; 4.0 }\n// Only passing students\n.sortedByDescending { it.averageGrade }\n// Starting from ones with biggest grades\n.take(10) // Take \u001frst 10\n.sortedWith(compareBy({ it.surname }, { it.name }))\n// Sort by surname and then name\ngenerateSequence(0) { it + 1 }\n// Infinitive sequence of next numbers starting on 0\n.filter { it % 2 == 0 } // Keep only even\n.map { it * 3 } // Triple every one\n.take(100) // Take \u001frst 100\n.average() // Count average\n// Most important functions for collection processing\nval l = listOf(1,2,3,4)\n//filter - returns only elements matched by predicate\nl.filter { it % 2 == 0 } // [2, 4]\n// map - returns elements after transformation\nl.map { it * 2 } // [2, 4, 6, 8]\n// flatMap - returns elements yielded from results of trans.\nl.flatMap { listOf(it, it + 10) } // [1, 11, 2, 12, 3, 13, 4, 14]\n// fold/reduce - accumulates elements\nl.fold(0.0) { acc, i -&gt; acc + i } // 10.0\nl.reduce { acc, i -&gt; acc * i } // 24\n// forEach/onEach - perfons an action on every element\nl.forEach { print(it) } // Prints 1234, returns Unit\nl.onEach { print(it) } // Prints 1234, returns [1, 2, 3, 4]\n// partition - splits into pair of lists\nval (even, odd) = l.partition { it % 2 == 0 }\nprint(even) // [2, 4]\nprint(odd) // [1, 3]\n// min/max/minBy/maxBy\nl.min() // 1, possible because we can compare Int\nl.minBy { -it } // 4\nl.max() // 4, possible because we can compare Int\nl.maxBy { -it } // 1\n// first/firstBy\nl.first() // 1\nl.first { it % 2 == 0 } // 2 (\u001frst even number)\n// count - count elements matched by predicate\nl.count { it % 2 == 0 } // 2\n// sorted/sortedBy - returns sorted collection\nlistOf(2,3,1,4).sorted() // [1, 2, 3, 4]\nl.sortedBy { it % 2 } // [2, 4, 1, 3]\n// groupBy - group elements on collection by key\nl.groupBy { it % 2 } // Map: {1=[1, 3], 0=[2, 4]}\n// distinct/distinctBy - returns only unique elements\nlistOf(1,1,2,2).distinct() // [1, 2]\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#mutable-vs-immutable-collection-processing-functions","title":"Mutable vs immutable collection processing functions","text":"<pre><code>val list = mutableListOf(3,4,2,1)\nval sortedResult = list.sorted() // Returns sorted\nprintln(sortedResult) // [1, 2, 3, 4]\nprintln(list) // [3, 4, 2, 1]\nval sortResult = list.sort() // Sorts mutable collection\nprintln(sortResult) // kotlin.Unit\nprintln(list) // [1, 2, 3, 4]\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#extension-functions_1","title":"Extension Functions","text":"Returns 'Receiver' Returns 'Results of lambda' Reference to receiver: 'it' also let Reference to receiver: 'this' apply run/with <pre><code>val dialog = Dialog().apply {\ntitle = \"Dialog title\"\nonClick { print(\"Clicked\") }\n}\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#delegates","title":"Delegates","text":"<pre><code>// Lazy - calculates value before \u001frst usage\nval i by lazy { print(\"init \"); 10 }\nprint(i) // Prints: init 10\nprint(i) // Prints: 10\n// notNull - returns last setted value, or throws error if no value has been set\n// observable/vetoable - calls function every time value changes. In vetoable function also decides if new value should be set.\nvar name by observable(\"Unset\") { p, old, new -&gt;\nprintln(\"${p.name} changed $old -&gt; $new\")\n}\nname = \"Marcin\"\n// Prints: name changed Unset -&gt; Marcin\n// Map/MutableMap - \u001fnds value on map by property name\nval map = mapOf(\"a\" to 10)\nval a by map\nprint(a) // Prints: 10\n</code></pre>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#visibility-modifiers","title":"Visibility Modifiers","text":"Modifier Class members Top-level Public (default) Visible everywhere Visible everywhere Private Visible only in the same class Visible in the same class Protected Visible only in the sambe class and subclasses Not allowed Internal Visible in the same module if class is accessible Visible in the same module"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>"},{"location":"section1/u04/teoria/PROG-U4.4.-kotlinResumen/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>"},{"location":"section1/u05/","title":"UD 3 - Estructuras de datos","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u05/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u05/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 6. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos.</p>","tags":["Software"]},{"location":"section1/u05/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han escrito programas que utilicen arrays</li> <li>b) Se han reconocido las librer\u00edas de clases relacionadas con tipos de datos avanzados.</li> <li>c) Se han utilizado listas para almacenar y procesar informaci\u00f3n.</li> <li>d) Se han utilizado iteradores para recorrer los elementos de las listas.</li> <li>e) Se han reconocido las caracter\u00edsticas y ventajas de cada una de la colecciones de datos disponibles.</li> <li>(NO) f) Se han creado clases y m\u00e9todos gen\u00e9ricos.</li> <li>g) Se han utilizado expresiones regulares en la b\u00fasqueda de patrones en cadenas de texto.</li> <li>(NO) h) Se han identificado las clases relacionadas con el tratamiento de documentos XML.</li> <li>(NO) i) Se han realizado programas que realicen manipulaciones sobre documentos XML.</li> </ul>","tags":["Software"]},{"location":"section1/u05/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 2</p> <ul> <li>U3: Estructuras de datos. </li> </ul> <p>En la Unidad 3, veremos:</p> <ul> <li>Listas y tuplas</li> <li>Diccionarios</li> <li>Conjuntos</li> <li>String</li> <li>Expresiones regulares</li> </ul>","tags":["Software"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/practica/PROG-U5.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/","title":"Apuntes de [Kotlin]","text":"<p>Kotlin es un lenguaje de programaci\u00f3n de c\u00f3digo abierto de tipo est\u00e1tico que se dirige a JVM, Android, JavaScript y Native. Est\u00e1 desarrollado por JetBrains. El proyecto se inici\u00f3 en 2010 y fue de c\u00f3digo abierto desde muy temprano. El primer lanzamiento oficial 1.0 fue en febrero de 2016.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#caracteristicas","title":"Caracter\u00edsticas","text":"<p>Un lenguaje de programaci\u00f3n se dise\u00f1a generalmente con un prop\u00f3sito espec\u00edfico en mente. Este prop\u00f3sito puede ser cualquier cosa, desde servir a un entorno espec\u00edfico (por ejemplo, la web) hasta un determinado paradigma (por ejemplo, la programaci\u00f3n funcional). En el caso de Kotlin el objetivo es construir un lenguaje productivo y pragm\u00e1tico, que tenga todas las caracter\u00edsticas que un desarrollador necesita y que sea f\u00e1cil de usar.</p> <p>Kotlin fue dise\u00f1ado inicialmente para trabajar con otros lenguajes de JVM, pero ahora ha evolucionado para ser mucho m\u00e1s: tambi\u00e9n funciona en el navegador y como una aplicaci\u00f3n nativa.</p> <p>Kotlin es multiparadigma, con soporte para paradigmas de programaci\u00f3n orientada a objetos, procedimentales y funcionales, sin forzar el uso de ninguno de ellos. Por ejemplo, a diferencia de Java, puede definir funciones de nivel superior, sin tener que declararlas dentro de una clase.</p> <ul> <li>100% interoperable con Java.</li> <li>100% compatible con Java 6..., por lo que puede crear aplicaciones para la mayor\u00eda de los dispositivos Android.</li> <li>Se ejecuta en la JVM, puede transpilarse (traducirse) a JavaScript e incluso puede ejecutarse de forma nativa, con interoperabilidad con las bibliotecas C y Objective-C (macOs e iOS).</li> <li>No hay necesidad de terminar las frases con punto y coma <code>;</code>. Los bloques de c\u00f3digo est\u00e1n delimitados por corchetes <code>{ }</code>.</li> <li>Soporte de primera clase para valores constantes y colecciones inmutables (ideal para programaci\u00f3n paralela y funcional).</li> <li>Las funciones pueden ser elementos de nivel superior (es decir, no hay necesidad de poner todo dentro de una clase).</li> <li>Las funciones son ciudadanos de primera clase: pueden transmitirse como cualquier otro tipo y utilizarse como argumento de las funciones. Lambda (es decir, funciones an\u00f3nimas) son muy compatibles con la biblioteca est\u00e1ndar.</li> <li>No hay una palabra clave <code>static</code>, sino que hay mejores alternativas.</li> <li>Clases de datos son clases especiales dise\u00f1adas para contener datos.</li> <li>Todo es una expresi\u00f3n: <code>if</code>, <code>for</code>, etc... Todos pueden devolver valores.</li> <li>La expresi\u00f3n <code>when</code> es como un interruptor con superpoderes.</li> </ul> <p>M\u00e1s informaci\u00f3n:</p> <p>https://kotlinlang.org/docs/reference/comparison-to-java.html https://kotlinlang.org/docs/reference/server-overview.html https://kotlinlang.org/docs/reference/evolution/kotlin-evolution.html</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#kotlin-en-linea-de-comandos","title":"Kotlin en l\u00ednea de comandos","text":"<ul> <li>Instalar el compilador desde l\u00ednea de comandos desde aqu\u00ed</li> <li>Compilar la aplicaci\u00f3n usando el compilador de Kotlin: <code>$ kotlinc name.kt -include-runtime -d name.jar</code></li> <li>Ejecutar el programa: <code>$ java -jar name.jar</code></li> <li>Ejecutar la consola 'REPL': <code>$ kotlinc-jvm</code></li> <li>Usar la l\u00ednea de comandos para ejecutar scripts (.kts): <code>$ kotlinc -script name.kts [params]</code></li> <li>Compilar una biblioteca sin la 'runtime' para ser usada en otros programas: <code>$ kotlinc name.kt -d name.jar</code></li> <li>Ejecutar binarios producidos por el compilador de Kotlin: <code>$ kotlin -classpath name.jar HelloKt (HelloKt is the main class name inside the file named name.kt)</code></li> </ul> <p>M\u00e1s informaci\u00f3n: https://kotlinlang.org/docs/command-line.html</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<p>El punto de entrada en un programa escrito en Kotlin (y en Java) es la funci\u00f3n <code>main(args: Array&lt;String&gt;)</code>. Esta funci\u00f3n recibe un array que contiene los argumentos de la l\u00ednea de comandos.</p> <pre><code>fun main(args: Array&lt;String&gt;) {\nprintln(\"Hello World!\")\n}\n</code></pre> <p>Aunque a partir de la versi\u00f3n <code>1.3</code> puedes declarar <code>main</code> sin ning\u00fan par\u00e1metro.</p> <pre><code>fun main() {\nprintln(\"Hello World!\")\n}\n</code></pre> <p>Las funciones y variables en Kotlin pueden declararse en un \"nivel superior\", es decir, no necesitan estar dentro de una clase, por tanto, directamente dentro de un paquete.</p> <p>Si un archivo Kotlin contiene una sola clase (potencialmente con declaraciones de nivel superior relacionadas), su nombre debe ser el mismo que el nombre de la clase, con la extensi\u00f3n '.kt'. Si un archivo contiene varias clases, o solo declaraciones de nivel superior, el nombre debe describir lo que contiene el archivo en formato 'UpperCamelCase' (e.g. <code>ProcessDeclarations.kt</code>)</p> <p>Kotlin sigue las convenciones de nomenclatura de Java. Los nombres de los paquetes se escriben siempre en min\u00fasculas y sin guiones bajos (e.g. <code>org.example.myproject</code>)</p> <p>Los nombres de las clases y los objetos se escriben en 'UpperCamelCase':</p> <pre><code>open class DeclarationProcessor { ... }\nobject EmptyDeclarationProcessor : DeclarationProcessor() { ... }\n</code></pre> <p>Los nombres de funciones, propiedades y variables locales en 'lowerCamelCase':</p> <pre><code>fun processDeclarations() { ... }\nvar declarationCount = ...\n</code></pre> <p>Los nombres de las constantes (propiedades marcadas con <code>const</code>) deben usar nombres en may\u00fasculas y separados por un gui\u00f3n bajo:</p> <pre><code>const val MAX_COUNT = 8\nval USER_NAME_FIELD = \"UserName\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#variables-y-tipos-basicos","title":"Variables y tipos b\u00e1sicos","text":"<p>https://kotlinlang.org/docs/basic-types.html#basic-types</p> <p>En Kotlin, todo es un objeto en el sentido de que podemos llamar funciones y propiedades de miembro en cualquier variable. Algunos de los tipos como los n\u00fameros, los caracteres o los booleanos pueden tener una representaci\u00f3n interna especial que se representa como valores primitivos en tiempo de ejecuci\u00f3n, pero para el usuario se comportan como clases ordinarias.</p> <p>La declaraci\u00f3n de valores se realiza utilizando <code>var</code> o <code>val</code>:</p> <ul> <li>Los valores constantes se declaran como <code>val</code> y son inmutables o 'read-only', es decir, que no se pueden reasignar.</li> <li>Las variables se declaran como <code>var</code> y son mutables, por lo que se le pueden asignar un nuevo valor pero \u00fanicamente del mismo tipo declarado.</li> </ul> <p>La recomendaci\u00f3n es crear valores constantes inmutables, que son m\u00e1s seguras en entornos 'multithreading' ya que no se pueden modificar y utilizar las variables mutables cuando sea necesario.</p> <p>Este soporte de primera clase para los valores constantes es importante por una raz\u00f3n: la programaci\u00f3n funcional. En la programaci\u00f3n funcional, el uso de los valores constantes permiten algunas optimizaciones que aumentan el rendimiento. Por ejemplo, los c\u00e1lculos pueden ser paralelos ya que existe una garant\u00eda de que el valor no cambiar\u00e1 entre dos ejecuciones paralelas, dado que no puede cambiar.</p> <pre><code>val fooVal = 10     // val es inmutable y no podr\u00e1 ser reutilizada\nval otherVal\notherVal = \"My Value\"   // Podemos declarar la variable 'val' en una l\u00ednea y asignarle valor posteriormente. Sigue siendo una sola asignaci\u00f3n.\nvar fooVar = 10\nfooVar = 20     // Se le puede asignar un nuevo valor pero \u00fanicamente del mismo tipo.\n</code></pre> <p>En la mayor\u00eda de los casos, Kotlin puede determinar o inferir cu\u00e1l es el tipo de una variable, por lo que no tenemos que especificarla expl\u00edcitamente. Cuando la variable no se inicialice deberemos indicar expl\u00edcitamente el tipo de la variable ya que Kotlin no puede inferir el tipo si no se inicializa.</p> <pre><code>val foo: Int = 7\nval bar = 10    // Kotlin infiere autom\u00e1ticamente el tipo\nval hello: String   // Si no se inicializa hay que especificar el tipo\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#numbers","title":"Numbers","text":"<p>https://kotlinlang.org/docs/numbers.html</p> <p>Kotlin proporciona los tipos <code>Byte</code>, <code>Short</code>, <code>Int</code> y <code>Long</code> para enteros.</p> <p></p> <p>Y los tipos <code>Float</code> y <code>Double</code> para n\u00fameros en coma flotante:</p> <p></p> <pre><code>val double: Double = 64.0   // 64 bits\nval float: Float = 32.0F // or 32f (32 bits)\nval long: Long = 64L    // 64 bits\nval int: Int = 32       // 32 bits\nval short: Short = 16   // 16 bits\nval byte: Byte = 8      // 8 bits\nval hexadecimal: Int = 0x16\nval binary: Int = 0b101\nval char: Char = 'a'\n</code></pre> <p>Todas las variables inicializadas con un entero no deben exceder el tama\u00f1o m\u00e1ximo de <code>Int</code> ya que Kotlin infiere el tipo <code>Int</code> si no se especifica expl\u00edcitamente el tipo o se a\u00f1ade el ap\u00e9ndice 'L' al valor. En el caso de n\u00fameros en coma flotante, Kotlin infiere el tipo <code>Double</code> si no se indica el tipo expl\u00edcitamente o se marca el valor en coma flotante con el ap\u00e9ndice 'F'.</p> <pre><code>val a = 1   // Kotlin infiere el tipo 'Int'\nval b = 1L  // Kotlin infiere el tipo 'Long'\nval c = 3.14    // Kotlin infiere el tipo 'Double'\nval d = 2.7123F  // Kotlin infiere el tipo 'Float'\n</code></pre> <p>A diferencia de Java, en Kotlin todos los tipos son objetos y por tanto no hay 'wrappers' u objetos envoltorio tipo <code>Integer</code>, <code>Double</code>, etc...</p> <p>Los guiones bajos se pueden utilizar para hacer que los n\u00fameros grandes sean m\u00e1s legibles:</p> <pre><code>val million = 1_000_000\n</code></pre> <p>La conversi\u00f3n debe ser invocada expl\u00edcitamente. Hay conversiones desde un tipo al resto de tipos:</p> <ul> <li><code>toByte()</code>: Byte</li> <li><code>toShort()</code>: Short</li> <li><code>toInt()</code>: Int</li> <li><code>toLong()</code>: Long</li> <li><code>toFloat()</code>: Float</li> <li><code>toDouble()</code>: Double</li> <li><code>toChar()</code>: Char</li> </ul> <pre><code>val otherLong = int.toLong()\nval direct = 25.toLong()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#characters","title":"Characters","text":"<p>https://kotlinlang.org/docs/characters.html</p> <p>Los caracteres no son n\u00fameros en Kotlin, a diferencia de Java. En Kotlin los caracteres se representan con el tipo <code>Char</code>:</p> <p>Los literales de car\u00e1cter se escriben con comillas simples como por ejemplo <code>'a'</code>. Los caracteres especiales se escapan con la barra invertida <code>'\\'</code>. Est\u00e1n soportadas las siguientes secuencias de escape: <code>\\t</code>, <code>\\b</code>, <code>\\n</code>, <code>\\r</code>, <code>\\'</code>, <code>\\\"</code>, <code>\\\\</code>, <code>\\$</code>. </p> <p>Podemos convertir de forma expl\u00edcitia un car\u00e1cter en un n\u00famero de tipo <code>Int</code>:</p> <pre><code>fun decimalDigitValue(c: Char): Int {\nif (c !in '0'..'9')\nthrow IllegalArgumentException(\"Out of range\")\nreturn c.toInt() - '0'.toInt() // Explicit conversions to numbers\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#strings","title":"Strings","text":"<p>https://kotlinlang.org/docs/strings.html</p> <p>Las cadenas son secuencias de caracteres inmutables y se representan con el tipo <code>String</code> de manera similar a Java. Las cadenas se crean usando las comillas dobles. El escapado de caracteres se hace con una barra invertida <code>'\\'</code>.</p> <pre><code>val fooString = \"My String Is Here!\"\nval barString = \"Printing on a new line?\\nNo Problem!\"\nval bazString = \"Do you want to add a tab?\\tNo Problem!\"\nprintln(fooString)\nprintln(barString)\nprintln(bazString)\nprintln(\"John Doe\"[2]) // =&gt; h\nprintln(\"John Doe\".startsWith(\"J\")) // =&gt; true\n</code></pre> <p>Se puede acceder a los elementos de una cadena como si fuera un array (e.g. <code>s[i]</code>) e iterar con un bucle tipo <code>for</code>:</p> <pre><code>for (c in str) {\nprintln(c)\n}\n</code></pre> <p>Se puede utilizar el operador <code>+</code> para concatenar cadenas entre s\u00ed y con valores de otro tipo siempre y cuando uno de los elementos de la expresi\u00f3n sea una cadena:</p> <pre><code>val s = \"abc\" + 1\nprintln(s + \"def\")\n</code></pre> <p>Una cadena sin formato o 'raw string' est\u00e1 delimitada por una comilla triple (\"\"\"). Las cadenas sin formato pueden contener nuevas l\u00edneas y cualquier otro car\u00e1cter. Estas cadenas sin formato tambi\u00e9n tiene soporte para las 'string templates':</p> <pre><code>val fooRawString = \"\"\"\nfun helloWorld(val name : String) {\n    println(\"Hello, world!\")\n}\nval hello = $who\nval result = ${2 + 2}\n\"\"\"\n</code></pre> <p>Con la funci\u00f3n <code>trimMargin()</code> podemos eliminar los espacios en blanco:</p> <pre><code>val text = \"\"\"\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#string-templates","title":"String templates","text":"<p>https://kotlinlang.org/docs/strings.html#string-templates</p> <p>Un literal de cadena puede contener expresiones de plantilla o 'template expressions', que son fragmentos de c\u00f3digo que ser\u00e1 evaluado y cuyo resultado ser\u00e1 concatenado en la cadena. Son una forma simple y efectiva de incrustar valores, variables o incluso expresiones dentro de una cadena.</p> <p>Una expresi\u00f3n de plantilla comienza con un signo de d\u00f3lar (<code>$</code>) y consisten en un nombre de una variable (por ejemplo <code>$i</code>) o en una expresi\u00f3n (como por ejemplo <code>${name.length}</code>) en cuyo caso se utilizan llaves (<code>{}</code>):</p> <pre><code>val name = \"John Doe\"\nprintln(\"$name has ${name.length} characters\") // =&gt; John Doe has 8 characters\nval age = 40\nprintln(\"You are ${if (age &gt; 60) \"old\" else \"young\"}\") // =&gt; You are young\n</code></pre> <p>Las plantillas son compatibles tanto dentro de cadenas sin procesar como dentro de cadenas escapadas. En caso de necesitar representar el literal del d\u00f3lar en una cadena sin escapar se utiliza esta sintaxis:</p> <pre><code>val price = \"\"\"\n${'$'}9.99\n\"\"\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#arrays","title":"Arrays","text":"<p>https://kotlinlang.org/docs/arrays.html</p> <p>Una matriz est\u00e1 representada por la clase <code>Array</code> y es invariante, por lo que, por ejemplo, no se puede asignar un <code>Array&lt;String&gt;</code> a un tipo de variable <code>Array&lt;Any&gt;</code>.</p> <p>En Kotlin, podemos crear una matriz de elementos del mismo tipo o de distinto tipo utilizando la funci\u00f3n de biblioteca <code>arrayOf()</code> y pas\u00e1ndole los elementos a a\u00f1adir:</p> <pre><code>val cardNames = arrayOf(\"Jack\", \"Queen\", \"King\", 3, false)\nprintln(cardNames[1])   // =&gt; Queen\n</code></pre> <p>Podemos forzar la creaci\u00f3n de arrays del mismo tipo. De esta forma el compilador comprobar\u00e1 el tipo de los elementos que se a\u00f1aden y evitar\u00e1 que se a\u00f1adan elementos de tipos no v\u00e1lidos:</p> <pre><code>val myArray = arrayOf&lt;Int&gt;(1, 2, 3, 4)\nprintln(myArray.contentToString()) // =&gt; [1, 2, 3, 4]\n</code></pre> <p>La biblioteca est\u00e1ndar de Kotlin provee funciones para crear arrays de tipos primitivos como <code>intArrayOf()</code>, <code>longArrayOf()</code>, <code>charArrayOf()</code>, <code>doubleArrayOf()</code>, etc... Cada una de estas funciones devuelven una instancia de su equivalente en Kotlin como <code>IntArray</code>, <code>LongArray</code>, <code>CharArray</code>, <code>DoubleArray</code>, etc...:</p> <pre><code>val cards = intArrayOf(10, 11, 12) // IntArray\nprintln(\"${cards[1]}\") // =&gt; 11\n</code></pre> <p>Para mejorar la eficiencia y rendimiento del c\u00f3digo, cuando se utilicen tipos primitivos hay que utilizar las funciones <code>intArrayOf()</code>, <code>longArrayOf()</code>, etc.. en vez de <code>arrayOf()</code> para as\u00ed evitar el coste asociado a las operaciones de 'boxing'/'unboxing'.</p> <p>Alternativamente, podemos crear una matriz a partir de un tama\u00f1o inicial y una funci\u00f3n, que se utiliza para generar cada elemento usando el constructor <code>Array()</code>:</p> <pre><code>val allCards = Array(12, { i -&gt; i + 1 })\nprintln(\"${allCards.first()} - ${allCards.last()}\") // =&gt; 1 - 12\n</code></pre> <p>Iterando sobre la matriz con <code>indices</code>:</p> <pre><code>for (index in cardNames.indices) {\nprintln(\"Element $index is ${cardNames[index]}\")\n}\n</code></pre> <p>Otra forma posible de iterar es usando la funci\u00f3n <code>withIndex()</code>:</p> <pre><code>for ((index, value) in cardNames.withIndex()) {\nprintln(\"$index - $value\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#packages","title":"Packages","text":"<p>https://kotlinlang.org/docs/packages.html</p> <p>La palabra clave <code>package</code> funciona de la misma manera que en Java. El nombre del paquete se usa para construir el \"Fully Qualified Name\" (FQN) de una clase, objeto, interfaz o funci\u00f3n.</p> <p>Todo el contenido (como clases y funciones) de un fichero fuente est\u00e1n contenidos en el paquete declarado. Los nombres de los paquetes se escriben en min\u00fascula y sin guiones bajos:</p> <pre><code>package com.example.kotlin\nclass MyClass { /*...*/ }\nfun saySomething(): String { /*...*/  }\n</code></pre> <p>En el ejemplo, el FQN de la clase ser\u00e1 <code>com.example.kotlin.MyClass</code>.</p> <p>Dado que podemos tener 'top-level functions' como la funci\u00f3n <code>saySomething()</code> del ejemplo, el FQN de esta funci\u00f3n ser\u00e1 <code>com.example.kotlin.saySomething</code>.</p> <p>Si no se especifica un paquete, el contenido del fichero fuente pertenece al paquete 'default'.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#imports","title":"Imports","text":"<p>https://kotlinlang.org/docs/packages.html#imports</p> <p>En Kotlin, usamos la declaraci\u00f3n de importaci\u00f3n para permitir que el compilador localice las clases e interfaces, propiedades, enumeraciones, funciones y objetos que se importar\u00e1n.</p> <p>En Java, por otro lado, solo est\u00e1 permitido importar clases o interfaces.</p> <pre><code>// 'Bar' esta disponible en el c\u00f3digo\nimport foo.Bar\n// Si existe cierta ambig\u00fcedad podemos usar la palabra clave 'as'\nimport foo.Bar\nimport bar.Bar as bBar\n// Todo el contenido de 'foo' est\u00e1 disponible\nimport foo.*\n</code></pre> <p>Por defecto, al igual que en Java, el compilador importa de forma impl\u00edcita una serie de paquetes y por tanto est\u00e1n disponibles de forma autom\u00e1tica:</p> <ul> <li>kotlin.*</li> <li>kotlin.annotation.*</li> <li>kotlin.collections.*</li> <li>kotlin.comparisons.*</li> <li>kotlin.io.*</li> <li>kotlin.ranges.*</li> <li>kotlin.sequences.*</li> <li>kotlin.text.*</li> </ul> <p>Additional packages are imported depending on the target platform:</p> <ul> <li>JVM:</li> <li>java.lang.*</li> <li>kotlin.jvm.*</li> <li>JS:</li> <li>kotlin.js.*</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#comentarios","title":"Comentarios","text":"<pre><code>// Single-line comments start with //\n/*\nMulti-line comments look like this.\n*/\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#control-de-flujo-y-bucles","title":"Control de flujo y bucles","text":"<p>https://kotlinlang.org/docs/control-flow.html#control-flow-if-when-for-while</p> <p>Kotlin tiene 4 construcciones de control de flujo: <code>if</code>, <code>when</code>, <code>for</code> y <code>while</code>.  <code>if</code> y <code>when</code> son expresiones, por lo que devuelven un valor; <code>for</code> y <code>when</code> son declaraciones, por lo que no devuelven un valor. <code>if</code> y <code>when</code> tambi\u00e9n se pueden utilizar como sentencias, es decir, se pueden utilizar de forma aut\u00f3noma y sin devolver un valor.</p> <p>Un bucle <code>for</code> puede usarse con cualquier elemento que proporcione un iterador como rangos, colecciones, etc...:</p> <pre><code>for (c in \"hello\") {\nprintln(c)\n}\nfor (i in 1..3) {\nprintln(i)\n}\nfor (i in 6 downTo 0 step 2) {\nprintln(i)\n}\n</code></pre> <p>Los bucles <code>while</code> y <code>do-while</code> funcionan de la misma manera que en otros lenguajes:</p> <pre><code>while (x &gt; 0) {\nx--\n}\ndo {\nval y = retrieveData()\n} while (y != null) // y is visible here!\n</code></pre> <p>La instrucci\u00f3n <code>if</code> y <code>if..else</code> funciona igual que en Java. Adem\u00e1s, en Kotlin los bloques <code>if</code> se pueden utilizar como una expresi\u00f3n que devuelve un valor. Por este motivo el operador ternario 'condition ? then: else' no es necesario en Kotlin:</p> <pre><code>// Traditional usage\nvar max = a\nif (a &lt; b) max = b\n// With else\nvar max: Int\nif (a &gt; b) {\nmax = a\n} else {\nmax = b\n}\n// As expression\nval max = if (a &gt; b) a else b\n// With blocks\n// returns a or 5\nvar top = if (a &gt; 5) {\nprintln(\"a is greater than 5\")\na\n} else {\nprintln(\"5 is greater than a\")\n5\n}\n</code></pre> <p>Los bloques <code>when</code> se pueden usar como una alternativa a las cadenas <code>if-else-if</code> o en substituci\u00f3n de los <code>switch</code>. Si no se proporciona ning\u00fan argumento, las condiciones de la rama son simplemente expresiones booleanas, y una rama se ejecuta cuando su condici\u00f3n es verdadera:</p> <pre><code>when {\nx.isOdd() -&gt; print(\"x is odd\")\nx.isEven() -&gt; print(\"x is even\")\nelse -&gt; print(\"x is funny\")\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede usar con un argumento. Si ninguna de las opciones coincide con el argumento, se ejecuta la opci\u00f3n del bloque <code>else</code>:</p> <pre><code>when (x) {\n1 -&gt; print(\"x == 1\")\n2 -&gt; print(\"x == 2\")\nelse -&gt; {\nprintln(\"none of the above\") // N\u00f3tese el uso de llaves para delimitar el bloque de c\u00f3digo\n}\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede utilizar como una expresi\u00f3n que devuelve un valor. En este caso el bloque <code>else</code> es obligatorio. De hecho, la \u00fanica excepci\u00f3n a esta regla es si el compilador puede garantizar que siempre devuelve un valor. Por lo tanto, si las ramas normales cubren todos los valores posibles, entonces no hay necesidad de una rama <code>else</code>:</p> <pre><code>val result = when (i) {\n0, 21 -&gt; \"0 or 21\"\nin 1..20 -&gt; \"in the range 1 to 20\"\nelse -&gt; \"none of the above\"\n}\nprintln(result)\nval check = true\nval result = when(check) {   // All results are covered\ntrue -&gt; println(\"it's true\")\nfalse -&gt; println(\"it's false\")\n}\n</code></pre> <p>Se pueden utilizar expresiones arbitrarias, y no solo constantes, como condiciones en los bloques:</p> <pre><code>when (x) {\nparseInt(s) -&gt; print(\"s encodes x\")\nelse -&gt; print(\"s does not encode x\")\n}\n</code></pre> <p>Si muchos casos deben manejarse de la misma manera, las condiciones de la rama pueden combinarse con una coma:</p> <pre><code>when (x) {\n0, 1 -&gt; print(\"x == 0 or x == 1\")\nelse -&gt; print(\"otherwise\")\n}\n</code></pre> <p>Tambi\u00e9n podemos verificar si un valor est\u00e1 dentro <code>in</code> o no est\u00e1 dentro <code>!in</code> de un rango o una colecci\u00f3n:</p> <pre><code>when (x) {\nin 1..10 -&gt; print(\"x is in the range\")\nin validNumbers -&gt; print(\"x is valid\")\n!in 10..20 -&gt; print(\"x is outside the range\")\nelse -&gt; print(\"none of the above\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#funciones","title":"Funciones","text":"<p>https://kotlinlang.org/docs/functions.html</p> <p>Las funciones se declaran usando la palabra clave <code>'fun'</code>. Los nombres de las funciones empiezan con min\u00fascula. Los par\u00e1metros de la funci\u00f3n se especifican entre par\u00e9ntesis despu\u00e9s del nombre de la funci\u00f3n y tienen la forma <code>'name: type'</code>. El tipo de cada par\u00e1metro debe especificarse expl\u00edcitamente y no puede omitirse.</p> <pre><code>fun powerOf(number: Int, exponent: Int) { ... }\n</code></pre> <p>Los par\u00e1metros de la funci\u00f3n pueden tener opcionalmente un valor por defecto, que se utilizar\u00e1 en caso de se omita el argumento al invocar la funci\u00f3n. El tipo de retorno de la funci\u00f3n, si es necesario, se especifica despu\u00e9s de los par\u00e1metros:</p> <pre><code>fun hello(name: String = \"world\"): String { // valor por defecto\nreturn \"Hello, $name!\"\n}\nhello(\"foo\") // =&gt; Hello, foo!\nhello(name = \"bar\") // =&gt; Hello, bar!\nhello() // =&gt; Hello, world!\nfun bye(bye: String = \"Bye\", name: String): String {\nreturn \"$bye, $name!!\"\n}\nbye(name = \"John\", bye = \"Good bye\") // =&gt; Good bye, John!!\nbye(name = \"John\") // =&gt; Bye, John!!\n</code></pre> <p>Si un par\u00e1metro por defecto precede a un par\u00e1metro sin valor predeterminado, el valor por defecto solo se puede usar llamando a la funci\u00f3n con argumentos con nombre:</p> <pre><code>fun foo(bar: Int = 0, baz: Int) { ... }\nfoo(baz = 1) // The default value bar = 0 is used\n</code></pre> <p>Dado que Java no admite valores de par\u00e1metros por defecto en los m\u00e9todos, deber\u00e1 especificar todos los valores de par\u00e1metros expl\u00edcitamente cuando llame a una funci\u00f3n de Kotlin desde Java. Kotlin nos proporciona la funcionalidad para facilitar las llamadas de Java al anotar la funci\u00f3n Kotlin con <code>'@JvmOverloads'</code>. Esta anotaci\u00f3n le indicar\u00e1 al compilador de Kotlin que genere las funciones sobrecargadas de Java para nosotros.</p> <pre><code>@JvmOverloads\nfun calCircumference(radius: Double, pi: Double = Math.PI): Double = (2 * pi) * radius\n// En Java\ndouble calCircumference(double radius, double pi);\ndouble calCircumference(double radius);\n</code></pre> <p>Cuando una funci\u00f3n no devuelve ning\u00fan valor significativo, su tipo de devoluci\u00f3n por defecto es <code>Unit</code>. En ese caso indicar el tipo de retorno es opcional. El tipo <code>Unit</code> es un objeto en Kotlin que es similar a los tipos <code>void</code> en Java y C.</p> <pre><code>fun hello(name: String): Unit {\nprint(\"Hello $name\")\n}\nfun sayHello(name: String) { // compila ya que el compilador infiere el tipo 'Unit'\nprint(\"Hello $name\")\n}\n</code></pre> <p>Los par\u00e1metros con nombre permiten c\u00f3digo m\u00e1s legible al nombrar los par\u00e1metros que se pasan a una funci\u00f3n cuando se invoca. Una vez que se utiliza un nombre en un par\u00e1metro, el resto de par\u00e1metros tambi\u00e9n deben asignarse con nombre:</p> <pre><code>fun area(width: Int, height: Int): Int {\nreturn width * height\n}\narea(10, 12)\narea(width = 10, height = 12) // c\u00f3digo m\u00e1s legible\narea(height = 12, width = 10) // podemos cambiar el orden\narea(10, height = 12) // argumento por posici\u00f3n y argumentos con nombre\narea(width = 10, 12) // \u00a1incorrecto! no se permiten argumentos con nombre antes de argumentos por posici\u00f3n\nfun bar(k: Int, m: Long = 1L, j: Boolean = true) = println(\"$k - $m - $j\")\n// Una vez que un par\u00e1metro ha sido nombrado, todos los siguientes par\u00e1metros deben ser nombrados\nbar(10) // =&gt; Se omiten los par\u00e1mentros por defecto\nbar(15, 30L)\nbar(20, 2L, true)\nbar(m = 30L, j = false, k = 10)\nbar(k = 10, m = 20L, j = true)\nbar(5, m = 2L, j = true)\nbar(6, 1L, j = true)\n</code></pre> <p>Cuando se invoca una funci\u00f3n con argumentos posicionales y con nombre, todos los argumentos posicionales deben colocarse antes del primero argumento con nombre. Por ejemplo, la llamada <code>f(1, y = 2)</code> est\u00e1 permitida, pero <code>f(x = 1, 2)</code> no est\u00e1 permitida.</p> <p>Para pasar un n\u00famero variable de argumentos a una funci\u00f3n podemos usar la palabra clave <code>'vararg'</code> delante del nombre de una variable. Por tanto la funci\u00f3n aceptar\u00e1 una lista de par\u00e1metros separados por comas que el compilador envolver\u00e1 en una array. Por tanto, dentro de la funci\u00f3n accederemos a los par\u00e1metros mediante la notaci\u00f3n de array.</p> <p>Este tipo de par\u00e1metros se puede combinar con otros par\u00e1metros. Normalmente el par\u00e1metro <code>'vararg'</code> ser\u00e1 el \u00faltimo de la lista. Si hay otros par\u00e1metros despu\u00e9s de <code>'vararg'</code>, deber\u00e1n usarse par\u00e1metros con nombre:</p> <pre><code>fun varargExample(vararg names: Int) {\nprintln(\"Argument has ${names.size} elements\")\n}\nvarargExample() // =&gt; Argument has 0 elements\nvarargExample(1) // =&gt; Argument has 1 elements\nvarargExample(1, 2, 3) // =&gt; Argument has 3 elements\nfun car(vararg model: String, year: Int) {}\ncar(\"Audi\", \"A6\", year = 2005) // par\u00e1metros con nombre despu\u00e9s de 'vararg'\n</code></pre> <p>Para utilizar un array para suministrar un n\u00famero variable de argumentos se utiliza el operador <code>'*'</code> tambi\u00e9n llamado 'spread operator' delante del nombre de la variable del array:</p> <pre><code>val intArray = intArrayOf(1, 2, 3, 4)\nval array = Array(5, { i -&gt; i + 1 })\nvarargExample(*intArray) // =&gt; Argument has 4 elements\nvarargExample(*array.toIntArray()) // =&gt; Argument has 5 elements\n</code></pre> <p>Cuando una funci\u00f3n consiste en una sola expresi\u00f3n, se pueden omitir los par\u00e9ntesis. El cuerpo se especifica despu\u00e9s de un s\u00edmbolo <code>'='</code>:</p> <pre><code>fun odd(x: Int): Boolean = x % 2 == 1\n</code></pre> <p>Declarar expl\u00edcitamente el tipo de retorno de una funci\u00f3n cuando es una expresi\u00f3n es opcional cuando puede ser inferido por el compilador o cuando el tipo de retorno es <code>'Unit'</code>. Cuando el cuerpo de una funci\u00f3n es un bloque hay que especificar el tipo de retorno ya que el compilador no puede inferirlo:</p> <pre><code>fun even(x: Int) = x % 2 == 0  // Optional\nfun printHello(name: String?) { // 'Unit'\nif (name != null)\nprintln(\"Hello ${name}\")\nelse\nprintln(\"Hi there!\")\n// `return Unit` or `return` is optional\n}\n</code></pre> <p>A veces queremos devolver m\u00faltiples valores desde una funci\u00f3n. Una forma es usar el tipo <code>'Pair'</code> de Kotlin. Esta estructura incluye dos valores a los que luego se puede acceder. Este tipo de Kotlin puede aceptar cualquier tipo que suministre a su constructor. Y, lo que es m\u00e1s, los dos tipos ni siquiera necesitan ser iguales. Kotlin tambi\u00e9n provee el tipo <code>'Triple'</code> que retorna tres valores:</p> <pre><code>fun getNumbers(num: Int): Pair&lt;Int?, Int?&gt; {\nrequire(num &gt; 0, { \"Error: num is less than 0\" })\nreturn Pair(num, num * 2)\n}\nval(num, num2) = getNumbers(10) // destructuring\n</code></pre> <p>En Kotlin, podemos hacer que la creaci\u00f3n de una instancia 'Pair' sea m\u00e1s compacta y legible utilizando la funci\u00f3n 'to', que es una funci\u00f3n 'infix' en lugar del constructor de 'Pair'.</p> <pre><code>val nigeriaCallingCodePair = 234 to \"Nigeria\"\nval nigeriaCallingCodePair2 = Pair(234, \"Nigeria\") // Same as above\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#extension-functions","title":"Extension functions","text":"<p>Las 'extension functions' son una forma de agregar nuevas funcionalidades a una clase sin tener que heredar de dicha clase. Esto es similar a los m\u00e9todos de extensi\u00f3n de C#. Una funci\u00f3n de extensi\u00f3n se declara fuera de la clase que quiere extender. En otras palabras, tambi\u00e9n es una 'top-level function'. Junto con las funciones de extensi\u00f3n, Kotlin tambi\u00e9n admite propiedades de extensi\u00f3n.</p> <p>Para crear una 'extension function', debe prefijar el nombre de la clase que est\u00e1 extendiendo antes del nombre de la funci\u00f3n. El nombre de la clase o el tipo en el que se define la extensi\u00f3n se denomina tipo de receptor, y el objeto receptor es la instancia de clase o el valor concreto sobre el que se llama a la funci\u00f3n de extensi\u00f3n.</p> <pre><code>fun String.remove(c: Char): String {  // 'String' es el tipo receptor\nreturn this.filter { it != c }     // 'this' corresponde al objeto receptor\n}\nprintln(\"Hello, world!\".remove('l')) // =&gt; Heo, word!  // \"Hello World\" es el objeto receptor\n</code></pre> <p>En caso de que una 'extension function' tenga la misma firma (mismo nombre y misma lista de par\u00e1metros) que una funci\u00f3n miembro, es decir, una funci\u00f3n de la clase, el compilador invocar\u00e1 antes la funci\u00f3n miembro que la funci\u00f3n de extensi\u00f3n aunque no se generar\u00e1 ning\u00fan error de compilaci\u00f3n:</p> <pre><code>class C {\nfun foo() { println(\"member\") }\n}\nfun C.foo() {\nprintln(\"extension\")\n}\nfun C.foo(i: Int) {\nprintln(\"extension &amp; overrided\")\n}\nC().foo() // =&gt; member\nC().foo(5) // =&gt; extension &amp; overrided\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#top-level-functions","title":"Top-level functions","text":"<p>Las funciones de nivel superior son funciones que se definen fuera de cualquier clase, objeto o interfaz. Esto significa que son funciones a las que llama directamente, sin la necesidad de crear ning\u00fan objeto o llamar a ninguna clase. Dado que Java no soporta este tipo de funciones el compilador de Kotlin genera una clase con m\u00e9todos est\u00e1ticos. Este tipo de funciones son especialmente \u00fatiles para crear funciones de utilidad o de ayuda.</p> <pre><code>// Code defined inside a file called 'UserUtils.kt'\n@file:JvmName(\"UserUtils\")\npackage com.example.project.utils\nfun checkUserStatus(): String {\nreturn \"online\"\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#high-order-functions","title":"High-Order Functions","text":"<p>Las funciones en Kotlin son de primera clase, lo que significa que pueden ser almacenadas en variables y estructuras de datos, pasadas como argumentos y devueltas desde otras funciones de orden superior. Puede operar con funciones de cualquier manera que sea posible para otros valores no funcionales.</p> <p>Para facilitar esto, Kotlin, como lenguaje de programaci\u00f3n est\u00e1ticamente tipado, utiliza una familia de tipos de funci\u00f3n para representar funciones y proporciona un conjunto de construcciones de lenguaje especializadas, tales como expresiones lambda.</p> <p>Una 'high-order function' o funci\u00f3n de orden superior es una funci\u00f3n que puede tomar funciones como par\u00e1metros y/o devolver una funci\u00f3n como tipo de retorno.</p> <pre><code>// Funci\u00f3n con dos par\u00e1metros, el segundo de ellos es una funci\u00f3n\nfun foo(str: String, fn: (String) -&gt; String): Unit {\nval applied = fn(str)\nprintln(applied)\n}\nfoo(\"Hello\", { it.reversed() }) // =&gt; olleH\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n\nfun isPositive(n: Int): (Int) -&gt; Boolean {\nreturn { n &gt; 0 } // return a function. Instead 'return value' we have 'return { function }'\n}\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n de forma m\u00e1s compacta\nfun modulo(k: Int): (Int) -&gt; Boolean = { it % k == 0 }\n// fun modulo(k: Int): (Int) -&gt; Boolean = { n:Int -&gt; n % k == 0 } //igual que la definici\u00f3n de arriba.  \nval evens = listOf(1, 2, 3, 4, 5, 6).filter(modulo(2)) // =&gt; [2, 4, 6]\n// Asignar la funci\u00f3n a una variable\nval isEven: (Int) -&gt; Boolean = modulo(2)\nlistOf(1, 2, 3, 4).filter(isEven) // =&gt; [2, 4]\nlistOf(5, 6, 7, 8).filter(isEven) // =&gt; [6, 8]\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#functions-types-lambdas","title":"Functions types &amp; Lambdas","text":"<p>Un tipo funci\u00f3n es un tipo que consta de una firma de funci\u00f3n, es decir, dos par\u00e9ntesis que contiene la lista de par\u00e1metros (que son opcionales) y un tipo de retorno. Ambas partes est\u00e1n separadas por el operador <code>'-&gt;'</code>.</p> <p>Cuando se define un tipo funci\u00f3n, siempre se debe indicar expl\u00edcitamente el tipo de retorno. Cuando se declaran funciones normales que devuelven <code>Unit</code>, se puede omitir el tipo de retorno ya que el compilador lo infiere, pero no se puede omitir en los tipos funci\u00f3n. Adem\u00e1s, debe poner los par\u00e9ntesis para los par\u00e1metros, incluso cuando el tipo funci\u00f3n no acepta ning\u00fan par\u00e1metro.</p> <pre><code>fun executor(action:() -&gt; Unit) {\naction()\n}\n// 'action' es el nombre del par\u00e1metro y su tipo es '() -&gt; Unit' que es una funci\u00f3n.\n// Por tanto el tipo de 'action' es un tipo funci\u00f3n.\n</code></pre> <ul> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve 'Unit': <code>() -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve un String: <code>() -&gt; String</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma un String y no devuelve nada: <code>(String) -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma dos par\u00e1metros y no devuelve nada: <code>(String, Float) -&gt; Unit</code></li> </ul> <p>Debido a que un tipo funci\u00f3n es solo un tipo, significa que puede asignar una funci\u00f3n a una variable, puede pasarla como un argumento a otra funci\u00f3n o puede devolverla desde una funci\u00f3n tal y como suceden en las `high-order functions':</p> <pre><code>val saySomething: (String) -&gt; Unit = { x -&gt; println(x) }\nsaySomething(\"Good morning\") // =&gt; Good morning\n</code></pre> <p>Una forma de instanciar una funci\u00f3n tipo es usando el operador <code>'::'</code>. Tambi\u00e9n podemos usar este operardor para pasar un tipo funci\u00f3n como par\u00e1metro de otra funci\u00f3n especificando su nombre con el operador y sin utilizar los par\u00e9ntesis:</p> <pre><code>fun businessEmail(s: String): Boolean {\nreturn s.contains(\"@\") &amp;&amp; s.contains(\"business.com\")\n}\nisAnEmail(::businessEmail) // Invocar una 'high-order function' pas\u00e1ndole otra funci\u00f3n por su nombre\nfun tell(text: String) {\nprintln(text)\n}\nvar saySomething: (String) -&gt; Unit // La variable 'saySomething' es una variable de tipo funci\u00f3n\nsaySomething = ::tell // instanciar el tipo funci\u00f3n y asignarlo a la variable 'saySomething'\nsaySomething(\"Hello\") //=&gt; Hello\n</code></pre> <p>En particular, una lambda es una funci\u00f3n literal: una funci\u00f3n an\u00f3nima que no se declara pero se usa directamente como una expresi\u00f3n.</p> <p>B\u00e1sicamente, una lambda es un bloque de c\u00f3digo que se puede pasar como cualquier otro literal (por ejemplo, simplemente como una cadena literal <code>\"una cadena\"</code>). La combinaci\u00f3n de estas caracter\u00edsticas permite a Kotlin soportar la programaci\u00f3n funcional b\u00e1sica.</p> <p>En el ejemplo una variable 'sum' de tipo funci\u00f3n y a la que le asignamos directamente una funci\u00f3n 'lambda' con dos par\u00e1metros:</p> <pre><code>// Asignando una funci\u00f3n 'lambda'\nval sum: (Int, Int) -&gt; Int = { x, y -&gt; x + y }\nsum(10, 20) // =&gt; 30\n// Equivalente usando el operador '::'\nfun operation(x: Int, y: Int): Int {\nreturn x + y\n}\nval sum: (Int, Int) -&gt; Int = ::operation\nsum(10, 20) // =&gt; 30\n</code></pre> <p>En Kotlin, por convenci\u00f3n si una funci\u00f3n 'lambda' tiene solo un par\u00e1metro, su declaraci\u00f3n puede omitirse (junto con -&gt;). El nombre del \u00fanico par\u00e1metro ser\u00e1 <code>'it'</code>.</p> <pre><code>val isNegative: (Int) -&gt; Boolean = { it &lt; 0 } // este literal es del tipo '(it: Int) -&gt; Boolean'\nisNegative(-5) // =&gt; true\n</code></pre> <p>Otra convenci\u00f3n es que si el \u00faltimo par\u00e1metro de una funci\u00f3n acepta una funci\u00f3n, una expresi\u00f3n 'lambda' que es pasada como el argumento correspondiente se puede colocar fuera de los par\u00e9ntesis:</p> <pre><code>// lambda expression inside parentheses\nval upperCaseLetters = \"Hello World\".filter({ it.isUpperCase() })\n// lambda outside parentheses\nval lowerCaseLetters = \"Hello World\".filter { it.isLowerCase() }\nprintln(\"$upperCaseLetters - $lowerCaseLetters\") // =&gt; HW - elloorld\n</code></pre> <p>El siguiente ejemplo tenemos una funci\u00f3n de orden superior que acepta una funci\u00f3n lambda <code>{ (String) -&gt; Boolean }</code> como par\u00e1metro. Se expresa como \"acepta una funci\u00f3n 'from String to Boolean'\":</p> <pre><code>// El par\u00e1metro 'email' podemos usarlo como una funci\u00f3n que acepta una cadena y devuelve un booleano.\nfun isAnEmail(email: (String) -&gt; Boolean) {\nemail(\"myemail@example.com\")\n}\nisAnEmail({ s: String -&gt; s.contains(\"@\") }) // forma completa\nisAnEmail { s: String -&gt; s.contains(\"@\") } // Los par\u00e9ntesis son opcionales\nisAnEmail { it.contains(\"@\") } // Uso de 'it'\n</code></pre> <p>Para par\u00e1metros no utilizados se utiliza el operador <code>'_'</code>:</p> <pre><code>val unusedSecondParam: (String, Int) -&gt; Boolean = { s, _ -&gt;\ns.length &gt; 10\n}\nunusedSecondParam(\"Hello World\", 0) // 0 is unused\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#anonymous-functions","title":"Anonymous functions","text":"<p>Una funci\u00f3n an\u00f3nima se parece mucho a una declaraci\u00f3n de funci\u00f3n normal, excepto que se omite su nombre. Su cuerpo puede ser una expresi\u00f3n o un bloque:</p> <pre><code>// Funci\u00f3n an\u00f3nima cuyo cuerpo es una expresi\u00f3n\nfun(x: Int, y: Int): Int = x + y\n// Funci\u00f3n an\u00f3nima con bloque\nfun(x: Int, y: Int): Int {\nreturn x + y\n}\n</code></pre> <p>El tipo de los par\u00e1metros de una funci\u00f3n an\u00f3nima pueden omitirse si se pueden inferir por el contexto:</p> <pre><code>ints.filter(fun(item) = item &gt; 0)\n</code></pre> <p>La inferencia de tipo de retorno para funciones an\u00f3nimas funciona igual que para las funciones normales: el tipo de retorno se deduce autom\u00e1ticamente para funciones an\u00f3nimas con un cuerpo de expresi\u00f3n y debe especificarse expl\u00edcitamente (o se supone que es <code>'Unit'</code>) para funciones an\u00f3nimas con un cuerpo de bloque.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#closures","title":"Closures","text":"<p>Un 'closure' es una funci\u00f3n que tiene acceso a variables y par\u00e1metros que se definen en un \u00e1mbito externo. A diferencia de Java, las variables 'capturadas' pueden ser modificadas.</p> <pre><code>fun printFilteredNamesByLength(length: Int) {\nval names = arrayListOf(\"Adam\", \"Andrew\", \"Chike\", \"Kechi\")\nval filterResult = names.filter {\nit.length == length     // 'length' se define fuera del \u00e1mbito de la lambda\n}\nprintln(filterResult)\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#local-or-nested-functions","title":"Local or Nested Functions","text":"<p>Para llevar m\u00e1s lejos la modularizaci\u00f3n de programas, Kotlin nos proporciona funciones locales, tambi\u00e9n conocidas como funciones anidadas o 'nested functions'. Una funci\u00f3n local es una funci\u00f3n que se declara dentro de otra funci\u00f3n.</p> <p>Podemos hacer que nuestras funciones locales sean m\u00e1s concisas al no pasarles par\u00e1metros expl\u00edcitamente. Esto es posible porque las funciones locales tienen acceso a todos los par\u00e1metros y variables de la funci\u00f3n de cierre.</p> <pre><code>fun printCircumferenceAndArea(radius: Double): Unit {\nfun calCircumference(radius: Double): Double = (2 * Math.PI) * radius\nval circumference = \"%.2f\".format(calCircumference(radius))\nfun calArea(radius: Double): Double = (Math.PI) * Math.pow(radius, 2.0)\nval area = \"%.2f\".format(calArea(radius))\nprint(\"The circle circumference of $radius radius is $circumference and area is $area\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#infix-functions","title":"Infix Functions","text":"<p>Las funciones marcadas con la palabra clave <code>'infix'</code> se pueden llamar usando la notaci\u00f3n 'infix' (omitiendo el punto y los par\u00e9ntesis para la llamada). Estas funciones deben cumplir los siguientes requisitos:</p> <ul> <li>Tienen que ser miembros de una clase o funciones de extensi\u00f3n</li> <li>Deben tener un solo par\u00e1metro</li> <li>Este par\u00e1metro no ser\u00e1 <code>'vararg'</code> ni tener valor por defecto</li> </ul> <p>Para invocar una funci\u00f3n <code>'infix'</code> en Kotlin no necesitamos usar la notaci\u00f3n de puntos ni los par\u00e9ntesis. Hay que tener en cuenta que las funciones <code>'infix'</code> siempre requieren que se especifiquen tanto el receptor como el par\u00e1metro. Cuando se invoca un m\u00e9todo en el receptor actual, como por ejemplo dentro de la clase, se necesita usar explicitamente la notaci\u00f3n <code>'this'</code>. A diferencia de las llamadas a m\u00e9todos regulares, no se puede omitir.</p> <pre><code>class Student {\nvar kotlinScore = 0.0\ninfix fun addKotlinScore(score: Double): Unit {\nthis.kotlinScore = kotlinScore + score\n}\nfun build() {\nthis addKotlinScore 95.0   // Correcto\naddKotlinScore(95.0)       // Correcto\naddKotlinScore 95.0        // Incorrectp: hay que especificar el receptor ('this')\n}\n}\nval student = Student()\nstudent addKotlinScore 95.00 // Invocando la funci\u00f3n usando la notaci\u00f3n 'infix'\nstudent.addKotlinScore(95) // Invocando la funci\u00f3n con notaci\u00f3n normal\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#inline-functions","title":"Inline functions","text":"<p>El compilador de Kotlin crea una clase an\u00f3nima en versiones anteriores de Java cuando creamos o utilizamos expresiones lambda. Esto genera una sobrecarga, adem\u00e1s de la carga de memoria que se genera cuando en una funci\u00f3n lambda hace uso de variables de fuera de su entorno como en las 'closures'.</p> <p>Para evitar esta sobrecarga tenemos el modificador <code>'inline'</code> para las funciones. Una 'High-Order function' con el modificador <code>'inline'</code> se integrar\u00e1 durante la compilaci\u00f3n del c\u00f3digo. En otras palabras, el compilador copiar\u00e1 la 'lambda' (o funci\u00f3n literal) y tambi\u00e9n el cuerpo de la funci\u00f3n de orden superior y los pegar\u00e1 en el sitio de la llamada.</p> <p>Con este mecanismo, nuestro c\u00f3digo se ha optimizado significativamente, no m\u00e1s creaci\u00f3n de clases an\u00f3nimas o asignaciones de memoria extra. Por otro lado el uso de <code>'inline'</code> hace que el compilador genere ficheros bytecode m\u00e1s grandes. Por esta raz\u00f3n, se recomienda encarecidamente que solo se incluyan funciones de orden superior m\u00e1s peque\u00f1as que acepten lambda como par\u00e1metros.</p>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> <li>https://revilofe.github.io/IESRA-DAM-Prog/#/</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u05/teoria/PROG-U5.1.-xxxx/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/","title":"UD 6 - Pendiente","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u06/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u06/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 6. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos.</p>","tags":["Software"]},{"location":"section1/u06/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han escrito programas que utilicen arrays</li> <li>b) Se han reconocido las librer\u00edas de clases relacionadas con tipos de datos avanzados.</li> <li>c) Se han utilizado listas para almacenar y procesar informaci\u00f3n.</li> <li>d) Se han utilizado iteradores para recorrer los elementos de las listas.</li> <li>e) Se han reconocido las caracter\u00edsticas y ventajas de cada una de la colecciones de datos disponibles.</li> <li>(NO) f) Se han creado clases y m\u00e9todos gen\u00e9ricos.</li> <li>g) Se han utilizado expresiones regulares en la b\u00fasqueda de patrones en cadenas de texto.</li> <li>(NO) h) Se han identificado las clases relacionadas con el tratamiento de documentos XML.</li> <li>(NO) i) Se han realizado programas que realicen manipulaciones sobre documentos XML.</li> </ul>","tags":["Software"]},{"location":"section1/u06/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque 2</p> <ul> <li>U3: Estructuras de datos. </li> </ul> <p>En la Unidad 3, veremos:</p> <ul> <li>Listas y tuplas</li> <li>Diccionarios</li> <li>Conjuntos</li> <li>String</li> <li>Expresiones regulares</li> </ul>","tags":["Software"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/practica/PROG-U6.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/","title":"Apuntes de [Kotlin]","text":"<p>Kotlin es un lenguaje de programaci\u00f3n de c\u00f3digo abierto de tipo est\u00e1tico que se dirige a JVM, Android, JavaScript y Native. Est\u00e1 desarrollado por JetBrains. El proyecto se inici\u00f3 en 2010 y fue de c\u00f3digo abierto desde muy temprano. El primer lanzamiento oficial 1.0 fue en febrero de 2016.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#caracteristicas","title":"Caracter\u00edsticas","text":"<p>Un lenguaje de programaci\u00f3n se dise\u00f1a generalmente con un prop\u00f3sito espec\u00edfico en mente. Este prop\u00f3sito puede ser cualquier cosa, desde servir a un entorno espec\u00edfico (por ejemplo, la web) hasta un determinado paradigma (por ejemplo, la programaci\u00f3n funcional). En el caso de Kotlin el objetivo es construir un lenguaje productivo y pragm\u00e1tico, que tenga todas las caracter\u00edsticas que un desarrollador necesita y que sea f\u00e1cil de usar.</p> <p>Kotlin fue dise\u00f1ado inicialmente para trabajar con otros lenguajes de JVM, pero ahora ha evolucionado para ser mucho m\u00e1s: tambi\u00e9n funciona en el navegador y como una aplicaci\u00f3n nativa.</p> <p>Kotlin es multiparadigma, con soporte para paradigmas de programaci\u00f3n orientada a objetos, procedimentales y funcionales, sin forzar el uso de ninguno de ellos. Por ejemplo, a diferencia de Java, puede definir funciones de nivel superior, sin tener que declararlas dentro de una clase.</p> <ul> <li>100% interoperable con Java.</li> <li>100% compatible con Java 6..., por lo que puede crear aplicaciones para la mayor\u00eda de los dispositivos Android.</li> <li>Se ejecuta en la JVM, puede transpilarse (traducirse) a JavaScript e incluso puede ejecutarse de forma nativa, con interoperabilidad con las bibliotecas C y Objective-C (macOs e iOS).</li> <li>No hay necesidad de terminar las frases con punto y coma <code>;</code>. Los bloques de c\u00f3digo est\u00e1n delimitados por corchetes <code>{ }</code>.</li> <li>Soporte de primera clase para valores constantes y colecciones inmutables (ideal para programaci\u00f3n paralela y funcional).</li> <li>Las funciones pueden ser elementos de nivel superior (es decir, no hay necesidad de poner todo dentro de una clase).</li> <li>Las funciones son ciudadanos de primera clase: pueden transmitirse como cualquier otro tipo y utilizarse como argumento de las funciones. Lambda (es decir, funciones an\u00f3nimas) son muy compatibles con la biblioteca est\u00e1ndar.</li> <li>No hay una palabra clave <code>static</code>, sino que hay mejores alternativas.</li> <li>Clases de datos son clases especiales dise\u00f1adas para contener datos.</li> <li>Todo es una expresi\u00f3n: <code>if</code>, <code>for</code>, etc... Todos pueden devolver valores.</li> <li>La expresi\u00f3n <code>when</code> es como un interruptor con superpoderes.</li> </ul> <p>M\u00e1s informaci\u00f3n:</p> <p>https://kotlinlang.org/docs/reference/comparison-to-java.html https://kotlinlang.org/docs/reference/server-overview.html https://kotlinlang.org/docs/reference/evolution/kotlin-evolution.html</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#kotlin-en-linea-de-comandos","title":"Kotlin en l\u00ednea de comandos","text":"<ul> <li>Instalar el compilador desde l\u00ednea de comandos desde aqu\u00ed</li> <li>Compilar la aplicaci\u00f3n usando el compilador de Kotlin: <code>$ kotlinc name.kt -include-runtime -d name.jar</code></li> <li>Ejecutar el programa: <code>$ java -jar name.jar</code></li> <li>Ejecutar la consola 'REPL': <code>$ kotlinc-jvm</code></li> <li>Usar la l\u00ednea de comandos para ejecutar scripts (.kts): <code>$ kotlinc -script name.kts [params]</code></li> <li>Compilar una biblioteca sin la 'runtime' para ser usada en otros programas: <code>$ kotlinc name.kt -d name.jar</code></li> <li>Ejecutar binarios producidos por el compilador de Kotlin: <code>$ kotlin -classpath name.jar HelloKt (HelloKt is the main class name inside the file named name.kt)</code></li> </ul> <p>M\u00e1s informaci\u00f3n: https://kotlinlang.org/docs/command-line.html</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<p>El punto de entrada en un programa escrito en Kotlin (y en Java) es la funci\u00f3n <code>main(args: Array&lt;String&gt;)</code>. Esta funci\u00f3n recibe un array que contiene los argumentos de la l\u00ednea de comandos.</p> <pre><code>fun main(args: Array&lt;String&gt;) {\nprintln(\"Hello World!\")\n}\n</code></pre> <p>Aunque a partir de la versi\u00f3n <code>1.3</code> puedes declarar <code>main</code> sin ning\u00fan par\u00e1metro.</p> <pre><code>fun main() {\nprintln(\"Hello World!\")\n}\n</code></pre> <p>Las funciones y variables en Kotlin pueden declararse en un \"nivel superior\", es decir, no necesitan estar dentro de una clase, por tanto, directamente dentro de un paquete.</p> <p>Si un archivo Kotlin contiene una sola clase (potencialmente con declaraciones de nivel superior relacionadas), su nombre debe ser el mismo que el nombre de la clase, con la extensi\u00f3n '.kt'. Si un archivo contiene varias clases, o solo declaraciones de nivel superior, el nombre debe describir lo que contiene el archivo en formato 'UpperCamelCase' (e.g. <code>ProcessDeclarations.kt</code>)</p> <p>Kotlin sigue las convenciones de nomenclatura de Java. Los nombres de los paquetes se escriben siempre en min\u00fasculas y sin guiones bajos (e.g. <code>org.example.myproject</code>)</p> <p>Los nombres de las clases y los objetos se escriben en 'UpperCamelCase':</p> <pre><code>open class DeclarationProcessor { ... }\nobject EmptyDeclarationProcessor : DeclarationProcessor() { ... }\n</code></pre> <p>Los nombres de funciones, propiedades y variables locales en 'lowerCamelCase':</p> <pre><code>fun processDeclarations() { ... }\nvar declarationCount = ...\n</code></pre> <p>Los nombres de las constantes (propiedades marcadas con <code>const</code>) deben usar nombres en may\u00fasculas y separados por un gui\u00f3n bajo:</p> <pre><code>const val MAX_COUNT = 8\nval USER_NAME_FIELD = \"UserName\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#variables-y-tipos-basicos","title":"Variables y tipos b\u00e1sicos","text":"<p>https://kotlinlang.org/docs/basic-types.html#basic-types</p> <p>En Kotlin, todo es un objeto en el sentido de que podemos llamar funciones y propiedades de miembro en cualquier variable. Algunos de los tipos como los n\u00fameros, los caracteres o los booleanos pueden tener una representaci\u00f3n interna especial que se representa como valores primitivos en tiempo de ejecuci\u00f3n, pero para el usuario se comportan como clases ordinarias.</p> <p>La declaraci\u00f3n de valores se realiza utilizando <code>var</code> o <code>val</code>:</p> <ul> <li>Los valores constantes se declaran como <code>val</code> y son inmutables o 'read-only', es decir, que no se pueden reasignar.</li> <li>Las variables se declaran como <code>var</code> y son mutables, por lo que se le pueden asignar un nuevo valor pero \u00fanicamente del mismo tipo declarado.</li> </ul> <p>La recomendaci\u00f3n es crear valores constantes inmutables, que son m\u00e1s seguras en entornos 'multithreading' ya que no se pueden modificar y utilizar las variables mutables cuando sea necesario.</p> <p>Este soporte de primera clase para los valores constantes es importante por una raz\u00f3n: la programaci\u00f3n funcional. En la programaci\u00f3n funcional, el uso de los valores constantes permiten algunas optimizaciones que aumentan el rendimiento. Por ejemplo, los c\u00e1lculos pueden ser paralelos ya que existe una garant\u00eda de que el valor no cambiar\u00e1 entre dos ejecuciones paralelas, dado que no puede cambiar.</p> <pre><code>val fooVal = 10     // val es inmutable y no podr\u00e1 ser reutilizada\nval otherVal\notherVal = \"My Value\"   // Podemos declarar la variable 'val' en una l\u00ednea y asignarle valor posteriormente. Sigue siendo una sola asignaci\u00f3n.\nvar fooVar = 10\nfooVar = 20     // Se le puede asignar un nuevo valor pero \u00fanicamente del mismo tipo.\n</code></pre> <p>En la mayor\u00eda de los casos, Kotlin puede determinar o inferir cu\u00e1l es el tipo de una variable, por lo que no tenemos que especificarla expl\u00edcitamente. Cuando la variable no se inicialice deberemos indicar expl\u00edcitamente el tipo de la variable ya que Kotlin no puede inferir el tipo si no se inicializa.</p> <pre><code>val foo: Int = 7\nval bar = 10    // Kotlin infiere autom\u00e1ticamente el tipo\nval hello: String   // Si no se inicializa hay que especificar el tipo\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#numbers","title":"Numbers","text":"<p>https://kotlinlang.org/docs/numbers.html</p> <p>Kotlin proporciona los tipos <code>Byte</code>, <code>Short</code>, <code>Int</code> y <code>Long</code> para enteros.</p> <p></p> <p>Y los tipos <code>Float</code> y <code>Double</code> para n\u00fameros en coma flotante:</p> <p></p> <pre><code>val double: Double = 64.0   // 64 bits\nval float: Float = 32.0F // or 32f (32 bits)\nval long: Long = 64L    // 64 bits\nval int: Int = 32       // 32 bits\nval short: Short = 16   // 16 bits\nval byte: Byte = 8      // 8 bits\nval hexadecimal: Int = 0x16\nval binary: Int = 0b101\nval char: Char = 'a'\n</code></pre> <p>Todas las variables inicializadas con un entero no deben exceder el tama\u00f1o m\u00e1ximo de <code>Int</code> ya que Kotlin infiere el tipo <code>Int</code> si no se especifica expl\u00edcitamente el tipo o se a\u00f1ade el ap\u00e9ndice 'L' al valor. En el caso de n\u00fameros en coma flotante, Kotlin infiere el tipo <code>Double</code> si no se indica el tipo expl\u00edcitamente o se marca el valor en coma flotante con el ap\u00e9ndice 'F'.</p> <pre><code>val a = 1   // Kotlin infiere el tipo 'Int'\nval b = 1L  // Kotlin infiere el tipo 'Long'\nval c = 3.14    // Kotlin infiere el tipo 'Double'\nval d = 2.7123F  // Kotlin infiere el tipo 'Float'\n</code></pre> <p>A diferencia de Java, en Kotlin todos los tipos son objetos y por tanto no hay 'wrappers' u objetos envoltorio tipo <code>Integer</code>, <code>Double</code>, etc...</p> <p>Los guiones bajos se pueden utilizar para hacer que los n\u00fameros grandes sean m\u00e1s legibles:</p> <pre><code>val million = 1_000_000\n</code></pre> <p>La conversi\u00f3n debe ser invocada expl\u00edcitamente. Hay conversiones desde un tipo al resto de tipos:</p> <ul> <li><code>toByte()</code>: Byte</li> <li><code>toShort()</code>: Short</li> <li><code>toInt()</code>: Int</li> <li><code>toLong()</code>: Long</li> <li><code>toFloat()</code>: Float</li> <li><code>toDouble()</code>: Double</li> <li><code>toChar()</code>: Char</li> </ul> <pre><code>val otherLong = int.toLong()\nval direct = 25.toLong()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#characters","title":"Characters","text":"<p>https://kotlinlang.org/docs/characters.html</p> <p>Los caracteres no son n\u00fameros en Kotlin, a diferencia de Java. En Kotlin los caracteres se representan con el tipo <code>Char</code>:</p> <p>Los literales de car\u00e1cter se escriben con comillas simples como por ejemplo <code>'a'</code>. Los caracteres especiales se escapan con la barra invertida <code>'\\'</code>. Est\u00e1n soportadas las siguientes secuencias de escape: <code>\\t</code>, <code>\\b</code>, <code>\\n</code>, <code>\\r</code>, <code>\\'</code>, <code>\\\"</code>, <code>\\\\</code>, <code>\\$</code>. </p> <p>Podemos convertir de forma expl\u00edcitia un car\u00e1cter en un n\u00famero de tipo <code>Int</code>:</p> <pre><code>fun decimalDigitValue(c: Char): Int {\nif (c !in '0'..'9')\nthrow IllegalArgumentException(\"Out of range\")\nreturn c.toInt() - '0'.toInt() // Explicit conversions to numbers\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#strings","title":"Strings","text":"<p>https://kotlinlang.org/docs/strings.html</p> <p>Las cadenas son secuencias de caracteres inmutables y se representan con el tipo <code>String</code> de manera similar a Java. Las cadenas se crean usando las comillas dobles. El escapado de caracteres se hace con una barra invertida <code>'\\'</code>.</p> <pre><code>val fooString = \"My String Is Here!\"\nval barString = \"Printing on a new line?\\nNo Problem!\"\nval bazString = \"Do you want to add a tab?\\tNo Problem!\"\nprintln(fooString)\nprintln(barString)\nprintln(bazString)\nprintln(\"John Doe\"[2]) // =&gt; h\nprintln(\"John Doe\".startsWith(\"J\")) // =&gt; true\n</code></pre> <p>Se puede acceder a los elementos de una cadena como si fuera un array (e.g. <code>s[i]</code>) e iterar con un bucle tipo <code>for</code>:</p> <pre><code>for (c in str) {\nprintln(c)\n}\n</code></pre> <p>Se puede utilizar el operador <code>+</code> para concatenar cadenas entre s\u00ed y con valores de otro tipo siempre y cuando uno de los elementos de la expresi\u00f3n sea una cadena:</p> <pre><code>val s = \"abc\" + 1\nprintln(s + \"def\")\n</code></pre> <p>Una cadena sin formato o 'raw string' est\u00e1 delimitada por una comilla triple (\"\"\"). Las cadenas sin formato pueden contener nuevas l\u00edneas y cualquier otro car\u00e1cter. Estas cadenas sin formato tambi\u00e9n tiene soporte para las 'string templates':</p> <pre><code>val fooRawString = \"\"\"\nfun helloWorld(val name : String) {\n    println(\"Hello, world!\")\n}\nval hello = $who\nval result = ${2 + 2}\n\"\"\"\n</code></pre> <p>Con la funci\u00f3n <code>trimMargin()</code> podemos eliminar los espacios en blanco:</p> <pre><code>val text = \"\"\"\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#string-templates","title":"String templates","text":"<p>https://kotlinlang.org/docs/strings.html#string-templates</p> <p>Un literal de cadena puede contener expresiones de plantilla o 'template expressions', que son fragmentos de c\u00f3digo que ser\u00e1 evaluado y cuyo resultado ser\u00e1 concatenado en la cadena. Son una forma simple y efectiva de incrustar valores, variables o incluso expresiones dentro de una cadena.</p> <p>Una expresi\u00f3n de plantilla comienza con un signo de d\u00f3lar (<code>$</code>) y consisten en un nombre de una variable (por ejemplo <code>$i</code>) o en una expresi\u00f3n (como por ejemplo <code>${name.length}</code>) en cuyo caso se utilizan llaves (<code>{}</code>):</p> <pre><code>val name = \"John Doe\"\nprintln(\"$name has ${name.length} characters\") // =&gt; John Doe has 8 characters\nval age = 40\nprintln(\"You are ${if (age &gt; 60) \"old\" else \"young\"}\") // =&gt; You are young\n</code></pre> <p>Las plantillas son compatibles tanto dentro de cadenas sin procesar como dentro de cadenas escapadas. En caso de necesitar representar el literal del d\u00f3lar en una cadena sin escapar se utiliza esta sintaxis:</p> <pre><code>val price = \"\"\"\n${'$'}9.99\n\"\"\"\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#arrays","title":"Arrays","text":"<p>https://kotlinlang.org/docs/arrays.html</p> <p>Una matriz est\u00e1 representada por la clase <code>Array</code> y es invariante, por lo que, por ejemplo, no se puede asignar un <code>Array&lt;String&gt;</code> a un tipo de variable <code>Array&lt;Any&gt;</code>.</p> <p>En Kotlin, podemos crear una matriz de elementos del mismo tipo o de distinto tipo utilizando la funci\u00f3n de biblioteca <code>arrayOf()</code> y pas\u00e1ndole los elementos a a\u00f1adir:</p> <pre><code>val cardNames = arrayOf(\"Jack\", \"Queen\", \"King\", 3, false)\nprintln(cardNames[1])   // =&gt; Queen\n</code></pre> <p>Podemos forzar la creaci\u00f3n de arrays del mismo tipo. De esta forma el compilador comprobar\u00e1 el tipo de los elementos que se a\u00f1aden y evitar\u00e1 que se a\u00f1adan elementos de tipos no v\u00e1lidos:</p> <pre><code>val myArray = arrayOf&lt;Int&gt;(1, 2, 3, 4)\nprintln(myArray.contentToString()) // =&gt; [1, 2, 3, 4]\n</code></pre> <p>La biblioteca est\u00e1ndar de Kotlin provee funciones para crear arrays de tipos primitivos como <code>intArrayOf()</code>, <code>longArrayOf()</code>, <code>charArrayOf()</code>, <code>doubleArrayOf()</code>, etc... Cada una de estas funciones devuelven una instancia de su equivalente en Kotlin como <code>IntArray</code>, <code>LongArray</code>, <code>CharArray</code>, <code>DoubleArray</code>, etc...:</p> <pre><code>val cards = intArrayOf(10, 11, 12) // IntArray\nprintln(\"${cards[1]}\") // =&gt; 11\n</code></pre> <p>Para mejorar la eficiencia y rendimiento del c\u00f3digo, cuando se utilicen tipos primitivos hay que utilizar las funciones <code>intArrayOf()</code>, <code>longArrayOf()</code>, etc.. en vez de <code>arrayOf()</code> para as\u00ed evitar el coste asociado a las operaciones de 'boxing'/'unboxing'.</p> <p>Alternativamente, podemos crear una matriz a partir de un tama\u00f1o inicial y una funci\u00f3n, que se utiliza para generar cada elemento usando el constructor <code>Array()</code>:</p> <pre><code>val allCards = Array(12, { i -&gt; i + 1 })\nprintln(\"${allCards.first()} - ${allCards.last()}\") // =&gt; 1 - 12\n</code></pre> <p>Iterando sobre la matriz con <code>indices</code>:</p> <pre><code>for (index in cardNames.indices) {\nprintln(\"Element $index is ${cardNames[index]}\")\n}\n</code></pre> <p>Otra forma posible de iterar es usando la funci\u00f3n <code>withIndex()</code>:</p> <pre><code>for ((index, value) in cardNames.withIndex()) {\nprintln(\"$index - $value\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#packages","title":"Packages","text":"<p>https://kotlinlang.org/docs/packages.html</p> <p>La palabra clave <code>package</code> funciona de la misma manera que en Java. El nombre del paquete se usa para construir el \"Fully Qualified Name\" (FQN) de una clase, objeto, interfaz o funci\u00f3n.</p> <p>Todo el contenido (como clases y funciones) de un fichero fuente est\u00e1n contenidos en el paquete declarado. Los nombres de los paquetes se escriben en min\u00fascula y sin guiones bajos:</p> <pre><code>package com.example.kotlin\nclass MyClass { /*...*/ }\nfun saySomething(): String { /*...*/  }\n</code></pre> <p>En el ejemplo, el FQN de la clase ser\u00e1 <code>com.example.kotlin.MyClass</code>.</p> <p>Dado que podemos tener 'top-level functions' como la funci\u00f3n <code>saySomething()</code> del ejemplo, el FQN de esta funci\u00f3n ser\u00e1 <code>com.example.kotlin.saySomething</code>.</p> <p>Si no se especifica un paquete, el contenido del fichero fuente pertenece al paquete 'default'.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#imports","title":"Imports","text":"<p>https://kotlinlang.org/docs/packages.html#imports</p> <p>En Kotlin, usamos la declaraci\u00f3n de importaci\u00f3n para permitir que el compilador localice las clases e interfaces, propiedades, enumeraciones, funciones y objetos que se importar\u00e1n.</p> <p>En Java, por otro lado, solo est\u00e1 permitido importar clases o interfaces.</p> <pre><code>// 'Bar' esta disponible en el c\u00f3digo\nimport foo.Bar\n// Si existe cierta ambig\u00fcedad podemos usar la palabra clave 'as'\nimport foo.Bar\nimport bar.Bar as bBar\n// Todo el contenido de 'foo' est\u00e1 disponible\nimport foo.*\n</code></pre> <p>Por defecto, al igual que en Java, el compilador importa de forma impl\u00edcita una serie de paquetes y por tanto est\u00e1n disponibles de forma autom\u00e1tica:</p> <ul> <li>kotlin.*</li> <li>kotlin.annotation.*</li> <li>kotlin.collections.*</li> <li>kotlin.comparisons.*</li> <li>kotlin.io.*</li> <li>kotlin.ranges.*</li> <li>kotlin.sequences.*</li> <li>kotlin.text.*</li> </ul> <p>Additional packages are imported depending on the target platform:</p> <ul> <li>JVM:</li> <li>java.lang.*</li> <li>kotlin.jvm.*</li> <li>JS:</li> <li>kotlin.js.*</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#comentarios","title":"Comentarios","text":"<pre><code>// Single-line comments start with //\n/*\nMulti-line comments look like this.\n*/\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#control-de-flujo-y-bucles","title":"Control de flujo y bucles","text":"<p>https://kotlinlang.org/docs/control-flow.html#control-flow-if-when-for-while</p> <p>Kotlin tiene 4 construcciones de control de flujo: <code>if</code>, <code>when</code>, <code>for</code> y <code>while</code>.  <code>if</code> y <code>when</code> son expresiones, por lo que devuelven un valor; <code>for</code> y <code>when</code> son declaraciones, por lo que no devuelven un valor. <code>if</code> y <code>when</code> tambi\u00e9n se pueden utilizar como sentencias, es decir, se pueden utilizar de forma aut\u00f3noma y sin devolver un valor.</p> <p>Un bucle <code>for</code> puede usarse con cualquier elemento que proporcione un iterador como rangos, colecciones, etc...:</p> <pre><code>for (c in \"hello\") {\nprintln(c)\n}\nfor (i in 1..3) {\nprintln(i)\n}\nfor (i in 6 downTo 0 step 2) {\nprintln(i)\n}\n</code></pre> <p>Los bucles <code>while</code> y <code>do-while</code> funcionan de la misma manera que en otros lenguajes:</p> <pre><code>while (x &gt; 0) {\nx--\n}\ndo {\nval y = retrieveData()\n} while (y != null) // y is visible here!\n</code></pre> <p>La instrucci\u00f3n <code>if</code> y <code>if..else</code> funciona igual que en Java. Adem\u00e1s, en Kotlin los bloques <code>if</code> se pueden utilizar como una expresi\u00f3n que devuelve un valor. Por este motivo el operador ternario 'condition ? then: else' no es necesario en Kotlin:</p> <pre><code>// Traditional usage\nvar max = a\nif (a &lt; b) max = b\n// With else\nvar max: Int\nif (a &gt; b) {\nmax = a\n} else {\nmax = b\n}\n// As expression\nval max = if (a &gt; b) a else b\n// With blocks\n// returns a or 5\nvar top = if (a &gt; 5) {\nprintln(\"a is greater than 5\")\na\n} else {\nprintln(\"5 is greater than a\")\n5\n}\n</code></pre> <p>Los bloques <code>when</code> se pueden usar como una alternativa a las cadenas <code>if-else-if</code> o en substituci\u00f3n de los <code>switch</code>. Si no se proporciona ning\u00fan argumento, las condiciones de la rama son simplemente expresiones booleanas, y una rama se ejecuta cuando su condici\u00f3n es verdadera:</p> <pre><code>when {\nx.isOdd() -&gt; print(\"x is odd\")\nx.isEven() -&gt; print(\"x is even\")\nelse -&gt; print(\"x is funny\")\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede usar con un argumento. Si ninguna de las opciones coincide con el argumento, se ejecuta la opci\u00f3n del bloque <code>else</code>:</p> <pre><code>when (x) {\n1 -&gt; print(\"x == 1\")\n2 -&gt; print(\"x == 2\")\nelse -&gt; {\nprintln(\"none of the above\") // N\u00f3tese el uso de llaves para delimitar el bloque de c\u00f3digo\n}\n}\n</code></pre> <p>La instrucci\u00f3n <code>when</code> se puede utilizar como una expresi\u00f3n que devuelve un valor. En este caso el bloque <code>else</code> es obligatorio. De hecho, la \u00fanica excepci\u00f3n a esta regla es si el compilador puede garantizar que siempre devuelve un valor. Por lo tanto, si las ramas normales cubren todos los valores posibles, entonces no hay necesidad de una rama <code>else</code>:</p> <pre><code>val result = when (i) {\n0, 21 -&gt; \"0 or 21\"\nin 1..20 -&gt; \"in the range 1 to 20\"\nelse -&gt; \"none of the above\"\n}\nprintln(result)\nval check = true\nval result = when(check) {   // All results are covered\ntrue -&gt; println(\"it's true\")\nfalse -&gt; println(\"it's false\")\n}\n</code></pre> <p>Se pueden utilizar expresiones arbitrarias, y no solo constantes, como condiciones en los bloques:</p> <pre><code>when (x) {\nparseInt(s) -&gt; print(\"s encodes x\")\nelse -&gt; print(\"s does not encode x\")\n}\n</code></pre> <p>Si muchos casos deben manejarse de la misma manera, las condiciones de la rama pueden combinarse con una coma:</p> <pre><code>when (x) {\n0, 1 -&gt; print(\"x == 0 or x == 1\")\nelse -&gt; print(\"otherwise\")\n}\n</code></pre> <p>Tambi\u00e9n podemos verificar si un valor est\u00e1 dentro <code>in</code> o no est\u00e1 dentro <code>!in</code> de un rango o una colecci\u00f3n:</p> <pre><code>when (x) {\nin 1..10 -&gt; print(\"x is in the range\")\nin validNumbers -&gt; print(\"x is valid\")\n!in 10..20 -&gt; print(\"x is outside the range\")\nelse -&gt; print(\"none of the above\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#funciones","title":"Funciones","text":"<p>https://kotlinlang.org/docs/functions.html</p> <p>Las funciones se declaran usando la palabra clave <code>'fun'</code>. Los nombres de las funciones empiezan con min\u00fascula. Los par\u00e1metros de la funci\u00f3n se especifican entre par\u00e9ntesis despu\u00e9s del nombre de la funci\u00f3n y tienen la forma <code>'name: type'</code>. El tipo de cada par\u00e1metro debe especificarse expl\u00edcitamente y no puede omitirse.</p> <pre><code>fun powerOf(number: Int, exponent: Int) { ... }\n</code></pre> <p>Los par\u00e1metros de la funci\u00f3n pueden tener opcionalmente un valor por defecto, que se utilizar\u00e1 en caso de se omita el argumento al invocar la funci\u00f3n. El tipo de retorno de la funci\u00f3n, si es necesario, se especifica despu\u00e9s de los par\u00e1metros:</p> <pre><code>fun hello(name: String = \"world\"): String { // valor por defecto\nreturn \"Hello, $name!\"\n}\nhello(\"foo\") // =&gt; Hello, foo!\nhello(name = \"bar\") // =&gt; Hello, bar!\nhello() // =&gt; Hello, world!\nfun bye(bye: String = \"Bye\", name: String): String {\nreturn \"$bye, $name!!\"\n}\nbye(name = \"John\", bye = \"Good bye\") // =&gt; Good bye, John!!\nbye(name = \"John\") // =&gt; Bye, John!!\n</code></pre> <p>Si un par\u00e1metro por defecto precede a un par\u00e1metro sin valor predeterminado, el valor por defecto solo se puede usar llamando a la funci\u00f3n con argumentos con nombre:</p> <pre><code>fun foo(bar: Int = 0, baz: Int) { ... }\nfoo(baz = 1) // The default value bar = 0 is used\n</code></pre> <p>Dado que Java no admite valores de par\u00e1metros por defecto en los m\u00e9todos, deber\u00e1 especificar todos los valores de par\u00e1metros expl\u00edcitamente cuando llame a una funci\u00f3n de Kotlin desde Java. Kotlin nos proporciona la funcionalidad para facilitar las llamadas de Java al anotar la funci\u00f3n Kotlin con <code>'@JvmOverloads'</code>. Esta anotaci\u00f3n le indicar\u00e1 al compilador de Kotlin que genere las funciones sobrecargadas de Java para nosotros.</p> <pre><code>@JvmOverloads\nfun calCircumference(radius: Double, pi: Double = Math.PI): Double = (2 * pi) * radius\n// En Java\ndouble calCircumference(double radius, double pi);\ndouble calCircumference(double radius);\n</code></pre> <p>Cuando una funci\u00f3n no devuelve ning\u00fan valor significativo, su tipo de devoluci\u00f3n por defecto es <code>Unit</code>. En ese caso indicar el tipo de retorno es opcional. El tipo <code>Unit</code> es un objeto en Kotlin que es similar a los tipos <code>void</code> en Java y C.</p> <pre><code>fun hello(name: String): Unit {\nprint(\"Hello $name\")\n}\nfun sayHello(name: String) { // compila ya que el compilador infiere el tipo 'Unit'\nprint(\"Hello $name\")\n}\n</code></pre> <p>Los par\u00e1metros con nombre permiten c\u00f3digo m\u00e1s legible al nombrar los par\u00e1metros que se pasan a una funci\u00f3n cuando se invoca. Una vez que se utiliza un nombre en un par\u00e1metro, el resto de par\u00e1metros tambi\u00e9n deben asignarse con nombre:</p> <pre><code>fun area(width: Int, height: Int): Int {\nreturn width * height\n}\narea(10, 12)\narea(width = 10, height = 12) // c\u00f3digo m\u00e1s legible\narea(height = 12, width = 10) // podemos cambiar el orden\narea(10, height = 12) // argumento por posici\u00f3n y argumentos con nombre\narea(width = 10, 12) // \u00a1incorrecto! no se permiten argumentos con nombre antes de argumentos por posici\u00f3n\nfun bar(k: Int, m: Long = 1L, j: Boolean = true) = println(\"$k - $m - $j\")\n// Una vez que un par\u00e1metro ha sido nombrado, todos los siguientes par\u00e1metros deben ser nombrados\nbar(10) // =&gt; Se omiten los par\u00e1mentros por defecto\nbar(15, 30L)\nbar(20, 2L, true)\nbar(m = 30L, j = false, k = 10)\nbar(k = 10, m = 20L, j = true)\nbar(5, m = 2L, j = true)\nbar(6, 1L, j = true)\n</code></pre> <p>Cuando se invoca una funci\u00f3n con argumentos posicionales y con nombre, todos los argumentos posicionales deben colocarse antes del primero argumento con nombre. Por ejemplo, la llamada <code>f(1, y = 2)</code> est\u00e1 permitida, pero <code>f(x = 1, 2)</code> no est\u00e1 permitida.</p> <p>Para pasar un n\u00famero variable de argumentos a una funci\u00f3n podemos usar la palabra clave <code>'vararg'</code> delante del nombre de una variable. Por tanto la funci\u00f3n aceptar\u00e1 una lista de par\u00e1metros separados por comas que el compilador envolver\u00e1 en una array. Por tanto, dentro de la funci\u00f3n accederemos a los par\u00e1metros mediante la notaci\u00f3n de array.</p> <p>Este tipo de par\u00e1metros se puede combinar con otros par\u00e1metros. Normalmente el par\u00e1metro <code>'vararg'</code> ser\u00e1 el \u00faltimo de la lista. Si hay otros par\u00e1metros despu\u00e9s de <code>'vararg'</code>, deber\u00e1n usarse par\u00e1metros con nombre:</p> <pre><code>fun varargExample(vararg names: Int) {\nprintln(\"Argument has ${names.size} elements\")\n}\nvarargExample() // =&gt; Argument has 0 elements\nvarargExample(1) // =&gt; Argument has 1 elements\nvarargExample(1, 2, 3) // =&gt; Argument has 3 elements\nfun car(vararg model: String, year: Int) {}\ncar(\"Audi\", \"A6\", year = 2005) // par\u00e1metros con nombre despu\u00e9s de 'vararg'\n</code></pre> <p>Para utilizar un array para suministrar un n\u00famero variable de argumentos se utiliza el operador <code>'*'</code> tambi\u00e9n llamado 'spread operator' delante del nombre de la variable del array:</p> <pre><code>val intArray = intArrayOf(1, 2, 3, 4)\nval array = Array(5, { i -&gt; i + 1 })\nvarargExample(*intArray) // =&gt; Argument has 4 elements\nvarargExample(*array.toIntArray()) // =&gt; Argument has 5 elements\n</code></pre> <p>Cuando una funci\u00f3n consiste en una sola expresi\u00f3n, se pueden omitir los par\u00e9ntesis. El cuerpo se especifica despu\u00e9s de un s\u00edmbolo <code>'='</code>:</p> <pre><code>fun odd(x: Int): Boolean = x % 2 == 1\n</code></pre> <p>Declarar expl\u00edcitamente el tipo de retorno de una funci\u00f3n cuando es una expresi\u00f3n es opcional cuando puede ser inferido por el compilador o cuando el tipo de retorno es <code>'Unit'</code>. Cuando el cuerpo de una funci\u00f3n es un bloque hay que especificar el tipo de retorno ya que el compilador no puede inferirlo:</p> <pre><code>fun even(x: Int) = x % 2 == 0  // Optional\nfun printHello(name: String?) { // 'Unit'\nif (name != null)\nprintln(\"Hello ${name}\")\nelse\nprintln(\"Hi there!\")\n// `return Unit` or `return` is optional\n}\n</code></pre> <p>A veces queremos devolver m\u00faltiples valores desde una funci\u00f3n. Una forma es usar el tipo <code>'Pair'</code> de Kotlin. Esta estructura incluye dos valores a los que luego se puede acceder. Este tipo de Kotlin puede aceptar cualquier tipo que suministre a su constructor. Y, lo que es m\u00e1s, los dos tipos ni siquiera necesitan ser iguales. Kotlin tambi\u00e9n provee el tipo <code>'Triple'</code> que retorna tres valores:</p> <pre><code>fun getNumbers(num: Int): Pair&lt;Int?, Int?&gt; {\nrequire(num &gt; 0, { \"Error: num is less than 0\" })\nreturn Pair(num, num * 2)\n}\nval(num, num2) = getNumbers(10) // destructuring\n</code></pre> <p>En Kotlin, podemos hacer que la creaci\u00f3n de una instancia 'Pair' sea m\u00e1s compacta y legible utilizando la funci\u00f3n 'to', que es una funci\u00f3n 'infix' en lugar del constructor de 'Pair'.</p> <pre><code>val nigeriaCallingCodePair = 234 to \"Nigeria\"\nval nigeriaCallingCodePair2 = Pair(234, \"Nigeria\") // Same as above\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#extension-functions","title":"Extension functions","text":"<p>Las 'extension functions' son una forma de agregar nuevas funcionalidades a una clase sin tener que heredar de dicha clase. Esto es similar a los m\u00e9todos de extensi\u00f3n de C#. Una funci\u00f3n de extensi\u00f3n se declara fuera de la clase que quiere extender. En otras palabras, tambi\u00e9n es una 'top-level function'. Junto con las funciones de extensi\u00f3n, Kotlin tambi\u00e9n admite propiedades de extensi\u00f3n.</p> <p>Para crear una 'extension function', debe prefijar el nombre de la clase que est\u00e1 extendiendo antes del nombre de la funci\u00f3n. El nombre de la clase o el tipo en el que se define la extensi\u00f3n se denomina tipo de receptor, y el objeto receptor es la instancia de clase o el valor concreto sobre el que se llama a la funci\u00f3n de extensi\u00f3n.</p> <pre><code>fun String.remove(c: Char): String {  // 'String' es el tipo receptor\nreturn this.filter { it != c }     // 'this' corresponde al objeto receptor\n}\nprintln(\"Hello, world!\".remove('l')) // =&gt; Heo, word!  // \"Hello World\" es el objeto receptor\n</code></pre> <p>En caso de que una 'extension function' tenga la misma firma (mismo nombre y misma lista de par\u00e1metros) que una funci\u00f3n miembro, es decir, una funci\u00f3n de la clase, el compilador invocar\u00e1 antes la funci\u00f3n miembro que la funci\u00f3n de extensi\u00f3n aunque no se generar\u00e1 ning\u00fan error de compilaci\u00f3n:</p> <pre><code>class C {\nfun foo() { println(\"member\") }\n}\nfun C.foo() {\nprintln(\"extension\")\n}\nfun C.foo(i: Int) {\nprintln(\"extension &amp; overrided\")\n}\nC().foo() // =&gt; member\nC().foo(5) // =&gt; extension &amp; overrided\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#top-level-functions","title":"Top-level functions","text":"<p>Las funciones de nivel superior son funciones que se definen fuera de cualquier clase, objeto o interfaz. Esto significa que son funciones a las que llama directamente, sin la necesidad de crear ning\u00fan objeto o llamar a ninguna clase. Dado que Java no soporta este tipo de funciones el compilador de Kotlin genera una clase con m\u00e9todos est\u00e1ticos. Este tipo de funciones son especialmente \u00fatiles para crear funciones de utilidad o de ayuda.</p> <pre><code>// Code defined inside a file called 'UserUtils.kt'\n@file:JvmName(\"UserUtils\")\npackage com.example.project.utils\nfun checkUserStatus(): String {\nreturn \"online\"\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#high-order-functions","title":"High-Order Functions","text":"<p>Las funciones en Kotlin son de primera clase, lo que significa que pueden ser almacenadas en variables y estructuras de datos, pasadas como argumentos y devueltas desde otras funciones de orden superior. Puede operar con funciones de cualquier manera que sea posible para otros valores no funcionales.</p> <p>Para facilitar esto, Kotlin, como lenguaje de programaci\u00f3n est\u00e1ticamente tipado, utiliza una familia de tipos de funci\u00f3n para representar funciones y proporciona un conjunto de construcciones de lenguaje especializadas, tales como expresiones lambda.</p> <p>Una 'high-order function' o funci\u00f3n de orden superior es una funci\u00f3n que puede tomar funciones como par\u00e1metros y/o devolver una funci\u00f3n como tipo de retorno.</p> <pre><code>// Funci\u00f3n con dos par\u00e1metros, el segundo de ellos es una funci\u00f3n\nfun foo(str: String, fn: (String) -&gt; String): Unit {\nval applied = fn(str)\nprintln(applied)\n}\nfoo(\"Hello\", { it.reversed() }) // =&gt; olleH\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n\nfun isPositive(n: Int): (Int) -&gt; Boolean {\nreturn { n &gt; 0 } // return a function. Instead 'return value' we have 'return { function }'\n}\n// Esta funci\u00f3n de orden superior devuelve una funci\u00f3n de forma m\u00e1s compacta\nfun modulo(k: Int): (Int) -&gt; Boolean = { it % k == 0 }\n// fun modulo(k: Int): (Int) -&gt; Boolean = { n:Int -&gt; n % k == 0 } //igual que la definici\u00f3n de arriba.  \nval evens = listOf(1, 2, 3, 4, 5, 6).filter(modulo(2)) // =&gt; [2, 4, 6]\n// Asignar la funci\u00f3n a una variable\nval isEven: (Int) -&gt; Boolean = modulo(2)\nlistOf(1, 2, 3, 4).filter(isEven) // =&gt; [2, 4]\nlistOf(5, 6, 7, 8).filter(isEven) // =&gt; [6, 8]\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#functions-types-lambdas","title":"Functions types &amp; Lambdas","text":"<p>Un tipo funci\u00f3n es un tipo que consta de una firma de funci\u00f3n, es decir, dos par\u00e9ntesis que contiene la lista de par\u00e1metros (que son opcionales) y un tipo de retorno. Ambas partes est\u00e1n separadas por el operador <code>'-&gt;'</code>.</p> <p>Cuando se define un tipo funci\u00f3n, siempre se debe indicar expl\u00edcitamente el tipo de retorno. Cuando se declaran funciones normales que devuelven <code>Unit</code>, se puede omitir el tipo de retorno ya que el compilador lo infiere, pero no se puede omitir en los tipos funci\u00f3n. Adem\u00e1s, debe poner los par\u00e9ntesis para los par\u00e1metros, incluso cuando el tipo funci\u00f3n no acepta ning\u00fan par\u00e1metro.</p> <pre><code>fun executor(action:() -&gt; Unit) {\naction()\n}\n// 'action' es el nombre del par\u00e1metro y su tipo es '() -&gt; Unit' que es una funci\u00f3n.\n// Por tanto el tipo de 'action' es un tipo funci\u00f3n.\n</code></pre> <ul> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve 'Unit': <code>() -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que no toma par\u00e1metros y devuelve un String: <code>() -&gt; String</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma un String y no devuelve nada: <code>(String) -&gt; Unit</code></li> <li>Ejemplo de un tipo funci\u00f3n que toma dos par\u00e1metros y no devuelve nada: <code>(String, Float) -&gt; Unit</code></li> </ul> <p>Debido a que un tipo funci\u00f3n es solo un tipo, significa que puede asignar una funci\u00f3n a una variable, puede pasarla como un argumento a otra funci\u00f3n o puede devolverla desde una funci\u00f3n tal y como suceden en las `high-order functions':</p> <pre><code>val saySomething: (String) -&gt; Unit = { x -&gt; println(x) }\nsaySomething(\"Good morning\") // =&gt; Good morning\n</code></pre> <p>Una forma de instanciar una funci\u00f3n tipo es usando el operador <code>'::'</code>. Tambi\u00e9n podemos usar este operardor para pasar un tipo funci\u00f3n como par\u00e1metro de otra funci\u00f3n especificando su nombre con el operador y sin utilizar los par\u00e9ntesis:</p> <pre><code>fun businessEmail(s: String): Boolean {\nreturn s.contains(\"@\") &amp;&amp; s.contains(\"business.com\")\n}\nisAnEmail(::businessEmail) // Invocar una 'high-order function' pas\u00e1ndole otra funci\u00f3n por su nombre\nfun tell(text: String) {\nprintln(text)\n}\nvar saySomething: (String) -&gt; Unit // La variable 'saySomething' es una variable de tipo funci\u00f3n\nsaySomething = ::tell // instanciar el tipo funci\u00f3n y asignarlo a la variable 'saySomething'\nsaySomething(\"Hello\") //=&gt; Hello\n</code></pre> <p>En particular, una lambda es una funci\u00f3n literal: una funci\u00f3n an\u00f3nima que no se declara pero se usa directamente como una expresi\u00f3n.</p> <p>B\u00e1sicamente, una lambda es un bloque de c\u00f3digo que se puede pasar como cualquier otro literal (por ejemplo, simplemente como una cadena literal <code>\"una cadena\"</code>). La combinaci\u00f3n de estas caracter\u00edsticas permite a Kotlin soportar la programaci\u00f3n funcional b\u00e1sica.</p> <p>En el ejemplo una variable 'sum' de tipo funci\u00f3n y a la que le asignamos directamente una funci\u00f3n 'lambda' con dos par\u00e1metros:</p> <pre><code>// Asignando una funci\u00f3n 'lambda'\nval sum: (Int, Int) -&gt; Int = { x, y -&gt; x + y }\nsum(10, 20) // =&gt; 30\n// Equivalente usando el operador '::'\nfun operation(x: Int, y: Int): Int {\nreturn x + y\n}\nval sum: (Int, Int) -&gt; Int = ::operation\nsum(10, 20) // =&gt; 30\n</code></pre> <p>En Kotlin, por convenci\u00f3n si una funci\u00f3n 'lambda' tiene solo un par\u00e1metro, su declaraci\u00f3n puede omitirse (junto con -&gt;). El nombre del \u00fanico par\u00e1metro ser\u00e1 <code>'it'</code>.</p> <pre><code>val isNegative: (Int) -&gt; Boolean = { it &lt; 0 } // este literal es del tipo '(it: Int) -&gt; Boolean'\nisNegative(-5) // =&gt; true\n</code></pre> <p>Otra convenci\u00f3n es que si el \u00faltimo par\u00e1metro de una funci\u00f3n acepta una funci\u00f3n, una expresi\u00f3n 'lambda' que es pasada como el argumento correspondiente se puede colocar fuera de los par\u00e9ntesis:</p> <pre><code>// lambda expression inside parentheses\nval upperCaseLetters = \"Hello World\".filter({ it.isUpperCase() })\n// lambda outside parentheses\nval lowerCaseLetters = \"Hello World\".filter { it.isLowerCase() }\nprintln(\"$upperCaseLetters - $lowerCaseLetters\") // =&gt; HW - elloorld\n</code></pre> <p>El siguiente ejemplo tenemos una funci\u00f3n de orden superior que acepta una funci\u00f3n lambda <code>{ (String) -&gt; Boolean }</code> como par\u00e1metro. Se expresa como \"acepta una funci\u00f3n 'from String to Boolean'\":</p> <pre><code>// El par\u00e1metro 'email' podemos usarlo como una funci\u00f3n que acepta una cadena y devuelve un booleano.\nfun isAnEmail(email: (String) -&gt; Boolean) {\nemail(\"myemail@example.com\")\n}\nisAnEmail({ s: String -&gt; s.contains(\"@\") }) // forma completa\nisAnEmail { s: String -&gt; s.contains(\"@\") } // Los par\u00e9ntesis son opcionales\nisAnEmail { it.contains(\"@\") } // Uso de 'it'\n</code></pre> <p>Para par\u00e1metros no utilizados se utiliza el operador <code>'_'</code>:</p> <pre><code>val unusedSecondParam: (String, Int) -&gt; Boolean = { s, _ -&gt;\ns.length &gt; 10\n}\nunusedSecondParam(\"Hello World\", 0) // 0 is unused\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#anonymous-functions","title":"Anonymous functions","text":"<p>Una funci\u00f3n an\u00f3nima se parece mucho a una declaraci\u00f3n de funci\u00f3n normal, excepto que se omite su nombre. Su cuerpo puede ser una expresi\u00f3n o un bloque:</p> <pre><code>// Funci\u00f3n an\u00f3nima cuyo cuerpo es una expresi\u00f3n\nfun(x: Int, y: Int): Int = x + y\n// Funci\u00f3n an\u00f3nima con bloque\nfun(x: Int, y: Int): Int {\nreturn x + y\n}\n</code></pre> <p>El tipo de los par\u00e1metros de una funci\u00f3n an\u00f3nima pueden omitirse si se pueden inferir por el contexto:</p> <pre><code>ints.filter(fun(item) = item &gt; 0)\n</code></pre> <p>La inferencia de tipo de retorno para funciones an\u00f3nimas funciona igual que para las funciones normales: el tipo de retorno se deduce autom\u00e1ticamente para funciones an\u00f3nimas con un cuerpo de expresi\u00f3n y debe especificarse expl\u00edcitamente (o se supone que es <code>'Unit'</code>) para funciones an\u00f3nimas con un cuerpo de bloque.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#closures","title":"Closures","text":"<p>Un 'closure' es una funci\u00f3n que tiene acceso a variables y par\u00e1metros que se definen en un \u00e1mbito externo. A diferencia de Java, las variables 'capturadas' pueden ser modificadas.</p> <pre><code>fun printFilteredNamesByLength(length: Int) {\nval names = arrayListOf(\"Adam\", \"Andrew\", \"Chike\", \"Kechi\")\nval filterResult = names.filter {\nit.length == length     // 'length' se define fuera del \u00e1mbito de la lambda\n}\nprintln(filterResult)\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#local-or-nested-functions","title":"Local or Nested Functions","text":"<p>Para llevar m\u00e1s lejos la modularizaci\u00f3n de programas, Kotlin nos proporciona funciones locales, tambi\u00e9n conocidas como funciones anidadas o 'nested functions'. Una funci\u00f3n local es una funci\u00f3n que se declara dentro de otra funci\u00f3n.</p> <p>Podemos hacer que nuestras funciones locales sean m\u00e1s concisas al no pasarles par\u00e1metros expl\u00edcitamente. Esto es posible porque las funciones locales tienen acceso a todos los par\u00e1metros y variables de la funci\u00f3n de cierre.</p> <pre><code>fun printCircumferenceAndArea(radius: Double): Unit {\nfun calCircumference(radius: Double): Double = (2 * Math.PI) * radius\nval circumference = \"%.2f\".format(calCircumference(radius))\nfun calArea(radius: Double): Double = (Math.PI) * Math.pow(radius, 2.0)\nval area = \"%.2f\".format(calArea(radius))\nprint(\"The circle circumference of $radius radius is $circumference and area is $area\")\n}\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#infix-functions","title":"Infix Functions","text":"<p>Las funciones marcadas con la palabra clave <code>'infix'</code> se pueden llamar usando la notaci\u00f3n 'infix' (omitiendo el punto y los par\u00e9ntesis para la llamada). Estas funciones deben cumplir los siguientes requisitos:</p> <ul> <li>Tienen que ser miembros de una clase o funciones de extensi\u00f3n</li> <li>Deben tener un solo par\u00e1metro</li> <li>Este par\u00e1metro no ser\u00e1 <code>'vararg'</code> ni tener valor por defecto</li> </ul> <p>Para invocar una funci\u00f3n <code>'infix'</code> en Kotlin no necesitamos usar la notaci\u00f3n de puntos ni los par\u00e9ntesis. Hay que tener en cuenta que las funciones <code>'infix'</code> siempre requieren que se especifiquen tanto el receptor como el par\u00e1metro. Cuando se invoca un m\u00e9todo en el receptor actual, como por ejemplo dentro de la clase, se necesita usar explicitamente la notaci\u00f3n <code>'this'</code>. A diferencia de las llamadas a m\u00e9todos regulares, no se puede omitir.</p> <pre><code>class Student {\nvar kotlinScore = 0.0\ninfix fun addKotlinScore(score: Double): Unit {\nthis.kotlinScore = kotlinScore + score\n}\nfun build() {\nthis addKotlinScore 95.0   // Correcto\naddKotlinScore(95.0)       // Correcto\naddKotlinScore 95.0        // Incorrectp: hay que especificar el receptor ('this')\n}\n}\nval student = Student()\nstudent addKotlinScore 95.00 // Invocando la funci\u00f3n usando la notaci\u00f3n 'infix'\nstudent.addKotlinScore(95) // Invocando la funci\u00f3n con notaci\u00f3n normal\n</code></pre>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#inline-functions","title":"Inline functions","text":"<p>El compilador de Kotlin crea una clase an\u00f3nima en versiones anteriores de Java cuando creamos o utilizamos expresiones lambda. Esto genera una sobrecarga, adem\u00e1s de la carga de memoria que se genera cuando en una funci\u00f3n lambda hace uso de variables de fuera de su entorno como en las 'closures'.</p> <p>Para evitar esta sobrecarga tenemos el modificador <code>'inline'</code> para las funciones. Una 'High-Order function' con el modificador <code>'inline'</code> se integrar\u00e1 durante la compilaci\u00f3n del c\u00f3digo. En otras palabras, el compilador copiar\u00e1 la 'lambda' (o funci\u00f3n literal) y tambi\u00e9n el cuerpo de la funci\u00f3n de orden superior y los pegar\u00e1 en el sitio de la llamada.</p> <p>Con este mecanismo, nuestro c\u00f3digo se ha optimizado significativamente, no m\u00e1s creaci\u00f3n de clases an\u00f3nimas o asignaciones de memoria extra. Por otro lado el uso de <code>'inline'</code> hace que el compilador genere ficheros bytecode m\u00e1s grandes. Por esta raz\u00f3n, se recomienda encarecidamente que solo se incluyan funciones de orden superior m\u00e1s peque\u00f1as que acepten lambda como par\u00e1metros.</p>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#reference","title":"Reference","text":"<ul> <li>https://kotlinlang.org/docs/reference/</li> <li>https://code.tutsplus.com/series/kotlin-from-scratch--cms-1209</li> <li>https://www.packtpub.com/application-development/programming-kotlin</li> <li>https://learnxinyminutes.com/docs/kotlin/</li> <li>https://gist.github.com/dodyg/5823184</li> <li>https://gist.github.com/dodyg/5616605</li> <li>https://github.com/Zhuinden/guide-to-kotlin</li> <li>https://superkotlin.com/kotlin-mega-tutorial/</li> <li>https://revilofe.github.io/IESRA-DAM-Prog/#/</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de kotlin</li> <li>Kotlinlang</li> </ul>","tags":["Software","kotlin"]},{"location":"section1/u06/teoria/PROG-U6.1.-xxxx/#license","title":"License","text":"<p> Esta obra est\u00e1 bajo una licencia de Creative Commons Reconocimiento-Compartir Igual 4.0 Internacional.</p>","tags":["Software","kotlin"]},{"location":"section1/u07/","title":"UD 7 - Interfaces texto y gr\u00e1fica. Entrada/Salida","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software"]},{"location":"section1/u07/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software"]},{"location":"section1/u07/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA5. Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases.</p>","tags":["Software"]},{"location":"section1/u07/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha utilizado la consola para realizar operaciones de entrada y salida de informaci\u00f3n.   </li> <li>b) Se han aplicado formatos en la visualizaci\u00f3n de la informaci\u00f3n.   </li> <li>c) Se han reconocido las posibilidades de entrada/salida del lenguaje y las librer\u00edas asociadas.   </li> <li>d) Se han utilizado ficheros para almacenar y recuperar informaci\u00f3n.   </li> <li>e) Se han creado programas que utilicen diversos m\u00e9todos de acceso al contenido de los ficheros   </li> <li>f) Se han utilizado las herramientas del entorno de desarrollo para crear interfaces gr\u00e1ficos de usuario simples.   </li> <li>g) Se han programado controladores de eventos.    </li> <li>h) Se han escrito programas que utilicen interfaces gr\u00e1ficos para la entrada y salida de informaci\u00f3n.    </li> </ul>","tags":["Software"]},{"location":"section1/u07/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque X</p> <ul> <li>U7: Entrada/Salida </li> </ul> <p>En la Unidad 7, veremos:   </p> <ol> <li>Fundamentos de sistema de archivos.      1.1. Archivos (Texto, Binarios)      1.2. Directorios.      1.3. Flujos de E/S (Texto, Bytes)   </li> <li>La consola y el teclado (RA5.a, b)      2.1. Escribir por consola     2.2. Lectura desde teclado       2.3. Formato a la informaci\u00f3n. (Scanner &amp; println)</li> <li>API para trabajar con ficheros (RA5.c)   </li> <li>Trabajar con ficheros (RA5.d, e)       4.1. Texto       4.2. Binarios   </li> </ol>","tags":["Software"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/practica/PROG-U7.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/","title":"UD 7 - 7.1 Sistemas de archivos","text":"","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#sistema-de-archivos","title":"Sistema de archivos","text":"<p>La principal funci\u00f3n de una aplicaci\u00f3n inform\u00e1tica es la manipulaci\u00f3n y transformaci\u00f3n de datos. Estos datos pueden  representar cosas muy diferentes seg\u00fan el contexto del programa: notas de estudiantes, una recopilaci\u00f3n de temperaturas, las fechas de un calendario, etc. Las posibilidades son ilimitadas. Todas estas tareas de manipulaci\u00f3n y transformaci\u00f3n se llevan a cabo normalmente mediante el almacenamiento de los datos en variables, dentro de la memoria del ordenador, por lo que se pueden aplicar operaciones, ya sea mediante operadores o la invocaci\u00f3n de m\u00e9todos.</p> <p></p> <p>Desgraciadamente, todas estas variables solo tienen vigencia mientras el programa se est\u00e1 ejecutando. Una vez el programa finaliza, los datos que contienen desaparecen. Esto no es problema para programas que siempre tratan los mismos datos, que pueden tomar la forma de literales dentro del programa. O cuando el n\u00famero de datos a tratar es peque\u00f1o y se puede preguntar al usuario. Ahora bien, imag\u00ednense tener que introducir las notas de todos los estudiantes cada vez que se ejecuta el programa para gestionarlas. No tiene ning\u00fan sentido. Por tanto, en algunos casos, aparece la necesidad de poder registrar los datos en alg\u00fan soporte de memoria externa, por lo que estas se mantengan de manera persistente entre diferentes ejecuciones del programa, o incluso si se apaga el ordenador.</p> <p>La manera m\u00e1s sencilla de lograr este objetivo es almacenar la informaci\u00f3n aprovechando el sistema de archivos que ofrece el sistema operativo. Mediante este mecanismo, es posible tener los datos en un formato f\u00e1cil de manejar e independiente del soporte real, ya sea un soporte magn\u00e9tico como un disco duro, una memoria de estado s\u00f3lido, como un l\u00e1piz de memoria USB, un soporte \u00f3ptico, cinta, etc.</p> <p>En esta unidad did\u00e1ctica se explican distintas clases de Kotlin que nos permiten crear, leer, escribir y eliminar ficheros y directorios, entre otras operaciones. Tambi\u00e9n se introduce la serializaci\u00f3n de objetos como mecanismo de gran utilidad para almacenar objetos en ficheros para luego recuperarlos en tiempo de ejecuci\u00f3n.</p>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#gestion-de-archivos","title":"Gesti\u00f3n de archivos","text":"<p>Entre las funciones de un sistema operativo est\u00e1 la de ofrecer mecanismos gen\u00e9ricos para gestionar sistemas de archivos. Normalmente, dentro de un sistema operativo moderno (o ya no tanto moderno), se espera disponer de alg\u00fan tipo de interfaz o explorador para poder gestionar archivos, ya sea gr\u00e1ficamente o usando una l\u00ednea de comandos de texto. Si bien la forma en que los datos se guardan realmente en los dispositivos f\u00edsicos de almacenamiento de datos puede ser muy diferente seg\u00fan cada tipo (magn\u00e9tico, \u00f3ptico, etc.), la manera de gestionar el sistema de archivos suele ser muy similar en la inmensa mayor\u00eda de los casos: una estructura jer\u00e1rquica con carpetas y ficheros.</p> <p>Ahora bien, en realidad, la capacidad de operar con el sistema de archivos no es exclusiva de la interfaz ofrecida por el sistema operativo. Muchos lenguajes de programaci\u00f3n proporcionan bibliotecas que permiten acceder directamente a los mecanismos internos que ofrece el sistema, por lo que es posible crear c\u00f3digo fuente desde el que, con las instrucciones adecuadas, se pueden realizar operaciones t\u00edpicas de un explorador de archivos. De hecho, las interfaces como un explorador de archivos son un programa como cualquier otro, el cual, usando precisamente estas librer\u00edas, permite que el usuario gestione archivos f\u00e1cilmente. Pero es habitual encontrar otras aplicaciones con su propia interfaz para gestionar archivos, aunque solo sea para poder seleccionar qu\u00e9 hay que cargar o guardar en un momento dado: editores de texto, compresores, reproductores de m\u00fasica, etc.</p>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#flujos","title":"Flujos","text":"<p>En Kotlin, heredado de Java, se define la abstracci\u00f3n de stream (flujo) para tratar la comunicaci\u00f3n de informaci\u00f3n entre el programa y el exterior.</p> <p></p> <p>Las caracter\u00edsticas principales:  - Entre una fuente y un destino fluye una secuencia de datos  - Los flujos act\u00faan como interfaz con el dispositivo o clase asociada  - Las operaciones que se realizan son independientes del tipo de datos y del dispositivo - El uso de flujos proporciona mayor flexibilidad (p.e. redirecci\u00f3n, combinaci\u00f3n) - El uso de flujos proporciona mayor diversidad de dispositivos (fichero, pantalla, teclado, red, \u2026)  - El uso de flujos proporciona mayor diversidad de formas de comunicaci\u00f3n  - El uso de flujos proporciona modos de acceso: secuencial, aleatorio - El uso de flujos proporciona intercambio de informaci\u00f3n : binaria, caracteres, l\u00edneas.</p> <p>Como en los sistemas Unix, existen 3 interfaces b\u00e1sicas para leer/escribir informaci\u00f3n:</p> <p></p> <ul> <li>Entrada est\u00e1ndar - habitualmente el teclado   </li> <li>Salida est\u00e1ndar - habitualmente la consola   </li> <li>Salida de error - habitualmente la consola   </li> </ul> <p>En Java se accede a la E/S est\u00e1ndar a trav\u00e9s de campos est\u00e1ticos de la clase <code>java.lang.System</code></p> <ul> <li><code>System.in</code> implementa la entrada est\u00e1ndar    </li> <li><code>System.out</code> implementa la salida est\u00e1ndar    </li> <li><code>System.err</code> implementa la salida de error    </li> </ul>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#apis","title":"APIs","text":"<p>Kotlin no es ninguna excepci\u00f3n ofreciendo este tipo de biblioteca, en forma del conjunto de clases incluidas dentro del <code>Package kotlin.io</code> (IO API for working with files and streams) Y en java, lo podemos encontrar en <code>package java.io</code>. Mediante la invocaci\u00f3n de los m\u00e9todos adecuados definidos de estas clases es posible llevar a cabo pr\u00e1cticamente cualquier tarea sobre el sistema de archivos.</p>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.1.-SistemaArchivos/#fuente","title":"Fuente","text":"<ul> <li>Entra y salida</li> </ul>","tags":["Software","Cadenas"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/","title":"UD 7 - 7.2 Consola y teclado","text":"","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#lectura-y-escritura-en-entrada-y-salida-estandar","title":"Lectura y escritura en entrada y salida est\u00e1ndar","text":"<p>Dentro de la biblioteca est\u00e1ndar de Kotlin, el paquete <code>kotlin.io</code> proporciona elementos esenciales para trabajar con los flujos de entrada y salida est\u00e1ndar (Input/Output o I/O). Esta transmisi\u00f3n de informaci\u00f3n entre la memoria principal y los dispositivos de entrada y salida permite, entre otras cosas, leer y escribir datos.</p> <p>Vamos a ver c\u00f3mo se transfieren datos de entrada y salida en consola (el paquete <code>kotlin.io</code> tambi\u00e9n proporciona herramientas para trabajar con archivos, como veremos mas adelante), lo que es \u00fatil para mostrar una informaci\u00f3n en pantalla y para obtener informaci\u00f3n aportada por el usuario, habitualmente a trav\u00e9s de un dispositivo de entrada como el teclado.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#output-escribir-en-consola","title":"Output: Escribir en consola","text":"<p>Como ya hemos visto en multitud de ejemplos previos durante el curso, para enviar un mensaje a la salida est\u00e1ndar (la pantalla) usamos habitualmente las funciones <code>print()</code> y <code>println()</code>, que se diferencian en que la segunda incluye un salto de l\u00ednea al final. Este salto de l\u00ednea es reproducible a trav\u00e9s del caracter especial <code>\\n</code>, de la siguiente forma <code>print(\"\\n\")</code></p> <pre><code>fun main(args: Array&lt;String&gt;) {\nprintln(\"1. println \")\nprintln(\"2. println \")\nprint(\"1. print \")\nprint(\"2. print \")\n}\n</code></pre> <p>El programa anterior obtiene este resultado:</p> <pre><code>1. println \n2. println \n1. print 2. print\n</code></pre> <p>Podemos a\u00f1adir un salto de l\u00ednea en la funci\u00f3n <code>print</code> (aunque para eso ya tenemos a <code>println</code>):</p> <pre><code>print(\"Funci\u00f3n print con salto de l\u00ednea\\n\")\n</code></pre> <p>Un ejemplo que utiliza la funci\u00f3n println para mostrar valores en consola:</p> <pre><code>val numero = 12.3\nprintln(\"numero\")               // numero\nprintln(numero)                 // 12.3\nprintln(\"$numero\")              // 12.3\nprintln(\"numero = $numero\")     // numero = 12.3\nprintln(\"${numero + numero}\")   // 24.6\nprintln(12.3)                   // 12.3\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#input-lectura-de-datos-en-consola","title":"Input: Lectura de datos en consola","text":"<p>Para la lectura de datos por teclado utilizamos la funci\u00f3n <code>readLine</code> y <code>readLn</code> (otra opci\u00f3n que no vamos a ver ahora es utilizar la clase <code>Scanner</code> importada desde la librer\u00eda est\u00e1ndar de Java con <code>import java.util.Scanner</code>):</p> <pre><code>fun main(args: Array&lt;String&gt;) {\nprint(\"Tu nombre: \")\nval nombre = readLine()\nprintln(\"Hola $nombre\")\n}\n</code></pre> <p>La funci\u00f3n <code>readLine()</code> convierte la entrada en un <code>String</code> (realmente devuelve un <code>String?</code> puesto que puede ser nulo) aunque es posible tomar la entrada y convertirla a otro tipo expl\u00edcitamente:</p> <pre><code>print(\"Nombre: \")\nval nombre = readLine()\nprint(\"Edad: \")\nval edad = Integer.valueOf(readLine()) // cuidad\u00edn!!   \nprintln(\"Tu nombre es $nombre y tienes $edad a\u00f1os.\")\n</code></pre> <p>El programa anterior funcionar\u00e1 bien mientras el usuario introduzca un entero como valor de edad, pero en caso contrario saltar\u00e1 un excepci\u00f3n durante la ejecuci\u00f3n (<code>NumberFormatException</code>). Una primera soluci\u00f3n podr\u00eda pasar por el uso del manejo de excepciones (que veremos en posteriores entradas) para capturar los casos problem\u00e1ticos:</p> <pre><code>print(\"Nombre: \")\nval nombre = readLine()\nprint(\"Edad: \")\ntry {\nval edad = Integer.valueOf(readLine())\nprintln(\"Tu nombre es $nombre y tienes $edad a\u00f1os.\")\n} catch (ex: NumberFormatException) {\nprintln(\"Edad no v\u00e1lida\")\n}\n</code></pre> <p>A veces se pueden ver ejemplos de c\u00f3digo que intentan resolver este problema con el operador de aserci\u00f3n <code>!!</code> (revisar Gesti\u00f3n de tipos nulos en Kotlin), y de esta manera se le avisa al compilador que conf\u00ede que la funci\u00f3n <code>readLine</code> siempre retornar\u00e1 un <code>String</code>, pero en general no es una buena manera de validar la entrada de datos.</p> <pre><code>val num: Int\nprint(\"Introduce un n\u00famero entero: \")\nnum = readLine()!!.toInt() // prometemos algo que no podemos cumplir\nprintln(num)\n</code></pre> <p>A pesar de la pretendida seguridad del operador <code>!!</code>, seguimos sin escapar del <code>NumberFormatException</code>. Recuerda que adem\u00e1s de la funci\u00f3n <code>toInt()</code> tambi\u00e9n existen las funciones <code>toFloat()</code>, <code>toDouble()</code>, <code>toLong()</code>, <code>toShort()</code> y <code>toByte()</code> para la conversi\u00f3n de tipos (ver Tipos b\u00e1sicos de datos).</p> <p>Existen distintas formas de resolver \u00e9ste y otros problemas similares respecto a la entrada de datos por parte del usuario. Algunas soluciones pasan por combinar la funci\u00f3n <code>readLine</code> con el operador de llamada segura <code>?</code> y con la expresi\u00f3n <code>try</code> para devolver un valor (otras soluciones tambi\u00e9n utilizan el operador <code>as</code> que vimos en comprobaci\u00f3n y conversi\u00f3n de tipos con <code>is</code> y <code>as</code>). Un ejemplo:</p> <pre><code>val num: Int?\nprint(\"Introduce un n\u00famero entero: \")\nnum = try {\nreadLine()?.toInt()\n} catch (ex: NumberFormatException) {\nnull\n}\nif (num != null) {\nprintln(\"El n\u00famero es: $num\")\n} else {\nprintln(\"\u00a1Eso no es un n\u00famero entero!\")\n}\n</code></pre> <p>En este ejemplo el valor introducido es asignado a la variable anulable <code>num</code>, cuyo valor depende de que se procese el contenido de la expresi\u00f3n <code>try</code> (cuando se ingresa un entero) o de que, en caso contrario, se produzca un <code>NumberFormatException</code> que es capturado por <code>catch</code>, que retorna <code>null</code> que es asignado a la variable <code>num</code>.</p> <p>Pero podemos mejorarla prescindiendo de <code>try..catch</code> y sustituyendo la funci\u00f3n <code>toInt</code> por la funci\u00f3n <code>toIntOrNull</code>:</p> <pre><code>val num: Int?\nprint(\"Introduce un n\u00famero entero: \")\nnum = readLine()?.toIntOrNull()\nif (num != null) {\nprintln(\"El n\u00famero es: $num\")\n} else {\nprintln(\"\u00a1Eso no es un n\u00famero entero!\")\n}\n</code></pre> <p>En el ejemplo anterior llamamos a <code>readLine</code> con el operador <code>?</code> para realizar la conversi\u00f3n con <code>toIntOrNul</code> de forma segura. La funci\u00f3n <code>toIntOrNull()</code> requiere que la variable sea de tipo anulable (<code>val num: Int?</code>) porque si la conversi\u00f3n a entero falla, se retorna null, que es asignado a <code>num</code>. Igualmente contamos con las funciones <code>toFloatOrNull()</code>, <code>toDoubleOrNull()</code>, <code>toLongOrNull()</code>, <code>toShortOrNull()</code> y <code>toByteOrNull()</code> que en caso de no poder realizar la conversi\u00f3n de tipos devuelven <code>null</code>.</p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#mejorando-las-funciones","title":"Mejorando las funciones","text":"<p>Aqu\u00ed hay un grupo extendido (inspirado en el art\u00edculo) de funciones de ayuda para leer todos los tipos posibles, listas, arrays, arrays 2D, etc.:</p> <pre><code>// private fun readln() = readLine()!! //Ya disponib le en la versi\u00f3n 1.6\nprivate fun readlnByte() = readln().toByte()\nprivate fun readlnShort() = readln().toShort()\nprivate fun readlnInt() = readln().toInt()\nprivate fun readlnLong() = readln().toLong()\nprivate fun readlnFloat() = readln().toFloat()\nprivate fun readlnDouble() = readln().toDouble()\nprivate fun readlnBigInt(radix: Int = 10) = readln().toBigInteger(radix)\nprivate fun readlnBigDecimal() = readln().toBigDecimal()\nprivate fun lineSequence(limit: Int = Int.MAX_VALUE) = generateSequence { readLine() }.constrainOnce().take(limit)\nprivate fun readlnStrings() = readln().split(' ')\nprivate fun readlnBytes() = readlnStrings().map { it.toByte() }\nprivate fun readlnShorts() = readlnStrings().map { it.toShort() }\nprivate fun readlnInts() = readlnStrings().map { it.toInt() }\nprivate fun readlnLongs() = readlnStrings().map { it.toLong() }\nprivate fun readlnFloats() = readlnStrings().map { it.toFloat() }\nprivate fun readlnDoubles() = readlnStrings().map { it.toDouble() }\nprivate fun readByteArray() = readlnStrings().run { ByteArray(size) { get(it).toByte() } }\nprivate fun readShortArray() = readlnStrings().run { ShortArray(size) { get(it).toShort() } }\nprivate fun readIntArray() = readlnStrings().run { IntArray(size) { get(it).toInt() } }\nprivate fun readLongArray() = readlnStrings().run { LongArray(size) { get(it).toLong() } }\nprivate fun readFloatArray() = readlnStrings().run { FloatArray(size) { get(it).toFloat() } }\nprivate fun readDoubleArray() = readlnStrings().run { DoubleArray(size) { get(it).toDouble() } }\nprivate fun readlnByteArray(n: Int) = ByteArray(n) { readlnByte() }\nprivate fun readlnShortArray(n: Int) = ShortArray(n) { readlnShort() }\nprivate fun readlnIntArray(n: Int) = IntArray(n) { readlnInt() }\nprivate fun readlnLongArray(n: Int) = LongArray(n) { readlnLong() }\nprivate fun readlnFloatArray(n: Int) = FloatArray(n) { readlnFloat() }\nprivate fun readlnDoubleArray(n: Int) = DoubleArray(n) { readlnDouble() }\nprivate fun readByteArray2d(rows: Int, cols: Int) = Array(rows) { readByteArray().also { require(it.size == cols) } }\nprivate fun readShortArray2d(rows: Int, cols: Int) = Array(rows) { readShortArray().also { require(it.size == cols) } }\nprivate fun readLongArray2d(rows: Int, cols: Int) = Array(rows) { readLongArray().also { require(it.size == cols) } }\nprivate fun readIntArray2d(rows: Int, cols: Int) = Array(rows) { readIntArray().also { require(it.size == cols) } }\nprivate fun readFloatArray2d(rows: Int, cols: Int) = Array(rows) { readFloatArray().also { require(it.size == cols) } }\nprivate fun readDoubleArray2d(rows: Int, cols: Int) =\nArray(rows) { readDoubleArray().also { require(it.size == cols) } }\nprivate fun isWhiteSpace(c: Char) = c in \" \\r\\n\\t\"\n// JVM-only targeting code follows next\n// readString() via sequence is still slightly faster than Scanner\nprivate fun readString() = generateSequence { System.`in`.read().toChar() }\n.dropWhile { isWhiteSpace(it) }.takeWhile { !isWhiteSpace(it) }.joinToString(\"\")\nprivate fun readByte() = readString().toByte()\nprivate fun readShort() = readString().toShort()\nprivate fun readInt() = readString().toInt()\nprivate fun readLong() = readString().toLong()\nprivate fun readFloat() = readString().toFloat()\nprivate fun readDouble() = readString().toDouble()\nprivate fun readBigInt(radix: Int = 10) = readString().toBigInteger(radix)\nprivate fun readBigDecimal() = readString().toBigDecimal()\nprivate fun readBytes(n: Int) = generateSequence { readByte() }.take(n)\nprivate fun readShorts(n: Int) = generateSequence { readShort() }.take(n)\nprivate fun readInts(n: Int) = generateSequence { readInt() }.take(n)\nprivate fun readLongs(n: Int) = generateSequence { readLong() }.take(n)\nprivate fun readFloats(n: Int) = generateSequence { readFloat() }.take(n)\nprivate fun readDoubles(n: Int) = generateSequence { readDouble() }.take(n)\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#aplicando-formato-a-la-salida-estandar","title":"Aplicando formato a la salida est\u00e1ndar","text":"<p>A continuaci\u00f3n veremos como aplicar formato a las cadenas que se imprimen en salida estandar. La explicaci\u00f3n esta hecha en Kotlin pero en Java aplica pr\u00e1cticamente lo mismo.</p> <p>En Kotlin (Y la mayor\u00eda de los lenguajes de programaci\u00f3n) podemos utilizar formatos para reemplazar variables dentro de los String, supongamos que queremos imprimir nuestro nombre, edad y peso, podr\u00edamos hacer algo as\u00ed</p> <pre><code>val name: String = \"Walter White\"\nval age: Int = 50\nval weight: Double = 75.5\nval description = \"Me llamo \" + name + \", tengo \" + age + \" a\u00f1os y peso \" + weight + \" kg.\"\nprintln(description)\n// O mejor a\u00fan, en Kotlin podemos hacer esto\nval description = \"Me llamo $name, tengo $age a\u00f1os y peso $weight kg\"\nprintln(description)\n// Ahora, si usamos el String format\nval description = String.format(\"Me llamo %s, tengo %d a\u00f1os y peso %.2f kg\", name, age, weight)\nprintln(description)\n</code></pre> <p>Las 3 soluciones son correctas e imprimen lo mismo, pero la tercera es la m\u00e1s \u00fatil al usar <code>Strings</code> donde tendr\u00e1s que reemplazar variables porque te ayuda a tener c\u00f3digo m\u00e1s limpio y soportar diferentes idiomas.</p> <p>Si observas en la \u00faltima opci\u00f3n, lo que hacemos es poner ciertos formatos dentro del <code>String</code> y luego al final, separados por coma, ponemos las variables que queremos que se reemplacen en el <code>String</code>: <code>%s</code> para otros strings como <code>name</code>, <code>%d</code> para enteros como <code>age</code> y <code>%f</code> para <code>doubles</code> y <code>floats</code>, en el <code>.2</code> que ves en el <code>%f</code> el <code>2</code> es la cantidad de decimales que queremos que se impriman, as\u00ed por ejemplo en este caso se imprimir\u00eda el peso como <code>75.50</code>.</p> <p>Aqu\u00ed te dejo una tabla con los formatos m\u00e1s comunes, tambi\u00e9n pueden ser usados en Java:</p> Formato Tipo de**dato** %b Boolean %c Char %d Integer %e Float en notaci\u00f3n cient\u00edfica %f Float y Double (Agrega %**.n**f para forzar n decimales) %o Formato Octal %s Strings %x Formato Hexadecimal <p>Hay otros 3 o 4 formatos m\u00e1s pero son tan poco usuales que si los necesitas prefiero que los consultes tu en la documentaci\u00f3n.</p> <p>\u00bfQu\u00e9 muestra como salida el siguiente c\u00f3digo?</p> <pre><code> val str1 = String.format(\"%d\", 404) // Integer value  \nval str2 = String.format(\"%s\", \"Mehmet\") // String value  \nval str3 = String.format(\"%f\", 404.00) // Float value  \nval str4 = String.format(\"%x\", 404) // Hexadecimal value  \nval str5 = String.format(\"%c\", 'c') // Char value  \nprintln(str1)\nprintln(str2)\nprintln(str3)\nprintln(str4)\nprintln(str5)\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#biblioteca-kformat","title":"Biblioteca KFormat","text":"<p>Existen bibliotecas que intentan solucionar alguna necesidad que han encontrado en sus desarrollos. Algunas de ellas para trabajar con la consola:  - KFormat  - clikt  - kotlinx-cli </p> <p>KFormat es una peque\u00f1a biblioteca de Kotlin para la salida de texto con formato, como por ejemplo la impresi\u00f3n de valores en una tabla estructurada. Los casos de uso t\u00edpicos incluyen el desarrollo de herramientas CLI. (Command Line Interface)</p> <p>Un ejemplo: Dar formato a una tabla, incluido el cambio de tama\u00f1o de celda:</p> <pre><code>table {\nheader(\"A\", \"B\", \"C\", \"Long_Header\")\nrow(10, \"b...1\", 2.1f, \"foo\")\nrow(20, \"b2\", 1 / 3f, \"bar\")\nhints {\nalignment(\"A\", Hints.Alignment.LEFT)\nprecision(\"C\", 2)\npostfix(\"C\", \"%\")\nborderStyle = Table.BorderStyle.SINGLE_LINE // or NONE\n}\n}.render(StringBuilder())\n</code></pre> <p>Genera la siguiente salida:</p> <pre><code>A  |     B |     C | Long_Header\n---|-------|-------|------------\n10 | b...1 | 2.10% |         foo\n20 |    b2 | 0.33% |         bar\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#kotlin-command-line-arguments","title":"Kotlin Command-Line Arguments","text":"<p>kotlinx-cli facilita el parseo y procesado de los argumentos que se le pasan al programa. Aunque podemos realizarlo nosotros mismos. </p>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#linea-de-comandos-en-main","title":"L\u00ednea de comandos en <code>Main</code>","text":"<p>Al invocar un programa desde la l\u00ednea de comandos, puedes pasarle un n\u00famero variable de argumentos. Por ej: <code>&gt; tar -vzf file.tar.gz</code></p> <p>Para capturar los argumentos de la l\u00ednea de comandos, debes proporcionar un par\u00e1metro predefinido a <code>main()</code>:</p> <pre><code>// MainArgs.kt\nfun main (args: Array &lt; String &gt;) {\nfor (a in args) {\nimprimir (a)\n}\n}\n</code></pre> <p>El par\u00e1metro se llama tradicionalmente <code>args</code> aunque puede llamarlo de cualquier manera, y el tipo de <code>args</code> solo puede ser <code>Array&lt;String&gt;</code> (Array of String).</p> <p>Tambi\u00e9n se puede usar el compilador kotlinc para crear un programa que se ejecuta desde l\u00ednea de comandos.</p> <p>Una vez que haya creado y guardado y compilado el c\u00f3digo para un programa llamado <code>MainArgs.kt</code>, escriba lo siguiente en el s\u00edmbolo del sistema:</p> <pre><code>&gt; kotlinc MainArgsKt\n</code></pre> <p>Puedes proporcionar los argumentos de la l\u00ednea de comandos despu\u00e9s de la invocaci\u00f3n del programa, as\u00ed:</p> <p><pre><code>&gt; kotlin MainArgsKt aaa 42 3.14159.\n</code></pre> Y por salida estandar, saldr\u00e1 lo siguiente:</p> <pre><code>aaa\n42\n3.14159\n</code></pre> <p>Si una vez le\u00eddos los par\u015bmetros quieres convertir un par\u00e1metro <code>String</code> en un tipo espec\u00edfico, Kotlin proporciona funciones de conversi\u00f3n, como<code>toInt()</code> para convertir a <code>Int</code> y <code>toFloat()</code> para convertir a <code>Float</code>...</p> <p>El uso de estos m\u00e9todos supone que los argumentos de la l\u00ednea de comandos aparecen en un orden particular.</p> <p>Por ejemplo, en el siguiente c\u00f3digo, el programa espera un <code>String</code>, seguido de algo convertible a <code>Int</code>, seguido de algo convertible a <code>Float</code>:</p> <pre><code>// MainArgConversion.kt`\nfun main (args: Array &lt; String &gt;) {\nif (args.size &lt; 3) return val primero = args[0]\nval segundo = args[1].toInt ()\nval tercero = args[2].toFloat ()\nprintln( \"$primero $segundo $tercero\" )\n}\n</code></pre> <p>La primera l\u00ednea de <code>main()</code> cierra el programa si no hay suficientes argumentos.</p> <p>Si no proporciona algo convertible a <code>Int</code> y <code>Float</code> como segundo y tercer argumento de la l\u00ednea de comandos, ver\u00e1 errores de tiempo de ejecuci\u00f3n.</p> <p>Si compilas y ejecutas <code>MainArgConversion.kt</code> con los mismos argumentos de l\u00ednea de comandos que usamos antes, ver\u00e1s la siguiente salida:</p> <pre><code>aaa 42 3.14159\n</code></pre>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.2.-ConsolaTeclado/#fuente","title":"Fuente","text":"<ul> <li>Formatos de String en Kotlin </li> <li>Kotlin String Formatting </li> <li>Format </li> <li>Add padding to a string in Kotlin </li> <li>padStart </li> <li>IO Entra y salida de datos en consola </li> <li>Kotlin command line arguments </li> </ul>","tags":["Software","Consola","Teclado"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/","title":"UD 7 - 7.3 Manejo de archivos: File","text":"","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#la-clase-file","title":"La clase <code>File</code>","text":"<p>La pieza m\u00e1s b\u00e1sica para poder operar con archivos, independientemente de su tipo, en un programa Java es la clase <code>File</code> . Esta clase pertenece al <code>package java.io</code> de Java. Por lo tanto ser\u00e1 necesario importarla antes de poder usarla.</p> <pre><code>import java.io.File\n</code></pre> <p>Esta clase permite manipular cualquier aspecto vinculado al sistema de archivos. Su nombre (\"archivo\", en ingl\u00e9s) es un poco enga\u00f1oso, ya que no se refiere exactamente a un archivo.</p> <p> La clase <code>File</code> representa una ruta dentro del sistema de archivos</p> <p>Sirve para realizar operaciones tanto sobre rutas al sistema de archivos que ya existan como no existentes. Adem\u00e1s, se puede usar tanto para manipular archivos como directorios.</p> <p>Como cualquier otra clase hay que instanciarla para que sea posible invocar sus m\u00e9todos . El constructor de <code>File</code> recibe como argumento una cadena de texto correspondiente a la ruta sobre la que se quieren llevar a cabo las operaciones.</p> <pre><code>val ruta = \"data.txt\"\nval f = File(ruta)\n</code></pre> <p>Una ruta, path en ingl\u00e9s, es la forma general de un nombre de archivo o carpeta , por lo que identifica \u00fanicamente su localizaci\u00f3n en el sistema de archivos.</p> <p>Cada uno de los elementos de la ruta pueden existir realmente o no, pero esto no impide en modo poder inicializar File. En realidad, su comportamiento es como una declaraci\u00f3n de intenciones sobre qu\u00e9 ruta del sistema de archivos se quiere interactuar. No es hasta que se llaman los diferentes m\u00e9todos definidos en File, o hasta que se escriben o se leen datos, que realmente se accede al sistema de archivos y se procesa la informaci\u00f3n.</p> <p>Un aspecto importante a tener presente al inicializar <code>File</code> es tener siempre presente que el formato de la cadena de texto que conforma la ruta puede ser diferente seg\u00fan el sistema operativo sobre el que se ejecuta la aplicaci\u00f3n. Por ejemplo, el sistema operativo Windows inicia las rutas por un nombre de unidad (C :, D :, etc.), mientras que los sistemas operativos basados en Unix comienzan directamente con una barra (\"/\"). Adem\u00e1s, los diferentes sistemas operativos usan diferentes separadores dentro de las rutas. Por ejemplo, los sistemas Unix usan la barra (\"/\") mientras que el Windows la inversa (\"\\\").</p> <ul> <li>Ejemplo de ruta Unix: <code>/usr/bin</code></li> <li>Ejemplo de ruta Windows: <code>C:\\Windows\\System32</code></li> </ul> <p>De todos modos Java y Kotlin nos permite utilizar la barra de Unix (\"/\") para representar rutas en sistemas Windows. Por lo tanto, es posible utilizar siempre este tipo de barra independientemente del sistema, por simplicidad.</p> <p>Es importante entender que un objeto representa una \u00fanica ruta del sistema de archivos. Para operar con diferentes rutas habr\u00e1 que crear y manipular varios objetos. Por ejemplo, en el siguiente c\u00f3digo se instancian tres objetos <code>File</code> diferentes.</p> <pre><code>var carpetaFotos: File = File(\"C:/Fotos\")\nvar unaFoto: File = File(\"C:/Fotos/Foto1.png\")\nvar otraFoto: File = File(\"C:/Fotos/Foto2.png\")\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#rutas-absolutas-y-relativas","title":"Rutas absolutas y relativas","text":"<p>En los ejemplos empleados hasta el momento para crear objetos de la clase <code>File</code> se han usado rutas absolutas, ya que es la manera de dejar m\u00e1s claro a qu\u00e9 elemento dentro del sistema de archivos, ya sea archivo o carpeta, se est\u00e1 haciendo referencia.</p> <p> Una ruta absoluta es aquella que se refiere a un elemento a partir del ra\u00edz del sistema de archivos.</p> <p>Por ejemplo <code>C:/Fotos/Foto1.png</code></p> <p>Las rutas absolutas se distinguen f\u00e1cilmente, ya que el texto que las representa comienza de una manera muy caracter\u00edstica dependiendo del sistema operativo del ordenador. En el caso de los sistemas operativos Windows a su inicio siempre se pone el nombre de la unidad ( \"C:\", \"D:\", etc.), mientras que en el caso de los sistemas operativos Unix, estas comienzan siempre por una barra (\"/\").</p> <p>Por ejemplo, las cadenas de texto siguientes representan rutas absolutas en un sistema de archivos de Windows:</p> <ul> <li><code>C:\\Fotos\\Viajes</code> (ruta a una carpeta)</li> <li><code>M:\\Documentos\\Unitat11\\apartado1</code> (ruta a una carpeta)</li> <li><code>N:\\Documentos\\Unitat11\\apartado1\\Actividades.txt</code> (ruta a un archivo)</li> </ul> <p>En cambio, en el caso de una jerarqu\u00eda de archivos bajo un sistema operativo Unix, un conjunto de rutas podr\u00edan estar representadas de la siguiente forma:</p> <ul> <li><code>/Fotos/Viajes</code> (ruta a una carpeta)</li> <li><code>/Documentos/Unidad11/apartado1</code> (ruta a una carpeta)</li> <li><code>/Documentos/Unidad11/Apartado1/Actividades.txt</code> (ruta a un archivo)</li> </ul> <p>Al instanciar objetos de tipo <code>File</code> usando una ruta absoluta siempre hay que usar la representaci\u00f3n correcta seg\u00fan el sistema en que se ejecuta el programa.</p> <p>Si bien el uso de rutas absolutas resulta \u00fatil para indicar con toda claridad qu\u00e9 elemento dentro del sistema de archivos se est\u00e1 manipulando, hay casos que su uso conlleva ciertas complicaciones. Suponga que ha hecho un programa en el que se llevan a cabo operaciones sobre el sistema de archivos. Una vez funciona, le deja el proyecto Kotlin a un amigo que lo copia en su ordenador dentro de una carpeta cualquiera y la abre con su entorno de trabajo. Para que el programa le funcione perfectamente antes ser\u00e1 necesario que en su ordenador haya exactamente las mismas carpetas que usa en su m\u00e1quina, tal como est\u00e1n escritas en el c\u00f3digo fuente de su programa. De lo contrario, no funcionar\u00e1, ya que las carpetas y archivos esperados no existir\u00e1n, y por tanto, no se encontrar\u00e1n. Usar rutas absolutas hace que un programa siempre tenga que trabajar con una estructura del sistema de archivos exactamente igual donde quiera que se ejecute, lo cual no es muy c\u00f3modo.</p> <p>Para resolver este problema, a la hora de inicializar una variable de tipo <code>File</code>, tambi\u00e9n se puede hacer referencia a una ruta relativa.</p> <p> Una ruta relativa es aquella que no incluye el ra\u00edz y por ello se considera que parte desde el directorio de trabajo de la aplicaci\u00f3n. Esta carpeta puede ser diferente cada vez que se ejecuta el programa.</p> <p>Cuando un programa se ejecuta por defecto se le asigna una carpeta de trabajo. Esta carpeta suele ser la carpeta desde donde se lanza el programa. En el caso de un programa en Kotlin ejecutado a trav\u00e9s de un IDE (como IntelliJ IDEA), la carpeta de trabajo suele ser la misma carpeta donde se ha elegido guardar los archivos del proyecto.</p> <p>El formato de una ruta relativa es similar a una ruta absoluta, pero nunca se indica la ra\u00edz del sistema de archivos. Directamente se empieza por el primer elemento escogido dentro de la ruta. Por ejemplo:</p> <ul> <li>Viajes</li> <li>Unidad11\\apartado1</li> <li>Unidad11\\apartado1\\Actividades.txt</li> </ul> <p>Una ruta relativa siempre incluye el directorio de trabajo de la aplicaci\u00f3n como parte inicial a pesar de no haberse escrito. El rasgo distintivo es que el directorio de trabajo puede variar. Por ejemplo, el elemento al que se refiere el siguiente objeto <code>File</code> var\u00eda seg\u00fan el directorio de trabajo.</p> <pre><code>val f = File(\"Unidad11/apartado1/Actividades.txt\")\n</code></pre> Directorio de trabajo Ruta real <code>C:/Proyectos/Java</code> <code>C:/Proyectos/Java/Unidad11/apartado1/Actividades.txt</code> <code>X:/Unidades</code> <code>X:/Unidades/Unidad11/apartado1/Actividades.txt</code> <code>/Programas</code> <code>/Programas/Unidad11/apartado1/Actividades.txt</code> <p>Este mecanismo permite facilitar la portabilidad del software entre distintos ordenadores y sistemas operativos, ya que solo es necesario que los archivos y carpetas permanezcan en la misma ruta relativa al directorio de trabajo. Ve\u00e1moslo con un ejemplo:</p> <pre><code>val f = File(\"Activdades.txt\")\n</code></pre> <p>Dada esta ruta relativa, basta garantizar que el archivo <code>Activdades.txt</code> est\u00e9 siempre en el mismo directorio de trabajo de la aplicaci\u00f3n, cualquiera que sea \u00e9ste e independientemente del sistema operativo utilizado (en un ordenador puede ser <code>C:\\Programas</code> y en otro <code>/Kotlin</code>). En cualquiera de todos estos casos, la ruta siempre ser\u00e1 correcta. De hecho, a\u00fan m\u00e1s. N\u00f3tese como las rutas relativas a Kotlin permiten crear c\u00f3digo independiente del sistema operativo, ya que no es necesario especificar un formato de ra\u00edz ligada a un sistema de archivos concreto ( \"C:\", \"D:\", \"/\", etc.).</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#metodos-de-la-clase-file","title":"M\u00e9todos de la clase File","text":"<p><code>File</code> ofrece varios m\u00e9todos para poder manipular el sistema de archivos u obtener informaci\u00f3n a partir de su ruta. Algunos de los m\u00e1s significativos para entender las funcionalidades se muestran a continuaci\u00f3n, ordenados por tipo de operaci\u00f3n.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#obtencion-de-la-ruta","title":"Obtenci\u00f3n de la ruta","text":"<p>Una vez se ha instanciado un objeto de tipo <code>File</code>, puede ser necesario recuperar la informaci\u00f3n empleada durante su inicializaci\u00f3n y conocer en formato texto a qu\u00e9 ruta se est\u00e1 refiriendo, o al menos parte de ella.</p> <ul> <li><code>fun getParent():String</code> devuelve la ruta de la carpeta del elemento referido por esta ruta. B\u00e1sicamente la cadena de texto resultante es id\u00e9ntica a la ruta original, eliminando el \u00faltimo elemento. Si la ruta tratada se refiere a la carpeta ra\u00edz de un sistema de archivos (\"C:\\\",   \"/\", etc.), este m\u00e9todo devuelve <code>null</code>. En el caso de tratarse de una ruta relativa, este m\u00e9todo no incluye la parte de la carpeta de trabajo.</li> <li><code>fun getName():String</code> devuelve el nombre del elemento que representa la ruta, ya sea una carpeta o un archivo. Es el caso inverso del m\u00e9todo <code>getParent()</code>, ya que el texto resultante es solo el \u00faltimo elemento.</li> <li><code>fun getAbsolutePath():String</code> devuelve la ruta absoluta. Si el objeto <code>File</code> se inicializ\u00f3 usando una ruta relativa, el resultado incluye tambi\u00e9n la carpeta de trabajo.</li> </ul> <p>Veamos un ejemplo de c\u00f3mo funcionan estos tres m\u00e9todos. Obs\u00e9rvese que las rutas relativas se a\u00f1aden a la ruta de la carpeta de trabajo (donde se encuentra el proyecto):</p> <pre><code>import kotlin.jvm.JvmStatic\nimport java.io.File\nobject Pruebasarchivos {\n@JvmStatic\nfun main(args: Array&lt;String&gt;) {\n// Dos rutas absolutas\nval carpetaAbs = File(\"/home/lionel/fotos\")\nval archivoAbs = File(\"/home/lionel/fotos/albania1.jpg\")\n// Dos rutas relativas\nval carpetaRel = File(\"trabajos\")\nval fitxerRel = File(\"trabajos/documento.txt\")\n// Mostremos sus rutas\nmostrarRutas(carpetaAbs)\nmostrarRutas(archivoAbs)\nmostrarRutas(carpetaRel)\nmostrarRutas(fitxerRel)\n}\nfun mostrarRutas(f: File) {\nprintln(\"getParent(): \" + f.parent)\nprintln(\"getName(): \" + f.name)\nprintln(\"getAbsolutePath(): \" + f.absolutePath)\n}\n}\n</code></pre> <p>Este programa produce la salida:</p> <pre><code>getParent()     :   /home/lionel\ngetName()       :   fotos\ngetAbsolutePath():  /home/lionel/fotos\n\ngetParent()     :   /home/lionel/fotos\ngetName()       :   albania1.jpg\ngetAbsolutePath():  /home/lionel/fotos/albania1.jpg\n\ngetParent()     :   null\ngetName()       :   trabajos\ngetAbsolutePath():  /home/lionel/NetBeans/archivos/trabajos\n\ngetParent()     :   trabajos\ngetName()       :   documento.txt\ngetAbsolutePath():  /home/lionel/NetBeans/archivos/trabajos/documento.txt\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#comprobaciones-de-estado","title":"Comprobaciones de estado","text":"<p>Dada la ruta empleada para inicializar una variable de tipo File, esta puede que realmente exista dentro del sistema de archivos o no, ya sea en forma de archivo o carpeta. La clase <code>File</code> ofrece un conjunto de m\u00e9todos que permiten hacer comprobaciones sobre su estado y saber si es as\u00ed.</p> <ul> <li><code>fun exists(): Boolean</code> comprueba si la ruta existe dentro del sistema de archivos. Devolver\u00e1 <code>true</code> si existe   y <code>false</code> en caso contrario. Normalmente los archivos incorporan en su nombre una extensi\u00f3n (.txt, .jpg, .mp4, etc.).   A\u00fan as\u00ed, hay que tener en cuenta que la extensi\u00f3n no es un elemento obligatorio en el nombre de un archivo, s\u00f3lo se usa como mecanismo para que tanto el usuario como algunos programas puedan discriminar m\u00e1s f\u00e1cilmente el tipo de archivos. Por lo tanto, solo con el texto de una ruta no se puede estar 100% seguro de si esta se refiere a un archivo   o una carpeta. Para poder estar realmente seguros se pueden usar los m\u00e9todos siguientes:</li> <li><code>fun isFile(): Boolean</code> comprueba el sistema de archivos en busca de la ruta y devuelve true si existe y es un archivo. Devolver\u00e1 <code>false</code> si no existe, o si existe pero no es un archivo.</li> <li><code>fun isDirectory():Boolean</code> funciona como el anterior pero comprueba si es una carpeta.</li> </ul> <p>Por ejemplo, el siguiente c\u00f3digo hace una serie de comprobaciones sobre un conjunto de rutas. Para poder probarlo puedes crear la carpeta <code>Temp</code> en la ra\u00edz <code>C:</code> (si estas en Windows). Dentro, un archivo llamado <code>Document.txt</code> (puede estar vac\u00edo) y una carpeta llamada <code>Fotos</code>. Despu\u00e9s de probar el programa puedes eliminar alg\u00fan elemento y volver a probar para ver la diferencia.</p> <pre><code>import kotlin.jvm.JvmStatic\nimport un7.PruebaExiste\nimport java.io.File\nobject PruebaExiste {\n@JvmStatic\nfun main(args: Array&lt;String&gt;) {\nval temp = File(\"C:/Temp\")\nval fotos = File(\"C:/Temp/Fotos\")\nval document = File(\"C:/Temp/Documento.txt\")\nprintln(temp.absolutePath + \" \u00bfexiste? \" + temp.exists())\nmostrarEstado(fotos)\nmostrarEstado(document)\n}\nfun mostrarEstado(f: File) {\nprintln(f.absolutePath + \" \u00bfarchivo? \" + f.isFile)\nprintln(f.absolutePath + \" \u00bfcarpeta? \" + f.isDirectory)\n}\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#propiedades-de-archivos","title":"Propiedades de archivos","text":"<p>El sistema de archivos de un sistema operativo almacena diversidad de informaci\u00f3n sobre los archivos y carpetas que puede resultar \u00fatil conocer: sus atributos de acceso, su tama\u00f1o, la fecha de modificaci\u00f3n, etc. En general, todos los datos mostrados en acceder a las propiedades del archivo. Esta informaci\u00f3n tambi\u00e9n puede ser consultada usando los m\u00e9todos adecuados. Entre los m\u00e1s populares hay los siguientes:</p> <ul> <li><code>fun length(): Long</code> devuelve el tama\u00f1o de un archivo en bytes. Este m\u00e9todo solo puede ser llamado sobre una ruta que represente un archivo, de lo contrario no se puede garantizar que el resultado sea v\u00e1lido.</li> <li><code>fun lastModified(): Long</code> devuelve la \u00faltima fecha de edici\u00f3n del elemento representado por esta ruta. El resultado se codifica en un \u00fanico n\u00famero entero cuyo valor es el n\u00famero de milisegundos que han pasado desde el 1 de junio de 1970.</li> </ul> <p>El ejemplo siguiente muestra c\u00f3mo funcionan estos m\u00e9todos. Para probarlos crea el archivo <code>Documento.txt</code> en la carpeta <code>C:\\Temp</code>. Primero deja el archivo vac\u00edo y ejecuta el programa. Luego, con un editor de texto, escribe cualquier cosa, guarda los cambios y vuelve a ejecutar el programa. Observa c\u00f3mo el resultado es diferente. Como curiosidad, f\u00edjate en el uso de la clase <code>Date</code> para poder mostrar la fecha en un formato legible.</p> <pre><code>import java.io.File\nimport java.util.*\nimport kotlin.jvm.JvmStatic\nobject PruebaPropiedades {\n@JvmStatic\nfun main(args: Array&lt;String&gt;) {\nval documento = File(\"C:/Temp/Documento.txt\")\nprintln(documento.absolutePath)\nval milisegundos = documento.lastModified()\nval fecha = Date(milisegundos)\nprintln(\"\u00daltimamodificaci\u00f3n (ms)   : $milisegundos\")\nprintln(\"\u00daltimamodificaci\u00f3n (fecha): $fecha\")\nprintln(\"Tama\u00f1odel archivo: \" + documento.length())\n}\n}\n</code></pre> <p>Primera salida:</p> <pre><code>C:/Temp/Documento.txt\n\u00daltimamodificaci\u00f3n (ms)   : 1583025735411\n\u00daltimamodificaci\u00f3n (fecha): Sun Mar 01 02:22:15 CET 2020\nTama\u00f1odel archivo: 0\n</code></pre> <p>Segunda salida:</p> <pre><code>C:/Temp/Documento.txt\n\u00daltimamodificaci\u00f3n (ms)   : 1583025944088\n\u00daltimamodificaci\u00f3n (fecha): Sun Mar 01 02:25:44 CET 2020\nTama\u00f1odel archivo: 7\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#gestion-de-los-archivos","title":"Gesti\u00f3n de los archivos","text":"<p>El conjunto de operaciones m\u00e1s habituales al acceder a un sistema de archivos de un ordenador son las vinculadas a su gesti\u00f3n directa: renombrar archivos, borrarlos, copiarlos o moverlos. Dado el nombre de una ruta, Java y kotlin tambi\u00e9n permite realizar estas acciones.</p> <ul> <li><code>fun mkdir(): Boolean</code> permite crear la carpeta indicada en la ruta. La ruta debe indicar el nombre de una carpeta que no existe en el momento de invocar el m\u00e9todo. Por ejemplo, dado un objeto <code>File</code>  instanciado con la ruta <code>C: /Fotos/Albania</code> que no existe, el m\u00e9todo <code>mkdir()</code> crear\u00e1 la carpeta <code>Albania</code> dentro de <code>C:/Fotos</code>. Devuelve <code>true</code> si se ha creado correctamente, en caso contrario devuelve <code>false</code> (por ejemplo si la ruta es incorrecta, la carpeta ya existe o el usuario no tiene permisos de escritura).</li> <li><code>fun delete(): Boolean</code> borra el archivo o carpeta indicada en la ruta. La ruta debe indicar el nombre de un archivo o carpeta que s\u00ed existe en el momento de invocar el m\u00e9todo. Se podr\u00e1 borrar una carpeta solo si est\u00e1 vac\u00eda (no contiene ni carpetas ni archivos). Devuelve <code>true</code> o <code>false</code> seg\u00fan si la operaci\u00f3n se ha podido llevar a cabo.</li> </ul> <p>Para probar el ejemplo que se muestra a continuaci\u00f3n de manera que se pueda ver c\u00f3mo funcionan estos m\u00e9todos, primero aseg\u00farate de que en la ra\u00edz de la unidad <code>C:</code> no hay ninguna carpeta llamada <code>Temp</code> y ejecute el programa. Todo fallar\u00e1, ya que las rutas son incorrectas (no existe <code>Temp</code>). Luego, crea la carpeta <code>Temp</code> y en su interior crea un nuevo documento llamado <code>Documento.txt</code> (puede estar vac\u00edo). Ejecuta el programa y ver\u00e1s que se habr\u00e1 creado una nueva carpeta llamada <code>Fotos</code>. Si lo vuelves a ejecutar por tercera vez podr\u00e1s comprobar que se habr\u00e1 borrado.</p> <pre><code>import java.io.File\nimport kotlin.jvm.JvmStatic\nobject PruebasGestionarchivos {\n@JvmStatic\nfun main(args: Array&lt;String&gt;) {\nval fotos = File(\"C:/Temp/Fotos\")\nval doc = File(\"C:/Temp/Documento.txt\")\nval mkdirFot: Boolean = fotos.mkdir()\nif (mkdirFot) {\nprintln(\"Creada carpeta \" + fotos.getName().toString() + \"? \" + mkdirFot)\n} else {\nval delCa: Boolean = fotos.delete()\nprintln(\"Borrada carpeta \" + fotos.getName().toString() + \"? \" + delCa)\nval delAr: Boolean = doc.delete()\nprintln(\"Borrado archivo \" + doc.getName().toString() + \"? \" + delAr)\n}\n}\n}\n</code></pre> <p>Desde el punto de vista de un sistema operativo la operaci\u00f3n de <code>mover</code> un archivo o carpeta no es m\u00e1s que cambiar su nombre desde su ruta original hasta una nueva ruta destino. Para hacer esto tambi\u00e9n hay un m\u00e9todo.</p> <ul> <li><code>fun renameTo(File destino): Boolean</code> el nombre de este m\u00e9todo es algo enga\u00f1oso (\"renombrar\", en ingl\u00e9s), ya que su funci\u00f3n real no es simplemente cambiar el nombre de un archivo o carpeta, sino cambiar la ubicaci\u00f3n completa. El m\u00e9todo se invoca el objeto <code>File</code> con la ruta origen (donde se encuentra el archivo o carpeta), y se le da como argumento otro objeto <code>File</code> con la ruta destino. Devuelve <code>true</code> o <code>false</code> seg\u00fan si la operaci\u00f3n se ha podido llevar a cabo correctamente o no (la ruta origen y destino son correctos, no existe ya un archivo con este nombre en el destino, etc.). N\u00f3tese que, en el caso de carpetas, es posible moverlas aunque contengan archivos.</li> </ul> <p>Una vez m\u00e1s, veamos un ejemplo. Dentro de la carpeta <code>C:/Temp</code> crea una carpeta llamada <code>Media</code> y otra llamada <code>Fotos</code>.</p> <p>Dentro de la carpeta<code>Fotos</code> crea dos documentos llamados <code>Documento.txt</code> y <code>Fotos.txt</code>. Despu\u00e9s de ejecutar el programa, observa como la carpeta <code>Fotos</code> se ha movido y ha cambiado de nombre, pero mantiene en su interior el archivo <code>Fotos.txt</code>. El archivo <code>Documento.txt</code> se ha movido hasta la carpeta <code>Temp</code>.</p> <pre><code>import java.io.File\nimport kotlin.jvm.JvmStatic\nobject PruebasGestionarchivos2 {\n@JvmStatic\nfun main(args: Array&lt;String&gt;) {\nval origenDir = File(\"C:/Temp/Fotos\")\nval destinoDir = File(\"C:/Temp/Media/Fotografies\")\nval origenDoc = File(\"C:/Temp/Media/Fotografies/Document.txt\")\nval destinoDoc = File(\"C:/Temp/Document.txt\")\nvar res = origenDir.renameTo(destinoDir)\nprintln(\"Se ha movido y renombrado la carpeta? $res\")\nres = origenDoc.renameTo(destinoDoc)\nprintln(\"Se ha movido el documento? $res\")\n}\n}\n</code></pre> <p>Como ya se ha comentado este m\u00e9todo tambi\u00e9n sirve, impl\u00edcitamente, para renombrar archivos o carpetas. Si el elemento final de las rutas origen y destino son diferentes, el nombre del elemento, sea archivo o carpeta, cambiar\u00e1. Para simplemente renombrar un elemento sin moverlo de lugar, simplemente su ruta padre sea exactamente la misma. El resultado es que el elemento de la ruta origen \"se mueve\" en la misma carpeta donde est\u00e1 ahora, pero con un nombre diferente.</p> <p>Por ejemplo, si utilizamos <code>C:/Trabajos/Doc.txt</code> como ruta origen y <code>C:/Trabajos/File.txt</code> como ruta destino, el archivo <code>Doc.txt</code> cambiar\u00e1 de nombre a <code>File.txt</code> pero permanecer\u00e1 en la misma carpeta <code>C:/Trabajos</code>.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#listado-de-archivos","title":"Listado de archivos","text":"<p>Finalmente, s\u00f3lo en el caso de las carpetas, es posible consultar cu\u00e1l es el listado de archivos y carpetas que contiene.</p> <ul> <li><code>fun listFiles(): Array&lt;File&gt;</code> devuelve un vector de objectos <code>File</code> con todos los elementos contenidos en la carpeta (representados por objetos <code>File</code>, uno por elemento). Para que se ejecute correctamente la ruta debe indicar una carpeta. El tama\u00f1o del vector ser\u00e1 igual al n\u00famero de elementos que contiene la carpeta. Si el tama\u00f1o es <code>0</code>, el valor devuelto ser\u00e1 <code>null</code> y toda operaci\u00f3n posterior sobre el vector ser\u00e1 err\u00f3nea. El orden de los elementos es aleatorio (al contrario que en el explorador de archivos del sistema operativo, no se ordena autom\u00e1ticamente por tipo ni alfab\u00e9ticamente).</li> </ul> <p>Veamos un ejemplo. Antes de ejecutarlo, crea una carpeta <code>Temp</code> en la ra\u00edz de la unidad <code>C:</code>. Dentro crea o copia cualquier cantidad de carpetas o archivos.</p> <pre><code>import java.io.File\nimport kotlin.jvm.JvmStatic\nobject PruebasGestionarchivos3 {\n@JvmStatic\nfun main(args: Array&lt;String&gt;) {\nval dir = File(\"C:/Temp\")\nval lista = dir.listFiles()\nprintln(\"Contenido de \" + dir.absolutePath + \" :\")\n// Recorremos el array y mostramos el nombre de cada elemento\nfor (i in lista.indices) {\nval f = lista[i]\nif (f.isDirectory) {\nprintln(\"[DIR] \" + f.name)\n} else {\nprintln(\"[ARX] \" + f.name)\n}\n}\n}\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#creacion-de-archivos","title":"Creaci\u00f3n de archivos","text":"<p>En Kotlin, se puede crear un nuevo archivo usando <code>File.createNewFile()</code>, <code>File.writeText(text :String)</code>, <code>Files.writeBytes()</code>, etc. Hay muchas otras formas de crear un archivo en Kotlin. Examinaremos la implementaci\u00f3n del c\u00f3digo para algunos de ellos utilizando programas Kotlin de ejemplo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#crear-archivo-usando-filecreatenewfile","title":"Crear archivo usando <code>File.createNewFile()</code>","text":"<p><code>File.createNewFile()</code> crea un nuevo archivo si a\u00fan no existe y devuelve el valor booleano de <code>true</code>. Si el archivo ya existe en la ruta proporcionada, el m\u00e9todo devuelve <code>false</code>. El archivo creado est\u00e1 vac\u00edo y tiene cero bytes escritos.</p> <p>Usar <code>File.createNewFile()</code> es el mejor procedimiento y el m\u00e1s seguro para crear un nuevo archivo. La mayor\u00eda de los otros m\u00e9todos, sobrescribir\u00edan el archivo si existe, lo que puede resultar en la p\u00e9rdida de los datos existentes en el archivo, y puede ser que no se desee este efecto.</p> <p>En el siguiente ejemplo, intentamos crear un nuevo archivo con el nombre <code>data.txt</code>. La primera vez se crea el archivo y se devuelve <code>true</code>. Cuando intentamos crear el archivo por segunda vez, como el archivo <code>data.txt</code> ya se cre\u00f3, obtenemos <code>false</code>.</p> <pre><code>import java.io.File\nfun main(args: Array&lt;String&gt;) {\nval fileName = \"data.txt\"\nvar file = File(fileName)\n// create a new file\nval isNewFileCreated: Boolean = file.createNewFile()\nif (isNewFileCreated) {\nprintln(\"$fileName is created successfully.\")\n} else {\nprintln(\"$fileName already exists.\")\n}\n// try creating a file that already exists\nval isFileCreated: Boolean = file.createNewFile()\nif (isFileCreated) {\nprintln(\"$fileName is created successfully.\")\n} else {\nprintln(\"$fileName already exists.\")\n}\n}\n</code></pre> <p>mostrar\u00e1 como salida:</p> <pre><code>data.txt is created successfully.\ndata.txt already exists.\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#crear-archivo-usando-filewritetext","title":"Crear archivo usando <code>File.writeText()</code>","text":"<p><code>File.writeText()</code> crea un nuevo archivo si a\u00fan no existe y escribe el texto (argumento de cadena) en el archivo. Si se proporciona una cadena vac\u00eda, se crea el archivo y no se escribe nada en \u00e9l. De forma predeterminada, el archivo est\u00e1 codificado como UTF-8. Pasar cualquier otro conjunto de caracteres como segundo argumento codifica el archivo en consecuencia.</p> <p> En caso de que el archivo ya exista, se sobrescribe y los datos existentes se pierden</p> <p>Utilice este m\u00e9todo si est\u00e1 seguro de que el archivo a\u00fan no existe o si sobrescribir los datos existentes no afecta a su aplicaci\u00f3n.</p> <p>En este ejemplo, usaremos <code>File.writeText()</code> para crear un nuevo archivo.</p> <pre><code>import java.io.File\nfun main(args: Array&lt;String&gt;) {\nval fileName = \"data.txt\"\nvar file = File(fileName)\n// create a new file\nfile.writeText(\"\")\n}\n</code></pre> <p>Al m\u00e9todo <code>writeText()</code> se le puede proporcionar como argumento la cadena que le gustar\u00eda escribir en este archivo. Le hemos pasado una cadena vac\u00eda, como dato a escribir en el archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#crear-archivo-usando-filewritebytes","title":"Crear archivo usando <code>File.writeBytes()</code>","text":"<p><code>File.writeBytes()</code> crea un nuevo archivo si a\u00fan no existe y escribe los bytes del <code>ByteArray</code> proporcionado sin ning\u00fan formato. Si se proporciona un <code>ByteArray</code> vac\u00edo, se crea el archivo y no se escribe nada en \u00e9l.</p> <p> En caso de que el archivo ya exista, se sobrescribe y los datos existentes se pierden</p> <p>Utilice este m\u00e9todo si est\u00e1 seguro de que el archivo a\u00fan no existe o si sobrescribir los datos existentes no afecta a su aplicaci\u00f3n.</p> <p>En este ejemplo, usaremos <code>File.writeBytes()</code> para crear un nuevo archivo.</p> <pre><code>import java.io.File\nfun main(args: Array&lt;String&gt;) {\nval fileName = \"data.txt\"\nvar file = File(fileName)\n// create a new file\nfile.writeBytes(ByteArray(0))\n}\n</code></pre> <p>Al m\u00e9todo <code>writeBytes()</code> se le puede proporcionar como argumento el vector de Bytes que le gustar\u00eda escribir en este archivo. Le hemos pasado un vector vac\u00edo, como dato a escribir en el archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.3.-File/#fuente","title":"Fuente","text":"<ul> <li>Writing to a File in kotlin</li> <li>Reading from a File in kotlin</li> <li>Baeldung Kotlin IO</li> <li>Book: The joy of kotlin</li> <li>Kotlin IO</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/","title":"UD 7 - 7.4 Lectura y escritura de archivos","text":"","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#lectura-y-escritura-de-archivos","title":"Lectura y escritura de archivos","text":"<p>Normalmente las aplicaciones que utilizan archivos no est\u00e1n centradas en la gesti\u00f3n del sistema de archivos del ordenador. El objetivo principal de usar archivos es poder almacenar datos de modo que entre diferentes ejecuciones del programa, incluso en diferentes equipos, sea posible recuperar los datos almacenados. El caso m\u00e1s t\u00edpico es un editor de documentos, que mientras se ejecuta se encarga de gestionar los datos relativos al texto que est\u00e1 escribiendo, pero en cualquier momento puede guardarlo en un archivo para poder recuperar este texto cuando se desee, y a\u00f1adir otros nuevos si fuera necesario. El archivo con los datos del documento lo puede abrir tanto en el editor de su ordenador como en el de otro compa\u00f1ero.</p> <p>Para saber c\u00f3mo tratar los datos de un archivo en un programa, hay que tener muy claro c\u00f3mo se estructuran. Dentro de un archivo se pueden almacenar todo tipo de valores de cualquier tipo de datos. La parte m\u00e1s importante es que estos valores se almacenan en forma de secuencia, uno tras otro. Por lo tanto, como pronto ver\u00e9is, la forma m\u00e1s habitual de tratar archivos es secuencialmente, de forma parecida a como se hace para leer los datos desde teclado, mostrarlas por pantalla o recorrer las posiciones de un array.</p> <p> Se denomina acceso secuencial al procesamiento de un conjunto de elementos de manera que s\u00f3lo es posible acceder a ellos de acuerdo a su orden de aparici\u00f3n. Para procesar un elemento es necesario procesar primero todos los elementos anteriores.</p> <p>Kotlin, junto con otros lenguajes de programaci\u00f3n, diferencia entre dos tipos de archivos seg\u00fan c\u00f3mo se representan los valores almacenados en un archivo.</p> <p> En los archivos orientados a car\u00e1cter, los datos se representan como una secuencia de cadenas de texto, donde cada valor se  diferencia del otro usando un delimitador. En cambio, en los archivos orientados a byte, los datos se representan directamente de acuerdo a su formato en binario, sin ninguna separaci\u00f3n. Estos \u00faltimos archivos son no son legibles a simple vista, y son interpretados por programas que entienden su formato. Por ejemplo, pdf, doc, xls.</p> <p>Nos centraremos principalmente en el procesamiento de archivos orientados a car\u00e1cter.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#archivos-orientados-a-caracter","title":"archivos orientados a car\u00e1cter","text":"<p>Un archivo orientado a car\u00e1cter no es m\u00e1s que un documento de texto, como el que podr\u00eda generar con cualquier editor de texto simple. Los valores est\u00e1n almacenados seg\u00fan su representaci\u00f3n en cadena de texto, exactamente en el mismo formato que ha usado hasta ahora para entrar datos desde el teclado. Del mismo modo, los diferentes valores se distinguen al estar separados entre ellos con un delimitador, que por defecto es cualquier conjunto de espacios en blanco o salto de l\u00ednea. Aunque estos valores se puedan distribuir en l\u00edneas de texto diferentes, conceptualmente, se puede considerar que est\u00e1n organizados uno tras otro, secuencialmente, como las palabras en la p\u00e1gina de un libro.</p> <p>El siguiente podr\u00eda ser el contenido de un archivo orientado a car\u00e1cter donde hay diez valores de tipo <code>float</code>, 7 en la primera l\u00ednea y 3 en la segunda:</p> <pre><code>1,5 0,75 \u22122,35 18,0 9,4 3,1416 \u221215,785\n\u2212200,4 2,56 9,3785\n</code></pre> <p>Y este el de un archivo con 3 valores de tipo <code>String</code>: <code>\"Hab\u00eda\"</code>, <code>\"una\"</code> y <code>\"vez...\"</code> en una l\u00ednea.</p> <pre><code>Hab\u00eda una vez...\n</code></pre> <p>En un archivo orientado a car\u00e1cter es posible almacenar cualquier combinaci\u00f3n de datos de cualquier tipo (<code>int</code> , <code>double</code>, <code>boolean</code>, <code>String</code>, etc.).</p> <pre><code>7 10 20,51 6,99\nHab\u00eda una vez...\ntrue false 2020 0,1234\n</code></pre> <p>La principal ventaja de un archivo de este tipo es que resulta muy sencillo inspeccionar su contenido y generarlos de acuerdo a nuestras necesidades.</p> <p>Para el caso de los archivos orientados a car\u00e1cter, hay que usar dos clases diferentes seg\u00fan si lo que se quiere es leer o escribir datos en un archivo. Normalmente esto no es muy problem\u00e1tico, ya que en un bloque de c\u00f3digo dado solo se llevar\u00e1n a cabo operaciones de lectura o de escritura sobre un mismo archivo, pero no los dos tipos de operaciones a la vez.</p> <p>Una diferencia importante a la hora de tratar con archivos respecto a leer datos del teclado es que las operaciones de lectura no son producto de una interacci\u00f3n directa con el usuario, que es quien escribe los datos. Solo se puede trabajar con los datos que hay en el archivo y nada m\u00e1s. Esto tiene dos efectos sobre el proceso de lectura:</p> <ol> <li>Por un lado, recuerda que cuando se lleva a cabo el proceso de lectura de una secuencia de valores, siempre hay que tener cuidado de usar el m\u00e9todo adecuado al tipo de valor que se espera que venga a continuaci\u00f3n . Qu\u00e9 tipo de valor se espera es algo que habr\u00e9is decidido vosotros a la hora de hacer el programa que escribi\u00f3 ese archivo, por lo que es vuestra responsabilidad saber qu\u00e9 hay que leer en cada momento. De todos modos nada garantiza que no se haya cometido alg\u00fan error o que el archivo haya sido manipulado por otro programa o usuario. Como operamos con archivos y no por el teclado, no existe la opci\u00f3n de pedir al usuario que vuelva a escribir el dato. Por lo tanto, el programa deber\u00eda decir que se ha producido un error ya que el archivo no tiene el formato correcto y finalizar el proceso de lectura.</li> <li>Por otra parte, tambi\u00e9n es necesario controlar que nunca se lean m\u00e1s valores de los que hay disponibles para leer. En el caso de la entrada de datos por el teclado el programa simplemente se bloqueaba y espera a que el usuario escribiera nuevos valores. Pero con archivos esto no sucede. Intentar leer un nuevo valor cuando el apuntador ya ha superado el \u00faltimo disponible se considera err\u00f3neo y lanzar\u00e1 una excepci\u00f3n. Para evitarlo, habr\u00e1 que utilizar alg\u00fan procedimiento que nos permita saber si se ha llegado al final de archivo en vez de suponer que siguen existiendo datos que leer.</li> </ol>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#lectura-de-archivo","title":"Lectura de archivo","text":"<p>En Kotlin demos leer el contenido de un archivo utilizando los m\u00e9todos est\u00e1ndar de la clase <code>java.io.File</code> o los m\u00e9todos que proporciona Kotlin como una extensi\u00f3n de <code>java.io.File</code>.</p> <p>Examinaremos programas de ejemplo para los m\u00e9todos de extensi\u00f3n, proporcionados por Kotlin a la clase <code>java.io.File</code> de Java, para leer el contenido de un archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofilebufferedreader-de-java","title":"Usar <code>java.io.File.bufferedReader()</code> de Java","text":"<p><code>BufferedReader</code> lee texto desde un flujo de entrada de caracteres, almacenando los caracteres para proporcionar una lectura eficiente de caracteres, arreglos y l\u00edneas.</p> <p>Se puede configurar espec\u00edficamente el tama\u00f1o del buffer, o usar el que se otorga por default, el cual es suficientemente grande para la mayor\u00eda de los casos.</p> <p>Dado que esta clase extiende de <code>Reader</code>, cada petici\u00f3n de lectura causa una petici\u00f3n de lectura del flujo de entrada, por lo que es aconsejable envolverla con la clase <code>InputStreamReader</code> o <code>FileReader</code>, seg\u00fan el prop\u00f3sito de la lectura.</p> <p>A continuaci\u00f3n podemos ver c\u00f3mo leer el contenido de un archivo en <code>BufferedReader</code>, El proceso es el siguiente:</p> <ol> <li>Prepare el objeto <code>File</code> con la ubicaci\u00f3n del archivo pasado como argumento al constructor de la clase de <code>File</code>.</li> <li><code>File.bufferedReader</code> devuelve un nuevo <code>BufferedReader</code> para leer el contenido del archivo.</li> <li>Utilice <code>BufferedReader.readLines()</code> para leer el contenido del archivo.</li> </ol> <p>Un ejemplo</p> <pre><code>import java.io.File\nfun main(args: Array&lt;String&gt;) {\nval file = File(\"input\" + File.separator + \"contents.txt\")\nval bufferedReader = file.bufferedReader()\nval text: List&lt;String&gt; = bufferedReader.readLines()\nfor (line in text) {\nprintln(line)\n}\n}\n</code></pre> <p>El contenido del archivo se imprime en la consola.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofileforeachline-de-kotlin","title":"Usar <code>java.io.File.forEachLine()</code> de Kotlin","text":"<p>Lee un archivo l\u00ednea por l\u00ednea en Kotlin. El proceso es el siguiente:</p> <ol> <li>Prepare el objeto <code>File</code> con la ubicaci\u00f3n pasada como argumento al constructor de la clase de <code>File</code>.</li> <li>Use la funci\u00f3n <code>File.forEachLine</code> y lea cada l\u00ednea del archivo.</li> </ol> <p>Un ejemplo</p> <pre><code>import java.io.File\nfun main(args: Array&lt;String&gt;) {\nval file = File(\"input\" + File.separator + \"contents.txt\")\nfile.forEachLine { println(it) }\n}\n</code></pre> <p>El contenido del archivo se imprime en la consola.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#oros-metodos-de-lectura","title":"Oros m\u00e9todos de lectura","text":"<p>Existen otras formas de leer archivos:</p> <ul> <li><code>File.inputStream().readBytes()</code>: Lee el contenido del archivo en InputStream</li> <li><code>File.readBytes()</code>: devuelve todo el contenido del archivo como ByteArray</li> <li><code>File.readLines()</code>: devuelve todo el contenido del archivo como una lista de l\u00edneas</li> <li><code>File.readText()</code>: devuelve todo el contenido del archivo como una sola cadena</li> <li><code>java.util.Scanner</code>: permite leer indicando el tipo de dato a leer.</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#escritura-en-archivo","title":"Escritura en archivo","text":"<p>Con en el lenguaje de programaci\u00f3n Kotlin tambien se puede escribir en un archivo. Por lo general, en los archivos orientados a caracteres se escriben cadenas de texto.</p> <p>Igual que para la lectura, haciendo uso de Kotlin podremos escribir en un archivo usando las funciones de extensi\u00f3n proporcionadas por Kotlin o tambi\u00e9n puede usar el c\u00f3digo Java existente que escribe contenido en un archivo.</p> <p>A continuaci\u00f3n veremos ejemplos de c\u00f3mo usar clases de Java como <code>PrintWriter</code> para escribir en un archivo y m\u00e1s ejemplos usando funciones de extensi\u00f3n de Kotlin.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofilebufferedwriter","title":"Usar <code>java.io.File.bufferedWriter</code>","text":"<p>Podemos usar la funci\u00f3n de extensi\u00f3n <code>java.io.File.bufferedWriter()</code> para obtener el objeto de escritura y luego usar la funci\u00f3n <code>write()</code> en el objeto de escritura para escribir contenido en el archivo.</p> <ol> <li>Tenga su contenido como una cadena.</li> <li>Pase el nombre del archivo al constructor de archivos (<code>File</code>).</li> <li>Luego llame al m\u00e9todo <code>bufferedWriter()</code> de la clase <code>File</code>.</li> <li>Haciendo uso de la funci\u00f3n <code>use()</code> (Veremos que ventajas nos proporciona hacer uso de ella), llama al m\u00e9todo <code>writer(content)</code> del bufer escritor devuelto por <code>bufferedWriter()</code>, y que se encarga de escribir el contenido en el archivo.</li> </ol> <pre><code>import java.io.File\n/**\n * Example to use File.bufferedWriter() in Kotlin to write content to a text file\n */\nfun main(args: Array&lt;String&gt;) {\n// content to be written to file\nvar content = \"Hello World. Welcome to Kotlin!!\"\n// write content to file\nFile(\"file.txt\").bufferedWriter().use { out -&gt;\nout.write(content)\n}\n}\n</code></pre> <p> Aplicamos la funci\u00f3n <code>use()</code> para garantizar que todos los recursos se liberen correctamente cuando hayamos terminado</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofilewritetext","title":"Usar <code>java.io.File.writeText()</code>","text":"<p>Si est\u00e1 escribiendo exclusivamente texto en un archivo, puede usar la funci\u00f3n de extensi\u00f3n <code>java.io.File.writeText()</code>.</p> <p>En el siguiente ejemplo, hemos usado esta funci\u00f3n de extensi\u00f3n de kotlin para escribir texto en un archivo.</p> <pre><code>import java.io.File\n/**\n * Example to use File.writeText in Kotlin to write text to a file\n */\nfun main(args: Array&lt;String&gt;) {\n// content to be written to file\nvar content = \"Hello World. Welcome to Kotlin!!\"\n// write content to file\nFile(\"file.txt\").writeText(content)\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaiofileprintwriter","title":"Usar <code>java.io.File.printWriter</code>","text":"<p>En este ejemplo, usaremos la funci\u00f3n de extensi\u00f3n de Kotlin <code>printWriter()</code> para la clase <code>java.io.File</code>. El siguiente es el proceso para escribir en el archivo.</p> <ol> <li>Tenga su contenido como una cadena.</li> <li>Pase el nombre del archivo al constructor de archivos (<code>File</code>).</li> <li>Luego llame al m\u00e9todo <code>printWriter()</code> de la clase <code>File</code>.</li> <li>Haciendo uso de la funci\u00f3n <code>use()</code>(Veremos que ventajas nos proporciona hacer uso de ella), llama al m\u00e9todo <code>println(content)</code> del escritor devuelto por <code>printWriter()</code>, y que se encarga de escribir el contenido en el archivo.</li> </ol> <pre><code>import java.io.File\n/**\n * Example to use File.printWriter in Kotlin to write content to a text file\n */\nfun main(args: Array&lt;String&gt;) {\n// content to be written to file\nvar content = \"Hello World. Welcome to Kotlin!!\"\n// write content to file\nFile(\"file.txt\").printWriter().use { out -&gt;\nout.println(content)\n}\n}\n</code></pre>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#usar-javaioprintwriter","title":"Usar <code>java.io.PrintWriter</code>","text":"<p>En este ejemplo, tomamos una cadena y la escribimos en un archivo usando la clase <code>java.io.PrintWriter</code>. Para ello se siguen los siguientes pasos.</p> <ol> <li>Tenga sus datos listos como una cadena en una variable.</li> <li>Inicialice un objeto escritor de la clase <code>PrintWriter</code>.</li> <li>Agregue la cadena al archivo usando la funci\u00f3n <code>PrintWriter.append()</code>.</li> <li>Cerrar el escritor.</li> </ol> <pre><code>import java.io.PrintWriter\n/**\n * Example to use standard Java method in Kotlin to write content to a text file\n */\nfun main(args: Array&lt;String&gt;) {\n// content to be written to file\nvar content = \"Hello World. Welcome to Kotlin!!\"\n// using java class java.io.PrintWriter\nval writer = PrintWriter(\"file.txt\")\nwriter.append(content)\nwriter.close()\n}\n</code></pre> <p>En los ejemplso, se crear\u00e1 un nuevo archivo con el nombre <code>file.txt</code>, como se especifica para el argumento de <code>PrintWriter()</code>, con el contenido. Si el archivo ya est\u00e1 presente, primero se borra el contenido del archivo y luego se escribe el nuevo contenido en el archivo.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#oros-metodos-de-escritura","title":"Oros m\u00e9todos de escritura","text":"<p>Existen otras formas de leer archivos:</p> <ul> <li><code>java.io.FileWriter</code>: Escribe en un archivo haciendo uso del m\u00e9todo <code>writer()</code>.</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#archivos-binarios","title":"Archivos binarios.","text":"<p>Los Data Stream (Flujos de datos) se utilizan para escribir datos binarios. <code>DataOutputStream</code> escribe datos binarios de tipos primitivos(<code>Int</code>, <code>Long</code>, <code>String</code>) mientras que <code>DataInputStream</code> lee datos del flujo binario y los convierte en tipos primitivos.</p> <p>A continuaci\u00f3n veremos un programa de ejemplo que escribe datos en un archivo y luego los vuelve a leer a memoria para finalmente imprimirlos por salida est\u00e1ndar.</p> <pre><code>import java.io.DataInputStream\nimport java.io.DataOutputStream\nimport java.io.FileInputStream\nimport java.io.FileOutputStream\nfun main(args : Array&lt;String&gt;){\nval burgers = \"data.burgers\"\n//Open the file in binary mode\nDataOutputStream(FileOutputStream(burgers)).use { dos -&gt;\nwith(dos){\n//Notice we have to write our data types\nwriteInt(\"Bob is Great\\n\".length) //Record length of the array\nwriteChars(\"Bob is Great\\n\") //Write the array\nwriteBoolean(true) //Write a boolean\nwriteInt(\"How many burgers can Bob cook?\\n\".length) //Record length of array\nwriteBytes(\"How many burgers can Bob cook?\\n\") //Write the array\nwriteInt(Int.MAX_VALUE) //Write an int\nfor (i in 0..5){\nwriteByte(i) //Write a byte\nwriteDouble(i.toDouble()) //Write a double\nwriteFloat(i.toFloat()) //Write a float\nwriteInt(i) //Write an int\nwriteLong(i.toLong()) //Write a long\n}\n}\n}\n//Open a binary file in read mode. It has to be read in the same order\n//in which it was written\nDataInputStream(FileInputStream(burgers)).use {dis -&gt;\nwith (dis){\nval bobSize = readInt() //Read back the size of the array\nfor (i in 0 until bobSize){\nprint(readChar()) //Print the array one character at a time\n}\nprintln(readBoolean()) //Read a boolean\nval burgerSize = readInt() //Length of the next array\nfor (i in 0 until burgerSize){\nprint(readByte().toChar()) //Print array one character at a time\n}\nprintln(readInt()) //Read an int\nfor (i in 0..5){\nprintln(readByte()) //Read a byte\nprintln(readDouble()) //Read a double\nprintln(readFloat()) //Read a float\nprintln(readInt()) //Read an int\nprintln(readLong()) //Read a long\n}\n}\n}\n}\n</code></pre> <p>El programa crea un objeto <code>FileOutputStream</code>, para ello pasa el nombre del archivo a su constructor. Luego, el objeto <code>FileOutputStream</code> se pasa como par\u00e1metro al constructor de <code>DataOutputStream</code>. </p> <p>Hacemos uso de la funci\u00f3n <code>use()</code> para garantizar que todos los recursos se liberen correctamente cuando hayamos terminado. El archivo ahora est\u00e1 abierto para escritura en modo binario.</p> <p>Cuando deseamos usar el mismo objeto repetidamente, podemos pasarlo a la funci\u00f3n <code>with()</code>. En nuestro caso, tenemos la intenci\u00f3n de seguir usando nuestro objeto <code>DataOutputStream</code>, por lo que en la l\u00ednea 11, lo pasamos a la funci\u00f3n <code>with()</code>. Dentro de la funci\u00f3n <code>with()</code>, todas las llamadas a m\u00e9todos apuntar\u00e1n al objeto <code>dos</code> ya que se proporcion\u00f3 a <code>with()</code> como par\u00e1metro.</p> <p> Cuando deseamos usar un mismo objeto repetidamente, podemos pasarlo a la funci\u00f3n <code>with()</code>. Cuando un objeto es pasado a la funci\u00f3n <code>with()</code>, dentro de esta, todas las llamadas a m\u00e9todos apuntar\u00e1n al objeto que se le ha pasado por par\u00e1metro.</p> <p>Siguiendo con el ejemplo, dado que tenemos la intenci\u00f3n de escribir un <code>String</code> en el archivo, necesitamos registrar la longitud de la cadena, ya que de otra forma no sabriamos cuantos bytes se han escrito. Hacemos esto usando la funci\u00f3n <code>writeInt</code> y pas\u00e1ndole la longitud de nuestra cadena. Luego podemos usar <code>writeChars()</code> para escribir un string, puesto que el argumento <code>String</code> se convierte en una matriz de caracteres. Finalmente, llamamos a <code>writeBoolean()</code> para escribir valores <code>true</code>/<code>false</code> en el archivo.</p> <p>La siguiente secci\u00f3n es una repetici\u00f3n de la primera. Tenemos la intenci\u00f3n de escribir otro <code>String</code> en el archivo, pero al hacerlo, necesitamos registrar la longitud en el archivo. Una vez m\u00e1s, recurrimos a <code>writeInt()</code> para registrar un valor <code>int</code>. En la siguiente l\u00ednea, usamos <code>writeBytes()</code> en lugar de <code>writeChars()</code> para demostrar c\u00f3mo podemos escribir una matriz de bytes en lugar de una cadena. La clase <code>DataOutputStream</code> se ocupa de los detalles de convertir un <code>String</code> en una matriz de bytes. Finalmente, escribimos otro valor int en la secuencia.</p> <p>A continuaci\u00f3n, se ejecuta un ciclo <code>for</code> en la l\u00ednea 21. Dentro del ciclo <code>for</code>, demostramos como escribir diferentes tipos primitivos en el archivo. Podemos usar <code>writeByte()</code> para un <code>byte</code>, <code>writeDouble()</code> para un <code>double</code>, y as\u00ed sucesivamente para cada tipo primitivo. La clase <code>DataOutputStream</code> conoce el tama\u00f1o de cada tipo primitivo y escribe el n\u00famero correcto de bytes para cada primitivo.</p> <p>Cuando terminamos de escribir el objeto, lo abrimos nuevamente para leerlo. La l\u00ednea 33 crea un objeto <code>FileInputStream</code> que acepta la ruta al archivo en su constructor. El objeto <code>FileInputStream</code> est\u00e1 encadenado a <code>DataInputStream</code> pas\u00e1ndolo al constructor de <code>DataInputStream</code>. Aplicamos la funci\u00f3n <code>use()</code> para garantizar que todos los recursos est\u00e9n correctamente cerrados.</p> <p>La lectura del archivo requiere que el archivo se lea en el mismo orden en que se escribe. Nuestra primera orden por tanto, deber\u00eda ser tomar el tama\u00f1o de la matriz de caracteres que escribimos en el archivo anteriormente. Usamos <code>readInt()</code> en la l\u00ednea 35 seguido de un ciclo <code>for</code> que termina en el tama\u00f1o de la matriz en la l\u00ednea 36. Cada iteraci\u00f3n del ciclo <code>for</code> llama a <code>readChar()</code> y la cadena se imprime en la consola. Cuando terminamos, leemos un booleano en la l\u00ednea 39.</p> <p>Nuestra siguiente matriz fue una matriz de bytes. Una vez m\u00e1s, necesitamos su tama\u00f1o final, por lo que llamamos a <code>readInt()</code> en la l\u00ednea 41. Las l\u00edneas 42-44 recorren la matriz y llaman a <code>readByte()</code> hasta que finaliza el bucle. Cada <code>byte</code> se convierte en un objeto de car\u00e1cter mediante <code>toChar()</code>. En la l\u00ednea 45, leemos un <code>int</code> usando <code>readInt()</code>.</p> <p>La parte final del programa repite el ciclo for encontrado anteriormente. En este caso, se hace uso de un bucle <code>for</code> que termina despu\u00e9s de cinco iteraciones (l\u00ednea 47). Dentro de este, se llama a los m\u00e9todos <code>readByte()</code>, <code>readDouble()</code>, <code>readFloat()</code>, y as\u00ed sucesivamente. Despu\u00e9s de cada llamada se imprime el valor recuperado en la consola.</p>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.4.-LecturaEscritura/#fuente","title":"Fuente","text":"<ul> <li>Apuntes de programaci\u00f3n de Joan Arnedo Moreno (Institut Obert de Catalunya, IOC)</li> <li>Apuntes de programaci\u00f3n de Natividad Prieto, Francisco Marqu\u00e9s y Javier Piris (E.T.S. de Inform\u00e1tica, Universidad Polit\u00e9cnica de Valencia).</li> <li>Apuntes de programaci\u00f3n de Jose Luis Comesa\u00f1a.</li> <li>Create File</li> <li>Kotlinn data streams</li> <li>Read File</li> <li>Inputstream to String</li> </ul>","tags":["Software","File"]},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/","title":"7.5.-GUI","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#interface-grafica-de-usuario-vs-cli","title":"Interface gr\u00e1fica de usuario vs CLI","text":"<p>La Interfaz gr\u00e1fica de usuario o GUI (Graphic User Interface) es el entorno visual de im\u00e1genes y objetos mediante el cual una m\u00e1quina y un usuario interact\u00faan. A mediados de los setentas las GUI comenzaron a sustituir a las interfaces de l\u00ednea de comando (CLI), y esto permiti\u00f3 que la interacci\u00f3n con las computadoras fuera m\u00e1s sencilla e intuitiva.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#para-que-sirven-las-interfaces-graficas-de-usuario","title":"\u00bfPara qu\u00e9 sirven las Interfaces gr\u00e1ficas de usuario?","text":"<p>Su funci\u00f3n principal es simplificar la comunicaci\u00f3n entre una m\u00e1quina o un sistema operativo y un usuario. Antes de que se desarrollaran y popularizaron las GUI, solo las personas con conocimientos profundos de inform\u00e1tica pod\u00edan usar un computador, pero las interfaces gr\u00e1ficas sustituyeron la complejidad de los comandos por acciones predeterminadas simbolizadas por elementos visuales muy sencillos de comprender. A mediados de los ochentas, Mac se convirti\u00f3 en el referente de las interfaces gr\u00e1ficas amigables desarrollando equipos con funciones muy complejas pero \u201ctan f\u00e1ciles de usar como una tostadora\u201d, y por esas mismas fechas Microsoft lanz\u00f3  Windows 1.0, un sistema operativo que se caracterizaba por tener una interfaz gr\u00e1fica similar, lo que le vali\u00f3 una demanda millonaria de parte de Apple. Una buena GUI no solo es importante para los programas, sistemas operativos y aplicaciones. Se estima que el 68% de los visitantes que abandonan un sitio web lo hacen debido a que la experiencia de usuario, incluyendo la Interfaz, no est\u00e1 optimizada para sus necesidades y expectativas.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#cuales-son-los-elementos-de-la-interfaz-grafica-de-usuario","title":"\u00bfCu\u00e1les son los elementos de la Interfaz gr\u00e1fica de usuario?","text":"<p>Las interfaces gr\u00e1ficas de usuario integraron en sus inicios una novedad que hoy en d\u00eda es de uso corriente: el mouse o rat\u00f3n, que fung\u00eda como puntero para se\u00f1alar y seleccionar los diferentes elementos de la GUI, que tradicionalmente se categorizaron como ventanas, iconos o carpetas. Hoy en d\u00eda los elementos visuales (widgets) de una interfaz son muy similares en esencia, s\u00f3lo que cada d\u00eda los dise\u00f1adores tratan de hacerlos m\u00e1s amigables e intuitivos. Adem\u00e1s, los dispositivos m\u00f3viles no requieren de rat\u00f3n o puntero pues cuentan con pantallas t\u00e1ctiles. </p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#como-crear-una-buena-interfaz-grafica-de-usuario","title":"\u00bfC\u00f3mo crear una buena Interfaz gr\u00e1fica de usuario?","text":"<p>Una buena GUI se caracteriza por:</p> <ul> <li>Ser sencilla de comprender y usar</li> <li>La curva de aprendizaje es acelerada y es f\u00e1cil recordar su funcionamiento</li> <li>Los elementos principales son muy identificables</li> <li>Facilitar y predecir las acciones m\u00e1s comunes del usuario</li> <li>La informaci\u00f3n est\u00e1 adecuadamente ordenada mediante men\u00fas, iconos, barras, etc.</li> <li>Las operaciones son r\u00e1pidas, intuitivas y reversibles</li> <li>La interfaz expresa claramente el estado del sistema o las operaciones, y brinda elementos de ayuda.</li> <li>La navegabilidad y la usabilidad son \u00f3ptimas.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#caracteristicas-generales-de-la-gui","title":"Caracter\u00edsticas generales de la GUI:","text":"<ul> <li>Facilidad</li> <li>Dise\u00f1o ergon\u00f3mico mediante el uso de men\u00fas, barras de acciones o \u00edconos</li> <li>Operaciones r\u00e1pidas, reversibles; que sea de cambios inmediatos</li> <li>Contiene herramientas de ayuda que orientan al usuario.</li> </ul> <p>Para la realizaci\u00f3n de un buen desarrollo GUI, se debe tener en cuenta:</p> <ul> <li>Consistencia:  Todos los elementos de la GUI se deben regir por las mismas normas</li> <li>Palabras y legibilidad:  Uso de colores y fuentes adecuadas, uso correcto de may\u00fasculas y min\u00fasculas</li> <li>Color: Tener en cuenta el significado de los colores, que \u00e9stos permitan la legibilidad y que den una buena apariencia en la pantalla</li> <li>Accesibilidad:  Debe ser accesible en lo posible a todos teniendo en cuenta discapacidades</li> <li>Necesidades de los usuarios:  Los usuarios deben encontrar lo que buscan</li> <li>Contenidos:  Deben ser fiables</li> <li>Funcionalidad:  Debe reducir los pasos para la realizaci\u00f3n de una acci\u00f3n</li> <li>Sistema de b\u00fasqueda: Debe contar con diferentes maneras de realizar la b\u00fasqueda</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#quienes-son-responsables-de-la-interfaz-grafica-de-usuario","title":"\u00bfQui\u00e9nes son responsables de la Interfaz gr\u00e1fica de usuario?","text":"<p>Detr\u00e1s de cualquier Interfaz gr\u00e1fica de usuario existe un programa, sistema operativo o aplicaci\u00f3n. Por eso, la GUI suele ser un trabajo en conjunto entre desarrolladores y dise\u00f1adores que buscan la mejor manera de que el usuario pueda interactuar con el programa mediante elementos visuales f\u00e1ciles de comprender.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#entornos-graficos","title":"Entornos gr\u00e1ficos","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-multiplataforma","title":"Aplicaciones multiplataforma","text":"<p>Las aplicaciones multiplataforma son aquellas destinadas a dispositivos m\u00f3viles,  aplicaciones de escritorio u otro tipos de sistemas embebidos.</p> <p>Para programar los entornos gr\u00e1ficos de estas aplicaciones es necesario un Software Development Kit o SDK, que es un conjunto de herramientas que, entre otras cosas, hacen posible la creaci\u00f3n de los elementos necesarios para una interfaz. Estos SDK pueden ser:</p> <ul> <li>Oficiales: los proporcionan los fabricantes, como por ejemplo iOS SDK de Apple.</li> <li>Alternativos: desarrollados por terceros, como GTK+ o Qt.</li> <li>Multiplataforma: tambi\u00e9n desarrollado por terceros, algunos disponen de bindings para que se usen en varios sistemas como GTK+ o Qt o nativos al lenguajes como Swing de Java.</li> </ul> <p>En los siguientes apartados destacaremos algunos de los lenguajes y librer\u00edas que se utilizan actualmente en estas plataformas.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-moviles","title":"Aplicaciones m\u00f3viles","text":"<p>Android tiene como lenguaje oficial para crear sus aplicaciones Java (JVM), lo que hace que este sea uno de los lenguajes m\u00e1s utilizados para el desarrollo en este sistema. Aunque Kotlin, creado por JetBrains es 100% compatible con la JVM y todas las librer\u00edas, ha sido nombrado por google lenguaje cooficial aportando adem\u00e1s simplicidad en el c\u00f3digo.</p> <p>Por otro lado, las aplicaciones desarrolladas para iOS pueden utilizar Objetive-C o Swift, una alternativa al primero creado por Apple, con mejor rendimiento y totalmente compatible con todos los dispositivos de Apple.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-de-escritorio-y-sistemas-embebidos","title":"Aplicaciones de escritorio y sistemas embebidos","text":"<p>Este tipo de aplicaciones se suelen desarrollar con Java o C++ generalmente.</p> <p>Java junto con la librer\u00eda gr\u00e1fica Swing que ya viene incluida en su JDK, forman un combo con el que podemos desarrollar este tipo de aplicaciones.</p> <p>C++ junto con Qt tambi\u00e9n son utilizados de forma nativa para crear interfaces gr\u00e1ficas en varias plataformas, adem\u00e1s destacar que es utilizado por el entorno de escritorio GNU/Linux: KDE.</p> <p>Python es un lenguaje emergente que se est\u00e1 imponiendo en muchos \u00e1mbitos de la programaci\u00f3n, entre ellos las aplicaciones de escritorio y sistemas embebidos. Este lenguaje dispone de una comunidad muy grande y activa que desarrolla binding para poder utilizar las librer\u00edas gr\u00e1ficas como GTK, Qt y Swing.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#videojuegos","title":"Videojuegos","text":"<p>Los videojuegos son un tipo de aplicaci\u00f3n muy demandada en la actualidad, con suficiente entidad como para distinguirlos de los tipos de aplicaciones anteriores.</p> <p>Uno de los lenguajes m\u00e1s utilizados en este sector es C# junto con la herramienta Unity, que proporciona un editor, un motor para la f\u00edsica 2D y la f\u00edsica 3D, renderizado, animaci\u00f3n, audio, etc. Esta potente herramienta no solo se utiliza para el desarrollo de videojuegos, sino para crear experiencias en realidad virtual y cortos animados. Unity adem\u00e1s permite la exportaci\u00f3n del trabajo a multitud de plataformas, como m\u00f3viles, videoconsolas, ordenadores, etc.</p> <p>Otro de los lenguajes m\u00e1s utilizados para este prop\u00f3sito es Java junto con frameworks como LibGDX o JMonkeyEngine y Python con el framework Pygame.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#aplicaciones-web","title":"Aplicaciones web","text":"<p>Aunque en el mundo web los primeros navegadores eran en modo texto y a\u00fan siguen existiendo (como Lynx), la web en s\u00ed es gr\u00e1fica. Se suele emplear el t\u00e9rmino front-end para la parte del cliente, es decir, el entorno gr\u00e1fico de una aplicaci\u00f3n web y back-end para la parte del servidor con la que se gestionan todos los datos. Centr\u00e1ndonos en el front-end, podremos distinguir tres pilares b\u00e1sicos que pasamos a definir a continuaci\u00f3n:</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#contenido-html","title":"Contenido: HTML","text":"<p>HTML (Hypertext Markup Languaje) es un lenguaje de marcado o etiquetado, el cual sirve para definir estructuras y contenido en la web. La diferencia con un lenguaje de programaci\u00f3n es que no dispone de las variables ni estructuras que afectan al comportamiento como condicionales, bucles etc.</p> <p>Al igual que otros lenguajes, HTML tambi\u00e9n ha evolucionado con el paso del tiempo, siendo la versi\u00f3n actual HTML5, que incorpora algunos elementos respecto a su versi\u00f3n anterior que hace que las aplicaciones web sean m\u00e1s diversas y funcionales, a\u00f1adiendo tambi\u00e9n sem\u00e1ntica a algunos de sus elementos.</p> <p>Por ejemplo, en HTML5 algunas de las estructuras para definir los elementos gr\u00e1ficos del entorno son:</p> <ul> <li>Radio button: <code>&lt;input type=\u201dradio\u201d&gt;</code></li> <li>Listas desplegables: <code>&lt;select&gt;&lt;option&gt;...&lt;/option&gt;...&lt;/select&gt;</code></li> <li>Bot\u00f3n: <code>&lt;button&gt;&lt;/button&gt;</code></li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#estilos-css","title":"Estilos: CSS","text":"<p>CSS (Cascading Style Sheets) es un lenguaje de dise\u00f1o gr\u00e1fico que permite personalizar la presentaci\u00f3n de un documento escrito en un lenguaje de marcado, como HTML, al cual est\u00e1 muy ligado.</p> <p>Estos dos lenguajes se almacenan en ficheros alojados en un servidor. Cuando alg\u00fan cliente como un navegador hace una consulta a una p\u00e1gina web, el servidor devuelve estos ficheros y es el navegador, cuando los recibe, el que se encarga de interpretar el contenido de ambos lenguajes para mostrar la p\u00e1gina tal y como la vemos.</p> <p>La versi\u00f3n actual es CSS3, la cual destaca respecto de su versi\u00f3n anterior en incorporar algunos estilos muy demandados por la comunidad como el redondeo de esquinas en los elementos, gradiente, transiciones, animaciones y las Media-Queries, muy populares actualmente para satisfacer la cantidad de tama\u00f1os y resoluciones de pantallas en las que una aplicaci\u00f3n web puede cargarse (m\u00f3viles, tablets, pcs, etc) y conseguir un dise\u00f1o responsivo.</p> <p>Por \u00faltimo, destacamos Bootstrap, un framework front-end para CSS utilizado en las empresas que se dedican al desarrollo web con el que poder construir interfaces responsivas.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#logica-javascript","title":"L\u00f3gica: JavaScript","text":"<p>JavaScript es un lenguaje de alto nivel que aporta l\u00f3gica y dinamismo a la parte front-end de las aplicaciones web, por ejemplo, las acciones que se desencadenan en la aplicaci\u00f3n cuando un usuario utiliza un buscador, un formulario, un calendario, etc. Adem\u00e1s, juega un papel muy importante a la hora de validar datos antes de enviarlos al servidor, evitando la carga excesiva de este.</p> <p>La librer\u00eda jQuery es \u00e1mpliamente utilizada en el mundo web ya que a trav\u00e9s de ella se simplifica mucho el c\u00f3digo nativo que escribimos con JavaScript, por lo que escribiendo el mismo c\u00f3digo en jQuery conseguimos el mismo resultado.</p> <p>Por otro lado, encontramos la librer\u00eda React, creada por Facebook, que se centra en la creaci\u00f3n de interfaces de usuario interactivas de forma sencilla.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#compose-introduccion","title":"Compose: Introducci\u00f3n","text":"<p>Jetpack Compose es la nueva forma de programar interfaces de usuario propuesta por Google en 2019.</p> <p>Google liber\u00f3 su versi\u00f3n Beta en Febrero de 2021. Podemos empezar ya a incluir Jetpack Compose en nuestras apps ya que Google ha anunciado que la especificaci\u00f3n del API no variar\u00e1.</p> <p>Esta tecnolog\u00eda sigue la misma direcci\u00f3n que Swift UI o Flutter usando un paradigma declarativo. Esto es un buen s\u00edntoma, ya que diferentes plataformas siguen una misma direcci\u00f3n.</p> <p>Jetpack Compose se convertir\u00e1 en el nuevo est\u00e1ndar de desarrollo de interfaces de usuario en Android. Jetbrains ha trabajado para traer este mismo est\u00e1ndar:</p> <ul> <li>Al Escritorio con Compose for Desktop, con ejemplos de c\u00f3digo en github.</li> <li>A la web, con Compose for Web, con ejemplos de c\u00f3digo en github.</li> </ul> <p>Las ventajas principales de Jetpack Compose son:</p> <ul> <li>Menos c\u00f3digo para construir interfaces.</li> <li>C\u00f3digo mucho m\u00e1s intuitivo.</li> <li>Facilidad a la hora de reutilizar componentes.</li> <li>Programaci\u00f3n de vistas en Kotlin.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#programacion-imperativa-vs-declarativa","title":"Programaci\u00f3n Imperativa vs Declarativa","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#imperativa","title":"Imperativa:","text":"<p>Se define paso a paso la casu\u00edstica de la aplicaci\u00f3n, es decir, cuando se pinta algo, cuando cambia de color, etc.... Se indica a trav\u00e9s del c\u00f3digo lo que tiene que hacer y como tiene que hacerlo.</p> <p>Manipular las vistas de forma manual</p> <ul> <li>Aumenta la probabilidad de errores:</li> <li>Es f\u00e1cil olvidarse de actualizar estados de vistas.</li> <li>Es f\u00e1cil crear estados ilegales (conflicto de actualizaciones)</li> <li>El mantenimiento de los estados de las vistas se hace complejo.</li> </ul> <p>La mayor\u00eda de las veces usamos un paradigma imperativo a la hora de programar aplicaciones, aunque la industria est\u00e1 migrando a un modelo de UI declarativo:</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#declarativa","title":"Declarativa:","text":"<p>Con Jetpack Compose tenemos que cambiar nuestra mentalidad para empezar a utilizar un paradigma declarativo:</p> <ul> <li>Nuestra interfaz de usuario estar\u00e1 controlada por distintos estados que se ir\u00e1n actualizando.</li> <li>Cada vez que un estado cambie, la interfaz se refrescar\u00e1 y se producir\u00e1 una recomposici\u00f3n.</li> <li>Para lidiar con la recomposici\u00f3n, tendremos que contemplar todos los posibles estados con anterioridad.</li> <li>Es costoso en t\u00e9rminos computacionales: Recomposici\u00f3n.</li> <li>Aunque al principio parezca m\u00e1s complicado, este paradigma reduce la inconsistencia de estados, favorece la legibilidad del c\u00f3digo y la reutilizaci\u00f3n de los componentes.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#composicion","title":"Composici\u00f3n","text":"<p>La composici\u00f3n consiste en la reconstrucci\u00f3n de los componentes que forma la interface de usuario hasta reconstruir la interface completa. En Compose, las funciones que se encargan de esta reconstrucci\u00f3n se anotan con <code>@Composable</code>, es decir, todas las funciones que admiten composici\u00f3n deben ser anotadas con <code>@Composable</code>.</p> <p>Las funciones @Composable:</p> <ul> <li>Son funciones que reciben datos y emiten elementos de UI</li> <li>Pueden usar sentencias <code>for</code>, <code>if</code>, etc. para genera la potencia del lenguaje.</li> <li>Pueden aceptar par\u00e1metros. La l\u00f3gica de la aplicaci\u00f3n describe la UI.</li> <li>No est\u00e1n ligadas a ninguna clase, pueden ser definidas en cualquier sitio.</li> <li>Deben empezar por letra may\u00fascula, ya que estas funciones act\u00faan como widgets.</li> </ul> <p>Por ejemplo, <code>Text()</code> es tambi\u00e9n una funci\u00f3n que admite composici\u00f3n y que se encarga de crear el elemento caja de texto en la UI.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#modo-preview","title":"Modo Preview","text":"<p>En Android existe una vista previa para los ficheros XML de Android que representan la interface gr\u00e1fica. En compose tambi\u00e9n existe un modo preview para el c\u00f3digo que construimos <code>@Preview</code>. El funcionamiento del modo preview puede varias entre Jetpack Compose y Compose Desktop.</p> <p>IntelliJ IDEA facilitar\u00e1 el preview de las vistas marcadas con esta anotaci\u00f3n. Tenemos tres tipos de modo de maquetaci\u00f3n: Code, Split (vista recomendada) y Design. Split y Design incorporan un modo interactivo (Interactive) que permite al desarrollador interactuar con la interfaz al igual que si estuviese interactuando con la aplicaci\u00f3n.</p> <p>Por tanto, para que nuestra interfaz aparezca en el modo interactivo tenemos que crear una funci\u00f3n <code>@Composable</code> y anotarla con la anotaci\u00f3n <code>@Preview</code>.</p> <pre><code>@Preview(showBackground = true)  @Composable  fun DefaultPreview() {  MyApplicationTheme {  Greeting(\"mates!!\")\n}  }\n</code></pre> <p>Recuerda anotar con <code>@Preview</code> el mismo c\u00f3digo que le pasas a la funci\u00f3n <code>setContent</code> o en la funci\u00f3n <code>application</code>/<code>singleWindowApplication</code> dependiendo de si es Android o Desktop respectivamente. De esta forma siempre podr\u00e1s ver en la previsualizaci\u00f3n el contenido final de la pantalla.</p> <pre><code>setContent {  MyApplicationTheme {  Surface(color = MaterialTheme.colors.background) {  Greeting(\"mates!!\")  }  }\n}\n</code></pre> <p>Si la pantalla de preview desaparece, recuerda cerrar la clase y volver a abrirla. El IDE realiza un an\u00e1lisis de c\u00f3digo sobre la clase en busca de una funci\u00f3n marcada con <code>@Preview</code> para lanzar la previsualizaci\u00f3n.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#primeros-componentes","title":"Primeros componentes","text":"<p>Como hemos comentado, Jetpack Compose se basa en funciones \"componibles\", anotadas con <code>@Composable</code>. Estas funciones permiten definir la interfaz de usuario de tu aplicaci\u00f3n mediante la descripci\u00f3n de c\u00f3mo deber\u00eda verse y proporcionando dependencias de datos, en lugar de centrarse en el proceso de construcci\u00f3n de la interfaz de usuario (inicializar un elemento, adjuntarlo a un padre, etc.).</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#mostrar-etiquetas","title":"Mostrar etiquetas:","text":"<p>Como se puede observar en el c\u00f3digo de abajo, la funci\u00f3n <code>Greeting()</code> contiene un elemento  <code>Text()</code>, y esta tambi\u00e9n es una funci\u00f3n etiquetada con <code>@Composable</code>.</p> <pre><code>@Composable  fun Greeting(name: String) {  Text(text = \"Hello $name!\")  }\n</code></pre> <p>Repecto al c\u00f3digo anterior, podemos decir:</p> <ul> <li><code>Text()</code> es una funci\u00f3n propia del SDK de Android que admite composici\u00f3n.</li> <li><code>Text()</code> admite por par\u00e1metro argumentos como  <code>text</code>, <code>modifier</code>, <code>color</code>, <code>fontSize</code> , etc.</li> <li>Dichos par\u00e1metros pueden ser requeridos (como en el caso de  <code>text</code>) o no requeridos con valores por defecto (<code>color</code>, <code>modifier</code>). Consulta los par\u00e1metros de la funci\u00f3n <code>Text()</code>.</li> </ul> <p>Siempre que cambiemos valores de la interfaz, recuerda usar la opci\u00f3n Build Refresh para actualizar los valores en la Preview.</p> <p>Se pueden incluir las funciones Compose definidas directamente en la funci\u00f3n <code>setContent</code> y en Desktop en la funci\u00f3n <code>application</code>/<code>singleWindowApplication</code>. El bloque <code>setContent</code>/<code>application</code>/<code>singleWindowApplication</code> define el dise\u00f1o de la interface, por tanto, en este bloque, llamaremos a las funciones componibles. Las funciones componibles solo se pueden llamar desde otras funciones componibles.</p> <pre><code>class MainActivity : ComponentActivity() {  override fun onCreate(savedInstanceState: Bundle?) {  super.onCreate(savedInstanceState)  setContent {  Text(text = \"Hello mates!!\")  }  }  }\n</code></pre> <p>En Compose Desktop, el contenido tendr\u00e1 que ir dentro de la funci\u00f3n <code>application</code>, punto de entrada para la aplicaci\u00f3n, y que a la vez recibe un componente <code>@Composable</code>, normalmente un componente <code>Window</code>. Como puedes apreciar no hay rastros de <code>Activity</code>, ni de <code>setContent</code>.</p> <p>Un Ejemplo de lo anterior:</p> <pre><code>fun main() = application {\nWindow(onCloseRequest = ::exitApplication) {\nApp()\n}\n}\n</code></pre> <p>y la funci\u00f3n <code>App</code> estar\u00e1 definida como <code>@Composable</code>.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#creacion-de-un-boton-y-manejo-de-eventos","title":"Creaci\u00f3n de un bot\u00f3n y manejo de eventos","text":"<p>Al igual que <code>Text()</code> , <code>Button()</code> es otra funci\u00f3n composable ofrecida por el SDK de Android.</p> <pre><code>@Composable  fun GreetingButton() {  Button(onClick = {  // Do something  \n}) {\n}  }\n</code></pre> <p>Uno de los par\u00e1metros que recibe la funci\u00f3n <code>Button()</code> es la funci\u00f3n bajo el argumento <code>onClick</code>, que act\u00faa como callback, y que ser\u00e1 notificado cada vez que se produzca un evento click sobre el bot\u00f3n.</p> <p>Button tiene como argumento una funci\u00f3n lambda, que admite composici\u00f3n, llamada <code>RowScope</code>. Mediante esta funci\u00f3n podemos a\u00f1adir textos, iconos, im\u00e1genes, etc, ya que <code>Button()</code> no tiene ning\u00fan contenido por defecto.</p> <pre><code>@Composable  fun GreetingButton() {  Button(onClick = {  // Do something  \n}) {  GreetingText(name = \"mates!\")  }  }\n</code></pre> <p><code>RowScope</code> es un contenedor de elementos de forma horizontal. Si a\u00f1adimos m\u00e1s componentes al<code>RowScope</code> del componente <code>Button()</code> \u00e9stos se alinear\u00e1n consecutivamente de forma horizontal.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#modificar-componentes","title":"Modificar componentes","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#modifiers","title":"Modifiers","text":"<p>Todos los elementos Composable que ofrece el SDK de Android aceptan un par\u00e1metro llamado <code>modifier</code>.</p> <p><code>Modifier</code> es una clase est\u00e1tica a la que se puede acceder sin necesidad de ser instanciada y desde cualquier lugar de nuestra aplicaci\u00f3n. Tiene funciones para especificar par\u00e1metros como la anchura, altura, el tama\u00f1o total, padding, etc, de un componente.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier.width(80.dp))  }\n</code></pre> <p>Los m\u00e9todos de <code>Modifier()</code> implementan method chaining pattern de forma que permiten concatenar varias llamadas a m\u00e9todos en la misma cadena pudiendo establecer varios par\u00e1metros en una \u00fanica expresi\u00f3n.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .width(80.dp)  .height(240.dp))  }\n</code></pre> <p>Los valores para <code>width()</code>, <code>height()</code>, y otras funciones, se establece en <code>DP</code>. Los <code>DP</code> son objetos de la inline class <code>DP</code>.</p> <p>Como alternativa, usando el m\u00e9todo <code>size()</code> podemos establecer valores para la anchura y para la altura de un componente, pas\u00e1ndole valores DP.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .size(width = 80.dp, height = 240.dp))  }\n</code></pre> <p>Si no se indican los par\u00e1metros de <code>width()</code>, <code>height()</code>, el mismo valor ser\u00e1 aplicado para ambos par\u00e1metros haciendo que el componente sea cuadrado.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .size(80.dp))  }\n</code></pre> <p><code>fillMaxSize</code> permite al componente ocupar todo el espacio que ocupa su componente padre.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .fillMaxSize())  }\n</code></pre> <p><code>fillMaxHeight</code> permite al componente ocupar todo el espacio en altura que ocupa su componente padre. La anchura se mantiene como <code>wrap_content</code>.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .fillMaxHeight())  }\n</code></pre> <p><code>fillMaxWidth</code> permite al componente ocupar todo el espacio en anchura que ocupa su componente padre. La altura se mantiene como <code>wrap_content</code>.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .fillMaxWidth())  }\n</code></pre> <p><code>fillMaxWidth()</code> y <code>fillMaxHeight()</code> aceptan como argumento fracciones (de <code>0</code> a <code>1</code>) que indican el m\u00e1ximo espacio que queremos que ocupe nuestro componente dentro de su componente padre.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .fillMaxWidth(0.5f))  }\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#eventos-de-click-padding-y-orden-de-modificadores","title":"Eventos de click, padding y orden de modificadores","text":"<p>La clase <code>Modifier</code> permite hacer cualquier componente Compose clickable. Al igual que en el caso del componente  <code>Button()</code> , <code>Modifier</code> acepta una funci\u00f3n como par\u00e1metro del m\u00e9todo <code>clickeable()</code> que se invocar\u00e1 cada vez que se produzca un evento de click sobre el componente.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .width(80.dp)  .height(240.dp)  .clickable {  //Do something  \n})  }\n</code></pre> <p>Recuerda que activando la opci\u00f3n Interactive Mode de la preview de Compose (en la ruta: <code>File -&gt; Settings -&gt; Experimental</code>, al ser experimental puede no aparecer o fallar) podr\u00e1s ver c\u00f3mo tu elemento ahora se resalta cuando es seleccionado indicando que se puede hacer click sobre \u00e9l.</p> <p>Puedes a\u00f1adir padding (El padding es un espacio situado entre los bordes de la vista y su contenido) a tu componente usando el m\u00e9todo <code>padding()</code> del <code>Modifier</code>. El valor se establece en <code>DP</code>.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .padding(all = 20.dp)  )  }\n</code></pre> <p>El m\u00e9todo <code>padding()</code> puede ser aplicado a todos los lados del componente usando all o indicar el lado o los lados espec\u00edficos:  top ,  start , bottom y end donde se desee aplicar.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .width(80.dp)  .height(240.dp)  .clickable {  //Do something  \n})\n.padding(top = 20.dp)\n}\n</code></pre> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .width(80.dp)  .height(240.dp)  .clickable {  //Do something  \n})\n.padding(top = 20.dp, bottom = 20.dp)\n}\n</code></pre> <p>El orden de los modificadores importa. Si se aplica el m\u00e9todo <code>padding()</code> como \u00faltimo elemento de la cadena el componente <code>Text()</code>* ser\u00e1 clickable en su totalidad, incluyendo las dimensiones del padding. Si el m\u00e9todo es aplicado antes que el m\u00e9todo <code>clickeable()</code> la zona clickable del componente excluir\u00e1 el padding indicado.</p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello $name!\",  modifier = Modifier  .width(80.dp)  .height(240.dp)\n.padding(top = 20.dp, bottom = 20.dp)  .clickable {  //Do something  \n})\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#customizar-un-componente","title":"Customizar un componente","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#textstyle","title":"TextStyle","text":"<p>La clase <code>TextStyle</code> permite customizar aspectos de un componente Composable:</p> <ul> <li>Color del texto.</li> <li>Tama\u00f1o del texto.</li> <li>Tipograf\u00eda.</li> <li>Espacio entre letras.</li> <li>Indentaci\u00f3n.</li> <li>etc.</li> </ul> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello: $name\",  style = TextStyle(  color = Color.Red,  fontWeight = FontWeight.SemiBold,  fontSize = 18.sp)  )  }\n</code></pre> <p>Jetpack Compose ya provee de estilos, llamados Material Design (consulta la URL), y como hemos comentado ya est\u00e1n predefinidos para poder usar en nuestros componentes a trav\u00e9s de la clase <code>MatherialTheme</code>. Los siguientes estilos son de la clase <code>TextStyle</code>:</p> <ul> <li><code>h1</code>.</li> <li><code>h2</code>.</li> <li><code>button</code>.</li> <li><code>caption</code>.</li> <li><code>body</code>.</li> <li>etc.</li> </ul> <p>Podemos aplicar un <code>style</code> de tipo <code>TextStyle</code> predefinido como por ejemplo <code>MaterialTheme.typography.h5</code> y sobrescribir alg\u00fan par\u00e1metro concreto por ejemplo el <code>fontWeight</code> haciendo uso de los valores ya predefinidos como <code>FontWeight.SemiBold</code></p> <pre><code>@Composable  fun GreetingText(name: String) {  Text(text = \"Hello: $name\",  style = MaterialTheme.typography.h5,  fontWeight = FontWeight.SemiBold  )  }\n</code></pre> <p><code>FontWeight</code> y <code>MatherialTheme</code> son una clase companion object de Kotlin, en las que todos sus componentes son est\u00e1ticos y accesible desde los componentes.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#contenedores","title":"Contenedores","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#layouts-el-componente-surface","title":"Layouts: El componente <code>Surface</code>","text":"<p>El componente <code>Surface()</code> es un componente <code>@Componsable</code> que representa un bloque de UI que podemos a\u00f1adir a nuestra interfaz y que puede tener color, modificadores, etc. y contener otros componentes, en concreto uno, a trav\u00e9s de una lamda. Si no le aplicamos modificadores no tendr\u00e1 dimensiones y no podr\u00e1 verse en la pantalla, por tanto aplicamos <code>fillMaxWidth()</code>. Este componente puede formar nuestro componente principal <code>MainScreen</code> <code>@Composable</code> en la que ir colocando otros componentes.</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {\n//Aqu\u00ed un componente\n}  }\n</code></pre> <p>Podemos a\u00f1adir otros componentes dentro de <code>Surface()</code>.</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Text(  text = \"Hi mates!!\",  style = MaterialTheme.typography.h5,  modifier = Modifier.wrapContentSize()  )  }  }\n</code></pre> <p><code>Text()</code> utiliza el m\u00e9todo <code>wrapContentSize()</code> como modificador que indica que use solo el espacio necesario para pintar su contenido, en este caso <code>Hi mates!</code>. <code>wrapContentSize()</code> aplicar\u00e1 una alineaci\u00f3n autom\u00e1tica en <code>Surface()</code>, <code>Alignment.Center</code>, y situar\u00e1 el componente <code>Text()</code>en el centro del componente. Aunque esto se puede cambiar haciendo uso de la clase <code>Alignment</code>, ya que tiene multitud de valores para posicionar un componente dentro de su componente padre.</p> <p>Tambi\u00e9n podemos anidar componentes <code>Surface()</code>.</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Surface(  color = Color.Green,  modifier = Modifier.wrapContentSize(Alignment.TopEnd)  ) {  Text(  text = \"Hi mates!!\",  style = MaterialTheme.typography.h5,\nmodifier = Modifier.padding(20.dp)\n)  }  }\n}\n</code></pre> <p>Anidando componentes de esta forma se puede establecer un background para el componente <code>Text()</code>. El modificador <code>wrapContentSize()</code> puede moverse ahora al componente padre <code>Surface()</code>, y por tanto, este componente <code>Surface()</code> ocupar\u00e1 solo lo que ocupe el componente <code>Text()</code> que contiene.</p> <p>Recordamos que el componente <code>Surface()</code> acepta un solo componente hijo. M\u00e1s adelante veremos c\u00f3mo a\u00f1adir varios componentes dentro de un componente padre.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#otros-contenedores","title":"Otros contenedores","text":"<p>Para situaciones en las que se tengan m\u00e1s de un componente hijo, Jetpack Compose ofrece los componentes: Row, Column y Box :</p> <ul> <li>Row: Componente que puede albergar contenido de forma horizontal.</li> <li>Column: Componente que puede albergar contenido de forma vertical.</li> <li>Box: Componente que permite tener componentes encima o debajo de otros componentes de forma sencilla.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#row","title":"Row","text":"<p>Al igual que  Button, Row contiene un RowScope que nos indica que podemos a\u00f1adir componentes que admiten composici\u00f3n en su interior. Como indicamos anteriormente, dichos componentes se alinear\u00e1n de forma horizontal.</p> <p>A continuaci\u00f3n, se muestra un ejemplo de componente Row con dos componentes Surface cuadrados que se alinean horizontalmente:</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Row {  Surface(  color = Color.Green,  modifier = Modifier.size(60.dp)  ) {}  Surface(  color = Color.Black,  modifier = Modifier.size(60.dp)  ) {}  } }}\n</code></pre> <p>Si vemos los argumentos que acepta el componente Row podemos observar dos muy interesantes: verticalAlignment y horizontalArrangement .</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#verticalalignment","title":"verticalAlignment","text":"<p>Mediante este argumento podemos indicar c\u00f3mo queremos posicionar los hijos de nuestro componente Row con respecto a la l\u00ednea vertical. Este argumento solo acepta par\u00e1metros del tipo Alignment.Vertical (valores como: Top, CenterVertically y Bottom ).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos de posicionan centrados verticalmente con CenterVertically :</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Row(verticalAlignment = Alignment.CenterVertically) {  Surface(  color = Color.Green,  modifier = Modifier.size(60.dp)  ) {}  Surface(  color = Color.Black,  modifier = Modifier.size(60.dp)  ) {}  }\n}\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#horizontalarrangement","title":"<code>horizontalArrangement</code>","text":"<p>Este argumento nos permite indicar c\u00f3mo disponer los elementos hijos en la l\u00ednea horizontal. Acepta valores de la clase <code>Arrangement.Horizontal</code> (valores como: <code>Start</code>, <code>End</code> o <code>Center</code>).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos se posicionan centrados verticalmente y horizontalmente con <code>Arrangement.Center</code>:</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Row(  verticalAlignment = Alignment.CenterVertically,\nhorizontalArrangement = Arrangement.Center  ) {  Surface(  color = Color.Green,  modifier = Modifier.size(60.dp)  ) {}  Surface(  color = Color.Black,  modifier = Modifier.size(60.dp)  ) {}  }\n}\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#column","title":"<code>Column</code>","text":"<p>Como indicamos anteriormente, el componente <code>Column</code> alberga hijos de forma vertical.</p> <p>A continuaci\u00f3n, se muestra un ejemplo de componente <code>Column</code> con dos componentes <code>Surface</code> cuadrados que se alinean verticalmente:</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Column {  Surface(  color = Color.Green,  modifier = Modifier.size(60.dp)  ) {}  Surface(  color = Color.Black,  modifier = Modifier.size(60.dp)  ) {}  } }\n}\n</code></pre> <p>De forma similar al componente <code>Row</code>, <code>Column</code> acepta los siguientes argumentos: <code>horizontalAlignment</code> y <code>verticalArrangement</code>.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#horizontalalignment","title":"<code>horizontalAlignment</code>","text":"<p>Mediante este argumento podemos indicar c\u00f3mo queremos posicionar los hijos de nuestro componente <code>Column</code> con respecto a la l\u00ednea horizontal. Este argumento solo acepta par\u00e1metros del tipo <code>Alignment.Horizontal</code> (valores como: <code>Start</code>, <code>CenterHorizontally</code> y <code>End</code>).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos se posicionan centrados horizontalmente con <code>CenterHorizontally</code>:</p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Column(  horizontalAlignment = Alignment.CenterHorizontally  ) {  Surface(  color = Color.Green,  modifier = Modifier.size(60.dp)  ) {}  Surface(  color = Color.Black,  modifier = Modifier.size(60.dp)  ) {}  } }\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#verticalarrangement","title":"<code>verticalArrangement</code>","text":"<p>Este argumento permite indicar c\u00f3mo disponer los elementos hijos en la l\u00ednea vertical. Acepta valores de la clase <code>Arrangement.Vertical</code> (valores como: <code>Top</code>, <code>Bottom</code>o<code>Center</code>).</p> <p>En el c\u00f3digo que se muestra a continuaci\u00f3n los hijos se posicionan centrados verticalmente y horizontalmente con <code>Arrangement.Center</code></p> <pre><code>@Composable  fun MainScreen() {  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  Column(  horizontalAlignment = Alignment.CenterHorizontally,  verticalArrangement = Arrangement.Center  ) {  Surface(  color = Color.Green,  modifier = Modifier.size(60.dp)  ) {}  Surface(   color = Color.Black,  modifier = Modifier.size(60.dp)  ) {}  }\n}\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#reusar-componentes","title":"Reusar componentes","text":"<p>Tomando como ejemplo uno de los c\u00f3digos vistos anteriormente, podemos observar que los hijos de <code>Column</code> son dos cuadrados representados con un componte <code>Surface</code> que son iguales y estamos a\u00f1adiendo c\u00f3digo repetitivo.</p> <pre><code>@Composable\nfun MainScreen() {\nSurface(\ncolor = Color.LightGray,\nmodifier = Modifier.fillMaxSize()\n) {\nColumn {\nSurface(\ncolor = Color.Green,\nmodifier = Modifier.size(60.dp)\n) {}\nSurface(\ncolor = Color.Black,\nmodifier = Modifier.size(60.dp)\n) {}\n}\n}\n}\n</code></pre> <p>El componente <code>Surface</code> puede abstraerse en una funci\u00f3n de composici\u00f3n espec\u00edfica y ser reutilizado de una forma mucho m\u00e1s sencilla.</p> <p>Abstracci\u00f3n en componente <code>MySquare</code>:</p> <pre><code> @Composable\nfun MySquare() {\nSurface(\ncolor = Color.Green,\nmodifier = Modifier.size(60.dp)\n) {}\n}\n</code></pre> <p>Utilizaci\u00f3n de componente <code>MySquare</code>:</p> <pre><code>@Composable\nfun MainScreen() {\nSurface(\ncolor = Color.LightGray,\nmodifier = Modifier.fillMaxSize()\n) {\nColumn {\nMySquare()\nMySquare()\nMySquare()\n}\n}}\n</code></pre> <p>Podemos parametrizar nuestro nuevo componente <code>MySquare</code> pas\u00e1ndole como argumento el color.</p> <pre><code>@Composable\nfun MySquare(color: Color) {\nSurface(\ncolor = color,\nmodifier = Modifier.size(60.dp)\n) {}\n}\n@Composable\nfun MainScreen() {\nSurface(\ncolor = Color.LightGray,\nmodifier = Modifier.fillMaxSize()\n) {\nColumn {\nMySquare(Color.Red)\nMySquare(Color.Yellow)\nMySquare(Color.Green)\n}\n}\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#como-funciona-state","title":"C\u00f3mo funciona State","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#recomposicion","title":"Recomposici\u00f3n","text":"<p>La recomposici\u00f3n es el proceso que se encarga de actualizar la pantalla, en concreto, los componentes que admiten composici\u00f3n.</p> <p>Para lanzar la recomposici\u00f3n es indispensable tener una implementaci\u00f3n de <code>State</code>  para cada componente composable, al menos para los que tienen un estado que cambia o puede cambiar a lo largo del tiempo.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#state","title":"State","text":"<p>El <code>State</code> de una aplicaci\u00f3n se puede definir como cualquier valor o dato que puede cambiar a lo largo del tiempo, ya sea por un evento click en una lista, una entrada de datos en un formulario de texto, etc.</p> <p>En Jetpack Compose <code>State</code> es un componente m\u00e1s del propio componente composable.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#flujo-de-datos-unidireccional","title":"Flujo de datos unidireccional","text":"<p>El flujo de UI en Jetpack Compose puede pensarse como un bucle en el que se dispara un evento que actualiza un <code>State</code>, por ejemplo, un click a un bot\u00f3n que desencadena la actualizaci\u00f3n de una lista. Este nuevo valor de <code>State</code> pasa por todo el \u00e1rbol de la UI de elementos composables vinculados a ese <code>State</code>, es decir, que deben tener en cuenta los posibles valores de dicho <code>State</code> y actualizar la UI.</p> <p>.</p> <p>Este flujo de <code>Event</code> - <code>State</code> es unidireccional lo que proporciona ciertas ventajas como:</p> <ul> <li>Mayor testeabilidad : <code>State</code> est\u00e1 desacoplado de la UI, es muy f\u00e1cil hacer tests de ambas partes de forma aislada.</li> <li>Mayor consistencia en la UI : Este flujo obliga a que todos los <code>State</code> sean reflejados en la UI de forma continua eliminando las posibles inconsistencias entre los componentes visuales y los estados.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#controlar-state-en-una-lista","title":"Controlar State en una lista","text":"<p>Partimos de un componente <code>MainScreen</code> que contiene una lista <code>StudentList</code> de componentes <code>StudentText</code> y un <code>Button</code> que a\u00f1ade nuevos elementos a la lista de estudiantes.</p> <p><code>MainScreen</code></p> <pre><code>@Composable\nfun MainScreen() {\nSurface(\ncolor = Color.LightGray,\nmodifier = Modifier.fillMaxSize()\n) {\nStudentList()\n}\n}\n</code></pre> <p><code>StudentList</code></p> <pre><code>@Composable\nfun StudentList() {\nval students = mutableListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\")\nColumn(\nmodifier = Modifier.fillMaxSize(),\nhorizontalAlignment = Alignment.CenterHorizontally\n) {\nfor (student in students) {\nStudentText(name = student)\n}\nButton(\nonClick = { students.add(\"Miguel\") },\n) {\nText(text = \"Add new student\")\n}\n}\n}\n</code></pre> <p><code>StudentText</code></p> <pre><code>@Composable\nfun StudentText(name: String) {\nText(\ntext = name,\nstyle = MaterialTheme.typography.h5,\nmodifier = Modifier.padding(10.dp)\n)\n}\n</code></pre> <p>Si activamos el modo interactivo y pulsamos el bot\u00f3n a\u00f1adir podemos observar c\u00f3mo la lista no a\u00f1ade el nuevo valor aunque modifiquemos la lista de estudiantes. Esto es debido a que no se ha implementado ning\u00fan <code>State</code> a la lista de datos que dispare la recomposici\u00f3n.</p> <p>Para a\u00f1adir <code>State</code> a la lista es necesario crear la lista del tipo <code>SnapshotStateList</code> a trav\u00e9s del m\u00e9todo <code>mutableStateListOf</code></p> <pre><code>val studentsState = mutableStateListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\")\n</code></pre> <p>Observamos que el compilador nos obliga a utilizar el bloque <code>remember</code>. Este bloque permite que el estado sea recordado durante la recomposici\u00f3n y que no desaparezca despu\u00e9s.</p> <pre><code>val studentsState = remember { mutableStateListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\") }\n</code></pre> <p>Finalmente, la funci\u00f3n StudentList queda de esta forma:</p> <pre><code>@Composable\nfun StudentList() {\nval studentsState = remember { mutableStateListOf(\"Juan\", \"Victor\", \"Esther\", \"Jaime\") }\nColumn(\nmodifier = Modifier.fillMaxSize(),\nhorizontalAlignment = Alignment.CenterHorizontally\n) {\nfor (student in studentsState) {\nStudentText(name = student)\n}\nButton(\nonClick = { studentsState.add(\"Miguel\") },\n) {\nText(text = \"Add new student\")\n}\n}\n}\n</code></pre> <p>Si activamos ahora el modo interactivo y pulsamos el bot\u00f3n a\u00f1adir vemos c\u00f3mo el nuevo elemento se a\u00f1ade de forma satisfactoria al final de la lista.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-patron-state-hoisting","title":"El patr\u00f3n State Hoisting","text":"<p>El patr\u00f3n State Hosting consiste en mover los estados al componente padre de tal forma que los hijos nunca tengan que manejarlos.</p> <p>El principal objetivo es reemplazar la variable de estado por dos argumentos en cada funci\u00f3n composable hija:</p> <ul> <li><code>value: T</code> El valor para mostrar.</li> <li><code>onValueChange: (T) -&gt; Unit</code> Evento (lambda) que dispara la modificaci\u00f3n del <code>State</code>.</li> </ul> <p>El patr\u00f3n State Hosting ofrece las siguientes ventajas:</p> <ul> <li>Manejar los estados de forma \u00fanica y centralizada.</li> <li>Solo las funciones que manejan estados pueden modificarlos.</li> <li>Funciones composable hijas no tienen que preocuparse por manejar estados, solo:</li> <li>pintar informaci\u00f3n: Los datos tiene un flujo top-down</li> <li>elevar eventos: Los eventos tiene un flujo bottom-up.</li> </ul> <p></p> <p>Mas informacion</p> <p>A continuaci\u00f3n, vamos a aplicar el patr\u00f3n State Hosting a la aplicaci\u00f3n de alumnos de la lecci\u00f3n anterior. Para ello, seguiremos los siguientes pasos:</p> <ul> <li>Mover la lista de estudiantes al punto de entrada <code>MainScreen</code>.</li> <li>Parametrizar la funci\u00f3n <code>StudentList</code> con el valor a mostrar y la funci\u00f3n lambda de eventos de click.</li> </ul> <p>Modificamos la funci\u00f3n:</p> <pre><code>@Composable\nfun StudentList(students: List&lt;String&gt;, onButtonClick: () -&gt; Unit) {\nColumn(\nmodifier = Modifier.fillMaxSize(),\nhorizontalAlignment = Alignment.CenterHorizontally\n) {\nfor(student in students) {\nStudentText(name = student)\n}\nButton(\nonClick = onButtonClick,\n) {\nText(text = \"Add new student\")\n}\n}\n}\n</code></pre> <p>Y modificamos el c\u00f3digo en la que se hace uso de esta funci\u00f3n:</p> <pre><code>@Composable  fun MainScreen() {  val studentsState = remember { mutableStateListOf(\"Esther\", \"Jaime\") }  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  StudentList(studentsState) {  studentsState.add(\"Miguel\")  }  }\n}\n</code></pre> <p>Como podemos observar en el c\u00f3digo, el componente <code>StudentList</code> ya no sabe nada sobre estados. Le hemos aplicado las dos premisas del patr\u00f3n State Hoisting la parametrizaci\u00f3n de la lista de estudiantes y la funci\u00f3n para elevar los eventos de click del bot\u00f3n a\u00f1adir. Ahora es el componente <code>MainScreen</code> el encargado de manejar estados y de modificarlos.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-componente-textfield-con-state","title":"El componente <code>TextField</code> con State","text":"<p>El componente <code>TextField</code> es el equivalente al componente <code>EditText</code> de Android tradicional.</p> <p>En esta lecci\u00f3n veremos c\u00f3mo manejar correctamente el estado de este componente a trav\u00e9s de <code>State</code>.</p> <p>Vamos a iterar nuestra aplicaci\u00f3n de a\u00f1adir alumnos incorporando un campo de introducci\u00f3n de texto <code>TextField</code> que permita al usuario escribir el nombre del alumno.</p> <p>Cuando usamos <code>TextField</code>, es pr\u00e1cticamente obligatorio hacerlo de la mano de <code>State</code> de forma que podamos ver c\u00f3mo el valor del componente cambia cada vez que se introduce texto tal y como se muestra a continuaci\u00f3n:</p> <pre><code>val newStudentState = remember { mutableStateOf(\"\")}  TextField(  value = newStudentState.value,  onValueChange = {  newInput -&gt; newStudentState.value = newInput  }  )\n</code></pre> <p>Como vemos en el c\u00f3digo anterior, se usa <code>mutableStateOf</code> para guardar el estado del componente <code>TextField</code>.</p> <p>Podr\u00edamos incorporar este snippet de c\u00f3digo en nuestro componente <code>StudentList</code> pero implementaremos State Hoisting para no manejar estados en componentes internos y elevarlos al componente <code>MainScreen</code>.</p> <pre><code>@Composable  fun StudentList(\nstudents: List&lt;String&gt;,  onButtonClick: () -&gt; Unit,  studentName: String,  onStudentNameChange: (String) -&gt; Unit  ) {  Column(  modifier = Modifier.fillMaxSize(),  horizontalAlignment = Alignment.CenterHorizontally  ) {  for (student in students) {  StudentText(name = student)  }  TextField(  value = studentName,  onValueChange = onStudentNameChange  )  Button(  onClick = onButtonClick\n) {  Text(text = \"Add new student\")  } }\n}\n</code></pre> <p>En el c\u00f3digo anterior se puede observar como parametrizamos <code>StudentList</code> con los siguientes argumentos:</p> <ul> <li><code>studentName: String</code> Contiene el valor del <code>TextField</code>. Como veremos en <code>MainScreen</code> a continuaci\u00f3n, hace referencia a un <code>State</code>.</li> <li><code>onStudentNameChange: (String)-&gt;Unit</code> lambda que eleva el valor del componente <code>TextField</code> cuando cambia.</li> </ul> <pre><code>@Composable  fun MainScreen() {  val studentsState = remember { mutableStateListOf(\"Esther\", \"Jaime\") }  val newStudentState = remember { mutableStateOf(\"\") }  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  StudentList(  studentsState,  { studentsState.add(newStudentState.value) },  newStudentState.value,  { newStudent -&gt; newStudentState.value = newStudent }  )  }  }\n</code></pre> <ul> <li><code>newStudentState: MutableState</code> el valor de <code>TextField</code> es un <code>State</code> y todas las variaciones que se produzcan sobre \u00e9l disparar\u00e1n la recomposici\u00f3n.</li> <li>Vemos como en las lambdas <code>onButtonClick</code> y <code>onStudentNameChange</code> se inserta un valor en la lista de estudiantes y se modifica el valor del componente <code>TextField</code> respectivamente.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#viewmodel-y-livedata-dam","title":"<code>ViewModel</code> y <code>LiveData</code> (DAM)","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#introduccion-a-viewmodel-y-livedata","title":"Introducci\u00f3n a <code>ViewModel</code> y <code>LiveData</code>","text":"<p>En lecciones anteriores vimos el patr\u00f3n State Hoisting y c\u00f3mo elevar los estados lo m\u00e1s arriba posible dentro de la jerarqu\u00eda de componentes composables.</p> <p>El siguiente objetivo es evitar que nuestras vistas (<code>Fragments</code> y <code>Activities</code>) sean las encargadas de manejar estados y trasladar dicha responsabilidad al componente <code>ViewModel</code></p> <p><code>Fragments</code> y <code>Activities</code> son vistas usadas en Jetpack Compose Android.</p> <p><code>ViewModel</code> y <code>LiveData</code> son componentes de Jetpack y forman parte de la arquitectura Model View-View Model (MVVM) propuesta por Google para el desarrollo de aplicaciones Android.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#viewmodel","title":"<code>ViewModel</code>","text":"<ul> <li>Es responsable de preparar y manejar estados para la UI (<code>Fragments</code> y <code>Activities</code>). Tiene una relaci\u00f3n directa con la vista para mostrar los datos.</li> <li>Mediante el uso de <code>ViewModel</code> seremos capaces de desacoplar la l\u00f3gica de presentaci\u00f3n de los componentes de UI.</li> <li><code>ViewModel</code> est\u00e1 directamente relacionado con el modelo de los datos que se van a mostrar en la vista. Esto es debido a que <code>ViewModel</code> es parte de la arquitectura  MVVM .</li> <li>La vista espera un estado de UI proporcionado por <code>ViewModel</code> y, a su vez, <code>ViewModel</code> podr\u00e1 actualizar dicho estado de UI si se producen eventos desde la vista.</li> <li>En resumen, la vista podr\u00e1 recibir actualizaciones del estado de UI desde el <code>ViewModel</code>.</li> <li>En esta arquitectura, la vista no pregunta por el estado de la UI al <code>ViewModel</code> continuamente. Tiene la posibilidad de subscribirse al componente <code>LiveData</code> dentro de <code>ViewModel</code></li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#livedata","title":"<code>LiveData</code>","text":"<ul> <li><code>LiveData</code> es un componente observable, permite que otros componentes se suscriban a \u00e9l con el fin de ser notificados si se produce alg\u00fan cambio.</li> <li><code>LiveData</code> contiene un estado y su principal responsabilidad es avisar a sus suscriptores cuando dicho estado cambie.</li> <li><code>Fragments</code> y <code>Activities</code> pueden suscribirse a un componente <code>LiveData</code> para ser notificados siempre que se produzca una actualizaci\u00f3n sobre un <code>State</code>.</li> <li>Si se produce un evento y el <code>State</code> relacionado con el componente <code>LiveData</code> cambia, los <code>Fragments</code> y <code>Activities</code> suscritos a \u00e9l ser\u00e1n notificados al mismo tiempo.</li> <li><code>LiveData</code> est\u00e1 pendiente del ciclo de vida de <code>Fragments</code> y <code>Activities</code>. Si estos van a un estado <code>onDestroy</code> el componente <code>LiveData</code> cierra y destruye la conexi\u00f3n con ellos autom\u00e1ticamente.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#state-en-viewmodel","title":"<code>State</code> en <code>ViewModel</code>","text":"<p>Partimos de una aplicaci\u00f3n que contiene un componente <code>TextField()</code> y un componente <code>Text()</code> que refleja los cambios que se producen en <code>TextField()</code> cuando el usuario introduce texto en \u00e9l.</p> <p><code>MainScreen</code></p> <pre><code>@Composable  fun MainScreen() {  val nameState = remember { mutableStateOf(\"\") }  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  MainLayout(  nameState.value  ) { newName -&gt; nameState.value = newName }  }\n}\n</code></pre> <p><code>MainLayout</code></p> <pre><code>@Composable  fun MainLayout(  name: String,  onTextFieldChange: (String) -&gt; Unit  ) {  Column(  modifier = Modifier.fillMaxSize(),  horizontalAlignment = Alignment.CenterHorizontally  ) {  TextField(  value = name,  onValueChange = onTextFieldChange  )  Text(text = name)  }  }\n</code></pre> <p>El siguiente paso ser\u00e1 mover <code>nameState</code> a un componente <code>ViewModel</code>. Para ello, creamos una nueva clase <code>MainViewModel</code> que herede de <code>ViewModel</code> como se muestra a continuaci\u00f3n:</p> <pre><code>class MainViewModel: ViewModel() {  val textFieldState = MutableLiveData(\"\")  fun onTextChange(newText: String) {  textFieldState.value = newText  }  }\n</code></pre> <p><code>textFieldState: MutableLiveData</code> refleja ahora el estado del dato al cual nuestra UI tendr\u00e1 que suscribirse para recibir actualizaciones.</p> <p>A trav\u00e9s del m\u00e9todo p\u00fablico <code>onTextChange</code>, la UI mandar\u00e1 el evento de cambio de texto que genere el componente <code>TextField</code>.</p> <p>Para leer los datos de nuestro nuevo <code>MainViewModel</code> desde la vista <code>MainScreen</code> tendremos que modificar el componente de la siguiente forma:</p> <pre><code>@Composable  fun MainScreen(viewModel: MainViewModel = MainViewModel()) {  val nameState = viewModel.textFieldState.observeAsState(\"\")  Surface(  color = Color.LightGray,  modifier = Modifier.fillMaxSize()  ) {  MainLayout(  nameState.value  ) { newName -&gt; viewModel.onTextChange(newName) }  }\n}\n</code></pre> <p>El valor de <code>nameState</code> proviene ahora del componente <code>LiveData</code> definido en nuestro nuevo <code>MainViewModel</code>.</p> <p>Necesitamos que <code>nameState</code> sea un <code>State</code> y no un <code>LiveData</code>. Para conseguir esto, hay que a\u00f1adir una nueva dependencia a nuestro fichero <code>build.gradle</code>, permitiendo el uso del m\u00e9todo <code>observeAsState</code> encargado de la conversi\u00f3n a <code>State</code>:</p> <pre><code>implementation \"androidx.compose.runtime:runtime-livedata:$compose_version\"\n</code></pre> <p>Los eventos de <code>TextField</code> recogidos en la lambda son enviados ahora a nuestro <code>MainViewModel</code> y a su vez notificados a <code>LiveData</code> a trav\u00e9s del m\u00e9todo <code>onTextChange</code>.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#listas-y-theming","title":"Listas y Theming","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#listas-con-lazy-composable","title":"Listas con Lazy Composable","text":"<p>En lecciones anteriores vimos c\u00f3mo implementar listas de elementos a trav\u00e9s de los componentes Column y  Row .</p> <p>Cuando el n\u00famero de elementos a mostrar es grande, es preferible usar componentes Lazy Composable como LazyColumn o  LazyRow . Las ventajas de usar estos componentes son:</p> <ul> <li>Implementaci\u00f3n de scroll de forma autom\u00e1tica.</li> <li>Reciclaje de elementos de la lista.</li> <li>Mismos principios que el componente  RecyclerView .</li> </ul> <p>La diferencia entre LazyColumn y LazyRow es la orientaci\u00f3n en la que se integran sus elementos y se desplazan.</p> <p>LazyColumn produce un desplazamiento vertical mientras que LazyRow produce un desplazamiento horizontal.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#lazylistscope","title":"LazyListScope","text":"<p>Al igual que Column y  Row , los componentes Lazy Composable ofrecen un Scope para a\u00f1adir contenido.</p> <p>En el caso de  LazyListScope , se ofrece un conjunto de funciones para a\u00f1adir elementos a la lista.</p> <pre><code>LazyColumn {  // Add a single item  \nitem {  Text(text = \"First item\")  }  // Add 3 items  \nitems(3) { index -&gt;  Text(text = \"Item: $index\")  }  // Add another single item  \nitem {  Text(text = \"Last item\")  }  }\n</code></pre> <ul> <li>item : Agrega un solo elemento a la lista.</li> <li>items(N) : Agrega varios elementos a la lista.</li> </ul> <pre><code>@Composable  funMessageList(messages: List&lt;String&gt;) {  LazyColumn {  items(messages) { message -&gt;  MessageRow(message)  }\n}\n}  @Composable  funMessageRow(message: String) {  Text(text = message)  }\n</code></pre> <p>Como vemos en el c\u00f3digo anterior, existen funciones de extensi\u00f3n que permiten agregar colecciones de elementos como  List .</p> <p>Para agregar padding alrededor de los bordes del contenido de la lista, el componente permite a\u00f1adir par\u00e1metros del tipo PaddingValues al par\u00e1metro contentPadding como se muestra a continuaci\u00f3n:</p> <pre><code>LazyColumn(  contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),  ) {  // ...  \n}\n</code></pre> <p>En este ejemplo, se agregan 16.dp de padding a los bordes horizontales (izquierda y derecha) y 8.dp al principio y al final del contenido.</p> <p>Para agregar espaciado entre elementos, puede usarse  Arrangement.spacedBy . En el siguiente ejemplo, se agregan 4.dp de espacio entre cada elemento:</p> <pre><code>LazyColumn(  verticalArrangement = Arrangement.spacedBy(4.dp),  ) {  // ...  \n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#card-image-y-coil","title":"Card, Image y Coil","text":""},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-componente-card","title":"El componente Card","text":"<p>El componente Card es el equivalente del componente  CardView . Este componente sirve para mostrar contenido y acciones de un tema determinado aceptando para ello elementos como im\u00e1genes o texto. Puedes visitar la documentaci\u00f3n de Material Design para obtener m\u00e1s informaci\u00f3n sobre el uso de este componente.</p> <p>Card acepta un atributo elevation que hace que el componente tenga una elevaci\u00f3n sobre el eje Z dando una sensaci\u00f3n de profundidad y estableciendo un sombreado sobre su vista padre.</p> <pre><code>@Composable  fun CardItem() {  Card(  Modifier\n.padding(10.dp)  .fillMaxWidth(),  elevation = 10.dp\n) {  Column(  Modifier.padding(10.dp)  ) {  Text(text = \"Hello OpenWebinars\")  Text(text = \"This is a card test\")  }  }\n}\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#el-componente-image","title":"El componente Image","text":"<p>El componente Image es el equivalente de  ImageView . Permite cargar im\u00e1genes en Android. Recibe por par\u00e1metro:</p> <ul> <li>painter : Recurso gr\u00e1fico que se pintar\u00e1 en el componente.</li> <li>contentDescription : Corresponde con la descripci\u00f3n de la imagen. Ser\u00e1 le\u00eddo por herramientas de accesibilidad.</li> </ul>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#coil","title":"Coil","text":"<p>Coil es una librer\u00eda de carga de im\u00e1genes para Android. Est\u00e1 implementada usando coroutines y es muy ligera y f\u00e1cil de integrar en Jetpack Compose.</p> <p>Para su integraci\u00f3n hay que incluir la dependencia: implementation(\u201cio.coil-kt::coil-compose::1.3.2\u201d)</p> <p>Como es una librer\u00eda que permite la carga de im\u00e1genes de red es indispensable a\u00f1adir el permiso de **INTERNET al fichero AndroidManifest.xml.**</p> <pre><code>Image(  \n    painter = rememberImagePainter(\"https://images.dog.ceo/breeds/bulldog-boston/n02096585_1761.jpg\"),  \n    contentDescription = \"This is a beautiful dog\",  \n)</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#theming","title":"Theming","text":"<p>En esta lecci\u00f3n se explica c\u00f3mo estilizar una aplicaci\u00f3n Android de forma sencilla usando Jetpack Compose con la ayuda de  Material Theming .</p> <p>Tradicionalmente, para definir temas en Android, se usa el fichero themes.xml pero con Jetpack Compose todo se resuelve a nivel de clases Kotlin.</p> <p>A continuaci\u00f3n, se detalla c\u00f3mo customizar colores, tipograf\u00edas y formas de manera sencilla con solo unas pocas l\u00edneas de c\u00f3digo.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#materialtheme","title":"MaterialTheme","text":"<p>La clase MaterialTheme define estilos bas\u00e1ndose en los principios de Material Design. En Jetpack Compose, esta clase est\u00e1 disponible como una funci\u00f3n que admite composici\u00f3n en la cual se pueden customizar los valores por defecto.</p> <pre><code>@Composable\nfun MaterialTheme(\ncolors: Colors = MaterialTheme.colors,\ntypography: Typography = MaterialTheme.typography,\nshapes: Shapes = MaterialTheme.shapes,\ncontent: @Composable () -&gt; Unit\n)\n</code></pre> <p>Tal y como se muestra en el c\u00f3digo anterior, se pueden modificar los siguientes atributos:  colors , typography y  shapes . A continuaci\u00f3n, se explica detalladamente cada uno de los siguientes atributos con el objetivo de entender mejor c\u00f3mo modificarlos para obtener una customizaci\u00f3n espec\u00edfica.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#color","title":"Color","text":"<p>Antes de explicar la clase Colors es importante saber c\u00f3mo se utiliza la clase  Color . Jetpack Compose utiliza Color para representar un color. Hay dos formas b\u00e1sicas de definir un color mediante esta clase:</p> <ul> <li>Hexadecimal:</li> </ul> <pre><code>val red = Color(0xffff0000)\n</code></pre> <ul> <li>RGB:</li> </ul> <pre><code>val red = Color(red = 1f, green = 0f, blue = 0f)\n</code></pre> <p>Es una buena pr\u00e1ctica definir los colores de la aplicaci\u00f3n en un fichero  Color.kt .</p> <pre><code>import androidx.compose.ui.graphics.Color  val brown = Color(0xECE1D0)  val yellow = Color(0xFFDAA95E)\n</code></pre> <p>Y acceder a ellos como se indica a continuaci\u00f3n:</p> <pre><code>Text(\"Hello Openwebinars\", color = brown)\n</code></pre> <p>Para soportar un estilo Material Design, es importante definir un conjunto de colores en un tema referenci\u00e1ndolos despu\u00e9s desde ah\u00ed. A continuaci\u00f3n, se muestra c\u00f3mo hacerlo.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#colors","title":"Colors","text":"<p>La clase Colors es provista por Jetpack Compose y facilita la definici\u00f3n de dicho conjunto de colores para soportar el sistema Material Design.</p> <pre><code>class Colors(\nprimary: Color,\nprimaryVariant: Color,\nsecondary: Color,\nsecondaryVariant: Color,\nbackground: Color,\nsurface: Color,\nerror: Color,\nonPrimary: Color,\nonSecondary: Color,\nonBackground: Color,\nonSurface: Color,\nonError: Color,\nisLight: Boolean\n)\n</code></pre> <p>El objetivo de esta lecci\u00f3n no es definir a qu\u00e9 aspecto de una aplicaci\u00f3n corresponde cada atributo de la clase  Colors , sin embargo, toda esta informaci\u00f3n puede consultarse en la documentaci\u00f3n de Material Design sobre el sistema de colores.</p> <p>Jetpack Compose cuenta por defecto con funciones de tipo builder para crear conjuntos de temas predefinidos del tipo light y dark: lightColors y  darkColors . A continuaci\u00f3n, se muestra la funci\u00f3n  darkColors .</p> <pre><code>fun darkColors(  primary: Color = Color(0xFFBB86FC),  primaryVariant: Color = Color(0xFF3700B3),  secondary: Color = Color(0xFF03DAC6),  secondaryVariant: Color = secondary,  background: Color = Color(0xFF121212),  surface: Color = Color(0xFF121212),  error: Color = Color(0xFFCF6679),  onPrimary: Color = Color.Black,  onSecondary: Color = Color.Black,  onBackground: Color = Color.White,  onSurface: Color = Color.White,  onError: Color = Color.Black  ): Colors = Colors(  primary,  primaryVariant,  secondary,  secondaryVariant,  background,  surface,  error,  onPrimary,  onSecondary,  onBackground,  onSurface,  onError,  false)\n</code></pre> <p>Se considera una buena pr\u00e1ctica definir las paletas de colores de una aplicaci\u00f3n, usando las funciones builder mencionadas anteriormente, en un fichero Theme.kt tal y como se muestra a continuaci\u00f3n:</p> <pre><code>private val DarkColorPalette = darkColors(  primary = Purple200,  primaryVariant = Purple700,  secondary = Teal200  )  private val LightColorPalette = lightColors(  primary = Purple500,  primaryVariant = Purple700,  secondary = Teal200  )\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#typography","title":"Typography","text":"<p>La clase  Typography , provista por Jetpack Compose, es la encargada de ayudar a crear estilos para etiquetas de texto. A trav\u00e9s de dicha clase podemos definir el estilo de cada tipo de texto reflejado en Material Design (h1, h2, button, caption, body1, body2, etc). A continuaci\u00f3n, se muestra el constructor por defecto de dicha clase para ayudar a comprender mejor su funcionamiento.</p> <pre><code>constructor(  defaultFontFamily: FontFamily = FontFamily.Default,  h1: TextStyle = TextStyle(  fontWeight = FontWeight.Light,  fontSize = 96.sp,  letterSpacing = (-1.5).sp  ),  h2: TextStyle = TextStyle(  fontWeight = FontWeight.Light,  fontSize = 60.sp,  letterSpacing = (-0.5).sp  ),  .... subtitle1: TextStyle = TextStyle(  fontWeight = FontWeight.Normal,  fontSize = 16.sp,  letterSpacing = 0.15.sp  ),  subtitle2: TextStyle = TextStyle(  fontWeight = FontWeight.Medium,  fontSize = 14.sp,  letterSpacing = 0.1.sp  ),  body1: TextStyle = TextStyle(  fontWeight = FontWeight.Normal,  fontSize = 16.sp,  letterSpacing = 0.5.sp  ),  button: TextStyle = TextStyle(  fontWeight = FontWeight.Medium,  fontSize = 14.sp,  letterSpacing = 1.25.sp  ),\n....\n)\n</code></pre> <p>Para conocer en detalle la escala de cada valor de cada tipo se recomienda visitar la documentaci\u00f3n de Material Design.</p> <p>Para customizar los atributos de texto de la aplicaci\u00f3n se recomienda como buena pr\u00e1ctica crear un objeto de la clase Typography en un fichero Type.kt y sobrescribir los tipos de texto que se deseen tal y como se muestra en el ejemplo a continuaci\u00f3n.</p> <pre><code>val Typography = Typography(  body1 = TextStyle(  fontFamily = FontFamily.Default,  fontWeight = FontWeight.Normal,  fontSize = 16.sp  ),  button = TextStyle(  fontFamily = FontFamily.Default,  fontWeight = FontWeight.W500,  fontSize = 14.sp  ),  caption = TextStyle(  fontFamily = FontFamily.Default,  fontWeight = FontWeight.Normal,  fontSize = 12.sp )  )\n</code></pre>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#shapes","title":"Shapes","text":"<p>En muchas ocasiones, durante el desarrollo de una aplicaci\u00f3n, es necesario definir formas que act\u00faen como background de vistas con el objetivo de redondear bordes, establecer apariencias circulares, cuadradas, etc.</p> <p>Tradicionalmente, las formas se definen en un fichero XML bajo el tag  shape . Crear formas con Jetpack Compose es m\u00e1s sencillo y, adem\u00e1s, pueden ser provistas a la funci\u00f3n MaterialTheme haciendo que los componentes nativos como Button o TextField var\u00eden su aspecto por defecto.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#uso-de-matherialtheme","title":"Uso de MatherialTheme","text":"<p>Despu\u00e9s de describir todos los par\u00e1metros que puede recibir  MaterialTheme , se recomienda crear una funci\u00f3n que admita composici\u00f3n y que aplique las sobrescrituras previas definidas de cada uno de ellos tal y como se muestra a continuaci\u00f3n.</p> <pre><code>@Composable  fun AppTheme(darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable() () -&gt; Unit) {  val colors = if (darkTheme) {  DarkColorPalette  } else {  LightColorPalette  }  MaterialTheme(  colors = colors,  typography = Typography,  shapes = Shapes,  content = content  )  }\n</code></pre> <p>Un punto muy importante de esta funci\u00f3n es la comprobaci\u00f3n sobre si el sistema est\u00e1 en modo oscuro mediante la utilidad  isSystemInDarkTheme . Con el uso de esta funci\u00f3n, pueden aplicarse paletas de colores distintas si el modo oscuro est\u00e1 activo o no.</p>"},{"location":"section1/u07/teoria/PROG-U7.5.-GUI/#fuente-y-bibliografia","title":"Fuente y Bibliograf\u00eda","text":"<ul> <li>https://github.com/JetBrains/compose-jb/tree/master/tutorials - Tutorial sobre los principales componentes de Jetpack Compose Desktop</li> <li>https://www.tutorialesprogramacionya.com/composeya/ - Conceptos de compose</li> <li>https://www.develou.com/category/android/ - Articulos sobre compose</li> <li>https://www.develou.com/android-estado-en-compose/ - Estado en compose</li> <li>https://github.com/jamesreve/android-jetpack-compose - Ejemplos de Jetpack compose</li> <li>https://medium.com/droid-latam/jetpack-compose-i-motivaci%C3%B3n-50e085543923 - Que es Jetpack Compose</li> <li>https://medium.com/@facundomr/jetpack-compose-ii-funciones-composable-8d4d1d40ed44 - Funciones @Composables</li> <li>https://medium.com/@facundomr/jetpack-compose-iii-flujo-de-datos-y-eventos-e62d5f8bce6f - Arquitectura de la IU, flujo de informacion y eventos.</li> <li>https://plugins.jetbrains.com/plugin/10942-kotlin-fill-class - Plugin para rellenar los  argumentos de clases, muy util en Jetpack Compose</li> </ul>"},{"location":"section1/u09/","title":"UD 9 - Acceso a base de datos relacionales","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Software","BBDD"]},{"location":"section1/u09/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Software","BBDD"]},{"location":"section1/u09/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA5. Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases.</p>","tags":["Software","BBDD"]},{"location":"section1/u09/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>...CE</p>","tags":["Software","BBDD"]},{"location":"section1/u09/#contenidos","title":"Contenidos","text":"<p>La unidad se encuentra dentro del Bloque X</p> <ul> <li>U9: Acceso a BBDD Relacionales </li> </ul> <p>En la Unidad 9, veremos:   </p> <p>...Contenidos</p>","tags":["Software","BBDD"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/","title":"UD 3 - P1: Listas","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#p31-ejercicios","title":"P3.1 - Ejercicios","text":"","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista y la muestre por pantalla el mensaje <code>Yo estudio &lt;asignatura&gt;</code>, donde <code>&lt;asignatura&gt;</code> sobre cada una de las asignaturas de la lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y despu\u00e9s las muestre por pantalla con el mensaje <code>En &lt;asignatura&gt; has sacado &lt;nota&gt;</code> donde <code>&lt;asignatura&gt;</code> es cada una des las asignaturas de la lista y <code>&lt;nota&gt;</code> cada una de las correspondientes notas introducidas por el usuario.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribir un programa que pregunte al usuario los n\u00fameros ganadores de la loter\u00eda primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribir un programa que almacene en una lista los n\u00fameros del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matem\u00e1ticas, F\u00edsica, Qu\u00edmica, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones m\u00faltiplos de 3, y muestre por pantalla la lista resultante.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un pal\u00edndromo.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribir un programa que pida al usuario una palabra y muestre por pantalla el n\u00famero de veces que contiene cada vocal.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribir un programa que almacene en una lista los siguientes precios: <code>50, 75, 46, 22, 80, 65, 8</code> y muestre por pantalla el menor y el mayor de los precios.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribir un programa que almacene los vectores <code>(1,2,3)</code> y <code>(-1,0,2)</code> en dos listas y muestre por pantalla su producto escalar.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribir un programa que almacene las matrices <code>A=(123456)</code> y <code>B=(\u2212100111)</code> en una lista y muestre por pantalla su producto. Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/practica/PROG-U9.-Practica001/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribir un programa que pregunte por una muestra de n\u00fameros, separados por comas, los guarde en una lista y muestre por pantalla su media y desviaci\u00f3n t\u00edpica.</p>","tags":["Software","Ejercicios","Listas","Tuplas"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/","title":"UD 9 - 9.1 Acceso a BBDD","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#que-es-una-base-de-datos-y-su-importancia-en-el-desarrollo-de-software","title":"Qu\u00e9 es una base de datos y su importancia en el desarrollo de software.","text":"<p>Una base de datos es un conjunto organizado de informaci\u00f3n que se almacena y se gestiona en un sistema inform\u00e1tico. Est\u00e1 dise\u00f1ada para almacenar, recuperar y gestionar grandes cantidades de datos de manera eficiente y confiable. Las bases de datos se utilizan en una amplia variedad de aplicaciones inform\u00e1ticas, desde simples aplicaciones de escritorio hasta sistemas empresariales complejos.  Adem\u00e1s, las bases de datos permiten que varios usuarios accedan a los mismos datos al mismo tiempo, lo que es especialmente importante en entornos empresariales donde muchos usuarios necesitan acceder a la misma informaci\u00f3n.</p> <p>La importancia de las bases de datos en el desarrollo de software radica en que permiten a los desarrolladores crear aplicaciones que pueden manejar grandes cantidades de informaci\u00f3n de manera eficiente y escalable. Las bases de datos tambi\u00e9n permiten a los desarrolladores implementar una l\u00f3gica de negocio m\u00e1s sofisticada, lo que les permite crear aplicaciones m\u00e1s robustas y flexibles.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#el-lenguaje-de-programacion-kotlin-y-su-uso-en-la-programacion-de-aplicaciones-que-acceden-a-bases-de-datos","title":"El lenguaje de programaci\u00f3n Kotlin y su uso en la programaci\u00f3n de aplicaciones que acceden a bases de datos.","text":"<p>En la programaci\u00f3n de aplicaciones que acceden a bases de datos, Kotlin al igual que Java, es un lenguaje de programaci\u00f3n muy \u00fatil, ya que tiene soporte integrado para la conexi\u00f3n y el acceso a bases de datos a trav\u00e9s del API JDBC (Java Database Connectivity). Adem\u00e1s, Kotlin tiene una sintaxis concisa y expresiva, lo que facilita la creaci\u00f3n de c\u00f3digo que interact\u00faa con las bases de datos.</p> <p>El uso de Kotlin en la programaci\u00f3n de aplicaciones que acceden a bases de datos permite a los desarrolladores crear aplicaciones m\u00e1s seguras, confiables y escalables. Kotlin ofrece caracter\u00edsticas de seguridad como la prevenci\u00f3n de nulos y la inmutabilidad, lo que reduce la posibilidad de errores y mejora la confiabilidad del c\u00f3digo. Adem\u00e1s, Kotlin es altamente escalable y f\u00e1cil de mantener, lo que lo hace ideal para proyectos empresariales complejos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#caracteristicas-y-metodos-de-acceso-a-sistemas-gestores-de-bases-de-datos-relacionales","title":"Caracter\u00edsticas y m\u00e9todos de acceso a sistemas gestores de bases de datos relacionales","text":"<p>Los sistemas gestores de bases de datos relacionales son herramientas fundamentales en el desarrollo de software, ya que permiten el almacenamiento y acceso a grandes cantidades de informaci\u00f3n de manera estructurada y eficiente. Para poder utilizarlos adecuadamente, es importante conocer sus caracter\u00edsticas y m\u00e9todos de acceso.</p> <p>En este punto, se abordar\u00e1 en detalle las caracter\u00edsticas de los sistemas gestores de bases de datos relacionales, as\u00ed como los diferentes m\u00e9todos de acceso a las bases de datos, como JDBC y ORM. Adem\u00e1s, se discutir\u00e1n las ventajas y desventajas de cada m\u00e9todo de acceso para que los alumnos puedan elegir el que mejor se adapte a sus necesidades. Con este conocimiento, los alumnos estar\u00e1n capacitados para utilizar bases de datos en sus proyectos de programaci\u00f3n con Kotlin.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#sistema-gestor-de-bases-de-datos-relacional-y-sus-caracteristicas","title":"Sistema gestor de bases de datos relacional y sus caracter\u00edsticas","text":"<p>Un sistema gestor de bases de datos relacional (RDBMS, por sus siglas en ingl\u00e9s) es un tipo de software que se utiliza para almacenar, organizar y manipular datos en una base de datos relacional. Este tipo de sistema gestor de bases de datos utiliza un modelo de datos relacional para organizar los datos en tablas con filas y columnas, y utiliza claves primarias y for\u00e1neas para establecer relaciones entre las tablas.</p> <p>Entre las caracter\u00edsticas principales de los sistemas gestores de bases de datos relacionales, podemos destacar las siguientes:</p> <ul> <li>Estructura basada en tablas: Los datos se almacenan en tablas con filas y columnas. Cada columna tiene un nombre y un tipo de datos que define el tipo de informaci\u00f3n que se puede almacenar.</li> <li>Relaciones entre tablas: Los sistemas gestores de bases de datos relacionales permiten establecer relaciones entre las tablas utilizando claves primarias y for\u00e1neas. Esto permite que los datos se puedan relacionar entre s\u00ed de manera efectiva y eficiente.</li> <li>Consultas complejas: Los sistemas gestores de bases de datos relacionales permiten realizar consultas complejas utilizando el lenguaje SQL (Structured Query Language). Esto permite que los datos se puedan buscar, filtrar y ordenar de manera efectiva y eficiente.</li> <li>Integridad de los datos: Los sistemas gestores de bases de datos relacionales tienen mecanismos integrados para garantizar la integridad de los datos, como las restricciones de integridad referencial y las validaciones de datos.</li> <li>Escalabilidad: Los sistemas gestores de bases de datos relacionales son altamente escalables y se pueden utilizar para gestionar grandes vol\u00famenes de datos.</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#metodos-de-acceso-a-bases-de-datos","title":"M\u00e9todos de acceso a bases de datos","text":"<ul> <li>JDBC (Java Database Connectivity): JDBC es una API est\u00e1ndar de Java que permite a las aplicaciones Java acceder a bases de datos relacionales. Proporciona una interfaz com\u00fan para que las aplicaciones se conecten a bases de datos, realicen consultas y actualicen datos. JDBC es ampliamente utilizado y est\u00e1 soportado por la mayor\u00eda de los sistemas gestores de bases de datos relacionales.  </li> <li>ORM (Object-Relational Mapping): Los ORM son frameworks que se construyen sobre JDBC y que permite mapear objetos de una aplicaci\u00f3n a tablas de una base de datos relacional. Esto permite acceder a la base de datos utilizando objetos y m\u00e9todos, en lugar de utilizar SQL directamente. El ORM proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos. El ORM utiliza un lenguaje de consulta espec\u00edfico del ORM (como HQL en Hibernate) que se traduce autom\u00e1ticamente en SQL para interactuar con la base de datos. El ORM es una t\u00e9cnica popular para el acceso a bases de datos en las aplicaciones actuales, por ejemplo: Hibernate en Java o Exposed en Kotlin.  </li> <li>JPA (Java Persistence API): JPA es una API de persistencia est\u00e1ndar de Java que permite a las aplicaciones Java acceder a bases de datos relacionales. JPA es una especificaci\u00f3n que define una interfaz com\u00fan para interactuar con diferentes sistemas gestores de bases de datos. JPA utiliza el ORM para mapear objetos de una aplicaci\u00f3n a tablas de una base de datos relacional.  </li> <li>Spring Data: Spring Data es un proyecto de Spring Framework que proporciona una abstracci\u00f3n de acceso a datos para aplicaciones Java. Spring Data utiliza diferentes tecnolog\u00edas de acceso a bases de datos, como JDBC, JPA y el ORM. Spring Data proporciona una interfaz com\u00fan para acceder a diferentes sistemas gestores de bases de datos relacionales.</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#ventajas-y-desventajas-de-cada-metodo-de-acceso-a-bases-de-datos-relacionales","title":"Ventajas y desventajas de cada m\u00e9todo de acceso a bases de datos relacionales.","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#jdbc-java-database-connectivity","title":"JDBC (Java Database Connectivity):","text":"<p>Ventajas:  - Es una API est\u00e1ndar de Java y est\u00e1 soportada por la mayor\u00eda de los sistemas gestores de bases de datos relacionales. - Proporciona una interfaz com\u00fan para que las aplicaciones se conecten a bases de datos, realicen consultas y actualicen datos. - Permite un control m\u00e1s granular sobre las consultas y las transacciones.</p> <p>Desventajas:  - Requiere una cantidad significativa de c\u00f3digo para interactuar con la base de datos.  - Puede ser propenso a errores si se maneja incorrectamente.  - No proporciona una abstracci\u00f3n de acceso a datos orientada a objetos.   </p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#orm-object-relational-mapping","title":"ORM (Object-Relational Mapping):","text":"<p>Ventajas:  - Proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos.  - Reduce significativamente la cantidad de c\u00f3digo requerido para interactuar con la base de datos.  - Proporciona una abstracci\u00f3n de acceso a datos orientada a objetos.   </p> <p>Desventajas:  - Puede haber una sobrecarga de rendimiento debido al mapeo de objetos a tablas de base de datos. - El ORM puede generar consultas SQL sub\u00f3ptimas. - La curva de aprendizaje inicial puede ser empinada.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#jpa-java-persistence-api","title":"JPA (Java Persistence API):","text":"<p>Ventajas:  - Proporciona una interfaz de persistencia est\u00e1ndar de Java para acceder a bases de datos relacionales. - Abstrae las diferencias entre los sistemas gestores de bases de datos subyacentes.  - Proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos.   </p> <p>Desventajas:  - Puede ser m\u00e1s lento que JDBC si se requiere un control granular sobre las consultas y las transacciones. - El ORM utilizado por JPA puede generar consultas SQL sub\u00f3ptimas. - La curva de aprendizaje inicial puede ser empinada.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#spring-data","title":"Spring Data:","text":"<p>Ventajas:  - Proporciona una abstracci\u00f3n de acceso a datos para aplicaciones Java. - Abstrae las diferencias entre los sistemas gestores de bases de datos subyacentes. - Proporciona una interfaz orientada a objetos para acceder a los datos de la base de datos.</p> <p>Desventajas:  - Puede ser m\u00e1s lento que JDBC si se requiere un control granular sobre las consultas y las transacciones. - La curva de aprendizaje inicial puede ser empinada. - La configuraci\u00f3n inicial puede ser m\u00e1s compleja que con JDBC.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#programar-conexiones-con-bases-de-datos","title":"Programar conexiones con bases de datos","text":"<p>El establecimiento de conexiones con bases de datos es la primera tarea en el desarrollo de aplicaciones con acceso a datos. Para que una aplicaci\u00f3n pueda interactuar con una base de datos, primero debe establecer una conexi\u00f3n con ella. Esta operaci\u00f3n es una de las m\u00e1s costosas, y por eso existen varias implementaciones de los llamados pools de conexiones (por ejemplo HikariCP) que nos permiten optimizar esta tarea.</p> <p>En esta secci\u00f3n, se explicar\u00e1 c\u00f3mo programar una conexi\u00f3n con una base de datos utilizando Kotlin y JDBC. Tambi\u00e9n se demostrar\u00e1 c\u00f3mo configurar la conexi\u00f3n.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#establecer-y-configurar-una-conexion","title":"Establecer y configurar una conexi\u00f3n","text":"<p>Para establecer una conexi\u00f3n con una base de datos utilizando Kotlin y JDBC, se requiere importar la librer\u00eda JDBC en el proyecto. Luego, se debe cargar el driver JDBC espec\u00edfico para el gestor de base de datos que se va a utilizar, mediante la funci\u00f3n <code>Class.forName(\"nombre_del_controlador\")</code>. A continuaci\u00f3n, se crea una instancia de la clase <code>Connection</code> que representa la conexi\u00f3n con la base de datos, mediante la funci\u00f3n <code>DriverManager.getConnection(url, usuario, contrase\u00f1a)</code>.</p> <p>Para configurar la conexi\u00f3n, se deben proporcionar tres par\u00e1metros: 1. la URL de la base de datos, que incluye el nombre del servidor, el puerto y el nombre de la base de datos; 2. el nombre de usuario para acceder a la base de datos; 3. la contrase\u00f1a correspondiente. 4. otras opciones de configuraci\u00f3n.</p> <p>La URL puede variar dependiendo del gestor de base de datos que se est\u00e9 utilizando y del tipo de conexi\u00f3n (por ejemplo, si se usa SSL o no).</p> <p>Un ejemplo de c\u00f3digo en Kotlin para establecer una conexi\u00f3n con una base de datos MySQL ser\u00eda:</p> <pre><code>import java.sql.*\nfun main() {\nval url = \"jdbc:mysql://localhost:3306/mydatabase\"\nval usuario = \"usuario\"\nval contrase\u00f1a = \"contrase\u00f1a\"\ntry {\nClass.forName(\"com.mysql.cj.jdbc.Driver\")\nval conexion = DriverManager.getConnection(url, usuario, contrase\u00f1a)\nprintln(\"Conexi\u00f3n exitosa\")\nconexion.close()\n} catch (e: SQLException) {\nprintln(\"Error en la conexi\u00f3n: ${e.message}\")\n} catch (e: ClassNotFoundException) {\nprintln(\"No se encontr\u00f3 el driver JDBC: ${e.message}\")\n}\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#almacenar-informacion","title":"Almacenar informaci\u00f3n","text":"<p>La inserci\u00f3n de registros en una base de datos, cuando estamos programando en un lenguaje orientado a objetos, suele coincidir con la inserci\u00f3n de la informaci\u00f3n de un objeto en una tabla. </p> <p>El proceso mediante el cual se inserta la informaci\u00f3n de un objeto que represente un registro en la tabla y utilizar el m\u00e9todo de inserci\u00f3n de JDBC para agregarlo a la tabla, se puede ver en los siguientes pasos:</p> <ol> <li>Crear una clase que represente la tabla y sus columnas.</li> <li>Crear una instancia de la clase y establecer los valores de las propiedades.</li> <li>Crear una conexi\u00f3n con la base de datos.</li> <li>Crear una sentencia <code>SQL INSERT</code> que especifique la tabla y los valores a insertar.</li> <li>Crear el objeto <code>PreparedStatement</code> para insertar la instancia en la tabla.</li> <li>Ejecutar la sentencia SQL utilizando un objeto <code>PreparedStatement</code>.</li> </ol> <p>A continuaci\u00f3n se muestra un ejemplo de c\u00f3mo insertar un registro en una tabla <code>mytable</code> utilizando un objeto instanciado de la clase <code>MyTable</code> que representa la tabla:</p> <pre><code>data class MyTable(val column1: String, val column2: Int, val column3: Double)\nval myRecord = MyTable(\"value1\", 2, 3.14)\nval conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydatabase\", \"username\", \"password\")\nval stmt = conn.prepareStatement(\"INSERT INTO mytable (column1, column2, column3) VALUES (?, ?, ?)\")\nstmt.setString(1, myRecord.column1)\nstmt.setInt(2, myRecord.column2)\nstmt.setDouble(3, myRecord.column3)\nstmt.executeUpdate()\n</code></pre> <p>En este ejemplo, se crea una conexi\u00f3n con la base de datos utilizando el m\u00e9todo <code>DriverManager.getConnection</code>. Luego, se crea una sentencia <code>SQL INSERT</code> utilizando un objeto <code>PreparedStatement</code>. Se crea una clase <code>MyTable</code> que representa la tabla y sus columnas, se crea una instancia de la clase . Se utiliza un objeto <code>PreparedStatement</code> para especificar los valores a insertar en las columnas de la tabla usando los m\u00e9todos <code>setString</code>, <code>setInt</code> y <code>setDouble</code>. Finalmente, se ejecuta la sentencia utilizando el m\u00e9todo <code>executeUpdate</code>.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#recuperar-y-mostrar-informacion","title":"Recuperar y mostrar informaci\u00f3n.","text":"<p>En el desarrollo de aplicaciones, es com\u00fan necesitar recuperar y mostrar informaci\u00f3n almacenada en una base de datos. Para ello, se requiere conocer las t\u00e9cnicas y herramientas necesarias para conectarse a la base de datos, ejecutar consultas SQL y mapear los resultados a objetos en el lenguaje de programaci\u00f3n utilizado.</p> <p>En este punto, nos enfocaremos en c\u00f3mo crear programas en Kotlin, aspecto que no difiere de como se hace en java, para recuperar informaci\u00f3n almacenada en bases de datos relacionales utilizando JDBC. Explicaremos c\u00f3mo ejecutar consultas SQL y mapear los resultados a objetos Kotlin para que puedan ser mostrados al usuario. Adem\u00e1s, tambi\u00e9n hablaremos sobre c\u00f3mo manejar errores y excepciones que puedan surgir durante el proceso.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#recuperar-registros-de-la-base-de-datos","title":"Recuperar registros de la base de datos.","text":"<p>Para recuperar registros de una tabla de la base de datos utilizando Kotlin y JDBC, necesitamos ejecutar una consulta SQL que seleccione los registros que deseamos recuperar. Esta consulta se puede ejecutar mediante un objeto <code>Statement</code> de JDBC, que se crea a partir de la conexi\u00f3n a la base de datos:</p> <pre><code>val statement = connection.createStatement()\nval query = \"SELECT id, nombre, email FROM usuario\"\nval resultSet = statement.executeQuery(query)\n</code></pre> <p>Una vez que tenemos los resultados de la consulta en un objeto <code>ResultSet</code>, podemos mapearlos a objetos en Kotlin. Para hacer esto, necesitamos iterar sobre los resultados y crear un objeto para cada registro. Por ejemplo, si tenemos una tabla usuarios con columnas <code>id</code>, <code>nombre</code> y <code>email</code>, podemos crear una clase <code>Usuario</code> en Kotlin y mapear cada registro de la siguiente manera:</p> <pre><code>data class Usuario(val id: Int, val nombre: String, val email: String)\nval usuarios = mutableListOf&lt;Usuario&gt;()\nwhile (resultSet.next()) {\nval id = resultSet.getInt(\"id\")\nval nombre = resultSet.getString(\"nombre\")\nval email = resultSet.getString(\"email\")\nusuarios.add(Usuario(id, nombre, email))\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#mostrar-los-resultados-al-usuario","title":"Mostrar los resultados al usuario.","text":"<p>A la hora de trabajar con la informaci\u00f3n y mostrarla al usuario final, es importante tener en cuenta la sensibilidad de la informaci\u00f3n almacenada en la base de datos y asegurarnos de cumplir con las normas de privacidad y seguridad de la informaci\u00f3n.</p> <p>Para mostrar los resultados al usuario, podemos imprimirlos en la consola, mostrarlos en una interfaz de usuario o hacer cualquier otra cosa que queramos con ellos, dependiendo del tipo de aplicaci\u00f3n que estemos desarrollando y de las necesidades del usuario. Algunas opciones comunes incluyen:</p> <ul> <li>Mostrar los resultados en una tabla: podemos crear una tabla en la interfaz de usuario de nuestra aplicaci\u00f3n y agregar cada registro como una fila en la tabla. Esto permite al usuario ver todos los datos de una manera clara y ordenada.</li> <li>Mostrar los resultados en una lista: si la cantidad de registros es peque\u00f1a, podemos mostrarlos en una lista simple. Esto es especialmente \u00fatil si solo necesitamos mostrar algunos datos de cada registro, como el nombre y la fecha.</li> <li>Mostrar los resultados en un gr\u00e1fico: si los datos son num\u00e9ricos, podemos mostrarlos en un gr\u00e1fico para que el usuario pueda ver visualmente las tendencias y las comparaciones entre los registros.</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#borrar-y-modificar-la-informacion-almacenada","title":"Borrar y modificar la informaci\u00f3n almacenada.","text":"<p>En el desarrollo de aplicaciones, es muy com\u00fan la necesidad de modificar o eliminar informaci\u00f3n almacenada en una base de datos. Para ello, es necesario contar con los conocimientos y herramientas adecuadas para realizar estas operaciones de manera segura y eficiente.</p> <p>En este sentido, el lenguaje de programaci\u00f3n Kotlin y la API JDBC ofrecen una serie de funcionalidades para llevar a cabo operaciones de modificaci\u00f3n y eliminaci\u00f3n en bases de datos relacionales. Es importante conocer c\u00f3mo funcionan estos m\u00e9todos para poder implementarlos correctamente en nuestras aplicaciones y evitar errores o problemas de seguridad en el manejo de la informaci\u00f3n almacenada.</p> <p>En este apartado se abordar\u00e1n los aspectos fundamentales de la realizaci\u00f3n de modificaciones y eliminaciones en una base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#eliminar-registros","title":"Eliminar registros.","text":"<p>Para eliminar registros de una tabla en una base de datos utilizando Kotlin y JDBC, es necesario construir y ejecutar una consulta SQL de eliminaci\u00f3n. Por ejemplo, si queremos eliminar un registro de la tabla <code>usuarios</code> que tenga un cierto identificador \u00fanico. Hay que tener cuidado con la cl\u00e1usula <code>WHERE</code>, ya que podemos tener un problema si no se establece adecuadamente. La consulta SQL podr\u00eda ser algo como:</p> <p><pre><code>DELETE FROM usuarios WHERE id = ?\n</code></pre> Luego, en Kotlin, podemos crear una conexi\u00f3n a la base de datos y ejecutar la consulta utilizando la interfaz <code>PreparedStatement</code> de JDBC, como se explic\u00f3 en puntos anteriores. La diferencia aqu\u00ed es que en lugar de utilizar un m\u00e9todo <code>executeQuery()</code>, utilizaremos el m\u00e9todo <code>executeUpdate()</code> que indica que estamos realizando una operaci\u00f3n de actualizaci\u00f3n. Adem\u00e1s, deberemos proporcionar el valor del identificador \u00fanico como par\u00e1metro en el objeto <code>PreparedStatement</code>.</p> <p><pre><code>val id = 1\nval query = \"DELETE FROM usuarios WHERE id = ?\"\nval preparedStatement = connection.prepareStatement(query)\npreparedStatement.setInt(1, id)\nval rowsDeleted = preparedStatement.executeUpdate()\n</code></pre> Estas operaciones tienen la clave en la sintaxis correcta de la consulta SQL y en la configuraci\u00f3n correcta de los par\u00e1metros en el objeto <code>PreparedStatement</code>. Una vez que se tiene la conexi\u00f3n a la base de datos, se puede crear un objeto <code>PreparedStatement</code> con la consulta SQL y los par\u00e1metros correspondientes. Luego, se utiliza el m\u00e9todo <code>executeUpdate()</code> para ejecutar la consulta y eliminar los registros. </p> <p>Por \u00faltimo, siempre ser\u00e1 importante comprobar el resultado de la ejecuci\u00f3n del m\u00e9todo<code>executeUpdate()</code> y hacer el tratamiento que se estime oporturno en funci\u00f3n del resultado obtenido. Por ejemplo, en este caso, el m\u00e9todo <code>executeUpdate()</code> devuelve la cantidad de filas afectadas por la sentencia ejecutada, que en este caso deber\u00eda ser <code>1</code> si se encontr\u00f3 y elimin\u00f3 el registro correspondiente.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#actualizar-registros","title":"Actualizar registros.","text":"<p>Para actualizar registros en una tabla de la base de datos utilizando Kotlin y JDBC, primero es necesario establecer una conexi\u00f3n a la base de datos y crear una declaraci\u00f3n SQL que actualice los campos necesarios. La declaraci\u00f3n SQL debe incluir la cl\u00e1usula <code>WHERE</code> para identificar los registros que se deben actualizar.</p> <p>Por ejemplo, si tenemos una tabla llamada <code>usuarios</code> con los campos <code>nombre</code>, <code>apellido</code> y <code>email</code>, y queremos actualizar el email de un usuario en particular, podemos crear una declaraci\u00f3n SQL como la siguiente:</p> <p><pre><code>UPDATE usuarios SET email = 'nuevo_email@example.com' WHERE nombre = 'Juan' AND apellido = 'P\u00e9rez';\n</code></pre> Una vez que se tiene la declaraci\u00f3n SQL, se debe utilizar el objeto Statement de JDBC para ejecutarla. El m\u00e9todo <code>executeUpdate()</code> se utiliza para ejecutar la declaraci\u00f3n y actualizar los registros correspondientes.</p> <p>Para ejecutar la consulta, se utiliza el m\u00e9todo executeUpdate() de la misma forma que en el ejemplo anterior.</p> <pre><code>val statement = connection.createStatement()\nval updateCount = statement.executeUpdate(sql)\n</code></pre> <p>Como comentamos anteriormente, el m\u00e9todo <code>executeUpdate()</code> devuelve la cantidad de filas afectadas por la sentencia ejecutada, que en este caso deber\u00eda ser <code>1</code> si se encontr\u00f3 y actualiz\u00f3 el registro correspondiente. Siempre ser\u00e1 importante comprobar el resultado de la ejecuci\u00f3n del m\u00e9todo<code>executeUpdate()</code> y hacer el tratamiento que se estime oporturno en funci\u00f3n del resultado obtenido.</p> <p>Para realizar un ejemplo m\u00e1s completo de c\u00f3mo utilizar una consulta SQL para actualizar registros. Supongamos que queremos actualizar un registro en la tabla <code>users</code>:</p> <pre><code>// Establecer una conexi\u00f3n con la base de datos\nval connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydatabase\", \"root\", \"password\")\n// Crear una consulta SQL para actualizar el nombre del usuario con id = 1\nval sql = \"UPDATE users SET name = ? WHERE id = ?\"\n// Crear un objeto que represente los valores actualizados\nval name = \"John\"\nval id = 1\n// Utilizar el m\u00e9todo \"prepareStatement\" de la conexi\u00f3n para crear un objeto PreparedStatement\nval statement = connection.prepareStatement(sql)\n// Establecer los valores de los par\u00e1metros de la consulta utilizando los m\u00e9todos set correspondientes de la clase PreparedStatement\nstatement.setString(1, name)\nstatement.setInt(2, id)\n// Ejecutar la consulta utilizando el m\u00e9todo \"executeUpdate\" de la clase PreparedStatement\nval rowsUpdated = statement.executeUpdate()\n// Verificar si se ha actualizado alg\u00fan registro\nif (rowsUpdated &gt; 0) {\nprintln(\"El registro ha sido actualizado exitosamente.\")\n} else {\nprintln(\"No se ha actualizado ning\u00fan registro.\")\n}\n// Cerrar la conexi\u00f3n a la base de datos\nstatement.close()\nconnection.close()\n</code></pre> <p>En este ejemplo, primero se establece una conexi\u00f3n con la base de datos utilizando los detalles de conexi\u00f3n adecuados. Luego, se crea una consulta SQL para actualizar el nombre del usuario con <code>id = 1</code> en la tabla <code>users</code>. Sobre el objeto conexi\u00f3n se utiliza el m\u00e9todo <code>prepareStatement</code> para crear un objeto <code>PreparedStatement</code>. Luego, se establecen los valores de los par\u00e1metros de la consulta utilizando los m\u00e9todos set correspondientes de la clase <code>PreparedStatement</code> y se ejecuta la consulta utilizando el m\u00e9todo <code>executeUpdate</code> de la clase <code>PreparedStatement</code>. Se verifica si se ha actualizado alg\u00fan registro y se la sentencia y la conexi\u00f3n a la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#consulta-de-informacion-almacenada","title":"Consulta de informaci\u00f3n almacenada.","text":"<p>Al desarrollar una aplicaci\u00f3n que requiere acceder y manipular datos almacenados en una base de datos, es com\u00fan que necesitemos realizar consultas m\u00e1s complejas para obtener la informaci\u00f3n requerida. Las consultas pueden involucrar operadores l\u00f3gicos para filtrar resultados y funciones de agregaci\u00f3n para realizar c\u00e1lculos en los datos. Es importante que los programadores tengan conocimientos s\u00f3lidos en la creaci\u00f3n y ejecuci\u00f3n de consultas SQL utilizando JDBC en Kotlin para obtener resultados precisos y eficientes. En esta secci\u00f3n, se explicar\u00e1 c\u00f3mo crear consultas m\u00e1s complejas utilizando Kotlin y JDBC y se demostrar\u00e1 c\u00f3mo utilizar operadores l\u00f3gicos y funciones de agregaci\u00f3n en las consultas SQL.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#consultas-complejas","title":"Consultas complejas.","text":"<p>Para crear consultas m\u00e1s complejas utilizando Kotlin y JDBC, se pueden concatenar distintas cl\u00e1usulas de SQL en una sola sentencia. Por ejemplo, para realizar una consulta que seleccione registros de una tabla que cumplan ciertas condiciones y los ordene por un campo en particular, se puede utilizar la siguiente sintaxis:</p> <p><pre><code>val query = \"SELECT * FROM tabla WHERE condicion ORDER BY campo\"\nval statement = connection.createStatement()\nval resultSet = statement.executeQuery(query)\n</code></pre> En este ejemplo, <code>tabla</code> es el nombre de la tabla que se desea consultar, <code>condicion</code> es una expresi\u00f3n que define las condiciones que deben cumplir los registros seleccionados, y <code>campo</code> es el nombre del campo por el cual se deben ordenar los resultados. La consulta se ejecuta mediante el m\u00e9todo <code>executeQuery()</code> del objeto <code>Statement</code>.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#utilizar-operadores-logicos-y-funciones-de-agregacion-en-las-consultas","title":"Utilizar operadores l\u00f3gicos y funciones de agregaci\u00f3n en las consultas.","text":"<p>Para utilizar operadores l\u00f3gicos y funciones de agregaci\u00f3n en las consultas SQL, se puede utilizar la sintaxis est\u00e1ndar de SQL en la cadena de consulta. Por ejemplo, para realizar una consulta que seleccione registros de una tabla que cumplan ciertas condiciones y calcule la suma de los valores de un campo en particular, se puede utilizar la siguiente sintaxis:</p> <p>Supongamos que tenemos una tabla llamada \"ventas\" que contiene informaci\u00f3n sobre las ventas realizadas en una tienda, con las siguientes columnas:</p> <ul> <li><code>id</code>: identificador \u00fanico de la venta.</li> <li><code>fecha</code>: fecha en que se realiz\u00f3 la venta.</li> <li><code>monto</code>: monto total de la venta.</li> <li><code>tipo</code>: tipo de venta, puede ser \"efectivo\" o \"tarjeta\".</li> <li><code>sucursal</code>: sucursal en la que se realiz\u00f3 la venta.</li> </ul> <p>Supongamos que queremos obtener el monto total de las ventas realizadas en la sucursal \"A\" durante el mes de enero, y que fueron pagadas con tarjeta de cr\u00e9dito. Para hacer esto, podemos utilizar una consulta SQL con operadores l\u00f3gicos y funciones de agregaci\u00f3n, de la siguiente manera:</p> <pre><code>val consulta = \"SELECT SUM(monto) FROM ventas WHERE sucursal = 'A' AND tipo = 'tarjeta' AND MONTH(fecha) = 1\"\ntry {\nval statement = conexion.createStatement()\nval resultados = statement.executeQuery(consulta)\nwhile (resultados.next()) {\nval montoTotal = resultados.getDouble(1)\nprintln(\"Monto total de ventas en sucursal A pagadas con tarjeta en enero: $montoTotal\")\n}\nresultados.close()\nstatement.close()\n} catch (ex: SQLException) {\nprintln(\"Error al ejecutar consulta: ${ex.message}\")\n}\n</code></pre> <p>En este ejemplo, la consulta SQL utiliza el operador l\u00f3gico <code>AND</code> para combinar varias condiciones en la cl\u00e1usula <code>WHERE</code>: la <code>sucursal</code> debe ser <code>A</code>, el <code>tipo</code> de venta debe ser <code>tarjeta</code>, y el <code>mes</code> de la fecha debe ser <code>1</code> (que representa el mes de enero). Adem\u00e1s, la funci\u00f3n de agregaci\u00f3n <code>SUM</code> se utiliza para sumar los montos totales de todas las ventas que cumplen con estas condiciones.</p> <p>Si la consulta se ejecuta correctamente, el resultado se muestra por consola. Si ocurre un error, se muestra un mensaje de error.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#crear-aplicaciones-para-posibilitar-la-gestion-de-informacion","title":"Crear aplicaciones para posibilitar la gesti\u00f3n de informaci\u00f3n","text":"<p>Al desarrollar aplicaciones que requieren almacenamiento de datos, es fundamental comprender c\u00f3mo interactuar con bases de datos para almacenar informaci\u00f3n de manera efectiva y segura.</p> <p>Un ejemplo de aplicaci\u00f3n que permite la gesti\u00f3n de informaci\u00f3n en una base de datos podr\u00eda ser un sistema de gesti\u00f3n de inventario para una tienda. La interfaz de usuario podr\u00eda permitir al usuario agregar nuevos productos al inventario, actualizar la informaci\u00f3n de los productos existentes, eliminar productos, y realizar consultas para buscar productos por nombre, categor\u00eda, precio, etc.</p> <p>Para implementar estas funcionalidades, se podr\u00eda utilizar JDBC para establecer la conexi\u00f3n con la base de datos y ejecutar consultas SQL para agregar, actualizar o eliminar registros. Adem\u00e1s, se podr\u00eda utilizar una librer\u00eda de UI como JavaFX para dise\u00f1ar la interfaz de usuario y permitir al usuario interactuar con la base de datos de manera sencilla y visual.</p> <p>Para manejar errores en la aplicaci\u00f3n, se podr\u00eda implementar validaciones en la interfaz de usuario para asegurarse de que los datos ingresados por el usuario son correctos y cumplen con las restricciones de la base de datos. Adem\u00e1s, se podr\u00edan implementar mecanismos de manejo de excepciones en el c\u00f3digo para manejar errores que puedan surgir durante la ejecuci\u00f3n de consultas o actualizaciones en la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#gestion-de-informacion","title":"Gesti\u00f3n de informaci\u00f3n.","text":"<p>Para crear aplicaciones que permitan la gesti\u00f3n de informaci\u00f3n en una base de datos, es necesario dise\u00f1ar una interfaz de usuario que permita al usuario interactuar con la base de datos de manera intuitiva y eficiente. La interfaz debe permitir realizar operaciones b\u00e1sicas como crear, leer, actualizar y eliminar registros.</p> <p>Una vez que se ha dise\u00f1ado la interfaz, se puede utilizar Kotlin y JDBC para implementar las funcionalidades. Por ejemplo, se puede utilizar JDBC para establecer la conexi\u00f3n con la base de datos y realizar consultas y actualizaciones en la misma.</p> <p>CRUD es un acr\u00f3nimo que se utiliza para describir las cuatro operaciones b\u00e1sicas de la gesti\u00f3n de datos: Crear, Leer, Actualizar y Eliminar (en ingl\u00e9s, Create, Read, Update, Delete).</p> <p>Por lo tanto, al crear una aplicaci\u00f3n para la gesti\u00f3n de la informaci\u00f3n presente en bases de datos relacionales, es com\u00fan que se implementen estas cuatro operaciones CRUD para permitir al usuario realizar acciones como crear nuevos registros, leer la informaci\u00f3n almacenada, actualizar registros existentes o eliminar datos no deseados. A trav\u00e9s de una interfaz de usuario adecuada, estas operaciones se pueden realizar de manera sencilla y eficiente, lo que mejora la experiencia del usuario y facilita la gesti\u00f3n de la informaci\u00f3n en la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#un-crud-para-gestionar-la-informacion","title":"Un CRUD para gestionar la informaci\u00f3n","text":"<p>Las operaciones del CRUD son fundamentales en la mayor\u00eda de las aplicaciones de gesti\u00f3n de bases de datos, ya que permiten al usuario interactuar con los datos de una manera intuitiva y eficiente. Un ejemplo de un CRUD para gestionar el acceso a una tabla <code>users</code></p> <pre><code>import java.sql.*\n// Definir constantes para la conexi\u00f3n\nconst val DB_URL = \"jdbc:mysql://localhost:3306/mydatabase\"\nconst val USER = \"root\"\nconst val PASS = \"mypassword\"\n// Funci\u00f3n para establecer una conexi\u00f3n a la base de datos\nfun getConnection(): Connection? {\nvar conn: Connection? = null\ntry {\nconn = DriverManager.getConnection(DB_URL, USER, PASS)\n} catch (ex: SQLException) {\nex.printStackTrace()\n}\nreturn conn\n}\n// Funci\u00f3n para cerrar una conexi\u00f3n a la base de datos\nfun closeConnection(conn: Connection?) {\ntry {\nconn?.close()\n} catch (ex: SQLException) {\nex.printStackTrace()\n}\n}\n// Funci\u00f3n para crear un nuevo registro en la tabla de la base de datos\nfun createRecord(name: String, email: String) {\nval conn = getConnection()\nval sql = \"INSERT INTO users (name, email) VALUES (?, ?)\"\ntry {\nval stmt = conn?.prepareStatement(sql)\nstmt?.setString(1, name)\nstmt?.setString(2, email)\nstmt?.executeUpdate()\nstmt?.close()\n} catch (ex: SQLException) {\nex.printStackTrace()\n} finally {\ncloseConnection(conn)\n}\n}\n// Funci\u00f3n para leer todos los registros de la tabla de la base de datos\nfun readAllRecords(): List&lt;User&gt; {\nval conn = getConnection()\nval sql = \"SELECT * FROM users\"\nval userList = mutableListOf&lt;User&gt;()\ntry {\nval stmt = conn?.createStatement()\nval rs = stmt?.executeQuery(sql)\nwhile (rs?.next() == true) {\nval id = rs.getInt(\"id\")\nval name = rs.getString(\"name\")\nval email = rs.getString(\"email\")\nuserList.add(User(id, name, email))\n}\nrs?.close()\nstmt?.close()\n} catch (ex: SQLException) {\nex.printStackTrace()\n} finally {\ncloseConnection(conn)\n}\nreturn userList\n}\n// Funci\u00f3n para actualizar un registro existente en la tabla de la base de datos\nfun updateRecord(id: Int, name: String, email: String) {\nval conn = getConnection()\nval sql = \"UPDATE users SET name = ?, email = ? WHERE id = ?\"\ntry {\nval stmt = conn?.prepareStatement(sql)\nstmt?.setString(1, name)\nstmt?.setString(2, email)\nstmt?.setInt(3, id)\nstmt?.executeUpdate()\nstmt?.close()\n} catch (ex: SQLException) {\nex.printStackTrace()\n} finally {\ncloseConnection(conn)\n}\n}\n// Funci\u00f3n para eliminar un registro existente en la tabla de la base de datos\nfun deleteRecord(id: Int) {\nval conn = getConnection()\nval sql = \"DELETE FROM users WHERE id = ?\"\ntry {\nval stmt = conn?.prepareStatement(sql)\nstmt?.setInt(1, id)\nstmt?.executeUpdate()\nstmt?.close()\n} catch (ex: SQLException) {\nex.printStackTrace()\n} finally {\ncloseConnection(conn)\n}\n}\n// Clase para representar un registro de la tabla de la base de datos\ndata class User(val id: Int, val name: String, val email: String)\nfun main() {\n// Crear un nuevo registro en la tabla de la base de datos\ncreateRecord(\"Juan\", \"juan@example.com\")\n// Leer todos los registros de la tabla de la base de datos\nval userList = readAllRecords()\nfor (user in userList) {\nprintln(user)\n}\n// Actualizar un registro existente en la tabla de la base de datos\nupdateRecord(1, \"Juan Perez\", \"juan.perez@example.com\")\n// Leer todos los registros de la tabla de la base de datos nuevamente\nval updatedUserList = readAllRecords()\nfor (user in updatedUserList) {\nprintln(user)\n}\n// Eliminar un registro existente en la tabla de la base de datos\ndeleteRecord(1)\n// Leer todos los registros de la tabla de la base de datos nuevamente\nval finalUserList = readAllRecords()\nfor (user in finalUserList) {\nprintln(user)\n}\n}\n</code></pre> <p>Para empezar, la funci\u00f3n <code>getConnection()</code> se utiliza para establecer una conexi\u00f3n con la base de datos. Esta funci\u00f3n utiliza los valores de las constantes <code>DB_URL</code>, <code>USER</code> y <code>PASS</code> para conectarse a la base de datos mydatabase. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo:</p> <pre><code>val conn = getConnection()\n</code></pre> <p>La funci\u00f3n <code>closeConnection()</code> se utiliza para cerrar la conexi\u00f3n con la base de datos. Esta funci\u00f3n se llama al final de cada operaci\u00f3n de base de datos para asegurarse de que se cierra la conexi\u00f3n y se liberan los recursos utilizados. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle la conexi\u00f3n como argumento:</p> <pre><code>closeConnection(conn)\n</code></pre> <p>La funci\u00f3n <code>createRecord()</code> se utiliza para crear un nuevo registro en la tabla de la base de datos. Esta funci\u00f3n toma dos par\u00e1metros: name y email, que son los valores que se insertar\u00e1n en la tabla users. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle los valores que quieres insertar:</p> <pre><code>createRecord(\"John Doe\", \"john.doe@example.com\")\n</code></pre> <p>La funci\u00f3n <code>readAllRecords()</code> se utiliza para leer todos los registros de la tabla de la base de datos y devolver una lista de objetos User. Esta funci\u00f3n no toma ning\u00fan par\u00e1metro. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo:</p> <pre><code>val userList = readAllRecords()\n</code></pre> <p>La funci\u00f3n <code>updateRecord()</code> se utiliza para actualizar un registro existente en la tabla de la base de datos. Esta funci\u00f3n toma tres par\u00e1metros: id, name y email, que son los nuevos valores que se actualizar\u00e1n en la tabla users. id es el identificador del registro que se va a actualizar. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle los valores que quieres actualizar:</p> <pre><code>updateRecord(1, \"Jane Doe\", \"jane.doe@example.com\")\n</code></pre> <p>La funci\u00f3n <code>deleteRecord()</code> se utiliza para eliminar un registro existente en la tabla de la base de datos. Esta funci\u00f3n toma un par\u00e1metro: id, que es el identificador del registro que se va a eliminar. Para usar esta funci\u00f3n, solo tienes que llamarla en tu c\u00f3digo y pasarle el valor que quieres eliminar:</p> <pre><code>deleteRecord(1)\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#manejar-los-errores","title":"Manejar los errores.","text":"<p>You should explicitly close <code>Statements</code>, <code>ResultSets</code>, and <code>Connections</code> when you no longer need them,</p> <p>Al trabajar con JDBC es importante tener en cuenta que pueden ocurrir diversas excepciones durante todo el proceso de establecimiento de conexi\u00f3n, ejecuci\u00f3n de sentencia, recuperaci\u00f3n de resultados, etc, y que indicar\u00e1n distintos tipos de errores, como falta de conexi\u00f3n con el servidor, credenciales incorrectas, error de tipos, errores propios de base de datos por inconsistencias, etc. Por lo tanto, se debe utilizar una estructura <code>try-catch</code> para manejar estas excepciones. En los ejemplos anteriores se han podido ver como se han utilizado estos bloques try-catch para encerrar las operaciones relacionadas con JDBC. Por ejemplo,</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#manejar-errores-de-conexion","title":"Manejar errores de conexi\u00f3n","text":"<p>Para manajar los posibles errores que se puedan producir al realizar la conexi\u00f3n tendremos que manejar las excepciones <code>SQLException</code> y <code>ClassNotFoundException</code>, que pueden ocurrir al intentar establecer la conexi\u00f3n o cargar el driver JDBC correspondiente. Adem\u00e1s, se imprime un mensaje de error para cada una de estas excepciones. En la pr\u00e1ctica, es importante identificar las excepciones que pueden ocurrir espec\u00edficamente para el gestor de base de datos que se est\u00e9 utilizando, y manejarlas adecuadamente.</p> <p>Para manejar errores de conexi\u00f3n de una manera m\u00e1s efectiva, podemos utilizar un bloque <code>try-catch-finally</code> para asegurarnos de <code>Statements</code>, <code>ResultSets</code>, y <code>Connections</code> se cierre correctamente, incluso si se produce un error al establecer la conexi\u00f3n. Adem\u00e1s, podemos lanzar una excepci\u00f3n personalizada en caso de que se produzca un error para informar al usuario del problema. Aqu\u00ed te presento una \u1e55osible funci\u00f3n para obtener una conexi\u00f3n <code>getConnection</code> que utiliza este enfoque:</p> <pre><code>import java.sql.Connection\nimport java.sql.DriverManager\nimport java.sql.SQLException\n// Datos de conexi\u00f3n a la base de datos\nval url = \"jdbc:mysql://localhost:3306/nombre_de_la_base_de_datos\"\nval user = \"usuario\"\nval password = \"contrase\u00f1a\"\n// Funci\u00f3n para establecer la conexi\u00f3n\nfun getConnection(): Connection {\nvar connection: Connection? = null\ntry {\nconnection = DriverManager.getConnection(url, user, password)\n} catch (e: SQLException) {\nthrow SQLException(\"Error al establecer la conexi\u00f3n con la base de datos: ${e.message}\")\n} finally {\nif (connection != null) {\ntry {\nconnection.close()\n} catch (e: SQLException) {\nthrow SQLException(\"Error al cerrar la conexi\u00f3n con la base de datos: ${e.message}\")\n}\n}\n}\nreturn connection\n}\n</code></pre> <p>En este ejemplo, utilizamos un bloque <code>try-catch</code> para capturar la excepci\u00f3n <code>SQLException</code> si se produce un error al establecer la conexi\u00f3n. Si se produce un error, lanzamos una excepci\u00f3n personalizada con un mensaje de error descriptivo para informar al usuario del problema.</p> <p>En el bloque <code>finally</code>, cerramos la conexi\u00f3n utilizando el m\u00e9todo <code>close</code> y tambi\u00e9n capturamos la excepci\u00f3n <code>SQLException</code> en caso de que se produzca un error al cerrar la conexi\u00f3n.</p> <p>Con este c\u00f3digo, hemos mejorado el manejo de errores de conexi\u00f3n en nuestro programa, lo que nos permite informar al usuario de los problemas que puedan surgir al interactuar con la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#manejo-de-errores-en-la-insercion","title":"Manejo de errores en la inserci\u00f3n","text":"<p>Es importante manejar los errores de inserci\u00f3n de datos en una base de datos para garantizar la integridad de la informaci\u00f3n. Para manejar estos errores en Kotlin y JDBC, podemos utilizar bloques <code>try-catch</code>.</p> <p>Por ejemplo, si estamos insertando un registro en una tabla que tiene una restricci\u00f3n de clave primaria y el registro que estamos intentando insertar ya existe en la tabla, JDBC lanzar\u00e1 una <code>SQLException</code> indicando que se viola la restricci\u00f3n de clave primaria. En este caso, podemos capturar la excepci\u00f3n y mostrar un mensaje al usuario inform\u00e1ndole del error y pidi\u00e9ndole que modifique los datos del registro.</p> <p>Un ejemplo de manejo de errores de inserci\u00f3n en Kotlin y JDBC podr\u00eda ser el siguiente:</p> <pre><code>try {\nval statement = connection.createStatement()\nval query = \"INSERT INTO customers (name, email) VALUES ('John Doe', 'johndoe@email.com')\"\nstatement.executeUpdate(query)\n} catch (e: SQLException) {\nwhen (e.errorCode) {\n1062 -&gt; {\n// Violation of unique key constraint\nprintln(\"Error: The email address is already registered.\")\n}\nelse -&gt; {\n// Other SQL exceptions\nprintln(\"Error: ${e.message}\")\n}\n}\n}\n</code></pre> <p>En este ejemplo, estamos insertando un registro en la tabla <code>customers</code> con los valores <code>John Doe</code> y <code>johndoe@email.com</code>. Si se produce un error durante la inserci\u00f3n, capturamos la excepci\u00f3n <code>SQLException</code> y comprobamos el c\u00f3digo de error devuelto por la base de datos.</p> <p>Si el c\u00f3digo de error es <code>1062</code>, significa que se ha violado una restricci\u00f3n de clave \u00fanica, en este caso, la restricci\u00f3n de correo electr\u00f3nico \u00fanico. Mostramos un mensaje de error indicando que el correo electr\u00f3nico ya est\u00e1 registrado. Estos c\u00f3digos de error son especificos de cada DBMS, por tanto hay que consultar la documetnaci\u00f3n del motor de base de datos para identificar los posibles c\u00f3digos de error.</p> <p>Si se produce cualquier otro tipo de excepci\u00f3n, mostramos un mensaje gen\u00e9rico con el mensaje de error devuelto por la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#describir-como-manejar-errores-de-eliminacion","title":"Describir c\u00f3mo manejar errores de eliminaci\u00f3n.","text":"<p>Para manejar errores de eliminaci\u00f3n, podemos utilizar las mismas t\u00e9cnicas que se describieron para manejar errores de inserci\u00f3n. Es importante tener en cuenta que si se intenta eliminar un registro que no existe, la consulta SQL no afectar\u00e1 ninguna fila y el m\u00e9todo <code>executeUpdate()</code> devolver\u00e1 <code>0</code>. Por lo tanto, es una buena pr\u00e1ctica verificar el valor devuelto por este m\u00e9todo y manejar el caso en el que se intenta eliminar un registro que no existe.</p> <p>Un ejemplo completo podr\u00eda ser: <pre><code>//Eliminar un registro de la tabla\ntry {\n// Crear la conexi\u00f3n\nval connection = DriverManager.getConnection(url, user, password)\n// Crear la sentencia SQL para eliminar el registro\nval sql = \"DELETE FROM usuarios WHERE id = ?\"\n// Crear el objeto PreparedStatement y establecer el valor del par\u00e1metro\nval statement = connection.prepareStatement(sql)\nstatement.setInt(1, 1)\n// Ejecutar la sentencia y obtener el n\u00famero de registros eliminados\nval rowsDeleted = statement.executeUpdate()\n// Comprobar si se ha eliminado el registro correctamente\nif (rowsDeleted &gt; 0) {\nprintln(\"El usuario ha sido eliminado correctamente.\")\n} else {\nprintln(\"No se ha eliminado ning\u00fan usuario.\")\n}\n// Cerrar la conexi\u00f3n\nstatement.close()\nconnection.close()\n} catch (e: SQLException) {\nprintln(\"Se ha producido un error al intentar eliminar el usuario.\")\nprintln(\"Mensaje de error: ${e.message}\")\n}\n</code></pre></p> <p>En este ejemplo, se utiliza un bloque <code>try-catch</code> para manejar cualquier excepci\u00f3n de SQL que pueda ocurrir al intentar eliminar un registro de la tabla usuarios. Dentro del bloque <code>try</code>, se establece la conexi\u00f3n con la base de datos, se crea una sentencia SQL para eliminar el registro con <code>id</code> <code>1</code> y se crea un objeto <code>PreparedStatement</code> para ejecutar la sentencia. A continuaci\u00f3n, se utiliza la funci\u00f3n <code>executeUpdate()</code> para eliminar el registro y se obtiene el n\u00famero de registros eliminados. Si se ha eliminado el registro correctamente, se muestra un mensaje indicando que el registro ha sido eliminado. De lo contrario, se muestra un mensaje indicando que no se ha eliminado ning\u00fan registro. Finalmente, se cierra la conexi\u00f3n y se maneja cualquier excepci\u00f3n de SQL que pueda ocurrir en el bloque <code>catch</code>.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#manejar-errores-de-actualizacion","title":"Manejar errores de actualizaci\u00f3n.","text":"<p>Al igual que en el caso de la eliminaci\u00f3n de registros, es importante manejar correctamente los errores que puedan surgir al actualizar registros en una base de datos. Algunos de los errores m\u00e1s comunes son la falta de permisos para realizar la actualizaci\u00f3n, el incumplimiento de restricciones de integridad referencial o de validaci\u00f3n, o la falta de conexi\u00f3n a la base de datos.</p> <p>Dentro del bloque <code>catch</code>, se puede proporcionar informaci\u00f3n sobre el error al usuario o registrar el error en un archivo de registro para su posterior an\u00e1lisis. Es importante asegurarse de que el usuario sea informado adecuadamente sobre los errores que puedan ocurrir durante la actualizaci\u00f3n de registros.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#un-crud-aplicando-el-patron-dao","title":"Un CRUD aplicando el patr\u00f3n DAO","text":"<p>A continuaci\u00f3n veremos un ejemplo en Kotlin de una implementaci\u00f3n b\u00e1sica de un sistema CRUD (Create, Read, Update, Delete) usando un patr\u00f3n DAO (Data Access Object) y servicios. Este c\u00f3digo implementa una arquitectura b\u00e1sica de DAO y servicios para interactuar con una base de datos H2 y realizar operaciones CRUD en una tabla de usuarios. Se puede resumir en el siguiente extracto:</p> <p>La clase <code>UserEntity</code> define el modelo de datos para el usuario con tres atributos: <code>id</code> (de tipo <code>UUID</code>), <code>name</code> y <code>email</code>.</p> <p>La interfaz <code>UserDAO</code> define las operaciones que se pueden realizar con la base de datos para los usuarios, como crear (<code>create</code>), obtener todos los usuarios (<code>getAll</code>), obtener un usuario por su id (<code>getById</code>), actualizar (<code>update</code>) y eliminar (<code>delete</code>) un usuario. Se podr\u00edan crear m\u00e1s metodos en funci\u00f3n de las necesidades, por ejemplo <code>getByEmail</code>.</p> <p>La clase <code>UserDAOH2</code> implementa la interfaz <code>UserDAO</code> y define las operaciones de base de datos espec\u00edficas de la implementaci\u00f3n de H2. La clase tiene una dependencia de <code>DataSource</code>, que es una fuente de conexi\u00f3n de base de datos que se utiliza para realizar operaciones en la base de datos.</p> <p>La interfaz <code>UserService</code> define las operaciones que se pueden realizar con los usuarios a nivel de servicio, que son crear (<code>create</code>), obtener todos los usuarios (<code>getAll</code>), obtener un usuario por su id (<code>getById</code>), actualizar (<code>update</code>) y eliminar (<code>delete</code>) un usuario. Igualmente, se podr\u00edan crear m\u00e1s metodos en funci\u00f3n de las necesidades, por ejemplo <code>getByEmail</code>.</p> <p>La clase <code>UserServiceImpl</code> implementa la interfaz <code>UserService</code> y utiliza un objeto de la clase <code>UserDAOH2</code> para interactuar con la base de datos.</p> <p>La clase <code>DataSourceFactory</code> es una factor\u00eda que proporciona instancias de <code>DataSource</code> seg\u00fan el tipo de fuente de datos especificado.</p> <p>En la funci\u00f3n <code>main</code> se prueba todo el c\u00f3digo, para ello se crea una instancia de la base de datos, se crea una instancia de <code>UserDAOH2</code>, se crea una instancia de <code>UserServiceImpl</code> y se realizan algunas operaciones CRUD en la base de datos utilizando <code>UserServiceImpl</code>. La salida se imprime en la consola.</p> <p>Ver el c\u00f3digo aqu\u00ed: Servicio de usuario, haciendo uso del patron DAO</p> <p>Mas informaci\u00f3n en CRUD</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#resumiendo","title":"Resumiendo","text":"<ul> <li>Las bases de datos son una herramienta crucial para el desarrollo de software, ya que permiten a los desarrolladores almacenar y gestionar grandes cantidades de informaci\u00f3n de manera eficiente y confiable. La capacidad de almacenar y acceder a informaci\u00f3n de manera eficiente es una necesidad en cualquier aplicaci\u00f3n de software moderna, y las bases de datos son la soluci\u00f3n m\u00e1s com\u00fan y eficaz para esta necesidad.</li> <li>Kotlin es un lenguaje de programaci\u00f3n moderno y seguro que se utiliza cada vez m\u00e1s en el desarrollo de aplicaciones inform\u00e1ticas. En la programaci\u00f3n de aplicaciones que acceden a bases de datos, Kotlin es una opci\u00f3n popular y efectiva debido a su soporte integrado para el acceso a bases de datos y su sintaxis concisa y expresiva. El uso de Kotlin en la programaci\u00f3n de aplicaciones que acceden a bases de datos permite a los desarrolladores crear aplicaciones m\u00e1s seguras, confiables y escalables.</li> <li>Un sistema gestor de bases de datos relacional es un software utilizado para almacenar, organizar y manipular datos en una base de datos relacional. Los sistemas gestores de bases de datos relacionales tienen caracter\u00edsticas como una estructura basada en tablas, relaciones entre tablas, consultas complejas, integridad de los datos y escalabilidad. Los m\u00e9todos de acceso a sistemas gestores de bases de datos relacionales incluyen la API JDBC y el ORM.</li> <li>Los m\u00e9todos de acceso a bases de datos incluyen JDBC, ORM, JPA y Spring Data. JDBC proporciona una interfaz com\u00fan para acceder a bases de datos relacionales desde aplicaciones Java. El ORM y JPA proporcionan una interfaz orientada a objetos para acceder a los datos de la base de datos. Spring Data proporciona una abstracci\u00f3n de acceso a datos para aplicaciones Java. Los diferentes m\u00e9todos de acceso a bases de datos tienen sus propias ventajas y desventajas. Es importante elegir el m\u00e9todo adecuado seg\u00fan las necesidades de la aplicaci\u00f3n. Si se requiere un control m\u00e1s granular sobre las consultas y las transacciones, JDBC puede ser la mejor opci\u00f3n. Si se busca una abstracci\u00f3n de acceso a datos orientada a objetos, ORM, JPA o Spring Data pueden ser la mejor opci\u00f3n.</li> <li>Debemos elegir la forma de mostrar los resultados que mejor se adapte a las necesidades de nuestros usuarios y al tipo de aplicaci\u00f3n que estamos desarrollando. Es importante que la presentaci\u00f3n de los datos sea clara y f\u00e1cil de entender para que los usuarios puedan interactuar con ellos de manera efectiva.</li> <li>Es importante manejar adecuadamente los errores que se producen durante la interaci\u00f3n de base de datos, por ejemplo al conectarnos, al inserci\u00f3n de datos, etc. Podemos utilizar bloques try-catch en Kotlin y JDBC para capturar y manejar estas excepciones de forma adecuada.</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#ejemplo","title":"Ejemplo","text":"<ul> <li>Servicio de usuario, haciendo uso del patron DAO</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.1.-AccesoBBDD/#fuente-y-bibliografia","title":"Fuente y bibliograf\u00eda","text":"<ul> <li>The DAO Pattern</li> <li>The DTO Pattern</li> <li>Programaci\u00f3n - 08 Programaci\u00f3n con Bases de Datos - Jos\u00e9 Luis Gonz\u00e1lez</li> <li>[Librer\u00eda SQLDeLight]https://github.com/joseluisgs/Programacion-08-2022-2023#sqldelight</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/","title":"C\u00f3mo acceder a una base de datos con Kotlin usando JDBC: los fundamentos","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#1-aprenda-como-se-accede-a-las-bases-de-datos-a-bajo-nivel-usando-jdbc","title":"1. Aprenda c\u00f3mo se accede a las bases de datos a bajo nivel usando JDBC","text":"<p>Acceder a las bases de datos es una tarea com\u00fan en el desarrollo de aplicaciones. Todas las aplicaciones del lado del servidor acceden a las bases de datos de una forma u otra. En lo que respecta a Kotlin, hereda un rico conjunto de bibliotecas del mundo Java, gracias a la interoperabilidad. Estas bibliotecas brindan caracter\u00edsticas deslumbrantes como ORM, SQL con seguridad de tipos, etc.</p> <p>Sin embargo, si est\u00e1s haciendo esto por primera vez, es posible que todas las bibliotecas sofisticadas no tengan mucho sentido ahora mismo. Para ponerlo en marcha, haremos una introducci\u00f3n a JDBC.</p> <p>En este punto, trabajaremos sobre:</p> <ol> <li>\u00bfQu\u00e9 es JDBC? \u00bfY c\u00f3mo usarlo con Kotlin?</li> <li>\u00bfQu\u00e9 es una URL de JDBC?</li> <li>C\u00f3mo establecer una conexi\u00f3n con una base de datos y ejecutar consultas SQL.</li> <li>\u00bfQu\u00e9 es la agrupaci\u00f3n de conexiones y c\u00f3mo implementarla con HikariCP?</li> </ol>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#11-que-es-jdbc","title":"1.1. \u00bfQu\u00e9 es JDBC?","text":"<p>JDBC significa Conectividad de base de datos Java. Es una biblioteca de bajo nivel que proporciona funcionalidad para interactuar con una base de datos. Para usar JDBC no tienes que depender de ninguna biblioteca de terceros. Viene incluido con todos los JDK que existen.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#12-como-usar-jdbc-con-kotlin","title":"1.2. \u00bfC\u00f3mo usar JDBC con Kotlin?","text":"<p>Los pasos para trabajar con JDBC son los siguientes:</p> <ul> <li>Paso 1: Prepara una tabla en tu base de datos</li> <li>Paso 2: Encuentre el controlador JDBC de su base de datos y agr\u00e9guelo a su proyecto</li> <li>Paso 3: Establecer una conexi\u00f3n mediante una URL de JDBC</li> <li>Paso 4: Escribir y ejecutar consultas SQL</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#121-prepara-una-tabla","title":"1.2.1. Prepara una tabla","text":"<p>Vamos a crear una tabla llamada <code>users</code> y llenarla con algunos datos. En el ejemplo usaremos PostgreSQL, pero puedes utilizar la base de datos que sea m\u00e1s de tu agrado.</p> <p>crear una tabla</p> <pre><code>-- SERIAL is similar to INTEGER AUTOINCREMENT\nCREATE TABLE  users (id SERIAL PRIMARY KEY, name VARCHAR(20));\nview rawjdbc.sql hosted with \u2764 by GitHub\n</code></pre> <p>llenarlo con datos</p> <pre><code>INSERT INTO users (name) VALUES\n('Kohli'),\n('Rohit'),\n('Bumrah'),\n('Dhawan');\n</code></pre> <p>Ahora el resultado de una consulta <code>SELECT * FROM users</code> se parece a esto.</p> <pre><code>SELECT * FROM users;\n\n id |  name  \n----+--------\n  1 | Kohli\n  2 | Rohit\n  3 | Bumrah\n  4 | Dhawan\n(4 rows)\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#122-agregue-el-controlador-jdbc-a-su-proyecto","title":"1.2.2. Agregue el controlador JDBC a su proyecto","text":"<p>Para acceder a estos datos desde su c\u00f3digo Kotlin, debe incluir el controlador JDBC de su base de datos como una dependencia de Gradle. Usaremos el DBMS PostgreSQL. Si no est\u00e1 usando PostgreSQL, deber\u00e1s encontrar el controlador JDBC de la base de datos que est\u00e1s utilizando. Una simple b\u00fasqueda en Google ser\u00eda suficiente.</p> <pre><code>dependencies {\nimplementation(\"org.postgresql:postgresql:42.3.1\")\n}\n</code></pre> <p>Ahora, veremos c\u00f3mo recuperar los datos de la base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#123-establecer-una-conexion-de-base-de-datos-a-traves-de-una-url-de-jdbc","title":"1.2.3 Establecer una conexi\u00f3n de base de datos a trav\u00e9s de una URL de JDBC","text":"<p>Para crear una conexi\u00f3n a la base de datos, necesitaremos una URL de JDBC como la siguiente:</p> <pre><code>fun main(){\nval jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n}\n</code></pre> <p>Como se puede ver, la URL de JDBC consta de tres componentes principales. A continuaci\u00f3n vemos una versi\u00f3n desglosada de una URL de JDBC</p> <ol> <li>El <code>host name</code> = <code>localhost</code></li> <li>El <code>port number</code> = <code>5432</code></li> <li>El <code>database name</code> = <code>example</code></li> </ol> <p></p> <p>Para crear una conexi\u00f3n, usa el m\u00e9todo <code>DriverManager.getConnection</code>, pasando la URl y el login y password para conectar a la base de datos.</p> <pre><code>import java.sql.DriverManager\n// the model class\ndata class User(val id: Int, val name: String)\nfun main(){\nval jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n// get the connection\nval connection = DriverManager\n.getConnection(jdbcUrl, \"postgres\", \"postgres\")\n}\n</code></pre> <p>Como coment\u00e1bamos:</p> <ol> <li>el primer argumento del m\u00e9todo <code>DriverManager.getConnection</code> es la <code>URL JDBC</code>.</li> <li>el segundo argumento es el <code>username</code> de la base de datos.</li> <li>el \u00faltimo argumento es el <code>password</code>de ese usuario en particular.</li> </ol> <p>El m\u00e9todo <code>DriverManager.getConnection</code> devolver\u00e1 un objeto <code>Connection</code>. Podremos verificar si la conexi\u00f3n es v\u00e1lida o no usando el m\u00e9todo <code>isValid()</code> del objeto <code>Connection</code>.</p> <pre><code>import java.sql.DriverManager\n// the model class\ndata class User(val id: Int, val name: String)\nfun main(){\nval jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n// get the connection\nval connection = DriverManager\n.getConnection(jdbcUrl, \"postgres\", \"postgres\")\n// prints true if the connection is valid\nprintln(connection.isValid(0))\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#124-escribir-y-ejecutar-consultas-sql","title":"1.2.4. Escribir y ejecutar consultas SQL","text":"<p>Antes de ejecutar las consultas, tendremos que creear las clases que almacenar\u00e1n los resultados.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#crear-una-clase-para-el-modelo","title":"Crear una clase para el modelo","text":"<p>Primero, cree una clase modelo para representar los datos que estamos a punto de recibir de la base de datos.</p> <pre><code>// create a model class\ndata class User(val id: Int, val name: String)\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#escribir-y-ejecutar-consultas-sql","title":"Escribir y ejecutar consultas SQL","text":"<p>Ahora, puedes escribir y ejecutar consultas SQL usando la conexi\u00f3n. Pero como JDBC es una biblioteca de bajo nivel, todo debe hacerse a mano.</p> <p>Para ejecutar una consulta <code>SELECT</code> usando la conexi\u00f3n necesitas:</p> <ol> <li>Preparar una sentencia SQL: <code>Statement</code></li> <li>Ejecutar la <code>Statement</code>, que devolver\u00e1 un objeto <code>ResultSet</code></li> <li>Iterar a trav\u00e9s de <code>ResultSet</code>y recuperar valores con m\u00e9todos como <code>getInt</code>o<code>getString</code></li> </ol> <p>Considera el siguiente ejemplo:</p> <pre><code>import java.sql.DriverManager\n// the model class\ndata class User(val id: Int, val name: String)\nfun main(){\nval jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n// get the connection\nval connection = DriverManager\n.getConnection(jdbcUrl, \"postgres\", \"postgres\")\n// prints true if the connection is valid\nprintln(connection.isValid(0))\n// the query is only prepared not executed\nval query = connection.prepareStatement(\"SELECT * FROM users\")\n// the query is executed and results are fetched\nval result = query.executeQuery()\n// an empty list for holding the results\nval users = mutableListOf&lt;User&gt;()\nwhile(result.next()){\n// getting the value of the id column\nval id = result.getInt(\"id\")\n// getting the value of the name column\nval name = result.getString(\"name\")\n/*\n        constructing a User object and\n        putting data into the list\n         */\nusers.add(User(id, name))\n}\n/*\n    [User(id=1, name=Kohli), User(id=2, name=Rohit),\n    User(id=3, name=Bumrah), User(id=4, name=Dhawan)]\n     */\nprintln(users)\n}\n</code></pre>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#2-que-es-una-agrupacion-de-conexiones-connection-pooling","title":"2. \u00bfQu\u00e9 es una agrupaci\u00f3n de conexiones (connection pooling)?","text":"<p>No se puede realizar una introducci\u00f3n a las bases de datos sin hablar de la agrupaci\u00f3n de conexiones o pool de conexiones.</p> <p>Imag\u00ednate que est\u00e1s escribiendo una aplicaci\u00f3n del lado del servidor. Cada vez que un usuario necesita acceder a la base de datos, abrir\u00e1 una nueva conexi\u00f3n de base de datos para obtener datos. Esto es ineficiente porque abrir una conexi\u00f3n a la base de datos es una tarea costosa y no debe hacerse una y otra vez. Este es exactamente el problema que puede resolver el pool de conexiones.</p> <p>Al utilizar un pool de conexiones, puedes abrir m\u00faltiples conexiones que estar\u00e1n activas durante la vida \u00fatil de la aplicaci\u00f3n. Estas conexiones se encapsular\u00e1n en un archivo <code>DataSource</code>. Siempre que necesites acceder a la base de datos, en lugar de crear una nueva conexi\u00f3n, le pedir\u00e1s al <code>DataSource</code> una conexi\u00f3n. El <code>DataSource</code> te ceder\u00e1 una conexi\u00f3n desde el pool de conexiones. Cuando termines la operaci\u00f3n sobre la base de datos, la conexi\u00f3n retornar\u00e1 al pool de conexiones y volver\u00e1 a estar disponible para su uso.</p> <p>La mayor\u00eda de las bibliotecas y marcos de trabajo que te facilitan la conexi\u00f3n a las base de datos ya traen consigo una API adecuada para solucionar este problema. HikariCP es una de las mejores bibliotecas que satisface este problema. Por defecto, utiliza 10 conexiones como l\u00edmite m\u00e1ximo, y es f\u00e1cilmente modificable. Si quieres obtener m\u00e1s informaci\u00f3n sobre la configuraci\u00f3n del tama\u00f1o del pool, consulta esta gu\u00eda: Sobre la modificaci\u00f3n del tama\u00f1o del pool .</p> <p>Veamos un ejemplo r\u00e1pido de agrupaci\u00f3n de conexiones usando HikariCP.</p> <p>Comienza agregando la dependencia a tu archivo <code>build.gradle.kts</code>.</p> <pre><code>dependencies {\nimplementation (\"com.zaxxer:HikariCP:5.0.0\")\n}\n</code></pre> <p>Para inicializar un <code>DataSource</code> realiza los siguientes pasos:</p> <ol> <li>Crea un objeto dataSource con el m\u00e9todo <code>HikariDataSource()</code></li> <li>Establece en el objeto dataSource la URL de JDBC</li> <li>Establece en el objeto dataSource el nombre de usuario</li> <li>Establece en el objeto dataSource la contrase\u00f1a</li> <li>Obt\u00e9n la conexi\u00f3n de la <code>DataSource</code></li> <li>Usa la conexi\u00f3n de la manera que hemos visto.</li> </ol> <p>Aqu\u00ed hay un ejemplo de los pasos anteriores:</p> <pre><code>fun main(){\n// create a dataSource\nval dataSource = HikariDataSource()\n// set the jdbcUrl\ndataSource.jdbcUrl = \"jdbc:postgresql://localhost:5432/example\"\n// set the username\ndataSource.username = \"postgres\"\n// set the password\ndataSource.password = \"postgres\"\nprintln(dataSource.maximumPoolSize)\n// get a connection\nval connection = dataSource.connection\n// the query is only prepared not executed\nval query = connection.prepareStatement(\"SELECT * FROM users\")\n// the query is executed and results are fetched\nval result = query.executeQuery()\n// an empty list for holding the results\nval users = mutableListOf&lt;User&gt;()\nwhile (result.next()) {\n// getting the value of the id column\nval id = result.getInt(\"id\")\n// getting the value of the name column\nval name = result.getString(\"name\")\n/*\n        constructing a User object and\n        putting data into the list\n         */\nusers.add(User(id, name))\n}\n/*\n    [User(id=1, name=Kohli), User(id=2, name=Rohit),\n    User(id=3, name=Bumrah), User(id=4, name=Dhawan)]\n     */\nprintln(users)\n}\n</code></pre> <p>Nota: Hay varias formas de inicializar un <code>DataSource</code> con <code>HikariCP</code>. Lee la secci\u00f3n de inicializaci\u00f3n del archivo README del Repositorio HikariCP Github .</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#3-por-que-necesitamos-abstraccion-adicional-sobre-jdbc","title":"3. \u00bfPor qu\u00e9 necesitamos abstracci\u00f3n adicional sobre JDBC?","text":"<p>Como has podido comprobar si has intentado adaptarlo a alguna consultar de una tabla que tu tengas, acceder a las bases de datos haciendo uso de <code>JDBC</code> puro puede convertirse r\u00e1pidamente en una tarea engorrosa. El proceso es propenso a errores y se requiere mucho trabajo pesado y disciplina por parte del desarrollador. Aqu\u00ed es donde las bibliotecas y los marcos de trabajo son \u00fatiles.</p> <p>Cuando se trata de bibliotecas y marcos de trabajo para acceder a bases de datos, hay una variedad de opciones para elegir. Puede optar por usar un ORM completo como Hibernate, o puede usar algo de bajo nivel como JDBI. JDBI proporciona una capa de abstracci\u00f3n sobre JDBC. Tambi\u00e9n hay algunas bibliotecas Kotlin-first. La m\u00e1s popular es la biblioteca Exposed de Jetbrains, que veremos m\u00e1s adelante. Exposed viene en dos sabores. Un lenguaje espec\u00edfico del dominio, (en ingl\u00e9s domain-specific language, DSL) con seguridad de tipos que hace de envoltorio a SQL y una capa liguera en la que se facilita la implementaci\u00f3n de objetos de acceso a datos (en ingl\u00e9s data access objects, DAO).</p> <p>Para obtener una descripci\u00f3n general completa de todas las bibliotecas de bases de datos en el mundo de Java, puedes leer el art\u00edculo siguiente: Java y bases de datos: una descripci\u00f3n general de las bibliotecas y las API por Marco Behler</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#4-conclusiones","title":"4. Conclusiones","text":"<ol> <li>Puedes acceder a una base de datos a trav\u00e9s de la biblioteca de bajo nivel JDBC, que viene incluido con todos los JDK que existen. Entonces, no hay necesidad de otra dependencia.</li> <li>Para conectarse con una base de datos en particular, necesita el controlador JDBC para esa base de datos en particular.</li> <li>Todas las bibliotecas para bases de datos en el mundo JVM est\u00e1n construidas sobre JDBC.</li> <li>Mientras trabaja en un proyecto real, debes utilizar alg\u00fan mecanismo que te facilite el uso de un pool de conexiones. La agrupaci\u00f3n de conexiones le permite mantener viva una peque\u00f1a cantidad de conexiones de bases de datos, en lugar de crear una conexi\u00f3n nueva cada vez, (re)utiliza una conexi\u00f3n del pool.</li> <li>HikariCP es una buena opci\u00f3n para usar un pool de conexiones. Por defecto, utiliza 10 conexiones como l\u00edmite m\u00e1ximo. Y es f\u00e1cilmente modificable.</li> </ol> <p>Independientemente de la biblioteca que uses, ahora tienes una comprensi\u00f3n b\u00e1sica de lo que sucede debajo del cap\u00f3 mientras consulta su base de datos desde la capa de aplicaci\u00f3n.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.2.-JDBC-1/#5-bibliografia","title":"5. Bibliograf\u00eda","text":"<ul> <li>El articulo original</li> <li>El repositorio original</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.3.-JDBC-2/","title":"JDBC Prepared Statement y su manejo","text":"<p>El uso de JDBC Prepared Statement es hoy en d\u00eda pr\u00e1cticamente obligatorio. A\u00fan as\u00ed hay muchas veces que nos olvidamos de de como usarlos ya que son los frameworks de persistencia los que los utilizan de forma transparente por  nosotros. A\u00fan as\u00ed hay situaciones en las cuales nos podemos encontrar con la necesidad de hacer uso de ellos de forma directa. \u00bfC\u00f3mo funcionan exactamente los JDBC Prepared Statement ?</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.3.-JDBC-2/#utilizando-jdbc-prepared-statement","title":"Utilizando JDBC Prepared Statement","text":"<p>Lo primero que tenemos que entender es cual es la diferencia  entre un Statement de JDBC y un Prepared Statement . Cuando nosotros construimos una consulta normal de JDBC utilizamos un Statement, este Statement o sentencia lo que se encarga es de definir una consulta SQL a ejecutar contra el motor de la base de datos.</p> <pre><code>Connection conexion = DriverManager.getConnection(\"jdbc:mysql://localhost/prueba\", \"root\",\"root\");\nStatement sentencia = conexion.createStatement();\nString nombre=\"pepe\";\nString consulta = \"select * from Persona where nombre='\"+nombre+\"'\";\nResultSet rs=sentencia.executeQuery(consulta);\n</code></pre> <p>En este caso estamos construyendo una sentencia y aportando  un par\u00e1metro a la consulta de forma din\u00e1mica . Esto b\u00e1sicamente se convierte en una consulta SQL que nosotros ejecutamos v\u00eda el driver JDBC contra la base de datos.</p> <p></p> <p>Muchas veces se nos olvida que para cada consulta SQL que construimos contra la base de datos se construye un plan de ejecuci\u00f3n en el que la base de datos decide como esa consulta se ejecuta.</p> <p></p> <p>A dos consultas diferentes se crean dos planes de ejecuci\u00f3n diferentes aunque ambas consultas sean realmente muy similares y \u00fanicamente entre e**n juego el valor del par\u00e1metro que las pasamos**. Para solventar este problema existen los JDBC Prepared statement. Estas estructuras permiten mantener las consultas neutras sin tener en cuenta los par\u00e1metros que se las pasa ya que realiza un binding de ellos</p> <p></p> <p>De esta forma cuando la base de datos genera un hash para el plan de ejecuci\u00f3n ambas consultas, la que consulta por pepe y la que consulta por ana devuelven el mismo hash y comparten el plan de ejecuci\u00f3n. Vamos a ver esto en c\u00f3digo: <pre><code>String consulta = \"select * from Persona where nombre = ? \";\nConnection conexion= DriverManager.getConnection(\"jdbc:mysql://localhost/prueba\", \"root\", \"root\");\nPreparedStatement sentencia= conexion.prepareStatement(consulta);\nsentencia.setString(1, \"pepe\");\nResultSet rs = sentencia.executeQuery();\n</code></pre></p> <p>No solo nos estaremos ahorrando la construcci\u00f3n de planes de ejecuci\u00f3n sino que tambi\u00e9n de la misma manera estamos evitando que nos inyecten SQL ya que al parametrizar la consulta el API de JDBC nos protege contra este tipo de ataques. Normalmente el uso de consultas parametrizadas mejora el rendimiento entre un 20 y un 30 % a nivel de base de datos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.3.-JDBC-2/#jdbc-prepared-statement-y-logs","title":"JDBC Prepared Statement y Logs","text":"<p>Hay situaciones en las que necesitamos realizar un log de la consulta SQL , al tratarse de una sentencia preparada solemos hacer un log del String algo como por ejemplo</p> <pre><code>String consulta = \"select * from Persona where nombre = ? \";\nlog(consulta);\n</code></pre> <p>Esto a veces puede ser un problema ya que perdemos los par\u00e1metros que se pasan . Sin embargo muchos drivers soportan el log de la propia consulta SQL con los par\u00e1metros ya aplicados realizando un log de la propia sentencia</p> <pre><code>String consulta = \"select * from Persona where nombre = ? \";\nPreparedStatement ps = con.prepareStatement(consulta);\nps.setString(1, nombre);\nlog(ps);\n</code></pre> <p>Teng\u00e1moslo en cuenta, en este caso podremos ver salir por la consola algo del siguiente estilo: <pre><code>com.mysql.jdbc.JDBC42PreparedStatement@67424e82: select * from Persona where nombre=\u2019juan\u2019\n</code></pre> El par\u00e1metro aparece.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/","title":"UD 9 - 9.3 Patron DAO","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#data-access-object-dao-pattern","title":"Data Access Object (DAO) Pattern","text":"<p>Pr\u00e1cticamente todas las aplicaciones de hoy en d\u00eda, requiere acceso al menos a una fuente de datos, dichas fuentes son por lo general base de datos relacionales, por lo que muchas veces no tenemos problema en acceder a los datos, sin embargo, hay ocasiones en las que necesitamos tener m\u00e1s de una fuente de datos o la fuente de datos que tenemos puede variar, lo que nos obligar\u00eda a refactorizar gran parte del c\u00f3digo. Para esto, tenemos el patr\u00f3n Arquitect\u00f3nico Data Access Object (DAO), el cual permite separar la l\u00f3gica de acceso a datos de los Bussines Objects u Objetos de negocios, de tal forma que el DAO encapsula toda la l\u00f3gica de acceso de datos al resto de la aplicaci\u00f3n.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#problematica","title":"Problem\u00e1tica","text":"<p>Una de las grandes problem\u00e1ticas al momento de acceder a los datos, es que la implementaci\u00f3n y formato de la informaci\u00f3n puede variar seg\u00fan la fuente de los datos. Implementar la l\u00f3gica de acceso a datos en la capa de l\u00f3gica de negocio puedes ser un gran problema, pues tendr\u00edamos que lidiar con la l\u00f3gica de negocio en s\u00ed, m\u00e1s la implementaci\u00f3n para acceder a los datos, adicional, si tenemos m\u00faltiples fuentes de datos o estas pueden variar, tendr\u00edamos que implementar las diferentes l\u00f3gicas para acceder las diferentes fuentes de datos, como podr\u00edan ser: bases de datos relacionales, No SQL, XML, archivos planos, Webservices, etc).</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#solucion","title":"Soluci\u00f3n","text":"<p>Dado lo anterior, el patr\u00f3n DAO propone separar por completo la l\u00f3gica de negocio de la l\u00f3gica para acceder a los datos, de esta forma, el DAO proporcionar\u00e1 los m\u00e9todos necesarios para insertar, actualizar, borrar y consultar la informaci\u00f3n; por otra parte, la capa de negocio solo se preocupa por l\u00f3gica de negocio y utiliza el DAO para interactuar con la fuente de datos.</p> <p></p> <p>Los compones que conforman el patr\u00f3n son:</p> <ul> <li><code>BusinessObject</code> : representa un objeto con la l\u00f3gica de negocio.</li> <li><code>DataAccessObject</code> : representa una capa de acceso a datos que oculta la fuente y los detalles t\u00e9cnicos para recuperar los datos.</li> <li><code>TransferObject</code> : este es un objeto plano que implementa el patr\u00f3n Data Transfer Object (DTO), el cual sirve para transmitir la informaci\u00f3n entre el DAO y el Business Service.</li> <li><code>DataSource</code> : representa de forma abstracta la fuente de datos, la cual puede ser una base de datos, Webservices, LDAP, archivos de texto, etc.</li> </ul> <p>El siguiente diagrama muestra mejor la forma en que funciona el patr\u00f3n, pues muestra de forma secuencial la forma en que se ejecutar\u00eda el patr\u00f3n.</p> <p></p> <p>El diagrama se interpreta de la siguiente manera:</p> <ol> <li>El <code>BusinessObject</code> creo u obtiene una referencia al  <code>DataAccessObject</code> .</li> <li>El <code>BusinessObject</code> solicita informaci\u00f3n al <code>DataAccessObject</code><ul> <li>El <code>DataAccessObject</code> solicita la informaci\u00f3n al <code>DataSource</code></li> <li>El <code>DataAccessObject</code> crea una instancia del TransferObject con los datos recuperados del <code>DataSource</code></li> <li>El <code>DataAccessObject</code> response con el <code>TransferObject</code> creado en los pasos anteriores.</li> </ul> </li> <li>El <code>BusinessObject</code> actualiza alg\u00fan valor del <code>TransferObject</code><ul> <li>M\u00e1s actualizaciones</li> </ul> </li> <li>El <code>BusinessObject</code> solicita el guardado de los datos actualizados al  <code>DataAccessObject</code> .<ul> <li>El <code>DataAccessObject</code> guarda los datos en el  <code>DataSource</code> .</li> </ul> </li> </ol> <p>Como hemos podido ver, el <code>BusinessService</code> no se preocupa de donde vengan los datos ni c\u00f3mo deben de ser guardados en el <code>DataSource</code>, el solo se preocupa por conocer el <code>TransferObject</code>. Un error com\u00fan al implementar este patr\u00f3n es no utilizar <code>TransferObject</code> y en su lugar, regresar los objetos que regresan las mismas API\u2019s de las fuentes de datos, ya que esto obliga al <code>BusinessService</code> tener una dependencia con estas librer\u00edas, adem\u00e1s, si la fuente de datos cambia, tambi\u00e9n cambiar\u00e1n estas clases, lo que provocar\u00eda una afectaci\u00f3n directa al <code>BusinessService</code>.</p> <p>Hace unos d\u00edas escribir sobre el patr\u00f3n Data Transfer Object (DTO) por si quieres profundizar en el tema.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#dao-y-el-patron-abstract-factory","title":"DAO y el patr\u00f3n Abstract Factory","text":"<p>Hasta este punto solo hemos analizado como trabajar\u00edamos si solo tuvi\u00e9ramos una fuente de datos, sin embargo, existe ocasiones donde requerimos obtener datos de m\u00e1s de una fuente, y es all\u00ed donde entra el patr\u00f3n de dise\u00f1o Abstract Factory</p> <p>Mediante el patr\u00f3n Abstract Factory podemos definir una serie de familias de clases que permitan conectarnos a las diferentes fuentes de datos. Para esto, examinaremos un sistema de autenticaci\u00f3n de usuarios, el cual puede leer los usuarios en una base de datos o sobre un XML, adicional, el sistema generara registros de login que podr\u00e1n ser utilizados para auditorias.</p> <p>Lo primero ser\u00eda implementar las clases para acceder de las dos fuentes:</p> <p></p> <p>En la imagen anterior podemos apreciar dos familias de clases, con las cuales podemos obtener los Usuarios y los registros de auditoria, sin embargo, estas clases por separado no ayudan mucho, pues no implementan una misma interface que permita la variaci\u00f3n entre ellas, por lo que el siguiente paso es crear estas interfaces:</p> <p></p> <p>En este punto, los DAO ya implementan una interfaz com\u00fan, lo que permite intercambiar la implementaci\u00f3n sin afectar al Business Object. Sin embargo, ahora solo falta resolver la forma en que el Business Service obtendr\u00e1 la familiar de interfaces, es por ello que deberemos crear un Factory para cada familia de interfaces:</p> <p></p> <p>En esta nueva configuraci\u00f3n, podemos ver que tenemos un Factory para cada familia, y los dos factorys implementan una interfaz en com\u00fan, adicional, tenemos la interface <code>IDAOFactory</code> necesaria para que el factory de cada familia implementen una interface en com\u00fan.</p> <p></p> <p>Analicemos como quedar\u00eda la secuencia de ejecuci\u00f3n</p> <ol> <li>El <code>BusinessObject</code> solicita la creaci\u00f3n de un <code>DAOFactory</code> para SQL<ul> <li>El <code>DAOFactory</code> crea una instancia de la clase *SQLDAOFactory *y la retorna</li> </ul> </li> <li>El <code>BusinessObject</code> solicita al <code>SQLDAOFactory</code> la creaci\u00f3n del <code>SQLUserDAO</code> para interactuar con los usuarios.<ul> <li>El <code>SQLDAOFactory</code> crea una nueva instancia del <code>SQLUserDAO</code></li> <li>El <code>SQLDAOFactory</code> retorna la instancia creada del <code>SQLUserDAO</code></li> </ul> </li> <li>El <code>BusinessObject</code> solicita el listado de todos los usuarios registrados al <code>SQLUserDAO</code><ul> <li>El <code>SQLUserDAO</code> recupera los usuarios del SQLDataSource</li> <li>El <code>SQLUserDAO</code> crea un <code>TransferObject</code> con los datos recuperados del paso anterior.</li> <li>El <code>SQLUserDAO</code> retorna el <code>TransferObject</code> creado en el paso anterior.</li> </ul> </li> </ol> <p>Adicional a los pasos que hemos listado aqu\u00ed, podr\u00edamos solicitar al <code>SQLDAOFactory</code> la creaci\u00f3n del <code>SQLAuditDAO</code> o incluso, solicitar al <code>DAOFactory</code> la creaci\u00f3n del <code>XMLFactory</code> para interactuar con la fuente de datos en XML.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#conclusiones","title":"Conclusiones","text":"<p>El patr\u00f3n DAO es sin lugar a duda, unos de los m\u00e1s utilizados en la actualidad, ya que es f\u00e1cil de implementar y proporciona claros beneficios, incluso, si solo tenemos una fuente de datos y esta no cambia, pues permite separar por completo la l\u00f3gica de acceso a datos en una capa separada y as\u00ed solo nos preocupamos por la l\u00f3gica de negocio sin preocuparnos de donde viene los datos o los detalles t\u00e9cnicos para consultarlos o actualizarlos.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.4.-DAO/#fuente-y-bibliografia","title":"Fuente y Bibliograf\u00eda","text":"<ul> <li>Patr\u00f3n de dise\u00f1o DTO</li> <li>Patr\u00f3n de dise\u00f1o Abstract Factory</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/","title":"UD 9 - 9.5 Otros aspectos","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#otros-aspectos-a-tener-en-cuenta","title":"Otros aspectos a tener en cuenta","text":"<p>Supongamos que est\u00e1s desarrollando una aplicaci\u00f3n de comercio electr\u00f3nico que necesita una base de datos para almacenar informaci\u00f3n de productos, pedidos, usuarios y pagos. La aplicaci\u00f3n debe ser capaz de mostrar la informaci\u00f3n de productos a los usuarios, permitirles agregar productos a su carrito de compras, realizar pagos y gestionar los pedidos realizados.</p> <p>Para interactuar con la base de datos, puedes utilizar un lenguaje de programaci\u00f3n como Java o Kotlin y un sistema de gesti\u00f3n de bases de datos como MySQL o PostgreSQL, entre otros...</p> <p>Al dise\u00f1ar la base de datos, debes tener en cuenta la relaci\u00f3n entre los objetos de la aplicaci\u00f3n y las tablas de la base de datos. En este caso, por ejemplo, la tabla de productos debe contener informaci\u00f3n como el nombre, la descripci\u00f3n, el precio y la cantidad disponible, mientras que la tabla de pedidos debe contener informaci\u00f3n sobre los productos comprados, la direcci\u00f3n de env\u00edo, el estado del pedido, etc.</p> <p>Para simplificar la interacci\u00f3n con la base de datos, puedes utilizar un ORM (Object-Relational Mapping) como Hibernate o Spring Data JPA, que te permitir\u00e1 mapear las clases de la aplicaci\u00f3n con las tablas de la base de datos y realizar operaciones CRUD (Create, Read, Update, Delete) sobre los objetos de la aplicaci\u00f3n sin tener que escribir SQL directamente.</p> <p>Para garantizar la integridad de los datos, es importante definir restricciones de integridad en la base de datos, como claves primarias, claves for\u00e1neas y restricciones de unicidad. Adem\u00e1s, se debe decidir si la gesti\u00f3n de la integridad se delegar\u00e1 completamente a la base de datos o si se realizar\u00e1 por c\u00f3digo en la aplicaci\u00f3n.</p> <p>En cuanto a la generaci\u00f3n de identificadores, se puede optar por utilizar identificadores autonum\u00e9ricos (como la columna id con AUTO_INCREMENT en MySQL) o identificadores UUID (Universally Unique Identifier), que son cadenas de caracteres aleatorias y \u00fanicas. La elecci\u00f3n depende del caso de uso espec\u00edfico y de la preferencia del desarrollador.</p> <p>Es importante cerrar adecuadamente las conexiones y otros objetos relacionados con la base de datos, como los Statement y ResultSet, para evitar fugas de memoria y mejorar el rendimiento de la aplicaci\u00f3n. Para ello, se pueden utilizar bloques try-catch-finally o recursos try-with-resources.</p> <p>En cuanto a la gesti\u00f3n de transacciones, se puede optar por utilizar transacciones expl\u00edcitas, que son creadas y gestionadas por la aplicaci\u00f3n, o transacciones impl\u00edcitas, que son gestionadas por la base de datos. En cualquier caso, es importante garantizar que las operaciones se realicen en una transacci\u00f3n \u00fanica y que se gestionen correctamente las excepciones.</p> <p>Por \u00faltimo, en aplicaciones de alta concurrencia o gran carga de trabajo, es importante utilizar un pool de conexiones para optimizar el uso de los recursos de la base de datos y evitar el exceso de conexiones abiertas. El pool de conexiones es un conjunto de conexiones preestablecidas y listas para su uso, que se gestionan autom\u00e1ticamente y se reutilizan para minimizar el tiempo de espera y mejorar el rendimiento de la aplicaci\u00f3n.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#profundizamos-en-los-puntos-anteriores","title":"Profundizamos en los puntos anteriores","text":"","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#desfase-objeto-relacional-orm","title":"Desfase Objeto-Relacional (ORM):","text":"<p>El desfase objeto-relacional (ORM) se refiere a la discrepancia entre los objetos utilizados en la programaci\u00f3n orientada a objetos y las relaciones utilizadas en los sistemas de bases de datos relacionales. Para manejar esta discrepancia, se han desarrollado herramientas ORM que permiten mapear objetos a relaciones de base de datos y viceversa. Algunas herramientas ORM populares incluyen Hibernate, Entity Framework, SQLAlchemy y Sequelize. En kotlin la mas conoc\u00edada se llama Exposed.</p> <p>Desfase objeto-relacional</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#gestion-de-la-integridad-por-codigo-o-delegacion-a-base-de-datos","title":"Gesti\u00f3n de la integridad, por c\u00f3digo o delegaci\u00f3n a base de datos:","text":"<p>La integridad referencial se refiere a la consistencia de los datos almacenados en la base de datos. Puede ser gestionada por el c\u00f3digo de la aplicaci\u00f3n o delegada a la base de datos. La gesti\u00f3n de la integridad referencial por c\u00f3digo implica que la aplicaci\u00f3n es responsable de mantener la consistencia de los datos, mientras que la delegaci\u00f3n a la base de datos significa que la base de datos se encarga de hacer cumplir las restricciones de integridad. Ambos enfoques tienen ventajas y desventajas, y la elecci\u00f3n depende del contexto de la aplicaci\u00f3n.</p> <p>Gesti\u00f3n de integridad</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#identificadores-autonumericos-vs-uuid","title":"Identificadores: autonum\u00e9ricos vs UUID:","text":"<p>Los identificadores son una parte importante de cualquier sistema de bases de datos, ya que se utilizan para identificar de forma \u00fanica cada fila en una tabla. Los identificadores pueden ser autonum\u00e9ricos, lo que significa que la base de datos genera un valor \u00fanico autom\u00e1ticamente cada vez que se inserta una nueva fila en la tabla. Otra opci\u00f3n son los identificadores UUID, que son identificadores \u00fanicos universalmente y generados por software. Ambos enfoques tienen ventajas y desventajas, es cuesti\u00f3n de dise\u00f1o.</p> <p>A\u00f1utonum\u00e9ricos vs UIDS</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#cierre-de-objetos-conexiones-statement-conexiones-a-base-de-datos","title":"Cierre de objetos: Conexiones, Statement, conexiones a base de datos:","text":"<p>Es importante cerrar correctamente los objetos de base de datos como conexiones y declaraciones (Statement) para evitar fugas de memoria y problemas de rendimiento. En algunos lenguajes de programaci\u00f3n como Java, se utiliza la cl\u00e1usula try-with-resources para asegurarse de que los objetos se cierren correctamente. En kotlin se usa <code>use{}</code> para asegurarnos que estos elementos quedan cerrados.</p> <p>Conexi\u00f3n/Desconexi\u00f3n a base de datos</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#gestion-de-transacciones","title":"Gesti\u00f3n de transacciones:","text":"<p>Las transacciones se utilizan para garantizar que las operaciones en la base de datos se completen de forma coherente. Las transacciones permiten que varias operaciones se agrupen en una sola unidad l\u00f3gica, lo que significa que si una operaci\u00f3n falla, todas las operaciones realizadas en la transacci\u00f3n se deshacen. La gesti\u00f3n de transacciones es una parte importante del dise\u00f1o de cualquier sistema de bases de datos, y se pueden utilizar diferentes enfoques como transacciones expl\u00edcitas, transacciones impl\u00edcitas y transacciones distribuidas.</p> <p>Transacciones</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#pool-de-conexiones","title":"Pool de conexiones:","text":"<p>El pool de conexiones es una t\u00e9cnica utilizada para mejorar el rendimiento de las aplicaciones que interact\u00faan con una base de datos. En lugar de crear una nueva conexi\u00f3n cada vez que se necesita acceder a la base de datos, se utiliza un pool de conexiones predefinido que permite reutilizar las conexiones existentes. Esto reduce la sobrecarga de la creaci\u00f3n y eliminaci\u00f3n de conexiones y mejora el rendimiento general del sistema.</p>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#sqldelight","title":"SQLDeLight","text":"<p>SqlDeLight es una librer\u00eda que nos permite generar c\u00f3digo Kotlin para realizar operaciones CRUD sobre una base de datos.</p> <ul> <li>Librer\u00eda SQLDeLight</li> <li>SQLDelight on the Server</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section1/u09/teoria/PROG-U9.5.-OtrosAspectos/#fuente-y-bibliografia","title":"Fuente y bibliograf\u00eda","text":"<ul> <li>Programaci\u00f3n - 08 Programaci\u00f3n con Bases de Datos - Jos\u00e9 Luis Gonz\u00e1lez</li> </ul>","tags":["Software","JDBC","DAO"]},{"location":"section2/","title":"Incidentes de ciberseguridad","text":"<p>Se describe el m\u00f3dulo profesional de Incidentes de ciberseguridad. Esta informaci\u00f3n se divide en: </p> <ul> <li>Una primera secci\u00f3n de Informaci\u00f3n general en la que se hace una propuesta de temario, con la relaci\u00f3n de unidades y los resultados de aprendizaje asociados, asi como las posibles fechas en las que se impartir\u00edan. </li> <li>Una segunda secci\u00f3n con Materiales relacionados con el modulo, como Fuentes de informaci\u00f3n, libros recomendados, recursos y herramientas para aplicar conceptos. </li> </ul> <p>Todo el contenido est\u00e1 supeditado a mejora, pues es solo una propuesta que ir\u00e1 cambiando, espero que a mejor. Si tienes una propuesta de mejora, no te cortes y pasamela ;-).</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#informacion","title":"Informaci\u00f3n","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#propuesta-de-temario","title":"Propuesta de temario","text":"<p>En los siguientes enlaces se encuentran los contenidos, resultados de aprendizaje, criterios de evaluaci\u00f3n y herramientas para trabajarlos y poder evaluarlos. Es solo una propuesta, pero puede servir de punto de partida inicial.</p> <ol> <li>Planes de ciberseguridad</li> <li>An\u00e1lisis de incidentes de ciberseguridad</li> <li>Construcci\u00f3n de un CyberSOC</li> <li>Investigaci\u00f3n de incidentes de ciberseguridad</li> <li>Implementaci\u00f3n de medidas</li> <li>Documentaci\u00f3n y notificaci\u00f3n de incidentes</li> </ol>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#relacion-de-unidades-y-resultados-de-aprendizaje","title":"Relaci\u00f3n de unidades y resultados de aprendizaje","text":"Unidad UD 1 UD 2 UD 3 UD 4 UD 5 UD 6 RA 1 X RA 2 X X RA 3 X RA 4 X RA 5 X","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#relacion-de-unidades-y-fechas","title":"Relaci\u00f3n de unidades y fechas","text":"<p>El curso tiene un total de 24 semanas (720 horas). La relaci\u00f3n propuesta entre unidades y semanas es la siguiente:</p> Unidad Semanas 1 Semana 1 - 4 2 Semana 5 - 7 3 Semana 8 - 12 4 Semana 13 - 16 5 Semana 17 - 20 6 Semana 21 - 24","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#materiales","title":"Materiales","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#fuentes","title":"Fuentes","text":"<ul> <li>Parte de la organizaci\u00f3n/contenido esta tomado de Rafael del Rio</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#libros","title":"Libros","text":"<ul> <li>El libro de Ra-Ma de gesti\u00f3n de incidentes puede ser un buen punto de partida para organizar la estructura del temario.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#recursos","title":"Recursos","text":"<ul> <li>Incibe: el instituto nacional de ciberseguridad pone a nuestra disposici\u00f3n bastantes materiales para la gesti\u00f3n de incidentes de ciberseguridad.</li> <li>Awesome Incident Response: repositorio de github con muchas herramientas para la detecci\u00f3n y gesti\u00f3n de incidentes.</li> <li>Cyberdefenders</li> <li>Let's Defend</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#herramientas","title":"Herramientas","text":"<ul> <li>Gophish: nos permite realizar entrenamientos para mejorar la concienciaci\u00f3n frente a ataques de phishing.</li> <li>Suite ELK con docker: nos permite montar un SIEM de forma sencilla. Para recolectar datos para el SIEM podemos emplear Filebeat, Winlogbeat, Heartbeat, Metricbeat, Packetbeat, etc...</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/#contenido","title":"Contenido","text":"<p>T\u00edpicamente se intenta tener los siguientes apartados en cada uno de los m\u00f3dulos profesionales:</p> <ul> <li>Teor\u00eda: en formato editable (como libreoffice, un .odt), o en documentos PDF</li> <li>Presentaciones: en formato editable (como libreoffice, un .odp), o en documentos PDF</li> <li>Ejercicios: un bolet\u00edn de ejercicios para practicar en clases.</li> <li>Pr\u00e1cticas evaluables: una serie de pr\u00e1cticas evaluables.</li> <li>Ex\u00e1menes: una serie de ex\u00e1menes</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/page-n/","title":"Page n","text":"<p>hola pagen</p>"},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/","title":"Din\u00e1mica de presentaci\u00f3n","text":"","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#dinamica-icebreakers","title":"Din\u00e1mica icebreakers","text":"<p>\u00bfC\u00f3mo podemos lograr que un grupo se conozca mejor y favorecer un buen ambiente? \u00bfC\u00f3mo podemos experimentarlo mediante algunas t\u00e9cnicas de rompehielos? Los rompehielos (icebreakers) son t\u00e9cnicas muy utilizadas y que consisten b\u00e1sicamente en fomentar un buen ambiente de un grupo que comparte o va a compartir un espacio com\u00fan. Los hay de muchos tipos y con cientos de variantes que pueden ser introducidas a su vez en diferentes contextos profesionales, educativos o l\u00fadicos. En nuestro caso vamos a implementar una mezcla entre La entrevista y Los aviones de papel.</p>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#pasos-a-seguir","title":"PASOS A SEGUIR:","text":"<ul> <li>Entregar a cada participante una hoja de papel y un rotulador.</li> <li>Pedirles que debajo del papel escriban sus nombres y varias cuestiones con las instrucciones que se considere oportuno para el grupo o contexto donde se lleva a cabo.</li> <li>Despu\u00e9s les pedimos que hagan un avi\u00f3n de papel a su gusto. Si no saben podemos mostrarles un modelo sencillo con este:</li> </ul> Un avi\u00f3n sencillo <ul> <li>Es importante que una vez realizados, lancen los aviones todos a la vez. Una vez caigan cada uno recogerlos y volverlos a lanzar para que se mezclen por la sala. As\u00ed durante un ratito. Aqu\u00ed se genera un ambiente divertido. \u00a1Retornamos a la infancia!</li> <li>Despu\u00e9s de este periodo de tiempo, pedimos que cada uno coja uno (que no sea el suyo) y como escribieron el nombre deben buscar al due\u00f1o de ese avi\u00f3n y hacerle las preguntas.</li> <li> <p>Despu\u00e9s de haber recogido las respuestas a las preguntas, **cada participante debe de anotar esta informaci\u00f3n en Mural, sin dejar datos que puedan identificar a la persona.</p> </li> <li> <p>El Facilitador (o personas aleatorias del grupo) iran leyendo y presentando los profiles, y entre todos se intentar\u00e1n asignar a los participantes. Las personas que participaron en la entrevista deber\u00e1n votar a otros candidatos.</p> </li> <li>Finalmente habr\u00e1 otra ronda en la que se iran descubriendo finalmente la persona de la que se habla en el profile.</li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#preguntas","title":"PREGUNTAS:","text":"<p>Es importante hacer hincapi\u00e9 y hacerles valorar que se puede ir desde preguntas m\u00e1s cl\u00e1sicas: \u00bfQu\u00e9 has estudiado? \u00bfCu\u00e1nto tiempo llevas estudiando aqu\u00ed? o \u00bfCu\u00e1l es tu experiencia profesional?. Otras tal vez m\u00e1s personales como: \u00bfCu\u00e1les son tus aficiones? \u00bfCu\u00e1ntos hijos tienes? \u00bfCu\u00e1l es tu plato favorito? \u00bfD\u00f3nde te gustan pasar las vacaciones?. Hasta otras m\u00e1s divertidas para pasar de un territorio m\u00e1s informativo y de conocimiento a un territorio m\u00e1s distendido. \u00bfQu\u00e9 te llevar\u00edas a una isla desierta? Si te reencarnaras en un animal \u00bfCu\u00e1l te gustar\u00eda ser? Si pudieras ser un personaje de ficci\u00f3n \u00bfQui\u00e9n te gustar\u00eda ser?.</p> <p>Una buena recomendaci\u00f3n podr\u00eda ser: 3 b\u00e1sicas y personales, 4 profesionales y 3 m\u00e1s divertidas.</p> <p> </p> Ejemplo de preguntas.","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#tiempos","title":"TIEMPOS:","text":"<ul> <li>5 minutos para poner el nombre, pensar las preguntas y escribirlas en el folio.</li> <li>3 minutos para hacer el avi\u00f3n.</li> <li>3 minutos para lanzar el avi\u00f3n varias veces y conformar las parejas.</li> <li>15 minutos por entrevista, anotando los resultados.</li> <li>5 minutos presentaci\u00f3n de profiles y asignaci\u00f3n de candidatos.</li> <li>3 por identificaci\u00f3n de profile.</li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#material","title":"MATERIAL:","text":"<ul> <li>Una hoja de papel por persona.</li> <li>Un rotulador por persona.</li> <li>Una aplicaci\u00f3n como Mural. https://app.mural.co/ para resumir los profiles. </li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#consejos-y-anotaciones","title":"CONSEJOS Y ANOTACIONES:","text":"<p>Este rompehielos no es ninguna competici\u00f3n, nadie gana ni pierde. La idea de esta actividad es conocerse mejor de forma divertida y las instrucciones para las preguntas dependen de donde se quiera poner el foco de la actividad de cara a la actividad general que se va a llevar a cabo.</p>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u00/recursos/IS-U0.-DinamicaPresentacion/#fuentes","title":"FUENTES:","text":"<ul> <li>https://www.aprendercolaborando.com/3-rompehielos-para-conocerse/</li> </ul>","tags":["IS","Dinamica","Presentacion"]},{"location":"section2/u01/","title":"UD 1 - Planes de ciberseguridad","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 1 - Desarrollo de planes de prevenci\u00f3n y concienciaci\u00f3n en ciberseguridad:</p> <ul> <li>Principios generales en materia de ciberseguridad.</li> <li>Normativa de protecci\u00f3n del puesto del trabajo.</li> <li>Plan de formaci\u00f3n y concienciaci\u00f3n en materia de ciberseguridad.</li> <li>Materiales de formaci\u00f3n y concienciaci\u00f3n.</li> <li>Auditor\u00edas internas de cumplimiento en materia de prevenci\u00f3n.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 1. Desarrolla planes de prevenci\u00f3n y concienciaci\u00f3n en ciberseguridad, estableciendo normas y medidas de protecci\u00f3n</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han definido los principios generales de la organizaci\u00f3n en materia de ciberseguridad, que deben ser conocidos y apoyados por la direcci\u00f3n de la misma.</li> <li>b) Se ha establecido una normativa de protecci\u00f3n del puesto de trabajo.</li> <li>c) Se ha definido un plan de concienciaci\u00f3n de ciberseguridad dirigido a los empleados.</li> <li>d) Se ha desarrollado el material necesario para llevar a cabo las acciones de concienciaci\u00f3n dirigidas a los empleados.</li> <li>e) Se ha realizado una auditor\u00eda para verificar el cumplimiento del plan de prevenci\u00f3n y concienciaci\u00f3n de la organizaci\u00f3n</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n b: se puede emplear las gu\u00edas de Incibe para pymes para trabajar la normativa de protecci\u00f3n del puesto de trabajo.</li> <li>Criterio de evaluaci\u00f3n c: se puede emplear la herramienta gophish para trabajar la concienciaci\u00f3n de phishing.</li> <li>Criterios de evaluaci\u00f3n d: se puede emplear el material de incibe como inspiraci\u00f3n para el trabajo con el alumnado.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/","title":"1.1.-PrincipiosGenerales","text":"<p>Principios generales de la organizaci\u00f3n en materia de ciberseguridad</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#ra1","title":"RA1","text":"<p>a) Se han definido los principios generales de la organizaci\u00f3n en materia de ciberseguridad, que deben ser conocidos y apoyados por la direcci\u00f3n de la misma.</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#indice","title":"\u00cdNDICE","text":"<ul> <li>\u00bfQue es la Ciberseguridad?</li> <li>Sistema de informaci\u00f3n e inform\u00e1tico</li> <li>Principios generales</li> <li>Confidencialidad</li> <li>Integridad</li> <li>Disponibilidad</li> <li>Otros</li> <li>A que nos enfrentamos</li> <li>Activos</li> <li>Vulnerabilidad</li> <li>Amenaza</li> <li>Riesgos</li> <li>Medidas de seguridad</li> <li>Todo junto</li> <li>\u00bfQu\u00e9 hacer?</li> <li> <p>Plan director</p> </li> <li> <p>\u00bfQue es la Ciberseguridad?</p> </li> <li>Sistema de informaci\u00f3n e inform\u00e1tico</li> </ul>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#que-es-la-ciberseguridad","title":"\u00bfQu\u00e9 es la ciberseguridad?","text":"<p>__Ciberseguridad: __ Conjunto de actividades dirigidas a proteger el ciberespacio contra el uso indebido del mismo\\, defendiendo su  infraestructura  tecnol\u00f3gica\\, los  servicios  que prestan y la  informaci\u00f3n  que manejan</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#sistema-de-informacion","title":"Sistema de informaci\u00f3n","text":"<p>Sistema de informaci\u00f3n \\(SI\\)  __: __ un conjunto de elementos organizados\\, relacionados y coordinados entre s\u00ed\\, encargados de facilitar el funcionamiento global de una empresa o de cualquier otra actividad humana para conseguir sus objetivos.</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#sistema-informatico","title":"Sistema inform\u00e1tico","text":"<p>Sistema inform\u00e1tico:  __ __ Un sistema inform\u00e1tico est\u00e1 constituido por un conjunto de elementos f\u00edsicos \\(hardware\\, dispositivos\\, perif\u00e9ricos y conexiones\\)\\, l\u00f3gicos \\(sistemas operativos\\, aplicaciones\\, protocolos\u2026\\) y con frecuencia se incluyen tambi\u00e9n los elementos humanos \\(personal experto que maneja el software y el hardware\\).</p> <p></p> <p>Un sistema inform\u00e1tico puede ser un subconjunto del sistema de informaci\u00f3n</p> <p>Un sistema de informaci\u00f3n no tiene por qu\u00e9 contener elementos inform\u00e1ticos\\, aunque en la actualidad se hace dif\u00edcil imaginarse esta situaci\u00f3n</p> <p>Se tratar\u00e1 la seguridad de los sistemas de informaci\u00f3n en general\\, y los sistemas inform\u00e1ticos en particular</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#sistema-de-informacion_1","title":"Sistema de informaci\u00f3n","text":"<p>vs </p> <p>Sistema inform\u00e1tico</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#indice_1","title":"\u00cdNDICE","text":"<ul> <li>\u00bfQue es la Ciberseguridad?</li> <li>Sistema de informaci\u00f3n e inform\u00e1tico</li> <li>Principios generales</li> <li>Confidencialidad</li> <li>Integridad</li> <li>Disponibilidad</li> <li>Otros</li> </ul>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#principios-generales","title":"Principios generales","text":"<p>Cuando hablamos de Ciberseguridad hablamos de los siguientes  principios generales :</p> <p>Confidencialidad</p> <p>Integridad</p> <p>Disponibilidad</p> <p></p> <p>Confidencialidad : cualidad de la informaci\u00f3n para no ser divulgada a personas o sistemas no autorizados. Se trata b\u00e1sicamente de la propiedad por la que esa informaci\u00f3n s\u00f3lo resultar\u00e1 accesible con la debida y comprobada autorizaci\u00f3n.</p> <p></p> <p>Disponibilidad : Por disponible entendemos aquella informaci\u00f3n a la que podemos acceder cuando la necesitamos a trav\u00e9s de los canales adecuados siguiendo los procesos correctos.</p> <p></p> <p>__Integridad: __ \u201cestado de lo que est\u00e1 completo o tiene todas sus partes\u201d. La integridad hace referencia a la cualidad de la informaci\u00f3n para ser correcta y no haber sido modificada\\, manteniendo sus datos exactamente tal cual fueron generados\\, sin manipulaciones ni alteraciones por parte de terceros.</p> <p></p> <p>Adem\u00e1s\\, principios generales:</p> <p>Fiabilidad : funciona correctamente</p> <p>Autenticidad : La informaci\u00f3n es lo que dice ser\\, y el transmisor de la informaci\u00f3n es quien dice ser</p> <p>No repudio : En la transmisi\u00f3n de informaci\u00f3n no se puede negar ni el envio ni la recepci\u00f3n.</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#indice_2","title":"\u00cdNDICE","text":"<ul> <li>\u00bfQue es la Ciberseguridad?</li> <li>Sistema de informaci\u00f3n e inform\u00e1tico</li> <li>Principios generales</li> <li>Confidencialidad</li> <li>Integridad</li> <li>Disponibilidad</li> <li>Otros</li> <li>A que nos enfrentamos</li> <li>Activos</li> <li>Vulnerabilidad</li> <li>Amenaza</li> <li>Riesgos</li> <li>Medidas de seguridad</li> <li>Todo junto</li> </ul>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#a-que-nos-enfrentamos","title":"\u00bfA qu\u00e9  nos enfrentamos?","text":"<p>Ciberseguridad estamos hablando de  amenazas \\, de entender lo que est\u00e1 sucediendo\\, qui\u00e9n est\u00e1 detr\u00e1s y por qu\u00e9.</p> <p>Estamos hablando tambi\u00e9n de  tecnolog\u00eda \\, inherente ya en todos los procesos\\, pero en \u00e9stos en particular en mayor medida.</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#activos","title":"Activos","text":"<p>Activo: cualquier recurso de la empresa necesario para desempe\u00f1ar las actividades diarias y cuya no disponibilidad o deterioro supone un agravio o coste.</p> <p></p> <p></p> <p>Intenta definirlas</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#vulnerabilidad-vs-amenaza","title":"Vulnerabilidad vs Amenaza","text":"<p>La diferencia entre vulnerabilidad y amenaza es muy interesante\\, aunque son t\u00e9rminos que se confunden a menudo.</p> <p></p> <p>Intenta definirlas</p> <p>Las  vulnerabilidades  son las condiciones y caracter\u00edsticas propias de los sistemas de una organizaci\u00f3n\\, de los  activos \\, que la hacen susceptible a las  amenazas .</p> <p>Las amenazas atentan contra la seguridad\\, por tanto\\,   se incumplir\u00e1n los principios generales de la seguridad de la __   __organizaci\u00f3n  . <p>Problema : si existe una vulnerabilidad\\, siempre existir\u00e1 alguien que intentar\u00e1 explotarla\\, es decir\\, sacar provecho de su existencia.</p> <p></p> <p></p> <p></p> <p>\u00bfejemplos de vulnerabilida?</p> <p>Vulnerabilidad propia del sistema</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#vulnerabilidad","title":"Vulnerabilidad","text":"<p>Una __ vulnerabilidad __ es una debilidad o fallo en un sistema de informaci\u00f3n que pone en riesgo la seguridad de la informaci\u00f3n pudiendo permitir que un atacante pueda comprometer la  integridad \\,  disponibilidad  o  confidencialidad  de la misma\\, por lo que es necesario encontrarlas y eliminarlas lo antes posible.</p> <p></p> <p>No nos olvidemos de la:</p> <p>Autenticidad</p> <p>Fiabilidad</p> <p>No repudio</p> <p>Vulnerabilidades en TCP/IP en Microsoft</p> <p></p> <p>N\u00famero total de vulnerabilidades: 56</p> <p>11 __  __cr\u00edticas</p> <p>43 altas</p> <p>2 medias</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#amenaza","title":"Amenaza","text":"<p>__Amenaza: __ toda acci\u00f3n que aprovecha una vulnerabilidad para atentar contra la seguridad de un sistema de informaci\u00f3n. Es decir\\, que podr\u00eda tener un potencial efecto negativo sobre alg\u00fan elemento de nuestros sistemas. Desde el punto de vista de una organizaci\u00f3n pueden ser tanto internas como externas.</p> <p></p> <ul> <li>Amenaza: naturaleza de a lo que afecta:</li> <li>L\u00f3gica</li> <li>F\u00edsica</li> <li>Amenaza: como interfiere</li> <li>Interrupci\u00f3n</li> <li>Interceptaci\u00f3n</li> <li>Modificaci\u00f3n</li> <li>Fabricaci\u00f3n</li> </ul> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#riesgo","title":"Riesgo","text":"<p>El riesgo es la probabilidad de que se produzca un incidente de seguridad\\, materializandose una amenaza y causando p\u00e9rdidas o da\u00f1os.</p> <p>El riesgo depende entonces de los siguientes factores:  la probabilidad de que la __  amenaza  __ se materialice aprovechando una __  vulnerabilidad  __ y produciendo un da\u00f1o o impacto . El producto de estos factores representa el riesgo existir\u00e1 alguien que intentar\u00e1 explotarla\\, es decir\\, sacar provecho de su existencia.</p> <p>PROBABILIDAD DE QUE OCURRA</p> <p></p> <p>El riesgo  es la probabilidad de que una amenaza se materialice por el impacto que provocar\u00eda la explotaci\u00f3n de una vulnerabilidad.</p> <p>Podemos  identificar  los  activos cr\u00edticos  de los sistemas de informaci\u00f3n que pueden suponer un  riesgo \\, realizando un\u00a0 an\u00e1lisis  de riesgos</p> <p>__Este an\u00e1lisis nos llevar\u00e1 a obtener una imagen rigurosa de los riesgos a los que se encuentra expuesta una organizaci\u00f3n. __</p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#medidas-de-seguridad","title":"Medidas de seguridad","text":"<p>El  tratamiento  del riesgo \\(control\\) supone unos claros beneficios para la \u00absalud\u00bb de la ciberseguridad.</p> <p>De esta manera mantendremos protegida nuestra informaci\u00f3n confidencial frente a la mayor\u00eda de amenazas y vulnerabilidades detectadas \\(o no\\)\\, evitando robos y fugas de informaci\u00f3n.</p> <p></p> <p></p> <p></p> <p>Con el  an\u00e1lisis  del riesgo averiguamos  la magnitud y la gravedad de las consecuencias del riesgo  a la que est\u00e1 expuesta la organizaci\u00f3n.</p> <p>Para ello tendremos que definir un  umbral  que determine los riesgos asumibles de los que no lo son.</p> <p>En funci\u00f3n de la relevancia de los riegos podremos optar por:</p> <p>Evitar  el riesgo eliminando su causa\\, por ejemplo\\, cuando sea viable optar por no implementar una actividad o proceso que pudiera implicar un riesgo.</p> <p>Adoptar  medidas  que  mitiguen  el impacto o la probabilidad del riesgo a trav\u00e9s de la implementaci\u00f3n y monitorizaci\u00f3n de controles.</p> <p>Compartir o  transferir  el riesgo con terceros a trav\u00e9s de seguros\\, contratos etc.</p> <p>Aceptar  la existencia del riesgo y monitorizarlo.</p> <p>A los procedimientos utilizados para reducir los riesgos o minimizar su impacto se les denomina __ \u201cmecanismos o medidas de seguridad\u201d.__</p> <p>Se dividen en tres grandes grupos:</p> <p>Controles preventivos : eliminan o reducen la posibilidad de que las amenazas lleguen a materializarse. Por ejemplo: un firewall o un sistema de autenticaci\u00f3n.</p> <p>Medidas de reacci\u00f3n y recuperaci\u00f3n:  reducen el impacto en caso de haberse materializado las amenazas.</p> <p>A los procedimientos utilizados para reducir los riesgos o minimizar su impacto se les denomina  \u201cmecanismos o medidas de seguridad\u201d.</p> <p>Se dividen en tres grandes grupos:</p> <p>Controles de detecci\u00f3n : permiten detectar un suceso no deseado. Por ejemplo un IDS \\(Sistema de Detecci\u00f3n de Intrusos\\)</p> <p>Mecanismos o medidas de seguridad\\, ejemplos:</p> <p>Disponer de dispositivos redundantes \\(duplicado\\) para poder sustituirlo en caso de un problema.</p> <p>Recuperar un sistema al estado m\u00e1s pr\u00f3ximo previo a la ocurrencia de una amenaza.</p> <p>Realizar un backup\\, o copia de seguridad de nuestros datos.</p> <p>Entonces \u00bf C\u00f3mo  __ realizamos este __  an\u00e1lisis  que nos permita  __identificar las Medidas de Seguridad __ de un sistema?</p> <p>Fase 1:  Definir el alcance del an\u00e1lisis . Es decir\\, si nos centramos en un servicio\\, departamento y actividades o alguno en concreto.</p> <p>Fase 2:  Identificar qu\u00e9 activos  de qu\u00e9 sistema\\, departamento\\, servicio\\, etc participar\u00e1n en el estudio y su valoraci\u00f3n.</p> <p>Fase 3: Identificar las  medidas de seguridad existentes \\, es decir. Si no hay\\, entonces hay puntos d\u00e9biles.</p> <p>\u00bfC\u00f3mo actuamos para solventar las principales riesgos de un sistema?</p> <p>Fase 4:  Descubrir los puntos d\u00e9biles o vulnerabilidades  que afectan a los activos.</p> <p>Fase 5: Valorar las  __posibles amenazas __ que pueden afectar a los activos.</p> <p>Fase 6: Obtener __ el riesgo para cada activo/amenaza__ \\, valorar la probabilidad y el impacto sobre el negocio que producir\u00eda un ataque..</p> <p>\u00bfC\u00f3mo actuamos para solventar las principales riesgos de un sistema?</p> <p>Fase 7: Establecer los  objetivos de seguridad de la organizaci\u00f3n . El umbral por encima del cual la organizaci\u00f3n tomar\u00e1 medidas.</p> <p>Fase 8:  Seleccionar las medidas de protecci\u00f3n  posibles.</p> <p></p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#todo-junto","title":"Todo junto","text":""},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#indice_3","title":"\u00cdNDICE","text":"<ul> <li>\u00bfQue es la Ciberseguridad?</li> <li>Sistema de informaci\u00f3n e inform\u00e1tico</li> <li>Principios generales</li> <li>Confidencialidad</li> <li>Integridad</li> <li>Disponibilidad</li> <li>Otros</li> <li>A que nos enfrentamos</li> <li>Activos</li> <li>Vulnerabilidad</li> <li>Amenaza</li> <li>Riesgos</li> <li>Medidas de seguridad</li> <li>Todo junto</li> <li>\u00bfQu\u00e9 hacer?</li> <li>Plan director</li> </ul>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#seguridad-informatica","title":"Seguridad inform\u00e1tica","text":"<p>Mediante la  seguridad inform\u00e1tica \\, se definir\u00e1n las normas\\, procedimientos\\, m\u00e9todos y t\u00e9cnicas destinados a conseguir un  sistema de informaci\u00f3n seguro y confiable :</p> <p></p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#planes-politicas-normativas","title":"Planes, pol\u00edticas, normativas","text":"<p>Un  Plan Director de Seguridad  consiste en la definici\u00f3n y priorizaci\u00f3n de un conjunto de proyectos en materia de seguridad de la informaci\u00f3n con el objetivo de  reducir los _  _riesgos  a los que est\u00e1 expuesta la organizaci\u00f3n hasta unos niveles aceptables.</p> <p></p> <p>Plan director</p> <p>Plan Director de Seguridad | INCIBE</p> <p>Plan Director de Seguridad \u00bfC\u00f3mo implantarlo en tu empresa?</p> <p>Pol\u00edticas</p> <p>Pol\u00edticas de seguridad para la pyme | INCIBE</p> <p>Anexo 5 - ISO 27001</p> <p>Conoce tus riesgos</p> <p></p> <p></p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.1.1.-PrincipiosGenerales/#sistema-de-gestion-de-seguridad-de-la-informacion","title":"Sistema de gestion de seguridad de la informaci\u00f3n","text":"<p>Un  Sistema de Gesti\u00f3n de la Seguridad de la Informaci\u00f3n \\( __SGSI__ \\) \\(en ingl\u00e9s: Information Security Management System\\, ISMS\\)  es\\, como el nombre lo sugiere\\, un conjunto de pol\u00edticas de administraci\u00f3n de la informaci\u00f3n. El t\u00e9rmino es utilizado principalmente por la  ISO/IEC 27001 \\,1\u200b aunque no es la \u00fanica normativa que utiliza este t\u00e9rmino o concepto.</p> <p>Un SGSI es para una organizaci\u00f3n el dise\u00f1o\\, implantaci\u00f3n\\, mantenimiento de un conjunto de procesos para gestionar eficientemente la accesibilidad de la informaci\u00f3n\\, buscando asegurar la confidencialidad\\, integridad y disponibilidad de los activos de informaci\u00f3n minimizando a la vez los riesgos de seguridad de la informaci\u00f3n.</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/","title":"IS U1.2.1. PlanDirectorDeSeguridad","text":"<p>1.1 Plan director de seguridad</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#ra1","title":"RA1","text":"<p>a) Se han definido los principios generales de la organizaci\u00f3n en materia de ciberseguridad, que deben ser conocidos y apoyados por la direcci\u00f3n de la misma.</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#indice","title":"\u00cdNDICE","text":"Punto Slide numero La informaci\u00f3n y los sistemas de informaci\u00f3n 5 Plan director de seguridad 8 PDS. Situaci\u00f3n actual 11 PDS. Estrategia de la empresa 24 PDS. Definir proyectos e iniciativas 28 PDS. Clasificar y priorizar los proyectos 29 PDS. Aprobaci\u00f3n por la direcci\u00f3n 30 PDS. Puesta en marcha 31"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#la-informacion-y-los-sistemas-de-informacion","title":"La informaci\u00f3n y los sistemas de informaci\u00f3n","text":"<p>La informaci\u00f3n es un activo fundamental para el funcionamiento de las empresas.</p> <p>Las empresas basan su actividad en sistemas de informaci\u00f3n con soporte tecnol\u00f3gico \\(ordenadores\\, tabletas\\, p\u00e1gina web\\,\u2026\\)</p> <p></p> <p>Proteger los sistemas de informaci\u00f3n es proteger el negocio</p> <p></p> <p></p> <p>\u00bfQu\u00e9 pasa si nos encontramos antes un incidente?</p> <p>\u00bfQu\u00e9 riesgos estamos asumiendo?</p> <p>\u00bfSabemos c\u00f3mo dar respuesta?</p> <p>Se necesita llevar a cabo una __  __gesti\u00f3n planificada  __ __  de  __ __  actuaciones  __ __  en materia de Ciberseguridad</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#plan-director-de-seguridad","title":"Plan director de seguridad","text":"<p>Si las  herramientas  tecnol\u00f3gicas y la  informaci\u00f3n</p> <p>que dan soporte a los servicios y procesos productivos de la organizaci\u00f3n  son de gran valor para nuestra organizaci\u00f3n \\,</p> <p>debemos empezar a pensar en poner en pr\u00e1ctica un</p> <p>Plan Director de Seguridad .</p> <p>Definici\u00f3n  y  __priorizaci\u00f3n __</p> <p>de un</p> <p>_conjunto de proyectos _</p> <p>en materia de</p> <p>seguridad de la informaci\u00f3n con el objetivo de</p> <p>_reducir los riesgos _</p> <p>a los que est\u00e1 expuesta la organizaci\u00f3n hasta unos niveles aceptables\\,</p> <p>a partir de un</p> <p>an\u00e1lisis de la situaci\u00f3n inicial</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#plan","title":"Plan","text":"<p>director de seguridad</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#plan-director-de-seguridad_1","title":"Plan director de seguridad","text":"<p>Existen distintos factores que determinan la magnitud y complejidad del PDS. No obstante la elaboraci\u00f3n y puesta en marcha siguen las fases siguientes:</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-situacion-actual","title":"PDS. Situaci\u00f3n actual","text":"<p>1.- Situaci\u00f3n actual</p> <p>An\u00e1lisis considerando aspectos t\u00e9cnicos\\, organizativos\\, regulatorios y normativos\\, entre otros</p> <p>1.1 Actividades previas</p> <p>Antes de comenzar con el primer paso del an\u00e1lisis\\, debemos realizar varias actividades previas:</p> <p></p> <p>a)  Definir el alcance \\, qu\u00e9 departamento\\, y qu\u00e9 activos y procesos\\, teniendo en cuenta los negocios cr\u00edticos.</p> <p>b) Identificar el responsable de gesti\u00f3n de activos: Identificar los  activos  y definir las  responsabilidades  sobre los activos</p> <p>c) Valoraci\u00f3n inicial:  Valoraci\u00f3n preliminar  de la situaci\u00f3n actual de la organizaci\u00f3n para determinar los  controles \\(medidas de todo tipo que implementa para contrarrestar los riesgos de seguridad\\) y requisitos que son de aplicaci\u00f3n.</p> <p></p> <p>Por lo general\\, se puede usar para la evaluaci\u00f3n de aspectos normativos y regulatorios el  est\u00e1ndar 27002:2017\\,  dise\u00f1ada para ser utilizada a la hora de designar controles  para la selecci\u00f3n e implantaci\u00f3n de un Sistema de Seguridad de la Informaci\u00f3n\\,</p> <p>Solo  aplicar los \u00e1mbitos que se crean convenientes  dependiendo de la magnitud de la empresa\\, es decir\\, no es necesaria la implementaci\u00f3n de todos los controles que se indican en la norma 27002:2017\\, sino s\u00f3lo aquellos que sean de aplicaci\u00f3n a la empresa..</p> <p>Elaborar un documento \u201c Documento de Selecci\u00f3n de Controles \u201d\\, con los controles o medidas de seguridad que se aplican a la organizaci\u00f3n y su grado de madurez\\, es decir\\, si est\u00e1n implantados y en qu\u00e9 estado est\u00e1n.</p> <p></p> <p></p> <p>Norma par identificar los controles implantados.</p> <p></p> <p></p> <p>Modelo de madurez.</p> <p></p> <p>d) An\u00e1lisis de cumplimiento:  Reuniones con los departamentos  para evaluar el cumplimiento de los controles de seguridad.</p> <p>Tambi\u00e9n se requiere la inspecci\u00f3n de la seguridad f\u00edsica\\, por tanto es necesario una  inspecci\u00f3n in-situ de las instalaciones .Es \u00fatil para la __ recogida de problemas y evidencias el uso de checklist__  que incluyan los aspectos a revisar y comprobar.Analizar los resultados\\, y  establecer el cumplimiento de cada control en una escala nivel de o porcentaje madurez</p> <p></p> <p></p> <p>e) Establecer objetivo a cumplir en materia de ciberseguridad en la empresa\\, determinando los \u00e1mbitos a mejorar e identificar los aspectos en los que focalizar esfuerzos</p> <p>Adem\u00e1s de la ISO 27000\\, otros est\u00e1ndares:</p> <p>RGPD: Protecci\u00f3n de informaci\u00f3n y cumplimiento legal</p> <p>PCI-DSS: Tarjetas de cr\u00e9dito</p> <p>COBIT: Buenas pr\u00e1cticas de gobernanza</p> <p>ENS: Esquema nacional de seguridad\\, en la Administraci\u00f3n p\u00fablica</p> <p></p> <p>1.2 An\u00e1lisis t\u00e9cnico de seguridad</p> <p>Queda cubierto por la valoraci\u00f3n del grado de implantaci\u00f3n y madurez de los controles</p> <p>No obstante  podemos realizar un trabajo de auditor\u00eda  para valorar el grado de implantaci\u00f3n de determinados controles e identificar deficiencias en cortafuegos\\, antivirus\\, sistema de detecci\u00f3n de intrusos\\, niveles de parcheado\\, pol\u00edticas de contrase\u00f1as\\, etc.</p> <p>El grado y nivel de esta auditor\u00eda depender\u00e1 de la empresa y antecedentes. Muchas veces este trabajo se externaliza.</p> <p></p> <p>1.3 An\u00e1lisis de riesgos</p> <p>A los que est\u00e1 expuesta nuestra organizaci\u00f3n\\, siguiendo las siguientes etapas:</p> <p></p> <p></p> <p>1.3 An\u00e1lisis de riesgos</p> <p>Definir el  alcance del an\u00e1lisis de riesgos \\, que vendr\u00e1 definido por el alcance del PDS.</p> <p>Identificar los activos : Aquellos m\u00e1s importantes que guardan relaci\u00f3n con el departamento/proceso objeto del estudio.</p> <p>Identificar/seleccionar las amenazas  a los que est\u00e1n expuestos.</p> <p>Evaluar el riesgo para cada par activo-amenaza \\, estimaremos la probabilidad de que la amenaza impacte sobre el negocio: probabilidad x impacto.</p> <p>Identificar vulnerabilidades y salvaguardas : Las vulnerabilidades penalizar\u00e1n a la hora de evaluar el riesgo\\, de la misma forma que las salvaguardas aplicadas contribuir\u00e1n a reducir el riesgo. Iniciativas para implantar controles o salvaguardas.</p> <p>Tratar el riesgo . Tomar una estrategias y obtener riesgo residual tras aplicar estrategia.</p> <p></p> <p></p> <p>Elementos que participan durante la gesti\u00f3n del an\u00e1lisis de riesgos.</p> <p></p> <p>Elementos que participan durante la gesti\u00f3n del an\u00e1lisis de riesgos.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Se tendr\u00e1 que establecer un nivel de riesgo aceptable\\, que ser\u00e1 el  umbral  que determina los riesgos que deben ser tratados y los riesgos que son asumibles.</p> <p>Para cada uno de los riesgos se tendr\u00e1 que definir una de estrategias principales:</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-estrategia-de-la-empresa","title":"PDS. Estrategia de la empresa","text":"<p>Esto implica  considerar los proyectos en curso y futuros\\, cambios\\, reorganizaciones \\, etc.</p> <p>Tambi\u00e9n es importante t ener en cuenta si la organizaci\u00f3n opta por una estrategia de centralizaci\u00f3n de servicios\\, por la externalizaci\u00f3n de los servicios TIC \\, si forma parte de un grupo empresarial mayor o si va a iniciar la actividad en alg\u00fan sector distinto del actual que pueda generar requisitos legales adicionales.</p> <p>Esta fase es fundamental para implantar medidas de seguridad acorde a la naturaleza de nuestra organizaci\u00f3n.</p> <p>Alinear estrategia de seguridad\\, estrategia TIC y __  __estrategia  __ general del negocio.__</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-definir-proyectos-e-iniciativas","title":"PDS. Definir proyectos e iniciativas","text":"<p>A partir de la informaci\u00f3n obtenida hasta el momento debemos definir las acciones e iniciativas.</p> <p>Los \u00e1mbitos tratados son distintos\\, por tanto las iniciativas ser\u00e1n diversas</p> <p>Definir iniciativas  dirigidas a mejorar los trabajos actuales para que contemplen los marcos normativos y regulatorios.</p> <p>Conjunto de  acciones relacionadas con los controles t\u00e9cnicos f\u00edsicos  cuya  ausencia o insuficiencia hemos detectado</p> <p>Definir  la  estrategia  a seguir as\u00ed como los proyectos m\u00e1s adecuados para  gestionar los riesgos  por encima del riesgo aceptable.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Es clave tener en cuenta la estrategia de la empresa a la hora de indicar las acciones a llevar a cabo.</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-clasificar-y-priorizar-los-proyectos","title":"PDS. Clasificar y priorizar los proyectos","text":"<p>Clasificar las iniciativas\\, por ejemplo en base al criterio de origen de las mismas:</p> <p>Derivadas de la evaluaci\u00f3n del cumplimiento normativo y regulatorio</p> <p>an\u00e1lisis t\u00e9cnico</p> <p>an\u00e1lisis de riesgos</p> <p>El tipo de acci\u00f3n</p> <p>t\u00e9cnica</p> <p>organizativa</p> <p>regulatoria</p> <p>Tambi\u00e9n en  base al esfuerzo y coste temporal : proyectos a corto\\, medio y largo plazo.</p> <p>Tambi\u00e9n usar regla parto 20/80\\, para con poco esfuerzo producir mejoras sustanciales:  quick win .</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-aprobacion-por-la-direccion","title":"PDS. Aprobaci\u00f3n por la direcci\u00f3n","text":"<p>Una vez se tenga un  borrador \\, debe ser  revisado y aprobado por la direcci\u00f3n .</p> <p>Una vez  aprobada \\, debe  trasladarse a todos los empleados .</p>"},{"location":"section2/u01/teoria/IS-U1.2.1.-PlanDirectorDeSeguridad/#pds-puesta-en-marcha","title":"PDS. Puesta en marcha","text":"<p>Implementar la metodolog\u00eda de proyectos para  llevar a cabo el plan .</p> <p>Realizar una __ presentaci\u00f3n general del proyecto__  a las personas implicadas.</p> <p>Asignar los responsables/coordinadores  de los proyectos.</p> <p>Establecer la  periodicidad con la que se debe llevar a cabo el seguimiento . Si cambia la estrategia se tendr\u00e1 que revisar el plan para comprobar si sigue siendo v\u00e1lido.</p> <p>Conforme se vayan alcanzando los hitos previstos\\,  confirmar  que las  deficiencias  encontradas en las auditor\u00edas y gesti\u00f3n de  riesgos  han sido  subsanadas .</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/","title":"IS U1.3.1. ProteccionDelPuestoDeTrabajo","text":"<p>1.2 Puesto de trabajo</p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#ra1","title":"RA1","text":"<p>b) Se ha establecido una normativa de protecci\u00f3n del puesto de trabajo.</p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#indice","title":"\u00cdNDICE","text":""},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#la-informacion-y-los-sistemas-de-informacion","title":"La informaci\u00f3n y los sistemas de informaci\u00f3n","text":"<p>La informaci\u00f3n es un activo fundamental para el funcionamiento de las empresas.</p> <p>Las empresas basan su actividad en sistemas de informaci\u00f3n con soporte tecnol\u00f3gico \\(ordenadores\\, tabletas\\, p\u00e1gina web\\,\u2026\\)</p> <p></p> <p>Proteger los sistemas de informaci\u00f3n es proteger el negocio</p> <p></p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#puesto-de-trabajo","title":"Puesto de trabajo","text":"<p>La gesti\u00f3n de la informaci\u00f3n tanto desde dispositivos tecnol\u00f3gicos como no tecnol\u00f3gicos se realiza desde\u2026.</p> <p>...el  puesto de trabajo</p> <p>\u00bfCuantos existen?</p> <p>Ordenadores de sobremesa</p> <p>Port\u00e1tiles</p> <p>Tel\u00e9fonos m\u00f3viles</p> <p>Tabletas</p> <p>Dispositivos de almacenamiento</p> <p>Impresoras de red</p> <p>Esc\u00e1neres</p> <p>Documentos no digital</p> <p>Archivadores</p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#que-elementos-nos-encontramos-en-el-puesto-de-trabajo","title":"\u00bfQu\u00e9 elementos nos encontramos en el puesto de trabajo?","text":""},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#puesto-de-trabajo_1","title":"Puesto de trabajo","text":"<p>A estos  dispositivos  le afectan todo tipo de riesgos</p> <p>Accesos no autorizados</p> <p>P\u00e9rdida de datos</p> <p>P\u00e9rdida/Robo de informaci\u00f3n confidencial</p> <p>Infecciones de malware</p> <p>Adem\u00e1s\\, riesgos  no __  __tecnol\u00f3gicos :</p> <p>Informaci\u00f3n en papel al alcance de personas no autorizadas.</p> <p>Falta de confidencialidad en ls medios de comunicaci\u00f3n tradicionales</p> <p>Acceso de terceras personas a zonas de trabajo</p> <p>Peligro de robo\\, extrav\u00edo de dispositivos extra\u00edbles</p> <p>\u00bfC\u00f3mo mitigamos/eliminamos estos riesgos?</p> <p>Y esto nos suena a\u2026. RIESGOS.  Decidir estrategias:</p> <p>para implantar  __iniciativas y proyectos __  adaptadas a cada puesto de trabajo para actuar sobre los riesgos.</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#escenarios-de-riesgo","title":"Escenarios de riesgo","text":""},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#puesto-de-trabajo_2","title":"Puesto de trabajo","text":"<p>Los empleados est\u00e1n en primera l\u00ednea y son por ello un  eslab\u00f3n fundamental de la cadena de protecci\u00f3n  de la informaci\u00f3n.</p> <p>Deben evitar accesos no autorizados a ordenadores y desde ellos a aplicativos de la empresa\\, infecciones por malware\\, robo y fuga de datos en formato digital y ataques de ingenier\u00eda social\\, es decir\\, enga\u00f1os para manipular a la v\u00edctima para la obtenci\u00f3n de credenciales o datos de car\u00e1cter confidencial o conseguir que realice alguna acci\u00f3n como instalar un programa\\, enviar algunos correos hacer alg\u00fan ingreso etc.</p> <p>Para</p> <p>garantizar un  __uso adecuado __ de los dispositivos y medios del entorno de trabajo</p> <p>minimizar el impacto que todos estos riesgos  vistos anteriormente pueden tener en la empresa\\,</p> <p>debe  __implantarse __ una</p> <p>normativa __  __de protecci\u00f3n del puesto de trabajo .</p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#normativa-de-proteccion-del-puesto-de-trabajo","title":"Normativa de protecci\u00f3n del puesto de trabajo","text":"<p>La organizaci\u00f3n debe facilitar a los empleados las  obligaciones y buenas pr\u00e1cticas en materia de seguridad que apliquen a su puesto de trabajo .</p> <p>Esta normativa debe ser  firmada por los empleados en su incorporaci\u00f3n  a la empresa\\, as\u00ed como estar siempre disponible y recordar su aplicaci\u00f3n de manera peri\u00f3dica.</p> <p>Las medidas de seguridad que podemos aplicar para proteger el puesto de trabajo son  innumerables __ y de  __diferente grado de complejidad .</p> <p>Identificar el conjunto reducido de medidas con un coste de implantaci\u00f3n y mantenimiento muy bajo\\, que nos aportar\u00e1n una mejora sustancial en nuestro nivel de seguridad.</p> <p>Medidas que se traducen en __ mayores beneficios sobre la seguridad__  del puesto de trabajo: Legales y Buenas pr\u00e1cticas</p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#medidas","title":"Medidas","text":"<p>Las medidas se clasifican en dos niveles de complejidad:</p> <p>B\u00e1sico \\(B\\):  __ el esfuerzo y los recursos necesarios para implantarlo son asumibles.__</p> <p>Se puede aplicar a trav\u00e9s del uso de funcionalidades sencillas ya incorporadas en las aplicaciones m\u00e1s comunes. Se previenen ataques mediante la instalaci\u00f3n de herramientas de seguridad elementales.</p> <p>Avanzado \\(A\\):  __ el esfuerzo y los recursos necesarios para implantarlo son__</p> <p>considerables. Se necesitan programas que requieren configuraciones complejas.</p> <p>Se pueden precisar mecanismos de recuperaci\u00f3n ante fallos.</p> <p>Las medidas podr\u00e1n tener el siguiente alcance:</p> <p>__Procesos __ \\(PRO\\): aplica a la direcci\u00f3n o al personal de gesti\u00f3n.</p> <p>__Tecnolog\u00eda __ \\(TEC\\): aplica al personal t\u00e9cnico especializado.</p> <p>__Personas __ \\(PER\\): aplica a todo el personal.</p> <p> Destrucci\u00f3n avanzada de documentaci\u00f3n mediante mecanismos seguros </p> <p>La informaci\u00f3n obsoleta debe destruirse siguiendo un procedimiento seguro. Este suele comprender destructoras de papel a disposici\u00f3n de los empleados as\u00ed como un servicio externo de destrucci\u00f3n segura. La empresa debe notificar a los empleados su existencia y obligaci\u00f3n de uso. Adem\u00e1s\\, hay que tener en cuenta que este servicio externo debe firmar un acuerdo de confidencialidad.</p> <p> Uso de los medios de almacenamiento </p> <p>El empleado debe hacer un uso correcto de los dispositivos de almacenamiento y conocer y aplicar la normativa de la empresa referente al almacenamiento local \u2013 en el\u00a0 equipo \u2013 en la nube y en los dispositivos extra\u00edbles.</p> <p> Prohibici\u00f3n de la alteraci\u00f3n de configuraci\u00f3n del equipo e instalaci\u00f3n de aplicaciones no autorizadas </p> <p>Es un riesgo que el empleado cambie la configuraci\u00f3n del equipo. Por ello\\,\u00a0 si el empleado requiere una configuraci\u00f3n o software espec\u00edfico para el desempe\u00f1o de su trabajo\\, siempre deber\u00e1 solicitarlo por escrito al equipo inform\u00e1tico.</p> <p> Pol\u00edtica de mesas limpias </p> <p>Esta pol\u00edtica hace referencia a la obligaci\u00f3n de guardar la documentaci\u00f3n de trabajo al ausentarse el trabajador de su mesa de trabajo y al terminar su jornada laboral. El cumplimiento de esta pol\u00edtica conlleva:</p> <p>Mantener el puesto de trabajo limpio y ordenado</p> <p>Guardar la documentaci\u00f3n y los dispositivos extra\u00edbles que no est\u00e9n siendo usados en ese momento y especialmente al ausentarnos del puesto de trabajo o terminar la jornada laboral</p> <p>No apuntar las contrase\u00f1as en post-it o similares.</p> <p>No abandonar documentaci\u00f3n sensible en impresoras o esc\u00e1neres.</p> <p> Seguridad de impresoras y equipos auxiliares de oficina </p> <p>Para evitar que la informaci\u00f3n acabe en manos no deseadas\\, el usuario debe recoger inmediatamente aquellos documentos enviados a imprimir y guardar la documentaci\u00f3n una vez escaneada.</p> <p>Si las impresoras disponen de mecanismos de impresi\u00f3n segura como contrase\u00f1a hay que asegurarse de que siempre se cierra la sesi\u00f3n.</p> <p> No revelar informaci\u00f3n a usuarios no debidamente identificados </p> <p>Es posible que alguien intente obtener contrase\u00f1as de usuarios o informaci\u00f3n de cuentas bancarias enga\u00f1ando a alguien de la organizaci\u00f3n. Esta pr\u00e1ctica se denomina ingenier\u00eda social y para ello se emplea una llamada telef\u00f3nica\\, correo electr\u00f3nico\\, redes sociales o mensajes sms o a trav\u00e9s de whatsapp. El empleado debe por ello aceptar un compromiso de confidencialidad relativo a toda la informaci\u00f3n a la que tiene acceso durante su tiempo en la empresa.</p> <p> Uso de contrase\u00f1as </p> <p>Respecto al uso de contrase\u00f1as\\, el usuario debe seguir la pol\u00edtica de contrase\u00f1as de la organizaci\u00f3n. Las credenciales de usuario y contrase\u00f1as son confidenciales y no deben ser publicadas ni compartidas y es imprescindible seguir unas buenas pautas que incluyendo\\, pero no limitadas a\\, las siguientes:</p> <p>No deben apuntarse en documentos ni en ning\u00fan otra parte.</p> <p>Deben ser robustas\\, de al menos 8 caracteres mezclando n\u00fameros\\, may\u00fasculas y min\u00fasculas y caracteres especiales.</p> <p>Deber\u00e1n renovarse peri\u00f3dicamente.</p> <p> Evitar el acceso indebido por personal no autorizado al equipo del puesto de trabajo </p> <p>El trabajador deber\u00e1 bloquear su equipo cada vez que se ausente del puesto de trabajo y apagarlo al finalizar la jornada laboral. Deber\u00e1\\, adem\u00e1s\\, conocer y aplicar la normativa que regula el uso de internet como herramienta de trabajo\\, incluyendo los usos permitidos y prohibidos. Verificar las URL de destino y la validez de los certificados cuando se trate de conexiones a entornos seguros como webmail\\, extranet\\, etc. Adem\u00e1s\\, ha de comprobar que se cumple el protocolo HPPS en aquellas p\u00e1ginas en las que trabaje con informaci\u00f3n cr\u00edtica.</p> <p> A dvertir de cualquier incidente relacionado con su puesto de trabajo como: </p> <p>alertas de malware o virus generadas por su antivirus</p> <p>llamadas sospechosas recibidas pidiendo informaci\u00f3n sensible de cualquier tipo</p> <p>correos electr\u00f3nicos sospechosos de contener virus o malware</p> <p>p\u00e9rdida de dispositivos m\u00f3viles</p> <p>sospecha de accesos no autorizados a sistemas inform\u00e1ticos o informaci\u00f3n confidencial por parte de terceros</p> <p>cualquier actividad sospechosa que pueda detectar en su puesto de trabajo.</p> <p> Otras obligaciones en materia de seguridad </p> <p>Adem\u00e1s\\, el empleado debe conocer y aceptar con su firma la pol\u00edtica de uso de dispositivos m\u00f3viles\\, tecnolog\u00edas criptogr\u00e1ficas y la pol\u00edtica de clasificaci\u00f3n de la informaci\u00f3n que indica cu\u00e1l debe ser cifrada.</p> <p></p>"},{"location":"section2/u01/teoria/IS-U1.3.1.-ProteccionDelPuestoDeTrabajo/#bibliografiawebgrafia","title":"Bibliografia/Webgraf\u00eda","text":"<p>https://www.incibe.es/protege-tu-empresa/que-te-interesa/proteccion-puesto-trabajo</p> <p></p>"},{"location":"section2/u02/","title":"UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 2 - Auditor\u00eda de incidentes de ciberseguridad:</p> <ul> <li>Taxonom\u00eda de incidentes de ciberseguridad.</li> <li>Controles, herramientas y mecanismos de detecci\u00f3n e identificaci\u00f3n de incidentes de seguridad f\u00edsica.</li> <li>Controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes a trav\u00e9s de la investigaci\u00f3n en fuentes abiertas (OSINT).</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Analiza incidentes de ciberseguridad utilizando herramientas, mecanismos de detecci\u00f3n y alertas de seguridad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha clasificado y definido la taxonom\u00eda de incidentes de ciberseguridad que pueden afectar a la organizaci\u00f3n.</li> <li>c) Se han establecido controles y mecanismos de detecci\u00f3n e identificaci\u00f3n de incidentes de seguridad f\u00edsica.</li> <li>d) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes a trav\u00e9s de la investigaci\u00f3n en fuentes abiertas (OSINT: Open Source Intelligence).</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: nos podemos basar en la taxonom\u00eda que Incibe pone a nuestra disposici\u00f3n en la gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes, en la p\u00e1gina 14 y posteriores.</li> <li>Criterio de evaluaci\u00f3n d: para trabajar este criterio de evaluaci\u00f3n se pueden emplear las herramientas de HaveIBeenPwnd y de Firefox Monitor. Si se produce una filtraci\u00f3n de datos, estas herramientas notificar\u00e1n dicha filtraci\u00f3n.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/","title":"IS U2.1.1. TaxonomiaDeIncidentes","text":"<p>Taxonom\u00eda de incidentes de ciberseguridad</p>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#ra1","title":"RA1","text":"<p>a) Se ha clasificado y definido la taxonom\u00eda de incidentes de ciberseguridad que pueden afectar a la organizaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#indice","title":"\u00cdNDICE","text":"<p>Motivaci\u00f3n</p> <p>Taxonom\u00eda</p> <p>Taxonom\u00eda de Referencia para la Clasificaci\u00f3n de Incidentes de Seguridad</p> <p>Actividad</p>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#motivacion","title":"Motivaci\u00f3n","text":"<p>Diversidad\\, variedad</p> <p>Organizaci\u00f3n\\, clasificaci\u00f3n</p> <p> Ayuda para abordar la soluci\u00f3n </p> <p>No todos los ciberincidentes poseen las mismas caracter\u00edsticas ni tienen las mismas implicaciones.</p> <p>Se considera necesario disponer de una taxonom\u00eda com\u00fan de los posibles incidentes que se  registren</p> <p>Ayudar\u00e1 posteriormente a su an\u00e1lisis\\, contenci\u00f3n y erradicaci\u00f3n. </p>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#taxonomia","title":"Taxonom\u00eda","text":"<p>Clasificaci\u00f3n u ordenaci\u00f3n en grupos de cosas que tienen unas caracter\u00edsticas comunes.</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#taxonomia-de-incidentes","title":"Taxonom\u00eda de incidentes","text":"<p>La taxonom\u00eda definida en la  Gu\u00eda Nacional de Notificaci\u00f3n y Gesti\u00f3n de Ciberincidentes \\, se basa en la  Taxonom\u00eda de Referencia para la Clasificaci\u00f3n de Incidentes de Seguridad \\, desarrollada coordinadamente por un grupo internacional de equipos de respuesta a incidentes \\(textos sacados de INCIBE\\):</p> <p>https://github.com/flosada/RSITaxonomy_ES/blob/master/humanv1.md</p>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#taxonomia-de-referencia-para-la-clasificacion-de-incidentes-de-seguridad","title":"Taxonom\u00eda de Referencia para la Clasificaci\u00f3n de Incidentes de Seguridad","text":""},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#contenido-abusivo","title":"Contenido abusivo","text":"<ul> <li>Contenido abusivo</li> <li>SPAM : correo electr\u00f3nico masivo no solicitado. El receptor del contenido no ha otorgado autorizaci\u00f3n v\u00e1lida para recibir un mensaje colectivo.</li> <li>Delito de odio : contenido difamatorio o discriminatorio. __  Ejemplos: ciberacoso\\, racismo\\, amenazas a una persona o dirigidas contra colectivos  __.</li> <li>Pornograf\u00eda infantil\\, contenido sexual o violento inadecuado : material que represente de manera visual contenido relacionado con pornograf\u00eda infantil\\, apolog\u00eda de la violencia\\, etc.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#contenido-danino","title":"Contenido da\u00f1ino","text":"<ul> <li>Contenido da\u00f1ino</li> <li>Sistema infectado : sistema infectado con malware. __  Ejemplo: sistema\\, computadora o tel\u00e9fono m\u00f3vil infectado con un rootkit  __.</li> <li>Servidor C&amp;C \\(Mando y Control\\) : conexi\u00f3n con servidor de Mando y Control \\(C&amp;C\\) mediante malware o sistemas infectados.</li> <li>Distribuci\u00f3n de malware : recurso usado para distribuci\u00f3n de malware. __  Ejemplo: recurso de una organizaci\u00f3n empleado para distribuir malware  __.</li> <li>Configuraci\u00f3n de malware : recurso que aloje ficheros de configuraci\u00f3n de malware. __  Ejemplo: ataque de webinjects para troyano  __.</li> <li>Malware dominio DGA : nombre de dominio generado mediante DGA \\(Algoritmo de Generaci\u00f3n de Dominio\\)\\, empleado por malware para contactar con un servidor de Mando y Control \\(C&amp;C\\).</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#obtencion-de-informacion","title":"Obtenci\u00f3n de informaci\u00f3n","text":"<ul> <li>Obtenci\u00f3n de informaci\u00f3n</li> <li>Escaneo de redes \\(scanning\\) : env\u00edo de peticiones a un sistema para descubrir posibles debilidades. Se incluyen tambi\u00e9n procesos de comprobaci\u00f3n o testeo para recopilar informaci\u00f3n de alojamientos\\, servicios y cuentas. __  Ejemplos: peticiones DNS\\, ICMP\\, SMTP\\, escaneo de puertos  __.</li> <li>An\u00e1lisis de paquetes \\(sniffing\\) : observaci\u00f3n y grabaci\u00f3n del tr\u00e1fico de redes.</li> <li>Ingenier\u00eda social : recopilaci\u00f3n de informaci\u00f3n personal sin el uso de la tecnolog\u00eda. __  Ejemplos: mentiras\\, trucos\\, sobornos\\, amenazas  __.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#intento-de-intrusion","title":"Intento de intrusi\u00f3n","text":"<ul> <li>Intento de intrusi\u00f3n</li> <li>Explotaci\u00f3n de vulnerabilidades conocidas : intento de compromiso de un sistema o de interrupci\u00f3n de un servicio mediante la explotaci\u00f3n de vulnerabilidades con un identificador estandarizado \\(v\u00e9ase CVE\\). __  Ejemplos: desbordamiento de buffer\\, puertas traseras\\, cross site scripting \\(XSS\\)  __.</li> <li>Intento de acceso con vulneraci\u00f3n de credenciales : m\u00faltiples intentos de vulnerar credenciales. __  Ejemplos: intentos de ruptura de contrase\u00f1as\\, ataque por fuerza bruta  __.</li> <li>Ataque desconocido : ataque empleando exploit desconocido.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#intrusion","title":"Intrusi\u00f3n","text":"<ul> <li>Intrusi\u00f3n</li> <li>Compromiso de cuenta con privilegios : compromiso de un sistema en el que el atacante ha adquirido privilegios.</li> <li>Compromiso de cuenta sin privilegios : compromiso de un sistema empleando cuentas sin privilegios.</li> <li>Compromiso de aplicaciones : compromiso de una aplicaci\u00f3n mediante la explotaci\u00f3n de vulnerabilidades de software. __  Ejemplo: inyecci\u00f3n SQL  __.</li> <li>Robo : intrusi\u00f3n f\u00edsica. __  Ejemplo: acceso no autorizado a Centro de Proceso de Datos y sustracci\u00f3n de equipo  __.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#disponibilidad","title":"Disponibilidad","text":"<ul> <li>Disponibilidad</li> <li>DoS \\(Denegaci\u00f3n de Servicio\\) : ataque de Denegaci\u00f3n de Servicio. __  Ejemplo: env\u00edo de peticiones a una aplicaci\u00f3n web que provoca la interrupci\u00f3n o ralentizaci\u00f3n en la prestaci\u00f3n del servicio  __.</li> <li>DDoS \\(Denegaci\u00f3n Distribuida de Servicio\\) : ataque de Denegaci\u00f3n Distribuida de Servicio. __  Ejemplos: inundaci\u00f3n de paquetes SYN\\, ataques de reflexi\u00f3n y amplificaci\u00f3n utilizando servicios basados en UDP  __.</li> <li>Sabotaje : sabotaje f\u00edsico. __  Ejemplos: cortes de cableados de equipos o incendios provocados  __.</li> <li>Interrupciones : interrupciones por causas externas. __  Ejemplo: desastre natural  __.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#compromiso-de-la-informacion","title":"Compromiso de la informaci\u00f3n","text":"<p>Compromiso de la informaci\u00f3n</p> <p>Acceso no autorizado a informaci\u00f3n : acceso no autorizado a informaci\u00f3n. __  Ejemplos: robo de credenciales de acceso mediante interceptaci\u00f3n de tr\u00e1fico o mediante el acceso a documentos f\u00edsicos  __.</p> <p>Modificaci\u00f3n no autorizada de informaci\u00f3n : modificaci\u00f3n no autorizada de informaci\u00f3n. __  Ejemplos: modificaci\u00f3n por un atacante empleando credenciales sustra\u00eddas de un sistema o aplicaci\u00f3n o encriptado de datos mediante ransomware  __.</p> <p>P\u00e9rdida de datos  __: p\u00e9rdida de informaci\u00f3n. __  Ejemplos: p\u00e9rdida por fallo de disco duro o robo f\u00edsico</p>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#fraude","title":"Fraude","text":"<ul> <li>Fraude</li> <li>Uso no autorizado de recursos : uso de recursos para prop\u00f3sitos inadecuados\\, incluyendo acciones con \u00e1nimo de lucro. __  Ejemplo: uso de correo electr\u00f3nico para participar en estafas piramidales  __.</li> <li>Derechos de autor : ofrecimiento o instalaci\u00f3n de software carente de licencia u otro material protegido por derechos de autor. __  Ejemplos: Warez  __.</li> <li>Suplantaci\u00f3n : tipo de ataque en el que una entidad suplanta a otra para obtener beneficios ileg\u00edtimos.</li> <li>Phishing : suplantaci\u00f3n de otra entidad con la finalidad de convencer al usuario para que revele sus credenciales privadas.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#_1","title":"IS U2.1.1. TaxonomiaDeIncidentes","text":"<ul> <li>Vulnerable</li> <li>Criptograf\u00eda d\u00e9bil : servicios accesibles p\u00fablicamente que pueden presentar criptograf\u00eda d\u00e9bil. __  Ejemplo: servidores web susceptibles de ataques POODLE/FREAK  __.</li> <li>Amplificador DDoS : servicios accesibles p\u00fablicamente que puedan ser empleados para la reflexi\u00f3n o amplificaci\u00f3n de ataques DDoS. __  Ejemplos: DNS open-resolvers o Servidores NTP con monitorizaci\u00f3n monlist  __.</li> <li>Servicios con acceso potencial no deseado : servicios accesibles p\u00fablicamente potencialmente no deseados. __  Ejemplos: Telnet\\, RDP o VNC  __.</li> <li>Revelaci\u00f3n de informaci\u00f3n : acceso p\u00fablico a servicios en los que potencialmente pueda revelarse informaci\u00f3n sensible. __  Ejemplos: SNMP o Redis  __.</li> <li>Sistema vulnerable : sistema vulnerable. __  Ejemplos: mala configuraci\u00f3n de proxy en cliente \\(WPAD\\)\\, versiones desfasadas de sistema  __.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#otros","title":"Otros","text":"<ul> <li>Otros</li> <li>Otros : todo aquel incidente que no tenga cabida en ninguna categor\u00eda anterior.</li> <li>APT : ataques dirigidos contra organizaciones concretas\\, sustentados en mecanismos muy sofisticados de ocultaci\u00f3n\\, anonimato y persistencia. Esta amenaza habitualmente emplea t\u00e9cnicas de ingenier\u00eda social para conseguir sus objetivos junto con el uso de procedimientos de ataque conocidos o genuinos.</li> <li>Ciberterrorismo : uso de redes o sistemas de informaci\u00f3n con fines de car\u00e1cter terrorista.</li> <li>Da\u00f1os inform\u00e1ticos PIC : borrado\\, da\u00f1ado\\, alteraci\u00f3n\\, supresi\u00f3n o inaccesibilidad de datos\\, programas inform\u00e1ticos o documentos electr\u00f3nicos de una infraestructura cr\u00edtica. Conductas graves relacionadas con los t\u00e9rminos anteriores que afecten a la prestaci\u00f3n de un servicio esencial.</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.1.1.-TaxonomiaDeIncidentes/#actividad","title":"Actividad","text":"<p>2.a.01 - Taxonom\u00eda de incidentes \\(grupo\\)Tarea</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Detecci\u00f3n de incidentes</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ra2","title":"RA2","text":"<p>b) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indice","title":"\u00cdNDICE","text":"<p>Indicios</p> <p>Centro de Operaciones de Seguridad\\, SOC</p> <p>IDS\\, IPS\\, SIEM</p> <p>Indicadores de compromiso</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicadores-de-compromiso","title":"Indicadores de compromiso","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicios","title":"Indicios","text":"<p>B\u00e1sicamente\\, los indicios de que nos encontramos ante un ciberincidente pueden provenir de dos tipos de fuentes: los precursores y los indicadores.</p> <p>Un  precursor  es un indicio de que puede ocurrir un incidente en el futuro.</p> <p>Un  indicador  es un indicio de que un incidente puede haber ocurrido o puede estar ocurriendo ahora.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicios-precursores","title":"Indicios - Precursores","text":"<p>Algunos ejemplos de precursores son:</p> <p>Las entradas de log del servidor Web\\, con los resultados de un esc\u00e1ner de vulnerabilidades.</p> <p>El anuncio de un nuevo exploit\\, dirigido a una atacar una vulnerabilidad que podr\u00eda estar presente en los sistemas de la organizaci\u00f3n.</p> <p>Amenazas expl\u00edcitas provenientes de grupos o entidades concretos\\, anunciado ataques a organizaciones objetivo.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicios-indicadores","title":"Indicios - Indicadores","text":"<p>Los  indicadores  son muy comunes\\, tales como:</p> <p>el sensor de intrusi\u00f3n de una red emitiendo una alerta cuando ha habido un intento de desbordamiento de b\u00fafer contra  un servidor de base de datos;</p> <p>las alertas generadas por software antivirus\\,</p> <p>la presencia de un nombre de archivo con caracteres inusuales;</p> <p>Los  indicadores  son muy comunes\\, tales como:</p> <p>un registro de log sobre un cambio no previsto en la configuraci\u00f3n de un host;</p> <p>los logs de una aplicaci\u00f3n\\, advirtiendo de reiterados intentos fallidos de login desde un sistema externo desconocido;</p> <p>la detecci\u00f3n de un n\u00famero importante de correos electr\u00f3nicos rebotados con contenido sospechoso;</p> <p>desviaci\u00f3n inusual del tr\u00e1fico de la red interna\\,</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#centro-de-operaciones-de-seguridad-soc","title":"Centro de Operaciones de Seguridad, SOC","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-definicion","title":"SOC - Definici\u00f3n","text":"<p>El Centro de Operaciones de Seguridad\\, SOC\\, se refiere al equipo responsable de garantizar la seguridad de la informaci\u00f3n.</p> <p>El SOC es una plataforma que permite la  supervisi\u00f3n y administraci\u00f3n de la seguridad del sistema de informaci\u00f3n  a trav\u00e9s de herramientas de recogida\\, correlaci\u00f3n de eventos e intervenci\u00f3n remota:</p> <p>El SIEM \\(Security Information Event Management\\) es la principal herramienta del SOC ya que permite gestionar los eventos de un SI.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-objetivo","title":"SOC - Objetivo","text":"<p>El objetivo de un SOC es:</p> <p>Detectar\\, analizar y corregir incidentes de ciberseguridad utilizando soluciones tecnol\u00f3gicas y enfoques diferentes.</p> <p>Supervisan y analizan la actividad en redes\\, servidores\\, terminales\\, bases de datos\\, aplicaciones\\, sitios web y otros sistemas en busca de se\u00f1ales d\u00e9biles o comportamientos anormales que puedan indicar un incidente de seguridad o un compromiso.</p> <p>Debe garantizar que los posibles incidentes de seguridad se identifiquen\\, analicen\\, defiendan\\, investiguen e informen adecuadamente.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-funcionamiento","title":"SOC - Funcionamiento","text":"<p>El DOC trabaja de la siguiente forma:</p> <p>Estrategia que integre los objetivos espec\u00edficos de cada departamento.</p> <p>Definir la infraestructura necesaria para apoyarlo: Cortafuegos\\, IPS/IDS\\, soluciones de detecci\u00f3n de brechas\\, sondas y un sistema de gesti\u00f3n de eventos e informaci\u00f3n de seguridad \\(SIEM\\).</p> <p>Debe existir tecnolog\u00eda de recolecci\u00f3n y agregaci\u00f3n de informaci\u00f3n. \\(flujos de datos\\, mediciones\\, entradas de paquetes\\, syslog\\, etc\\)</p> <p>Supervisa vulnerabilidades de red y puntos finales.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#soc-organizacion","title":"SOC - Organizaci\u00f3n","text":"<p>Organizados seg\u00fan el grado de especializaci\u00f3n:</p> <p>nivel 1: analistas de alertas: Monitorizan alertas\\, eval\u00faan y se escalan.</p> <p>nivel 2: determinar si los datos/sistemas se ha visto afectados y recomiendan una respuesta.</p> <p>nivel 3: profesionales altamente capacitados\\, se encargan de resolver incidentes y prevenir posibles incidentes.</p> <p>Suelen ser perfiles multidisciplinares y altamente experimentados y especializados.</p> <p>un SOC generalmente abarca m\u00faltiples aspectos de las operaciones de seguridad\\, mientras que los CSIRT\\, CERT y CIRTS se enfocan espec\u00edficamente en la respuesta a incidentes.</p> <p>CSIRT y CIRT son casi siempre casi equivalentes\\, referentes a respuesta de incidentes de seguridad inform\u00e1tica.</p> <p>CERT\\, aunque muchas compa\u00f1\u00edas usan el t\u00e9rmino de forma gen\u00e9rica\\, ha sido una marca registrada de Carnegie Mellon University desde 1997.</p> <p>El t\u00e9rmino CERT utilizado de esta manera se enfoca m\u00e1s ampliamente en mejorar la respuesta a incidentes como disciplina que solo en su propia organizaci\u00f3n</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#csirt","title":"CSIRT","text":"<p>significa equipo de respuesta a incidentes de seguridad inform\u00e1tica</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#cirt","title":"CIRT","text":"<p>puede representar al equipo de respuesta a incidentes inform\u00e1ticos o\\, con menor frecuencia\\, al equipo de respuesta a incidentes de ciberseguridad</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#cert","title":"CERT","text":"<p>significa equipo de respuesta \\(o preparaci\u00f3n\\) para emergencias inform\u00e1ticas</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_1","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Los grupos CERT\\, CSIRT y CIRT pueden existir como un grupo con personal permanente o pueden reunirse en una base ad hoc en respuesta a un evento.</p> <p>De cualquier manera\\, su enfoque son casi siempre las cuatro fases de respuesta a incidentes descritas en la \u00abGu\u00eda de manejo de incidentes de seguridad inform\u00e1tica\u00bb del NIST.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ids-ips-siem","title":"IDS, IPS, SIEM","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_2","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>\u00bfHas o\u00eddo hablar de sistemas IDS\\, IPS y SIEM?</p> <p>\u00bfSabes qu\u00e9 son exactamente y por qu\u00e9 son tan importantes para la seguridad de la red de tu empresa?</p> <p>Los tres son sistemas de protecci\u00f3n de las comunicaciones que act\u00faan monitorizando el tr\u00e1fico que entra o sale de nuestra red pero cada uno tiene unas caracter\u00edsticas que les confieren ventajas e inconvenientes.</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ids-intrusion-detection-system-o-sistema-de-deteccion-de-intrusiones","title":"IDS (Intrusion Detection System) o sistema de detecci\u00f3n de intrusiones","text":"<p>Aplicaci\u00f3n usada para  detectar accesos no autorizados a un ordenador o a una red \\, es decir\\, son sistemas que monitorizan el tr\u00e1fico entrante y lo cotejan con una base de datos actualizada de firmas de ataque conocidas.</p> <p>Ante cualquier actividad sospechosa\\, emiten una alerta a los administradores del sistema quienes han de tomar las medidas oportunas.</p> <p>Estos accesos pueden ser ataques espor\u00e1dicos realizados por usuarios malintencionados o repetidos cada cierto tiempo\\, lanzados con herramientas autom\u00e1ticas.</p> <p>Estos sistemas s\u00f3lo  detectan  los accesos sospechosos emitiendo alertas anticipatorias de posibles intrusiones\\, pero  no tratan de mitigar la intrusi\u00f3n. Su actuaci\u00f3n es reactiva .</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#ips-intrusion-prevention-system-o-sistema-de-prevencion-de-intrusiones","title":"IPS (Intrusion Prevention System) o sistema de prevenci\u00f3n de intrusiones","text":"<p>Es un software que se utiliza para proteger a los sistemas de ataques e intrusiones.  Su actuaci\u00f3n es preventiva .</p> <p>Estos sistemas llevan a cabo un an\u00e1lisis en tiempo real de las conexiones y los protocolos para determinar si se est\u00e1 produciendo o se va a producir un incidente\\, identificando ataques seg\u00fan patrones\\, anomal\u00edas o comportamientos sospechosos y permitiendo el control de acceso a la red\\, implementando pol\u00edticas que se basan en el contenido del tr\u00e1fico monitorizado\\, es decir\\,  el IPS adem\u00e1s de lanzar alarmas\\, puede descartar paquetes y desconectar conexiones .</p> <p>Muchos proveedores ofrecen productos mixtos\\, llam\u00e1ndolos IPS/IDS\\, integr\u00e1ndose frecuentemente con cortafuegos y UTM \\(en ingl\u00e9s Unified Threat Management o Gesti\u00f3n Unificada de Amenazas\\) que controlan el acceso en funci\u00f3n de reglas sobre protocolos y sobre el destino u origen del tr\u00e1fico.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#siem-security-information-and-event-management-o-sistema-de-gestion-de-eventos-e-informacion-de-seguridad","title":"SIEM (Security Information and Event Management) o sistema de gesti\u00f3n de eventos e informaci\u00f3n de seguridad","text":"<p>Para hacer la vida m\u00e1s f\u00e1cil al personal de ciberseguridad\\, aparecen tambi\u00e9n los SIEM\\, dispositivos que se encargar\u00e1n de recoger los eventos recogidos por los IDS e IPS\\, analizarlos y se\u00f1alizar alertas que est\u00e9n previamente configuradas en base a reglas que procesan los eventos recibidos\\, permitiendo su agregaci\u00f3n y correlaci\u00f3n.</p> <p>Es una soluci\u00f3n h\u00edbrida centralizada que engloba la gesti\u00f3n de informaci\u00f3n de seguridad \\(Security Information Management\\) y la gesti\u00f3n de eventos \\(Security Event Manager\\).</p> <p>La tecnolog\u00eda SIEM proporciona un  an\u00e1lisis en tiempo real de las alertas  de seguridad generadas por los distintos dispositivos hardware y software de la red.</p> <p>Recoge los registros de actividad \\(logs\\) de los distintos sistemas\\, los relaciona y detecta eventos de seguridad\\, es decir\\, actividades sospechosas o inesperadas que pueden suponer el inicio de un incidente\\, descartando los resultados an\u00f3malos\\, tambi\u00e9n conocidos como falsos positivos y generando respuestas acordes en base a los informes y evaluaciones que registra\\, es decir\\, es una herramienta en la que se centraliza la informaci\u00f3n y se integra con otras herramientas de detecci\u00f3n de amenazas</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicadores-de-compromiso_1","title":"Indicadores de compromiso","text":""},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#incidente","title":"Incidente","text":"<p>confidencialidad</p> <p> __Incidente de seguridad: __  evento adverso que compromete o intenta comprometer:</p> <p>\u00bfComo saber si es anormal?</p> <p>Analizar variables:</p> <p>Tr\u00e1fico de red</p> <p>Alto consumo</p> <p>Lentitud en rpta</p> <p>Eje. prog extra\u00f1os</p> <p>Cambios ficheros</p> <p>Algo raro est\u00e1 pasando!</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#fuentes","title":"Fuentes","text":"<p>La informaci\u00f3n proviene de diferentes fuentes:</p> <p>revisiones manuales del sistema</p> <p>notificaciones de usuarios</p> <p>alertas</p> <p>No hay tiempo para este tipo de an\u00e1lisis</p> <p>Mientras existe una ventana de tiempo en la que el sistema est\u00e1 expuesto.</p> <p>Puede tratarse de un falso positivo\\, y mientras se est\u00e1 desgastando injustificadamente el equipo de respuesta  a incidentes</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_3","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Como resultado de esta primera fase de an\u00e1lisis\\, se deben iniciar los procesos de contenci\u00f3n\\, erradicaci\u00f3n y recuperaci\u00f3n asociados. No obstante\\, si no hay definida una fase metodol\u00f3gica de detecci\u00f3n o hay fallos procedimentales\\, documentales y/o t\u00e9cnicos en el proceso\\, la respuesta no ser\u00e1 efectiva y cualquier acci\u00f3n adicional puede ser contraproducente \\(destrucci\u00f3n no intencional de evidencia\\, ejecuci\u00f3n de programas maliciosos\\, etc\\.\\). Igual suceder\u00e1 si el incidente vuelve a ocurrir y no se ha realizado una sesi\u00f3n de lecciones aprendidas y mejora continua que permitan optimizar el plan de respuesta a incidentes en el futuro.</p> <p>Si ponemos en contexto todos estos elementos\\, los tiempos de respuesta a incidentes e investigaci\u00f3n forense se ver\u00edan claramente optimizados si se contara con una herramienta automatizada que permitiera una detecci\u00f3n y clasificaci\u00f3n r\u00e1pida con base en comportamientos analizados de incidentes \\(\u201cmodus operandi\u201d\\) involucrando diferentes elementos ya conocidos como direcciones IP\\, hashes de procesos maliciosos\\, cookies\\, cambios en el registro de Windows\\, controladores de hardware\\, puertos TCP/UDP\\, correos electr\u00f3nicos\\, procesos en ejecuci\u00f3n\\, ficheros en el disco\\, etc.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#indicadiores-de-compromiso","title":"Indicadiores de compromiso","text":"<p>Frente a ello\\, han surgido m\u00faltiples iniciativas t\u00e9cnicas\\, dentro de las cuales resaltan los __ IoC \\(Indicators of Compromise \u2013 Indicadores de Compromiso\\)__ . Se trata de un modelo basado por lo general en metalenguajes que permite registrar\\, parametrizar\\, comparar\\, categorizar y compartir la informaci\u00f3n conocida del comportamiento de incidentes analizados previamente desde una perspectiva hol\u00edstica\\, cubriendo todas las variables clave y propiedades que pueden dar pie a una detecci\u00f3n y clasificaci\u00f3n efectiva\\, analizando exclusivamente aquellos elementos relacionados sin perder el tiempo en an\u00e1lisis adicionales \u201ca ciegas\u201d que no ofrezcan valor en las conclusiones.</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#_4","title":"IS U2.2.1. DeteccionDeIncidentes","text":"<p>Contenido</p> <p>1 Modelos de implementaci\u00f3n de IoC</p> <p>2 Caso de estudio: Hacking Team</p> <p>3 Uso de IoC en conjunto con otras herramientas de identificaci\u00f3n de malware</p> <p>4 Conclusi\u00f3n</p> <p>Modelos de implementaci\u00f3n de IoC</p> <p>Desde la perspectiva de la industria han surgido diferentes modelos de implementaci\u00f3n del concepto de IoC. A pesar que no existe un est\u00e1ndar de facto\\, a continuaci\u00f3n se presentan algunos de los modelos m\u00e1s importantes que pueden ser empleados dependiendo de las necesidades de la organizaci\u00f3n:</p> <p>OASIS Cyber Threat Intelligence \\(CTI\\) https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=cti: Esta iniciativa est\u00e1 respaldada por algunos de los principales fabricantes de soluciones de seguridad y est\u00e1 orientada hacia la definici\u00f3n y estandarizaci\u00f3n de un conjunto de representaciones de informaci\u00f3n y protocolos para gestionar la necesidad de analizar\\, modelar y compartir datos de inteligencia contra amenazas inform\u00e1ticas. Est\u00e1 compuesto por tres subcomit\u00e9s: STIX \\(Structured Threat Information Expression \u2013 https://stixproject\\.github\\.io\\)\\, TAXII \\(Trusted Automated Exchange of Indicator Information\\) y CybOX \\(Cyber Observable Expression \u2013 https://cybox\\.mitre\\.org\\).</p> <p>IODEF \\(Incident Object Description Exchange Format\\) \u2013 RFC 5070 ietf.org/rfc/rfc5070.txt: En diciembre de 2007 se public\u00f3 la RFC 5070\\, que contiene la descripci\u00f3n b\u00e1sica del esquema XML para el registro de variables t\u00e9cnicas relacionadas con incidentes conocidos para ser empleados principalmente por centros de respuesta a incidentes \\(CSIRT\\)\\, orientado hacia la automatizaci\u00f3n en el procesamiento de datos de incidentes y la gesti\u00f3n de un formato com\u00fan para construir herramientas interoperables para la gesti\u00f3n de incidentes.</p> <p>The OpenIoC \\(Open Indicators of Compromise\\) Framework http://www.openioc.org: OpenIoC es un esquema extensible de XML publicado bajo los t\u00e9rminos de la licencia Apache 2\\, que permite describir las caracter\u00edsticas t\u00e9cnicas que identifican una amenaza conocida\\, la metodolog\u00eda de un atacante u otra evidencia de compromiso para la detecci\u00f3n r\u00e1pida de brechas de seguridad en un sistema. Esta iniciativa surgi\u00f3 como parte de las estrategias de gesti\u00f3n de incidentes de MANDIANT \\(http://www\\.mandiant\\.com\\)\\, quienes son reconocidos por sus an\u00e1lisis de casos de ciberespionaje a nivel mundial. Actualmente se encuentra en su versi\u00f3n 1.0 y la versi\u00f3n 1.1 se encuentra en formato DRAFT \\(https://github\\.com/mandiant/OpenIOC\\_1\\.1\\).</p> <p>Caso de estudio: Hacking Team</p> <p>En Julio de 2015 la compa\u00f1\u00eda italiana Hacking Team \\(http://www\\.hackingteam\\.it/\\) anunci\u00f3 p\u00fablicamente que sus sistemas inform\u00e1ticos fueron comprometidos\\, incluyendo el c\u00f3digo fuente de sus herramientas de monitorizaci\u00f3n y explotaci\u00f3n\\, empleadas por m\u00faltiples entidades gubernamentales a nivel mundial. Este software utilizaba vulnerabilidades conocidas y de d\u00eda cero \\(\u201czero day\u201d\\) para instalarse de forma silenciosa y sin autorizaci\u00f3n del usuario afectado en los dispositivos objetivo.</p> <p>Debido a la gran cantidad de atenci\u00f3n medi\u00e1tica que recibi\u00f3 este evento\\, muchos ciudadanos de los pa\u00edses clientes de Hacking Team quer\u00edan validar si sus sistemas eran monitorizados por esta soluci\u00f3n. Una de las alternativas m\u00e1s \u00f3ptimas para esta revisi\u00f3n estuvo basada en el uso de OpenIoC a trav\u00e9s del aplicativo MILANO \\(https://github\\.com/RookLabs/milano\\) provisto por la empresa Rook Security \\(https://www\\.rooksecurity\\.com\\)\\, que aprovecha las capacidades de los indicadores de compromiso para registrar\\, comparar y alertar de la existencia de binarios asociados al software de Hacking Team.</p> <p>Posterior al an\u00e1lisis del c\u00f3digo fuente del software de Hacking Team\\, se identificaron y perfilaron los binarios asociados \\(40\\+\\) y se incluyeron sus nombres y hashes \\(MD5\\, SHA1 y SHA256\\) dentro de un fichero XML siguiendo la estructura de OpenIoC \\(hackingteam\\_openIOC1\\-1\\.ioc\\). Para analizar su estructura\\, se puede emplear el aplicativo MANDIANT IoC Editor \\(https://www\\.fireeye\\.com/services/freeware/ioc\\-editor\\.html\\):</p> <p></p> <p>Como se puede observar\\, el esquema XML establecido por OpenIoC permite la inclusi\u00f3n de m\u00faltiples caracter\u00edsticas asociadas a elementos de un sistema que pueden estar afectadas por un incidente en particular. El listado exhaustivo de valores a parametrizar se puede encontrar en http://openioc.org/terms/Current.iocterms y http://schemas.mandiant.com/:</p> <p></p> <p>En el caso de MILANO\\, Rook Security cre\u00f3 su propio XML y desarroll\u00f3 una herramienta propia para que las variables descritas en el fichero de OpenIoC fueran analizadas en el sistema y se reportaran los hallazgos para que el propio usuario tomara las acciones que considerara prudentes:</p> <p></p> <p>No obstante\\, el mismo fichero XML/IoC puede ser empleado con otras herramientas como MANDIANT IoC Finder \\(https://www\\.fireeye\\.com/services/freeware/ioc\\-finder\\.html\\) o MANDIANT RedLine \\(https://www\\.fireeye\\.com/services/freeware/redline\\.html\\)\\, lo cual demuestra la portabilidad del formato\\, que es uno de los criterios b\u00e1sicos de esta iniciativa. Este mismo concepto se ha utilizado para la identificaci\u00f3n de malware como Zeus\\, Stuxnet y Duqu y ha sido compartido para uso de la comunidad en el sitio de OpenIoC \\(http://openioc\\.org\\) u otros como Flamer \\(https://www\\.alienvault\\.com/open\\-threat\\-exchange/blog/flamer\\-indicators\\-of\\-compromise\\-openioc\\) y Red October \\(https://www\\.alienvault\\.com/open\\-threat\\-exchange/blog/red\\-october\\-indicators\\-of\\-compromise\\-and\\-mitigation\\-data\\)\\, provistos por AlienVault\\, quienes tambi\u00e9n han integrado el concepto de IoC como base de su plataforma Open Threat Exchange \\(https://otx\\.alienvault\\.com/\\).</p> <p>Otros repositorios de IoC se pueden encontrar en OpenIoCDB \\(https://openiocdb\\.com/downloads/\\) y OpenIoC Bucket \\(https://www\\.iocbucket\\.com/\\)\\, as\u00ed como integraci\u00f3n con plataformas como MISP \\(www\\.misp\\-project\\.org\\) y MANTIS \\(Model\\-based Analysis of Threat Intelligence Sources\\) Framework \\(https://github\\.com/siemens/django\\-mantis\\).</p> <p>Uso de IoC en conjunto con otras herramientas de identificaci\u00f3n de malware</p> <p>Debido a las caracter\u00edsticas de los IoC\\, su funcionalidad puede ser complementada con otras herramientas orientadas a la detecci\u00f3n de malware como YARA \\(http://plusvic\\.github\\.io/yara/\\)\\, que permite la identificaci\u00f3n de malware con base en la identificaci\u00f3n de patrones de texto o binarios y el uso de expresiones booleanas para determinar su l\u00f3gica:</p> <p></p> <p>Un ejemplo de integraci\u00f3n entre reglas de IoC y reglas de YARA se puede encontrar en el aplicativo LOKI IOC Scanner \\(https://github\\.com/Neo23x0/Loki\\)\\, que usa la definici\u00f3n de IoC en el uso de hash de binarios y sus nombres y ubicaciones y la l\u00f3gica de YARA para la identificaci\u00f3n de patrones:</p> <p></p> <p>Adicionalmente\\, en OpenIoC se pueden insertar firmas de YARA dentro de la propia definici\u00f3n del formato XML para ser usadas de forma combinada. Esta inserci\u00f3n se puede realizar empleando el paquete openioc_to_yara\\, incorporado dentro del IoC Writter de MANDIANT \\(https://github\\.com/mandiant/ioc\\_writer/tree/master/examples/openioc\\_to\\_yara\\).</p> <p>Conclusi\u00f3n</p> <p>La minimizaci\u00f3n de la ventana de exposici\u00f3n entre el tiempo de detecci\u00f3n de un incidente y su respuesta es un factor clave en el proceso de respuesta a incidentes. Debido a la gran cantidad de informaci\u00f3n que se requiere para esta detecci\u00f3n y la generaci\u00f3n se conclusiones y/o inferencias que den paso a acciones de contenci\u00f3n\\, correcci\u00f3n y recuperaci\u00f3n\\, es necesario un procedimiento automatizado que facilite la identificaci\u00f3n de incidentes ya analizados y permita compartir dichos hallazgos con la comunidad para una actuaci\u00f3n global. Como respuesta a esta necesidad han surgido los IoC \\(Indicators of Compromise\\)\\, que permiten perfilar un incidente\\, crear una l\u00ednea base para la identificaci\u00f3n de diferentes variables asociadas a ese incidente en particular y comparar un dispositivo potencialmente afectado contra dichos par\u00e1metros para dar una respuesta r\u00e1pida y efectiva.</p> <p>Loki</p> <p>https://esgeeks.com/loki-ioc-escaner-respuesta-incidentes/</p> <p>https://github.com/Neo23x0/Loki/releases</p> <p>Reglas yara</p> <p>https://www.cytomic.ai/es/tendencias/reglas-yara-detectar-malware/</p> <p>clamAV</p> <p>https://es.bestantiviruspro.org/review/clamav-review/</p> <p>https://jnjsite.com/gnu-linux-el-antivirus-clamav-con-auto-escaneo/</p>"},{"location":"section2/u02/teoria/IS-U2.2.1.-DeteccionDeIncidentes/#actividad","title":"Actividad","text":"<p>2.b.02 - Detecci\u00f3n de incidentes IDS/IPS \\(Individual\\) \\(2b\\)</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/","title":"IS U2.3.1. FuentesAbiertas","text":"<p>OSINT: Fuentes abiertas</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#ra2","title":"RA2","text":"<p>d) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes a trav\u00e9s de la investigaci\u00f3n en fuentes abiertas (OSINT: Open Source Intelligence).</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#indice","title":"\u00cdNDICE","text":"<p>Conceptos</p> <p>OSINT</p> <p>Fases</p> <p>OSINTER</p> <p>Bibliograf\u00eda</p> <p>Actividades</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#conceptos","title":"Conceptos","text":"<p>Dato: Unidad m\u00ednima obtenida\\, que\\, adecuadamente procesada\\, se puede convertir en informaci\u00f3n</p> <p>Informaci\u00f3n: Material sin evaluar\\, que una vez analizada\\, tratada y elaborada puede producir inteligencia</p> <p>Inteligencia: Informaci\u00f3n transformada en un producto ya analizado</p> <p></p> <p>\u00bfQu\u00e9 es inteligencia?</p> <p>Producto -&gt; Ciclo de inteligencia</p> <p>Objetivo final -&gt; toma de decisiones + reducir incertidumbre</p> <p>Informaci\u00f3n != inteligencia</p> <p>\u00bfQu\u00e9 es ciberinteligencia?</p> <p>Aplicaci\u00f3n inteligencia + ciberespacio</p> <p></p> <p></p> <p>Problem\u00e1tica:</p> <p>Exceso de informaci\u00f3n</p> <p>Fiabilidad de las fuentes</p> <p>Informaci\u00f3n err\u00f3nea o malintencionada</p> <p></p> <p>\u00bfQu\u00e9 es fuente abierta?</p> <p>Existe controversia\\, y discusiones sobre el tema\u2026</p> <p>No  solo es internet o soporte tecnol\u00f3gico</p> <p>Secreta != valor</p> <p>Fuentes de  __car\u00e1cter p\u00fablico: __ Independiente comercializaci\u00f3n\\, difusi\u00f3n</p> <p>Cualquier contenido : con independencia del soporte\\, del medio de transmisi\u00f3n\\, del modo de acceso: digital o no\\, puesto a disposici\u00f3n del p\u00fablico.</p> <p>Ejemplos: agencia de noticias\\, enciclopedias\\, blog\\, anuarios\\, monograf\u00edas\\, conferencias de prensa\\, publicaciones cient\u00edficas\\, canal RSS\\, legislaci\u00f3n\\, emisiones de radio y televisi\u00f3n...</p> <ul> <li>OSINT</li> <li>Se empez\u00f3 a usar en el \u00e1mbito militar/gubernamental</li> <li>Open Source Intelligence -&gt; Inteligencia en fuentes abiertas -&gt; inteligencia generada a partir del an\u00e1lisis de datos obtenidos en fuentes abiertas</li> <li>Disciplina</li> <li>HUMINT: Human Intelligence</li> <li>OCMINT: Social Media Intelligence</li> <li>CYBINT: Cyber Intelligence</li> <li>GEOINT: Geospatial Intelligence</li> <li>SIGINT: Signals Intelligence Ingania</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#osint","title":"OSINT","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_1","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Qu\u00e9 es OSINT:</p> <p>https://www.incibe-cert.es/blog/osint-la-informacion-es-poder</p> <p>https// www.yolandacorral.com/que-es-osint-fases-fuentes-herramientas/</p> <p>https://ciberpatrulla.com/que-es-osint/</p> <p>https//ginseg.com/2020/7688/osint/una-introduccion-a-osint/</p> <p>Ciclo de inteligencia:</p> <p>https// www.cni.es/es/queescni/ciclo/</p> <p>Libros:</p> <p>https://0xword.com/libros/162-open-source-intelligence-osint-investigar-personas-e-identidades-en-internet.html</p> <p>https:/Avwwv.amazon.es/Manual-ciberinvestigaciC3%B3n-fuentes-abiertas-analistas/dp/1650895747</p> <p>Usos y aplicaciones del OSINT</p> <p>Informes geopol\u00edticos o geoestrat\u00e9gicos\\, riesgo-pa\u00eds\\, conflictos pol\u00edticos\\,socio-econ\u00f3micos\\,desplazamientos\\, inversiones\\, an\u00e1lisis de competencia\\,prospectiva de negocio...</p> <p>Informes de ciberinteligencia\\, vigilancia digital\\, reputaci\u00f3n online\\, malware...</p> <p>Ciber Investigaci\u00f3n\\, cibervigilancia\\, huella digital...</p> <p>Aplicaci\u00f3n en la fase de footprinting en una auditor\u00eda de seguridad</p> <p>Detecci\u00f3n\\, investigaci\u00f3n y an\u00e1lisis en incidente de seguridad</p> <p>... En Casi cualquier \u00e1mbito</p> <p>Quienes emplean OSINT</p> <p>FFCCSS\\, Fuerzas Armadas\\, agencias gubernamentales\\, abogados\\, periodistas\\,investigadores\\, detectives privados\\, crimin\u00f3logos\\, analistas de inteligencia\\,ciberinteligencia\\, ciberseguridad\\, malware\\, auditores de seguridad IT...</p> <p></p> <p>OSINT genera rechazo por una parte\\, mientras que detectives y cuerpos de seguridad se han agarrado con fuerza e ilusi\u00f3n</p> <p>https://www.youtube.com/watch?v=JSO51braHNc&amp;t=8s</p> <p></p> <p>De las distintas disciplinas\\, podemos decir que todas las \u201cInteligencia de\u201d tienen algo en com\u00fan:</p> <p>obtener informaci\u00f3n y analizarla.</p> <p>https://www.cni.es/es/preguntasfrecuentes/pregunta_010.html?pageIndex=10&amp;faq=si&amp;size=15</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#fases","title":"Fases","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_2","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Requisitos . Aqu\u00ed valoraremos qu\u00e9 hitos y puntos debemos de tener o realizar en nuestro proyecto. Por ejemplo\\, qu\u00e9 tecnolog\u00eda vamos a usar\\, qu\u00e9 metodolog\u00eda\\, qu\u00e9 aplicaciones o herramientas\\, etc.</p> <p>Fuentes de informaci\u00f3n . Debemos saber d\u00f3nde mirar y d\u00f3nde recoger los datos.</p> <p>__Adquisici\u00f3n. __ Ya sabemos d\u00f3nde mirar\\, ahora debemos saber c\u00f3mo recogerlo. Es decir\\, si es un peri\u00f3dico comprarlo todos los d\u00edas\\, si es una web\\, usar scraping</p> <p>Procesamientos.  Debemos estructurar y almacenar los datos para posteriormente analizarlo. Por ejemplo\\, si vamos a recoger las noticias de un peri\u00f3dico online quiz\u00e1s no toda la informaci\u00f3n de la web nos interese y tengamos que hacer un proceso de \u201cparseo\u201d.</p> <p>An\u00e1lisis.  Ya tenemos todos los datos y vamos a procedemos a extraer conclusiones tras implementar algoritmos o diferentes m\u00e9todos cient\u00edficos: descriptivo\\, cualitativo\\, cuantitativo\\, etc.</p> <p>Inteligencia.  Muchas personas confunden la inteligencia con crear informaci\u00f3n. No\\, la inteligencia no es \u00fanicamente crear un informe de \u201cinteligencia\u201d. Es un producto que pretende responder a unas preguntas\\, tener un conocimiento y contribuir en la toma de decisiones.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#habilidades-osinter","title":"Habilidades OSINTER","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_3","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Lo ideal es tener un equipo  multidisciplinar \\, con diversas cualidades.</p> <p>Pero si queremos ser un buen OSINTER para realizar investigaciones\\, unas buenas cualidades podr\u00edan ser:</p> <p></p> <p>Programaci\u00f3n . No es necesario saber programar en C o tener 20 a\u00f1os de experiencia\\, pero saber un lenguaje de programaci\u00f3n nos permitir\u00e1 no depender de las aplicaciones de los dem\u00e1s. Esto nos dar\u00e1 una ventaja enorme con la competencia. Una posibilidad puede ser Python y R\\, pero existen muchos otros.</p> <p>Fuentes . En este mundo saber d\u00f3nde encontrar las cosas o qu\u00e9 herramientas usar para la recogida de datos\\, ser\u00e1 determinante para tener \u00e9xito o no en nuestra misi\u00f3n. Adem\u00e1s\\, no solo es necesario saber muchas fuentes\\, tambi\u00e9n verificar su calidad y origen.</p> <p>Ciencia de datos.  Una de las primeras tareas es EDA \\(Exploratory Data Analysis\\) y vislumbrar los datos para estructurarlo\\, sacar patrones\\, distribuciones estad\u00edsticas\\, etc. Conocer algoritmos y entornos de trabajo que nos ayuden a crear estad\u00edsticas\\, probabilidades\\, patrones\\, mapas\\, etc de forma gr\u00e1fica es muy necesario en este trabajo.</p> <p>Escraping y big data . Necesitamos saber c\u00f3mo recoger la informaci\u00f3n haciendo web scraping y crear base de datos estructuradas y no estructuradas para posteriormente analizarla toda la informaci\u00f3n lo m\u00e1s r\u00e1pido posible.</p> <p>Machine Learning . Si somos capaces de hacer todo lo anterior y sabemos implementar ML para modelos de predicci\u00f3n\\, series temporales\\, redes neuronales\\, \u00e1rbol de decisi\u00f3n\\, etc conseguiremos dar un salto de calidad a nuestro trabajo.</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#bibliografia","title":"Bibliograf\u00eda","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#conceptos_1","title":"Conceptos","text":""},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#_4","title":"IS U2.3.1. FuentesAbiertas","text":"<p>Ataques de caja negra o gris \\(exterior y con escasos datos del objetivo\\)</p> <p>1% fase: footprinting\\, recopilaci\u00f3n de informaci\u00f3n o \u201cInformation Gathering\u201d -&gt; recoger todos los datos posibles sobre el objetivo</p> <p>Internet: principal fuente de informaci\u00f3n -&gt; fuentes p\u00fablicas -&gt; OSINT</p> <p>Fase determinante -&gt; visi\u00f3n total del objetivo</p> <p>T\u00e9cnicas activas \\(interacci\u00f3n directa con el target\\) - T\u00e9cnicas pasivas \\(sin interferir o realizar acciones\\)</p> <p>Autorizaci\u00f3n expl\u00edcita de cliente/objetivo a auditar</p> <p>Obtener</p> <p>Datos de empleados \\(filiaci\u00f3n\\, n\u00famero\\, puestos\\, datos de contacto\\.\\.\\.\\):</p> <p>Socios tecnol\u00f3gicos \\(tecnolog\u00edas empleadas\\, localizaci\u00f3n\\, plataformas inform\u00e1ticas\\);</p> <p>Socios de negocio \\(grado de participaci\u00f3n\\, ubicaci\u00f3n\\, datos sensibles\\)</p> <p>\u00c1reas de negocio\\, inversiones\\, inversores...</p> <p>Presencia web \\(dominios\\, subdominios\\, alojamientos\\);</p> <p>Ubicaciones \\(oficinas\\, centro de datos\\, delegaciones\\);</p> <p>Topolog\u00eda y arquitectura de sistemas\\, direccionamiento IP p\u00fablico:</p> <p>\u00bfQu\u00e9 nos interesa obtener?</p> <p>Identificar IP's y rangos de red</p> <p>Identificar dominios para esas IP's</p> <p>Identificar subdominios</p> <p>Descubrimiento de puertos y servicios</p> <p>An\u00e1lisis e identificaci\u00f3n de tecnolog\u00edas</p> <p>Vulnerabilidades asociadas a versiones de servicios y tecnolog\u00edas</p> <p>Descubrimiento de contenidos: rutas por defecto\\, usuarios\\, formularios de login...</p> <p>Data Leaks</p> <p>Metadatos</p> <p>Tecnolog\u00edas y componentes</p> <p>Pol\u00edticas de autenticaci\u00f3n de correo</p> <p>Blacklisting</p> <p>Empleados</p> <p>Documentos indexados</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#bibliografia_1","title":"Bibliograf\u00eda","text":"<p>\u00bfQu\u00e9 es OSINT? Por Jorge Coronado - QuantiKa14</p> <p>CiberPatrulla</p> <p>OSINT - La informaci\u00f3n es poder | INCIBE-CERT</p> <p>https://www.youtube.com/watch?v=HWM2m_wDisU</p> <p>https://start.me/p/b56xX8/osint</p> <p>https://www.readkong.com/page/osint-cheat-sheet-inteltechniques-com-3762848</p>"},{"location":"section2/u02/teoria/IS-U2.3.1.-FuentesAbiertas/#actividad","title":"Actividad","text":"<p>Visualiza el video:</p> <p>https://www.youtube.com/watch?v=HWM2m_wDisU</p> <p>Resumen de 4 caras m\u00e1ximo en pdf.</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/","title":"IS U2.4.1. DocumentacionDeIncidentes","text":"<p>Documentaci\u00f3n de incidentes</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#ra2","title":"RA2","text":"<p>e) Se ha realizado una clasificaci\u00f3n, valoraci\u00f3n, documentaci\u00f3n y seguimiento de los incidentes detectados dentro de la organizaci\u00f3n.</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#indice","title":"\u00cdNDICE","text":"<p>Gesti\u00f3n de incidentes</p> <p>Documentaci\u00f3n</p> <p>Clasificaci\u00f3n</p> <p>Valoraci\u00f3n</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#gestion-de-incidentes","title":"Gesti\u00f3n de incidentes","text":"<ul> <li>Incidente</li> <li>Cualquier  suceso  que afecte a la  confidencialidad \\,  integridad  o  disponibilidad  de los activos de informaci\u00f3n de la empresa\\,</li> <li>por ejemplo: acceso o intento de acceso a los sistemas\\, uso\\, divulgaci\u00f3n\\, modificaci\u00f3n o destrucci\u00f3n no autorizada de informaci\u00f3n.</li> <li>La gesti\u00f3n de incidentes consiste:</li> <li>plan de acci\u00f3n  para  atender a los incidentes  que se den.</li> <li>Adem\u00e1s de resolverlos debe incorporar  medidas de desempe\u00f1o  que permitan:<ul> <li>conocer la  calidad del sistema  de protecci\u00f3n</li> <li>detectar __ tendencias __ antes de que se conviertan en grandes problemas.</li> </ul> </li> </ul>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#documentacion","title":"Documentaci\u00f3n","text":"<ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>La  notificaci\u00f3n  a las entidades que centralizan esta informaci\u00f3n de forma que se puedan obtener conseguir los indicadores de compromiso y  generar la inteligencia  necesaria que permita detectar estos incidentes.</li> <li>En la gesti\u00f3n de incidentes de seguridad resulta de gran importancia documentar todo lo aprendido en incidentes anteriores a modo de  lecciones aprendidas \\,  estas pueden resultar vitales para  evitar futuros incidentes de seguridad o solucionar nuevos  incidentes con similares caracter\u00edsticas.</li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Conocer con exactitud la  naturaleza  y  tipo  de incidente\\, las  caracter\u00edsticas  del mismo y los  vectores  de infecci\u00f3n con malware o intrusi\u00f3n para parametrizar los sistemas de seguridad de manera adecuada.</li> <li>Para iniciar  campa\u00f1as de sensibilizaci\u00f3n  adaptadas a la organizaci\u00f3n\\, conocer sus puntos m\u00e1s d\u00e9biles y saber c\u00f3mo protegerlos.</li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Es importante que esta documentaci\u00f3n resulte muy  detallada \\, permitiendo conocer:<ul> <li>qu\u00e9 herramientas __ se utilizaron y  __c\u00f3mo \\,</li> <li>las  investigaciones  realizadas y sus  resultados \\,</li> <li>las  colaboraciones  que se necesitaron\\,</li> <li>la  documentaci\u00f3n utilizada  para resolver el incidente\\,</li> <li>la  l\u00ednea temporal  de las acciones seguidas\\, etc.</li> </ul> </li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Tambi\u00e9n permite conocer a<ul> <li>los  atacantes \\,</li> <li>sus  estrategias y sus patrones  en las denegaciones de servicio.</li> <li>Las  nuevas vulnerabilidades  que afectan los sistemas m\u00e1s cr\u00edticos de la organizaci\u00f3n tambi\u00e9n ayudar\u00e1n en gran medida a  prevenir y solucionar  los posibles incidentes de seguridad.</li> </ul> </li> </ul> <ul> <li>La documentaci\u00f3n de los incidentes es necesaria para</li> <li>Todas estas  acciones t\u00e9cnicas y procedimentales de la organizaci\u00f3n deben tener siempre en cuenta  durante el proceso de resoluci\u00f3n de un incidente\\, en especial en la toma y adquisici\u00f3n de evidencias que se deriven en un caso de an\u00e1lisis forense.<ul> <li>las  consideraciones legales  que apliquen a la organizaci\u00f3n por su sector o \u00e1mbito\\,</li> <li>los  principios del secreto de las comunicaciones y privacidad de las personas \\,  el c\u00f3digo penal \\, etc.</li> </ul> </li> </ul>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#documentacion-notificar","title":"Documentaci\u00f3n: notificar","text":"<p>Qu\u00e9 notificar Descripci\u00f3n</p> <p>Asunto : Frase que describa de forma general el incidente. Este campo lo heredar\u00e1n todas las notificaciones asociadas al incidente.</p> <p>OSE/PSD : Denominaci\u00f3n del operador de servicios esenciales o proveedor de servicios digitales que notifica.</p> <p>Sector estrat\u00e9gico :  Energ\u00eda\\, transporte\\, financiero\\, etc.</p> <p>Fecha y hora del incidente : Indicar con la mayor precisi\u00f3n posible cu\u00e1ndo ha ocurrido el ciberincidente.</p> <p>Fecha y hora de detecci\u00f3n del incidente : Indicar con la mayor precisi\u00f3n posible cu\u00e1ndo se ha detectado el ciberincidente.</p> <p>Descripci\u00f3n : Describir con detalle lo sucedido.</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Recursos tecnol\u00f3gicos afectados : Indicar la informaci\u00f3n t\u00e9cnica sobre el n\u00famero y tipo de activos afectados por el ciberincidente\\, incluyendo direcciones IP\\, sistemas operativos\\, aplicaciones\\, versiones\u2026</p> <p>Origen del incidente : Indicar la causa del incidente si se conoce. Apertura de un fichero sospechoso\\, conexi\u00f3n de un dispositivo USB\\, acceso a una p\u00e1gina web maliciosa\\, etc.</p> <p>Taxonom\u00eda  _ \\(clasificaci\u00f3n\\)_ : Posible clasificaci\u00f3n y tipo de ciberincidente en funci\u00f3n de la taxonom\u00eda descrita.</p> <p>Nivel de Peligrosidad : Especificar el nivel de peligrosidad asignado a la amenaza. Consultar Tabla 4. Criterios de determinaci\u00f3n del nivel de peligrosidad de un ciberincidente. \\(M\u00e1s adelante se indica donde est\u00e1 la tabla 4\\)</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Nivel de Impacto : Especificar el nivel de impacto asignado al incidente. Consultar Tabla 5. Criterios de determinaci\u00f3n del nivel de impacto de un ciberincidente. \\(M\u00e1s adelante se indica donde est\u00e1 la tabla 5\\)</p> <p>Impacto transfronterizo : Indicar si el incidente tiene impacto transfronterizo en alg\u00fan Estado miembro de la Uni\u00f3n Europea. Especificar.</p> <p>Plan de acci\u00f3n y contramedidas : Actuaciones realizadas hasta el momento en relaci\u00f3n al ciberincidente. Indicar el Plan de acci\u00f3n seguido junto con las contramedidas implantadas.</p> <p>Afectaci\u00f3n : Indicar si el afectado es una empresa o un particular y las afectaciones de acuerdo a los criterios indicados en la Tabla 5. Criterios de determinaci\u00f3n del nivel de impacto de un ciberincidente</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Medios necesarios para la resoluci\u00f3n \\(JP\\) : Capacidad empleada en la resoluci\u00f3n del incidente en Jornadas-Persona.</p> <p>Impacto econ\u00f3mico estimado \\(Si se conoce\\) : Costes asociados al incidente\\, tanto de car\u00e1cter directo como indirecto.</p> <p>Extensi\u00f3n geogr\u00e1fica \\(Si se conoce\\):  Local\\, auton\u00f3mico\\, nacional\\, supranacional\\, etc.</p> <p>Da\u00f1os reputacionales . \\(Si se conocen\\): Afectaci\u00f3n a la imagen corporativa del operador.</p> <p></p> <p>Qu\u00e9 notificar: Descripci\u00f3n</p> <p>Adjuntos : Indicar la relaci\u00f3n de documentos adjuntos que se aportan para ayudar a conocer la causa del problema o a su resoluci\u00f3n \\(capturas de pantalla\\, ficheros de registro de informaci\u00f3n\\, correos electr\u00f3nicos\\, etc\\.\\)</p> <p>Regulaci\u00f3n afectada : ENS / RGPD /NIS / PIC / Otros</p> <p>Se requiere actuaci\u00f3n de FFCCSE : Si / No</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#documentacion_1","title":"Documentaci\u00f3n:","text":"<p>__Para documentar\\, __ sigue esta gu\u00eda:</p> <p>https://docs.google.com/document/d/e/2PACX-1vTDsl2bB5vCiNKj-cAqj8aitMmxQneXlS1UxC4Wv7KyMwu8ja2qKdMUeBMx4F-lF9VYH8A66ldw4gxl/pub</p> <p></p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#clasificacion","title":"Clasificaci\u00f3n","text":"<ul> <li>Clasificaci\u00f3n seg\u00fan la Taxonom\u00eda:</li> <li>Vista  aqu\u00ed</li> <li>Tambi\u00e9n se puede consultar en la  gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes \\(pag\\. 14\\) .</li> </ul>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#valoracion","title":"Valoraci\u00f3n","text":"<p>A la hora de valorar la importancia de un incidente\\, usaremos:</p> <p>El nivel de peligrosidad: criterio de referencia.</p> <p>El nivel de impacto.</p> <p>Si un incidente puede asociarse a m\u00e1s de un tipo de incidente\\, \u00e9ste quedar\u00e1 asociado a aquel incidente que tenga un nivel de peligrosidad superior.</p> <p></p> <p>Peligrosidad \\( _[gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes \\(pag\\. 19\\)](https://educacionadistancia.juntadeandalucia.es/centros/cadiz/mod/resource/view.php?id=508441)_ .</p> <p>La  potencial amenaza que supondr\u00eda la materializaci\u00f3n de un incidente  en los sistemas de informaci\u00f3n o comunicaci\u00f3n del ente afectado\\, as\u00ed como para los servicios prestados o la continuidad de negocio en caso de haberla.</p> <p>Este indicador se fundamenta en las  caracter\u00edsticas intr\u00ednsecas a la tipolog\u00eda de amenaza y su comportamiento .</p> <p></p> <p>Impacto \\( _[gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes \\(pag\\. 21\\)](https://educacionadistancia.juntadeandalucia.es/centros/cadiz/mod/resource/view.php?id=508441)_ .</p> <p>Se determinar\u00e1 evaluando las  consecuencias que tal ciberincidente ha tenido en las funciones y actividades de la organizaci\u00f3n afectada \\, en sus activos o en los individuos afectados.</p> <p>De acuerdo a ello\\,se tienen en cuenta aspectos como las  consecuencias potenciales o materializadas que provoca una determinada amenaza en un sistema de informaci\u00f3n y/o comunicaci\u00f3n\\, as\u00ed como en la propia entidad afectada \\(organismos p\u00fablicos o privados\\, y particulares\\)</p> <p></p> <p>Relacionado con el Impacto\\,</p> <p>adicionalmente a lo visto en la slide anterior\\, en la siguiente gu\u00eda  https://www.incibe-cert.es/sites/default/files/contenidos/guias/doc/incibe-cert_gestion_ciberincidentes_sector_privado.pdf \\(pag\\,\\. 23\\)</p> <p>Se muestra una tabla que expone a modo orientativo un apoyo para las labores de c\u00e1lculo de impacto de un incidente de seguridad.</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe-cert.es/guias-y-estudios/guias/guia-nacional-notificacion-y-gestion-ciberincidentes</p> <p>https://www.incibe-cert.es/sites/default/files/contenidos/guias/doc/incibe-cert_gestion_ciberincidentes_sector_privado.pdf</p>"},{"location":"section2/u02/teoria/IS-U2.4.1.-DocumentacionDeIncidentes/#actividad","title":"Actividad","text":"<p>Documenta un incidente:</p> <p>de la  actividad</p> <p>descrito en una noticia\\, por ejemplo los vistos en la  actividad</p> <p>Evaluaci\u00f3n:</p> <p>Documentaci\u00f3n seg\u00fan gu\u00eda \\(80%\\)</p> <p>Clasificaci\u00f3n seg\u00fan taxonom\u00eda \\(10%\\)</p> <p>Valoraci\u00f3n \\(10%\\)</p> <p>6 caras m\u00e1ximo en pdf.</p> <p></p>"},{"location":"section2/u03/","title":"UD 3 - Detecci\u00f3n de incidentes","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 2 - Auditor\u00eda de incidentes de ciberseguridad:</p> <ul> <li>Controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes: tipos y fuentes</li> <li>Clasificaci\u00f3n, valoraci\u00f3n, documentaci\u00f3n, seguimiento inicial de incidentes de ciberseguridad.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Analiza incidentes de ciberseguridad utilizando herramientas, mecanismos de detecci\u00f3n y alertas de seguridad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>b) Se han establecido controles, herramientas y mecanismos de monitorizaci\u00f3n, identificaci\u00f3n, detecci\u00f3n y alerta de incidentes</li> <li>e) Se ha realizado una clasificaci\u00f3n, valoraci\u00f3n, documentaci\u00f3n y seguimiento de los incidentes detectados dentro de la organizaci\u00f3n.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n b: se puede montar un SIEM, con el stack de Elastic (ElasticSearch, Logstash y Kibana) para la monitorizaci\u00f3n de incidentes. Dado que el montaje del sistema es complejo, se recomienda emplear la siguiente imagen de docker para ello.</li> <li>Criterio de evaluaci\u00f3n e: se puede montar una herramienta de ticketing, como FIR, para llevar el control de los incidentes, desde su origen hasta su resoluci\u00f3n. Recomiendo que se despliegue con Docker, por lo que los alumnos deben haber visto Docker en este momento (aunque sea a nivel b\u00e1sico).</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/","title":"IS U3.1.1. RecopilacionDeEvidencias","text":"<p>Recopilaci\u00f3n y almacenamiento de evidencias</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#ra3","title":"RA3","text":"<p>a) Se han recopilado y almacenado de forma segura evidencias de incidentes de ciberseguridad que afectan a la organizaci\u00f3n.</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#indice","title":"\u00cdNDICE","text":""},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#recopilacion-de-evidencias","title":"Recopilaci\u00f3n de evidencias","text":""},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#evidencias","title":"Evidencias","text":"<p>Las evidencias son informaci\u00f3n que\\, por s\u00ed misma\\, o en combinaci\u00f3n con otra informaci\u00f3n\\, se utiliza para  probar algo .</p> <p>Se trata de una  fase inicia l en la que toda entidad debe estar preparada para cualquier suceso que pudiera ocurrir.</p> <p>Una buena  anticipaci\u00f3n  y  entrenamiento previo  es clave para realizar una gesti\u00f3n eficaz de un incidente\\, para lo que hace falta tener en cuenta tres pilares fundamentales: las personas\\, los procedimientos y la tecnolog\u00eda.</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#metodologias-de-recoleccion-y-almacenamiento","title":"Metodolog\u00edas de recolecci\u00f3n y almacenamiento","text":"<p>Existen gran diversidad de incidentes\\, y de muchos tipos\u2026 como hemos visto hasta ahora. No obstante\\, los pasos a seguir durante el proceso de recopilaci\u00f3n y an\u00e1lisis de evidencias e investigaci\u00f3n del incidente\\, equivalentes al an\u00e1lisis forense de un incidente\\, son los siguientes:</p> <p>De las distintas gu\u00edas que existen\\, la  RFC 3227  es unest\u00e1ndar ampliamente usado.</p> <p>https://www.ietf.org/rfc/rfc3227.txt</p> <p></p> <p>Otras propuestas:</p> <p> Guidelines for the best practices in the forensic examination of digital technology </p> <p> Electronic Crime Scene Investigation: A Guide for First Responders </p> <p> Forensic Examination of Digital Evidence: A Guide for Law Enforcement </p> <p> UNE 71506 - Metodolog\u00eda para el an\u00e1lisis forense de las evidencias electr\u00f3nicas </p> <p> Good Practice Guide for Computer-Based Electronic Evidence  </p> <p> RFC 3227 \u00abGuidelines for Evidence Collection and Archiving\u00bb o Directrices para la recopilaci\u00f3n de evidencias y su almacenamiento </p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#metodologias-de-recoleccion-y-almacenamiento_1","title":"Metodolog\u00edas de recolecci\u00f3n y almacenamiento","text":"<p>RFC 3227</p> <p>El RFC 3227 es un  documento  que recoge las directrices para:</p> <p>la  recopilaci\u00f3n  de evidencias y su  almacenamiento .</p> <p>puede llegar a servir como  est\u00e1ndar de facto  para la recopilaci\u00f3n de informaci\u00f3n en incidentes de seguridad.</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#principios","title":"Principios","text":""},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#rfc-3227-principios-i","title":"RFC 3227 - Principios I","text":"<p>Principios durante la recolecci\u00f3n de evidencias</p> <p>Capturar una  imagen del sistema tan precisa  como sea posible.</p> <p>Realizar  notas detalladas\\, incluyendo fechas y horas  indicando si se utiliza horario local o UTC.</p> <p>Minimizar los cambios en la informaci\u00f3n  que se est\u00e1 recolectando y eliminar los agentes externos que puedan hacerlo.</p> <p>Principios durante la recolecci\u00f3n de evidencias</p> <p>En el caso de enfrentarse a un dilema entre recolecci\u00f3n y an\u00e1lisis elegir  primero recolecci\u00f3n y despu\u00e9s an\u00e1lisis .</p> <p>Recoger la informaci\u00f3n  __seg\u00fan el orden de volatilidad __ \\(de mayor a menor\\).</p> <p>Tener en cuenta que por cada dispositivo __ la recogida de informaci\u00f3n puede realizarse de distinta manera__ .</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#1-orden-de-volatilidad","title":"1. Orden de volatilidad","text":"<p>Per\u00edodo de  tiempo en el que est\u00e1 accesible cierta informaci\u00f3n . Recolectar la de mayor volatilidad\\, seg\u00fan este orden:</p> <p>Registros y contenido de la cach\u00e9.</p> <p>Tabla de enrutamiento\\, cach\u00e9 ARP\\, tabla de procesos\\, estad\u00edsticas del kernel\\, memoria.</p> <p>Informaci\u00f3n temporal del sistema.</p> <p>Disco</p> <p>Logs del sistema.</p> <p>Configuraci\u00f3n f\u00edsica y topolog\u00eda de la red.</p> <p>Documentos.</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#2-acciones-a-evitarse","title":"2. Acciones a evitarse","text":"<p>Las que invaliden el proceso de recolecci\u00f3n de informaci\u00f3n\\, los resultados deben poder ser utilizados en un juicio si fuera necesario:</p> <p>No apagar el ordenado r hasta que se haya recopilado toda la informaci\u00f3n.</p> <p>No ejecutar programas  que modifiquen la fecha y hora de acceso de todos los ficheros del sistema.</p> <p>No confiar en la informaci\u00f3n proporcionada por los programas del sistema  ya que pueden haberse visto comprometidos.</p> <p>Recopilar la informaci\u00f3n mediante  programas desde un medio protegido .</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#3-consideraciones-sobre-la-privacidad","title":"3. Consideraciones sobre la privacidad","text":"<ul> <li>Es muy importante  tener en consideraci\u00f3n las pautas de la empresa  en lo que a privacidad se refiere:</li> <li>Es habitual  solicitar una autorizaci\u00f3n  por escrito de quien corresponda para poder llevar a cabo la recolecci\u00f3n de evidencias.</li> <li>Este es un aspecto fundamental ya que puede darse el caso de que se  trabaje con informaci\u00f3n confidencial  o de vital importancia para la empresa\\, o que  la disponibilidad de los servicios se vea afectada.</li> <li>No hay que entrometerse en la privacidad  de las personas sin una justificaci\u00f3n.</li> <li>No se deben recopilar datos de lugares a los que normalmente no hay raz\u00f3n para acceder\\, como ficheros personales\\, a menos que haya suficientes indicios.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#procedimiento-de-recoleccion","title":"Procedimiento de recolecci\u00f3n","text":""},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#recoleccion","title":"Recolecci\u00f3n","text":"<p>Debe de ser lo m\u00e1s detallado posible\\, procurando que no sea ambiguo y reduciendo al m\u00ednimo la toma de decisiones.</p> <p>Transparencia</p> <p>Los m\u00e9todos utilizados para recolectar evidencias deben de ser  transparentes y reproducibles .</p> <p>Se debe estar preparado para reproducir con precisi\u00f3n los m\u00e9todos usados\\, y que dichos m\u00e9todos hayan sido  testados por expertos independientes .</p> <p>Pasos I</p> <p>\u00bfD\u00f3nde est\u00e1 la evidencia? Listar  qu\u00e9 sistemas est\u00e1n involucrados  en el incidente y  de cu\u00e1les de ellos se deben tomar evidencias .</p> <p>Establecer  qu\u00e9 es relevante . En caso de duda es mejor recopilar mucha informaci\u00f3n que poca.</p> <p>Fijar el  orden de volatilidad  para cada sistema.</p> <p>Obtener la informaci\u00f3n  de acuerdo al orden establecido</p> <p>Pasos II</p> <p>Comprobar el  grado de sincronizaci\u00f3n del reloj del sistema .</p> <p>Seg\u00fan se vayan realizando los pasos de recolecci\u00f3n preguntarse  qu\u00e9 m\u00e1s puede ser una evidencia .</p> <p>Documentar cada paso.</p> <p>No olvidar a la gente involucrada. Tomar notas sobre  qu\u00e9 gente estaba all\u00ed\\, qu\u00e9 estaban haciendo\\, qu\u00e9 observaron y c\u00f3mo reaccionaron .</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#procedimiento-de-almacenado","title":"Procedimiento de almacenado","text":""},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#almacenamiento","title":"Almacenamiento","text":"<p>Cadena de custodia</p> <p>Debe estar claramente documentada y se deben detallar los siguientes puntos:</p> <p>\u00bfD\u00f3nde?\\, \u00bfcu\u00e1ndo? y \u00bfqui\u00e9n?  descubri\u00f3 y recolect\u00f3 la evidencia .</p> <p>\u00bfD\u00f3nde?\\, \u00bfcu\u00e1ndo? y \u00bfqui\u00e9n?  manej\u00f3 la evidencia .</p> <p>\u00bfQui\u00e9n ha custodiado la evidencia?\\, \u00bfcu\u00e1nto tiempo? y \u00bfc\u00f3mo la ha almacenado?</p> <p>En el caso de que la evidencia cambie de custodia  indicar cu\u00e1ndo y c\u00f3mo se realiz\u00f3 el intercambio \\, incluyendo n\u00famero de albar\u00e1n\\, etc.</p> <p>D\u00f3nde y c\u00f3mo almacenarlo</p> <p>Se debe almacenar la informaci\u00f3n en dispositivos:</p> <p>cuya  seguridad  haya sido  demostrada</p> <p>que  permitan detectar intentos de acceso no autorizados .</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#herramientas","title":"Herramientas","text":"<ul> <li>Pautas para selecci\u00f3n de herramientas\\, para la recolecci\u00f3n:</li> <li>herramientas externas al sistema\\, para evitar que hayan podido ser comprometidas.</li> <li>herramientas que alteren lo m\u00ednimo posible el escenario \\(no GUI\\, uso excesivo de memoria\\)</li> <li>deben estar ubicados en un dispositivo de solo lectura. \\(CDROM\\, USB\\)</li> <li>tener un kit b\u00e1sico de herramientas seg\u00fan S.O\\, que incluyan:</li> <li>listar y examinar procesos</li> <li>examinar el estado del sistema</li> <li>realizar copias bit a bit.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe-cert.es/blog/rfc3227</p> <p>https://www.ietf.org/rfc/rfc3227.txt</p>"},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#actividad","title":"Actividad","text":""},{"location":"section2/u03/teoria/IS-U3.1.1.-RecopilacionDeEvidencias/#actividad-i","title":"Actividad I","text":"<p>Ya conocemos la RFC 3227. Y sobre la UNE 71506?</p> <p>Enumera las diferencias m\u00e1s significativas entre ambas.</p> <p>Cuales incorporar\u00edas a tu normativa para completar la 3227. Justifica las respuesta tanto para decisiones positivas como negativas.</p> <p>Resumen de forma esquem\u00e1tica c\u00f3mo quedar\u00eda metodolog\u00eda para el an\u00e1lisis forense de las evidencias electr\u00f3nicas</p> <p>Evaluaci\u00f3n:</p> <p>Identificar procedimiento de recopilaci\u00f3n y almacenamiento de evide.</p> <p>Justifica haber trabajado UNE 71506\\, justificando o no la decisi\u00f3n.</p> <p>6 caras m\u00e1ximo en pdf.</p> <p>Recopilaci\u00f3n de evidencias sobre un incidente:</p> <p>de la  actividad</p> <p>descrito en una noticia\\, por ejemplo los vistos en la  actividad</p> <p>Evidencias\\, y memoria del proceso seguido\u2026.</p> <p>Evaluaci\u00f3n:</p> <p>Se ha seguido los pasos de la toma seg\u00fan la memoria.</p> <p>Se ha seguido los pasos del almacenamiento seg\u00fan la memoria.</p> <p>6 caras m\u00e1ximo en pdf.</p> <p></p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/","title":"IS U3.2.1. AnalisisDeEvidenciasEInvestigacionDeIncidentes","text":"<p>An\u00e1lisis de evidencias e investigaci\u00f3n de incidente</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#ra3","title":"RA3","text":"<p>b) Se ha realizado un an\u00e1lisis de evidencias. c) Se ha realizado la investigaci\u00f3n de incidentes de ciberseguridad.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#indice","title":"\u00cdNDICE","text":""},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias","title":"An\u00e1lisis de evidencias","text":"<p> working in progress </p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias-e-investigacion-del-incidente","title":"An\u00e1lisis de evidencias e investigaci\u00f3n del incidente","text":"<p>AN\u00c1LISIS DE EVIDENCIAS</p> <p>El objetivo de esta fase es identificar o detectar un ciber incidente para lo cual es importante realizar una monitorizaci\u00f3n lo m\u00e1s completa posible. Teniendo en cuenta la m\u00e1xima de que no todos los eventos o alertas de ciberseguridad son ciber incidentes.</p> <p>INVESTIGACI\u00d3N DEL INCIDENTE</p> <p>Los incidentes son cualquier evento que no sea parte de la operaci\u00f3n est\u00e1ndar de un servicio que ocasione\\, o pueda ocasionar\\, una interrupci\u00f3n o una reducci\u00f3n de la calidad de ese servicio.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias_1","title":"An\u00e1lisis de evidencias","text":"<p>Una vez recopiladas las evidencias digitales y almacenadas adecuadamente\\, el  an\u00e1lisis forense  digital debe encargarse de:</p> <p>la  reconstrucci\u00f3n</p> <p>la  temporalizaci\u00f3n</p> <p>de los  _hechos ocurridos _ con los datos recopilados.</p> <p>Deber\u00e1n  recopilarse  los hechos desde el momento inicial del incidente hasta su descubrimiento.</p> <p>Esta fase  no termina hasta  que no se puede determinar</p> <p>qu\u00e9 o qui\u00e9n realiz\u00f3 el incidente</p> <p>c\u00f3mo lo hizo/c\u00f3mo se produjo</p> <p>cu\u00e1l fue el objetivo y bajo qu\u00e9 circunstancias se cometi\u00f3</p> <p>qu\u00e9 afectaci\u00f3n ha tenido en el sistema.</p> <p>Es el n\u00facleo duro de la investigaci\u00f3n y tiene que concluir con esta informaci\u00f3n.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias-premisas","title":"An\u00e1lisis de evidencias - Premisas","text":"<p>Para llevar a cabo este proceso\\, es importante recordar las premisas b\u00e1sicas:</p> <p>No  se debe  trabajar con los datos originales .</p> <p>Se debe r espetar cada una de las leyes vigentes  en la jurisdicci\u00f3n donde se lleva a cabo la investigaci\u00f3n.</p> <p>Los  resultados  que se obtengan de todo el proceso han de ser  verificables y reproducibles</p> <ul> <li>Para llevar a cabo este proceso\\, es importante recordar las premisas b\u00e1sicas:</li> <li>Es importante disponer de documentaci\u00f3n adicional con informaci\u00f3n de diversa \u00edndole:</li> <li>Sistema operativo del sistema</li> <li>Programas instalados en el equipo.</li> <li>Hardware\\, accesorios y perif\u00e9ricos que forman parte del sistema.</li> <li>Datos relativos a la conectividad del equipo:<ul> <li>Si dispone de firewall\\, ya sea f\u00edsico o l\u00f3gico.</li> <li>Si el equipo se encuentra en zonas de red especiales\\, por ejemplo\\, DMZ.</li> <li>Si tiene conexi\u00f3n a Internet o utiliza proxies.</li> </ul> </li> <li>Datos generales de configuraci\u00f3n que puedan ser de inter\u00e9s para el investigador para ayudar en la tarea.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#analisis-de-evidencias-pasos-a-seguir","title":"An\u00e1lisis de evidencias - Pasos a seguir","text":"<ul> <li>Fase de an\u00e1lisis:</li> <li>No existe ning\u00fan procedimiento est\u00e1ndar que dicte los pasos a seguir en la investigaci\u00f3n.</li> <li>Hab\u0155a que estudiar cada caso por separado teniendo en cuenta las particularidades del sistema afectado:</li> <li>No ser\u00e1 lo mismo analizar un SO Windows o uno Linux</li> <li>No ser\u00e1 lo mismo un caso de intrusi\u00f3n en el correo electr\u00f3nico de alguien o un ataque de denegaci\u00f3n de servicio.</li> <li>De igual forma\\, no se actuar\u00e1 igual en un caso de instalaci\u00f3n de malware que destruye informaci\u00f3n en disco que uno que env\u00ede lo que se teclea en un equipo.</li> </ul> <p>En todo caso\\, Se pueden destacar varios pasos\\, que habr\u00e1 que adaptar en cada caso:</p> <p>Preparar un  entorno de trabajo  adaptado a las necesidades del incidente.</p> <p>Reconstruir una  __l\u00ednea temporal __ con los hechos sucedidos.</p> <p>Determinar qu\u00e9 __ procedimiento se llev\u00f3 a cabo__  por parte del atacante.</p> <p>Identificar el  autor o autores  de los hechos.</p> <p>Evaluar el  impacto causado  y si es posible la recuperaci\u00f3n del sistema.</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#pasos","title":"Pasos","text":""},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#preparar-un-entorno-de-trabajo","title":"Preparar un entorno de trabajo","text":"<ul> <li>Preparar un entorno adecuado para llevar la investigaci\u00f3n. Premisa de  no tocar los dispositivos originales y trabajar con copias de las evidencias :</li> <li>Decidir si realizar la investigaci\u00f3n sobre discos originales\\, lo que conlleva riesgos\\, por tanto:</li> <li>Caliente</li> <li>Precauci\u00f3n\\, poniendo el disco en modo solo lectura.</li> <li> <p>Cuidad para no cometer un error que invalide las pruebas.</p> </li> <li> <p>Preparar un entorno adecuado para llevar la investigaci\u00f3n. Premisa de  no tocar los dispositivos originales y trabajar con copias de las evidencias :</p> </li> <li>Decidir si realizar la investigaci\u00f3n sobre discos originales\\, lo que conlleva riesgos\\, por tanto:</li> <li>Frio</li> <li> <p>Preparar un entorno\\, con el mismo SO de equipo afectado y montar la imagen.</p> <ul> <li>Crear imagen de la copia original</li> <li>Podremos ejecutar archivos\\, realizar tareas m\u00e1s intrusivas\\, siempre habr\u00e1 marcha atr\u00e1s.</li> <li>En caso de malware se podr\u00e1 ejecutar sin miedo\\, sin que la copia original se vea afectada\\, pudiendo ser m\u00e1s agresivos en los trabajos de investigaci\u00f3n</li> </ul> </li> <li> <p>Preparar un entorno adecuado para llevar la investigaci\u00f3n. Premisa de  no tocar los dispositivos originales y trabajar con copias de las evidencias :</p> </li> <li>Posible entorno\\, con dos estaciones de trabajo \\(WS\\):</li> <li>Primera WS: dos discos duros</li> <li>Primero: SO anfitri\u00f3n con el que se realizar\u00e1 el an\u00e1lisis de evidencias</li> <li>Segundo: Im\u00e1gen del disco duro del equipo atacado.</li> <li>Segunda WS: SO configurado exactamente igual q el equipo atacado</li> <li>Se podr\u00e1 analizar los cambios producidos en ambos equipos pudiendo detectar los efectos ocasionados por los ataques sufridos en el equipo.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#creacion-de-linea-temporal","title":"Creaci\u00f3n de l\u00ednea temporal","text":"<p>El primer paso\\, crear una l\u00ednea temporal donde ubica los acontecimientos que han tenido lugar en el equipo. Para crear l\u00ednea temporal construir un esbozo de los puntos clave en el tiempo:</p> <p>Instalaci\u00f3n del sistema operativo</p> <p>Borrado de determinados archivos</p> <p>Instalaci\u00f3n de determinados programas</p> <ul> <li>Referirnos a los tiempos MACD de los archivos</li> <li>\\(Modificaci\u00f3n\\, Acceso\\, Cambio\\, Borrado\\)</li> <li>Importante los husos horarios\\, importante para dar cr\u00e9dito a las pruebas.</li> <li>Identificar la fecha de instalaci\u00f3n del SO y los usuarios creados</li> <li>Estudiar discrepancia o usuarios fuera de lo com\u00fan en los \u00faltimos instantes</li> <li>Buscar m\u00e1s informaci\u00f3n en los ficheros que se ven \u201ca simple vista\u201d</li> <li>Que programas fuero lo \u00faltimos en ser instalados. Seguramente en rutas poco habituales: archivos temporales\\, mezclados con librer\u00edas u otros archivos.</li> <li>Qu\u00e9 cambios repercutieron en el sistema</li> <li>Buscar informaci\u00f3n en archivos que no est\u00e1n \u201ca la vista\u201d.</li> <li>Habilitar la visualizaci\u00f3n de archivos ocultos y sus extensiones.</li> <li>Utilizar herramientas que permitan recuperar archivos borrados.</li> <li>Utilizar programas que permitan obtener informaci\u00f3n mediante esteganograf\u00eda</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#determinar-como-se-actuo","title":"Determinar c\u00f3mo se actu\u00f3","text":"<ul> <li>Para obtener esta informaci\u00f3n\\, es necesario investigar la memoria. Por tanto\\, en la medida de lo posible\\, realizar un volcado de memoria para:</li> <li>Obtener procesos que se estaban ejecutando y ocultados\\, nos dar\u00e1 pistas de c\u00f3mo se actu\u00f3.</li> <li>Los procesos leg\u00edtimos pueden ocultar procesos malintencionados camuflados<ul> <li>Sin proceso padre</li> <li>Con nombres parecidos a procesos leg\u00edtimos</li> </ul> </li> <li>Obtener ejecutables y librer\u00edas involucrados.</li> <li>Estudiar mediante programas que nos aportan esta informaci\u00f3n\\, si tienen cadenas \\(String\\) sospechosas.</li> <li>Comandos ejecutados desde consola.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#identificar-autores","title":"Identificar autores","text":"<p>Es importante analizar dos vertientes a la hora de continuar en el an\u00e1lisis de las evidencias\\, y en concreto con la la identificaci\u00f3n de los autores:</p> <p>Si se realiza un peritaje con fin:</p> <p>inculpatorios: Intentar resolver qui\u00e9n es el autor o dar pistas fiables para que se contin\u00fae el estudio en otros \u00e1mbitos.</p> <p>correctivos: no nos interesa perder el tiempo en esta fase\\, y ser\u00eda mejor dedicar el tiempo al estudio de impacto causado y mejoras para evitar cuestiones similares.</p> <ul> <li>Si decidimos dedicar tiempo\\, para identificar los autores\\, podemos</li> <li>Del volcado de memoria\\, obtener las conexiones abiertas: IPs origen\\, teniendo en cuenta que puede estar falseada.</li> <li>Hay que ser cr\u00edtico con la informaci\u00f3n que se obtiene\\, no siempre se obtendr\u00e1 \u00e9xito a la primera\\, ser\u00e1 dif\u00edcil averiguar el origen del incidente.</li> <li>Recapacitar en los perfiles de atacantes\\, para mimetizarse y entender qui\u00e9n pudo ser el autor:</li> <li>Org. criminales con \u00e1nimo de lucro\\, buscan robar informaci\u00f3n y sacar rendimiento</li> <li>Quien busca prestigio y reconocimiento en el ambiente: publicando su fechor\u00eda.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#impacto-causado","title":"Impacto causado","text":"<ul> <li>No hay un m\u00e9todo \u00fanico para obtener esta informaci\u00f3n. Puedes usar BIA \\(Business Impact Analysis\\) para determinar el impacto de ciertos eventos ayudando a valorar los da\u00f1os econ\u00f3micos. Estos podr\u00e1n tener asociado:</li> <li>gastos __  __econ\u00f3micos \\, que habr\u00e1 que cuantificar en funci\u00f3n de los \u00edtems afectados.</li> <li>F\u00e1cil c\u00e1lculo: Estos gastos resultar\u00e1 de reemplazar una m\u00e1quina o dispositivo que qued\u00f3 inservible tras el ataque\\, o las horas de reinstalaci\u00f3n de un sistema.</li> <li>Dif\u00edcil c\u00e1lculo.Tambi\u00e9n pueden deberse por el robo de informaci\u00f3n de secreto industrial que habr\u00e1 que cuantificar\\, ya que la empresa se ver\u00e1 afectada a largo plazo.</li> <li>Otros\\, que posiblemente tambi\u00e9n supondr\u00e1n un problema econ\u00f3mico.</li> <li>tiempo de inactividad de oficinas y f\u00e1bricas\\, que dejar\u00e1n de realizar su trabajo.</li> </ul>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#herramientas","title":"Herramientas","text":"<p>TODO</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#bibliografia","title":"Bibliograf\u00eda","text":"<p>UNE 71506 - Metodolog\u00eda para el an\u00e1lisis forense de evidencia electr\u00f3nica</p> <p>Metodolog\u00edas para un an\u00e1lisis forense</p> <p>https://www.incibe-cert.es/blog/rfc3227</p> <p>https://www.ra-ma.es/libro/gestion-de-incidentes-de-ciberseguridad_139033/</p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#actividad","title":"Actividad","text":""},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#actividad-ii","title":"Actividad II","text":"<p>Recopilaci\u00f3n y an\u00e1lisis de evidencias sobre un incidente:</p> <p> 3.abc.01 - Recolecci\u00f3n\\, almacenamiento y an\u00e1lisis </p> <p></p>"},{"location":"section2/u03/teoria/IS-U3.2.1.-AnalisisDeEvidenciasEInvestigacionDeIncidentes/#_1","title":"IS U3.2.1. AnalisisDeEvidenciasEInvestigacionDeIncidentes","text":""},{"location":"section2/u04/","title":"UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 3 - Investigaci\u00f3n de los incidentes de ciberseguridad:</p> <ul> <li>Recopilaci\u00f3n de evidencias.</li> <li>An\u00e1lisis de evidencias.</li> <li>Investigaci\u00f3n del incidente</li> <li>Intercambio de informaci\u00f3n del incidente con proveedores u organismos competentes.</li> <li>Medidas de contenci\u00f3n de incidentes.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 3. Investiga incidentes de ciberseguridad analizando los riesgos implicados y definiendo las posibles medidas a adoptar.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han recopilado y almacenado de forma segura evidencias de incidentes de ciberseguridad que afectan a la organizaci\u00f3n.</li> <li>b) Se ha realizado un an\u00e1lisis de evidencias.</li> <li>c) Se ha realizado la investigaci\u00f3n de incidentes de ciberseguridad.</li> <li>d) Se ha intercambiado informaci\u00f3n de incidentes, con proveedores y/o organismos competentes que podr\u00edan hacer aportaciones al respecto.</li> <li>e) Se han iniciado las primeras medidas de contenci\u00f3n de los incidentes para limitar los posibles da\u00f1os causados.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: se puede usar una herramienta como DFIRTrack para llevar las evidencias y artefactos de los incidentes de ciberseguridad.</li> <li>Criterio de evaluaci\u00f3n b: en caso de incidentes con ransomware, se recomienda ]el uso de la herramienta id-ransomware](https://id-ransomware.malwarehunterteam.com/) para comprobar qu\u00e9 tipo de malware nos ha infectado y qu\u00e9 pasos tomar a continuaci\u00f3n.</li> <li>Criterio de evaluaci\u00f3n c: para entrenar la investigaci\u00f3n de incidentes se pueden emplear plataformas de aprendizaje como Let's Defend o Cyberdefenders.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/","title":"IS U4.1.1. PlanesDeRespuesta","text":"<p>Planes de respuesta</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ra4","title":"RA4","text":"<p>a) Se han desarrollado procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes de ciberseguridad m\u00e1s habituales. b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n, prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ra4_1","title":"RA4","text":"<p>c) Se ha establecido un flujo de toma de decisiones y escalado de incidentes interno y/o externo adecuados. d) Se han llevado a cabo las tareas de restablecimiento de los servicios afectados por un incidente hasta confirmar la vuelta a la normalidad.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ra4_2","title":"RA4","text":"<p>e) Se han documentado las acciones realizadas y las conclusiones que permitan mantener un registro de \u201clecciones aprendidas\u201d. f) Se ha realizado un seguimiento adecuado del incidente para evitar que una situaci\u00f3n similar se vuelva a repetir.</p> Contenidos I Slide RA4 2 Marco de Ciberseguridad 7 NIST - Marco de Ciberseguridad del NIST 8 Planes de respuesta 14 Respuesta a incidentes: ISO/IEC 27035 15 Respuesta a incidentes: SP800-61 16 Respuesta a incidentes: SP800-611. Preparaci\u00f3n 17 Respuesta a incidentes: SP800-612. Detecci\u00f3n 21 Respuesta a incidentes: SP800-613. An\u00e1lisis 25 Contenidos II Slide Respuesta a incidentes: SP800-614. Contenci\u00f3n 31 Respuesta a incidentes: SP800-615. Erradicaci\u00f3n 38 Respuesta a incidentes: SP800-616. Recuperaci\u00f3n 41 Respuesta a incidentes: SP800-617. Post-incidente (Lecciones aprendidas) 45 Playbook 52 Ejemplo Playbook 58 Bibliograf\u00eda 66 Actividad 68"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#marco-de-ciberseguridad","title":"Marco de Ciberseguridad","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#nist-marco-de-ciberseguridad-del-nist","title":"NIST - Marco de Ciberseguridad del NIST","text":"<p>NIST es el acr\u00f3nimo de Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda \\(National Institute of Standards and Technology\\,en ingl\u00e9s\\) dependiente del Departamento de Comercio de EE.UU.</p> <p>El  Marco de Ciberseguridad del NIST  ayuda a los negocios de todo tama\u00f1o a comprender mejor sus riesgos de ciberseguridad\\, administrar y reducir sus riesgos\\, y proteger sus redes y datos.</p> <p>La implementaci\u00f3n se realiza\\, siguiendo estas cinco f\u00e1ses:  identificaci\u00f3n protecci\u00f3n\\, detecci\u00f3n\\, respuesta y recuperaci\u00f3n .</p> <p>Identificaci\u00f3n.</p> <p>Identifica equipos\\, software y en general activos.</p> <p>Pol\u00edticas de seguridad en la que se identifique funciones y responsabilidades\\, de personal con acceso a datos delicados.</p> <p>Pasos a seguir para protegerse y limitar da\u00f1o ante ataques.</p> <p></p> <p>2. Protecci\u00f3n</p> <p>Implementar medidas de control\\,</p> <p>- acceso a dispositivos</p> <p>- codificar datos delicados</p> <p>- copias de seguridad</p> <p>- formaci\u00f3n</p> <p></p> <p>3. Detecci\u00f3n</p> <p>Monitorizar sistemas y dispositivos</p> <p>Investigar actividades inusual.</p> <p></p> <p>4. Respuesta</p> <p>Notificar a clientes\\, empleados en riesgo</p> <p>Mantener funcionando operaciones de negocio e investigar ataques</p> <p></p> <p>5. Recuperaci\u00f3n</p> <p>Reparar y restaurar los sistemas afectados por ataques.</p> <p>Mantener informados a empleados y clientes.</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-isoiec-27035","title":"Respuesta a incidentes: ISO/IEC 27035","text":"<p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Identificar\\, detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p> <p>Information security incident management guide</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61","title":"Respuesta a incidentes: SP800-61","text":"<p>Tomando como referencia el NIST.</p> <p>1. Preparaci\u00f3n</p> <p>2. Detecci\u00f3n</p> <p>3. An\u00e1lisis</p> <p>4. Contenci\u00f3n</p> <p>5. Erradicaci\u00f3n</p> <p>6. Recuperaci\u00f3n</p> <p>7. Actividad post-incidente</p> <p>SP800-61 Guide</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_1","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Preparaci\u00f3n</li> </ol> <p>El objetivo principal de esta fase es que  la organizaci\u00f3n se encuentre preparada para responder y actuar frente a un ciberataqu e\\, tomando en cuenta medidas de prevenci\u00f3n y aseguramiento de los sistemas para reducir la superficie de ataque.</p> <p>1.  Tener conformado un equipo de respuesta a incidentes \\, con la preparaci\u00f3n y experiencia para poder atender\\, dar seguimiento y soluci\u00f3n a cualquier incidente de seguridad.</p> <p>2.  Contar con un Plan de Respuesta ante Incidentes\\,  que defina de manera clara y secuencial \\(se recomienda hacerlo a manera de checklist\\)\\, los pasos a seguir ante un incidente de seguridad.</p> <p>3.  Tener preparado Hardware y Software para an\u00e1lisis de incidentes \\, tal como:</p> <p>Software \\(como EDR\\) y/o Hardware para la  __recolecci\u00f3n de datos forenses __ digitales y respaldo de informaci\u00f3n.</p> <p>Equipos  para tareas de  an\u00e1lisis de datos\\, an\u00e1lisis de tr\u00e1fico de red \\, redacci\u00f3n de reportes.</p> <p>Analizadores de paquetes y protocolos de red.</p> <p>4. __ __  __Tener identificada y documentada la infraestructura de TI __ de la organizaci\u00f3n:</p> <p>Diagramas de red y tener  __identificados los activos m\u00e1s importantes __ \\(como servidores cr\u00edticos\\).</p> <p>Tener clara y documentada la  __forma normal actual de operar __ \\(Baseline\\) de la red y aplicaciones.</p> <p>Tener identificada la  __lista de puertos utilizados __ en la red.</p> <p>Hashes  criptogr\u00e1ficos de archivos cr\u00edticos.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_2","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Detecci\u00f3n</li> </ol> <p>En esta fase juega un papel muy importante contar con una  herramienta de monitorizaci\u00f3n y detecci\u00f3n \\, que sea capaz de realizar correlaci\u00f3n de eventos\\, Machine Learning y an\u00e1lisis de comportamientos para alertar cualquier comportamiento inusual y sospechoso sobre la red.</p> <p>Implementar en estas herramientas los casos que tienen que darse en esas herramientas para detectar un determinado incidente.</p> <p>1.  Determinar si se trata de solo un evento \\(sin malas consecuencias para la organizaci\u00f3n\\) o en realidad es un incidente \\(con malas consecuencias para la organizaci\u00f3n\\, como violaci\u00f3n de pol\u00edticas o est\u00e1ndares de seguridad\\).</p> <p>2. Algunos de los  indicadores  o comportamientos m\u00e1s comunes que pueden ser  se\u00f1al de un incidente  son:</p> <p>Existencia de usuarios desconocidos.</p> <p>Procesos o conexiones de red extra\u00f1as.</p> <p>Conexiones de red a la escucha.</p> <p>Llaves de registro inusuales.</p> <p>Tareas agendadas desconocidas\\, o servicios corriendo.</p> <p>3. Tener en cuenta __ los vectores de ataque__ \\, tales como \\(se mencionan los m\u00e1s comunes\\):</p> <p>Dispositivos externos/removibles \\(usb\u2019s\\).</p> <p>Ataques de fuerza bruta \\(Attrition\\).</p> <p>Navegaci\u00f3n\\, Email \\(Spear phishing\\, Bussiness Email Compromise\\).</p> <p>Explotaci\u00f3n de vulnerabilidades \\(de sistema operativo\\, aplicaciones\\).</p> <p>P\u00e9rdida o robo de equipo.</p> <p>Ataques Man in the Middle \\(MIM\\).</p> <p>Depender\u00e1n del tipo de incidente para el que nos estemos preparando.</p> <p>4. Las fuentes m\u00e1s comunes de  indicadores de incidentes  son:</p> <p>Sistemas SIEM.</p> <p>Software Antimalware y Antispam.</p> <p>Soluciones de File Integrity Checking.</p> <p>Servicios de monitoreo e informaci\u00f3n de seguridad y amenazas de terceros\\, Open Source \\(OSINT\\)\\, Comerciales\\, Gubernamentales \\(como CERT\u2019s\\, ISAC\u2019s\\, Data Feeds\\).</p> <p>Logs de sistemas operativos\\, as\u00ed como dispositivos de red \\(como UTM\u2019s \\(IDS e IPS\\)\\, routers\\, switches).</p> <p>Personas dentro y fuera de la organizaci\u00f3n\\, afines al \u00e1rea de Ciberseguridad.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_3","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>An\u00e1lisis</li> </ol> <p>Contar con  personal  altamente calificado para __ analizar\\, investigar y determinar las acciones correctas __ a tomar frente un ciberataque de cualquier categor\u00eda.</p> <p>El equipo de respuesta a incidentes debe trabajar r\u00e1pido para analizar y validar cada incidente\\,  siguiendo un proceso predefinido y documentado cada paso realizado .</p> <p>El an\u00e1lisis inicial debe proveer informaci\u00f3n suficiente para priorizar \\(triage\\) actividades subsecuentes\\, como la contenci\u00f3n del incidente y an\u00e1lisis m\u00e1s profundo de los efectos y alcance del incidente.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Entender comportamientos normales:  El equipo de respuesta a incidentes debe analizar las redes\\, sistemas y aplicaciones de la organizaci\u00f3n\\, para entender cu\u00e1l es su comportamiento normal \\(Baseline\\)\\, de tal manera\\, cuando se presente un comportamiento anormal\\, sea m\u00e1s f\u00e1cil de identificar.</p> <p>Crear una pol\u00edtica de retenci\u00f3n de logs : Crear e implementar esta pol\u00edtica que especifique por cuanto tiempo  los logs deben de mantenerse es de gran utilidad en el an\u00e1lisis porque principalmente los incidentes pueden ser descubiertos despu\u00e9s de varios d\u00edas\\, semanas o meses despu\u00e9s de haber ocurrido \\(UTM\u2019s\\, Antimalware\\, Sistemas\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Realizar correlaci\u00f3n de eventos : La evidencia de un incidente puede ser registrada en logs de varios sistemas \\(UTM\u2019s\\, Antimalware\\, Sistemas operativos\\, aplicaciones\\). Recomendado uso de soluci\u00f3n SIEM.</p> <p>Mantener todos los relojes de los sistemas sincronizados:  Hacer uso de protocolos como NTP\\, con el fin de mantener la sincronizaci\u00f3n entre hosts y evitar que los eventos sean inconsistentes en lo que respecta a su hora de ocurrencia\\, lo que dificulta en gran medida en an\u00e1lisis de incidentes.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Hacer uso de motores de b\u00fasqueda en internet  para investigar incidentes.</p> <p>__Uso de analizadores de tr\u00e1fico de red para la recolecci\u00f3n de datos adicionales __ \\(como Wireshark\\).</p> <p>Filtrado de datos/logs : Una estrategia efectiva es filtrar categor\u00edas de datos significativos como eventos cr\u00edticos e ir avanzando paulatinamente al an\u00e1lisis de datos menos relevantes \\(aunque en muchas ocasiones este tipo de eventos revelan informaci\u00f3n importante sobre el incidente\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Priorizaci\u00f3n del incidente : La priorizaci\u00f3n en el manejo del incidente es quiz\u00e1s\\, es el punto m\u00e1s cr\u00edtico en la toma de decisiones en el proceso del manejo de incidentes.</p> <p>Este debe ser priorizado en basandose en datos relevantes\\, tales como:</p> <p>Impacto  funcional  del incidente: Ninguno\\, Bajo\\, Medio\\, Alto.</p> <p>Impacto del incidente en la  informaci\u00f3n de la organizaci\u00f3n : Ninguno\\, Violaci\u00f3n de Propiedad\\, Perdida de Integirdad.</p> <p>Recuperabilidad  del incidente: Regular\\, No Recuperable.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Notificaci\u00f3n de incidentes:  Definir los contactos y los medios por los cuales el personal debe reportar cualquier incidente de seguridad.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_4","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Contenci\u00f3n</li> </ol> <p>1. Una parte esencial de esta etapa es la  toma de las decisiones \\(por ejemplo\\, apagar un sistema\\, desconectarlo de la red\\, deshabilitar ciertas funciones\\, etc\\). El principal objetivo es  prevenir un mayor da\u00f1o y a su vez mantener las evidencias intactas .</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente . Las organizaciones deben  crear estrategias de contenci\u00f3n por separado\\, para cada tipo de incidente  mayor\\, con criterios documentados y claros\\, para facilitar la toma de decisiones.</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente .</p> Incidente Ejemplo Estrategia de contenci\u00f3n Acceso no autorizado Sucesivos intentos fallidos de login Bloqueo de cuenta C\u00f3digo Malicioso Infecci\u00f3n con virus Desconexi\u00f3n de la red del equipo afectado Acceso no autorizado Compromiso del Root Apagado del sistema Reconocimiento Scanning de puertos Incorporaci\u00f3n de reglas de filtrado en el firewall <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Da\u00f1o potencial y robo de recursos.</p> <p>Necesidad de preservaci\u00f3n de evidencia. \\(Apago o no la m\u00e1quina?\\)</p> <p>Disponibilidad de servicios \\(por ejemplo\\, conectividad de red\\, servicios prove\u00eddos a terceros\\).</p> <p>Tiempo y recursos necesarios para implementar la estrategia.</p> <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Efectividad de la estrategia.</p> <p>Duraci\u00f3n de la soluci\u00f3n \\(workaround de emergencia a llevar a cabo por 4 horas\\, workaround temporal a borrar en 2 semanas\\, soluci\u00f3n permanente\\).</p> <p>En algunos casos se recomienda redirigir al atacante a un sandbox o honeynet\\, para que la organizaci\u00f3n pueda monitorear las actividades del atacante\\, usualmente para reunir evidencia adicional.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>a) Es importante  documentar claramente como toda la evidencia \\, incluyendo sistemas comprometidos\\,  ha sido preservada . Para esto es necesario instrumentar una Cadena de Custodia\\, que documente cuando cualquier evidencia pase de una persona a otra y que incluya detalle y firmas de cada parte involucrada.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>b) La  evidencia debe ser conservada a detall e\\, incluyendo los siguientes datos:</p> <p>Informaci\u00f3n de identificaci\u00f3n \\(ubicaci\u00f3n\\, n\u00fameros seriales\\, modelo\\, Hostname\\, IP\\, MAC del equipo\\).</p> <p>Nombre\\, cargo\\, no. Telef\u00f3nico de cada individuo involucrado en la recolecci\u00f3n o manejo de evidencia durante la investigaci\u00f3n.</p> <p>Fecha y hora de cada manipulaci\u00f3n de evidencia.</p> <p>Ubicaciones de donde fue guardada la evidencia.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>c) __ __  Identificaci\u00f3n de los hosts atacados.  Los siguientes componentes describen las actividades m\u00e1s comunes para la identificaci\u00f3n de hosts atacados:</p> <p>Validar la direcci\u00f3n IP del host atacante.</p> <p>Investigaci\u00f3n del host atacante a trav\u00e9s de motores de b\u00fasqueda \\(search engines\\).</p> <p>Uso de bases de datos de incidentes: IOC\\, Threat Intelligence Platforms</p> <p>Monitorear los canales de comunicaci\u00f3n del atacante.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_5","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Erradicaci\u00f3n</li> </ol> <p>Posterior a la contenci\u00f3n de un incidente\\,  la erradicaci\u00f3n es necesaria \\(aunque no siempre o se realiza en la etapa de recuperaci\u00f3n\\) y es importante  identificar todos los hosts afectados  dentro de la organizaci\u00f3n para que puedan ser recuperados.</p> <p>Algunas de las acciones a realizar en esta etapa son:</p> <p>Eliminar malware.</p> <p>Eliminar usuarios maliciosos o vulnerados.</p> <p>Parcheo de sistemas para mitigar vulnerabilidades utilizadas.</p> <p>Crear nuevas reglas en las soluciones de seguridad.</p> <p>Aplicar un an\u00e1lisis de vulnerabilidades a los sistemas y la red \\(Pen test\\).</p> <p>Depender\u00e1n del tipo de incidente.</p> <p>Las acciones a realizar en esta etapa  d epender\u00e1n del tipo de incidente.  Algunas estrategias de erradicaci\u00f3n de incidentes:</p> Incidente Ejemplo Estrategia de erradicaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_6","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Recuperaci\u00f3n</li> </ol> <p>En esta etapa\\, los administradores:</p> <p>restauran  __ los __  sistemas  __ a su operaci\u00f3n normal__ \\,</p> <p>confirman  __ si est\u00e1n __  funcionando  __ de manera correcta__  y</p> <p>\\(si aplica\\) se  remedian vulnerabilidades  para prevenir incidentes similares.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Restaurar sistemas desde respaldos limpios.</p> <p>Restaurar sistemas desde cero.</p> <p>Instalaci\u00f3n de parches.</p> <p>Cambiar contrase\u00f1as en sistemas locales y recursos de red.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Administradores deben monitorear sistemas para asegurarse de su funcionamiento normal.</p> <p>Continuar probando los sistemas restaurados.</p> <p>Documentar los pasos llevados a cabo.</p> <p>Recuperaci\u00f3n permite a la contenci\u00f3n empezar de nuevo\\, si la actividad maliciosa es detectada de nueva cuenta.</p> <p>Las estrategias de recuperaci\u00f3n depender\u00e1n del incidente</p> Incidente Ejemplo Estrategia de recuperaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de Backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un Rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_7","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Post-incidente (Lecciones aprendidas)</li> </ol> <p>Una de las partes m\u00e1s importantes de la Respuesta a Incidentes es tambi\u00e9n com\u00fanmente omitida:  aprender y mejorar . El equipo de respuesta a incidentes debe evolucionar\\, tomando conciencia y conocimiento de las nuevas amenazas\\, tecnolog\u00edas y lecciones aprendidas.</p> <p>Mantener una reuni\u00f3n de \u201cLecciones Aprendidas\u201d\\, con todas las partes involucradas en un incidente\\, puede ayudar en gran medida a mejorar las medidas de seguridad y el propio proceso de respuesta a incidentes.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 sucedi\u00f3 exactamente y en qu\u00e9 momento \\(fechas y horas\\)?</p> <p>\u00bfC\u00f3mo realiz\u00f3 su trabajo el equipo en la atenci\u00f3n del incidente? \u00bfSe siguieron los procesos documentados? \u00bfFueron los adecuados?</p> <p>\u00bfQu\u00e9 informaci\u00f3n fue necesitada en primera instancia?</p> <p>\u00bfSe tomaron pasos o acciones que pudieron haber inhibido la recuperaci\u00f3n?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 podr\u00eda hacer el equipo de manera diferente la pr\u00f3xima vez que ocurra un incidente similar?</p> <p>\u00bfC\u00f3mo podr\u00eda ser mejorado el mecanismo de compartici\u00f3n de informaci\u00f3n con otras organizaciones?</p> <p>\u00bfQu\u00e9 acciones correctivas se pueden aplicar para prevenir incidentes similares futuros?</p> <p>\u00bfQu\u00e9 indicadores deben ser observados en el futuro para detectar incidentes similares?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 herramientas o recursos adicionales se necesitan para detectar\\, analizar y mitigar futuros incidentes?</p> <p>Otra actividad importante en esta etapa es crear un  \u201cInforme de seguimiento del Incidente\u201c . Este informe podr\u00e1 ser usado como referencia para ayudar al manejo de futuros incidentes similares.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Uso de la informaci\u00f3n recolectada : El estudio de las caracter\u00edsticas del incidente puede revelar la existencia de vulnerabilidades y amenazas sistem\u00e1ticas\\, as\u00ed como cambios en las tendencias de incidentes. Esta informaci\u00f3n puede ser tomada en cuenta para la realizaci\u00f3n del proceso de an\u00e1lisis de riesgos\\, lo que a su vez llevar\u00e1 a selecci\u00f3n e implementaci\u00f3n de controles adicionales.</p> <p>Las organizaciones deben focalizarse en recolectar informaci\u00f3n accionable\\, en lugar de recabar informaci\u00f3n simplemente porque est\u00e1 disponible.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>M\u00e9tricas sugeridas para la recolecci\u00f3n de incidentes son:</p> <p>N\u00famero de incidentes atendidos: Se recomienda enfocarse en los incidentes de mayor relevancia o que necesitaron de un mayor esfuerzo por parte del equipo de respuesta a incidentes para su resoluci\u00f3n.</p> <p>Tiempo utilizado por cada incidente.</p> <p>An\u00e1lisis objetivo de cada incidente: Con esto se puede determinar qu\u00e9 tan efectiva fue la respuesta y resoluci\u00f3n del mismo.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Retenci\u00f3n de la evidencia : Las organizaciones deben establecer una pol\u00edtica para definir por cuanto tiempo se resguardar\u00e1 la evidencia de un incidente. GRS \\(General Records Schedule\\)\\, especifica que los registros de incidentes deben resguardarse por un periodo de 3 a\u00f1os.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#playbook","title":"Playbook","text":"<p>Playbook :  Hace referencia a un documento de instrucciones elaborado por un cuerpo t\u00e9cnico\\, en el que se describen las distintas jugadas que se van a utilziar. Tiene sentido\\, si consideramos la respuesta a incidentes como un conjunto de acciones a realizar como respuesta al incidente\\, las cuales\\, por cierto\\, deben estar en perfecta sincronizaci\u00f3n dentro de la organizaci\u00f3n. Estas acciones est\u00e1n centradas en dar respuesta a un incidente concreto.</p> <p></p> <p>Un  SOC  con un  playbook  tiene la ventaja de poder centrarse solo en las alertas que importan\\, y en las  acciones muy dirigidas a solucionar el problema .</p> <p>El prop\u00f3sito de un playbook es proporcionar a todos los miembros de una organizaci\u00f3n una  clara comprensi\u00f3n de sus responsabilidades  respecto de las normas de ciberseguridad y las pr\u00e1cticas aceptadas antes\\, durante y despu\u00e9s de un incidente de seguridad.</p> <p>Todas las organizaciones tienen planes para diferentes incidentes que podr\u00edan afectar la resistencia del negocio si no est\u00e1n preparados.</p> <p>Una vez que el equipo de respuesta a incidentes est\u00e1 definido y es consciente de su posici\u00f3n\\, es necesario poner en marcha  los pasos clave de acci\u00f3n de un incidente de ciberseguridad . Estos incluyen</p> <p>Detecci\u00f3n de incidentes</p> <p>Acciones de respuesta</p> <p>Comunicaci\u00f3n</p> <p>Es un\u00e1nime en distintos organismos internacionales la necesidad de al menos  contar Playbook para los casos m\u00e1s conocidos de Ciberataques .</p> <p></p> <p>Preparaci\u00f3n : \u201cTodo lo necesario para ejecutar el playbook\u201d</p> <p>Identificaci\u00f3n : \u201cRecopilaci\u00f3n y an\u00e1lisis de toda la informaci\u00f3n relativa al incidente\u201d</p> <p>Contenci\u00f3n : \u201cAcciones inmediata para contener el incidente ej: Aislar de la red el equipo\u201d</p> <p>Remedio : \u201cAcciones que reparar el da\u00f1o y eviten su repetici\u00f3n\u201d</p> <p>Recuperaci\u00f3n : \u201cAcciones para restablecer el servicio\u201d</p> <p>Repercusiones : \u201cDeber\u00eda de redactarse un informe de crisis que ser\u00e1 distribuido entre todos los stakeholders\u201d</p> <p>Mejora continua : \u201cComo respondemos mejor\u201d</p> <p>\u00bfQu\u00e9 playbook necesita mi empresa?\\, b\u00e1sicamente deben conversar con su matriz de riesgos que contemple Ciberriesgos y est\u00e9 acorde al giro del negocio.</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ejemplo-playbook","title":"Ejemplo Playbook","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#ejemplo-playbook-ejemplo-de-infeccion-de-gusanos","title":"Ejemplo Playbook: Ejemplo de infecci\u00f3n de gusanos","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.avsoftware.com.mx/respuesta-a-incidentes-de-ciberseguridad-guia-de-nist/#1603043331556-26ebd2a3-9ac2</p> <p>https://blog.netdatanetworks.com/que-hacer-en-caso-de-un-ciberataque</p> <p>https://playbooks.flexibleir.com/</p>"},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#actividad","title":"Actividad","text":""},{"location":"section2/u04/teoria/IS-U4.1.1.-PlanesDeRespuesta/#actividad-i","title":"Actividad I","text":"<p>Traducir la plantilla en castellano:</p> <p>https://github.com/IES-Rafael-Alberti/incident-response-plan-plantilla</p> <p>Crear un plan de respuesta a incidentes partiendo de la plantilla.</p> <p>Crear e incorporar un conjunto de playbook b\u00e1sicos.</p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/","title":"IS U4.3.1. Ciberresiliencia","text":"<p>Ciberresiliencia</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#ra4","title":"RA4","text":"<p>b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n,   prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p> <p> working in progress </p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#indice","title":"\u00cdNDICE","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#ciberresiliencia","title":"Ciberresiliencia","text":"<p>Resiliencia \\, seg\u00fan RAE : En psicolog\u00eda\\, capacidad que tiene una persona para superar circunstancias traum\u00e1ticas como la muerte de un ser querido\\, un accidente\\, etc.</p> <p>Resiliencia empresarial : se trata de la capacidad de una empresa para afrontar adversidades y recuperar su estado inicial. Esto pone de manifiesto la fortaleza de una organizaci\u00f3n para adaptarse a los cambios.</p> <p>Cuando la empresa entra en el terreno digital\\, surge la  ciberresiliencia</p> <p>Tal y como define el Instituto Nacional de Ciberseguridad \\(INCIBE\\)\\, la  ciberresiliencia  es:</p> <p>_ \"La capacidad para resistir\\, proteger y defender el uso del ciberespacio de los atacantes\"._</p> <p></p> <p>Es muy com\u00fan confundir conceptos como ciberseguridad y ciberresiliencia. Aunque el enfoque es similar\\, los procesos difieren entre s\u00ed. Estas son las principales diferencias:</p> <p>Ciberseguridad : conjunto de tecnolog\u00edas inform\u00e1ticas y medidas preventivas destinadas a  proteger la empresa ante cualquier brecha de seguridad \\, ya sea robo de datos o acceso a la red corporativa. Por ejemplo\\, el cifrado de datos.</p> <p>Ciberresiliencia : este concepto unifica la tecnolog\u00eda de ciberseguridad y la resiliencia empresarial con el objetivo de gestionar un ciberataque sin fallos y\\, sobre todo\\,  ofrecer continuidad del negocio ante un ataque .</p> <p> \u201c  _El mundo nos rompe a todos... _ </p> <p> despu\u00e9s algunos son fuertes en los lugares rotos. </p> <p>Ernest Hemingway</p> <p>\u00bfCausas por las que una empresa no es todo lo resiliente que desear\u00eda ante un ciberatque?</p> <p></p> <p>Las empresas\\, en general  est\u00e1n poco preparadas  para resistir frente a este tipo de ataques\\, debido principalmente a:</p> <p>Falta de medida s t\u00e9cnicas para mitigarlos\\,</p> <p>Poca preparaci\u00f3n  de los sistemas para detener este tipo de ataques\\,</p> <p>Falta de formaci\u00f3n o de recursos  para hacerles frente o</p> <p>Falta de pruebas  para evaluar la capacidad real de la organizaci\u00f3n ante cualquier tipo de ataque externo.</p> <p>La mayor\u00eda de organizaciones no est\u00e1n cien por cien preparadas para afrontar ataques inform\u00e1ticos. Esto puede ser por diversas razones:</p> <p>Una  cultura  organizacional que no se centra en la ciberseguridad.</p> <p>Falta de  inversi\u00f3n  en tecnolog\u00edas espec\u00edficas para la detecci\u00f3n y prevenci\u00f3n de malwares.</p> <p>Falta de  formaci\u00f3n  en ciberseguridad.</p> <p>\u00bfQue necesitamos para conseguir ser resilientes?</p> <p></p> <p>Las organizaciones deben estar  preparadas para</p> <p>dar respuestas r\u00e1pidas a este tipo de ataques\\, permitiendo que los servicios que prestan no se vean interrumpidos\\,</p> <p>__fortaleciendo sus capacidades __ de</p> <p>identificaci\u00f3n\\, detecci\u00f3n\\, prevenci\u00f3n\\, contenci\u00f3n\\, recuperaci\u00f3n\\, cooperaci\u00f3n y mejora continua contra las ciberamenazas.</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#pasos","title":"Pasos","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#implementar-la-ciberresiliencia","title":"Implementar la ciberresiliencia","text":"<p>\u00bfC\u00f3mo implementar la ciberresiliencia?</p> <p>Dada la diversidad de las organizaciones\\, su complejidad interna y las interdependencias entre ellas\\, no se puede generalizar una forma de implementar la ciberresiliencia.</p> <p>En cualquier caso\\, es fundamental iniciar un proceso de adaptaci\u00f3n y considerar que se debe extender a todo nuestro ecosistema \\(partners\\, proveedores\\, clientes\\,\u2026\\).</p> <p>Se deben establecer los siguientes pasos:</p> <p>Priorizar  los  servicios \\, seg\u00fan el  impacto \\(econ\u00f3mico\\, medioambiental\\, p\u00fablico y social\\, personas afectadas\\) que su p\u00e9rdida o deterioro pueda ocasionar.</p> <p>Conocer y priorizar  seg\u00fan su  criticidad  las  amenazas  que afectan a los servicios.</p> <p>Implementar  acciones preventivas  contra actuales y futuras amenazas.</p> <p>Desarrollar  procesos de remediaci\u00f3n  para minimizar el da\u00f1o que pueden producir los incidentes.</p> <p>__Detectar vulnerabilidades __ continuamente y remediarlas para reducir la superficie de ataque.</p> <p>Desarrollar y mantener procesos de comunicaci\u00f3n  dentro de la empresa.</p> <p>Ejecutar constantemente  __acciones de mejora __ que minimicen los riesgos\\, y repetir el ciclo de pasos para la mejora continua.</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#analisis-de-evidencias-e-investigacion-del-incidente","title":"An\u00e1lisis de evidencias e investigaci\u00f3n del incidente","text":"<p>5. Recuperaci\u00f3n</p> <p></p> <p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#pasos_1","title":"Pasos","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#identificacion-de-activos","title":"Identificaci\u00f3n de activos","text":"<p>Un m\u00e9todo de clasificaci\u00f3n de activos que simplifica el proceso consiste en dividirlos en 6 categor\u00edas diferentes\\, tal y como se muestra en la imagen.</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe.es/protege-tu-empresa/blog/ciberresiliencia-marco-medicion</p> <p>https://www.incibe.es/extfrontinteco/img/File/Estudios/int_ciber_resiliencia_marco_medicion.pdf</p> <p>https://www.incibe-cert.es/blog/ciberresiliencia-clave-sobreponerse-los-incidentes</p> <p>https://agenciab12.com/noticia/que-es-ciberresiliencia-como-influye-seguridad</p> <p>https://agenciab12.com/noticia/medidas-prevencion-ciberataque</p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#actividad","title":"Actividad","text":""},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#actividad-ii","title":"Actividad II","text":"<p>Recopilaci\u00f3n y an\u00e1lisis de evidencias sobre un incidente:</p> <p> 3.abc.01 - Recolecci\u00f3n\\, almacenamiento y an\u00e1lisis </p> <p></p>"},{"location":"section2/u04/teoria/IS-U4.3.1.-Ciberresiliencia/#_1","title":"IS U4.3.1. Ciberresiliencia","text":""},{"location":"section2/u05/","title":"UD 5 - Implemetaci\u00f3n de medidas","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 4 - Implementaci\u00f3n de medidas de ciberseguridad:</p> <ul> <li>Desarrollar procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes.</li> <li>Implantar capacidades de ciberresiliencia.</li> <li>Establecer flujos de toma de decisiones y escalado interno y/o externo adecuados.</li> <li>Tareas para reestablecer los servicios afectados por incidentes.</li> <li>Documentaci\u00f3n</li> <li>Seguimiento de incidentes para evitar una situaci\u00f3n similar.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 4. Implementa medidas de ciberseguridad en redes y sistemas respondiendo a los incidentes detectados y aplicando las t\u00e9cnicas de protecci\u00f3n adecuadas</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han desarrollado procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes de ciberseguridad m\u00e1s habituales.</li> <li>b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n, prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</li> <li>c) Se ha establecido un flujo de toma de decisiones y escalado de incidentes interno y/o externo adecuados.</li> <li>d) Se han llevado a cabo las tareas de restablecimiento de los servicios afectados por un incidente hasta confirmar la vuelta a la normalidad.</li> <li>e) Se han documentado las acciones realizadas y las conclusiones que permitan mantener un registro de \u201clecciones aprendidas\u201d.</li> <li>f) Se ha realizado un seguimiento adecuado del incidente para evitar que una situaci\u00f3n similar se vuelva a repetir.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: se pueden desarrollar procedimientos de actuaci\u00f3n bas\u00e1ndonos en los que nos ofrece Incibe en los siguientes casos. Con este juego el alumnado puede trabajar posibles incidentes y desarrollar a partir de ellos sus soluciones.</li> <li>Criterio de evaluaci\u00f3n e: se puede montar una herramienta de ticketing, como FIR, para llevar el control de los incidentes, desde su origen hasta su resoluci\u00f3n. Se puede usar una herramienta como DFIRTrack para llevar las evidencias y artefactos de los incidentes de ciberseguridad.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/","title":"IS U5.1.0. RespuestaAIncidentes","text":""},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#planes-de-respuesta","title":"Planes de respuesta","text":"<p>RA4</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>El curso se trabaja sobre los problemas que debe de hacer frente un profesional que desarrolle su carrera en un equipo de CSIRT con objeto de dar respuesta a un incidente de seguridad (IR). Cuando se produce un incidente de seguridad desde el CIO de la organizaci\u00f3n hasta la persona que est\u00e1 recolectando las evidencias deben de estar coordinadas durante todo el proceso. Una respuesta ante un incidente hoy requiere que todos los recursos y empleados de la organizaci\u00f3n, medios de comunicaciones, marketing est\u00e9n alineados. Durante el curso se ver\u00e1n y se dar\u00e1n respuesta a las siguientes premisas:</p> <ul> <li>Entender que es un proceso IR</li> <li>Como construir un equipo de respuesta de forma satisfactoria</li> <li>Que tipo de infraestructura necesita un equipo de respuesta de incidentes</li> <li>Casos pr\u00e1cticos de ataques en tiempo real bajo la plataforma de iHackLabs</li> <li>Liderar la investigaci\u00f3n de los incidentes</li> <li>Recolectar y manejar las evidencias</li> <li>Analizar Evidencias en Windows y MAC</li> <li>Observar y analizar Malware</li> <li>Escribir reportes</li> </ul> <p>Un cambio est\u00e1 sucediendo en toda la industria de la ciberseguridad tanto en la parte de pentesters como los especialistas en ciberseguridad. Desde el punto de vista de ciberseguridad la respuesta de incidentes se ha  convertido en un componente importante de la tecnolog\u00eda de la informaci\u00f3n IT. Los ataques se han vuelto no solo m\u00e1s numerosos y diversos, sino que adem\u00e1s son cada vez m\u00e1s peligrosos y da\u00f1inos aumentando su frecuencia de forma preocupante.</p> <p>Es importante entender que no todos los incidentes pueden ser prevenidos, pero disponer de la capacidad de detectar incidentes de forma r\u00e1pida y minimizar la perdida y destrucci\u00f3n de los datos de una organizaci\u00f3n mitigando de esta manera las debilidades que han sido explotadas son tareas que se desarrollan en un grupo CSIRT.</p> <p>Podremos ver el correcto desarrollo de las pautas para dar una respuesta clara y adecuada a cada incidente de seguridad.</p> <p>Debido a que la respuesta de incidentes es un proceso complejo se requiere de practicar y simular incidentes de ciberseguridad dentro de las organizaciones. Adem\u00e1s, los equipos de incidentes de repuesta requieren una vigilancia constante de los procesos internos y externos de la organizaci\u00f3n. Del mismo es vital dise\u00f1ar un plan de comunicaci\u00f3n interno que agilice el proceso y la toma de decisiones ante un incidente. El centro de Recursos y seguridad de las computadoras CSRC del instituto de est\u00e1ndares y tecnolog\u00edas NIST ha desarrollado una serie de gu\u00edas sobre estos eventos.</p> <p>Un gran n\u00famero de gobiernos, agencias, socios de otras organizaciones, contractos dan soporte a la gu\u00eda 800-61r2 de NIST.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#2-que-es-un-incidente","title":"2. \u00bfQu\u00e9 es un incidente?","text":"<p>Para entender que es un incidente, es necesario explicar que es un evento.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#que-es-un-evento","title":"\u00bfQu\u00e9 es un evento?","text":"<p>Cualquier ocurrencia detectada o informada que indique una posible violaci\u00f3n o falla en un sistema. Un evento es una situaci\u00f3n de inter\u00e9s en cuanto a la seguridad y podr\u00eda se\u00f1alar o indicar que algo de importancia est\u00e1 o puede suceder en el sistema.</p> <p>Ejemplos de eventos:</p> <ul> <li>Servicios mal configurados.</li> <li>Sistemas con claves conocidas.</li> <li>Conexiones no autorizadas a un sistema.</li> <li>Fallas en el funcionamiento de un servicio.</li> <li>Notificaci\u00f3n de accesos no autorizados.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#que-es-un-incidente","title":"\u00bfQu\u00e9 es un incidente?","text":"<p>Un incidente es un evento inesperado o no deseado que puede impactar o impacta a la red o los sistemas de una instituci\u00f3n de forma que pueda comprometer la confidencialidad de la informaci\u00f3n, la estabilidad del servicio o la integridad de estos.</p> <p>Ejemplos de incidentes</p> <ul> <li>Amenazas a la seguridad f\u00edsica de seres humanos.</li> <li>Ataques a Sistemas de manejo de informaci\u00f3n o cualquier parte de la infraestructura de red del backbone del CEDIA.</li> <li>Ataques a cualquier gran equipo de servicio p\u00fablico, sea multiusuario o con prop\u00f3sito dedicado.</li> <li>Compromiso de informaci\u00f3n en cuentas restringidas confidenciales o instalaciones de software, en particular aquellas usadas para sistemas de administraci\u00f3n que contengan informaci\u00f3n confidencial, o aquellos usuarios para administraci\u00f3n del sistema.</li> <li>Ataques de negaci\u00f3n de servicio sobre cualquiera de los 3 puntos anteriores.</li> <li>Ataques en gran escala de cualquier tipo.</li> <li>Amenazas, acoso y cualquier otra ofensa criminal en el que est\u00e9n involucradas cuentas de usuario.</li> <li>Compromiso de cuentas de usuarios individuales en sistemas multiusuarios.</li> <li>Compromiso de sistemas de escritorio.</li> <li>Falsificaci\u00f3n y suplantaci\u00f3n y cualquier otra violaci\u00f3n de reglas locales y regulaciones.</li> <li>Negaci\u00f3n de servicio en cuentas de usuario individuales.</li> </ul> <p>Otra forma de ver que es un incidente se establece en base al alcance de lo que el personal de la organizaci\u00f3n es capaz de realizar y de las medidas que se toman para ello. Desde el punto de vista de definici\u00f3n se establece la premisa de que el personal entienden y saben cu\u00e1les son las responsabilidades de cada equipo. Para ello, la organizaci\u00f3n dispondr\u00e1 de una pol\u00edtica que defina cu\u00e1les son las responsabilidades de cada equipo, y si no existe, se deber\u00eda de crear una a la mayor brevedad. Es importante entender que no existe una pol\u00edtica universal, pero deber\u00edamos de considerar los siguientes puntos cuando dise\u00f1emos una:</p> <ul> <li>Intento de causar da\u00f1o.</li> <li>Fue realizado por una persona.</li> <li>Implica un recurso inform\u00e1tico.</li> </ul> <p>Los dos primeros son consistentes con muchos tipos de incidentes que no tienen que ver con la tecnolog\u00eda, tales como asaltos, robos o incendios provocados, aunque si no hay intento de causar da\u00f1o, tambi\u00e9n se consideran incidente. Por ejemplo, y algo m\u00e1s tecnol\u00f3gico, ser\u00eda un an\u00e1lisis de vulnerabilidades que no tienen como intenci\u00f3n hacer da\u00f1o, sin embargo, aunque no intencionado, podr\u00eda provocar un incidente en alg\u00fan sistema.</p> <p>El tercer punto requiere de una persona evalu\u00e9 y excluya todos los eventos que son fallos aleatorios y que est\u00e1n fuera de nuestro control. Por ejemplo, un firewall se apague de forma inmediata por un fallo de corriente y deje sin servicio a varias aplicaciones cr\u00edticas de la organizaci\u00f3n.</p> <p>Algunos de los incidentes que est\u00e1n relacionados con ordenadores o dispositivos tecnol\u00f3gicos serian los siguientes:</p> <ul> <li>Datos robados, incluyendo datos sensibles, email y documentos.</li> <li>Robo de fondos, incluyendo datos de acceso, tarjetas de cr\u00e9dito.</li> <li>Extorsi\u00f3n.</li> <li>Accesos no autorizados a ordenadores o servidores.</li> <li>Presencia de malware, incluyendo acceso remoto o spyware.</li> <li>Posesi\u00f3n ilegal o no autorizados de materiales.</li> </ul> <p>El impacto de estos incidentes podr\u00eda ir desde tener que reconfigurar algunos dispositivos o reemplazarlos, hasta tener que gastar una gran cantidad de dinero en remediar el problema, hasta incluso que la empresa tenga que disolverse. Las decisiones que tome, antes, durante y despu\u00e9s de que ocurra un incidente afectar\u00e1n directamente el impacto global.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#3-contexto-de-la-respuesta-a-un-incidente","title":"3. Contexto de la respuesta a un incidente","text":""},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#31-que-es-la-respuesta-a-incidente","title":"3.1 \u00bfQu\u00e9 es la respuesta a incidente?","text":"<p>La respuesta de incidentes es la coordinaci\u00f3n, estructuraci\u00f3n y resoluci\u00f3n de un incidente detectado. A modo resumido podr\u00edamos definirlo en los siguientes puntos de m\u00e1s abajo:</p> <ul> <li>Confirmar d\u00f3nde y c\u00f3mo ha sucedido el incidente y si este realmente ha sucedido o se trata de un falso positivo.</li> <li>Proveer de una r\u00e1pida detecci\u00f3n y sobre todo contenci\u00f3n.</li> <li>Determinar y documentar el alcance del incidente (si se han producido da\u00f1os, de que tipo, si se han producido perdidas monetarias etc.)</li> <li>Prevenir una respuesta sin sentido o que no est\u00e9 bien documentada.</li> <li>Determinar y promover los hechos que se han producido y actuar en consecuencia con la informaci\u00f3n obtenida.</li> <li>Minimizar la perdida de negocio y las operaciones normales de una organizaci\u00f3n.</li> <li>Restaurar las operaciones normales.</li> <li>Minimizar los da\u00f1os ocasiones sobre los componentes que fueron comprometidos.</li> <li>Administrar la percepci\u00f3n del incidente p\u00fablicamente en caso de ser necesario, para no impactar en la credibilidad y confianza de nuestros clientes.</li> <li>Tomar acciones criminales o acciones civiles contra los autores que provocaron el incidente.</li> <li>Formar y realizar ejercicios de simulaci\u00f3n con los equipos de respuesta de incidentes</li> </ul> <p>Por lo general la respuesta de incidentes consiste en investigar que ha ocurrido y evaluar los da\u00f1os producidos. Un equipo de remediaci\u00f3n elimina las amenazas de un atacante sobre el entorno y gestiona las comunicaciones a empleados de la compa\u00f1\u00eda, socios, publicas etc.</p> <p>Todas las respuestas a un incidente se gestionan a trav\u00e9s de una metodolog\u00eda que envuelve el tiempo de los ataques, los da\u00f1os ocasionados, el grado de compromiso que ha sufrido la organizaci\u00f3n entre otros puntos.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#32-objetivos-de-la-respuesta-de-incidentes","title":"3.2 \u00bfObjetivos de la respuesta de incidentes?","text":"<p>El primer objetivo de una respuesta ante un incidente es eliminar de forma efectiva la amenaza de la organizaci\u00f3n y del entorno, del mismo modo minimizar los da\u00f1os y restaurar las operaciones lo m\u00e1s r\u00e1pido posible. Este objetivo se realiza a trav\u00e9s de las siguientes actividades:</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#investigacion","title":"Investigaci\u00f3n.","text":"<ul> <li>Determinar el vector de ataque inicial.</li> <li>Determinar el malware y las herramientas a utilizar.</li> <li>Determinar qu\u00e9 sistemas fueron infectados y c\u00f3mo.</li> <li>Determinar qu\u00e9 tipo de ataque sofisticado se ha sufrido y los da\u00f1os producidos.</li> <li>Determinar si el incidente contin\u00faa abierto.</li> <li>Establecer un tiempo de inicio y final del incidente.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#remediacion","title":"Remediaci\u00f3n.","text":"<p>Usando la informaci\u00f3n obtenida de la investigaci\u00f3n, desarrollar e implementar un plan de remediaci\u00f3n.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#32-como-se-produce-un-incidente","title":"3.2 \u00bfC\u00f3mo se produce un incidente?","text":"<p>Aunque trabajamos en ayudar a las organizaciones a trav\u00e9s de pentest continuos en detectar las brechas de seguridad en sus infraestructuras este tipo de test tienen una carencia frente a un atacante real debido a que este \u00faltimo dispone de un tiempo infinito para buscar, localizar e incluso explotar una vulnerabilidad con \u00e9xito. Todos los sectores conectados a internet sufren hoy en d\u00eda ataques constantes independientemente del sector que sean o se dediquen.</p> <p>Todos los criminales que se dedican a extorsionar o robar informaci\u00f3n a trav\u00e9s de ataques cibern\u00e9ticos se exponen poco o apenas asumen riesgos. Debemos recordar que se produzcan incidentes es algo inevitable, pero sin embargo podemos aplicar las lecciones aprendidas sobre los casos que se van produciendo para evitar que vuelvan a ocurrir o incluso actuar con mayor agilidad frente al incidente.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#caso-practico","title":"CASO PRACTICO","text":"<p>De modo que sea m\u00e1s f\u00e1cil de entender como se produce un incidente de seguridad analizaremos y comentaremos el siguiente caso pr\u00e1ctico.</p> <p>Durante varios meses el atacante obtuvo informaci\u00f3n confidencial de diferentes recursos suplementando a los usuarios internos a trav\u00e9s de sus propias cuentas de usuarios que hab\u00edan sido comprometidas. El atacante rompi\u00f3 el cifrado del HASH LM de las cuentas del dominio debido a que la compa\u00f1\u00eda no usaba una pol\u00edtica fuerte de contrase\u00f1as, adem\u00e1s de que los administradores del domino no hab\u00edan deshabilitado un sistema de cifrado que se considera inseguro como LM.</p> <p>Al cabo del tiempo la compa\u00f1\u00eda detecto un volcado de los datos en pastebin y del mismo modo una copia de la base de datos, momento en el que la empresa fue consciente del ataque. Seg\u00fan los an\u00e1lisis forenses el atacante estuvo dentro de la organizaci\u00f3n aproximadamente durante 4 semanas sin ser detectado y sin alertar que se produc\u00eda un comportamiento an\u00f3malo en la red.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#33-concepto-del-ciclo-de-vida-de-un-ataque","title":"3.3 Concepto del ciclo de vida de un ataque","text":"<p>El ciclo de vida de un ataque consiste en siete etapas. Aunque se menciona que sean siete pasos o etapas no siempre es as\u00ed y en ocasiones dependiendo del ataque las etapas puedes variar, sin embargo, como proceso natural un incidente se adapta y debe de ser detectado en las etapas tempranas de un ataque.</p> <p>Este concepto se ha incluido a modo resumen porque es importante entender como un atacante realiza los ataques y porque diferentes fases o etapas podr\u00eda pasar de modo que seg\u00fan el momento se detecte el incidente sepamos el grado o no de compromiso de la organizaci\u00f3n y del mismo modo su impacto. Est\u00e1 informaci\u00f3n es muy interesante cuando estas en la fase de remediaci\u00f3n</p> <p></p> <ol> <li>Compromiso Inicial: Un atacante logra con \u00e9xito ejecutar c\u00f3digo malicioso en uno o m\u00e1s sistemas de la organizaci\u00f3n. Lo habitual es que este primer paso se inicie debido a ingeniera social sobre alg\u00fan usuario de la organizaci\u00f3n a trav\u00e9s de phishing o que haya logrado de forma satisfactoria explotar alguna vulnerabilidad de un portal web. Del mismo modo es posible que el atacante haya logrado explotar con \u00e9xito una vulnerabilidad de software de terceros.</li> <li>Posicionamiento: El atacante logra establecer conexi\u00f3n remota sobre el sistema comprometido, esta fase ocurre inmediatamente despu\u00e9s de la fase de compromiso inicial. Lo habitual es que un atacante establezca una persistencia a trav\u00e9s de una puerta trasera o ejecutando c\u00f3digo binario en el sistema comprometido.</li> <li>Escalar privilegios: El atacante obtiene la manera de elevar los privilegios en los sistemas y por lo tanto dispone de acceso a datos m\u00e1s sensibles. En este paso el atacante realiza diferentes t\u00e9cnicas con el objetivo de lograr acceder a todos los sistemas.</li> <li>Reconocimiento interno: El atacante reconoce el entorno y analiza la configuraci\u00f3n interna de la organizaci\u00f3n para entender mejor su funcionamiento y como lograr acceder a los datos sensibles de los mismos.</li> <li>Movimientos laterales: El atacante salta y pivota en la red buscando sistemas mas cr\u00edticos evadiendo de esta manera las medidas de seguridad de FW o redes en DMZ. Del mismo modo las t\u00e9cnicas m\u00e1s habituales es trav\u00e9s de RDP, VNC, tareas    programadas etc.</li> <li>Mantener Persistencia: El objetivo es instalar servicios ocultos en los sistemas para retomar las conexiones en caso de ser necesario. La persistencia se suele conseguir a trav\u00e9s de VPN, puertas traseras o implementar malware en software legitimo.</li> <li>Ataque exitoso: El atacante ha logrado su objetivo y ha robado los datos de la compa\u00f1\u00eda, ha provocado perdidas internas de informaci\u00f3n o problemas internos. Incluso mantiene un acceso interno para volver a realizar ataques despu\u00e9s de un tiempo.</li> </ol>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#4-el-proceso-que-envuelve-la-respuesta-a-incidentes","title":"4. El proceso que envuelve la respuesta a incidentes","text":"<p>En un proceso IR intervienen varios factores. Las capacidades y recursos de las organizaciones se miden seg\u00fan el n\u00famero de unidades que intervienen en el proceso. Durante un proceso de IR son muchas las compa\u00f1\u00edas que ensamblan equipos compuestos por miembros espec\u00edficos de la organizaci\u00f3n. Siempre se recomienda que sea un miembro quien dirija y coordine durante la respuesta de un incidente. El director habitualmente suele ser un CIO o CISO de la organizaci\u00f3n, esta persona ser\u00eda el punto de conexi\u00f3n entre todas las investigaciones.</p> <p></p> <p>De cualquier modo, es bueno que los miembros que componen un equipo de incidentes durante su intervenci\u00f3n dispongan de las siguientes caracter\u00edsticas:</p> <ul> <li>Tener capacidad de an\u00e1lisis.</li> <li>Buena comunicaci\u00f3n.</li> <li>Atenci\u00f3n a los detalles.</li> <li>Ser estructurados y organizados.</li> <li>Demostrar liderazgo y gran resoluci\u00f3n de problemas.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#41-respuesta-inicial","title":"4.1 Respuesta inicial","text":"<p>Los objetivos principales en este paso incluyen reunir al equipo de respuesta, revisar los datos basados en la red y otros datos f\u00e1cilmente disponibles, determinar el tipo de incidente y evaluar el impacto potencial. El objetivo es reunir suficiente informaci\u00f3n inicial para permitir que el equipo determine la respuesta adecuada.</p> <p>T\u00edpicamente, este paso no implicar\u00e1 recopilar datos directamente del sistema afectado. Los datos examinados durante esta fase usualmente involucran el an\u00e1lisis de la red, el registro y otra evidencia hist\u00f3rica y contextual. Esta informaci\u00f3n le brindar\u00e1 el contexto necesario para ayudar a decidir la respuesta adecuada. Por ejemplo, si se encuentra un troyano bancario en la port\u00e1til del CEO, su respuesta probablemente ser\u00e1 bastante diferente de si se encuentra en el sistema de una recepcionista. Adem\u00e1s, se requiere una investigaci\u00f3n completa, esta informaci\u00f3n ser\u00e1 parte de las pistas iniciales.</p> <p>Algunas tareas comunes que puede realizar durante este paso son:</p> <ul> <li>Entrevistar a la persona que report\u00f3 el problema y recopilar y almacenar todos los posibles detalles que ellos puedan proveerte.</li> <li>Intervenir los equipos de IT, de modo que se revisen los detalles t\u00e9cnicos.</li> <li>Intervenir al personal de negocio y reportar el evento en su contexto y dependiendo de la gravedad.</li> <li>Revisar la red, logs, e identificar qu\u00e9 datos son necesarios para el soporte y la revisi\u00f3n posterior.</li> <li>Documentar todo el procedimiento y detalles recogidos de diferentes fuentes.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#42-investigacion","title":"4.2 Investigaci\u00f3n","text":"<p>El objetivo de una investigaci\u00f3n es determinar los hechos que describen qu\u00e9 sucedi\u00f3, c\u00f3mo sucedi\u00f3, y en algunos casos, qui\u00e9n fue el responsable, aunque este punto puede ser dif\u00edcil de conseguir. En este momento puede ser interesante plantearse contratar ayuda externa.</p> <p>Sin conocer los hechos de lo ocurrido tales como qu\u00e9 acceso obtuvo el atacante o lo que hizo, el equipo no est\u00e1 en una buena posici\u00f3n para pasar a la fase de remediaci\u00f3n.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#indicadores-de-compromiso","title":"Indicadores de compromiso","text":"<p>Una investigaci\u00f3n sin pistas es un proceso perdido. Por lo tanto, la colecci\u00f3n de pistas iniciales es un paso cr\u00edtico en cualquier investigaci\u00f3n. Un error de investigaci\u00f3n com\u00fan en muchas organizaciones es enfocarse solo en encontrar malware.</p> <p>Es poco probable que solo un atacante tenga como objetivo instalar malware, lo m\u00e1s probable es que el atacante tenga en mente robar informaci\u00f3n confidencial, correos o documentos internos o incluso alterar datos.</p> <p>Una vez que el atacante accede a la red y tiene credenciales v\u00e1lidas no es necesario que use malware para acceder a sistemas adicionales. Centrarse solo en el malware probablemente cause que se pierdan hallazgos cr\u00edticos. Recuerde, el foco de cualquier investigaci\u00f3n debe estar en las pistas.</p> <p></p> <p>La creaci\u00f3n de indicadores de compromiso (IOCs) (pronunciado eye-oh-cee) es el proceso de documentar las caracter\u00edsticas y detalles de un incidente de una manera estructurada. Esto incluye todo, desde ambas perspectivas tanto desde el punto de vista de servidor como de red: cosas que van m\u00e1s all\u00e1 del simple malware. Piense en detalles tales eventos de inicio de sesi\u00f3n, mecanismos de persistencia detectados, nombres de dominio e incluso firmas de protocolo de red de malware.</p> <p>El objetivo de los indicadores de compromiso (IOCs) es ayudar a describir, comunicar y encontrar indicios relacionados con un incidente. Debido a que un COI es solo una definici\u00f3n, no proporciona el mecanismo real para encontrar coincidencias.</p> <p>El uso de indicadores de compromiso (IOC) para documentar incidentes es excelente, pero su poder real est\u00e1 en habilitar equipos de RI. El \u00e9xito de una investigaci\u00f3n depende de su capacidad para buscar IOC en toda la empresa e informar sobre ellos de manera autom\u00e1tica, a esto se le llama despliegue de IOC.</p> <p>Despu\u00e9s de implementar los indicadores de compromiso IOC, comenzar\u00e1 a obtener lo que se conoce como detecci\u00f3n. La detecci\u00f3n se produce cuando una herramienta de indicadores de compromiso encuentra una coincidencia para una regla dada.</p> <p>Antes de actuar se debe de revisar la informaci\u00f3n para determinar si no se trata de un falso positivo.</p> <p>Una vez que se identifican los sistemas y tienen indicadores de compromiso activos, el pr\u00f3ximo paso es recopilar datos adicionales para el an\u00e1lisis. El equipo RI crear\u00e1 un plan para recolectar y preservar las evidencias. El factor prioritario es preservar las evidencias y para ello se utilizan procesos que minimicen los cambios del sistema, minimizamos el tiempo de interacci\u00f3n con los equipos y sistemas, sin olvidar de crear la documentaci\u00f3n necesaria. Puede recopilar evidencias del sistema en ejecuci\u00f3n o decidir apagar el sistema y tomar las evidencias con el sistema apagado.</p> <p>La respuesta en vivo es el proceso de recolecci\u00f3n de evidencia m\u00e1s com\u00fan. Una respuesta en vivo es el proceso de usar una herramienta automatizada para recopilar un conjunto est\u00e1ndar de datos sobre un sistema en ejecuci\u00f3n. Los datos incluye tanto informaci\u00f3n vol\u00e1til como no vol\u00e1til que proporcionar\u00e1 r\u00e1pidamente respuestas a preguntas de investigaci\u00f3n. La informaci\u00f3n t\u00edpica recopilada incluye elementos tales como una lista de procesos, conexiones de red activas, registros de eventos, una lista de objetos en un sistema de archivos y el contenido del registro. Tambi\u00e9n podemos recoger el contenido de archivos espec\u00edficos, como archivos de registro o malware sospechoso. Ya que el proceso estar\u00e1 automatizado y el tama\u00f1o de los datos no es demasiado grande, realizamos este tipo de paso en todos los sistemas de inter\u00e9s. Un an\u00e1lisis de respuesta en vivo usualmente ser\u00e1 capaz de confirmar a\u00fan m\u00e1s un compromiso, proporcionar detalles adicionales sobre lo que atacante hizo en el sistema y revela pistas adicionales para investigar.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#preservar-la-evidencia","title":"Preservar la evidencia","text":"<ul> <li>Recolecci\u00f3n de memoria: La recolecci\u00f3n de memoria es m\u00e1s \u00fatil en los casos en que se sospecha que el atacante est\u00e1 utilizando un mecanismo para ocultar sus actividades, tales como un rootkit, y no puede obtener una imagen de disco. La memoria tambi\u00e9n es \u00fatil para casos donde la actividad maliciosa solo reside en la memoria, o deja muy pocos rastros en el disco. En la mayor\u00eda de los sistemas a los que respondemos, la memoria no es recogida, sin embargo. Aunque algunos pueden encontrar esto sorprendente, hemos encontrado que analizar la memoria tiene beneficios limitados para una investigaci\u00f3n que tienen que ser complementados con otros datos, ya que no proporciona datos suficientes para responder preguntas de alto nivel. Aunque es posible que puedas identificar que el malware se est\u00e1 ejecutando en un sistema, es probable que no pueda explicar c\u00f3mo lleg\u00f3 all\u00ed, o qu\u00e9 ha estado haciendo el atacante en ese sistema.</li> <li>Imagen de disco: Las im\u00e1genes de disco forense son duplicaciones completas de discos duros en un sistema. Durante una respuesta a un incidente, es com\u00fan para nosotros recoger im\u00e1genes en un modo \"en vivo\", donde el sistema no se desconecta y nosotros creamos una imagen en medios externos. Debido a que las im\u00e1genes de disco son grandes y pueden tomar mucho tiempo para analizar, normalmente los recopilamos solo para situaciones donde cree que una imagen de disco es necesaria para proporcionar beneficios a la investigaci\u00f3n. Las im\u00e1genes del disco forense son \u00fatiles en los casos en que un atacante realiz\u00f3 muchas acciones durante un largo tiempo, cuando hay preguntas sin respuesta que otras evidencias no concluyeron, o donde esperamos recuperar informaci\u00f3n que creemos que solo estar\u00e1 disponible desde una imagen de disco.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#analizar-los-datos","title":"Analizar los datos","text":"<p>El an\u00e1lisis de datos es el proceso de tomar la evidencia preservada en el paso anterior y realizar un examen que se centra en responder las preguntas de investigaci\u00f3n. Los resultados del an\u00e1lisis normalmente se documentan en un informe formal.</p> <p>Este paso en el ciclo de vida de respuesta de incidente es donde solemos pasar la mayor parte de nuestro tiempo. La organizaci\u00f3n debe decidir qu\u00e9 an\u00e1lisis realizar\u00e1 usted mismo y qu\u00e9 porciones, o valorar subcontratar si no se posee los conocimientos para ello.</p> <p>Hay tres \u00e1reas principales dentro del an\u00e1lisis de datos:</p> <ol> <li>An\u00e1lisis de malware: Durante la mayor\u00eda de las investigaciones, encontramos archivos que son sospecha de malware. Lo habitual es que un equipo dedicado de analistas de malware examina estos archivos. Realicen informes que incluyen indicadores de compromiso y una descripci\u00f3n detallada de la funcionalidad. Aunque disponer de un equipo de malware especializado no se ajusta a la mayor\u00eda de los presupuestos, las organizaciones deber\u00edan considerar invertir en una capacidad b\u00e1sica para clasificar malware sospechoso.</li> <li>An\u00e1lisis de respuesta en vivo: El examen de los datos de respuesta en vivo es uno de los pasos de an\u00e1lisis m\u00e1s cr\u00edticos durante una investigaci\u00f3n. Si est\u00e1s viendo en vivo datos de respuesta, normalmente es porque hay alg\u00fan indicio de actividad sospechosa en un sistema, pero hay detalles limitados. Durante el an\u00e1lisis se debe de intentar encontrar el origen y explicar qu\u00e9 sucedi\u00f3. Si se pierden detalles en esta etapa, podr\u00eda ser que se pase por alto una parte de la actividad del atacante en el resultado final. Los resultados del an\u00e1lisis de respuesta en vivo deber\u00edan ayudar a comprender el impacto que tiene el incidente.</li> <li>Examen forense: Capturar im\u00e1genes de disco durante una respuesta a incidentes es una tarea muy enfocada y sensible al    tiempo. Normalmente deseamos dar resultados un pu\u00f1ado de preguntas realistas que queremos responder, por lo tanto, se    debe de decidir sobre un enfoque que pueda descubrir informaci\u00f3n que responder y luego ejecutar. Si no obtenemos    respuestas, podemos usar un enfoque personal, pero eso depende de cu\u00e1nto tiempo hay y qu\u00e9 esperamos obtener de ello</li> </ol>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#remediar-el-problema","title":"Remediar el problema","text":"<p>Los planes de remediaci\u00f3n variar\u00e1n enormemente, dependiendo de las circunstancias del incidente y el potencial impacto. El plan deber\u00e1 tener en cuenta diversos factores, tales como situaci\u00f3nes legales, comerciales, pol\u00edticas y t\u00e9cnicas. El plan tambi\u00e9n deber\u00eda incluir un protocolo de comunicaci\u00f3n que defina qui\u00e9n en la organizaci\u00f3n dir\u00e1 qu\u00e9, y cu\u00e1ndo.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#seguimiento-de-la-investigacion","title":"Seguimiento de la investigaci\u00f3n","text":"<p>Debe estar definido y ser un procedimiento claro. Durante la fase de investigacion se debe tener mecanismos que permitan rastrear f\u00e1cilmente la informaci\u00f3n cr\u00edtica, asi como compartirla con otros equipos auxiliares y el resto de la organizaci\u00f3n, de modo claro y con liderazgo.</p> <p>Debe de haber un sistema que permita, a traves de un identificador, referirse a un incidente espec\u00edfico, del mismo modo debe permitir  documentar cualquier informaci\u00f3n y evidencia relacionada con un incidente especifico.</p> <ul> <li>Lista de evidencias recolectadas.</li> <li>Lista de sistemas afectados.</li> <li>Lista de todos los ficheros que son de interes.</li> <li>Lista de los datos que se han accedido o robado.</li> <li>Lista de la actividad del atacante.</li> <li>Lista de la red basada en indicadores de compromiso.</li> <li>Lista de host basados en indicadores de compromiso.</li> <li>Lista de cuentas comprometidas.</li> <li>Lista de tareas y quien las ha respondido durante el incidente.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#reporting","title":"Reporting","text":"<p>Como consultores, nuestros informes son fundamentales para nuestros clientes. El desarrollo y la creaci\u00f3n de un informe requiere de tiempo, no es algo trivial y es algo que debemos tener en cuenta durante todo el proceso de investigaci\u00f3n, ya que durante esta fase se descubrir\u00e1n muchos hechos que deber\u00e1n quedar reflejados en el informe.</p> <p>Durante las investigaciones, los hallazgos se basan en numerosos hechos t\u00e9cnicos que, sin la documentaci\u00f3n adecuada, puede ser dif\u00edcil de comunicar. Por tanto, hay que considerar los informes como un entregable final que los equipos de respuesta de incidentes tienen que desarrollar. Los informes no solo proporcionan los resultados documentados consecuencia del esfuerzo realizado, sino que tambi\u00e9n ayudan a focalizar el proceso de investigacion y a realizar investigaciones de calidad. Los informes obligan a reducir la velocidad del proceso de investigacion, documentar los hallazgos en formato estructurado, verificando las evidencias y repasando en lo que sucedi\u00f3.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#preparando-la-gestion-de-los-incidentes","title":"Preparando la gestion de los incidentes","text":"<p>Si la organizaci\u00f3n no dispone de la infraestructura necesaria para responder a los incidentes, la tasa de \u00e9xito es baja o nula. Por tanto, durante la fase de preparacion, la organizaci\u00f3n debera dotar de los recursos necesarios a los equipos de respuesta.</p> <p>Desde un punto de vista t\u00e9cnico debemos de abordar las siguientes preguntas.</p> <ul> <li>\u00bfQue pas\u00f3 exactamente? \u00bfCu\u00e1l es el da\u00f1o y c\u00f3mo entraron los atacantes?</li> <li>\u00bfEl incidente est\u00e1 en curso?</li> <li>\u00bfQu\u00e9 informaci\u00f3n fue robada o accedida?</li> <li>\u00bfQu\u00e9 recursos se vieron afectados por el incidente?</li> <li>\u00bfCu\u00e1les son las responsabilidades en cuanto a notificaci\u00f3n y divulgaci\u00f3n?</li> <li>\u00bfQu\u00e9 pasos se deben realizar para remediar la situaci\u00f3n?</li> <li>\u00bfQu\u00e9 acciones se pueden tomar para proteger a la empresa de incidentes similares?</li> </ul> <p>Aunque en si responder a todas las preguntas parece un desaf\u00edo, es posible siempre y cuando consigamos extraer todos los datos necesarios de los sistemas de informaci\u00f3n, de las comunicaciones etc. Para ello, como comentaremos, es importante que durante el proceso de preparacion, los equipos de respueta tenga definidos los procedimientos adecuados para realizar este trabajo, asi como los recursos neceasrios que para que proceso sea agil y eficiente.</p>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#que-areas-son-necesarias-cubrir","title":"\u00bfQu\u00e9 \u00e1reas son necesarias cubrir?","text":"<ul> <li>Entrenamiento: Esta \u00e1rea incluye temas tales como la identificaci\u00f3n de riesgos, pol\u00edticas para llevar acabo una respuesta de incidentes, definicion de c\u00f3mo trabajar con servicios IT contratados, tipo de infraestructura, formaci\u00f3n del usuario.</li> <li>Entrenamiento especifico al equipo de IR: Esta \u00e1rea incluye procedimientos de comunicaci\u00f3n y recursos tales como hardware, software, capacitaci\u00f3n y documentaci\u00f3n.</li> <li>Preparaci\u00f3n de la infraestructura: Esta \u00e1rea incluye la administraci\u00f3n de activos, instrumentaci\u00f3n, documentaci\u00f3n, herramientas de investigaci\u00f3n, segmentaci\u00f3n y red servicios.</li> <li>Plataformas de simulaci\u00f3n: Es importante realizar ciber ejercicios que val\u00faen a los equipos de respuestas a trav\u00e9s de plataformas de simulaci\u00f3n que ayudan a medir los tiempos de respuesta y cualificar el estado de madurez de los equipos.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#donde-estamos","title":"\u00bfD\u00f3nde estamos?","text":"<p>Si deseamos enfrentarnos a un incidente con \u00e9xito y llevar acabo una respuesta eficiente, el primer paso que deber\u00edamos cubrir es conocer d\u00f3nde estamos y disponer de una foto del riesgo que supone para la organizaci\u00f3n. Para ello se deben de valorar los siguientes puntos que nombramos a continuaci\u00f3n:</p> <ul> <li>\u00bfCu\u00e1les son los activos cr\u00edticos?.</li> <li>\u00bfCu\u00e1les pueden ser las amenazas?.</li> <li>\u00bfGrado de exposici\u00f3n existe?.</li> <li>Requisitos regulatorios que debemos de cumplir.</li> <li>\u00bfQu\u00e9 recursos necesitamos para estar preparados ante un incidente?.</li> </ul>"},{"location":"section2/u05/teoria/IS-U5.1.0.-RespuestaAIncidentes/#activos-criticos","title":"Activos cr\u00edticos","text":"<p>Como activo cr\u00edticos podr\u00edamos encuadrar las siguientes opciones:</p> <ul> <li>Mantener y proteger la reputaci\u00f3n de la organizaci\u00f3n.</li> <li>Proteger la informaci\u00f3n secreta, tales como patentes, c\u00f3digo fuente, propiedad intelectual etc.</li> <li>Proteger la informaci\u00f3n personal de la organizaci\u00f3n.</li> <li>Proteger los m\u00e9todos de pago y como se procesan en la organizaci\u00f3n.</li> </ul> <p>Los activos cr\u00edticos son los que generan mayor responsabilidad, pues son los que pueden dar luegar a las mayores p\u00e9rdidas para la organizaci\u00f3n. Una de las principales causas de p\u00e9rdidas de informacion y fallos de seguridad se produce a trav\u00e9s de filtraciones. Considere que las filtraciones pueden venir desde personas, procesos mal definidos o tecnolog\u00edas que han sido da\u00f1adas y como resultado contribuyen a la p\u00e9rdida de informaci\u00f3n o de imagen corporativa.</p> <p>Algunos ejemplos habituales en las organizaciones que exponen sus sistemas a riesgos serian los siguientes puntos:</p> <ul> <li>Servidores web que no han sido actualizados con los parches de seguridad adecuados u otros sistemas orientados a Internet, empleados descontentos y empleados no entrenados o concienciados.</li> </ul> <p>Otro factor a tener en cuenta es la identificacion de quienes pueden exponer los sistemas de la organizacion:</p> <ul> <li>\u00bfCualquier persona conectado a Internet?</li> <li>\u00bfAlguien con acceso f\u00edsico a un edificio corporativo?</li> <li>\u00bfSolamente individuos f\u00edsicamente dentro de un \u00e1rea segura?</li> </ul> <p>Combinar estos factores nos permiten priorizar el riesgo. Por ejemplo, los activos m\u00e1s cr\u00edticos que tienen exposiciones accesibles solo para personas de confianza y para personas dentro de un entorno f\u00edsico controlado pueden presentar menos riesgos que los activos con exposiciones accesibles en Internet. La identificaci\u00f3n del riesgo es cr\u00edtica porque nos permite gestionar y medir el gasto de recursos necesario para eliminar/mitigar el riesto.</p> <p>Pol\u00edticas</p> <p>Es importante desde un punto de vista l\u00f3gico implementar una pol\u00edtica que promueva que la investigaci\u00f3n realizada durante la respuesta a los incidentes llegar\u00e1 a buen t\u00e9rmino. Una pol\u00edtica adecuada, indicar\u00e1 cu\u00e1l es el comportamiento esperado para cada usuario:</p> <ul> <li>La pol\u00edtica de seguridad, que establece qu\u00e9 se espera en cuanto a la protecci\u00f3n de los datos confidenciales y recursos dentro de la organizaci\u00f3n. Las subsecciones de esta pol\u00edtica pueden abordar asuntos de seguridad f\u00edsica, electr\u00f3nica y de datos.</li> <li>La pol\u00edtica de acceso remoto, en la que se establece qui\u00e9n puede conectarse a la organizaci\u00f3n, a qu\u00e9 recursos y qu\u00e9 controles se colocan en las conexiones.</li> <li>La pol\u00edtica de uso de internet, en la que se establece el uso apropiado de Internet, incluida la gestion de la privacidad y la notificaci\u00f3n de la monitorizacion de la navegacion por parte de la organizaci\u00f3n.</li> </ul> <p>Las pol\u00edticas de los equipos de IR deber\u00edan estar centradas y abordar lo que se espera sobre b\u00fasquedas y los recursos que son necesarios y propiedad de la empresa junto con la interceptaci\u00f3n de tr\u00e1fico de red. Si se cubren estos dos asuntos, el IR deber\u00eda ser capaz de realizar la mayor\u00eda de las acciones de investigaci\u00f3n.</p> <pre><code>Ejemplos de Pol\u00edticas: SANS sans.org/security-resources/policies\n</code></pre> <p>Proveedores externos</p> <p>Es una pr\u00e1ctica habitual en muchas organizaciones que algunos servicios de IT est\u00e9n subcontratados. En este punto, si la investigaci\u00f3n de un incidente requiere una tarea que debe de realizarse en un proveedor subcontratado, podemos encontrarnos con problemas a la hora de obtener la informacion que se requiere para la investigacion. Por lo general, existir\u00e1n procedimientos para solicitar la informacion deseada, aunque pueden requerir aprobaciones previas u otra burocracia que ralentiza la ejecucion de la tarea.</p> <p>Tambi\u00e9n puede tener un coste adicional, por ejemplo, a veces se cobra por sistema, para peque\u00f1os cambios de configuraci\u00f3n, tales como basado en host, reglas de firewall. Toda organizaci\u00f3n deber\u00e1 trabajar con sus proveedores para garantizar que estos acuerdos se han tenido en cuenta antes de la contratacion de los servicios, y por tanto, estos procedimientos se incluyen dentro de los acuerdos de nivel de servicio (SLA), por lo que se medir\u00e1 la capacidad de respuesta a solicitudes. Sino se realizan estas gestiones previamente y no se tiene en cuenta antes de la firma del contrato, nos encontraremos con problemas que requer\u00edan de soluciones de emergencia, y que normalmente tendr\u00e1n asociados costes adicionales.</p> <p>Problemas habituales en una organizaci\u00f3n</p> <ul> <li>Privacidad y Regularizaciones: Como investigadores debemos de ver la red de una organizaci\u00f3n como una gran fuente de datos esperando a ser analizada. Pero realizar este analisis no es tan fail, ya que hay que tener en cuenta que la red podr\u00eda abarcar diferentes \u00e1reas geogr\u00e1ficas y por lo tanto diferentes pa\u00edses, cada uno con sus propias leyes y regulaciones de privacidad. No tener esto en cuenta, podria llevanos a problemas si decidimos buscar indicadores de compromiso usando m\u00e9todos que violan las leyes de privacidad y regulaciones locales. Por tanto, si debemos de investigar un incidente que involucra a varios pa\u00edses, debido a que la red es global, deber\u00edamos realizar algunos ejercicios previos para cada pa\u00eds, informandonos de qu\u00e9 tipo de acciones se pueden realizar, y cuales no estarian permitidas.</li> <li>Coordinaci\u00f3n de Equipos: Un reto importante que conlleva los incidentes que abarcan varios pa\u00edses en el mundo es la coordinaci\u00f3n. Ya que tanto el personal como los recursos tecnol\u00f3gicos se distribuir\u00e1n por distintas zonas geogr\u00e1ficas, y mantenerse organizado requerir\u00e1 una planificaci\u00f3n cuidadosa y un esfuerzo constante para garantizar que todos est\u00e1n sincronizados. Debemos de tener en cuenta adem\u00e1s que programar una reuni\u00f3n podr\u00eda llevar d\u00edas porque los participantes est\u00e1n en diferentes zonas horarias.</li> <li>Datos:Durante una investigaci\u00f3n, se recopilan cantidades masivas de datos para su an\u00e1lisis. A menudo, se presenta en forma de conjuntos de datos singularmente grandes, como im\u00e1genes de disco duro. Cuando el n\u00facleo del equipo es responsable de realizar la mayor\u00eda de las tareas de an\u00e1lisis, hay que encontrar una forma de transferir de manera eficiente esta informaci\u00f3n a los miembros del equipo de an\u00e1lisis forense.   Un factor muy importante a tener en cuenta es cuando se env\u00eda dicha informaci\u00f3n a otros pa\u00edses de modo que se debe de tener en cuenta la documentaci\u00f3n necesaria en aduana o las posibles restricciones en los pa\u00edses de origen y de destino.</li> <li>Entrenamiento a los usuarios: Los usuarios o empleados juegan un papel fundamental en la seguridad de una organizaci\u00f3n, conocido como el eslab\u00f3n m\u00e1s d\u00e9bil. Por lo tanto, la entrenamiento del usuario debe ser parte de preparaci\u00f3n previa al incidente. Los usuarios deben saber qu\u00e9 tipos de acciones deben y no deben tomar sobre sus sistemas, desde una perspectiva de seguridad inform\u00e1tica y de respuesta a incidentes.   Los usuarios deben de ser conscientes de los m\u00e9todos m\u00e1s comunes que usan los atacantes para aprovecharse y comprometer la red. Por lo general, nos interesar\u00e1 que los usuarios notifiquen inmediatamente a un superior sobre un incidente de seguridad. Lo habitual es preparar ciber ejercicios que ayuden a concienciar y entrenar a los usuarios.   Un problema espec\u00edfico que debe abordar es el peligro inherente al software de servidor instalado por los usuarios, ya que pueden instalar sus propios servidores web o FTP sin autorizaci\u00f3n, poniendo en peligro la seguridad general de su organizaci\u00f3n. Por lo tanto es muy importante disponer de reglas y pol\u00edticas que regulen qu\u00e9 pueden y qu\u00e9 no pueden hacer los usuarios respecto a los sistemas de la organizaci\u00f3n.</li> </ul> <p>Preparando el equipo de respuesta de incidentes</p> <p>En este apartado se trata de definir la misi\u00f3n, los sistemas de comunicaci\u00f3n, los entregables y todos los recursos necesarios para que el equipo de respuesta de incidentes este preparado.</p> <p>Misi\u00f3n</p> <p>Definir los objetivos de un equipo de respuesta de incidentes, que consistir\u00e1 en ayudar a mantener al equipo con el foco en la incidencia y del mismo modo establecer\u00e1 las expectativas con el resto de su organizaci\u00f3n. Todas las acciones y tomas decisiones deben de estar respaldadas por la gerencia de lo contrario el equipo IR no ser\u00e1 capaz de tomar decisiones y por lo tanto la organizaci\u00f3n sufrir\u00e1 un impacto importante. La misi\u00f3n de un equipos es la siguiente:</p> <ul> <li>Responda a todos los incidentes de seguridad o incidentes sospechosos usando un proceso de investigaci\u00f3n formal.</li> <li>Llevar a cabo una investigaci\u00f3n imparcial completa.</li> <li>Confirmar r\u00e1pidamente si una intrusi\u00f3n o incidente de seguridad realmente ocurri\u00f3.</li> <li>Evaluar el da\u00f1o y el alcance de un incidente.</li> <li>Controlar y contener el incidente.</li> <li>Recolectar y documentar toda la evidencia relacionada con un incidente.</li> <li>Seleccionar el soporte adicional que ayude durante el incidente, cuando sea necesario.</li> <li>Proteger los derechos de privacidad establecidos por la ley y / o la pol\u00edtica corporativa.</li> <li>Proporcionar un enlace a las autoridades legales y de aplicaci\u00f3n de la ley apropiadas.</li> <li>Mantener la confidencialidad apropiada del incidente para proteger la organizaci\u00f3n de una exposici\u00f3n innecesaria.</li> <li>Proporcionar testimonio a expertos.</li> <li>Proporcionar a la administraci\u00f3n recomendaciones que est\u00e9n completamente respaldadas por hechos.</li> </ul> <p>Comunicaci\u00f3n interna</p> <p>Durante un incidente, tendr\u00e1 varios equipos trabajando simult\u00e1neamente: el equipo que act\u00faa como n\u00facleo de la investigaci\u00f3n, equipos auxiliares, equipos legales y administradores de sistemas. Una buena comunicaci\u00f3n es primordial y definir como un incidente comienza es primordial. Cosas a tener en cuenta en la comunicaci\u00f3n Interna:</p> <ul> <li>Cifrado de Email: Se recomienda antes de que ocurra un incidente que todos los equipos dispongan de los certificados S/MIME para el equipo que act\u00faa como n\u00facleo, investigadores y equipos auxiliares.</li> <li>Etiquetado de los documentos: Es importante etiquetar los documentos con frases como confidencial, direcci\u00f3n, publico, es recomendable asesor\u00eda legal en este asunto.</li> <li>Revisar: que solo los integrantes de los equipos est\u00e1n revisando y monitorizando, el resto deben de ser desconectados de la investigaci\u00f3n</li> <li>Identificador del incidente: Use nombres de casos o numeraci\u00f3n para identificar el proyecto asociado al incidente.</li> </ul> <p>Cuanto menos personas conozcan el posible fallo en la seguridad mejor.</p> <p>Comunicaci\u00f3n externa</p> <p>Si el impacto de una intrusi\u00f3n no requerir\u00e1 notificaci\u00f3n o consulta con entidades externas perfecto, sin embargo en caso de tener que hacerlo se debe de tener en cuenta, tanto al gobierno y legislaci\u00f3n, sin mencionar el lenguaje de divulgaci\u00f3n de incidente. Es muy probable que su organizaci\u00f3n necesitar\u00e1 determinar c\u00f3mo se comunica con terceros. La planificaci\u00f3n de una divulgaci\u00f3n potencial es un proceso que deber\u00eda involucrar a un abogado, oficinas de cumplimiento, as\u00ed como \u00bfpersonal de nivel C?. No se puede proporcionar mucha orientaci\u00f3n sobre este tema, excepto gestionarlo bien. Utilizar canales aprobados, como sus relaciones p\u00fablicas (RP) u oficina legal. Una vez revelado que ocurre, puede perder el control de la investigaci\u00f3n. Otras entidades pueden usar lso contratos para demandar y reclamar acciones o pasos de investigaci\u00f3n que est\u00e1n destinados a proteger sus intereses sobre el intereses de su organizaci\u00f3n.</p> <p>Algunas preguntas a considerar al determinar el contenido y el tiempo de cualquier notificaci\u00f3n son:</p> <ul> <li>\u00bfCu\u00e1ndo se tiene que comunicar un incidente? \u00bfInmediatamente despu\u00e9s de ser detectado? \u00bfDespu\u00e9s de que el incidente ha sido confirmado?</li> <li>\u00bfC\u00f3mo se notifica a un tercero? \u00bfQu\u00e9 lenguaje usar para proteger la confidencialidad?</li> <li>Si el incidente justifica una divulgaci\u00f3n p\u00fablica, \u00bfqui\u00e9n es responsable de los contenidos? y \u00bfCu\u00e1les son los tiempos de la comunicaci\u00f3n? \u00bfC\u00f3mo se har\u00e1 la divulgaci\u00f3n?</li> <li>\u00bfQu\u00e9 sanciones o multas pueden aplicar a la organizaci\u00f3n despu\u00e9s de la divulgaci\u00f3n?</li> <li>\u00bfQu\u00e9 restricciones sufrir\u00e1 la investigaci\u00f3n despu\u00e9s de la divulgaci\u00f3n?</li> <li>\u00bfC\u00f3mo afecta la divulgaci\u00f3n?</li> </ul> <p>Entregables</p> <p>La parte m\u00e1s cr\u00edtica de un entregable para los equipos IR son los informes detallados, los cuales pueden variar desde simples actualizaciones de estado de una p\u00e1gina hasta informes detallados que contengan m\u00e1s de 30 p\u00e1ginas, como podr\u00eda ser el ejemplo de un forense. Del mismo modo se deben definir claramente los tiempos e incluir los plazos de finalizaci\u00f3n de cada uno de los objetivos. A continuaci\u00f3n se muestra un ejemplo de entregables.</p> Nombre Proposito Tiempo de entrega Reporte de estado del caso Actualizar a las partes interesadas sobre el progreso de un caso individual. Recurrente: Diariamente. Informe de respuesta en vivo Documentar las evidencias desde el inicio incluso de un sistema aislado. Borrador: Un d\u00eda de trabajo. Final: Dos d\u00edas de trabajo. Informe Forense Documento que detallas las evidencias encontradas en el an\u00e1lisis forenses. Borrador: Cuatro d\u00edas de trabajo. Final: Seis d\u00edas de trabajo. Informe an\u00e1lisis de Malware Documento que detallas las evidencias encontradas en el an\u00e1lisis de malware. Borrador: Tres d\u00edas de trabajo. Final: Cinco d\u00edas de trabajo. Informe investigaci\u00f3n de Intrusi\u00f3n Documento que detallas las evidencias encontradas en la investigaci\u00f3n sobre la intrusi\u00f3n en el sistema. Borrador: Cinco d\u00edas de trabajo. Final: Ocho d\u00edas de trabajo. <p>Equipo forense, recursos:</p> <p>El software que habitualmente se usa durante las investigaciones generalmente se categoriza en ocho categor\u00edas. El equipo de IR debe  inventariar lo que tiene, y analizar si necesita alguna herramienta adicional basada en algunos de los siguientes criterios.</p> <ul> <li>Boot Disk.</li> <li>Sistemas Operativos.</li> <li>Herramientas para hacer im\u00e1genes de Discos.</li> <li>Capturar memoria y an\u00e1lisis.</li> <li>Capturas en vivo y an\u00e1lisis.</li> <li>Indicadores de compromiso.</li> <li>Suites de Forense.</li> <li>Herramientas para el an\u00e1lisis de log.</li> </ul> <p>Recursos P\u00fablicos</p> <ul> <li>awesome-csirt</li> <li>awesome-incident-response</li> </ul> <p>&lt;&lt;&lt; voy por aqui &gt;&gt;&gt;</p> <p>DOCUMENTACI\u00d3N Y TRATAMIENTO</p> <p>La evidencia es la fuente de cualquier investigaci\u00f3n y debe manejarse de manera apropiada. La atenci\u00f3n al detalle y el estricto cumplimiento son obligatorios con respecto al manejo de las evidencias. Si se cuestiona la integridad de la evidencia, los hallazgos de una investigaci\u00f3n pueden dejar de brindarle valor a su organizaci\u00f3n. Para evitar que esto suceda, le recomendamos que implemente pol\u00edticas y procedimientos de gesti\u00f3n de pruebas adecuados. Por lo general, incluir\u00e1n orientaci\u00f3n sobre la recopilaci\u00f3n de pruebas, la documentaci\u00f3n, el almacenamiento y el env\u00edo. Como m\u00ednimo, debe crear procedimientos para hacer cumplir la integridad y prever autenticaci\u00f3n y verificaci\u00f3n. La integridad se logra a trav\u00e9s de lo que llamamos control positivo. El control positivo significa que la evidencia siempre debe estar bajo la supervisi\u00f3n directa del personal autorizado o asegurada en un ambiente o contenedor controlado, como una caja fuerte. Al enviar evidencia, debe enviarse a trav\u00e9s de un proveedor trazable y empaquetarse para que sea invulnerable y est\u00e9 protegida contra los elementos. La autenticaci\u00f3n se logra a trav\u00e9s de la documentaci\u00f3n, que incluye una etiqueta de evidencia y una cadena de custodia. Proporcionamos una etiqueta de evidencia de muestra en el Ap\u00e9ndice B. La validaci\u00f3n se realiza a trav\u00e9s de una suma de comprobaci\u00f3n criptogr\u00e1fica, como MD5, que se calcula en el momento de la recopilaci\u00f3n y se puede validar en cualquier momento. La validaci\u00f3n demuestra que la evidencia no ha cambiado desde el momento de la recopilaci\u00f3n. Puede leer m\u00e1s sobre las reglas de evidencia y las pautas de recopilaci\u00f3n de evidencia del Departamento de Justicia de cada pa\u00eds.</p> <p>REPOSITORIO DE CONOCIMIENTO</p> <p>A medida que su equipo de IR realiza investigaciones e interact\u00faa con otros departamentos de su organizaci\u00f3n, acumular\u00e1n conocimientos que deber\u00edan documentarse en una ubicaci\u00f3n central. Parte de la informaci\u00f3n solo puede estar relacionada con un solo incidente y se puede almacenar en el sistema de gesti\u00f3n de expedientes o expedientes que utiliza el equipo de IR. Otra informaci\u00f3n puede estar relacionada con la organizaci\u00f3n como un todo, y debe estar documentada en un repositorio de conocimientos que el equipo de IR mantiene. El repositorio de conocimiento debe estar l\u00f3gicamente organizado y accesible para que el equipo pueda ubicar efectivamente la informaci\u00f3n relevante. Video \u2013 Construir tu WIKI</p> <p>PREPARANDO LA INFRAESTRUCTURA PARA RESPUESTA DE INCIDENTES</p> <p>Principalmente la infraestructura que necesita un equipo de incidentes suele esta compuesta por las siguientes \u00e1reas:</p> <ul> <li>Configuraci\u00f3n del dispositivo</li> <li>Gesti\u00f3n de activos</li> <li>Realizando una encuesta / Inventario de dispositivos</li> <li>Instrumentaci\u00f3n</li> <li>Pasos adicionales para mejorar la seguridad</li> <li>Configuraci\u00f3n de la red</li> <li>Segmentaci\u00f3n de red y control de acceso</li> <li>Documentaci\u00f3n</li> <li>Instrumentaci\u00f3n</li> <li>Servicios de red</li> </ul> <p>CONFIGURACI\u00d3N DEL DISPOSITIVO</p> <p>Los dispositivos tales como servidores, pc de escritorio y port\u00e1tiles, en su empresa albergan la mayor\u00eda de la evidencias relevantes para una investigaci\u00f3n, y la manera en que estos sistemas est\u00e1n configurados pueden afectar dr\u00e1sticamente el resultado. Por lo tanto, la organizaci\u00f3n debe configurar todos los sistemas de una manera que facilite una investigaci\u00f3n efectiva. Un enfoque com\u00fan que muchas organizaciones toman es centrar su atenci\u00f3n en los sistemas que ellos perciben como importantes. Sin embargo, ese enfoque supone que un atacante realizar\u00e1 acciones que pueden detectarse en el sistema cr\u00edtico \u00fanicamente. En nuestra experiencia, es com\u00fan para un atacante logre usar sistemas no relacionados como el core y por lo tanto cree cientos de evidencias en numerosos sistemas que nos son cr\u00edticos. Un atacante tambi\u00e9n es probable que use credenciales validas para acceder a los sistemas cr\u00edticos de forma coherente con la actividad normal. Si esas evidencias no se capturan ni conservan, muchas preguntas sobre el incidente no podr\u00e1n ser respondidas Para ayudar a garantizar que cubra todos los aspecto tenga en cuenta los dos pasos siguientes:</p> <p>GESTI\u00d3N DE ACTIVOS</p> <p>Cuando los profesionales de seguridad inform\u00e1tica piensan en formas de preparar su entorno para un incidente, la administraci\u00f3n de activos generalmente no es uno de ellos. La clave es entender c\u00f3mo acceder a la informaci\u00f3n cuando la necesite. Debe evaluar la capacidad de su organizaci\u00f3n para proporcionar la siguiente informaci\u00f3n sobre un sistema:</p> <ul> <li>Aprovisionamiento de datos: Imagine una situaci\u00f3n en la que encuentre evidencia de sospecha actividad que ocurri\u00f3   hace dos meses en un sistema espec\u00edfico. Usted busca el host nombre en su sistema de administraci\u00f3n de activos y   descubre que es un servidor que fue reemplazado la semana pasada. En base a esa informaci\u00f3n, usted sabe que el   sistema actual no contendr\u00e1 evidencia asociada con la actividad hace dos meses</li> <li>Propiedad: Muchas organizaciones subcontratan servicios. Si un sistema no es en realidad propiedad de su organizaci\u00f3n,   puede afectar la forma en que responde. El inventario debe indicar claramente a qui\u00e9n pertenece el hardware</li> <li>Unidad de negocio: Conocer que tipo de negocio existe dentro de su organizaci\u00f3n puede ayudar a los investigadores a   construir contexto y hacer una mejor investigaci\u00f3n</li> <li>Ubicaci\u00f3n f\u00edsica: Si necesita obtener una imagen de disco duro, o tomar otra acci\u00f3n que requiere acceso f\u00edsico al sistema, necesitar\u00e1 saber d\u00f3nde est\u00e1 localizado</li> <li>Informaci\u00f3n de contacto: Coordinar la respuesta y ganar acceso a ciertas \u00e1reas es primordial por lo tanto disponer de los contactos es importante</li> <li>Servicios y Roles: Todo investigador debe de conocer los roles y servicios de cada activo de la organizaci\u00f3n</li> <li>Configuraci\u00f3n de la red: Conocer el estado de la red, el tipo de tipolog\u00eda y direccionamiento es importante</li> </ul> <p>ENCUESTA / INVENTARIO</p> <p>La construcci\u00f3n de un sistema est\u00e1ndar de una organizaci\u00f3n, los inventarios de software y otra documentaci\u00f3n rara vez proporcionar\u00e1n la imagen completa de la infraestructura de TI. Durante el curso de una investigaci\u00f3n, encontramos que es com\u00fan encontrar software, hardware o sistemas operativos que la organizaci\u00f3n no conoc\u00eda previamente. Recomendamos realizar una encuesta pr\u00e1ctica (autom\u00e1tica o de otro tipo) para recopilar y verificar la siguiente informaci\u00f3n. Aseg\u00farese de incluir el fabricante, el producto y la informaci\u00f3n de la versi\u00f3n para cada art\u00edculo en uso en su organizaci\u00f3n:</p> <ul> <li>Sistemas operativos (Windows, Mac OS X, Linux, HP-UX)</li> <li>Hardware ( port\u00e1tiles, PC escritorio, servidores, dispositivos m\u00f3viles)</li> <li>Tecnolog\u00edas de red (conmutadores, puntos de acceso inal\u00e1mbrico, firewalls, IDS, proxies)</li> <li>Diagrama de Red</li> <li>Software de seguridad (AV, HIPS, lista blanca)</li> <li>Software de gesti\u00f3n de TI (parche, configuraci\u00f3n y gesti\u00f3n de activos, supervisi\u00f3n del rendimiento)</li> <li>Endpoints (procesamiento de texto, gr\u00e1ficos, ingenier\u00eda, Internet navegadores)</li> <li>Aplicaciones comerciales (mantenimiento de tiempo, gesti\u00f3n de documentos, pago tratamiento)</li> </ul> <p>INSTRUMENTACI\u00d3N</p> <p>Aunque creamos que contamos con toda la informaci\u00f3n almacenada en nuestros sistemas es bueno considerar c\u00f3mo mejorar la configuraci\u00f3n del sistema para facilitar una investigaci\u00f3n, piense en las dos fases iniciales: desarrollo y seguimientos. Por lo tanto es conveniente contestar a las siguientes preguntas. \u00bfQu\u00e9 se puede registrar, capturar o registrar de otro modo que pueda ayudar a determinar qu\u00e9 sucedi\u00f3 en un sistema afectado? Piense en los mecanismos de instrumentaci\u00f3n que ya tiene instalados (medici\u00f3n de software, supervisi\u00f3n del rendimiento y firewalls basados en host o AV) y c\u00f3mo podr\u00eda mejorar su configuraci\u00f3n.</p> <ul> <li>Eventos, errores en logs y logs de acceso</li> <li>Antivirus y sistemas de intrusi\u00f3n</li> <li>Herramientas de investigaci\u00f3n</li> </ul> <p>Adicionalmente es conveniente mejorar la seguridad con algunas recomendaciones tales como:</p> <ul> <li>Establezca una soluci\u00f3n de parcheo para ambos sistemas operativos y aplicaciones.</li> <li>Considere el uso de la autenticaci\u00f3n de dos factores y aplique una buena contrase\u00f1a complejidad.</li> <li>Eliminar el acceso administrativo local de los usuarios.</li> <li>Asegurar que los sistemas tengan firewall y soluciones AV implementadas y configuradas adecuadamente.</li> <li>Retirar los sistemas al final de la vida \u00fatil.</li> <li>Establecer un sistema de gesti\u00f3n de configuraci\u00f3n.</li> <li>Considere la inclusi\u00f3n de listas blancas de aplicaciones.</li> <li>Cumple con DISA STIGs: iase.disa.</li> </ul> <p>CONFIGURACI\u00d3N DE RED</p> <p>En la primera parte hemos cubierto la parte de dispositivos en cuanto a la preparaci\u00f3n de la infraestructura para IR. Ahora cubriremos la parte de red, configuraci\u00f3n de red de \u00e1rea.</p> <p>Existen numerosas gu\u00edas y ubicaciones sobre el proceso de dise\u00f1o de un entorno de red seguro. Por lo tanto vamos a comentar algunas pr\u00e1cticas comunes pueden mejorar enormemente la capacidad de un equipo de IR para realizar investigaciones. Podr\u00edamos centrarnos en cuatro puntos principalmente.</p> <ul> <li> <p>Segmentaci\u00f3n de red y controles</p> </li> <li> <p>Filtadro por niveles</p> </li> <li>Web, chat y proxys de transferencia</li> <li>Doble factor de autenticaci\u00f3n</li> <li>Control de acceso</li> <li>Limitar las conexiones de las estaciones</li> <li>Documentaci\u00f3n</li> <li> <p>Instrumentaci\u00f3n</p> </li> <li> <p>Firewall</p> </li> <li>Sistemas de intrusi\u00f3n</li> <li>Capturas completas de red</li> <li>Emisores de NetfLow</li> <li>Proxy servers</li> <li> <p>Servicios de red</p> </li> <li> <p>Implementaci\u00f3n DNS blackhole</p> </li> </ul> <p>COMENZAR LA INVESTIGACI\u00d3N</p> <p>Cuando se detecta un evento, hemos visto que muchas organizaciones tienden directamente a realizar una investigaci\u00f3n. En algunos casos, los detalles del evento pueden justificar que se requiera de una investigaci\u00f3n r\u00e1pida. En la mayor\u00eda de los casos, sin embargo, creemos que un paso adicional es necesario para iniciar la investigaci\u00f3n de forma correcta. Se han observado muchas investigaciones que comienzan antes de la confirmaci\u00f3n de los hechos b\u00e1sicos. Al igual que con cualquier escenario de la vida real, a medida que recibe nueva informaci\u00f3n, debe siempre evaluarlo de una perspectiva l\u00f3gica, sentido com\u00fan y tu propia experiencia. Los sistemas de detecci\u00f3n pueden tergiversar u omitir eventos o detalles de los mismos. Ning\u00fan sistema es completamente exacto. Debes actuar como guardi\u00e1n, deteni\u00e9ndote entre eventos e investigaciones. Para hacer eso, se debe construir una imagen general del incidente y luego recolectar y verificar los hechos iniciales. Esto permitir\u00e1 desarrollar el contexto adecuadamente. A continuaci\u00f3n, se debe determinar lo que es apropiado, y posible, para el investigaci\u00f3n. Finalmente, este proceso necesita moverse r\u00e1pidamente, porque su la seguridad de la organizaci\u00f3n, los datos electr\u00f3nicos y la reputaci\u00f3n est\u00e1n en juego.</p> <p>RECOGIDA DE HECHOS INCIALES</p> <p>Los hechos iniciales sobre un evento son todo lo que una investigaci\u00f3n necesita para empezar as\u00ed que es una buena idea hacerlo bien. Tambi\u00e9n es importante recopilar informaci\u00f3n adicional sobre esos hechos para que pueda establecer el contexto. Por ejemplo, una direcci\u00f3n IP es m\u00e1s \u00fatil si usted sabe a qu\u00e9 sistema pertenece y qu\u00e9 papel desempe\u00f1a ese sistema. Sin ese contexto, es f\u00e1cil saltar a las conclusiones que con casi toda seguridad sean err\u00f3neas. Es tambi\u00e9n compresible entender que algunos posean mas experiencia con esto, sin embargo otros pueden necesitar algunos consejos para mejorar sus habilidades. Para ayudar, vamos a tocar \u00e1reas que creemos que son beneficiosas para el aprendizaje. Las siguientes secciones cubren una cantidad de listas de verificaci\u00f3n que han sido desarrolladas por profesionales, algunos consejos sobre casos y la importancia de desarrollar una l\u00ednea de tiempo del ataque sufrido.</p> <p>CHECKLIST</p> <p>Cubrimos cinco listas de verificaci\u00f3n en esta secci\u00f3n: el resumen del incidente, c\u00f3mo fue el incidente detalles de sistema individual detectado, detalles de red y detalles del malware.</p> <p>Existen sin duda, otras \u00e1reas para las podr\u00edamos hacer listas de verificaci\u00f3n, pero hemos encontrado que estas son las m\u00e1s comunes y \u00fatiles para una investigaci\u00f3n de respuesta a incidentes. Adem\u00e1s, estas listas de verificaci\u00f3n no son definitivas y es posible que necesite agregar, eliminar o cambiar elementos m\u00e1s apropiadas para su organizaci\u00f3n.</p> <p>La primera lista de verificaci\u00f3n que debe completar se utiliza para recopilar los datos vitales b\u00e1sicos de un incidente; se llama Video \u2013 Desarrollar una Lista de verificaci\u00f3n del Incidente</p> <p>El prop\u00f3sito de esta lista de verificaci\u00f3n es registrar informaci\u00f3n de alto nivel sobre el incidente. La informaci\u00f3n recopilada deber\u00eda proporcionarle con un sentido general de lo que sucedi\u00f3, y deber\u00eda ayudar a identificar las \u00e1reas donde el protocolo de respuesta puede necesitar atenci\u00f3n. Fecha y hora en que se inform\u00f3 el incidente: Registre la fecha y la hora en que sistema individual o autom\u00e1tico inicialmente trajo el problema al equipo del IR atenci\u00f3n. La fecha y hora en que se detect\u00f3 el incidente: Normalmente, el momento en que ocurre un incidente informado es m\u00e1s reciente que el tiempo de detecci\u00f3n real. Aseg\u00farese de rastrear y registrar cuando el problema fue realmente detectado</p> <ul> <li>Informaci\u00f3n de contacto de la persona que documenta la informaci\u00f3n</li> <li>Informaci\u00f3n de contacto de la persona que report\u00f3 el incidente</li> <li>Informaci\u00f3n de contacto de la persona que detect\u00f3 el incidente</li> <li>Si la organizaci\u00f3n fue notificado por una fuente externa, aseg\u00farese de que se hayan registrado todos los detalles y seconserva la comunicaci\u00f3n original y escrita</li> <li>La naturaleza del incidente</li> <li>Proporcionar una categorizaci\u00f3n del tipo de malware detectado, intento de spear phishing, inicios de sesi\u00f3n fallidos, acceso no autorizado,etc</li> <li>El tipo de recursos afectados. A veces, la detecci\u00f3n o notificaci\u00f3n da detalles sobre los datos o recursos que pueden haber sido afectados</li> <li>C\u00f3mo se detect\u00f3 el incidente. Proporcione un breve resumen del m\u00e9todo utilizado para la detecci\u00f3n, como una alerta de antivirus, una alerta de IDS, o que un usuario inform\u00f3 comportamientos sospechosos</li> <li>El identificador \u00fanico y la ubicaci\u00f3n de los equipos afectados por el incidente. Aseg\u00farese de obtener un identificador \u00fanico: la direcci\u00f3n IP puede no ser \u00fanica, debido usemos sistemas como DHCP</li> <li>\u00bfQui\u00e9n accedi\u00f3 a los sistemas desde la detecci\u00f3n?</li> </ul> <p>Es importante registrar qui\u00e9n accedi\u00f3 al sistema desde la detecci\u00f3n, en caso de que los investigadores necesiten informaci\u00f3n sobre que hicieron. A veces, el personal de TI u otros pueden tomar medidas que perciben como \"\u00fatil\", pero son dif\u00edciles de diferenciar de la actividad maliciosa.</p> <ul> <li>\u00bfQui\u00e9n conoce el incidente?</li> <li>Si el incidente est\u00e1 actualmente en curso.</li> <li>Si existe un requisito para mantener incidente abierto y de comunicar sobre ello   Una vez que haya completado la Lista de verificaci\u00f3n del incidente, puede pasar a obtener m\u00e1s detalles sobre \u00e1reas   espec\u00edficas. El orden de finalizaci\u00f3n de las siguientes listas de verificaci\u00f3n debe basarse en las necesidades de la situaci\u00f3n.   Tambi\u00e9n puede solicitar ayuda y completar m\u00e1s de una a la vez.1</li> </ul> <p>RECOGER DATOS ADICIONALES</p> <p>Si los detalles de la detecci\u00f3n parecen precisos y consistentes, el siguiente paso es pasar a recopilar informaci\u00f3n adicional sobre elementos espec\u00edficos relacionados con la detecci\u00f3n. En este caso se debe de bajar un nivel y recopilar detalles sobre los sistemas individuales, la o las redes, y archivos potencialmente maliciosos. Adem\u00e1s, si\u00e9ntase libre de profundizar en otros puntos de datos que hayan sido recolectados en la lista de verificaci\u00f3n o checklist que vimos anteriormente. Detalles del sistema individual: Para cada sistema involucrado, considere recolectar la siguiente informaci\u00f3n. Debe evitar agrupar sistemas en un solo documento, porque es f\u00e1cil pasar por alto los detalles si no se toma el tiempo necesario para preguntar preguntas sobre cada sistema individual.</p> <ul> <li>Localizaci\u00f3n f\u00edsica</li> <li>Etiqueta del servidor</li> <li>Sistema y modelo</li> <li>Sistema instalado</li> <li>Funci\u00f3n del sistema</li> <li>Responsable o administrador del sistema</li> <li>Direcci\u00f3n IP</li> <li>Nombre y si pertenece aun dominio</li> <li>Si almacena informaci\u00f3n critica</li> <li>Si dispone de backups</li> <li>Si el sistema continua conectado a la red</li> <li>Lista de malware y recolecci\u00f3n de datos de log</li> <li>Lista de todos los pasos que han sido tomados</li> <li>Si alg\u00fan datos ha sido preservado, el proceso por el cual se almaceno</li> </ul> <p>Detalles de Red: Documentar los detalles sobre la red es tan importante, incluso en casos donde los detalles de la red inicialmente no parecen ser importantes. A lo m\u00ednimo, considere los siguientes puntos:</p> <ul> <li>Una lista de todas las direcciones IP maliciosas externas o nombres de dominio involucrados</li> <li>Si la supervisi\u00f3n de la red se est\u00e1 llevando a cabo</li> <li>Una lista de los pasos de remediaci\u00f3n que se han tomado</li> <li>Si se conservan datos, qu\u00e9 proceso se est\u00e1 utilizando y d\u00f3nde se encuentra almacenado</li> <li>Actualizaciones de diagramas y configuraciones de red</li> <li>Nombre y si pertenece aun dominio</li> <li>Si almacena informaci\u00f3n critica</li> <li>Si dispone de backups</li> <li>Si el sistema continua conectado a. la red</li> <li>Lista de malware y recolecci\u00f3n de datos de log</li> <li>Lista de todos los pasos que han sido tomados</li> <li>Si alg\u00fan datos ha sido preservado, el proceso por el cual se almaceno</li> </ul> <p>Detalles de Malware: Para cada archivo malicioso relacionado con el incidente, deber\u00e1 documentar los siguientes elementos:</p> <ul> <li>Una lista de todas las direcciones IP maliciosas externas o nombres de dominio involucrados</li> <li>Si la supervisi\u00f3n de la red se est\u00e1 llevando a cabo</li> <li>Una lista de los pasos de remediaci\u00f3n que se han tomado</li> <li>Si se conservan datos, qu\u00e9 proceso se est\u00e1 utilizando y d\u00f3nde se encuentra almacenado</li> <li>Actualizaciones de diagramas y configuraciones de red</li> <li>La fecha y hora de la detecci\u00f3n</li> <li>C\u00f3mo se detect\u00f3 el malware</li> <li>La lista de sistemas donde se encontr\u00f3 el malware</li> <li>El nombre del archivo malicioso y en qu\u00e9 directorio estaba presente</li> <li>Qu\u00e9 determin\u00f3 el mecanismo de detecci\u00f3n, como el nombre y la familia del archivo malicioso</li> <li>Si el malware est\u00e1 activo durante el IR y si las conexiones de red contin\u00faan activas</li> <li>Si se conserva una copia del malware, ya sea manualmente o mediante un proceso de cuarentena</li> <li>El estado de cualquier an\u00e1lisis</li> <li>\u00bfHa sido analizado el malware en la red y el host indicadores de compromiso?   Si el malware fue enviado a terceros, ya sea a trav\u00e9s de un sistema automatizado o por acci\u00f3n directa de un empleado</li> </ul> <p>L\u00cdNEA DE TIEMPO</p> <p>En cada investigaci\u00f3n que realizamos, es nuestro deber mantener una l\u00ednea de tiempo de los eventos. Las l\u00edneas de tiempo nos mantienen organizados, brindan contexto, ayudan a identificar inconsistencias y brindan una imagen general de lo que sucedi\u00f3. Es importante darse cuenta de que los eventos no ser\u00e1n necesariamente ingresados en orden cronol\u00f3gico. Lo que queremos decir es que ingresemos eventos a medida que los revisamos, no cuando ocurren (o ocurrieron). Comparar informaci\u00f3n nueva en una l\u00ednea de tiempo puede ayudar a validar nuevos clientes potenciales. Por ejemplo, si descubre informaci\u00f3n que sugiere que el ataque inicial ocurri\u00f3 seis meses antes de la fecha m\u00e1s antigua que registr\u00f3 actualmente, o bien tiene un gran avance en el caso o est\u00e1 buscando informaci\u00f3n no relacionada. Otro ejemplo podr\u00eda ser con secuencias de eventos. Imagine un escenario en el que descubre que un atacante cre\u00f3 un archivo y luego lo transfiri\u00f3 fuera de la red. Despu\u00e9s de poner la informaci\u00f3n en una l\u00ednea de tiempo, observa que la marca de tiempo de que su servidor proxy el cual registra la transferencia se encuentra antes de la fecha de creaci\u00f3n del archivo. Debido a que el archivo debe existir antes de la transferencia, algo est\u00e1 mal con los datos que est\u00e1 mirando o c\u00f3mo lo est\u00e1 interpretando. La l\u00ednea de tiempo del ataque se centra en actividades significativas de los atacantes. Registre detalles tales como cu\u00e1ndo un atacante accedi\u00f3 a un sistema, cu\u00e1ndo se crearon los archivos, cu\u00e1ndo se transfirieron los datos y cu\u00e1ndo se ejecutaron las herramientas. Tambi\u00e9n es importante registrar la fuente de los datos en la l\u00ednea de tiempo. Por ejemplo, si realiza una entrada que un atacante accedi\u00f3 a un sistema, incluya d\u00f3nde encontr\u00f3 esa informaci\u00f3n. Finalmente, no olvide registrar el identificador del sistema en el que ocurri\u00f3 el evento</p> <p>ALCANCE DEL INCIDENTE</p> <p>En esta secci\u00f3n, analizaremos algunos conceptos b\u00e1sicos que puede utilizar en las primeras etapas de su investigaci\u00f3n que ayudaran a descubrir el alcance y decidir qu\u00e9 pasos dar a continuaci\u00f3n. Cuando decimos \"alcance\", nos referimos a obtener una mejor idea de lo que hizo el atacante.</p> <ul> <li>Examinar datos iniciales</li> <li>Recolecci\u00f3n y revisi\u00f3n preliminar de la evidencia</li> <li>Determinar las acciones en curso</li> </ul> <p>DATOS INICIALES</p> <p>Durante la fase inicial de detecci\u00f3n debemos de tener inicios de que se ha producido un acceso no autorizado o bien se debe tener alguna informaci\u00f3n inicial sobre la detecci\u00f3n. Por ejemplo, si el evento fue una inyecci\u00f3n estructurada de lenguaje de consulta (SQL), debe tener una fecha, hora y las direcciones IP de origen y destino. Tambi\u00e9n querr\u00e1 hablar con el personal que administra el sistema de detecci\u00f3n para ver si hay otros detalles disponibles. De modo que debe de preguntar i puede ver los detalles de la alerta, si puede observar que informaci\u00f3n adicional existe y si es \u00fatil para la investigaci\u00f3n. Pregunte acerca de otros sistemas de detecci\u00f3n y si han detectado algo o una actividad sospechosa; es posible que haya sistemas implementados que podr\u00edan proporcionar informaci\u00f3n adicional. Debe reunir hechos que proporcionen un mejor contexto del evento de detecci\u00f3n. Como hemos visto anteriormente las respuestas a preguntas pueden tener un gran impacto en la forma en que decida continuar. Ahora que ha examinado los datos iniciales, analicemos c\u00f3mo decidir\u00e1 qu\u00e9 evidencia preliminar reunir y qu\u00e9 har\u00e1 con ella.</p> <p>RECOLECCI\u00d3N Y REVISI\u00d3N PRELIMINAR</p> <p>En esta fase, se debe determinar qu\u00e9 fuentes preliminares pueden ser \u00fatiles para capturar evidencias y luego decidir cuales se usaran en la realidad. Finalmente, recopilaremos y revisaremos cada evidencia. Necesitaremos encontrar fuentes de evidencias que nos proporcionen r\u00e1pidamente respuestas iniciales. Idealmente, debemos de identificar las fuentes de evidencia que provienen de varias categor\u00edas y requieren poco esfuerzo a la hora de analizarlas. Por ejemplo, si una pregunta de investigaci\u00f3n es determinar si el malware se ejecut\u00f3 en un sistema, podr\u00edamos considerar las siguientes fuentes de evidencia:</p> <ul> <li>Artefactos que el malware crea directamente en el sistema, como archivos o claves de registro</li> <li>Artefactos del sistema operativo, como el visor de eventos de Windows</li> <li>Artefactos de aplicaciones, como el historial del navegador de Internet</li> <li>Artefactos de red, como los registros de firewall</li> </ul> <p>Esas fuentes son lo que llamamos \"fuentes de evidencia independientes\". Por ejemplo, la existencia de registros de firewall que pueden mostrar las conexiones de red del malware no depende de la presencia de una clave de registro, y viceversa. De tal modo que podr\u00edamos llegar a conclusiones que son m\u00e1s confiables si usamos m\u00faltiples fuentes de evidencia independientes. Si usamos fuentes independientes, la probabilidad de que detecte la ejecuci\u00f3n, si est\u00e1 sucedi\u00f3, es mucho mayor. Hay una serie de razones que justifican lo explicado ya que ser\u00e1 m\u00e1s dif\u00edcil para un atacante eliminar o modificar la evidencia de todas las fuentes de evidencia independientes. Tambi\u00e9n es menos probable que un proceso de rutina sobrescriba o descarte la evidencia en todas las fuentes. Y con m\u00faltiples fuentes independientes, puede verificar informaci\u00f3n cruzada, como la hora exacta en que ocurri\u00f3 un evento, de tal manera que si los datos coinciden los hallazgos ser\u00e1n mas convincentes. Si las fuentes dependen unas de otras o caen dentro de una sola categor\u00eda, como la revisi\u00f3n de los eventos de Windows, la posibilidad de detecci\u00f3n es menor.</p> <p>Video utilizar NetworkMiner Video utilizar NetWitness Video utilizar Wireshark</p> <p>DETERMINAR UNA ACCI\u00d3N</p> <p>Una vez que que hemos reunido y hemos revisados las evidencias preliminares debemos de tomar decisiones son las actividades que debemos de crear, como repartirlas y como catalogarlas. Esas actividades normalmente incluyen preservar la evidencia, pero tambi\u00e9n podr\u00edan ser acciones de postura o contenci\u00f3n. Al igual que con cualquier decisi\u00f3n, hay una serie de factores que podemos pensar que nos ayudaran en la toma de decisiones de modo que nos resulta m\u00e1s \u00fatil responder a las mismas a trav\u00e9s de las siguientes preguntas.</p> <ul> <li>\u00bfLa acci\u00f3n ayudar\u00e1 a responder una pregunta de investigaci\u00f3n?</li> <li>\u00bfLa acci\u00f3n responder\u00e1 mis preguntas r\u00e1pidamente?</li> <li>\u00bfEstamos siguiendo la evidencia?</li> <li>\u00bfEstamos poniendo demasiado esfuerzo en una sola teor\u00eda?</li> <li>\u00bfEstamos usando m\u00faltiples fuentes independientes de evidencias?</li> <li>\u00bfEntendemos el nivel de esfuerzo?</li> <li>\u00bfNos mantenemos sobre el objetivo?</li> <li>\u00bfEstamos rastreando las evidencias m\u00e1s tempranas y recientes de compromiso?</li> <li>\u00bfHemos descubierto algo que requiere de una reparaci\u00f3n inmediata?</li> </ul> <p>Video Cazando una Shell</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/","title":"IS U5.1.1. PlanesDeRespuesta","text":"<p>Planes de respuesta</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ra4","title":"RA4","text":"<p>a) Se han desarrollado procedimientos de actuaci\u00f3n detallados para dar respuesta, mitigar, eliminar o contener los tipos de incidentes de ciberseguridad m\u00e1s habituales. b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n, prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ra4_1","title":"RA4","text":"<p>c) Se ha establecido un flujo de toma de decisiones y escalado de incidentes interno y/o externo adecuados. d) Se han llevado a cabo las tareas de restablecimiento de los servicios afectados por un incidente hasta confirmar la vuelta a la normalidad.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ra4_2","title":"RA4","text":"<p>e) Se han documentado las acciones realizadas y las conclusiones que permitan mantener un registro de \u201clecciones aprendidas\u201d. f) Se ha realizado un seguimiento adecuado del incidente para evitar que una situaci\u00f3n similar se vuelva a repetir.</p> Contenidos I Slide RA4 2 Marco de Ciberseguridad 7 NIST - Marco de Ciberseguridad del NIST 8 Planes de respuesta 14 Respuesta a incidentes: ISO/IEC 27035 15 Respuesta a incidentes: SP800-61 16 Respuesta a incidentes: SP800-611. Preparaci\u00f3n 17 Respuesta a incidentes: SP800-612. Detecci\u00f3n 21 Respuesta a incidentes: SP800-613. An\u00e1lisis 25 Contenidos II Slide Respuesta a incidentes: SP800-614. Contenci\u00f3n 31 Respuesta a incidentes: SP800-615. Erradicaci\u00f3n 38 Respuesta a incidentes: SP800-616. Recuperaci\u00f3n 41 Respuesta a incidentes: SP800-617. Post-incidente (Lecciones aprendidas) 45 Playbook 52 Ejemplo Playbook 58 Bibliograf\u00eda 66 Actividad 68"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#marco-de-ciberseguridad","title":"Marco de Ciberseguridad","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#nist-marco-de-ciberseguridad-del-nist","title":"NIST - Marco de Ciberseguridad del NIST","text":"<p>NIST es el acr\u00f3nimo de Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda \\(National Institute of Standards and Technology\\,en ingl\u00e9s\\) dependiente del Departamento de Comercio de EE.UU.</p> <p>El  Marco de Ciberseguridad del NIST  ayuda a los negocios de todo tama\u00f1o a comprender mejor sus riesgos de ciberseguridad\\, administrar y reducir sus riesgos\\, y proteger sus redes y datos.</p> <p>La implementaci\u00f3n se realiza\\, siguiendo estas cinco f\u00e1ses:  identificaci\u00f3n protecci\u00f3n\\, detecci\u00f3n\\, respuesta y recuperaci\u00f3n .</p> <p>Identificaci\u00f3n.</p> <p>Identifica equipos\\, software y en general activos.</p> <p>Pol\u00edticas de seguridad en la que se identifique funciones y responsabilidades\\, de personal con acceso a datos delicados.</p> <p>Pasos a seguir para protegerse y limitar da\u00f1o ante ataques.</p> <p></p> <p>2. Protecci\u00f3n</p> <p>Implementar medidas de control\\,</p> <p>- acceso a dispositivos</p> <p>- codificar datos delicados</p> <p>- copias de seguridad</p> <p>- formaci\u00f3n</p> <p></p> <p>3. Detecci\u00f3n</p> <p>Monitorizar sistemas y dispositivos</p> <p>Investigar actividades inusual.</p> <p></p> <p>4. Respuesta</p> <p>Notificar a clientes\\, empleados en riesgo</p> <p>Mantener funcionando operaciones de negocio e investigar ataques</p> <p></p> <p>5. Recuperaci\u00f3n</p> <p>Reparar y restaurar los sistemas afectados por ataques.</p> <p>Mantener informados a empleados y clientes.</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-isoiec-27035","title":"Respuesta a incidentes: ISO/IEC 27035","text":"<p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Identificar\\, detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p> <p>Information security incident management guide</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61","title":"Respuesta a incidentes: SP800-61","text":"<p>Tomando como referencia el NIST.</p> <p>1. Preparaci\u00f3n</p> <p>2. Detecci\u00f3n</p> <p>3. An\u00e1lisis</p> <p>4. Contenci\u00f3n</p> <p>5. Erradicaci\u00f3n</p> <p>6. Recuperaci\u00f3n</p> <p>7. Actividad post-incidente</p> <p>SP800-61 Guide</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_1","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Preparaci\u00f3n</li> </ol> <p>El objetivo principal de esta fase es que  la organizaci\u00f3n se encuentre preparada para responder y actuar frente a un ciberataqu e\\, tomando en cuenta medidas de prevenci\u00f3n y aseguramiento de los sistemas para reducir la superficie de ataque.</p> <p>1.  Tener conformado un equipo de respuesta a incidentes \\, con la preparaci\u00f3n y experiencia para poder atender\\, dar seguimiento y soluci\u00f3n a cualquier incidente de seguridad.</p> <p>2.  Contar con un Plan de Respuesta ante Incidentes\\,  que defina de manera clara y secuencial \\(se recomienda hacerlo a manera de checklist\\)\\, los pasos a seguir ante un incidente de seguridad.</p> <p>3.  Tener preparado Hardware y Software para an\u00e1lisis de incidentes \\, tal como:</p> <p>Software \\(como EDR\\) y/o Hardware para la  __recolecci\u00f3n de datos forenses __ digitales y respaldo de informaci\u00f3n.</p> <p>Equipos  para tareas de  an\u00e1lisis de datos\\, an\u00e1lisis de tr\u00e1fico de red \\, redacci\u00f3n de reportes.</p> <p>Analizadores de paquetes y protocolos de red.</p> <p>4. __ __  __Tener identificada y documentada la infraestructura de TI __ de la organizaci\u00f3n:</p> <p>Diagramas de red y tener  __identificados los activos m\u00e1s importantes __ \\(como servidores cr\u00edticos\\).</p> <p>Tener clara y documentada la  __forma normal actual de operar __ \\(Baseline\\) de la red y aplicaciones.</p> <p>Tener identificada la  __lista de puertos utilizados __ en la red.</p> <p>Hashes  criptogr\u00e1ficos de archivos cr\u00edticos.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_2","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Detecci\u00f3n</li> </ol> <p>En esta fase juega un papel muy importante contar con una  herramienta de monitorizaci\u00f3n y detecci\u00f3n \\, que sea capaz de realizar correlaci\u00f3n de eventos\\, Machine Learning y an\u00e1lisis de comportamientos para alertar cualquier comportamiento inusual y sospechoso sobre la red.</p> <p>Implementar en estas herramientas los casos que tienen que darse en esas herramientas para detectar un determinado incidente.</p> <p>1.  Determinar si se trata de solo un evento \\(sin malas consecuencias para la organizaci\u00f3n\\) o en realidad es un incidente \\(con malas consecuencias para la organizaci\u00f3n\\, como violaci\u00f3n de pol\u00edticas o est\u00e1ndares de seguridad\\).</p> <p>2. Algunos de los  indicadores  o comportamientos m\u00e1s comunes que pueden ser  se\u00f1al de un incidente  son:</p> <p>Existencia de usuarios desconocidos.</p> <p>Procesos o conexiones de red extra\u00f1as.</p> <p>Conexiones de red a la escucha.</p> <p>Llaves de registro inusuales.</p> <p>Tareas agendadas desconocidas\\, o servicios corriendo.</p> <p>3. Tener en cuenta __ los vectores de ataque__ \\, tales como \\(se mencionan los m\u00e1s comunes\\):</p> <p>Dispositivos externos/removibles \\(usb\u2019s\\).</p> <p>Ataques de fuerza bruta \\(Attrition\\).</p> <p>Navegaci\u00f3n\\, Email \\(Spear phishing\\, Bussiness Email Compromise\\).</p> <p>Explotaci\u00f3n de vulnerabilidades \\(de sistema operativo\\, aplicaciones\\).</p> <p>P\u00e9rdida o robo de equipo.</p> <p>Ataques Man in the Middle \\(MIM\\).</p> <p>Depender\u00e1n del tipo de incidente para el que nos estemos preparando.</p> <p>4. Las fuentes m\u00e1s comunes de  indicadores de incidentes  son:</p> <p>Sistemas SIEM.</p> <p>Software Antimalware y Antispam.</p> <p>Soluciones de File Integrity Checking.</p> <p>Servicios de monitoreo e informaci\u00f3n de seguridad y amenazas de terceros\\, Open Source \\(OSINT\\)\\, Comerciales\\, Gubernamentales \\(como CERT\u2019s\\, ISAC\u2019s\\, Data Feeds\\).</p> <p>Logs de sistemas operativos\\, as\u00ed como dispositivos de red \\(como UTM\u2019s \\(IDS e IPS\\)\\, routers\\, switches).</p> <p>Personas dentro y fuera de la organizaci\u00f3n\\, afines al \u00e1rea de Ciberseguridad.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_3","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>An\u00e1lisis</li> </ol> <p>Contar con  personal  altamente calificado para __ analizar\\, investigar y determinar las acciones correctas __ a tomar frente un ciberataque de cualquier categor\u00eda.</p> <p>El equipo de respuesta a incidentes debe trabajar r\u00e1pido para analizar y validar cada incidente\\,  siguiendo un proceso predefinido y documentado cada paso realizado .</p> <p>El an\u00e1lisis inicial debe proveer informaci\u00f3n suficiente para priorizar \\(triage\\) actividades subsecuentes\\, como la contenci\u00f3n del incidente y an\u00e1lisis m\u00e1s profundo de los efectos y alcance del incidente.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Entender comportamientos normales:  El equipo de respuesta a incidentes debe analizar las redes\\, sistemas y aplicaciones de la organizaci\u00f3n\\, para entender cu\u00e1l es su comportamiento normal \\(Baseline\\)\\, de tal manera\\, cuando se presente un comportamiento anormal\\, sea m\u00e1s f\u00e1cil de identificar.</p> <p>Crear una pol\u00edtica de retenci\u00f3n de logs : Crear e implementar esta pol\u00edtica que especifique por cuanto tiempo  los logs deben de mantenerse es de gran utilidad en el an\u00e1lisis porque principalmente los incidentes pueden ser descubiertos despu\u00e9s de varios d\u00edas\\, semanas o meses despu\u00e9s de haber ocurrido \\(UTM\u2019s\\, Antimalware\\, Sistemas\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Realizar correlaci\u00f3n de eventos : La evidencia de un incidente puede ser registrada en logs de varios sistemas \\(UTM\u2019s\\, Antimalware\\, Sistemas operativos\\, aplicaciones\\). Recomendado uso de soluci\u00f3n SIEM.</p> <p>Mantener todos los relojes de los sistemas sincronizados:  Hacer uso de protocolos como NTP\\, con el fin de mantener la sincronizaci\u00f3n entre hosts y evitar que los eventos sean inconsistentes en lo que respecta a su hora de ocurrencia\\, lo que dificulta en gran medida en an\u00e1lisis de incidentes.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Hacer uso de motores de b\u00fasqueda en internet  para investigar incidentes.</p> <p>__Uso de analizadores de tr\u00e1fico de red para la recolecci\u00f3n de datos adicionales __ \\(como Wireshark\\).</p> <p>Filtrado de datos/logs : Una estrategia efectiva es filtrar categor\u00edas de datos significativos como eventos cr\u00edticos e ir avanzando paulatinamente al an\u00e1lisis de datos menos relevantes \\(aunque en muchas ocasiones este tipo de eventos revelan informaci\u00f3n importante sobre el incidente\\).</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Priorizaci\u00f3n del incidente : La priorizaci\u00f3n en el manejo del incidente es quiz\u00e1s\\, es el punto m\u00e1s cr\u00edtico en la toma de decisiones en el proceso del manejo de incidentes.</p> <p>Este debe ser priorizado en basandose en datos relevantes\\, tales como:</p> <p>Impacto  funcional  del incidente: Ninguno\\, Bajo\\, Medio\\, Alto.</p> <p>Impacto del incidente en la  informaci\u00f3n de la organizaci\u00f3n : Ninguno\\, Violaci\u00f3n de Propiedad\\, Perdida de Integirdad.</p> <p>Recuperabilidad  del incidente: Regular\\, No Recuperable.</p> <p>Las siguientes son recomendaciones para hacer el an\u00e1lisis de incidentes m\u00e1s f\u00e1ciles y efectivas:</p> <p>Notificaci\u00f3n de incidentes:  Definir los contactos y los medios por los cuales el personal debe reportar cualquier incidente de seguridad.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_4","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Contenci\u00f3n</li> </ol> <p>1. Una parte esencial de esta etapa es la  toma de las decisiones \\(por ejemplo\\, apagar un sistema\\, desconectarlo de la red\\, deshabilitar ciertas funciones\\, etc\\). El principal objetivo es  prevenir un mayor da\u00f1o y a su vez mantener las evidencias intactas .</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente . Las organizaciones deben  crear estrategias de contenci\u00f3n por separado\\, para cada tipo de incidente  mayor\\, con criterios documentados y claros\\, para facilitar la toma de decisiones.</p> <p>Las estrategias de contenci\u00f3n var\u00edan de acuerdo al tipo de incidente .</p> Incidente Ejemplo Estrategia de contenci\u00f3n Acceso no autorizado Sucesivos intentos fallidos de login Bloqueo de cuenta C\u00f3digo Malicioso Infecci\u00f3n con virus Desconexi\u00f3n de la red del equipo afectado Acceso no autorizado Compromiso del Root Apagado del sistema Reconocimiento Scanning de puertos Incorporaci\u00f3n de reglas de filtrado en el firewall <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Da\u00f1o potencial y robo de recursos.</p> <p>Necesidad de preservaci\u00f3n de evidencia. \\(Apago o no la m\u00e1quina?\\)</p> <p>Disponibilidad de servicios \\(por ejemplo\\, conectividad de red\\, servicios prove\u00eddos a terceros\\).</p> <p>Tiempo y recursos necesarios para implementar la estrategia.</p> <p>Criterios para determinar una estrategia apropiada incluyen:</p> <p>Efectividad de la estrategia.</p> <p>Duraci\u00f3n de la soluci\u00f3n \\(workaround de emergencia a llevar a cabo por 4 horas\\, workaround temporal a borrar en 2 semanas\\, soluci\u00f3n permanente\\).</p> <p>En algunos casos se recomienda redirigir al atacante a un sandbox o honeynet\\, para que la organizaci\u00f3n pueda monitorear las actividades del atacante\\, usualmente para reunir evidencia adicional.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>a) Es importante  documentar claramente como toda la evidencia \\, incluyendo sistemas comprometidos\\,  ha sido preservada . Para esto es necesario instrumentar una Cadena de Custodia\\, que documente cuando cualquier evidencia pase de una persona a otra y que incluya detalle y firmas de cada parte involucrada.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>b) La  evidencia debe ser conservada a detall e\\, incluyendo los siguientes datos:</p> <p>Informaci\u00f3n de identificaci\u00f3n \\(ubicaci\u00f3n\\, n\u00fameros seriales\\, modelo\\, Hostname\\, IP\\, MAC del equipo\\).</p> <p>Nombre\\, cargo\\, no. Telef\u00f3nico de cada individuo involucrado en la recolecci\u00f3n o manejo de evidencia durante la investigaci\u00f3n.</p> <p>Fecha y hora de cada manipulaci\u00f3n de evidencia.</p> <p>Ubicaciones de donde fue guardada la evidencia.</p> <p>2. Recolecci\u00f3n y manejo de  evidencias</p> <p>c) __ __  Identificaci\u00f3n de los hosts atacados.  Los siguientes componentes describen las actividades m\u00e1s comunes para la identificaci\u00f3n de hosts atacados:</p> <p>Validar la direcci\u00f3n IP del host atacante.</p> <p>Investigaci\u00f3n del host atacante a trav\u00e9s de motores de b\u00fasqueda \\(search engines\\).</p> <p>Uso de bases de datos de incidentes: IOC\\, Threat Intelligence Platforms</p> <p>Monitorear los canales de comunicaci\u00f3n del atacante.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_5","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Erradicaci\u00f3n</li> </ol> <p>Posterior a la contenci\u00f3n de un incidente\\,  la erradicaci\u00f3n es necesaria \\(aunque no siempre o se realiza en la etapa de recuperaci\u00f3n\\) y es importante  identificar todos los hosts afectados  dentro de la organizaci\u00f3n para que puedan ser recuperados.</p> <p>Algunas de las acciones a realizar en esta etapa son:</p> <p>Eliminar malware.</p> <p>Eliminar usuarios maliciosos o vulnerados.</p> <p>Parcheo de sistemas para mitigar vulnerabilidades utilizadas.</p> <p>Crear nuevas reglas en las soluciones de seguridad.</p> <p>Aplicar un an\u00e1lisis de vulnerabilidades a los sistemas y la red \\(Pen test\\).</p> <p>Depender\u00e1n del tipo de incidente.</p> <p>Las acciones a realizar en esta etapa  d epender\u00e1n del tipo de incidente.  Algunas estrategias de erradicaci\u00f3n de incidentes:</p> Incidente Ejemplo Estrategia de erradicaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_6","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Recuperaci\u00f3n</li> </ol> <p>En esta etapa\\, los administradores:</p> <p>restauran  __ los __  sistemas  __ a su operaci\u00f3n normal__ \\,</p> <p>confirman  __ si est\u00e1n __  funcionando  __ de manera correcta__  y</p> <p>\\(si aplica\\) se  remedian vulnerabilidades  para prevenir incidentes similares.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Restaurar sistemas desde respaldos limpios.</p> <p>Restaurar sistemas desde cero.</p> <p>Instalaci\u00f3n de parches.</p> <p>Cambiar contrase\u00f1as en sistemas locales y recursos de red.</p> <p>Recuperaci\u00f3n incluye acciones tales como:</p> <p>Administradores deben monitorear sistemas para asegurarse de su funcionamiento normal.</p> <p>Continuar probando los sistemas restaurados.</p> <p>Documentar los pasos llevados a cabo.</p> <p>Recuperaci\u00f3n permite a la contenci\u00f3n empezar de nuevo\\, si la actividad maliciosa es detectada de nueva cuenta.</p> <p>Las estrategias de recuperaci\u00f3n depender\u00e1n del incidente</p> Incidente Ejemplo Estrategia de recuperaci\u00f3n DoS (denegaci\u00f3n de servicio) SYN Flood Restituci\u00f3n del servicio ca\u00eddo Virus Gusano en la red Correcci\u00f3n de efectos producidos. Restauraci\u00f3n de Backups Vandalismo Defacement a un sitio web Reparar el sitio web Intrusi\u00f3n Instalaci\u00f3n de un Rootkit Reinstalaci\u00f3n del equipo y recuperaci\u00f3n de datos"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#respuesta-a-incidentes-sp800-61_7","title":"Respuesta a incidentes: SP800-61","text":"<ol> <li>Post-incidente (Lecciones aprendidas)</li> </ol> <p>Una de las partes m\u00e1s importantes de la Respuesta a Incidentes es tambi\u00e9n com\u00fanmente omitida:  aprender y mejorar . El equipo de respuesta a incidentes debe evolucionar\\, tomando conciencia y conocimiento de las nuevas amenazas\\, tecnolog\u00edas y lecciones aprendidas.</p> <p>Mantener una reuni\u00f3n de \u201cLecciones Aprendidas\u201d\\, con todas las partes involucradas en un incidente\\, puede ayudar en gran medida a mejorar las medidas de seguridad y el propio proceso de respuesta a incidentes.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 sucedi\u00f3 exactamente y en qu\u00e9 momento \\(fechas y horas\\)?</p> <p>\u00bfC\u00f3mo realiz\u00f3 su trabajo el equipo en la atenci\u00f3n del incidente? \u00bfSe siguieron los procesos documentados? \u00bfFueron los adecuados?</p> <p>\u00bfQu\u00e9 informaci\u00f3n fue necesitada en primera instancia?</p> <p>\u00bfSe tomaron pasos o acciones que pudieron haber inhibido la recuperaci\u00f3n?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 podr\u00eda hacer el equipo de manera diferente la pr\u00f3xima vez que ocurra un incidente similar?</p> <p>\u00bfC\u00f3mo podr\u00eda ser mejorado el mecanismo de compartici\u00f3n de informaci\u00f3n con otras organizaciones?</p> <p>\u00bfQu\u00e9 acciones correctivas se pueden aplicar para prevenir incidentes similares futuros?</p> <p>\u00bfQu\u00e9 indicadores deben ser observados en el futuro para detectar incidentes similares?</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>\u00bfQu\u00e9 herramientas o recursos adicionales se necesitan para detectar\\, analizar y mitigar futuros incidentes?</p> <p>Otra actividad importante en esta etapa es crear un  \u201cInforme de seguimiento del Incidente\u201c . Este informe podr\u00e1 ser usado como referencia para ayudar al manejo de futuros incidentes similares.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Uso de la informaci\u00f3n recolectada : El estudio de las caracter\u00edsticas del incidente puede revelar la existencia de vulnerabilidades y amenazas sistem\u00e1ticas\\, as\u00ed como cambios en las tendencias de incidentes. Esta informaci\u00f3n puede ser tomada en cuenta para la realizaci\u00f3n del proceso de an\u00e1lisis de riesgos\\, lo que a su vez llevar\u00e1 a selecci\u00f3n e implementaci\u00f3n de controles adicionales.</p> <p>Las organizaciones deben focalizarse en recolectar informaci\u00f3n accionable\\, en lugar de recabar informaci\u00f3n simplemente porque est\u00e1 disponible.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>M\u00e9tricas sugeridas para la recolecci\u00f3n de incidentes son:</p> <p>N\u00famero de incidentes atendidos: Se recomienda enfocarse en los incidentes de mayor relevancia o que necesitaron de un mayor esfuerzo por parte del equipo de respuesta a incidentes para su resoluci\u00f3n.</p> <p>Tiempo utilizado por cada incidente.</p> <p>An\u00e1lisis objetivo de cada incidente: Con esto se puede determinar qu\u00e9 tan efectiva fue la respuesta y resoluci\u00f3n del mismo.</p> <p>Preguntas a ser respondidas en estas reuniones son:</p> <p>Retenci\u00f3n de la evidencia : Las organizaciones deben establecer una pol\u00edtica para definir por cuanto tiempo se resguardar\u00e1 la evidencia de un incidente. GRS \\(General Records Schedule\\)\\, especifica que los registros de incidentes deben resguardarse por un periodo de 3 a\u00f1os.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#playbook","title":"Playbook","text":"<p>Playbook :  Hace referencia a un documento de instrucciones elaborado por un cuerpo t\u00e9cnico\\, en el que se describen las distintas jugadas que se van a utilziar. Tiene sentido\\, si consideramos la respuesta a incidentes como un conjunto de acciones a realizar como respuesta al incidente\\, las cuales\\, por cierto\\, deben estar en perfecta sincronizaci\u00f3n dentro de la organizaci\u00f3n. Estas acciones est\u00e1n centradas en dar respuesta a un incidente concreto.</p> <p></p> <p>Un  SOC  con un  playbook  tiene la ventaja de poder centrarse solo en las alertas que importan\\, y en las  acciones muy dirigidas a solucionar el problema .</p> <p>El prop\u00f3sito de un playbook es proporcionar a todos los miembros de una organizaci\u00f3n una  clara comprensi\u00f3n de sus responsabilidades  respecto de las normas de ciberseguridad y las pr\u00e1cticas aceptadas antes\\, durante y despu\u00e9s de un incidente de seguridad.</p> <p>Todas las organizaciones tienen planes para diferentes incidentes que podr\u00edan afectar la resistencia del negocio si no est\u00e1n preparados.</p> <p>Una vez que el equipo de respuesta a incidentes est\u00e1 definido y es consciente de su posici\u00f3n\\, es necesario poner en marcha  los pasos clave de acci\u00f3n de un incidente de ciberseguridad . Estos incluyen</p> <p>Detecci\u00f3n de incidentes</p> <p>Acciones de respuesta</p> <p>Comunicaci\u00f3n</p> <p>Es un\u00e1nime en distintos organismos internacionales la necesidad de al menos  contar Playbook para los casos m\u00e1s conocidos de Ciberataques .</p> <p></p> <p>Preparaci\u00f3n : \u201cTodo lo necesario para ejecutar el playbook\u201d</p> <p>Identificaci\u00f3n : \u201cRecopilaci\u00f3n y an\u00e1lisis de toda la informaci\u00f3n relativa al incidente\u201d</p> <p>Contenci\u00f3n : \u201cAcciones inmediata para contener el incidente ej: Aislar de la red el equipo\u201d</p> <p>Remedio : \u201cAcciones que reparar el da\u00f1o y eviten su repetici\u00f3n\u201d</p> <p>Recuperaci\u00f3n : \u201cAcciones para restablecer el servicio\u201d</p> <p>Repercusiones : \u201cDeber\u00eda de redactarse un informe de crisis que ser\u00e1 distribuido entre todos los stakeholders\u201d</p> <p>Mejora continua : \u201cComo respondemos mejor\u201d</p> <p>\u00bfQu\u00e9 playbook necesita mi empresa?\\, b\u00e1sicamente deben conversar con su matriz de riesgos que contemple Ciberriesgos y est\u00e9 acorde al giro del negocio.</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ejemplo-playbook","title":"Ejemplo Playbook","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#ejemplo-playbook-ejemplo-de-infeccion-de-gusanos","title":"Ejemplo Playbook: Ejemplo de infecci\u00f3n de gusanos","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.avsoftware.com.mx/respuesta-a-incidentes-de-ciberseguridad-guia-de-nist/#1603043331556-26ebd2a3-9ac2</p> <p>https://blog.netdatanetworks.com/que-hacer-en-caso-de-un-ciberataque</p> <p>https://playbooks.flexibleir.com/</p>"},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#actividad","title":"Actividad","text":""},{"location":"section2/u05/teoria/IS-U5.1.1.-PlanesDeRespuesta/#actividad-i","title":"Actividad I","text":"<p>Traducir la plantilla en castellano:</p> <p>https://github.com/IES-Rafael-Alberti/incident-response-plan-plantilla</p> <p>Crear un plan de respuesta a incidentes partiendo de la plantilla.</p> <p>Crear e incorporar un conjunto de playbook b\u00e1sicos.</p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/","title":"IS U5.3.1. Ciberresiliencia","text":"<p>Ciberresiliencia</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#ra4","title":"RA4","text":"<p>b) Se han preparado respuestas ciberresilientes ante incidentes que permitan seguir prestando los servicios de la organizaci\u00f3n y fortaleciendo las capacidades de identificaci\u00f3n, detecci\u00f3n,   prevenci\u00f3n, contenci\u00f3n, recuperaci\u00f3n y cooperaci\u00f3n con terceros.</p> <p> working in progress </p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#indice","title":"\u00cdNDICE","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#planes-de-respuesta","title":"Planes de respuesta","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#ciberresiliencia","title":"Ciberresiliencia","text":"<p>Resiliencia \\, seg\u00fan RAE : En psicolog\u00eda\\, capacidad que tiene una persona para superar circunstancias traum\u00e1ticas como la muerte de un ser querido\\, un accidente\\, etc.</p> <p>Resiliencia empresarial : se trata de la capacidad de una empresa para afrontar adversidades y recuperar su estado inicial. Esto pone de manifiesto la fortaleza de una organizaci\u00f3n para adaptarse a los cambios.</p> <p>Cuando la empresa entra en el terreno digital\\, surge la  ciberresiliencia</p> <p>Tal y como define el Instituto Nacional de Ciberseguridad \\(INCIBE\\)\\, la  ciberresiliencia  es:</p> <p>_ \"La capacidad para resistir\\, proteger y defender el uso del ciberespacio de los atacantes\"._</p> <p></p> <p>Es muy com\u00fan confundir conceptos como ciberseguridad y ciberresiliencia. Aunque el enfoque es similar\\, los procesos difieren entre s\u00ed. Estas son las principales diferencias:</p> <p>Ciberseguridad : conjunto de tecnolog\u00edas inform\u00e1ticas y medidas preventivas destinadas a  proteger la empresa ante cualquier brecha de seguridad \\, ya sea robo de datos o acceso a la red corporativa. Por ejemplo\\, el cifrado de datos.</p> <p>Ciberresiliencia : este concepto unifica la tecnolog\u00eda de ciberseguridad y la resiliencia empresarial con el objetivo de gestionar un ciberataque sin fallos y\\, sobre todo\\,  ofrecer continuidad del negocio ante un ataque .</p> <p> \u201c  _El mundo nos rompe a todos... _ </p> <p> despu\u00e9s algunos son fuertes en los lugares rotos. </p> <p>Ernest Hemingway</p> <p>\u00bfCausas por las que una empresa no es todo lo resiliente que desear\u00eda ante un ciberatque?</p> <p></p> <p>Las empresas\\, en general  est\u00e1n poco preparadas  para resistir frente a este tipo de ataques\\, debido principalmente a:</p> <p>Falta de medida s t\u00e9cnicas para mitigarlos\\,</p> <p>Poca preparaci\u00f3n  de los sistemas para detener este tipo de ataques\\,</p> <p>Falta de formaci\u00f3n o de recursos  para hacerles frente o</p> <p>Falta de pruebas  para evaluar la capacidad real de la organizaci\u00f3n ante cualquier tipo de ataque externo.</p> <p>La mayor\u00eda de organizaciones no est\u00e1n cien por cien preparadas para afrontar ataques inform\u00e1ticos. Esto puede ser por diversas razones:</p> <p>Una  cultura  organizacional que no se centra en la ciberseguridad.</p> <p>Falta de  inversi\u00f3n  en tecnolog\u00edas espec\u00edficas para la detecci\u00f3n y prevenci\u00f3n de malwares.</p> <p>Falta de  formaci\u00f3n  en ciberseguridad.</p> <p>\u00bfQue necesitamos para conseguir ser resilientes?</p> <p></p> <p>Las organizaciones deben estar  preparadas para</p> <p>dar respuestas r\u00e1pidas a este tipo de ataques\\, permitiendo que los servicios que prestan no se vean interrumpidos\\,</p> <p>__fortaleciendo sus capacidades __ de</p> <p>identificaci\u00f3n\\, detecci\u00f3n\\, prevenci\u00f3n\\, contenci\u00f3n\\, recuperaci\u00f3n\\, cooperaci\u00f3n y mejora continua contra las ciberamenazas.</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#pasos","title":"Pasos","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#implementar-la-ciberresiliencia","title":"Implementar la ciberresiliencia","text":"<p>\u00bfC\u00f3mo implementar la ciberresiliencia?</p> <p>Dada la diversidad de las organizaciones\\, su complejidad interna y las interdependencias entre ellas\\, no se puede generalizar una forma de implementar la ciberresiliencia.</p> <p>En cualquier caso\\, es fundamental iniciar un proceso de adaptaci\u00f3n y considerar que se debe extender a todo nuestro ecosistema \\(partners\\, proveedores\\, clientes\\,\u2026\\).</p> <p>Se deben establecer los siguientes pasos:</p> <p>Priorizar  los  servicios \\, seg\u00fan el  impacto \\(econ\u00f3mico\\, medioambiental\\, p\u00fablico y social\\, personas afectadas\\) que su p\u00e9rdida o deterioro pueda ocasionar.</p> <p>Conocer y priorizar  seg\u00fan su  criticidad  las  amenazas  que afectan a los servicios.</p> <p>Implementar  acciones preventivas  contra actuales y futuras amenazas.</p> <p>Desarrollar  procesos de remediaci\u00f3n  para minimizar el da\u00f1o que pueden producir los incidentes.</p> <p>__Detectar vulnerabilidades __ continuamente y remediarlas para reducir la superficie de ataque.</p> <p>Desarrollar y mantener procesos de comunicaci\u00f3n  dentro de la empresa.</p> <p>Ejecutar constantemente  __acciones de mejora __ que minimicen los riesgos\\, y repetir el ciclo de pasos para la mejora continua.</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#analisis-de-evidencias-e-investigacion-del-incidente","title":"An\u00e1lisis de evidencias e investigaci\u00f3n del incidente","text":"<p>5. Recuperaci\u00f3n</p> <p></p> <p>Tomando como referencia la ISO/IEC 27035.</p> <p>1. Planificaci\u00f3n y preparaci\u00f3n</p> <p>2. Detecci\u00f3n y reporte</p> <p>3. Valoraci\u00f3n y decisi\u00f3n</p> <p>4. Respuesta</p> <p>5. Lecciones aprendidas</p> <p>6. Cierre del incidente</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#pasos_1","title":"Pasos","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#identificacion-de-activos","title":"Identificaci\u00f3n de activos","text":"<p>Un m\u00e9todo de clasificaci\u00f3n de activos que simplifica el proceso consiste en dividirlos en 6 categor\u00edas diferentes\\, tal y como se muestra en la imagen.</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#bibliografia","title":"Bibliograf\u00eda","text":"<p>https://www.incibe.es/protege-tu-empresa/blog/ciberresiliencia-marco-medicion</p> <p>https://www.incibe.es/extfrontinteco/img/File/Estudios/int_ciber_resiliencia_marco_medicion.pdf</p> <p>https://www.incibe-cert.es/blog/ciberresiliencia-clave-sobreponerse-los-incidentes</p> <p>https://agenciab12.com/noticia/que-es-ciberresiliencia-como-influye-seguridad</p> <p>https://agenciab12.com/noticia/medidas-prevencion-ciberataque</p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#actividad","title":"Actividad","text":""},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#actividad-ii","title":"Actividad II","text":"<p>Recopilaci\u00f3n y an\u00e1lisis de evidencias sobre un incidente:</p> <p> 3.abc.01 - Recolecci\u00f3n\\, almacenamiento y an\u00e1lisis </p> <p></p>"},{"location":"section2/u05/teoria/IS-U5.3.1.-Ciberresiliencia/#_1","title":"IS U5.3.1. Ciberresiliencia","text":""},{"location":"section2/u06/","title":"UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba te\u00f3rica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>Bloque 5 - Detecci\u00f3n y documentaci\u00f3n de incidentes de ciberseguridad:</p> <ul> <li>Desarrollar procedimientos de actuaci\u00f3n para la notificaci\u00f3n de incidentes.</li> <li>Notificaci\u00f3n interna de incidentes.</li> <li>Notificaci\u00f3n de incidentes a quienes corresponda.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 5. Detecta y documenta incidentes de ciberseguridad siguiendo procedimientos de actuaci\u00f3n establecidos.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha desarrollado un procedimiento de actuaci\u00f3n detallado para la notificaci\u00f3n de incidentes de ciberseguridad en los tiempos adecuados.</li> <li>b) Se ha notificado el incidente de manera adecuada al personal interno de la organizaci\u00f3n responsable de la toma de decisiones.</li> <li>c) Se ha notificado el incidente de manera adecuada a las autoridades competentes en el \u00e1mbito de la gesti\u00f3n de incidentes de ciberseguridad en caso de ser necesario.</li> <li>d) Se ha notificado formalmente el incidente a los afectados, personal interno, clientes, proveedores, etc., en caso de ser necesario.</li> <li>e) Se ha notificado el incidente a los medios de comunicaci\u00f3n en caso de ser necesario.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#como-impartir-la-unidad","title":"C\u00f3mo impartir la unidad","text":"<p>Esta es la secci\u00f3n m\u00e1s interesante, y se incluye c\u00f3mo trabajar la unidad, haciendo referencia a herramientas, gu\u00edas, materiales y recursos, de manera individual para cada criterio.</p> <ul> <li>Criterio de evaluaci\u00f3n a: para comprender el procedimiento de notificaci\u00f3n de incidentes, Incibe pone a nuestra disposici\u00f3n la gu\u00eda nacional de notificaci\u00f3n y gesti\u00f3n de ciberincidentes.</li> <li>Criterio de evaluaci\u00f3n c: uno de los organismos a los que hay que notificar es incibe, y en la web indica c\u00f3mo.</li> </ul>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#teoria","title":"Teor\u00eda","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#ejercicios","title":"Ejercicios","text":"<p>Por hacer.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#como-evaluar-la-unidad","title":"C\u00f3mo evaluar la unidad","text":"","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#practica-de-la-unidad","title":"Pr\u00e1ctica de la unidad","text":"<p>En esta secci\u00f3n se incluye una propuesta de pr\u00e1ctica o pr\u00e1cticas con los que evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section2/u06/#controles-de-ejemplo","title":"Controles de ejemplo","text":"<p>En esta secci\u00f3n se incluyen controles de ejemplo para evaluar la unidad.</p>","tags":["Incidentes","Ciberseguridad"]},{"location":"section3/","title":"Entornos de desarrollo","text":"<p>Se describe el m\u00f3dulo profesional de Entornos de Desarrollo. Esta informaci\u00f3n se divide en:</p> <ul> <li>Una primera secci\u00f3n de Informaci\u00f3n general en la que se hace una propuesta de temario, con la relaci\u00f3n de unidades y los resultados de aprendizaje asociados, asi como las posibles fechas en las que se impartir\u00edan.</li> <li>Una segunda secci\u00f3n con Materiales relacionados con el modulo, como Fuentes de informaci\u00f3n, libros recomendados, recursos y herramientas para aplicar conceptos.</li> </ul> <p>Todo el contenido est\u00e1 supeditado a mejora, de hecho est\u00e1 en construcci\u00f3n, y por tanto es solo una propuesta que ir\u00e1 cambiando, espero que a mejor. Si tienes una propuesta de mejora, no te cortes y p\u00e1samela ;-).</p>","tags":["EDES","Software"]},{"location":"section3/#informacion","title":"Informaci\u00f3n","text":"","tags":["EDES","Software"]},{"location":"section3/#propuesta-de-temario","title":"Propuesta de temario","text":"<p>En los siguientes enlaces se encuentran los contenidos, resultados de aprendizaje, criterios de evaluaci\u00f3n y herramientas para trabajarlos y poder evaluarlos. Es solo una propuesta, pero puede servir de punto de partida inicial.</p> <ol> <li>Introducci\u00f3n al desarrollo de software</li> </ol>","tags":["EDES","Software"]},{"location":"section3/#relacion-de-unidades-y-resultados-de-aprendizaje","title":"Relaci\u00f3n de unidades y resultados de aprendizaje","text":"Unidad UD 1 UD 2 UD 3 UD 4 UD 5 UD 6 RA 1 X RA 2 X RA 3 X RA 4 X RA 5 X RA 6 X","tags":["EDES","Software"]},{"location":"section3/#relacion-de-unidades-y-fechas","title":"Relaci\u00f3n de unidades y fechas","text":"<p>El curso tiene un total de 24 semanas (720 horas). La relaci\u00f3n propuesta entre unidades y semanas es la siguiente:</p> Unidad Semanas 1 Semana 1 - 2 2 Semana 2 - 7 3 Semana  - 4 Semana  - 5 Semana  - 6 Semana  -","tags":["EDES","Software"]},{"location":"section3/#materiales","title":"Materiales","text":"","tags":["EDES","Software"]},{"location":"section3/#fuentes","title":"Fuentes","text":"<ul> <li>Rafael del Rio: Utilizado para la estructura de la p\u00e1gina de presentaci\u00f3n del m\u00f3dulo.</li> <li>Jos\u00e9 Antonio Mu\u00f1oz Jim\u00e9nez: Utilizado en parte del contenido del m\u00f3dulo.</li> </ul>","tags":["EDES","Software"]},{"location":"section3/#bibliografia","title":"Bibliograf\u00eda","text":"<ul> <li>Kenneth C. Louden. \u201cLenguajes de programaci\u00f3n: Principios y pr\u00e1ctica\u201d. Paraninfo, 2004</li> <li>Roger S. Pressman. \u201cIngenier\u00eda del software: Un enfoque pr\u00e1ctico 7a Ed.\u201d. McGraw Hill, 2010</li> <li>Carlos Bl\u00e9. \u201cDise\u00f1o \u00e1gil con TDD\u201d. iExpertos, 2010</li> <li>Kent Beck. \u201cTest driven development by example\u201d. Addison Wesley, 2002</li> <li>Tobias Mayer &amp; Alan Cyment. \u201cPor un Scrum popular: Notas para una revoluci\u00f3n Agile\u201d. Dymaxicon, 2014</li> <li>Henrik Kniberg. \u201cScrum y XP desde las trincheras\u201d. C4Media, 2007</li> <li>Federico Toledo. \u201cIntroducci\u00f3n a las pruebas de S.I.: Un enfoque pr\u00e1ctico\u201d. Abstracta, 2014</li> <li>Martin Fowler. \u201cRefactoring: Improving the design of existing code\u201d. Alhambra mexicana, 1999</li> <li>Martin Fowler y Kendall Scott. \u201cUML gota a gota\u201d. Alhambra mexicana, 1999</li> <li>Robert C. Martin. \u201cUML para programadores Java\u201d. Pearson, 2004</li> <li>Cat\u00e1logo de patrones de refactorizaci\u00f3n</li> <li>Refactoring Guru</li> <li>Patrones de dise\u00f1o</li> <li>Gu\u00eda definitiva de Scrum</li> <li>Git la gu\u00eda sencilla</li> <li>Git en entornos distribuidos</li> <li>Java, generaci\u00f3n de documentaci\u00f3n</li> <li>Python Documentation Generator, Sphinx</li> <li>UML, gu\u00eda digitales/digitalguide/paginas-web/desarrollo-web/uml-lenguaje-unificado-de-modelado-orientado-a-objetos/)</li> <li>eduScurm, \u00a1Colaboraci\u00f3n que te da alas!</li> </ul>","tags":["EDES","Software"]},{"location":"section3/#recursos","title":"Recursos","text":"<ul> <li>Plataforma de e-learning: Moodle,</li> <li>Paquete ofim\u00e1tico: LibreOffice</li> <li>Sistema operativo: Windows 10 y Linux (Ubuntu u otra distribuci\u00f3n similar)</li> <li>Entornos integrados de desarrollo y Editores: Visual Studio Code, IntelliJ, PyCharm, Sublime.</li> <li>Sistema de control de versiones: git, github</li> <li>Programas para el dise\u00f1o de diagramas UML (DIA, UMLet, online LucidChart,\u2026)</li> </ul>","tags":["EDES","Software"]},{"location":"section3/#contenido","title":"Contenido","text":"<p>T\u00edpicamente se intenta tener los siguientes apartados en cada uno de los m\u00f3dulos profesionales:</p> <ul> <li>Teor\u00eda.</li> <li>Presentaciones.</li> <li>Ejercicios.</li> <li>Pr\u00e1cticas evaluables.</li> <li>Ex\u00e1menes</li> </ul>","tags":["EDES","Software"]},{"location":"section3/u01/","title":"UD 1 - Introducci\u00f3n al desarrollo de software","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["EDES","Software"]},{"location":"section3/u01/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["EDES","Software"]},{"location":"section3/u01/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 1. Reconoce los elementos y herramientas que intervienen en el desarrollo de un programa inform\u00e1tico, analizando sus caracter\u00edsticas y las fases en las que act\u00faan hasta llegar a su puesta en funcionamiento.</p>","tags":["EDES","Software"]},{"location":"section3/u01/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se ha reconocido la relaci\u00f3n de los programas con los componentes del sistema inform\u00e1tico, memoria, procesador, perif\u00e9ricos, entre otros.</li> <li>b) Se han clasificado los lenguajes de programaci\u00f3n.</li> <li>c) Se han diferenciado los conceptos de c\u00f3digo fuente, objeto y ejecutable.</li> <li>d) Se han reconocido las caracter\u00edsticas de la generaci\u00f3n de c\u00f3digo intermedio para su ejecuci\u00f3n en m\u00e1quinas virtuales.</li> <li>e) Se ha evaluado la funcionalidad ofrecida por las herramientas utilizadas en programaci\u00f3n.</li> <li>f) Se ha diferenciado el funcionamiento de los distintos tipos de traductores de lenguajes ante el c\u00f3digo fuente de un programa.</li> <li>g) Se han identificado las fases de desarrollo de una aplicaci\u00f3n inform\u00e1tica.</li> </ul>","tags":["EDES","Software"]},{"location":"section3/u01/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir esta unidad teniendo en cuenta la normativa del curso</p> <p>La unidad pertenece al bloque 1 Desarrollo de software</p> <ul> <li>U1: Introducci\u00f3n al desarrollo del software.</li> </ul> <p>Durante la unidad 1, veremos:  </p> <ul> <li>La relaci\u00f3n de los programas con los componentes del sistema inform\u00e1tico.  </li> <li>Las diferencias entre c\u00f3digo fuente, objeto y ejecutable.  </li> <li>Algunos lenguajes de programaci\u00f3n.  </li> <li>Las funcionalidades ofrecidas por las herramientas para el desarrollo de software.  </li> <li>El funcionamiento de los traductores.  </li> <li>Las fases de desarrollo de una aplicaci\u00f3n inform\u00e1tica.  </li> </ul>","tags":["EDES","Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica001/","title":"Pr\u00e1ctica 1.1: Lenguajes de programaci\u00f3n","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica001/#relacion-11","title":"Relaci\u00f3n 1.1","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica001/#descripcion","title":"Descripci\u00f3n","text":"<p>Haciendo uso de los distintos Rankings de lenguajes de programaci\u00f3n y p\u00e1ginas de b\u00fasqueda de empleo como infojobs, tecnoempleo, linkedin localiza los 5 lenguajes m\u00e1s usados y los 5 lenguajes con m\u00e1s ofertas de empleo respectivamente. A\u00f1ade la informaci\u00f3n m\u00e1s relevante sobre estos lenguajes, m\u00ednimo responde a las siguientes preguntas:</p> <ol> <li>\u00bfQu\u00e9 paradigmas destacan en el lenguaje?</li> <li>\u00bfCu\u00e1l es la posici\u00f3n y evoluci\u00f3n de este lenguaje durante los \u00faltimos 2 a\u00f1os?</li> <li>\u00bfPara que se usa mayoritariamente este lenguaje</li> <li>\u00bfQu\u00e9 tipo de traductor es m\u00e1s habitual se usa para poder ejecutar los programas realizados en este lenguaje?</li> <li>\u00bfExisten otras opciones de traducci\u00f3n para este lenguaje?</li> <li>\u00bfCu\u00e1l es el traductor m\u00e1s usado para este lenguaje y que caracter\u00edsticas tiene?</li> </ol> <p>Finaliza con una conclusiones que hayas sacado sobre el lenguaje mas usados y traductores asociados.</p>"},{"location":"section3/u01/practica/EDES-U1.-Practica001/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA1.b No identifica\u00a0todos los lenguajes Identifica lenguajes con informaci\u00f3n completa. Identifica lenguajes con informaci\u00f3n adicional. RA1.f No identifica adecuadamente el traductor Identifica una sola. Identifica traductores con informaci\u00f3n adicional."},{"location":"section3/u01/practica/EDES-U1.-Practica001/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Es un trabajo individual.</li> <li>Se realiza en un documento de google drive.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Fecha</li> <li>Tu nombre</li> <li>Identificaci\u00f3n del curso y grupo.</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 1_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> <li>https://www.digitallearning.es/blog/rankings-de-lenguajes-de-programacion/</li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/","title":"Pr\u00e1ctica 1.2: Herramientas para generar programa","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica002/#relacion-12","title":"Relaci\u00f3n 1.2","text":""},{"location":"section3/u01/practica/EDES-U1.-Practica002/#descripcion","title":"Descripci\u00f3n","text":"<p>Para dos de los siguientes lenguajes: a. Grupo 1 (exceptuando Java, kotlin): Elige uno de los nombrados en el ejercicio 1.1 (Excepto Python) b. Grupo 2: Elige uno entre Java ,Kotlin, .Net.</p> <p>Escribe un programa b\u00e1sico, que pregunte el nombre del usuario y muestre un mensaje \"Hola <code>usuario</code>. Este programa esta hecho en <code>lenguaje</code>\".</p> <p>Responde a las siguientes preguntas:</p> <ol> <li>\u00bfPara el lenguaje del grupo 1: Qu\u00e9 herramientas has utilizado durante todo el proceso de creaci\u00f3n y hasta la ejecuci\u00f3n del programa (Sistema Operativo, Editor, compilador/int\u00e9rprete, enlazador, para ejecutarlo)?</li> <li>Diferencia entre el c\u00f3digo fuente, c\u00f3digo objeto y el ejecutable que has generado. Describe el proceso y el nombre que han tomado los distintos archivos.</li> <li>En lo que respecta al dispositivo en el que se ejecuta el programa, \u00bfQu\u00e9 componentes del dispositivo se han visto involucrados y c\u00f3mo, en el proceso de ejecuci\u00f3n del ejecutable?</li> <li>Finaliza con una conclusion sobre las diferencias que has encontrado entre los lenguajes del grupo 1 y grupo 2. (Pista: Virtual Machine)</li> </ol>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/#incluir-en-la-entrega","title":"Incluir en la entrega","text":"<p>Ademas de las respuestas a las preguntas anteriores, introduce en la entrega:</p> <ul> <li>El codigo fuente del lenguaje del grupo 1 y grupo 2.</li> <li>Captura de pantalla de la ejecucion del grupo 1 y grupo 2.</li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA1.a No explica adecudamente la involucracion de los componentes hardware durante la ejecucion de un programa Lo hace correctamente Lo hace correctamente, con informacion adicional. RA1.c No diferencia los distintos codigos Diferencia adecuadmente Los diferencia adecuadamente con informacion adicional. RA1.d No diferencia las ejecuciones de grupo 1 y grupo 2 Indentifica las diferencia. Identifica las diferencias y las explica con detalle. RA1.e No lista adecuadamente las herramientas y proceso de creacion/ejecucion. Lista adecuadamente las herramientas y proceso de creacion/ejecucion. lista adecuadamente las herramientas y proceso de creacion/ejecucion y entra en detalles."},{"location":"section3/u01/practica/EDES-U1.-Practica002/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Es un trabajo individual.</li> <li>Se realiza en un documento de google drive.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Fecha</li> <li>Tu nombre</li> <li>Identificaci\u00f3n del curso y grupo.</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 1_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica002/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> <li>CLR .Net</li> <li>Las M\u00e1quinas Virtuales de Java y .NET comparadas.</li> </ul>"},{"location":"section3/u01/practica/EDES-U1.-Practica003/","title":"UD 1 - P3: Aplica Scrum","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#relacion-12","title":"Relaci\u00f3n 1.2","text":"","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#descripcion","title":"Descripci\u00f3n","text":"<p>Suponiendo que realizas el juego del ahorcado y que trabajas en un equipo scrum, </p> <ul> <li>Construye un product backlog muy b\u00e1sico que resuman todas las funcionalidades necesarias para crear el juego. </li> </ul> <p> Fuente PMOInformatica.com</p> <ul> <li>Simula la reuni\u00f3n de planifica\u00f1ci\u00f3n del sprint (Sprint planning). En ella, define el objetivo del sprint y elige los PBI (product backlog items) para llevarlo a cabo. Define las tareas asociadas a la realizaci\u00f3n de los PBI, y que constituir\u00e1n el Sprint backlog. </li> </ul> <p></p> <p>Fuente PMOInformatica.com</p>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#incluir-en-la-entrega","title":"Incluir en la entrega","text":"<ol> <li>El producto backlog, con los items. </li> <li>El sprint backlog y el objetivo.</li> </ol>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA1.g Realiza un slice confuso de las funcionalidades y de las tareas del sprint backlog. Realiza un slice adecuado de las funcionalidades y de las tareas del sprint backlog. Realiza un slice completo y de las funcionalidades y de las tareas del sprint backlog, superando las expectativas del trabajo.","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Es un trabajo es en grupo..</li> <li>Se realiza en un documento de google drive, con los formatos suministrados en la presentaci\u00f3n del ejercicio.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Tu nombre</li> <li>Identificaci\u00f3n del ciclo y grupo.</li> <li>Fecha</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 1_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>","tags":["Software"]},{"location":"section3/u01/practica/EDES-U1.-Practica003/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> <li>Product Backlog PMOInformatica.com</li> <li>Sprint Backlog PMOInformatica.com</li> </ul>","tags":["Software"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/","title":"UD 1 - 1.1 Relaci\u00f3n entre software y hardware","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#de-que-se-compone-cualquier-dispositivo-actual","title":"\u00bfDe que se compone cualquier dispositivo actual?","text":"<p>Un pc, port\u00e1til o dispositivo m\u00f3vil, como tel\u00e9fono m\u00f3vil o tablet, est\u00e1 compuesto principalmente por un hardware y un software.</p> <p>El hardware se compone de todos los materiales f\u00edsicos que hacen posible que este aparato encienda y se ejecute.</p> <p>Por su parte, el software es todo lo que no se ve; en otras palabras, son los programas y aplicaciones que est\u00e1n dentro del dispositivo y que le brindan valor a estas herramientas, gracias al trabajo que han realizado los programadores desarrollando este software.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#que-es-hardware","title":"\u00bfQu\u00e9 es hardware?","text":"<p>La Real Academia Espa\u00f1ola describe al hardware como el \u201cconjunto de los componentes que integran la parte material de una computadora\u201d, es decir, todas las partes f\u00edsicas que la constituyen, aquellas que puedes ver.</p> <p>Elementos como el disco duro, teclado, monitor, rat\u00f3n, circuitos, como la tarjeta de memoria, el microprocesador o CPU, entre otros, conforman el hardware.</p> <p></p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#que-es-software","title":"\u00bfQu\u00e9 es software?","text":"<p>El software, por su parte, de acuerdo con el IEEE: \u201ces el conjunto de los programas de c\u00f3mputo, procedimientos, reglas, documentaci\u00f3n y datos asociados, que forman parte de las operaciones de un sistema de computaci\u00f3n\u201d.</p> <p>Dicho en otras palabras, son todos los programas o aplicaciones que integran un dispositivo y que le permiten realizar tareas espec\u00edficas gracias al lenguaje de programaci\u00f3n.</p> <p>El software le da instrucciones al hardware de la forma como debe realizar una tarea, por esta raz\u00f3n, todos los programas que usamos en un dispositivo son software, por ejemplo:</p> <ul> <li>Navegador web como Google Chrome o Mozilla Firefox.</li> <li>Sistemas operativos como Windows, Mac OS, Linux, entre otros.</li> <li>Antivirus.</li> <li>Aplicaciones de ofim\u00e1tica como Microsoft Word.</li> <li>Sistemas empresariales como un BPMS, ERP, CRM, entre otros.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#tipos-de-software","title":"Tipos de software","text":"<ul> <li>De sistema (Sistema operativo, drivers -controladores-)</li> <li>De aplicaci\u00f3n (Suite ofim\u00e1tica, Navegador, Edici\u00f3n de imagen, ...)</li> <li>De desarrollo (Editores, compiladores, interpretes, ...)</li> </ul> <p>Los drivers son los controladores de dispositivos.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.1.-Software-PC/#relacion-hardware-software","title":"Relaci\u00f3n Hardware-Software","text":"<p>La relaci\u00f3n entre el software y el hardware se pueden describir de la siguiente forma:  - Disco duro: almacena de forma permanente los archivos ejecutables y los archivos de datos. - Memoria RAM: almacena de forma temporal el c\u00f3digo binario de los archivos ejecutables y los archivos de datos necesarios. - CPU: lee y ejecuta instrucciones almacenadas en memoria RAM, as\u00ed como los datos necesarios. - E/S: recoge nuevos datos desde la entrada, se muestran los resultados, se leen/guardan a disco, ...</p> <p>El disco duro se considera un perif\u00e9rico de E/S (Entrada/Salida).</p> <p>La CPU se llama tambi\u00e9n UCP (en ingl\u00e9s), procesador o microprocesador.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/","title":"UD 1 - 1.2 Lenguajes de programaci\u00f3n","text":"","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#lenguaje-de-programacion","title":"Lenguaje de programaci\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n nos permiten comunicarnos con la m\u00e1quina gracias a una estandarizaci\u00f3n que permite expresar instrucciones que el ordenador es capaz de ejecutar. Al igual que el lenguaje natural, los lenguajes de programaci\u00f3n vienen definidos por:</p> <ul> <li>L\u00e9xico: determinan el conjunto de s\u00edmbolos y caracteres que se pueden emplear. La conjunci\u00f3n de estos caracteres formar\u00e1n identificadores, constantes, operadores, instrucciones, etc.</li> <li>Sintaxis: conjunto de reglas que determinan las construcciones v\u00e1lidas que se pueden realizar con los elementos anteriores.</li> <li>Sem\u00e1ntica: define el significado de las construcciones anteriores.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#tipos-de-lenguajes","title":"Tipos de lenguajes","text":"<p>Hoy en d\u00eda existen multitud de lenguajes de programaci\u00f3n, donde cada uno de ellos tiene sus propias caracter\u00edsticas y esto da lugar a multitud de clasificaciones. A continuaci\u00f3n comentaremos algunas de ellas.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#segun-su-nivel-de-abstraccion","title":"Seg\u00fan su nivel de abstracci\u00f3n","text":"<p>En orden de mayor a menor dependencia a la m\u00e1quina tenemos:</p> <ul> <li>Bajo nivel: dependencia total con la arquitectura f\u00edsica, por ejemplo, lenguaje m\u00e1quina</li> <li>Ensamblador: instrucciones legibles pero cercanas a la arquitectura con una notaci\u00f3n simb\u00f3lica o nemot\u00e9cnica, por ejemplo   <pre><code>ADD R1,5 (R1\u2190  R1+5)\n</code></pre></li> <li>Alto nivel: son aquellos cercanos al lenguaje humano, por ejemplo php, java, kotlin, javaScript, typeScript, python, etc.</li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#segun-el-paradigma-de-programacion","title":"Seg\u00fan el paradigma de programaci\u00f3n","text":"<p>El paradigma de programaci\u00f3n nos marca un m\u00e9todo que ha de seguirse para llevar a cabo la programaci\u00f3n, es decir, una manera de estructurar y organizar los programas. Algunos de estos paradigmas:</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#imperativo","title":"Imperativo","text":"<p>En este paradigma se expresa como debe solucionarse un problema especificando una secuencia de acciones a realizar. La Programaci\u00f3n OO y estructurada son subclases que han evolucionado con objeto de mejorar la mantenibilidad y calidad de los programas imperativos</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#estructurada","title":"Estructurada","text":"<p>Paradigma orientado a mejorar la claridad y calidad y tiempo de desarrollo de un programa de computadora recurriendo \u00fanicamente a subrutinas y tres estructuras b\u00e1sicas: secuencia, selecci\u00f3n (if y switch) e iteraci\u00f3n (bucles for y while); Pascal, C, Fortran son un ejemplo.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#orientado-a-objetos","title":"Orientado a objetos:","text":"<p>Paradigma que se caracteriza por la forma de manejar la informaci\u00f3n mediante estructuras que encapsulan propiedades y m\u00e9todos. Se manejan tres conceptos claves: Clases, Objetos, La herencia. Ejemplo de este paradigma encontramos C++, C#, Java, Smalltalk, Ruby, .NET entre otros.</p> <p>Veamos un ejemplo con Java:</p> <pre><code>//Elimina todos los elementos de un almac\u00e9n.\nalmacen.vaciarlo()\n</code></pre>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#declarativo","title":"Declarativo","text":"<p>En este paradigma el \u00e9nfasis est\u00e1 en el qu\u00e9 hacer, el problema, y NO en el c\u00f3mo hacerlo, los pasos hasta llegar a la soluci\u00f3n. Hay dos subtipos:</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#lenguajes-funcionales","title":"Lenguajes funcionales","text":"<p>Todas las construcciones son funciones en el sentido matem\u00e1tico del t\u00e9rmino. Haskell , Lisp. Veamos un ejemplo en LISP:</p> <pre><code>(+ 2 (* 2 2));; =  2*2+2 \n</code></pre>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#lenguajes-logicos","title":"Lenguajes l\u00f3gicos","text":"<p>Se basan en restricciones de predicados de primer orden. Programaci\u00f3n declarativa: Como ejemplo tenemos PROLOG.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#concurrentes","title":"Concurrentes","text":"<p>Destacan por dividir la ejecuci\u00f3n del programa en hilos, los cuales se pueden ejecutar de manera desordenada o parcial. ADA u Occam son lenguajes utilizados con este paradigma. Este aspecto est\u00e1 inmerso en la mayor\u00eda de los lenguajes actuales.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#multiparadigma","title":"Multiparadigma","text":"<p>Como su nombre indica, existen lenguajes que soportan varios paradigmas de programaci\u00f3n, es decir, varios estilos de programaci\u00f3n. La mayor\u00eda de los lenguajes de programaci\u00f3n actuales soportan varios paradigmas. Por ejemplo, java o Javascript son lenguajes que se adaptan a varios de estos paradigmas, como el orientado a objetos y reactiva.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#elementos-del-lenguaje-de-programacion","title":"Elementos del lenguaje de programaci\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n est\u00e1n compuestos por un conjunto de elementos, pasamos a enumerar algunos de los que se repiten en la mayoria de los lenguajes:</p> <ul> <li>Datos: Los datos es la informaci\u00f3n de entrada con la que trabajan los programas, estos pueden ser simples: num\u00e9ricos, alfanum\u00e9ricos o l\u00f3gicos o estructurados: arrays, registros, ficheros (im\u00e1genes, v\u00eddeos, sonido).</li> <li>Constantes y variables: Los datos son almacenados en variables y constantes, que son porciones de memoria que contienen un identificador (nombre de la variable) y un valor. El tama\u00f1o de esta porci\u00f3n de memoria depender\u00e1 del tipo de dato que almacene (datos simples o estructuras de datos).</li> <li>Expresiones y operadores: Los operadores son elementos que realizan alguna acci\u00f3n y forman parte de las expresiones, encontramos:<ul> <li>Aritm\u00e9ticos: +, -, *, /, (MOD) m\u00f3dulo, (DIV) divisi\u00f3n entera, ^ (potencia)</li> <li>Alfanum\u00e9ricos: + (concatenaci\u00f3n)</li> <li>Condicionales: =, &lt;, &gt;, &lt;=, &gt;=, !=</li> <li>Par\u00e9ntesis: () se utilizan para anidar expresiones</li> <li>L\u00f3gicos: NOT (negaci\u00f3n), AND (\u201cy\u201d l\u00f3gico), OR (\u201co\u201d l\u00f3gico)</li> </ul> </li> <li>Instrucciones: Una secuencia de instrucciones dan lugar al proceso del algoritmo. Estas instrucciones siguen estas estructuras:<ul> <li>Simples<ul> <li>Declarativas: Son las encargadas de declarar variables simples o complejas y  constantes y de reservar la memoria necesaria para almacenar los datos.</li> <li>Primitivas: Instrucciones encargadas de asignar valores a las variables o de leer e imprimir los datos.</li> </ul> </li> <li>Estructura secuencial: Se ejecutan una instrucci\u00f3n tras otra, sin que haya opci\u00f3n a saltarse ninguna de ellas.</li> <li>Estructuras condicionales: Permiten la ejecuci\u00f3n o no de un grupo de instrucciones dependiendo de si se cumple o no una determinada condici\u00f3n. Existen tres tipos: simple:  if; doble:  if else; multiple: switch.  </li> <li>Estructura repetitiva: Permiten la ejecuci\u00f3n repetida de un grupo de instrucciones un n\u00famero determinado de veces o hasta que se cumpla una determinada condici\u00f3n. Existen tres tipos: Repetir mientras: While; Repetir hasta: do-while; Para: For.  </li> <li>Comentarios: Estas instrucciones se incluyen para hacer aclaraciones sobre el c\u00f3digo para guiar al programador o para documentarlo. Al ser compilado estas l\u00edneas se omiten ya que no aportan ning\u00fan valor al c\u00f3digo ejecutable.</li> </ul> </li> </ul>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.2.-Lenguajes/#tendencia-en-lenguajes-de-programacion","title":"Tendencia en lenguajes de programaci\u00f3n","text":"<p>TIOBE Index es un ranking de los lenguajes de programaci\u00f3n m\u00e1s utilizados que se actualiza mensualmente. Para realizar este ranking, se consultan los 25 motores de b\u00fasqueda mejor clasificados por Alexa (software de Amazon utilizado para SEO: hacer an\u00e1lisis de datos en sitios web a gran escala), de entre los que destacan Google, Bing y Yahoo. Bas\u00e1ndose en los resultados actuales de este ranking y la evoluci\u00f3n que ha ido teniendo los 10 primeros puestos con los datos de 2019 y 2020, se observa que los lenguajes utilizados para el desarrollo web como Java, Python, Visual Basic, JavaScript y PHP son bastante demandados, acompa\u00f1ados de C, C++, C# y Objetive-C, SQL, Assembly language.</p> <p>Relacionado con las tendencias, aunque a\u00fan siguen surgiendo nuevos lenguajes, como por ejemplo Kotlin para las plataformas Android, Swift para IOS, existen lenguajes bastante consolidados que evolucionan mediante las revisiones propias del lenguaje o adapt\u00e1ndose a las diferentes necesidades mediante la aparici\u00f3n de frameworks, como, por ejemplo, los frameworks Spring, Hibernate para Java, o Angular 5 y React para Javascript. Incluso lenguajes que se ampl\u00edan su espacio de aplicaci\u00f3n al entorno servidor, como javascript en Node.js.</p>","tags":["EDES","Lenguajes"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/","title":"UD 1 - 1.3 Funcionalidades de herramientas usadas durante el desarrollo de software","text":"","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#software-e-ingenieria-del-software","title":"Software e Ingenier\u00eda del software","text":"<p>Software es el conjunto de instrucciones y datos en formato binario almacenados dentro la memoria principal, si el software est\u00e1 en ejecuci\u00f3n, que indica a una computadora qu\u00e9 debe hacer y c\u00f3mo. El software se dirige al hardware y es la parte l\u00f3gica del sistema inform\u00e1tico.</p> <p>La Ingenier\u00eda del software es la puesta en com\u00fan de un conjunto de medios, conocimientos, herramientas, procesos, m\u00e9todos de la ingenier\u00eda a fin de obtener software de la mejor forma, para que sea rentable, fiable y que cumpla con las especificaciones acordadas.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#el-desarrollo-de-software","title":"El desarrollo de software","text":"<p>En lo que respecta al proceso del desarrollo del software, tras el nacimiento de la ingenier\u00eda del software, se defini\u00f3 el ciclo de vida del desarrollo de un producto software. Por esa \u00e9poca se estableci\u00f3 el modelo cl\u00e1sico que propon\u00eda un ciclo en cascada con las fases An\u00e1lisis, Dise\u00f1o, Desarrollo, Pruebas, Mantenimiento. En los modelos m\u00e1s actuales, las metodolog\u00edas \u00e1giles como scrum, proponen hacer peque\u00f1os ciclos de forma iterativa e incremental en los que se contemplan acciones de las anteriores fases, teniendo como principal objetivo entregar lo antes posible funcionalidad que aporte valor al usuario. </p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#utilidades-para-el-desarrollo-y-pruebas-de-programas","title":"Utilidades para el desarrollo y pruebas de programas","text":"<p>A continuaci\u00f3n se listan las funcionalidades que nos ofrecen algunas de las utilidades necesarias en el proceso de creaci\u00f3n de software durante las fases de desarrollo y pruebas.</p> <p>Durante las fases de desarrollo y pruebas se realizan los trabajos de desarrollo de software en base a los dise\u00f1os realizados y posteriormente se testean con objeto de obtener un software de calidad.</p> <p>Tradicionalmente, los programas que se han venido usando en estas fases han sido editores, int\u00e9rpretes y compiladores (codificaci\u00f3n y generaci\u00f3n de ejecutables) y los depuradores (pruebas), si bien posteriormente surgi\u00f3 el concepto de CASE (Computer Aided Software Engineering) que aglutina todas las etapas.</p> <p>Cuando programamos en lenguajes de alto nivel, y desde una perspectiva cl\u00e1sica, estamos generando mediante un programa de edici\u00f3n el c\u00f3digo fuente del software final. Los editores suelen incorporar un coloreado de la sintaxis, indentaci\u00f3n autom\u00e1tica y otras funcionalidades que ayudan al programador.</p> <p>El c\u00f3digo fuente se suele guardar en uno o varios archivos con una extensi\u00f3n concreta seg\u00fan el lenguaje utilizado y debe ser traducido a binario para que las instrucciones puedan ser entendidas y ejecutadas por la m\u00e1quina. Para esto existe otro programa encargado de realizar la traducci\u00f3n llamado traductor, y pueden ser: ensambladores, compiladores e interpretes.</p> <ul> <li> <p>Los ensambladores son los encargados de traducir los programas escritos en lenguaje ensamblador a lenguaje m\u00e1quina. </p> </li> <li> <p>Los compiladores son programas que leen el c\u00f3digo fuente y lo traducen o convierten a otro lenguaje. Estos programas te muestran los errores existentes en el c\u00f3digo fuente, y una vez solucionados generan el c\u00f3digo objeto. </p> </li> <li> <p>Otro sistema para la ejecuci\u00f3n de nuestro c\u00f3digo fuente es mediante el uso de int\u00e9rpretes. Los int\u00e9rpretes realizan la traducci\u00f3n y ejecuci\u00f3n de forma simult\u00e1nea, es decir, un int\u00e9rprete lee el c\u00f3digo fuente y lo va ejecutando al mismo tiempo sin generar c\u00f3digo objeto. </p> </li> <li> <p>Por \u00faltimo, existen otros traductores que producen un c\u00f3digo intermedio entre el c\u00f3digo fuente y el m\u00e1quina. Son por tanto, una mezcla de interpretados y compilados. En el lenguaje Java y kotlin por ejemplo, se genera un recurso bytecode: c\u00f3digo precompilado que necesita interpretarse por la JVM o m\u00e1quina virtual de Java para ejecutarse.</p> </li> </ul> <p>Una vez tenemos el c\u00f3digo objeto, mediante el linkado, que puede ser din\u00e1mico (quedan enlazados los distintos ficheros binarios, pero en archivos diferentes) o est\u00e1tico (se a\u00f1ade todos los binarios a un \u00fanico fichero) quedan enlazados los distintos c\u00f3digos objetos y se genera un ejecutable.</p> <p>Una vez tenemos el ejecutable, el software est\u00e1 listo para ser ejecutado y se entra el proceso de pruebas, detecci\u00f3n y soluci\u00f3n de errores, para el que podemos usar frameworks de testeo para dise\u00f1ar e implementar pruebas que detecten los errores, programas de depuraci\u00f3n para encontrar el origen de los errores, as\u00ed como otros programas de monitorizaci\u00f3n y seguimiento que se encargan de monitorizar el funcionamiento de las aplicaciones para ver el comportamiento que tienen en cuanto a rendimiento. </p> <p>Si se identifican errores, para solucionarlos se tendr\u00e1 que pasar por los pasos anteriores de generaci\u00f3n de c\u00f3digo fuente y compilaci\u00f3n hasta generar de nuevo ejecutable.-</p> <p>A continuaci\u00f3n se enumeran algunas herramientas que se pueden utilizar durante el proceso descrito anteriormente:</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#herramientas-clasicas","title":"Herramientas Cl\u00e1sicas","text":"<p>Relacionados con la fase de desarrollo de software, las herramientas que podemos usar dependen del lenguaje de programaci\u00f3n.  Un ejemplo de estas pueden ser las  siguientes:</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#editores","title":"Editores","text":"<ul> <li>vi, vim: Disponible en pr\u00e1cticamente todos los sitemas UNIX, es un editor de textos potente que funciona mediante combinaci\u00f3n de teclas. Soporta los lenguajes de programaci\u00f3n m\u00e1s usados.</li> <li>nano: Disponible en pr\u00e1cticamente todos los sistemas linux. M\u00e1s sencillo y amigable que vi, aunque menos potente. Compatible con gran n\u00famero de lenguajes de programaci\u00f3n y resaltado de sintaxis.</li> <li>Notepad + +: Disponible para windows y con soporte para gran n\u00famero de lenguajes de programaci\u00f3n y resaltado de sintaxis.</li> <li>Sublime Text, Atom: Editores m\u00e1s de actualidad, multiplataforma y con soporte sobre todo para lenguajes relacionados con el desarrollo Web</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#compiladores","title":"Compiladores","text":"<ul> <li>GCC: Compilador del proyecto GNU para m\u00faltiples lenguajes entre ellos c y c++. Libre y multiplataforma. Es el est\u00e1ndar, el que te funciona en todos los sistemas operativos (tambi\u00e9n m\u00f3viles y embebidos). Los SO Linux y XCode en Mac traen GCC preinstalado.</li> <li>CLang: La alternativa a GCC. Compila m\u00e1s r\u00e1pido y los mensajes de error se entienden m\u00e1s, pero soporta menos el est\u00e1ndar. Hay comparaciones que puedes googlear.</li> <li>MinGW: (Minimalist GNU for Windows) Incluye GCC y otras utilidades para poder usarlo en Windows.</li> <li>Javac: Compilador est\u00e1ndar de Java que trae el Java Development Kit. Se ejecuta desde l\u00ednea de comandos. Genera un c\u00f3digo intermedio llamado byte-codes.</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#interpretes","title":"Interpretes","text":"<ul> <li>Java: Usando su comando java desde l\u00ednea de comandos se accede a la M\u00e1quina Virtual Java que interpreta el c\u00f3digo intermedio (byte-code) creado por javac.</li> <li>Javascript es interpretado por los motores de javascript incluidos en los navegadores y \u00faltimamente en la plataforma node. No obstante, las herramientas nativas llamadas Developer Tools que traen integradas los navegadores incluyen una interfaz con el motor de javascript.</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#otras-herramientas","title":"Otras herramientas","text":"<ul> <li>Make GNU es una utilidad disponible normalmente en Linux que agiliza la tarea de compilar c\u00f3digo desde la terminal. Nos evita tener que escribir los comandos de compilaci\u00f3n a mano, que suelen ser muy largos, y en cambio nos permite escribir algo mucho m\u00e1s corto que al final hace lo mismo.</li> <li>Maven y Ant son herramientas de automatizaci\u00f3n facilitar la compilaci\u00f3n y creaci\u00f3n de programas Java;</li> <li>SVC, subversion, git: Sistemas de control de versiones que permiten realizar un seguimiento de los cambios que se realizan en el software.</li> <li>Herramientas de refactorizaci\u00f3n: incluidas como funcionalidades avanzadas de editores, permiten realizar cambios en el c\u00f3digo fuente para hacerlo m\u00e1s legible, f\u00e1cil de mantener y eficiente sin cambiar la funcionalidad.</li> </ul> <p>De la misma forma, durante la fase de pruebas, las herramientas estar\u00e1n influenciadas por el lenguaje de programaci\u00f3n. Un ejemplo de estas son:</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#depuradores","title":"Depuradores","text":"<ul> <li>GDB o GNU Debugger es el depurador est\u00e1ndar para el compilador GNU. Es un depurador de l\u00ednea de comandos, que funciona en varias plataformas Unix y usado para C, C++ y Fortran.</li> <li>JDB es el depurador est\u00e1ndar de Java que trae el Java Development Kit. Se ejecuta desde l\u00ednea de comandos.</li> <li>Para JavaScript podemos utilizar las herramientas nativas llamadas Developer Tools que traen integradas los navegadores, y que incluyen herramientas para depurar.</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#frameworks-de-pruebas","title":"Frameworks de Pruebas","text":"<ul> <li>Junit: Marco de trabajo para realizar pruebas de unidad en java.</li> <li>Mocha y jest: Marcos de trabajo para realizar pruebas de unidad en Javascript.</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.3.-FuncionalidadesHerramientas/#analisis-y-monitorizacion-del-software","title":"An\u00e1lisis y monitorizaci\u00f3n del software.","text":"<ul> <li>SonarQube: es una herramienta libre para evaluar c\u00f3digo fuente. Usa diversas herramientas de an\u00e1lisis est\u00e1tico de c\u00f3digo fuente para obtener m\u00e9tricas que pueden ayudar a mejorar la calidad del c\u00f3digo de un programa.</li> <li>Jmeter: herramienta de prueba de carga para analizar y medir el rendimiento de distintas partes de una aplicaci\u00f3n (Conexiones JDBC, Web Services, etc).</li> </ul> <p>En cualquiera de los lenguajes de ejemplo anteriores el volcado a consola de informaci\u00f3n y mensajes es una herramienta m\u00e1s durante las depuraci\u00f3n del software.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/","title":"UD 1 - 1.4 Traductores.","text":"","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#traductores-de-lenguajes-de-alto-nivel","title":"Traductores de lenguajes de alto nivel","text":"<p>Como ya adelantamos previamente, existen dos tipos generales de traducci\u00f3n: la compilaci\u00f3n y la interpretaci\u00f3n. Cada lenguaje de alto nivel opta por una de ellas, una combinaci\u00f3n de ambas o deja elegir al desarrollador seg\u00fan sus necesidades.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#compilacion","title":"Compilaci\u00f3n","text":"<p>La compilaci\u00f3n es la conversi\u00f3n de c\u00f3digo en un lenguaje de programaci\u00f3n a c\u00f3digo en otro lenguaje como paso previo a su ejecuci\u00f3n. Normalmente cuando pensamos en compilaci\u00f3n hablamos de su versi\u00f3n m\u00e1s tangible, aquella que nos da un programa ejecutable como salida. Se suele denominar compilaci\u00f3n anticipada o mediante sus siglas inglesas compilaci\u00f3n AOT (Ahead-Of-Time).</p> <p>Muchos de los lenguajes cl\u00e1sicos y m\u00e1s r\u00e1pidos utilizan la compilaci\u00f3n anticipada: desde Fortran hasta Rust, pasando por C y C++. Este tipo de compilaci\u00f3n permite realizar optimizaciones complejas, por muy costosas que sean, y adaptar el ejecutable final a la m\u00e1quina donde se va a ejecutar.</p> <p>Algunos lenguajes realizan un paso de pre-compilaci\u00f3n intermedia que no genera c\u00f3digo m\u00e1quina sino bytecode o c\u00f3digo portable. En ese paso se trata de producir un c\u00f3digo de bajo nivel independiente de la plataforma de ejecuci\u00f3n que luego pueda ser interpretado de forma eficiente por una m\u00e1quina virtual.</p> <p>Conocidos lenguajes que suelen utilizar compilaci\u00f3n a bytecode son Java o la plataforma .NET.</p> <p>Por otro lado, cuando la compilaci\u00f3n no genera un binario en c\u00f3digo m\u00e1quina sino un resultado en otro lenguaje de programaci\u00f3n, se trata de una compilaci\u00f3n fuente-a-fuente (source-to-source). A estos compiladores se le llaman transpiladores.</p> <p>Los casos m\u00e1s comunes de este tipo los encontramos en tecnolog\u00edas web, ya que los navegadores principalmente permiten ejecutar c\u00f3digo JavaScript. Si queremos programar para el navegador con otro lenguaje debemos compilar a JavaScript. Algunos lenguajes que usan compilaci\u00f3n fuente a fuente son TypeScript, PureScript, kotlin o Dart.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#el-proceso-de-compilacion","title":"El proceso de compilaci\u00f3n","text":"<p>La compilaci\u00f3n es un proceso complejo que se realiza en dos fases:</p> <ul> <li>An\u00e1lisis: Se comprueba la correcci\u00f3n del c\u00f3digo fuente. Esta fase incluye:<ul> <li>An\u00e1lisis l\u00e9xico: Se asimila cada elemento del c\u00f3digo fuente a una serie de categor\u00edas denominadas tokens</li> <li>An\u00e1lisis sint\u00e1ctico: Se crean representaciones abstractas de la estructura del c\u00f3digo fuente. Estas representaciones suelen ser \u00e1rboles de sintaxis abstracta (AST). Si recordamos el an\u00e1lisis sint\u00e1ctico de la asignatura de lengua nos haremos una idea.</li> <li>An\u00e1lisis sem\u00e1ntico: Se revisan los \u00e1rboles de sintaxis en busca de expresiones sin sentido, aunque correctas a nivel sint\u00e1ctico.</li> </ul> </li> <li>S\u00edntesis: Se trata de generar el c\u00f3digo ejecutable. Suele incluir:<ul> <li>Generaci\u00f3n de c\u00f3digo intermedio: A partir de los AST revisados resultantes de la fase de an\u00e1lisis</li> <li>Optimizaci\u00f3n de c\u00f3digo: Sin modificar el sentido del c\u00f3digo, se modifica el c\u00f3digo intermedio buscando optimizar su ejecuci\u00f3n.</li> <li>Generaci\u00f3n de c\u00f3digo objeto y enlazado: Se genera el c\u00f3digo m\u00e1quina a partir del c\u00f3digo intermedio y se a\u00f1aden las librer\u00edas de c\u00f3digos necesarias para crear un ejecutable.</li> </ul> </li> </ul> <p> </p> Proceso de compilaci\u00f3n","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#estructura-de-un-compilador","title":"Estructura de un Compilador","text":"<p>En la actualidad los compiladores se estructuran en tres programas que se encargan de llevar a cabo una o varias fases del proceso de compilaci\u00f3n: Analizador (Frontend), optimizador y generador (Backend).</p> <p> </p> Estructura de un compilador <p>El analizador es gen\u00e9rico para todas las plataformas de destino, mientras que el optimizador puede ser com\u00fan a varios lenguajes y plataformas. El generador es propio de cada plataforma, ya que genera c\u00f3digo m\u00e1quina a partir de c\u00f3digo intermedio.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#interpretacion-y-lenguajes-interpretados","title":"Interpretaci\u00f3n y lenguajes interpretados","text":"<p>La forma alternativa de ejecutar un programa a partir del c\u00f3digo en un lenguaje de programaci\u00f3n es no generar una traducci\u00f3n a c\u00f3digo m\u00e1quina, sino analizar el c\u00f3digo y realizar los c\u00f3mputos que \u00e9ste indique, bien directamente o bien a partir alg\u00fan tipo de representaci\u00f3n intermedia que no constituya un programa en c\u00f3digo m\u00e1quina. En este caso se dice que el programa es interpretado.</p> <p>Mientras se produce la interpretaci\u00f3n, debe ejecutarse en el sistema el programa que la realiza, es decir, el int\u00e9rprete del lenguaje. Las representaciones intermedias que puede generar el int\u00e9rprete son generalmente de dos tipos: un c\u00f3digo de bajo nivel o una estructura de datos.</p> <p>El c\u00f3digo de bajo nivel suele ser bytecode en la actualidad y las estructuras de datos suelen ser \u00e1rboles de sintaxis abstracta (AST) que se van recorriendo para obtener los resultados de la ejecuci\u00f3n. Estas \u00faltimas no son tan utilizadas ya que producen mayores sobrecostes que los c\u00f3digos de bajo nivel.</p> <p>Ejemplos de lenguajes t\u00edpicamente interpretados son Python (con bytecode), Ruby (usaba ASTs hasta la versi\u00f3n 1.8), PHP (con bytecode) y Perl (utiliza ASTs).</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#compilacion-en-tiempo-de-ejecucion","title":"Compilaci\u00f3n en tiempo de ejecuci\u00f3n","text":"<p>Conocida por sus siglas inglesas JIT (Just-In-Time), es una t\u00e9cnica para mejorar el rendimiento de sistemas que compilan a bytecode consistente en traducir el bytecode a c\u00f3digo m\u00e1quina en tiempo de ejecuci\u00f3n. Este tipo de compilaci\u00f3n se denomina compilaci\u00f3n din\u00e1mica, y permite analizar el c\u00f3digo durante su ejecuci\u00f3n y mejorar los resultados de un int\u00e9rprete de bytecode convencional o hasta de una compilaci\u00f3n anticipada tradicional (AOT).</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.4.-Traductores/#fuentes","title":"Fuentes","text":"<ul> <li>Interpretes de python</li> <li>Eligiendo un interprete en python</li> <li>JDKs de java. Otros interpretes para java</li> <li>Que JDKs usar</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/","title":"UD 1 - 1.4 Traductores.","text":"","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#fases-del-proceso-de-desarrollo-del-software","title":"Fases del proceso de desarrollo del software","text":"<p>Entendemos por el Proceso de Desarrollo de Software el conjunto de fases o pasos que ocurren desde que se concibe una idea hasta que ese software esta\u0301 implantado en un dispositivo y funcionando.</p> <p>Ingeniera del software: se define como la ciencia y el arte de especificar, dise\u00f1ar y desarrollar programas, documentaci\u00f3n y procedimientos operativos.</p> <p>El proceso de desarrollo, que en un principio puede parecer una tarea simple, consta de una serie de pasos de obligado cumplimiento, pues so\u0301lo asi\u0301 podremos garantizar que los programas creados son eficientes, fiables, seguros y responden a las necesidades de los usuarios finales (aquellos que van a utilizar el programa). Esta \u00faltima parte, la de responder a las necesidades finales de los usuarios no es sencillo cumplir con ella, y da lugar a multiples problemas durante este proceso de desarrollo que impactan negativamente en el trabajo y provocan al fracaso o directamente cancelaci\u00f3n de los proyectos .</p> <p>El desarrollo de software es un proceso que conlleva una serie de pasos. Gene\u0301ricamente, estos pasos son los siguientes:</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#fases-del-desarrollo-del-software","title":"Fases del desarrollo del Software","text":"<ul> <li>Planificaci\u00f3n: en esta fase se establecen los objetivos del proyecto, se define el alcance del mismo y se realiza un estudio de viabilidad y costes.</li> <li>An\u00e1lisis del problema: Consiste en ver y comprender qu\u00e9 tarea se quiere resolver. Es imprescindible partir de una especificaci\u00f3n de requisitos lo m\u00e1s exacta y detallada posible. El proceso de comprensi\u00f3n y simplificaci\u00f3n del mundo real se llama an\u00e1lisis del problema y lo que se obtiene tras el an\u00e1lisis es el modelo.</li> <li>Dise\u00f1o de una soluci\u00f3n: Consiste en c\u00f3mo se va a resolver el problema, suele consistir en dividir el problema principal en problemas m\u00e1s sencillos cuya combinaci\u00f3n resuelve la tarea final.</li> <li>Codificaci\u00f3n: Una vez definidos los algoritmos, los traducimos al lenguaje de programaci\u00f3n que tengamos que usar. Un lenguaje de programaci\u00f3n es un conjunto de s\u00edmbolos y reglas sint\u00e1cticas especialmente dise\u00f1ado para transmitir ordenes al ordenador (C, Java, Pascal\u2026).</li> <li>Pruebas: Servir\u00e1n para identificar y corregir posibles errores, tendremos varios tipos de errores:</li> <li>Sint\u00e1cticos: Producidos por un mal uso del lenguaje.</li> <li>Sem\u00e1nticos: Lo que est\u00e1 equivocado es la soluci\u00f3n que yo he ideado. (Durante la ejecuci\u00f3n p. ej: divisi\u00f3n entre 0, o de l\u00f3gica p ej: mal dise\u00f1o algoritmo.)</li> <li>Despliegue: una vez que el programa est\u00e1 terminado, se debe implantar en el dispositivo o infraestructura del usuario final sobre la que se ejecutar\u00e1.</li> <li>Mantenimiento: Hay tres tipos:</li> <li>Correctivo: Sirve para corregir posibles errores o fallos del programa.</li> <li>Perfectivo: Se usa para perfeccionarlo.</li> <li>Adaptativo: Sirve para adaptarlo a nuevas situaciones.</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#modelos-de-desarrollo-de-software","title":"Modelos de desarrollo de software","text":"<ul> <li>Modelo en cascada. Consiste en dividir el proceso de desarrollo en fases, cada una de las cuales se ejecuta una vez que la anterior ha finalizado. El modelo en cascada es un modelo secuencial, es decir, las fases se ejecutan una tras otra.</li> <li>Sin realimentaci\u00f3n: es el modelo de vida cl\u00e1sico del software. Es pr\u00e1cticamente imposible que se pueda utilizar, ya que requiere conocer de antemano todos los requisitos del sistema. So\u0301lo es aplicable a pequen\u0303os desarrollos, ya que las etapas pasan de una a otra sin retorno posible. (se presupone que no habra\u0301 errores ni variaciones del software). </li> <li>Con realimentaci\u00f3n: es uno de los modelos ma\u0301s utilizados. Proviene del modelo anterior, pero se introduce una realimentacio\u0301n entre etapas, de forma que podamos volver atra\u0301s en cualquier momento para corregir, modificar o depurar algu\u0301n aspecto. No obstante, si se preve\u0301n muchos cambios durante el desarrollo no es el modelo ma\u0301s ido\u0301neo. Es el modelo perfecto si el proyecto es ri\u0301gido (pocos cambios, poco evolutivo) y los requisitos esta\u0301n claros.</li> <li>Modelo evolutivo. tiene en cuenta la naturaleza cambiante y evolutiva del software. La idea detr\u00e1s de este modelo es el desarrollo y entrega de partes funcionales del sistema de forma temprana, exponerla a los comentarios del usuario, refinarla en N versiones hasta que se desarrolle el sistema adecuado. Una ventaja de este modelo es que se obtiene una r\u00e1pida realimentaci\u00f3n del usuario, ya que las fases de especificaci\u00f3n, desarrollo y pruebas se ejecutan en cada iteraci\u00f3n no necesariamente en cascada. Destacando los metodolog\u00edas a\u01f5iles, XP (eXtreme Programming) y frameworks como Scrum como su m\u00e1ximo exponente. Destacan en estos modelos el car\u00e1cter iterativo e incremental del proceso seguido:</li> <li>En un desarrollo iterativo e incremental el proyecto se planifica en diversos bloques temporales (en el caso de Scrum de un mes natural o hasta de dos semanas, si as\u00ed se necesita) llamados iteraciones. Las iteraciones se pueden entender como miniproyectos: en todas las iteraciones se repite un proceso de trabajo similar (de ah\u00ed el nombre \u201citerativo\u201d) para proporcionar un resultado parcial, pero funcional, sobre producto final, de manera que el cliente pueda obtener los beneficios del proyecto de forma incremental. Para ello, cada requisito se debe completar en una \u00fanica iteraci\u00f3n: el equipo debe realizar todas las tareas necesarias para completarlo (incluyendo pruebas y documentaci\u00f3n) y que est\u00e9 preparado para ser entregado al cliente con el m\u00ednimo esfuerzo necesario. De esta manera no se deja para el final del proyecto ninguna actividad arriesgada relacionada con la entrega de requisitos.</li> <li>En cada iteraci\u00f3n el equipo evoluciona el producto de dos formas:<ul> <li>hace una entrega incremental: a partir de los resultados completados en las iteraciones anteriores, a\u00f1ade nuevos objetivos/requisitos. </li> <li>hace una entrega iterativa:  partir de los resultados completados en las iteraciones anteriores, y bas\u00e1ndose en la retroalimentaci\u00f3n que le ha dado el usuario final sobre las funcionalidades ya entregadas, se revisan para mejorarlas y adaptarlas a las necesidades de estos.</li> <li>Un aspecto fundamental para guiar el desarrollo iterativo e incremental es la priorizaci\u00f3n de los objetivos/requisitos en funci\u00f3n del valor que aportan al cliente.</li> </ul> </li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#scrum-que-es-y-como-funciona-este-marco-de-trabajo","title":"Scrum: qu\u00e9 es y c\u00f3mo funciona este marco de trabajo","text":"<p>A la hora de poner en marcha un proyecto, toda empresa debe asegurar que el equipo implicado conoce sus tareas y plazos de tiempo de entrega. Scrum es un marco de trabajo que nos ayuda a conseguirlo y que, adem\u00e1s, permite agilizar la entrega de valor al cliente en iteraciones cortas de tiempo.</p> <p>Scrum es un framework que se utiliza dentro de equipos que manejan proyectos de alta incertidumbre.  Se trata de un marco de trabajo por el cual las personas pueden abordar problemas complejos adaptativos, a la vez que entregar productos del m\u00e1ximo valor posible productiva y creativamente. Scrum es liviano y f\u00e1cil de entender pero, a la vez, dif\u00edcil de dominar del todo. Este framework favorece el time to market y la entrega r\u00e1pida de MVP (m\u00ednimos productos viables).</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#cual-es-el-origen-de-scrum","title":"\u00bfCu\u00e1l es el origen de Scrum?","text":"<p>En el a\u00f1o 2001, en Salt Lake City, un grupo de desarrolladores capitaneados por el ingeniero de software Kent Beck se reunieron para compartir sus frustraciones sobre las metodolog\u00edas de entrega de software y los marcos de trabajo que exist\u00edan hasta entonces (PMI, CMMI o SPICE). De este encuentro sali\u00f3 el Manifiesto \u00c1gil, que resume sus intenciones en los siguientes 4 valores:</p> <ul> <li>Valorar a los individuos y su interacci\u00f3n por encima de los procesos y herramientas.</li> <li>Valorar el software que funciona por encima de la documentaci\u00f3n exhaustiva.</li> <li>Valorar la colaboraci\u00f3n con el cliente por encima de la negociaci\u00f3n contractual</li> <li>Valorar la respuesta al cambio por encima del seguimiento de un plan.</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#los-12-principios-del-manifiesto-agil","title":"Los 12 principios del Manifiesto \u00c1gil","text":"<p>Adem\u00e1s de los 4 valores mencionados anteriormente, los firmantes del Manifiesto \u00c1gil desglosaron 12 principios que se derivan de ellos y que son igualmente importantes. Son los siguientes:</p> <ol> <li>Nuestra mayor prioridad es satisfacer al cliente mediante la  entrega temprana y continua de software con valor .</li> <li>Aceptamos que los requisitos cambien , incluso en etapas tard\u00edas del desarrollo. Los procesos \u00e1giles aprovechan el cambio para proporcionar ventaja competitiva al cliente.</li> <li>Entregamos software funcional frecuentemente, entre dos semanas y dos meses, con preferencia al periodo de tiempo m\u00e1s corto posible.</li> <li>Los responsables de negocio y los desarrolladores trabajamos juntos de forma cotidiana durante todo el proyecto.</li> <li>Los proyectos se desarrollan en torno a individuos motivados. Hay que darles el entorno y el apoyo que necesitan, y confiarles la ejecuci\u00f3n del trabajo.</li> <li>El m\u00e9todo m\u00e1s eficiente y efectivo de comunicar informaci\u00f3n al equipo de desarrollo y entre sus miembros es la conversaci\u00f3n cara a cara.</li> <li>El software funcionando es la medida principal de progreso.</li> <li>Los procesos \u00e1giles promueven el desarrollo sostenible. Los promotores, desarrolladores y usuarios debemos ser capaces de mantener un ritmo constante de forma indefinida.</li> <li>La atenci\u00f3n continua a la excelencia t\u00e9cnica y al buen dise\u00f1o mejora la agilidad.</li> <li>La simplicidad, o el arte de maximizar la cantidad de trabajo no realizado, es esencial.</li> <li>Las mejores arquitecturas, requisitos y dise\u00f1os emergen de equipos auto-organizados.</li> <li>A intervalos regulares el equipo reflexiona sobre c\u00f3mo ser m\u00e1s efectivo para a continuaci\u00f3n ajustar y perfeccionar su comportamiento en consecuencia.</li> </ol>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#los-5-valores-scrum","title":"Los 5 valores Scrum","text":"<p>El Manifiesto \u00c1gil y Scrum van de la mano para ofrecer una gu\u00eda clara a los equipos de desarrollo a la hora de afrontar un nuevo proyecto. En este sentido, hay una serie de valores que se asocian al framework Scrum y que vale la pena tener en consideraci\u00f3n:</p> <ul> <li>Coraje. Tener la valent\u00eda para hacer lo correcto y resolver problemas complejos.</li> <li>Foco. La organizaci\u00f3n del trabajo en sprints da certidumbre y permite centrar los esfuerzos en objetivos alcanzables.</li> <li>Compromiso. Para que el framework Scrum funcione necesita el compromiso de todos los miembros involucrados.</li> <li>Sinceridad. El equipo Scrum debe de ser transparente en cuanto al trabajo y los obst\u00e1culos que encuentra en el camino.</li> <li>Respeto. Tratarse de forma adecuada entre compa\u00f1eros y valorar las ideas y esfuerzos de cada uno es imprescindible.</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#en-que-se-basa-el-marco-de-trabajo-scrum","title":"\u00bfEn qu\u00e9 se basa el marco de trabajo Scrum?","text":"<p>Al estar enmarcada dentro de las metodolog\u00edas agile, Scrum se basa en aspectos como:</p> <ul> <li>La flexibilidad en la adopci\u00f3n de cambios y nuevos requisitos durante un proyecto complejo.</li> <li>El factor humano.</li> <li>La colaboraci\u00f3n e interacci\u00f3n con el cliente.</li> <li>El desarrollo iterativo como forma de asegurar buenos resultados.</li> </ul> <p>Los pilares o caracter\u00edsticas del framework Scrum m\u00e1s importantes son tres:</p> <ol> <li>Transparencia. Con el marco Scrum todos los implicados tienen conocimiento de qu\u00e9 ocurre en el proyecto y c\u00f3mo ocurre. Esto hace que haya un entendimiento \u201ccom\u00fan\u201d del proyecto, una visi\u00f3n global.</li> <li>Inspecci\u00f3n . Los miembros del equipo Scrum frecuentemente inspeccionan el progreso para detectar posibles problemas. La inspecci\u00f3n no es un examen diario, sino una forma de saber que el trabajo fluye y que el equipo funciona de manera auto-organizada.</li> <li>Adaptaci\u00f3n . Cuando hay algo que cambiar, el equipo se ajusta para conseguir el objetivo del sprint. Esta es la clave para conseguir el \u00e9xito en proyectos complejos, donde los requisitos son cambiantes o poco definidos y en donde la adaptaci\u00f3n, la innovaci\u00f3n, la complejidad y flexibilidad son fundamentales.</li> </ol>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#los-roles-en-el-equipo-scrum","title":"Los roles en el equipo Scrum","text":"<p>Si seguimos los  valores y principios Scrum , el equipo tiene como foco entregar valor y ofrecer resultados de calidad que permitan cumplir los objetivos de negocio del cliente.</p> <p>Para ello, los equipos de Scrum son auto-organizados y multifuncionales. Es decir, cada uno es responsable de unas tareas determinadas y de terminarlas en los tiempos acordados. Esto garantiza la entrega de valor del equipo completo, sin necesidad de ayuda o la supervisi\u00f3n minuciosa de otros miembros de la organizaci\u00f3n.</p> <p>A continuaci\u00f3n desglosamos los 3 roles m\u00e1s importantes en un equipo de trabajo Scrum.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#product-owner","title":"Product owner","text":"<p>Es el responsable de maximizar el valor del trabajo , que  viene de la mano de una buena gesti\u00f3n del  Product Backlog, el cual explicaremos m\u00e1s adelante.</p> <p>El Product Owner es el \u00fanico perfil que habla constantemente con el cliente, lo que le obliga a tener muchos conocimientos sobre el negocio.</p> <p>Para finalizar, un equipo Scrum debe tener solo un Product Owner y este puede ser parte del equipo de desarrollo.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#scrum-master","title":"Scrum Master","text":"<p>Es el responsable de que las t\u00e9cnicas Scrum sean comprendidas y aplicadas en la organizaci\u00f3n. Es el manager de Scrum, un l\u00edder que se encarga de eliminar impedimentos o inconvenientes que tenga el equipo dentro de un sprint (que ya revisaremos en detalle m\u00e1s adelante), aplicando las mejores t\u00e9cnicas para fortalecer el equipo de marketing digital.</p> <p>Dentro de la organizaci\u00f3n, el Scrum Master tiene la labor de ayudar en la adopci\u00f3n del framework en todos los equipos.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#equipo-de-desarrollo","title":"Equipo de desarrollo","text":"<p>Son los encargados de realizar las tareas priorizadas por el Product Owner. Es un equipo multifuncional y auto-organizado. Son los \u00fanicos que estiman las tareas del product backlog, sin dejarse influenciar por nadie.</p> <p>Los equipos de desarrollo no tienen sub-equipos o especialistas. La finalidad de esto es transmitir la responsabilidad compartida si no se llegan a realizar todas las tareas de un sprint.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#los-eventos-del-equipo-scrum","title":"Los eventos del equipo Scrum","text":"<p>Este timebox refleja las diferentes ceremonias Scrum y su peso en horas seg\u00fan se avanza en semanas de trabajo. El desarrollo iterativo se realiza en un sprint que contiene los siguientes eventos Scrum: Sprint Planning, Daily Meeting, Sprint Review, Sprint Retrospective y Grooming.</p> <p>Antes de profundizar en los diferentes eventos, es importante definir qu\u00e9 es un sprint en Scrum. El sprint es el coraz\u00f3n de este marco de trabajo, el contenedor de los dem\u00e1s hitos del proceso. Todo lo que ocurre en una iteraci\u00f3n para entregar valor est\u00e1 dentro de un sprint. La duraci\u00f3n m\u00e1xima es de un mes, el tiempo se determina en base al nivel de comunicaci\u00f3n que el cliente quiere tener con el equipo. Los sprints largos pueden hacer que se pierda feedback valioso del cliente y poner en peligro el proyecto.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#sprint-planning","title":"Sprint Planning","text":"<p>En esta reuni\u00f3n todo el equipo Scrum define qu\u00e9 tareas se van a abordar y cu\u00e1l ser\u00e1 el objetivo del sprint. La primera reuni\u00f3n que se hace en el sprint puede llegar a tener una duraci\u00f3n de 8 horas para sprints de un mes.</p> <p>El equipo se hace las siguientes preguntas:</p> <ul> <li>\u00bfQu\u00e9 se va a hacer en el sprint? En base a ello, se eligen tareas del Product Backlog. Este trabajo es responsabilidad del Producto Owner.</li> <li>\u00bfC\u00f3mo lo vamos a hacer? El equipo de desarrollo define las tareas necesarias para completar cada \u00edtem elegido del Product Backlog.</li> </ul> <p>La definici\u00f3n de qu\u00e9 se va a hacer implica que el equipo tenga un objetivo y se encuentre comprometido con la entrega de valor que se har\u00e1 al cliente al final del sprint. A esto se le llama Sprint Goal.</p> <p>El resultado de esta reuni\u00f3n es el Sprint Goal y un Sprint Backlog (que revisaremos m\u00e1s adelante).</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#daily-meeting","title":"Daily Meeting","text":"<p>Es una reuni\u00f3n diaria dentro del sprint que tiene como m\u00e1ximo 15 minutos de duraci\u00f3n. En ella deben participar, s\u00ed o s\u00ed, el equipo de desarrollo y el Scrum Master. El Product Owner no tiene la necesidad de estar presente.</p> <p>En esta reuni\u00f3n diaria el equipo de desarrollo hace las siguientes 3 preguntas:</p> <ul> <li>\u00bfQu\u00e9 hice ayer?</li> <li>\u00bfQu\u00e9 voy a hacer hoy?</li> <li>\u00bfTengo alg\u00fan impedimento que necesito que me solucionen?</li> </ul> <p>Una Daily Scrum es el lugar m\u00e1s oportuno para poder inspeccionar el trabajo y poder adaptarse en caso de que haya cambio de tareas dentro de un sprint.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#sprint-review","title":"Sprint Review","text":"<p>La review del valor que vamos a entregar al cliente se hace en esta reuni\u00f3n, al final de cada sprint. Su duraci\u00f3n es de 4 horas para sprints de un mes y es la \u00fanica reuni\u00f3n de Scrum a la que puede asistir el cliente.</p> <p>En esta reuni\u00f3n el Product Owner presenta lo desarrollado al cliente y el equipo de desarrollo muestra su funcionamiento. El cliente valida los cambios realizados y adem\u00e1s brinda feedback sobre nuevas tareas que el Product Owner tendr\u00e1 que agregar al Product Backlog.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#sprint-retrospective","title":"Sprint Retrospective","text":"<p>La retrospectiva es el \u00faltimo evento de Scrum, tiene una duraci\u00f3n de 3 horas para sprints de un mes, y es la reuni\u00f3n del equipo en la que se hace una evaluaci\u00f3n de c\u00f3mo se ha implementado el framework Scrum en el \u00faltimo sprint.</p> <p>Es una gran oportunidad para el equipo Scrum de inspeccionarse a s\u00ed mismo, proponiendo mejoras para el siguiente sprint. El resultado es una lista de mejoras que debe aplicar el siguiente d\u00eda, ya que al finalizar la retrospectiva, inmediatamente comienza un nuevo sprint, que incluye los mismos eventos mencionados anteriormente.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#grooming","title":"Grooming","text":"<p>El Grooming en Scrum es el tiempo de revisi\u00f3n que se dedica dentro de los equipos durante los sprints para refinar los requerimientos. Es una reuni\u00f3n que no debe ocupar m\u00e1s del 10% del tiempo disponible del sprint. Las tareas de usuario se revisan con un par de sprints de ventaja para que cuando llegue el equipo ya est\u00e9 todo listo para el desarrollo de la tarea.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#los-artefactos-scrum","title":"Los artefactos Scrum","text":"<p>Los eventos y artefactos de Scrum est\u00e1n definidos para maximizar la transparencia dentro del equipo; es decir, que todos tengan una misma visi\u00f3n de lo que est\u00e1 ocurriendo en el proyecto.</p> <p>Si te preguntas qu\u00e9 son los artefactos Scrum, a continuaci\u00f3n explicamos los 3 clave: Product Backlog, Sprint Backlog e Incremento.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#product-backlog","title":"Product Backlog","text":"<p>B\u00e1sicamente, el Product Backlog es el listado de tareas que engloba todo un proyecto. Cualquier cosa que debamos hacer debe estar en el Product Backlog y con un tiempo estimado por el equipo de desarrollo.</p> <p>La responsabilidad exclusiva de ordenar el Product Backlog es del  Product Owner, que se encuentra en constante comunicaci\u00f3n con el cliente para asegurarse de que las prioridades est\u00e1n bien establecidas.</p> <p>La ordenaci\u00f3n tambi\u00e9n es 100% responsabilidad del Product Owner, por lo que las tareas que est\u00e1n m\u00e1s arriba deben de ser las de mayor prioridad. El equipo de desarrollo elige tareas del Product Backlog en el Sprint Planning para generar tanto el Sprint Backlog como el Sprint Goal.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#sprint-backlog","title":"Sprint Backlog","text":"<p>Es el grupo de tareas del Product Backlog que el equipo de desarrollo elige en el Sprint Planning junto con el plan para poder desarrollarlas. Debe ser conocido por todo el equipo, para asegurarse de que el foco debe estar en este grupo de tareas.</p> <p>El Sprint Planning no cambia durante el sprint , solo se permite cambiar el plan para poder desarrollarlas.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#incremento","title":"Incremento","text":"<p>El Product Increment o incremento de Scrum es el resultado de sumar todos los elementos del Product Backlog completados durante el sprint actual, a\u00f1adiendo tambi\u00e9n el valor de todos los sprints anteriores. El incremento generado al final del sprint se presenta en el Sprint Review.</p> <p></p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#ventajas-y-desventajas-del-marco-scrum","title":"Ventajas y desventajas del marco Scrum","text":"<p>Una vez sabemos  c\u00f3mo funciona Scrum, hablemos de sus ventajas y desventajas:</p> <p>Ventajas de la metodolog\u00eda Scrum</p> <ul> <li>Scrum es muy f\u00e1cil de aprender: los roles, hitos y artefactos son claros y tienen un objetivo, por lo que es un m\u00e9todo muy relacionado con nuestra manera diaria de trabajar.</li> <li>El cliente puede comenzar a usar el producto r\u00e1pidamente.</li> <li>Se agiliza el proceso, ya que la entrega de valor es muy frecuente.</li> <li>Menor probabilidad de sorpresas o imprevistos, porque el cliente est\u00e1 viendo frecuentemente el proyecto.</li> </ul> <p>Desventajas de la metodolog\u00eda Scrum</p> <ul> <li>Aunque Scrum sea f\u00e1cil de aprender, es muy dif\u00edcil implementarlo. Esto supone una predisposici\u00f3n y un cambio de cultura de la organizaci\u00f3n que debe ir desde los altos mandos hasta los clientes.</li> <li>La necesidad de tener equipos multidisciplinares puede ser un problema, ya que es dif\u00edcil encontrar personas que sean capaces de hacer todo el trabajo de un equipo.</li> <li>El equipo puede tender a realizar el camino m\u00e1s corto para conseguir el objetivo de un sprint, el cual no siempre ofrece resultados de calidad.</li> </ul> <p>En resumen,  el marco de trabajo Scrum es especialmente \u00fatil cuando se trabaja en entornos de alta incertidumbre, en los que la probabilidad de que haya cambios durante el proyecto es alta. Si los requisitos no est\u00e1n claros, si el cliente tiene prisa en sacar un producto al mercado o necesita un MVP, Scrum es el framework perfecto. Este marco nos permite entregar un proyecto en varias partes funcionales e independientes entre s\u00ed, a un ritmo r\u00e1pido y con capacidad de corregir errores en el momento.</p>","tags":["EDES","Tools"]},{"location":"section3/u01/teoria/EDES-U1.5.-FasesDesarrollo/#fuentes","title":"Fuentes","text":"<ul> <li>GitHub de Jose Luis Gonz\u00e1lez S\u00e1nchez</li> <li>https://intelequia.com/blog/post/2083/ciclo-de-vida-del-software-todo-lo-que-necesitas-saber</li> <li>https://www.monografias.com/docs114/modelos-desarrollo/modelos-desarrollo</li> <li>https://proyectosagiles.org/desarrollo-iterativo-incremental/</li> <li>Scrum: qu\u00e9 es y c\u00f3mo funciona este marco de trabajo</li> </ul>","tags":["EDES","Tools"]},{"location":"section3/u02/","title":"UD 2 - Entornos de desarrollo integrado","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Eval\u00faa entornos integrados de desarrollo analizando sus caracter\u00edsticas para editar c\u00f3digo fuente y generar ejecutables.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han instalado entornos de desarrollo, propietarios y libres.</li> <li>b) Se han a\u00f1adido y eliminado m\u00f3dulos en el entorno de desarrollo.</li> <li>c) Se ha personalizado y automatizado el entorno de desarrollo.</li> <li>d) Se ha configurado el sistema de actualizaci\u00f3n del entorno de desarrollo.</li> <li>e) Se han generado ejecutables a partir de c\u00f3digo fuente de diferentes lenguajes en un mismo entorno de desarrollo.</li> <li>f) Se han generado ejecutables a partir de un mismo c\u00f3digo fuente con varios entornos de desarrollo.</li> <li>g) Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.</li> <li>h) Se han identificado las funciones m\u00e1s usuales de las herramientas CASE para el desarrollo, prueba y documentaci\u00f3n de c\u00f3digo.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir esta unidad teniendo en cuenta la normativa del curso</p> <p>La unidad pertenece al bloque 2 Herramientas de desarrollo.</p> <ul> <li>UD2: Entornos de desarrollo integrado</li> </ul> <p>En la unidad 2, veremos:</p> <ul> <li>Entornos de desarrollo integrado. Funcionalidades.</li> <li>Herramientas CASE.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/","title":"UD 2 - P1: Herramientas de desarrollo","text":"","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#relacion-21","title":"Relaci\u00f3n 2.1","text":"","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#descripcion","title":"Descripci\u00f3n","text":"<p>Ya hemos instalado, configurado y usado IDE's para la creaci\u00f3n, depuraci\u00f3n, generaci\u00f3n de ayuda y generaci\u00f3n de c\u00f3digo y ejecutable. Eso nos da una visi\u00f3n superficial de las distintas funcionalidades que existen en ellos.</p> <p>En esta actividad nos centraremos en los dos \u00faltimos criterios de evaluaci\u00f3n, de forma que nos permita concluir con lo aprendido hasta ahora:</p> <ul> <li>g) Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.</li> <li>h) Se han identificado las funciones m\u00e1s usuales de las herramientas CASE para el desarrollo, prueba y documentaci\u00f3n de c\u00f3digo.</li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#que-se-pide","title":"Que se pide","text":"<ul> <li>Instala al menos 2 IDEs</li> <li>Usa las herramientas, analiza sus funcionalidades identificando a que categor\u00eda de herramientas CASE pertenece</li> <li>Haz una tabla comparativa entre las dos herramientas.   </li> <li>Saca las conclusiones sobre la mejor herrmienta.  </li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Valor 1 Valor 2 Valor 3 RA2.g, h No est\u00e1n identificadas todas las funcionalidades o no son correctas, sin errores. Identifica la mayor\u00eda de las funcionalidades y son correctas de 2 IDE's, con alg\u00fan ejemplo. Identifica todas las funcionalidades de mas de 2 IDE's, con detalles avanzados y ejemplos.","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#condiciones-de-entrega","title":"Condiciones de entrega","text":"<p>El trabajo tiene las siguientes condiciones de entrega:</p> <ul> <li>Se realiza en un documento de google drive.</li> <li>El trabajo tiene que estar correctamente identificado:<ul> <li>Fecha</li> <li>Tu nombre</li> <li>Identificaci\u00f3n del curso y grupo.</li> <li>Identificaci\u00f3n del m\u00f3dulo, unidad y ejercicio.</li> </ul> </li> <li>Si no tiene nombre asignado, el trabajo tendr\u00e1 por nombre <code>DAW1A_id_iniciales</code> donde:<ul> <li><code>id</code>: es el identificador de la actividad, por ejemplo 1_1</li> <li><code>iniciales</code>: son tus iniciales por ejemplo <code>EFO</code> las m\u00edas.</li> </ul> </li> </ul>","tags":["Software"]},{"location":"section3/u02/practica/EDES-U2.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software"]},{"location":"section3/u02/teoria/EDES-U2.1.-Herramientas/","title":"UD 2 - 2.1 Relaci\u00f3n entre software y hardware","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u02/teoria/EDES-U2.1.-Herramientas/#herramientas-de-desarrollo","title":"Herramientas de desarrollo","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u02/teoria/EDES-U2.1.-Herramientas/#herramientas-case","title":"Herramientas CASE","text":"<p>Las herramientas CASE (Computer Aided Software Engineering) es el software orientado a ayudar en el proceso de desarrollo del software. Seg\u00fan la fase del desarrollo en la que se centran:</p> <ul> <li>Upper CASE (U-CASE), herramientas que ayudan en las fases de planificaci\u00f3n, an\u00e1lisis de requisitos.</li> <li>Middle CASE (M-CASE), herramientas para automatizar tareas en el an\u00e1lisis y dise\u00f1o de la aplicaci\u00f3n.</li> <li>Lower CASE (L-CASE), herramientas que semi-automatizan la generaci\u00f3n de c\u00f3digo y documentaci\u00f3n, detecci\u00f3n de errores, depuraci\u00f3n y pruebas.</li> </ul> <p>Las L-CASE son objeto del presente tema, destacando los IDEs como la m\u00e1s representativa, pasando a describirlas a continuaci\u00f3n.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u02/teoria/EDES-U2.1.-Herramientas/#entornos-de-desarrollo-integrado","title":"Entornos de desarrollo integrado","text":"<p>Un entorno de desarrollo integrado, en ingl\u00e9s Integrated Development Environment (IDE) proporciona servicios integrales para facilitar el desarrollo de software, por tanto est\u00e1 formado por, entre otras, algunas de las herramientas b\u00e1sicas que vimos anteriormente, algunas de las caracter\u00edsticas que deber\u00edan tener son:</p> <ul> <li>Soporte para diversos lenguajes de programaci\u00f3n</li> <li>Integraci\u00f3n con Sistemas de Control de Versiones</li> <li>Soporte de funcionalidades avanzadas como generaci\u00f3n de c\u00f3digo, refactorizaci\u00f3n, indentaci\u00f3n autom\u00e1tica, marcado de errores, etc.</li> <li>Editores que faciliten el reconocimiento de Sintaxis, predicci\u00f3n y autocompletado de c\u00f3digo.</li> <li>Funcionalida para la incorporacion de extensiones y componentes para el IDE, que faciliten la extension de la funcionalidad del IDE</li> <li>Integraci\u00f3n con Framework populares, para facialitar el uso de estos frameworks.</li> <li>Integraci\u00f3n con depurador</li> <li>Integracion con compiladores/interpretes.</li> <li>Ayudas que faciliten la creacion de la interfaz grafica.</li> <li>Importar y Exportar proyectos.</li> <li>Panel de configuracion para facilitar la configuracion y adaptacion del entorno a nuestros gustos.</li> </ul> <p>Algunos IDE\u2019s representativos podr\u00edan ser:</p> <ul> <li>Fleet: IDE de nueva generacion de JetBrains. construido para ser simple, ligero y flexible, permitiendo el uso de multitud de lenguajes.</li> <li>IntelliJ IDEA: IDE de de JetBrains con distitnas versiones de uso gratuito y de pago, usado para el desarrollo principalmente de Java y Kotlin. Permite el uso de muchas extensiones.</li> <li>Eclipse y Netbean: de c\u00f3digo libre, usados principalmente en el desarrollo Java. Con multitud de extensiones que permiten a\u00f1adir nuevas funcionalidades.</li> <li>Microsoft Visual Studio: de Microsoft, disponible para Windows Y MAC, soporta m\u00faltiples lenguajes y entornos de desarrollo web, como ASP.NET. Destacar la versi\u00f3n online y Microsoft Visual Studio Code, su hermano menor.</li> <li>Eclipse y Netbean: de c\u00f3digo libre, usados principalmente en el desarrollo Java. Con multitud de extensiones que permiten a\u00f1adir nuevas funcionalidades. Fueron de los primeros, actulamente cada vez se usan menos.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u02/teoria/EDES-U2.1.-Herramientas/#recursos","title":"Recursos","text":"<ul> <li>Gu\u00edas para la instalaci\u00f3n de IDES</li> <li>Visual Studio Code</li> <li>IntelliJ IDEA</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u02/teoria/EDES-U2.1.-Herramientas/#fuente","title":"Fuente","text":"<ul> <li>GitHub de Jose Luis Gonz\u00e1lez S\u00e1nchez</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/","title":"UD 3 - Herramientas Git/Github","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u03/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["EDES","Tools","CASE"]},{"location":"section3/u03/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Eval\u00faa entornos integrados de desarrollo analizando sus caracter\u00edsticas para editar c\u00f3digo fuente y generar ejecutables.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u03/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han instalado entornos de desarrollo, propietarios y libres.</li> <li>b) Se han a\u00f1adido y eliminado m\u00f3dulos en el entorno de desarrollo.</li> <li>c) Se ha personalizado y automatizado el entorno de desarrollo.</li> <li>d) Se ha configurado el sistema de actualizaci\u00f3n del entorno de desarrollo.</li> <li>e) Se han generado ejecutables a partir de c\u00f3digo fuente de diferentes lenguajes en un mismo entorno de desarrollo.</li> <li>f) Se han generado ejecutables a partir de un mismo c\u00f3digo fuente con varios entornos de desarrollo.</li> <li>g) Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.</li> <li>h) Se han identificado las funciones m\u00e1s usuales de las herramientas CASE para el desarrollo, prueba y documentaci\u00f3n de c\u00f3digo.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u03/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir esta unidad teniendo en cuenta la normativa del curso</p> <p>La unidad pertenece al bloque 2 Herramientas de desarrollo.</p> <ul> <li>UD2: Entornos de desarrollo integrado</li> </ul> <p>En la unidad 2, veremos:</p> <ul> <li>Entornos de desarrollo integrado. Funcionalidades.</li> <li>Herramientas CASE.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/","title":"UD 3 - P1: Git/Github b\u00e1sico","text":"","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#relacion-311-repositorios-local-y-remoto-directorio-de-trabajo","title":"Relaci\u00f3n 3.1.1: Repositorios local y remoto, directorio de trabajo...","text":"","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#objetivos","title":"Objetivos","text":"<ul> <li>Crear repositorios en Github</li> <li>Practicar con repositorios locales y remotos</li> <li>Crear commits en un repositorio</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica crearemos nuestro primer repositorio de Github. Para ello, primero habr\u00e1 que crear una cuenta en Github. Crearemos un repositorio de nombre ID_XXXX_my_calculator (mas info abajo, leela antes de crear el respositorio) en dicha cuenta, en el que alojaremos un peque\u00f1o desarrollo de software consistente en una calculadora web. </p> <p>Para comenzar este desarrollo, iniciamos un repositorio de git local. En la rama main se desarrollar\u00e1 en dos commits una calculadora con 2 botones. En el primer commit  se a\u00f1ade la calculadora con el bot\u00f3n x^3, adem\u00e1s de un fichero README.md con un breve texto descriptivo. En el segundo se a\u00f1ade el bot\u00f3n x^4 a la calculadora. </p> <p>Para terminar se sube la rama main del repositorio local al repositorio remoto en Github que hemos creado al principio.</p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#tareas","title":"Tareas","text":"","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-1-creacion-de-repositorio-remoto","title":"Paso 1: Creaci\u00f3n de repositorio remoto","text":"<p>El primer paso a seguir es crear una cuenta en Github, si no se tiene. A continuaci\u00f3n, creamos un nuevo repositorio p\u00fablico vac\u00edo con el nombre \"my_calculator\".</p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-2-creacion-de-repositorio-local","title":"Paso 2: Creaci\u00f3n de repositorio local","text":"<p>En un terminal de nuestro ordenador iniciamos un repositorio local de git. Si se tiene el sistema operativo Windows, se recomienda emplear Git Bash como terminal. <pre><code>$ git init my_calculator\n$ cd my_calculator\n</code></pre> y le asignamos el repositorio remoto que acabamos de crear <pre><code>$ git remote add origin git@github.com:&lt;mi usuario de github&gt;/my_calculator.git\n</code></pre></p> <p>Por ejemplo, si tu usuario es <code>pepe</code>, el comando ser\u00eda: <pre><code>$ git remote add origin git@github.com:pepe/my_calculator.git\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-3-anadir-ficheros-al-repositorio","title":"Paso 3: A\u00f1adir ficheros al repositorio","text":"<p>A\u00f1adir al directorio de trabajo un fichero con el nombre \"index.html\". Este fichero contendr\u00e1 una calculadora web con un bot\u00f3n para calcular el cubo del n\u00famero introducido: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> En la etiqueta h1 debes modificar el texto para incluir tu nombre y apellidos</p>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-4-registrar-cambios","title":"Paso 4: Registrar cambios","text":"<p>A continuaci\u00f3n, hay que registrar los ficheros en el \u00edndice y crear el primer commit en la rama main. Se recuerda que antes de crear un commit hay que probar siempre que el programa que se va a guardar funciona correctamente (en este caso, abri\u00e9ndolo en el navegador web y probando que funciona la calculadora).</p> <pre><code>$ git add index.html # A\u00f1adir el fichero creado\n$ git commit -m \"x^3 button\" # Congelar los cambios en un commit\n$ git log --oneline # Ver la lista de commits\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-5-crear-un-segundo-commit","title":"Paso 5: Crear un segundo commit","text":"<p>Debe crear un segundo commit en la rama en la que est\u00e1 trabajando (main).  El commit debe a\u00f1adir a la calculadora (fichero index.html) un segundo bot\u00f3n (elemento HTML <code>&lt;button ..&gt;</code>) que eleve un n\u00famero a la cuarta potencia (x^4) invocando una funci\u00f3n (power_4 ()) que calcula x^4 al hacer click en \u00e9l.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;button onclick=\"power_4()\"&gt; x^4&lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\nfunction power_4() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 4);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y despu\u00e9s de probar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^4 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#paso-6-subir-el-repositorio-a-github","title":"Paso 6: Subir el repositorio a Github","text":"<p>Para finalizar, hay que subir el repositorio local al repositorio remoto creado en Github inicialmente.</p> <pre><code>$ git push origin main\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL del repositorio a la tarea. </li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li>El nombre del repositorio sera: ID_XXXX_my_calculator donde </li> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> <li>Asegurate que funciona y: </li> <li>20%:  Existe el repositorio ID_XXXX_my_calculator</li> <li>40%:  El primer commit de la rama main es \u201cx^3 button\u201d y contiene lo pedido</li> <li>40%:  El segundo commit de la rama main es \u201cx^4 button\u201d y contiene lo pedido</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u03/practica/EDES-U3.-Practica001/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/","title":"UD 3 - 3.1 Pruebas","text":"","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#pruebas-en-construccion","title":"Pruebas (En construcci\u00f3n)","text":"<p>Se pretente estudiar algunas t\u00e9cnicas de verificaci\u00f3n y pruebas de programas, se comenzar\u00e1 por los principios b\u00e1sicos, ciclo de vida y niveles y tipos de pruebas, posteriormente profundizaremos en algunas t\u00e9cnicas de prueba m\u00e1s usadas para posteriormente mencionar algunas de las herramientas usadas para las pruebas.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#introduccion","title":"Introducci\u00f3n","text":"<p>Las pruebas de software son el proceso de evaluaci\u00f3n de un sistema o aplicaci\u00f3n para determinar si cumple con los requisitos especificados y funciona correctamente. El objetivo principal de las pruebas de software es garantizar la calidad del software y minimizar el riesgo de errores en el producto final.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#importancia-de-las-pruebas-de-software","title":"Importancia de las pruebas de software","text":"<p>Las pruebas de software son una parte crucial del proceso de desarrollo de software, ya que ayudan a identificar problemas y errores en una etapa temprana. Esto permite a los desarrolladores corregir los errores antes de que el software se lance al mercado, lo que puede ahorrar tiempo, costos y reducir la frustraci\u00f3n del usuario final.</p> <p>Las pruebas de software son importantes porque permiten detectar errores y problemas que pueden tener un impacto significativo en la funcionalidad del software. Estos errores pueden incluir fallos de seguridad, problemas de rendimiento, problemas de usabilidad, errores de l\u00f3gica y otros errores que pueden afectar la calidad del software y la satisfacci\u00f3n del usuario final.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#beneficios-de-realizar-pruebas-de-software","title":"Beneficios de realizar pruebas de software","text":"<p>Los beneficios de realizar pruebas de software incluyen:</p> <ul> <li>Identificaci\u00f3n temprana de errores y problemas en el software.</li> <li>Mejora de la calidad del software y la satisfacci\u00f3n del usuario.</li> <li>Reducci\u00f3n de costos y tiempos de correcci\u00f3n de errores.</li> <li>Reducci\u00f3n del riesgo de errores en el software en producci\u00f3n.</li> <li>Mejora de la confianza en el software y la marca de la empresa.</li> </ul> <p>En conclusi\u00f3n, las pruebas de software son una parte esencial del proceso de desarrollo de software que ayudan a garantizar la calidad del producto final y a reducir el riesgo de errores en producci\u00f3n.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#verificacion-y-prueba-de-programas","title":"Verificaci\u00f3n y prueba de programas","text":"<p>La ISTQB (International Software Testing Qualifications Board), una organizaci\u00f3n especializada en el campo de las pruebas y la industria del software define la verificaci\u00f3n y pruebas de programas como:</p> <p>Proceso que consiste en todas las actividades del ciclo de vida del software, tanto est\u00e1ticas como din\u00e1micas, concernientes con la planificaci\u00f3n, preparaci\u00f3n y evaluaci\u00f3n de productos software y los trabajos relacionados para determinar que \u00e9stos satisfacen los requisitos especificados, para demostrar que se ajustan al prop\u00f3sito y para detectar defectos.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#principios-basicos","title":"Principios b\u00e1sicos","text":"<p>Los principios b\u00e1sicos que rigen el proceso de verificaci\u00f3n y prueba de los programas son los siguientes:</p> <ul> <li>Las pruebas demuestran la presencia de defectos no la ausencia de ellos.</li> <li>Las pruebas exhaustivas no existen (salvo en casos triviales).</li> <li>Las pruebas tempranas ayudan a reducir costes.</li> <li>Agrupaci\u00f3n de defectos: Normalmente, la mayor parte de los defectos detectados se concentran en un n\u00famero reducido de m\u00f3dulos.</li> <li>Paradoja del pesticida (de Bruce Beizer): La eficacia en la detecci\u00f3n de errores de las mismas pruebas disminuye con el paso del tiempo.</li> <li>Las pruebas dependen del contexto: As\u00ed por ejemplo, la forma de probar un software cr\u00edtico de una central nuclear es diferente a  la p\u00e1gina web de una fruter\u00eda.</li> <li>La falacia de la ausencia de errores: La detecci\u00f3n y correcci\u00f3n de defectos no servir\u00e1 de nada si el sistema no es usable y no cumple con las expectativas de los usuarios.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#el-ciclo-de-vida","title":"El ciclo de vida","text":"<p>El ciclo de vida en el proceso de pruebas consta de las siguientes actividades principales:</p> <p></p> <ol> <li>Planificaci\u00f3n y control: Se establecen los objetivos y el plan de pruebas y se controla el avance con respecto a lo planificado.</li> <li>An\u00e1lisis y dise\u00f1o: los objetivos se transforman en casos de prueba tangibles</li> <li>Implementaci\u00f3n y ejecuci\u00f3n: Se configuran, desarrollan y ejecutan las pruebas.</li> <li>Evaluaci\u00f3n de los criterios de salida: En este punto se eval\u00faa los resultados de las pruebas respecto a los objetivos definidos y se decide sobre reproceso.</li> <li>Actividades de cierre de pruebas: Aqu\u00ed se realizan varias tareas finales, tales como analizar lecciones aprendidas, documentar la aceptaci\u00f3n del sistema, etc.</li> </ol>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#niveles","title":"Niveles","text":"<p>Seg\u00fan el ISTQB, el proceso de prueba se puede ejecutar en los siguientes niveles:</p> <ul> <li>Pruebas unitarias: Realizadas por el equipo de desarrollo, tienen como objeto comprobar el funcionamiento de un \u00fanico componente.</li> <li>Pruebas de integraci\u00f3n: Realizadas por el equipo de desarrollo, su objetivo principal es comprobar la interacci\u00f3n de diferentes partes de un sistema, validando la comunicaci\u00f3n entre sus interfaces.</li> <li>Pruebas de sistema: Realizadas por el equipo de pruebas, buscan probar el sistema como un todo y si los componentes de un sistema son compatibles e  interact\u00faan correctamente.</li> <li>Pruebas de aceptaci\u00f3n de usuario: Realizadas por el usuario final, el objetivo de estas pruebas es validar la disposici\u00f3n de un sistema para su despliegue y uso.</li> </ul> <p>Los niveles de las pruebas est\u00e1n estrechamente relacionados con las fases del ciclo de desarrollo del software, as\u00ed en el modelo o m\u00e9todo en V se establece dicha relaci\u00f3n de forma expl\u00edcita:</p> <p></p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#tecnicas-de-verificacion-y-prueba-de-programas","title":"T\u00e9cnicas de verificaci\u00f3n y prueba de programas","text":"<p>Las t\u00e9cnicas pueden ser de dos tipos dependiendo de si el c\u00f3digo de la aplicaci\u00f3n es ejecutado o no.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#tecnicas-dinamicas","title":"T\u00e9cnicas din\u00e1micas","text":"<p>Las pruebas din\u00e1micas se clasifican, a su vez, en t\u00e9cnicas de pruebas de caja negra, en las que se desconoce el c\u00f3digo fuente del componente y de caja blanca, en donde s\u00ed se conoce:</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#pruebas-de-caja-negra","title":"Pruebas de caja negra","text":"<p>En las que los casos se dise\u00f1an considerando las entradas y salidas sin conocer la estructura interna. Las pruebas funcionales y no funcionales y de regresi\u00f3n suelen utilizar esta t\u00e9cnica.</p> <ul> <li>Partici\u00f3n equivalente: La idea es dividir los valores v\u00e1lidos y no v\u00e1lidos para entradas y salidas en un n\u00famero reducido de particiones de forma que, el comportamiento del software sea el mismo para cualquier valor contenido en una partici\u00f3n particular. As\u00ed se reduce el n\u00famero de casos que hay que probar. Por ejemplo, para las notas de un alumno tendr\u00edamos 3 clases de equivalencia (particionando los n\u00famero enteros)</li> </ul> Clases Valores inferiores a los v\u00e1lidos Valores v\u00e1lidos Valores superiores a los v\u00e1lidos V. representativos -1 1,10 11 <ul> <li>An\u00e1lisis de valores l\u00edmites: Los casos de prueba que exploran las condiciones l\u00edmites de un programa producen buenos resultados. Para el ejemplo anterior, los valores l\u00edmites ser\u00edan (-1,0, y 10,11).</li> <li>Pruebas de transici\u00f3n de estado: En este caso se considera el sistema como una m\u00e1quina de estados, y se dise\u00f1an pruebas para cubrir secuencias t\u00edpicas de estados, o cubrir todos los estados, transiciones o probar transiciones inv\u00e1lidas.**    **</li> <li>Pruebas de caso de uso: Consisten en ejecutar escenarios que describen el uso que los usuarios van a darle al software. Son de gran utilidad para dise\u00f1ar las pruebas de aceptaci\u00f3n con la participaci\u00f3n del cliente.</li> <li>Pruebas seg\u00fan la experiencia: Consisten en la generaci\u00f3n de casos de prueba a partir de la intuici\u00f3n y la experiencia.</li> </ul>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#pruebas-de-caja-blanca","title":"Pruebas de caja blanca","text":"<p>Permiten examinar la estructura interna de un sistema, se centran en los detalles procedimentales, como las pruebas de software estructurales:</p> <ul> <li>Pruebas de camino b\u00e1sico: Consiste en hacer uso del grafo de flujo del c\u00f3digo (nodos: bloques de c\u00f3digo, y aristas: flujo de ejecuci\u00f3n de esos bloques) y complejidad ciclom\u00e1tica que nos indica el n\u00famero  de caminos independientes de ejecuci\u00f3n y dise\u00f1ar casos de prueba para verificar que todas las instrucciones del programa se ejecutan por lo menos una vez y los resultados son los esperados.</li> <li>Pruebas de coberturas de sentencias: La cobertura nos indica el porcentaje de sentencias en el c\u00f3digo cubierto por un conjunto de pruebas (\u201ctest suite\u201d)</li> </ul> <p>Con esta t\u00e9cnica se pretende dise\u00f1ar casos de prueba que aumenten la  cobertura.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#tecnicas-estaticas","title":"T\u00e9cnicas est\u00e1ticas","text":"<p>Al contrario que las pruebas din\u00e1micas, que exigen la ejecuci\u00f3n de software, las t\u00e9cnicas de pruebas est\u00e1ticas se basan en el examen manual (revisiones) y en el an\u00e1lisis automatizado (an\u00e1lisis est\u00e1tico) del c\u00f3digo sin ejecutar el c\u00f3digo. A este respecto, se pueden utilizar herramientas como SonarQube.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#tipos-de-pruebas-de-software","title":"Tipos de pruebas de software","text":"<ol> <li>Pruebas unitarias: Las pruebas unitarias son un tipo de prueba que se enfoca en evaluar el funcionamiento individual de cada unidad de c\u00f3digo del software, como funciones o m\u00e9todos. Las pruebas unitarias se realizan en un ambiente aislado del resto del software para evaluar el comportamiento de una unidad de c\u00f3digo espec\u00edfica y detectar errores en su funcionamiento.  EJEMPLO: En una aplicaci\u00f3n de gesti\u00f3n de tareas, se realiza una prueba unitaria en el m\u00f3dulo de creaci\u00f3n de tareas para verificar que se crean correctamente con la informaci\u00f3n proporcionada y que se pueden guardar en la base de datos. Se verifica que la creaci\u00f3n de tareas genera una respuesta de \u00e9xito y que la tarea se encuentra en la base de datos.</li> <li>Pruebas de integraci\u00f3n: Las pruebas de integraci\u00f3n son un tipo de prueba que se enfoa en evaluar c\u00f3mo las diferentes unidades de c\u00f3digo se integran y trabajan juntas como un todo. Este tipo de prueba se suele realizar despu\u00e9s de las pruebas unitarias para detectar problemas en la interacci\u00f3n entre las diferentes unidades de c\u00f3digo. EJEMPLO: En una aplicaci\u00f3n de e-commerce, se realiza una prueba de integraci\u00f3n para verificar que el m\u00f3dulo de pago interact\u00faa correctamente con el m\u00f3dulo de compras. Se verifica que los datos de pago se env\u00edan correctamente a la pasarela de pago y que se actualiza el estado del pedido en la base de datos.</li> <li>Pruebas de sistema: Las pruebas de sistema son un tipo de prueba que se enfoca en evaluar el funcionamiento del software como un sistema completo. Este tipo de prueba se realiza despu\u00e9s de las pruebas de integraci\u00f3n para evaluar la funcionalidad del software en un ambiente m\u00e1s realista. EJEMPLO: En una aplicaci\u00f3n de chat en tiempo real, se realiza una prueba de sistema para verificar que el servicio de chat funciona correctamente con varios usuarios conectados al mismo tiempo. Se verifica que los mensajes se env\u00edan y reciben correctamente, y que se mantienen las conexiones entre los usuarios.</li> <li>Pruebas de aceptaci\u00f3n: Las pruebas de aceptaci\u00f3n son un tipo de prueba que se enfoca en evaluar si el software cumple con los requisitos y las expectativas del usuario final. Estas pruebas suelen ser realizadas por el cliente o el usuario final para evaluar si el software cumple con los requisitos establecidos. EJEMPLO: En una aplicaci\u00f3n de reserva de vuelos, se realiza una prueba de aceptaci\u00f3n para verificar que se cumplen los requisitos del cliente. Se verifica que los usuarios pueden buscar vuelos disponibles, seleccionar asientos y reservar los vuelos seleccionados.</li> <li>Pruebas de regresi\u00f3n: Las pruebas de regresi\u00f3n son un tipo de prueba que se enfoca en evaluar que el sistema sigue funcionando adecuadamente tras la realizaci\u00f3n de nuevos cambios. Estas pruebas se realizan para asegurarnos que las modificaciones realizadas en el software no han introducido errores en \u00e1reas que antes funcionaban correctamente. Normalmente suelen ser automatizadas y se ejecutan cada vez que se genera una nueva versi\u00f3n para asegurarnos que las modificaciones se integran sin causar problemas.  EJEMPLO: En una aplicaci\u00f3n de edici\u00f3n de im\u00e1genes, se realiza una prueba de regresi\u00f3n despu\u00e9s de una actualizaci\u00f3n de software para verificar que las funcionalidades que funcionaban antes de la actualizaci\u00f3n siguen funcionando correctamente despu\u00e9s. Se verifica que la edici\u00f3n de im\u00e1genes, la aplicaci\u00f3n de efectos y la exportaci\u00f3n de im\u00e1genes siguen funcionando sin errores.</li> <li>Pruebas de carga: Las pruebas de carga son un tipo de prueba que se enfoca en evaluar el comportamiento del software en condiciones de alta demanda. Estas pruebas se realizan para evaluar la capacidad del software para manejar una gran cantidad de usuarios o procesos simult\u00e1neamente. EJEMPLO: En una aplicaci\u00f3n web, simular un gran n\u00famero de usuarios que acceden a esta de forma simult\u00e1nea, y monitorizar c\u00f3mo el software responde a esta carga. Se podr\u00edan medir aspectos como el tiempo de respuesta de la aplicaci\u00f3n, el n\u00famero de errores producidos y la tasa de transacciones completadas con \u00e9xito.</li> <li>Pruebas de rendimiento: Las pruebas de rendimiento son un tipo de prueba que se enfoca en evaluar la velocidad, la estabilidad y la escalabilidad del software en diferentes situaciones y cargas de trabajo. EJEMPLO: En una aplicaci\u00f3n de streaming de video, se realiza una prueba de rendimiento para verificar que la aplicaci\u00f3n puede manejar la carga de usuarios concurrentes y ofrecer una experiencia de visualizaci\u00f3n sin interrupciones. Se miden tiempos de carga, calidad de imagen y velocidad de reproducci\u00f3n en diferentes resoluciones.</li> <li>Pruebas de seguridad: Las pruebas de seguridad son un tipo de prueba que se enfoca en evaluar la capacidad del software para proteger los datos y el sistema contra posibles amenazas y ataques externos. EJEMPLO: En una aplicaci\u00f3n de gesti\u00f3n de contrase\u00f1as, se realiza una prueba de seguridad para verificar que los datos de los usuarios est\u00e1n protegidos contra posibles amenazas externas. Se verifica la fortaleza de las contrase\u00f1as, la encriptaci\u00f3n de los datos y la seguridad de los servidores de almacenamiento de contrase\u00f1as.</li> </ol> <p>Como has podido observar, existen varios tipos de pruebas de software que se pueden realizar para evaluar diferentes aspectos de la funcionalidad y la calidad del software. Es importante elegir el tipo de prueba adecuado para cada situaci\u00f3n y realizar pruebas continuas durante todo el proceso de desarrollo para garantizar la calidad del software.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#plan-de-pruebas","title":"Plan de pruebas","text":"<p>Un plan de pruebas es un documento que describe c\u00f3mo se realizar\u00e1n las pruebas de software y cu\u00e1les ser\u00e1n los objetivos y las expectativas de estas pruebas. El plan de pruebas es esencial para garantizar que las pruebas se realicen de manera efectiva y se puedan evaluar los resultados. La identificaci\u00f3n de los objetivos de las pruebas nos permitir\u00e1 acotar los puntos que forman el plan de pruebas. Por ejemplo, el objetivo puede ser identificar y corregir errores en el software, evaluar si el software cumple con los requisitos establecidos o evaluar la calidad y la funcionalidad del software, evaluar el rendimiento en horas de alta carga, etc.</p> <p>A continuaci\u00f3n, se describen los elementos m\u00e1s comunes de un plan de pruebas:</p> <ol> <li>Definici\u00f3n del alcance de las pruebas</li> </ol> <p>En este punto, se deben establecer los l\u00edmites de las pruebas y definir cu\u00e1les son los componentes y funcionalidades del software que se van a probar. Es importante que esta definici\u00f3n sea lo suficientemente amplia como para cubrir todas las \u00e1reas cr\u00edticas del software, pero tambi\u00e9n lo suficientemente espec\u00edfica como para asegurarse de que se est\u00e1n probando todas las funcionalidades de manera exhaustiva.</p> <p>Se establece que el alcance de las pruebas para una aplicaci\u00f3n web de comercio electr\u00f3nico incluye el registro de usuarios, el proceso de compra, la gesti\u00f3n de la cuenta de usuario, la gesti\u00f3n de productos y la integraci\u00f3n con pasarelas de pago.</p> <ol> <li>Identificaci\u00f3n de los recursos necesarios para las pruebas</li> </ol> <p>Identificar los recursos necesarios para realizar las pruebas es otro de los aspectos importantes del plan de pruebas. Los recursos pueden incluir hardware, software, personal de pruebas y cualquier otro tipo de recurso que se necesite para ejecutar las pruebas de manera efectiva. Es importante identificar y asignar los recursos adecuados para garantizar que las pruebas se puedan realizar sin problemas.</p> <p>Se identifica que se necesitan 2 equipos para ejecutar las pruebas, cada equipo con diferentes navegadores y sistemas operativos. Tambi\u00e9n se necesitan datos de prueba para simular la interacci\u00f3n del usuario con la aplicaci\u00f3n, y un servidor para alojar la aplicaci\u00f3n y las herramientas de pruebas.</p> <ol> <li>Selecci\u00f3n de herramientas de pruebas</li> </ol> <p>La selecci\u00f3n de las herramientas de pruebas adecuadas es crucial para asegurar que las pruebas se realicen de manera efectiva. Las herramientas de pruebas pueden incluir software para la creaci\u00f3n de casos de prueba, herramientas para la automatizaci\u00f3n de pruebas, herramientas para la gesti\u00f3n de defectos, entre otras. Es importante seleccionar las herramientas adecuadas para las necesidades espec\u00edficas del proyecto.</p> <p>Se seleccionan las herramientas Selenium y JMeter para realizar las pruebas funcionales y de rendimiento respectivamente, y MockK y Kotest para realizar pruebas unitarias, de integraci\u00f3n y aceptaci\u00f3n. Adem\u00e1s, se decide utilizar Git como sistema de control de versiones para el c\u00f3digo de la aplicaci\u00f3n y los scripts de pruebas.</p> <ol> <li>Dise\u00f1o de casos de prueba</li> </ol> <p>Los casos de prueba describen los pasos espec\u00edficos que deben seguirse para evaluar el software y verificar si cumple con los requisitos establecidos. El dise\u00f1o de casos de prueba debe ser exhaustivo para cubrir todas las \u00e1reas cr\u00edticas del software y asegurar que todas las funcionalidades se prueben adecuadamente.</p> <p>Se elaboran casos de prueba para verificar la funcionalidad de la aplicaci\u00f3n en diferentes escenarios, tales como pruebas de navegaci\u00f3n, formularios, funcionalidad de compra, validaciones de datos y seguridad.</p> <p>Por ejemplo, para verificar la funcionalidad de una aplicaci\u00f3n de gesti\u00f3n de tareas:</p> <ul> <li>Casos de prueba de creaci\u00f3n de tareas:</li> <li>Verificaci\u00f3n de que se pueden crear tareas con \u00e9xito. </li> <li>Verificaci\u00f3n de que se pueden asignar tareas a usuarios espec\u00edficos. </li> <li>Verificaci\u00f3n de que se pueden establecer fechas de vencimiento para las tareas. </li> <li>Casos de prueba de edici\u00f3n de tareas:</li> <li>Verificaci\u00f3n de que se pueden editar tareas existentes. </li> <li>Verificaci\u00f3n de que se pueden actualizar los datos de la tarea, como la fecha de vencimiento y la asignaci\u00f3n de usuarios. </li> <li>Casos de prueba de eliminaci\u00f3n de tareas:</li> <li>Verificaci\u00f3n de que se pueden eliminar tareas con \u00e9xito. </li> <li> <p>Verificaci\u00f3n de que no se pueden eliminar tareas asignadas a otros usuarios.</p> </li> <li> <p>Asignaci\u00f3n de responsabilidades</p> </li> </ul> <p>La asignaci\u00f3n de responsabilidades es crucial para garantizar que las pruebas se realicen de manera efectiva. En este punto, se deben definir los roles y responsabilidades de cada miembro del equipo de pruebas, as\u00ed como los roles y responsabilidades de cualquier otro miembro del equipo que est\u00e9 involucrado en el proceso de pruebas. Esto asegura que cada persona tenga claro lo que se espera de \u00e9l o ella durante el proceso de pruebas.</p> <p>Se asignan responsabilidades a los miembros del equipo de pruebas, por ejemplo, un tester ser\u00e1 responsable de la ejecuci\u00f3n de las pruebas de integraci\u00f3n, otro tester ser\u00e1 responsable de las pruebas de sistema, y un tercero ser\u00e1 responsable de las pruebas de aceptaci\u00f3n.</p> <ol> <li>Cronograma de pruebas</li> </ol> <p>El cronograma debe incluir la duraci\u00f3n de cada fase de pruebas y los plazos de entrega para cada etapa. Tambi\u00e9n debe tener en cuenta los plazos y recursos disponibles para el proyecto en su totalidad. El cronograma de pruebas ayuda a asegurar que las pruebas se realicen dentro de los plazos establecidos y que el proyecto se entregue en tiempo y forma.</p> <p>Se establece un cronograma que indica cu\u00e1ndo se llevar\u00e1n a cabo las diferentes pruebas y qui\u00e9n ser\u00e1 responsable de su ejecuci\u00f3n, y el proceso mediante el cual el equipo de desarrollo debe corregir las incidencias reportadas durante las pruebas, por ejemplo,  antes de que se inicie la siguiente fase de pruebas.</p> <p>En ejemplo simple de cronograma:</p> <ul> <li>Semana 1:<ul> <li>Revisi\u00f3n y aprobaci\u00f3n de casos de prueba por el desarrollador.</li> <li>Configuraci\u00f3n del entorno de prueba.</li> <li>Ejecuci\u00f3n de pruebas unitarias.</li> </ul> </li> <li>Semana 2:<ul> <li>Ejecuci\u00f3n de pruebas de interfaz de usuario.</li> <li>Ejecuci\u00f3n de pruebas de rendimiento.</li> </ul> </li> <li>Semana 3:<ul> <li>Ejecuci\u00f3n de pruebas de aceptaci\u00f3n.</li> <li>Documentaci\u00f3n de los resultados de las pruebas.</li> </ul> </li> <li>Semana 4:<ul> <li>Revisi\u00f3n de resultados de pruebas y toma de decisiones sobre la aprobaci\u00f3n de la entrega.</li> </ul> </li> </ul> <p>En definitiva, un plan de pruebas es esencial para garantizar que las pruebas de software se realicen de manera efectiva y se puedan evaluar los resultados. Un plan de pruebas detallado debe incluir los objetivos de las pruebas, el alcance de las pruebas, el cronograma y los recursos, el plan de pruebas detallado, los roles y las responsabilidades y el proceso de seguimiento y documentaci\u00f3n de errores.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#pruebas-de-integracion","title":"Pruebas de integraci\u00f3n","text":"<p>a. Definici\u00f3n de pruebas de integraci\u00f3n</p> <p>Las pruebas de integraci\u00f3n son un tipo de prueba de software que se enfoca en probar c\u00f3mo diferentes componentes de software interact\u00faan entre s\u00ed cuando se integran. Estas pruebas se realizan despu\u00e9s de haber completado las pruebas unitarias y antes de realizar las pruebas del sistema. El objetivo de las pruebas de integraci\u00f3n es detectar problemas de integraci\u00f3n entre los diferentes componentes de software para garantizar que el sistema completo funcione correctamente.</p> <p>b. Tipos de pruebas de integraci\u00f3n</p> <p>Existen diferentes tipos de pruebas de integraci\u00f3n, que se pueden clasificar seg\u00fan el nivel de integraci\u00f3n que se est\u00e1 probando:</p> <ul> <li>Pruebas de integraci\u00f3n ascendente: se inician con las unidades de menor nivel (m\u00f3dulos o componentes) y se van integrando hacia arriba, hasta llegar al nivel de sistema completo.</li> <li>Pruebas de integraci\u00f3n descendente: se inician con los m\u00f3dulos de m\u00e1s alto nivel y se van integrando hacia abajo, hasta llegar a las unidades de menor nivel.</li> <li>Pruebas de integraci\u00f3n h\u00edbridas: combinan los dos enfoques anteriores, empezando por un grupo de m\u00f3dulos y luego continuando hacia arriba y hacia abajo simult\u00e1neamente.</li> </ul> <p>Adem\u00e1s, las pruebas de integraci\u00f3n tambi\u00e9n se pueden clasificar seg\u00fan la estrategia que se utilice para realizarlas.</p> <p>c. Estrategias para realizar pruebas de integraci\u00f3n</p> <p>Existen diferentes estrategias que se pueden utilizar para realizar pruebas de integraci\u00f3n. Algunas de las m\u00e1s comunes son:</p> <ul> <li>Pruebas Big-Bang: en esta estrategia, se integran todos los componentes a la vez y se realizan pruebas para verificar que funcionen correctamente. Esta estrategia es r\u00e1pida y sencilla de realizar, pero puede ser dif\u00edcil detectar los problemas de integraci\u00f3n si hay muchos componentes.</li> <li>Pruebas por m\u00f3dulos: esta estrategia consiste en integrar los componentes de software en m\u00f3dulos l\u00f3gicos y realizar pruebas en cada uno de ellos. Luego, se integran los m\u00f3dulos y se realizan pruebas en el sistema completo.</li> <li>Pruebas de fachada: esta estrategia consiste en crear fachadas (interfaces) para los componentes que a\u00fan no se han desarrollado y realizar pruebas con estas interfaces, para simular el comportamiento de los componentes reales que a\u00fan no est\u00e1n disponibles.</li> <li>Pruebas de stub y driver: esta estrategia consiste en utilizar stubs (programas que simulan la funcionalidad de los componentes faltantes) y drivers (programas que simulan la entrada y salida de los componentes faltantes) para realizar pruebas en los componentes que a\u00fan no est\u00e1n disponibles.</li> </ul> <p>Un ejemplo en de prueba de integraci\u00f3n ascendente en la que se sigue una estrategia por modulos:</p> <p>Supongamos que estamos desarrollando un sistema de compras en l\u00ednea que consta de tres m\u00f3dulos: el m\u00f3dulo de autenticaci\u00f3n de usuarios, el m\u00f3dulo de gesti\u00f3n de carritos de compras y el m\u00f3dulo de procesamiento de pagos. Cada uno de estos m\u00f3dulos ha sido desarrollado por un equipo diferente de desarrolladores.</p> <p>Para realizar pruebas de integraci\u00f3n ascendente, comenzamos con el m\u00f3dulo m\u00e1s bajo en la jerarqu\u00eda y vamos subiendo gradualmente. En este caso, comenzar\u00edamos con el m\u00f3dulo de autenticaci\u00f3n de usuarios.</p> <ol> <li>Se desarrollan y prueban los componentes individuales del m\u00f3dulo de autenticaci\u00f3n de usuarios, como la validaci\u00f3n de la direcci\u00f3n de correo electr\u00f3nico y la contrase\u00f1a del usuario.</li> <li>Luego, se integran los componentes individuales del m\u00f3dulo y se prueban los flujos de trabajo completos, como el registro de nuevos usuarios y la autenticaci\u00f3n de usuarios existentes.</li> <li>Una vez que se ha probado el m\u00f3dulo de autenticaci\u00f3n de usuarios por completo, se procede a integrar el m\u00f3dulo de gesti\u00f3n de carritos de compras.</li> <li>Se siguen los mismos pasos que con el m\u00f3dulo de autenticaci\u00f3n de usuarios: se prueban los componentes individuales del m\u00f3dulo, luego se integran y se prueban los flujos de trabajo completos.</li> <li>Finalmente, se integra el m\u00f3dulo de procesamiento de pagos y se prueban los flujos de trabajo completos, desde la selecci\u00f3n de productos hasta la finalizaci\u00f3n del pago.</li> </ol> <p>De esta manera, se van integrando gradualmente los distintos m\u00f3dulos del sistema y se prueban los flujos de trabajo completos, asegurando que no hay conflictos o errores en la interacci\u00f3n entre los distintos componentes. Este proceso se denomina \"ascendente\" ya que se comienza con los m\u00f3dulos m\u00e1s bajos en la jerarqu\u00eda y se va avanzando hacia arriba.</p> <p>En resumen, las pruebas de integraci\u00f3n son un tipo de prueba de software que se enfoca en probar la integraci\u00f3n de los diferentes componentes del software. Para realizarlas, se pueden utilizar diferentes estrategias, como pruebas Big-Bang, por m\u00f3dulos, de fachada y de stub y driver. El objetivo es detectar problemas stubde integraci\u00f3n para garantizar que el sistema completo funcione correctamente.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#pruebas-de-sistema","title":"Pruebas de sistema","text":"<p>a. Definici\u00f3n de pruebas de sistema</p> <p>Las pruebas de sistema son una etapa importante del proceso de prueba de software en la que se eval\u00faa el sistema completo para asegurarse de que cumple con los requisitos y especificaciones definidos. Estas pruebas se realizan despu\u00e9s de las pruebas de integraci\u00f3n y antes de las pruebas de aceptaci\u00f3n.</p> <p>b. Tipos de pruebas de sistema</p> <p>Los tipos de pruebas de sistema que se pueden realizar son los siguientes:</p> <ol> <li>Pruebas de funcionalidad: se asegura que todas las funciones del sistema est\u00e9n funcionando correctamente.</li> <li>Pruebas de rendimiento: se verifica que el sistema cumpla con los requisitos de rendimiento definidos, como la velocidad de respuesta, el tiempo de carga, etc.</li> <li>Pruebas de carga: se comprueba la capacidad del sistema para manejar grandes vol\u00famenes de datos o usuarios simult\u00e1neos.</li> <li>Pruebas de seguridad: se eval\u00faa la seguridad del sistema y se verifica que cumple con los requisitos de seguridad definidos.</li> <li>Pruebas de compatibilidad: se verifica la capacidad del sistema para trabajar con diferentes entornos de hardware, software y configuraciones de red.</li> <li>Pruebas de usabilidad: se eval\u00faa la facilidad de uso y la experiencia del usuario.</li> </ol> <p>c. Estrategias para realizar pruebas de sistema   </p> <p>Las estrategias comunes para realizar pruebas de sistema son:</p> <ol> <li>Pruebas de casos de uso: se prueban los casos de uso definidos y se verifica que el sistema funcione seg\u00fan lo previsto en cada caso.</li> <li>Pruebas de escenarios: se prueban los diferentes escenarios de uso del sistema, incluyendo los casos de uso complejos y poco comunes.</li> <li>Pruebas de extremo a extremo: se prueban las funcionalidades del sistema desde el inicio hasta el final, incluyendo todas las interacciones entre los diferentes m\u00f3dulos y componentes del sistema.</li> <li>Pruebas de seguridad: se realizan diferentes tipos de pruebas de seguridad, como pruebas de penetraci\u00f3n, pruebas de vulnerabilidad, etc., para evaluar la seguridad del sistema.</li> <li>Pruebas de compatibilidad: se realizan pruebas en diferentes entornos de hardware y software para verificar la compatibilidad del sistema.</li> <li>Pruebas de estr\u00e9s: se prueban las capacidades del sistema en situaciones de alta carga o bajo condiciones extremas para verificar su capacidad para manejar tales situaciones.</li> </ol> <p>En resumen, las pruebas de sistema son cr\u00edticas para garantizar que el sistema cumpla con los requisitos y especificaciones definidos antes de que sea entregado al cliente. Para ello, se deben definir diferentes tipos de pruebas y estrategias apropiadas para realizarlas de manera efectiva.</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#pruebas-de-aceptacion","title":"Pruebas de aceptaci\u00f3n","text":"<p>Definici\u00f3n de pruebas de aceptaci\u00f3n Tipos de pruebas de aceptaci\u00f3n Estrategias para realizar pruebas de aceptaci\u00f3n</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#documentacion-de-incidencias","title":"Documentaci\u00f3n de incidencias","text":"<p>Definici\u00f3n de incidencias Proceso de documentaci\u00f3n de incidencias Clasificaci\u00f3n de incidencias Ejemplos de herramientas de seguimiento de incidencias</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.1.-Pruebas/#conclusiones","title":"Conclusiones","text":"<p>Resumen de los puntos m\u00e1s importantes Importancia de la colaboraci\u00f3n entre desarrolladores y testers La importancia de la mejora continua en el proceso de pruebas de software</p>","tags":["EDES","Software","test","Pruebas"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/","title":"UD 3 - 3.2 Test de unidad y TDD","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#test-de-unidad-y-tdd","title":"Test de unidad y TDD","text":"","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#test-de-unidad","title":"Test de unidad","text":"<p>Las pruebas unitarias o unit testing son una forma de comprobar que un fragmento de c\u00f3digo funciona correctamente. Es un procedimiento m\u00e1s de los que se llevan a cabo dentro de una metodolog\u00eda \u00e1gil de trabajo.</p> <p>Si nunca te has atrevido con ellas o no sabes por d\u00f3nde empezar, es el momento de descubrir c\u00f3mo las pruebas unitarias pueden ayudarte a  mejorar el resultado final de tu aplicaci\u00f3n .</p> <p>Las pruebas unitarias consisten en  aislar una parte del c\u00f3digo y comprobar que funciona a la perfecci\u00f3n . Son peque\u00f1os tests que validan el comportamiento de un objeto y la l\u00f3gica. El unit testing suele realizarse durante la fase de desarrollo de aplicaciones de software o m\u00f3viles. Normalmente las llevan a cabo los  desarrolladores , aunque en la pr\u00e1ctica, tambi\u00e9n pueden realizarlas los  responsables de QA . Hay una especie de mito respecto a las pruebas unitarias. Algunos desarrolladores est\u00e1n convencidos de que son una p\u00e9rdida de tiempo y las evitan buscando ahorrar tiempo. Nada m\u00e1s alejado de la realidad. Con ellas se detectan antes errores que, sin las pruebas unitarias, no se podr\u00edan detectar hasta fases m\u00e1s avanzadas como las pruebas de sistema, de integraci\u00f3n e incluso en la beta. Realizar pruebas unitarias con regularidad supone, al final, un ahorro de tiempo y dinero.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#motivos-para-realizar-un-test-unitario","title":"Motivos para realizar un test unitario","text":"<p>Si todav\u00eda no est\u00e1s del todo seguro de por qu\u00e9 debes incorporar las unit testing a tu d\u00eda a d\u00eda como desarrollador, te damos algunos motivos:</p> <ul> <li>Las pruebas unitarias demuestran que la l\u00f3gica del c\u00f3digo est\u00e1 en buen estado y que funcionar\u00e1 en todos los casos.</li> <li>Aumentan la legibilidad del c\u00f3digo y ayudan a los desarrolladores a entender el c\u00f3digo base, lo que facilita hacer cambios m\u00e1s r\u00e1pidamente.</li> <li>Los test unitarios bien realizados sirven como documentaci\u00f3n del proyecto.</li> <li>Se realizan en  pocos milisegundos , por lo que podr\u00e1s realizar cientos de ellas en muy poco tiempo.</li> <li>Las unit testing permiten al desarrollador refactorizar el c\u00f3digo m\u00e1s adelante y tener la garant\u00eda de que el m\u00f3dulo sigue funcionando correctamente. Para ello se escriben casos de prueba para todas las funciones y m\u00e9todos, para que cada vez que un cambio provoque un error, sea posible identificarlo y repararlo r\u00e1pidamente.</li> <li>La calidad final del c\u00f3digo mejorar\u00e1 ya que, al estar realizando pruebas de manera continua, al finalizar el c\u00f3digo ser\u00e1 limpio y de calidad.</li> <li>Como las pruebas unitarias dividen el c\u00f3digo en peque\u00f1os fragmentos, es posible probar distintas partes del proyecto sin tener que esperar a que otras est\u00e9n completadas.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#tdd","title":"TDD","text":"<p>Probablemente, la t\u00e9cnica que hasta hoy conoces (y practicas) a la hora de programar consiste en escribir c\u00f3digo y luego, con algo de suerte, probarlo para ver si efectivamente hace lo que tiene que hacer. Esta prueba puede ser manual (por ejemplo, mediante un REPL o sencillamente apretando botones) o automatizada (mediante pruebas unitarias, end-to-end, lo que sea).</p> <p>En este punto proponemos algo que puede resultar disruptivo y hasta molesto (al menos al principio): comenzar por las pruebas y luego escribir el c\u00f3digo necesario para que ellas pasen. No ahondaremos aqu\u00ed en las ventajas y desventajas de la pr\u00e1ctica (hay mucho escrito en internet) pero s\u00ed diremos que TDD es una muy buena forma de encarar un problema que no tenemos mucha idea de c\u00f3mo resolver, y de poner especial atenci\u00f3n a las pruebas automatizadas\u2026 lo cual nos interesa especialmente en este momento.</p> <p>Aunque el nombre pueda sugerir otra cosa, el desarrollo guiado por pruebas, test driven development o TDD es una t\u00e9cnica de desarrollo que nos propone escribir las pruebas antes que el c\u00f3digo. Sin dudas, una de las consecuencias de usarla es que al finalizar contaremos con una buena bater\u00eda de pruebas, aunque no es ese su objetivo principal.</p> <p>Es un pr\u00e1ctica de dise\u00f1o de software orientado a objetos, aunque extensible a otros paradigmas y lenguajes. Plantea un flujo de trabajo claro y simple basado en la creaci\u00f3n de test de unidad. Pensar primero en el uso y luego en la implementaci\u00f3n. Partir de las pruebas, el uso de tus unidades funcionales, interfaces, nombres, par\u00e1metros, etc, para elaborar un dise\u00f1o del software que nos permita implementarlo.</p> <p>OJO, TDD no son pruebas, aunque el obtener las pruebas es una consecuencia. TDD nos permite dise\u00f1ar nuestro c\u00f3digo pensando en el uso que se le va a dar.</p> <p>La t\u00e9cnica se puede resumir en dos reglas de oro:</p> <p>Nunca escribas funcionalidad sin una prueba que falle antes. - Kent Beck.</p> <p>Esto nos quiere ayudar a pensar en el uso, ya que si la prueba funciona, es porque ya existe.</p> <p>Si no puedes escribir una prueba para lo vas a implementar, entonces no deber\u00edas estar pensando en la implementaci\u00f3n.</p> <ul> <li>Dave Chaplin.</li> </ul> <p>Si no podemos escribir una prueba es porque no est\u00e1 claro lo que quieres hacer, quiz\u00e1s falte aclarar requisitos.</p> <p>La t\u00e9cnica tiene 3 pasos:</p> <ol> <li>RED: Escribe un test que falla, ver como muestra el error.</li> <li>GREEN: Escribe el c\u00f3digo m\u00ednimo necesario y simple para que el test no falle. Esto nos permitir\u00e1 realizar un dise\u00f1o    simple, sin sobredise\u00f1ar.</li> <li>REFACTOR: Refactoriza tu c\u00f3digo y tu test. Mejorar el c\u00f3digo sin modificar lo que hace este.    </li> </ol> <p>Este ciclo se repite continuamente. Aunque no indica cuando parar y cuando refactorizar. Estas decisiones las tomaremos e iremos mejorando conforme vayamos</p> <p>En lo que a pr\u00e1cticas se refiere, ver a alguien hacerlo puede resultar mucho m\u00e1s educativo que una explicaci\u00f3n te\u00f3rica sobre en qu\u00e9 consiste la misma.</p> <p>Y si bien cada lenguaje y framework tiene sus particularidades, esta t\u00e9cnica es agn\u00f3stica de la tecnolog\u00eda.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#diseno-de-casos-de-prueba","title":"Dise\u00f1o de casos de prueba","text":"<p>Presentaremos algunas gu\u00edas para desarrollar los casos de prueba, asumiendo que ya conoc\u00e9s el concepto de pruebas automatizadas y alg\u00fan framework para implementarlas.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#descripcion-del-dominio","title":"Descripci\u00f3n del dominio","text":"<p>Todo el apunte estar\u00e1 elaborado en base al siguiente dominio:</p> <p>REQUERIMIENTO: Una ferreter\u00eda tiene en cuenta ciertos aspectos para decidir si le puede fiar a un cliente o no.</p> <ul> <li>Al cliente particular le fia solo si no adeuda nada, es decir si su deuda es de $0.</li> <li>A las constructoras les fia dependiendo de cu\u00e1ntos alba\u00f1iles trabajen en la obra:</li> <li>si son 5 o m\u00e1s alba\u00f1iles, le f\u00eda hasta $10.000,</li> <li>de lo contrario s\u00f3lo hasta $5.000.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#definiendo-los-escenarios","title":"Definiendo los escenarios","text":"<p>Para armar los escenarios de prueba, vamos a tomar prestado un concepto de la matem\u00e1tica llamado  clase de equivalencia . Clasificar a los distintos escenarios seg\u00fan las caracter\u00edsticas que comparten nos va a permitir contemplar todas las opciones posibles sin tener que escribir infinitas pruebas.</p> <p>Para un cliente particular tenemos dos casos:</p> <ul> <li>o que no deba nada.</li> <li>que deba algo. Si debe $1 \u00f3 $50.000 no nos importa, porque est\u00e1 en la misma clase de equivalencia (la deuda es mayor a   $0).</li> </ul> <p>Para una  empresa constructora , tenemos m\u00e1s variantes:</p> <ul> <li>si tiene menos de 5 alba\u00f1iles, podemos decir que son <code>\"pocos\"</code> alba\u00f1iles,</li> <li>si tiene 5 o m\u00e1s alba\u00f1iles, podemos decir que son <code>\"muchos\"</code> alba\u00f1iles.</li> </ul> <p>Combinando eso con las posibles deudas, podr\u00edamos definir los siguientes escenarios:</p> <ul> <li>Dado un cliente particular:</li> <li>Si debe algo: no se le puede fiar.</li> <li>Si no debe nada: se le puede fiar.</li> <li>Dada una constructora con muchos (5) alba\u00f1iles:</li> <li>Si la obra debe m\u00e1s de $10.000: no se le puede fiar.</li> <li>Si la obra debe menos de $10.000: se le puede fiar.</li> <li>Dada una constructora con pocos (4) alba\u00f1iles:</li> <li>Si la obra debe m\u00e1s de $5.000: no se le puede fiar.</li> <li>Si la obra debe menos de $5.000: se le puede fiar.</li> </ul> <p>En el caso de la constructora, elegimos la cantidad de obreros en base al  valor l\u00edmite : como 5 es el n\u00famero que distingue entre pocos y  muchos , elegimos 4 para representar al caso pocos y 5 para el caso  muchos .</p> <p>Sin dudas podr\u00edamos haber elegido otros n\u00fameros, pero es importante que los tests sean simples y f\u00e1ciles de comprender. Por esta raz\u00f3n, vamos a preferir siempre utilizar valores que nos resulten f\u00e1ciles de razonar para representar a cada escenario.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#escribiendo-los-tests","title":"Escribiendo los tests","text":"<p>Necesitamos:</p> <ul> <li>Un cliente particular.</li> <li>Una empresa constructora con 5 alba\u00f1iles.</li> <li>Otra empresa constructora con 4 alba\u00f1iles.</li> </ul> <p>A los que podemos configurar diferentes grados de deuda.</p> <p>ATENCI\u00d3N: Los ejemplos de c\u00f3digo que vienen a continuaci\u00f3n asumen que se utiliza Kotest (en el caso de Kotlin). La agrupaci\u00f3n que proponemos no puede imitarse f\u00e1cilmente en frameworks como JUnit.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#como-agrupar-los-escenarios","title":"\u00bfC\u00f3mo agrupar los escenarios?","text":"<p>En frameworks como Jest o Kotest tenemos la posibilidad de jerarquizar nuestras pruebas, utilizando las funciones <code>describe</code> e <code>it</code> para crear estas agrupaciones.</p> <p>Podr\u00edamos tambi\u00e9n tener todo junto, sin ning\u00fan tipo de agrupamiento. Pero esto no resulta ser una buena pr\u00e1ctica, porque:</p> <ul> <li>dificulta diferenciar los escenarios: estar\u00e1n todas las variables de los tests mezcladas,</li> <li>si construimos un fixture con cada uno de los tipos de cliente, estamos penalizando a cada uno de los tests por lo que   necesitan los dem\u00e1s: \u00bftiene sentido crear una constructora con 5 alba\u00f1iles si estoy testeando una que tiene 4?,</li> <li>se pierde  cohesi\u00f3n : un solo m\u00e9todo (o funci\u00f3n, en este caso) est\u00e1 cubriendo todos los casos de prueba.</li> </ul> <p>Volviendo al ejemplo, hay varias opciones posibles:</p> <ul> <li>hacer un <code>describe</code> para clientes particulares y otro para constructoras,</li> <li>hacer un <code>describe</code> para clientes particulares, otro para constructoras con pocos alba\u00f1iles y otro para constructoras   con muchos alba\u00f1iles.</li> </ul> <p>Elegiremos la ultima opci\u00f3n y agruparemos las pruebas de la siguiente forma:</p> <pre><code>    describe(\"Un cliente particular\") {  // ...}\ndescribe(\"Una constructora con pocos alba\u00f1iles\") {  // ...}\ndescribe(\"Una constructora con muchos alba\u00f1iles\") {  // ...}\n</code></pre> <p>Es importante que no haya demasiados detalles de implementaci\u00f3n en los nombres: <code>Una constructora con 5 alba\u00f1iles</code> o <code>Una constructora con 10 alba\u00f1iles</code> est\u00e1n sujetos a que cualquier cambio del negocio respecto a lo que son \u201cmuchos\u201d o \u201cpocos\u201d alba\u00f1iles necesite modificar el nombre del test. Adem\u00e1s, un nombre as\u00ed nos obliga a ir a revisar el c\u00f3digo (o el requerimiento, si es que est\u00e1 escrito en alg\u00fan lado) para comprender que se trata de dos escenarios diferentes.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#expresividad-nombres-acorde-a-lo-que-representan","title":"Expresividad: nombres acorde a lo que representan","text":"<p>Al empezar a dise\u00f1ar los casos de prueba es usual imaginar alg\u00fan ejemplo m\u00e1s o menos realista, como <code>La Constructora Hurlingham tiene 5 alba\u00f1iles y una deuda de 7000 pesos</code>.</p> <p>Intentando traducir esto a c\u00f3digo, tal vez nos saldr\u00eda un tests como el siguiente:</p> <pre><code>class FerreteriaTest : DescribeSpec(\n{\ndescribe(\"Una ferreter\u00eda\") {\nit(\"puede fiarle a la Constructora Hurlingham\") {\nval constructoraHurlingham = EmpresaConstructora(albaniles = 5,deuda = 7000) constructoraHurlingham.puedePedirFiado().shouldBeTrue()\n}\n}\n})\n</code></pre> <p>Pero \u00bfqu\u00e9 pasa si hay un error en el c\u00f3digo y el test falla? Supongamos esta implementaci\u00f3n, donde la clase <code>EmpresaConstructora</code> tiene la definici\u00f3n de la deuda como un entero:</p> <pre><code>class EmpresaConstructora(val cantidadAlbaniles: Int, deuda: Int) : Cliente(deuda) {  // Deber\u00eda ser &gt;= 5  \nfun montoMaximoDeuda() = if (cantidadAlbaniles &gt; 5) 10000 else 5000\noverride fun puedePedirFiado() = deuda &lt;= this.montoMaximoDeuda()\n}\n</code></pre> <p></p> <p>Cuando ejecutamos el test tenemos muy poca informaci\u00f3n relevante:</p> <ul> <li>la constante <code>constructorHurlingham</code> no est\u00e1 revelando que es una constructora con muchos alba\u00f1iles,</li> <li>y tampoco est\u00e1 claro por qu\u00e9 no puede pedir fiado.</li> </ul> <p>Al fallar, tenemos que bucear en el c\u00f3digo y extraer este dato para determinar si el error est\u00e1 en el test o en el c\u00f3digo de negocio.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#otra-oportunidad","title":"Otra oportunidad","text":"<p>Vamos a mejorar la sem\u00e1ntica del test, renombrando la constante <code>constructoraHurlingham</code> por un nombre m\u00e1s representativo de la clase de equivalencia que estamos modelando y cambiando el nombre del test:</p> <pre><code>class FerreteriaTest : DescribeSpec({\ndescribe(\"Una ferreter\u00eda\") {\nit(\"puede fiarle a una constructora con muchos alba\u00f1iles\") {\nval constructoraMuchosAlbaniles = EmpresaConstructora(\nalbaniles = 5,\ndeuda = 7000\n) constructoraMuchosAlbaniles . puedePedirFiado ().shouldBeTrue()\n}\n}\n})\n</code></pre> <p></p> <p>Ahora al fallar el test sabemos m\u00e1s cosas:</p> <ul> <li>qu\u00e9 es lo que estamos testeando, tratando de no entrar en detalles para no duplicar lo que dice el c\u00f3digo,</li> <li>qu\u00e9 se esperaba que pasara y no pas\u00f3, en un formato m\u00e1s o menos legible para un usuario: \u201cUna ferreter\u00eda puede fiarle a una constructora con muchos alba\u00f1iles\u201d.</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<p>M\u00e1s all\u00e1 de lo explicado hasta aqu\u00ed, compartimos tambi\u00e9n algunas buenas pr\u00e1cticas que pueden ser \u00fatiles a la hora de armar nuestras pruebas.</p>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#el-patron-aaa-arrange-act-assert","title":"El patr\u00f3n AAA: Arrange-Act-Assert","text":"<p>Una de las formas m\u00e1s comunes de estructurar las pruebas es utilizando el patr\u00f3n AAA:  Arrange, Act y Assert.</p> <p>No es necesario cumplirlo a rajatabla - y de hecho el ejemplo de este apunte no lo cumple \ud83d\ude05 -, pero tenerlo en mente puede ayudarnos a entender si nuestro test tiene todo lo que deber\u00eda tener.</p> <p>Seg\u00fan este patr\u00f3n, cada test se puede dividir en tres \"momentos\":</p> <ul> <li>Arrange: que podr\u00eda traducirse como arreglar o gestionar, en donde se instancian los objetos a testear, en este ejemplo la ferreteria y sus clientes. Cuando estos objetos son compartidos entre varios tests, los frameworks nos   permiten ubicarlos en alg\u00fan lugar com\u00fan, por ejemplo dentro de un mismo <code>describe</code>. La desventaja de esta t\u00e9cnica es que para tener una idea general de los elementos que participan en el test debemos mirar el test y adem\u00e1s el c\u00f3digo de inicializaci\u00f3n en el que est\u00e1 enmarcado.</li> <li>Act: que podr\u00eda traducirse como actuar. Son operaciones que tienen alg\u00fan efecto sobre los objetos creados, y que posteriormente vamos a querer comprobar que hicieron lo que deb\u00edan. Hay tests, como los de este apunte, que no necesitan disparar acciones, y est\u00e1 bien que eso ocurra.</li> <li>Assert: que podr\u00eda traducirse como afirmar. Es la parte donde escribimos lo que esperamos que pase, generalmente asociado a las respuestas que da el env\u00edo de un mensaje al objeto testeado.</li> </ul> <p>Veamos un ejemplo sencillo que puede desglosarse f\u00e1cilmente en esos tres componentes:</p> <pre><code>describe(\"Un ave\") { it(\"pierde energ\u00eda al volar\") {\n// ARRANGE: se crea el objeto  \nval pepita = Ave(1000)\n// ACT: se realizan las acciones  \npepita.volar()\n// ASSERT: se verifica el efecto  \npepita.energia.shouldBe(900)  }\n}\n</code></pre>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#recursos","title":"Recursos","text":"<ul> <li>\u00bfQu\u00e9 es TDD?</li> <li>\u00bfC\u00f3mo elaborar casos de prueba?</li> <li>Test unitario avanzado</li> <li>Dise\u00f1o de Software</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.-TestUnidadYTDD/#fuente","title":"Fuente","text":"<ul> <li>TDD Veloz</li> </ul>","tags":["EDES","Software","Hardware"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/","title":"UD 3 - 3.3 Kotest","text":"","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#introduccion-a-kotest","title":"Introducci\u00f3n a Kotest","text":"","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#1-informacion-general","title":"1. Informaci\u00f3n general","text":"<p>Kotest es un framework de pruebas multiplataforma escrito en Kotlin. Consta de 3 subproyectos principales:</p> <ul> <li>Framework para pruebas</li> <li>Biblioteca de aserciones</li> <li>Pruebas de propiedad</li> </ul> <p>Podemos usar cada proyecto independientemente, integr\u00e1ndolos con otros framework de prueba. Por ejemplo, es posible usar las aserciones de Kotest en lugar de otros frameworks de asserciones.</p> <p>Podemos ejecutar pruebas Kotest en JVM, Javascript o Native. Esto nos permite utilizar la misma biblioteca de pruebas para el desarrollo web, m\u00f3vil y back-end. Nos centraremos en la plataforma JVM .</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#2-pruebas-en-jvm","title":"2. Pruebas en JVM","text":"<p>Kotest utiliza la plataforma JUnit en la JVM. Entonces, en un proyecto Maven , podemos activarlo usando las siguientes sentencias dentro del fichero <code>build.gradle.kts</code></p> <p><pre><code>dependencies {\ntestImplementation(kotlin(\"test\"))\ntestImplementation(\"io.kotest:kotest-runner-junit5-jvm:5.5.4\")\ntestImplementation(\"io.kotest:kotest-runner-junit5:5.5.4\")\ntestImplementation(\"io.kotest:kotest-assertions-core:5.5.4\")\ntestImplementation(\"io.kotest:kotest-property:5.5.4\")\n}\n</code></pre> ten en cuenta que estamos estableciendo la version <code>5.5.4</code>, aqui puedes consultar cual es la \u00faltima versi\u00f3n.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#3-estilos-de-prueba","title":"3. Estilos de prueba","text":"<p>Kotest proporciona muchos estilos de prueba diferentes. Veamos ejemplos de algunos los estilos m\u00e1s usados.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#31-especificaciones-de-comportamiento","title":"3.1. Especificaciones de comportamiento","text":"<p>Podemos escribir pruebas similares a BDD, en este estilo se usan las palabras clave <code>given</code> (Bajo unas condiciones) , <code>when</code> (cuando se cumpla tal cosa) y <code>then</code> (entonces suceder\u00e1):</p> <pre><code>// En una situaci\u00f3n en el que tengo suficiente balance,\n// cuando se realice un pago\n// el pago se debe realizar sin problemas. \nclass CardPaymentTests : BehaviorSpec({\n    given(\"I have sufficient balance\") {\n        `when`(\"I make a card payment\") {\n            then(\"The card payment should be successful\") {\n                // test code\n            }\n        }\n    }\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#32-especificaciones-mediante-should","title":"3.2. Especificaciones mediante <code>should</code>","text":"<p>Podemos crear pruebas usando la palabra clave <code>should</code> (Deber\u00eda cumplirse) :</p> <pre><code>// Deber\u00eda convertir el dinero de entrada a la moneda destino.\nclass MoneyTests : ShouldSpec({\nshould(\"Convert input money to the target currency\") {\n// test code\n}\n})\n</code></pre> <p>Podemos agrupar pruebas relacionadas en un bloque de <code>context</code>:</p> <pre><code>class PaymentTests : ShouldSpec({\ncontext(\"CardPayments\") {\nshould(\"Make a card payment\") {\n// test code\n}\n}\ncontext(\"BankTransfers\") {\nshould(\"Make an external bank transfer\") {\n// test code\n}\n}\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#33-especificaciones-de-caracteristicas-features","title":"3.3. Especificaciones de caracter\u00edsticas (<code>features</code>)","text":"<p>A continuaci\u00f3n, veamos c\u00f3mo se pueden escribir pruebas basadas en Cucumber, una herramienta de uso com\u00fan para las pruebas de aceptaci\u00f3n del usuario, basadas en las palabras clave  <code>feature</code> (funcionalidad) y <code>scenario</code> (escenario):</p> <pre><code>class HomePageTests : FeatureSpec({\nfeature(\"signup\") {\nscenario(\"should allow user to signup with email\") {\n// test code\n}\n}\nfeature(\"signin\") {\nscenario(\"should allow user with valid credentials to login\") {\n// test code\n}\n}\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#34-especificaciones-mediante-mediante-descripciones-describe","title":"3.4. Especificaciones mediante mediante descripciones (<code>describe</code>)","text":"<p>Usando <code>describe</code>, podemos escribir pruebas en un estilo muy popular entre los desarrolladores de Javascript y Ruby, de hecho ser\u00e1 el que usaremos en nuestros ejemplos:</p> <pre><code>class PaymentTests : DescribeSpec({\ndescribe(\"CardPayments\") {\nit(\"Should make a card payment\") {\n// test code\n}\n}\ndescribe(\"BankTransfers\") {\nit(\"Should make an external bank transfer\") {\n// test code\n}\n}\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#4-assertions","title":"4. Assertions","text":"<p>Anteriormente hemos visto que Kotest tiene bibliotecas destinadas a aserciones, las afirmaciones que tienen que cumplirse tras realizar el test. Estas bibliotecas nos brindan varias funciones de comparaci\u00f3n para escribir las afirmaciones que deben cumplirse en nuestras pruebas. Hay dos grandes categor\u00edas de bibliotecas de aserciones:</p> <ul> <li>Core matchers</li> <li>External matchers</li> </ul> <p>Veamos algunos ejemplos de comparadores que permite la biblioteca kotest-assertions-core:</p> <pre><code>// verify actual object is equal to expected object\nresult.shouldBe(expected)\n// verify actual expression is true\nresult.shouldBeTrue()\n// verify actual object is of given type\nresult.shouldBeTypeOf&lt;Double&gt;()\n// verify actual map contains the given key\nresult.shouldContainKey(key)\n// verify actual map contains the given values\nresult.shouldContainValues(values)\n// verify actual string contains the given substring\nresult.shouldContain(\"substring\")\n// verify actual string is equal to the given string ignoring case\nresult.shouldBeEqualIgnoringCase(otherString)\n// verify actual file should have the given size\nresult.shouldHaveFileSize(size)\n// verify actual date is after the given date\nresult.shouldBeBefore(otherDate)Copiar\n</code></pre> <p>Adem\u00e1s del m\u00f3dulo principal de aserciones, existen otros m\u00f3dulos que proporcionan comparadores para una amplia variedad de escenarios, por ejemplo, comparadores JSON, coincidencias JDBC, etc, y por supuesto tienen muchas m\u00e1s opciones que deber\u00edamos revisar buscando aquellas que necesitamos para nuestro test.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#5-pruebas-de-excepciones","title":"5. Pruebas de excepciones","text":"<p>Por otro lado, probar excepciones con Kotest es muy sencillo:</p> <pre><code>val exception = shouldThrow&lt;ValidationException&gt; {\n// test code\n}\nexception.message should startWith(\"Invalid input\")\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#6-ganchos-de-ciclo-de-vida","title":"6. Ganchos de ciclo de vida","text":"<p>Podemos usar ganchos de ciclo de vida para configurar o desmontar el escenario necesario de objetos antes o despu\u00e9s de las pruebas. Estos ganchos son muy similares a los m\u00e9todos de instalaci\u00f3n y desmontaje del framework Junit. Veamos un ejemplo:</p> <pre><code>class TransactionStatementSpec : ShouldSpec({\nbeforeTest {\n// add transactions. Se ejecutar\u00e1 antes del test\n}\nafterTest { (test, result) -&gt;\n// delete transactions. Se ejecutar\u00e1 despu\u00e9s del test\n}\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#7-pruebas-basadas-en-datos","title":"7. Pruebas basadas en datos","text":"<p>Las pruebas basadas en datos en Kotest son similares a las pruebas parametrizadas en Junit5. Podemos proporcionar varias entradas a un solo caso de prueba para verificar diferentes ejemplos en lugar de escribir varias pruebas con solo datos de entrada diferentes. Podemos usar la funci\u00f3n <code>useData</code> de la biblioteca kotest-framework-datatest-jvm para proporcionar datos a las pruebas.</p> <p>Veamos un ejemplo:</p> <pre><code>data class TaxTestData(val income: Long, val taxClass: TaxClass, val expectedTaxAmount: Long)\nclass IncomeTaxTests : FunSpec({\nwithData(\nTaxTestData(1000, ONE, 300),\nTaxTestData(1000, TWO, 350),\nTaxTestData(1000, THREE, 200)\n) { (income, taxClass, expectedTaxAmount) -&gt;\ncalculateTax(income, taxClass) shouldBe expectedTaxAmount\n}\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#8-pruebas-no-deterministas","title":"8. Pruebas no deterministas","text":"<p>A veces, necesitamos probar funciones que no devuelven resultados sincr\u00f3nicamente. Desafortunadamente, es complicado probar tales funciones, ya que tenemos que escribir c\u00f3digo especial para esperar los resultados utilizando t\u00e9cnicas como funciones callback o dormir el hilo.</p> <p>Kotest proporciona algunas funciones \u00fatiles que podemos usar para escribir este tipo de pruebas no deterministas de forma declarativa.</p> <p>Veamos un ejemplo de la funci\u00f3n <code>eventually</code> :</p> <pre><code>class TransactionTests : ShouldSpec({\nval transactionRepo = TransactionRepo()\nshould(\"Should make transaction complete\") {\neventually({\nduration = 5000\ninterval = FixedInterval(1000)\n}) {\ntransactionRepo.getStatus(120) shouldBe \"COMPLETE\"\n}\n}\n})\n</code></pre> <p>Aqu\u00ed, nuestra prueba verificar\u00e1 el estado de la transacci\u00f3n <code>transactionRepo.getStatus</code> cada segundo, hasta llegar a 5 segundos.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#9-mocking","title":"9. Mocking","text":"<p>Podemos integrar cualquier biblioteca de simulaci\u00f3n como mockk con Kotest, biblioteca que veremos mas adelante. Kotest no proporciona su propia biblioteca de simulaci\u00f3n:</p> <pre><code>class ExchangeServiceTest : FunSpec({\nval exchangeRateProvider = mockk&lt;ExchangeRateProvider&gt;()\nval service = ExchangeService(exchangeRateProvider)\ntest(\"Exchanges money using rate from exchange rate service\") {\nevery { exchangeRateProvider.rate(\"USDEUR\") } returns 0.9\nservice.exchange(Money(1200, \"USD\"), \"EUR\") shouldBe 1080\n}\n})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#10-cobertura-de-pruebas","title":"10. Cobertura de pruebas","text":"<p>Podemos integrar Jacoco con Kotest para medir la cobertura de la prueba. Para integrar, debemos asegurarnos de que los informes de cobertura de prueba se generen despu\u00e9s de ejecutar las pruebas unitarias:</p> <pre><code>tasks.test {\nfinalizedBy(tasks.jacocoTestReport)\n}\n</code></pre> <p>Podemos encontrar el informe HTML de cobertura de prueba dentro del directorio <code>$buildDir/reports/jacoco/test</code> .</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#11-agrupacion-de-pruebas-con-etiquetas","title":"11. Agrupaci\u00f3n de pruebas con etiquetas","text":"<p>A veces, queremos ejecutar solo ciertas pruebas en un entorno espec\u00edfico. Por ejemplo, es posible que deseemos evitar ejecutar algunas pruebas lentas como parte de la verificaci\u00f3n de una pull request git. Para hacer eso, primero debemos etiquetar nuestras pruebas:</p> <pre><code>@Tags(NamedTag(\"SlowTest\"))\nclass SlowTests : ShouldSpec({})\n</code></pre>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#12-conclusion","title":"12. Conclusi\u00f3n","text":"<p>Se han visto varias funcionalidades b\u00e1sicas proporcionadas por el marco Kotest. y los ejemplos de c\u00f3digo se pueden encontrar en GitHub.</p>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#recursos","title":"Recursos","text":"<ul> <li>\u00bfC\u00f3mo elaborar casos de prueba?</li> <li>Test unitario avanzado</li> </ul>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.1.-Kotest/#fuente","title":"Fuente","text":"<ul> <li>Introduction to Kotest</li> </ul>","tags":["EDES","Software","kotest"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/","title":"UD 3 - 3.4 Mockk","text":"","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#mockk-una-biblioteca-burlona-para-kotlin","title":"MockK: una biblioteca burlona para Kotlin","text":"","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#1-informacion-general","title":"1. Informaci\u00f3n general","text":"<p>Vamos a revisar algunas de las funciones b\u00e1sicas de la biblioteca  MockK.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#2-mockk","title":"2. MockK","text":"<p>En Kotlin, todas las clases y m\u00e9todos son finales.  Si bien esto nos ayuda a escribir c\u00f3digo inmutable, tambi\u00e9n causa algunos problemas durante las pruebas.</p> <p>La mayor\u00eda de las bibliotecas que simulan objetos (mock) que se usan en JVM tienen problemas con las clases finales usadas para mocking or stubbing. Por supuesto, podemos agregar la palabra clave <code>open</code> a las clases y m\u00e9todos que queremos \"mockear\" (simular). Pero cambiar el c\u00f3digo solo para poder mockearla no parece el mejor enfoque.</p> <p>La biblioteca MockK ofrece compatibilidad con las caracter\u00edsticas y construcciones del lenguaje Kotlin.  MockK construye proxies para las clases mockeadas. Esto provoca cierta degradaci\u00f3n del rendimiento, pero los beneficios generales que nos brinda MockK valen la pena.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#3-instalacion","title":"3. Instalaci\u00f3n","text":"<p>La configuraci\u00f3n del proyecto consiste en a\u00f1adir las dependencias de mockk al fichero <code>build.gradle.kts</code></p> <pre><code>var mockKVersion = \"1.13.4\"\ndependencies {\ntestImplementation(\"io.mockk:mockk:$mockKVersion\")\n}\n</code></pre> <p>Ten en cuenta que estamos estableciendo la version <code>1.13.4</code>, en el repositorio Maven  puedes consultar cu\u00e1l es la \u00faltima versi\u00f3n.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#4-ejemplo-basico","title":"4. Ejemplo b\u00e1sico","text":"<p>Vamos a crear un servicio que podremos usar como ejemplo para \"mockear\" (simular) su funcionamiento:</p> <pre><code>class TestableService {\nfun getDataFromDb(testParameter: String): String {\n// query database and return matching value\n}\nfun doSomethingElse(testParameter: String): String {\nreturn \"I don't want to!\"\n}\n}\n</code></pre> <p>Aqu\u00ed hay un test de ejemplo que mockea <code>TestableService</code>:</p> <p><pre><code>@Test\nfun givenServiceMock_whenCallingMockedMethod_thenCorrectlyVerified() {\n// given\nval service = mockk&lt;TestableService&gt;()\nevery { service.getDataFromDb(\"Expected Param\") } returns \"Expected Output\"\n// when\nval result = service.getDataFromDb(\"Expected Param\")\n// then\nverify { service.getDataFromDb(\"Expected Param\") }\nassertEquals(\"Expected Output\", result)\n}\n</code></pre> Revisando las partes mas importantes del c\u00f3digo anterior: - Para definir el objeto mockeado, hemos usado el m\u00e9todo <code>mockk&lt;\u2026&gt;()</code>. - En el siguiente paso, definimos el comportamiento de nuestro objeto mockeado. Para este prop\u00f3sito, hemos creado un bloque <code>every</code> que describe qu\u00e9 respuesta debe devolverse <code>returns \"Expected\"</code> para qu\u00e9 llamada, es decir, la llamada a un m\u00e9todo <code>service.getDataFromDb</code> y con un argumento concreto <code>(\"Expected Param\")</code> - Finalmente, usamos el bloque de <code>verify</code> para verificar si el simulacro se invoc\u00f3 como esper\u00e1bamos, indicando que al menos se ha tenido que invocar una vez el m\u00e9todo <code>service.getDataFromDb(\"Expected Param\")</code>.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#5-ejemplo-de-uso-de-las-anotaciones","title":"5. Ejemplo de uso de las anotaciones","text":"<p>Es posible usar las anotaciones MockK <code>@MockK</code> para crear todo tipo de objetos mocks. Vamos a crear un servicio que requiera de dos instancias de nuestro <code>TestableService</code>:</p> <pre><code>class InjectTestService {\nlateinit var service1: TestableService\nlateinit var service2: TestableService\nfun invokeService1(): String {\nreturn service1.getDataFromDb(\"Test Param\")\n}\n}\n</code></pre> <p>El servicio que hemos creado, <code>InjectTestService</code>, contiene dos variables de instancia del mismo tipo. Esto no ser\u00e1 un problema para MockK, ya que MockK intenta hacer coincidir las propiedades por nombre y luego por clase o superclase. Adem\u00e1s, tampoco tiene problema con la inyecci\u00f3n de objetos en campos privados.</p> <p>Vamos a mockear el servicio <code>InjectTestService</code> en el siguiente test haciendo uso de las anotaciones:</p> <pre><code>class AnnotationMockKUnitTest {\n@MockK\nlateinit var service1: TestableService\n@MockK\nlateinit var service2: TestableService\n@InjectMockKs\nvar objectUnderTest = InjectTestService()\n@BeforeEach\nfun setUp() = MockKAnnotations.init(this)\n// Tests here\n...\n}\n</code></pre> <p>Revisemos lo m\u00e1s importante del c\u00f3digo anterior: - Con la anotaci\u00f3n <code>@MoockK</code>, hemos definido (marcado para crear) los objetos mocks <code>service1</code> y <code>service2</code> que vamos a inyectar en el servicio <code>objectUnderTest</code>. - Hemos usado la anotaci\u00f3n <code>@InjectMockKs</code> para especificar el objeto <code>objectUnderTest</code> donde se deben inyectar los objetos mocks definidos. - Por defecto, los objetos mocks se inyectan en variables que a\u00fan no est\u00e1n asignadas. Aunque, podemos usar <code>@OverrideMockKs</code> para anular campos que ya tienen un valor. - Por \u00faltimo, MockK requiere que se llame a <code>MockKAnnotations.init(\u2026)</code> en el objeto que declara variables con anotaciones. Para Junit5, se puede reemplazar con <code>@ExtendWith(MockKExtension::class)</code>.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#6-spy","title":"6. Spy","text":"<p><code>Spy</code> permite en un objeto mezclar el comportamiento de objetos reales y mockeados, es decir, mockear solo una parte particular de alguna clase. Por ejemplo, se puede usar para simular un m\u00e9todo espec\u00edfico del servicio  <code>TestableService</code>, el resto del servicio funcionar\u00e1 como se defini\u00f3. Si no se define un comportamiento nuevo, el objeto entero funcionara como se defini\u00f3 en su clases, pero podremos usar sobre \u00e9l verificaciones haciendo uso de <code>verify</code>. Veamos el ejemplo:</p> <pre><code>@Test\nfun givenServiceSpy_whenMockingOnlyOneMethod_thenOtherMethodsShouldBehaveAsOriginalObject() {\n// given\nval service = spyk&lt;TestableService&gt;()\nevery { service.getDataFromDb(any()) } returns \"Mocked Output\"\n// when checking mocked method\nval firstResult = service.getDataFromDb(\"Any Param\")\n// then\nassertEquals(\"Mocked Output\", firstResult)\n// when checking not mocked method\nval secondResult = service.doSomethingElse(\"Any Param\")\n// then\nassertEquals(\"I don't want to!\", secondResult)\n}\n</code></pre> <p>Revisemos lo m\u00e1s importante del c\u00f3digo anterior: - Hemos usado el m\u00e9todo <code>spyk</code> para crear un objeto spyk (esp\u00eda) de la clase <code>TestableService</code>. - Tambi\u00e9n hemos usado <code>every</code> para definir el comportamiento del m\u00e9todo que nos interesa, en concreto <code>service.getDataFromDb(any())</code>, como vimos en ejemplos anteriores.</p> <p>Tambi\u00e9n podemos haber usado la anotaci\u00f3n <code>@SpyK</code> para lograr lo mismo que hicimos con la anotaci\u00f3n <code>@MockK</code>. Veamos un ejemplo:</p> <pre><code>class SpyKUnitTest {\n@SpyK\nlateinit var service: TestableService\n// Tests here\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#7-mockeado-relajado","title":"7. Mockeado relajado","text":"<p>Un objeto mock t\u00edpico lanzar\u00e1 la excepci\u00f3n <code>MockKException</code> si intentamos llamar a un m\u00e9todo donde no se ha especificado el valor de retorno, es decir, en donde no hayamos definido un comportamiento simulado.</p> <p>Si no queremos describir el comportamiento de cada m\u00e9todo, podemos usar un proceso de mockeado relajado. Este tipo de mockeado proporciona valores predeterminados para cada funci\u00f3n. Por ejemplo, el tipo de retorno <code>String</code> devolver\u00e1 un <code>String</code> vac\u00edo. He aqu\u00ed un breve ejemplo:</p> <pre><code>@Test\nfun givenRelaxedMock_whenCallingNotMockedMethod_thenReturnDefaultValue() {\n// given\nval service = mockk&lt;TestableService&gt;(relaxed = true)\n// when\nval result = service.getDataFromDb(\"Any Param\")\n// then\nassertEquals(\"\", result)\n}\n</code></pre> <p>En el ejemplo, hemos usado el m\u00e9todo <code>mockk</code> con el argumento <code>relaxed = True</code> para crear un objeto mockeado relajado. Tambi\u00e9n podr\u00edamos haber usado la anotaci\u00f3n <code>@RelaxedMockK</code>:</p> <pre><code>class RelaxedMockKUnitTest {\n@RelaxedMockK\nlateinit var service: TestableService\n// Tests here\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#8-mockeado-de-objetos","title":"8. Mockeado de objetos","text":"<p>Kotlin proporciona una manera f\u00e1cil de declarar un singleton usando la palabra clave <code>object</code>:</p> <pre><code>object TestableService {\nfun getDataFromDb(testParameter: String): String {\n// query database and return matching value\n}\n}\n</code></pre> <p>La mayor\u00eda de las bibliotecas para crear objetos mocks tienen un problema con el mockeado las instancias de objetos singleton de Kotlin. Para resolver esto, MockK proporciona el m\u00e9todo <code>mockkObject</code>.  Un ejemplo de uso:</p> <pre><code>@Test\nfun givenObject_whenMockingIt_thenMockedMethodShouldReturnProperValue(){\n// given\nmockkObject(TestableService)\n// when calling not mocked method\nval firstResult = service.getDataFromDb(\"Any Param\")\n// then return real response\nassertEquals(/* DB result */, firstResult)\n// when calling mocked method\nevery { service.getDataFromDb(any()) } returns \"Mocked Output\"\nval secondResult = service.getDataFromDb(\"Any Param\")\n// then return mocked response\nassertEquals(\"Mocked Output\", secondResult)\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#9-mockeado-jerarquico","title":"9. Mockeado jer\u00e1rquico","text":"<p>Otra caracter\u00edstica \u00fatil de MockK es la capacidad de mockear objetos jer\u00e1rquicos. Parar entenderlo, primero, creemos una estructura de objeto jer\u00e1rquica:</p> <pre><code>class Foo {\nlateinit var name: String\nlateinit var bar: Bar\n}\nclass Bar {\nlateinit var nickname: String\n}\n</code></pre> <p>La clase <code>Foo</code> contiene un campo de tipo <code>Bar</code>. Ahora, podemos mockear la estructura en un solo paso. Vamos a mockear los campos <code>name</code> y <code>bar</code>:</p> <pre><code>@Test\nfun givenHierarchicalClass_whenMockingIt_thenReturnProperValue() {\n// given\nval foo = mockk&lt;Foo&gt; {\nevery { name } returns \"Karol\"\nevery { bar } returns mockk {\nevery { nickname } returns \"Tomato\"\n}\n}\n// when\nval name = foo.name val nickname = foo.bar.nickname\n// then\nassertEquals(\"Karol\", name)\nassertEquals(\"Tomato\", nickname)\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#10-captura-de-argumentos","title":"10. Captura de argumentos","text":"<p>Si necesitamos capturar los valores de los par\u00e1metros pasados a un m\u00e9todo, podemos usar <code>CapturingSlot</code> o <code>MutableList</code>. Es \u00fatil cuando queremos tener alguna l\u00f3gica personalizada en un bloque <code>answers</code> o simplemente necesitamos verificar el valor de los par\u00e1metros pasados. Aqu\u00ed hay un ejemplo de <code>CapturingSlot</code>:</p> <pre><code>@Test\nfun givenMock_whenCapturingParamValue_thenProperValueShouldBeCaptured() {\n// given\nval service = mockk&lt;TestableService&gt;()\nval slot = slot&lt;String&gt;()\nevery { service.getDataFromDb(capture(slot)) } returns \"Expected Output\"\n// when\nservice.getDataFromDb(\"Expected Param\")\n// then\nassertEquals(\"Expected Param\", slot.captured)\n}Copiar\n</code></pre> <p><code>MutableList</code> se puede usar para capturar y almacenar todos los valores tomados por el par\u00e1metro en las distintas invocaciones del m\u00e9todo:</p> <pre><code>@Test\nfun givenMock_whenCapturingParamsValues_thenProperValuesShouldBeCaptured() {\n// given\nval service = mockk&lt;TestableService&gt;()\nval list = mutableListOf&lt;String&gt;()\nevery { service.getDataFromDb(capture(list)) } returns \"Expected Output\"\n// when\nservice.getDataFromDb(\"Expected Param 1\")\nservice.getDataFromDb(\"Expected Param 2\")\n// then\nassertEquals(2, list.size)\nassertEquals(\"Expected Param 1\", list[0])\nassertEquals(\"Expected Param 2\", list[1])\n}\n</code></pre>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#11-funciones-stubbing-que-retornan-unit","title":"11. Funciones Stubbing que retornan Unit","text":"<p>Un stub es, en el contexto del testeo del software, un trozo de c\u00f3digo usado como sustituto de alguna otra funcionalidad. Un stub puede simular el comportamiento de c\u00f3digo existente (tal como un procedimiento en una m\u00e1quina remota) o ser el sustituto temporal para un c\u00f3digo a\u00fan no desarrollado. Los stubs son, por tanto, muy \u00fatiles para porting, computaci\u00f3n distribuida as\u00ed como en el desarrollo y pruebas de software en general.</p> <p>En Kotlin, si el tipo de retorno de una funci\u00f3n es <code>Unit</code>, significa que la funci\u00f3n no devuelve nada. Es bastante similar al m\u00e9todo <code>void</code> de Java.</p> <p>Para ejemplificarlo, agreguemos una funci\u00f3n que retorna <code>Unit</code> a la clase <code>TestableService</code>:</p> <pre><code>fun addHelloWorld(strList: MutableList&lt;String&gt;) {\nprintln(\"addHelloWorld() is called\")\nstrList += \"Hello World!\"\n}\n</code></pre> <p>Como muestra el c\u00f3digo anterior, cuando se llama a la funci\u00f3n <code>addHelloWorld()</code>, imprime una l\u00ednea en la consola.  Luego, el <code>String</code> <code>\"Hello World\"</code> se agrega al objeto <code>MutableList&lt;String&gt;</code> recibido por par\u00e1metro.</p> <p>En esta secci\u00f3n, vamos a ver c\u00f3mo hacer un stub de una funci\u00f3n que devuelve <code>Unit</code>. Por lo general, dependiendo de diferentes circunstancias, queremos controlar un stub de una funci\u00f3n que retorna <code>Unit</code> de dos maneras:</p> <ul> <li>hacer que la llamada a la funci\u00f3n no haga nada, o en otras palabras, omitir la ejecuci\u00f3n de la funci\u00f3n</li> <li>llamando a la funci\u00f3n real</li> </ul> <p>A continuaci\u00f3n, usaremos la funci\u00f3n <code>addHelloWorld()</code> como ejemplo y veremos c\u00f3mo lograrlo usando MockK.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#111-hacer-que-la-funcion-no-haga-nada","title":"11.1. Hacer que la funci\u00f3n no haga nada","text":"<p>Hay varias formas de omitir la ejecuci\u00f3n de una funci\u00f3n que retorna <code>Unit</code> usando MockK:</p> <pre><code>every { addHelloWorld(any()) } returns Unit\nevery { addHelloWorld(any()) } answers { Unit }\nevery { addHelloWorld(any()) } just runs\n</code></pre> <p>Algunas de ellas no son nuevas para nosotros - <code>returns \u2026</code>  - <code>answers {\u2026}</code>,  - y el \u00faltimo, <code>every {... } just runs</code> es f\u00e1cil de entender.</p> <p>Entonces, primero probemos si se puede omitir la ejecuci\u00f3n de la funci\u00f3n original y luego entendamos c\u00f3mo funciona <code>just runs</code>:</p> <pre><code>@Test\nfun givenServiceMock_whenCallingMethodReturnsUnit_thenCorrectlyVerified() {\n// given\nval service = mockk&lt;TestableService&gt;()\nval myList = mutableListOf&lt;String&gt;()\n// when\nevery { service.addHelloWorld(any()) } just runs\nservice.addHelloWorld(myList)\n// then\nassertTrue(myList.isEmpty())\n}\n</code></pre> <p>Como muestra el c\u00f3digo anterior,  - Agregamos la funci\u00f3n <code>addHelloWorld()</code> usando <code>just runs</code>.  - Luego, llamamos a la funci\u00f3n y le pasamos una <code>MutableList</code> vac\u00eda. - Por \u00faltimo, si omitimos la ejecuci\u00f3n de la funci\u00f3n con \u00e9xito, <code>\u201cHello World!\u201d</code> no debe aparecer en la lista, pasada como par\u00e1metro, despu\u00e9s de la invocaci\u00f3n.  El test es ok tras de ejecutarlo.</p> <p>Ahora entendamos c\u00f3mo <code>just runs</code> omite la llamada de la funci\u00f3n real. Primero, echemos un vistazo a la implementaci\u00f3n de la funci\u00f3n <code>just()</code>:</p> <pre><code>infix fun MockKStubScope&lt;Unit, Unit&gt;.just(runs: Runs) = answers(ConstantAnswer(Unit))\n</code></pre> <p>Como podemos ver, <code>just</code> es una funci\u00f3n <code>infix</code> (infija). Por lo tanto, podemos escribir <code>just(runs)</code> como una forma mas f\u00e1cil de leer:<code>just runs</code>. Adem\u00e1s, <code>Runs</code> es un objeto dummy, y <code>runs</code> es simplemente un <code>typealias</code> de <code>Runs</code>:</p> <pre><code>object Runs\ntypealias runs = Runs\n</code></pre> <p>Por \u00faltimo, si creamos un stub de una funci\u00f3n que retorna <code>Unit</code> como  <code>just runs</code>, se llama a la funci\u00f3n <code>answers()</code>  y retorna una constante: <code>Unit</code>.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#112-llamar-a-la-funcion-original","title":"11.2. Llamar a la funci\u00f3n original","text":"<p>Ahora, veamos c\u00f3mo crear un stub de una funci\u00f3n que retorna <code>Unit</code> para hacer que llame a la funci\u00f3n real.  Para llamar a la funci\u00f3n original, podemos usar este enfoque:  <code>every { \u2026 } answers { callOriginal() }</code></p> <p>A continuaci\u00f3n, veamos c\u00f3mo se usa en una prueba real:</p> <pre><code>@Test\nfun givenServiceMock_whenCallingOriginalMethod_thenCorrectlyVerified() {\n// given\nval service = mockk&lt;TestableService&gt;()\nval myList = mutableListOf&lt;String&gt;()\n// when\nevery { service.addHelloWorld(any()) } answers { callOriginal() }\nservice.addHelloWorld(myList)\n// then\nassertEquals(1, myList.size)\nassertEquals(\"Hello World!\", myList.first())\n}\n</code></pre> <p>El test es ok tras de ejecutarlo. Entonces, <code>\u201cHello World!\u201d</code>  se agrega a <code>myList</code> despu\u00e9s de llamar a la funci\u00f3n.  Sin embargo, podemos preguntarnos: si creamos un stub de una funci\u00f3n y le pedimos que llame a la implementaci\u00f3n original, \u00bfpor qu\u00e9 nos molestamos en crear el stub?</p> <p>A continuaci\u00f3n, veamos un ejemplo de cu\u00e1ndo es \u00fatil.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#113-cuando-necesitamos-calloriginal","title":"11.3. \u00bfCu\u00e1ndo necesitamos <code>callOriginal()</code>?","text":"<p>Digamos que en nuestra prueba, queremos llamar a la funci\u00f3n <code>addHelloWorld()</code> con diferentes par\u00e1metros. Si la lista que se le pasa a la funci\u00f3n contiene la cadena <code>\"Kai\"</code>, queremos llamar a la funci\u00f3n real.  De lo contrario, nos gustar\u00eda omitir la llamada a la funci\u00f3n:</p> <pre><code>@Test\nfun givenServiceMock_whenStubbingTwoScenarios_thenCorrectlyVerified() {\n// given\nval service = mockk&lt;TestableService&gt;()\nval kaiList = mutableListOf(\"Kai\")\nval emptyList = mutableListOf&lt;String&gt;()\n// when\nevery { service.addHelloWorld(any()) } just runs\nevery { service.addHelloWorld(match { \"Kai\" in it }) } answers { callOriginal() }\nservice.addHelloWorld(kaiList)\nservice.addHelloWorld(emptyList)\n// then\nassertEquals(listOf(\"Kai\", \"Hello World!\"), kaiList)\nassertTrue(emptyList.isEmpty())\n}\n</code></pre> <p>Como podemos ver en el c\u00f3digo anterior, agregamos la funci\u00f3n <code>addHelloWorld()</code> dos veces, seg\u00fan nuestros requisitos.  Por lo tanto, <code>callOriginal()</code> nos permite decidir el comportamiento de los stubings de forma flexible.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#12-conclusion","title":"12. Conclusi\u00f3n","text":"<p>Se han visto algunas de las caracter\u00edsticas m\u00e1s importantes de MockK. MockK es una poderosa biblioteca para el lenguaje Kotlin y proporciona muchas caracter\u00edsticas \u00fatiles. Para m\u00e1s informaci\u00f3n sobre MockK, podemos consultar la  documentaci\u00f3n en la web de MockK.</p>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#recursos","title":"Recursos","text":"<ul> <li>\u00bfQue es un Stub?</li> <li>Mock Object</li> <li>Stub, Spy, Mock</li> <li>\u00bfQu\u00e9 es TDD?</li> <li>\u00bfC\u00f3mo elaborar casos de prueba?</li> <li>Test unitario avanzado</li> <li>Dise\u00f1o de Software</li> <li></li> </ul>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.2.2.-Mockk/#fuente","title":"Fuente","text":"<ul> <li>MockK: A Mocking Library for Kotlin</li> <li>MockK Guidebook</li> </ul>","tags":["EDES","Software","Mock"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/","title":"UD 3 - 3.3 Depuraci\u00f3n","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#pruebas","title":"Pruebas","text":"","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#recursos","title":"Recursos","text":"<ul> <li>\u00bfC\u00f3mo elaborar casos de prueba?</li> <li>Test unitario avanzado</li> </ul>","tags":["EDES","Software","Debug"]},{"location":"section3/u03/teoria/EDES-U3.3.-Depuracion/#fuente","title":"Fuente","text":"<ul> <li>Introduction to Kotest</li> </ul>","tags":["EDES","Software","Debug"]},{"location":"section3/u04/","title":"UD 3 - Herramientas Git/Github","text":"<p>Cada unidad contendr\u00e1 una serie de contenidos, resultados de aprendizaje (desglosados en criterios de evaluaci\u00f3n), una pr\u00e1ctica o pr\u00e1cticas para evaluar la adquisici\u00f3n de dichos criterios de evaluaci\u00f3n y una prueba espec\u00edfica para evaluar la asimilaci\u00f3n de contenido.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#normativa-que-respalda-la-unidad","title":"Normativa que respalda la unidad","text":"","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#resultados-de-aprendizaje-a-trabajar","title":"Resultados de aprendizaje a trabajar","text":"<p>En esta secci\u00f3n se relaciona la unidad con el resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <p>RA 2. Eval\u00faa entornos integrados de desarrollo analizando sus caracter\u00edsticas para editar c\u00f3digo fuente y generar ejecutables.</p>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#criterios-de-evaluacion","title":"Criterios de evaluaci\u00f3n","text":"<p>En esta secci\u00f3n se relaciona la unidad con los criterios de evaluaci\u00f3n concretos, del resultado de aprendizaje a trabajar en esta unidad, teniendo en cuenta la normativa del curso.</p> <ul> <li>a) Se han instalado entornos de desarrollo, propietarios y libres.</li> <li>b) Se han a\u00f1adido y eliminado m\u00f3dulos en el entorno de desarrollo.</li> <li>c) Se ha personalizado y automatizado el entorno de desarrollo.</li> <li>d) Se ha configurado el sistema de actualizaci\u00f3n del entorno de desarrollo.</li> <li>e) Se han generado ejecutables a partir de c\u00f3digo fuente de diferentes lenguajes en un mismo entorno de desarrollo.</li> <li>f) Se han generado ejecutables a partir de un mismo c\u00f3digo fuente con varios entornos de desarrollo.</li> <li>g) Se han identificado las caracter\u00edsticas comunes y espec\u00edficas de diversos entornos de desarrollo.</li> <li>h) Se han identificado las funciones m\u00e1s usuales de las herramientas CASE para el desarrollo, prueba y documentaci\u00f3n de c\u00f3digo.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/#contenidos","title":"Contenidos","text":"<p>En esta secci\u00f3n se incluyen los contenidos m\u00ednimos a impartir esta unidad teniendo en cuenta la normativa del curso</p> <p>La unidad pertenece al bloque 2 Herramientas de desarrollo.</p> <ul> <li>UD2: Entornos de desarrollo integrado</li> </ul> <p>En la unidad 2, veremos:</p> <ul> <li>Entornos de desarrollo integrado. Funcionalidades.</li> <li>Herramientas CASE.</li> </ul>","tags":["EDES","Tools","CASE"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/","title":"UD 4 - P1: Git/Github b\u00e1sico","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#relacion-411-repositorios-local-y-remoto-directorio-de-trabajo","title":"Relaci\u00f3n 4.1.1: Repositorios local y remoto, directorio de trabajo...","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#objetivos","title":"Objetivos","text":"<ul> <li>Crear repositorios en Github</li> <li>Practicar con repositorios locales y remotos</li> <li>Crear commits en un repositorio</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica crearemos nuestro primer repositorio de Github. Para ello, primero habr\u00e1 que crear una cuenta en Github. Crearemos un repositorio de nombre ID_XXXX_my_calculator (mas info abajo, leela antes de crear el respositorio) en dicha cuenta, en el que alojaremos un peque\u00f1o desarrollo de software consistente en una calculadora web. </p> <p>Para comenzar este desarrollo, iniciamos un repositorio de git local. En la rama main se desarrollar\u00e1 en dos commits una calculadora con 2 botones. En el primer commit  se a\u00f1ade la calculadora con el bot\u00f3n x^3, adem\u00e1s de un fichero README.md con un breve texto descriptivo. En el segundo se a\u00f1ade el bot\u00f3n x^4 a la calculadora. </p> <p>Para terminar se sube la rama main del repositorio local al repositorio remoto en Github que hemos creado al principio.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#tareas","title":"Tareas","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-1-creacion-de-repositorio-remoto","title":"Paso 1: Creaci\u00f3n de repositorio remoto","text":"<p>El primer paso a seguir es crear una cuenta en Github, si no se tiene. A continuaci\u00f3n, creamos un nuevo repositorio p\u00fablico vac\u00edo con el nombre \"my_calculator\".</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-2-creacion-de-repositorio-local","title":"Paso 2: Creaci\u00f3n de repositorio local","text":"<p>En un terminal de nuestro ordenador iniciamos un repositorio local de git. Si se tiene el sistema operativo Windows, se recomienda emplear Git Bash como terminal. <pre><code>$ git init my_calculator\n$ cd my_calculator\n</code></pre> y le asignamos el repositorio remoto que acabamos de crear <pre><code>$ git remote add origin git@github.com:&lt;mi usuario de github&gt;/my_calculator.git\n</code></pre></p> <p>Por ejemplo, si tu usuario es <code>pepe</code>, el comando ser\u00eda: <pre><code>$ git remote add origin git@github.com:pepe/my_calculator.git\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-3-anadir-ficheros-al-repositorio","title":"Paso 3: A\u00f1adir ficheros al repositorio","text":"<p>A\u00f1adir al directorio de trabajo un fichero con el nombre \"index.html\". Este fichero contendr\u00e1 una calculadora web con un bot\u00f3n para calcular el cubo del n\u00famero introducido: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> En la etiqueta h1 debes modificar el texto para incluir tu nombre y apellidos</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-4-registrar-cambios","title":"Paso 4: Registrar cambios","text":"<p>A continuaci\u00f3n, hay que registrar los ficheros en el \u00edndice y crear el primer commit en la rama main. Se recuerda que antes de crear un commit hay que probar siempre que el programa que se va a guardar funciona correctamente (en este caso, abri\u00e9ndolo en el navegador web y probando que funciona la calculadora).</p> <pre><code>$ git add index.html # A\u00f1adir el fichero creado\n$ git commit -m \"x^3 button\" # Congelar los cambios en un commit\n$ git log --oneline # Ver la lista de commits\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-5-crear-un-segundo-commit","title":"Paso 5: Crear un segundo commit","text":"<p>Debe crear un segundo commit en la rama en la que est\u00e1 trabajando (main).  El commit debe a\u00f1adir a la calculadora (fichero index.html) un segundo bot\u00f3n (elemento HTML <code>&lt;button ..&gt;</code>) que eleve un n\u00famero a la cuarta potencia (x^4) invocando una funci\u00f3n (power_4 ()) que calcula x^4 al hacer click en \u00e9l.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;button onclick=\"power_4()\"&gt; x^4&lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\nfunction power_4() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 4);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y despu\u00e9s de probar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^4 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#paso-6-subir-el-repositorio-a-github","title":"Paso 6: Subir el repositorio a Github","text":"<p>Para finalizar, hay que subir el repositorio local al repositorio remoto creado en Github inicialmente.</p> <pre><code>$ git push origin main\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL del repositorio a la tarea. </li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li>El nombre del repositorio sera: ID_XXXX_my_calculator donde </li> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> <li>Asegurate que funciona y: </li> <li>20%:  Existe el repositorio ID_XXXX_my_calculator</li> <li>40%:  El primer commit de la rama main es \u201cx^3 button\u201d y contiene lo pedido</li> <li>40%:  El segundo commit de la rama main es \u201cx^4 button\u201d y contiene lo pedido</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica001/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/","title":"UD 4 - P2: Git/Github Merge","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#relacion-412-integracion-de-ramas-merge","title":"Relaci\u00f3n 4.1.2: Integraci\u00f3n de ramas - Merge","text":"<p>Versi\u00f3n: 30 de septiembre de 2022</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#objetivos","title":"Objetivos","text":"<ul> <li>Practicar con repositorios locales y remotos</li> <li>Crear ramas</li> <li>Integrar ramas</li> <li>Resolver conflictos</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica se parte del repositorio creado en la entrega anterior, realizando modificaciones sobre el mismo para comenzar a trabajar con ramas de git. Crearemos una rama nueva con un desarrollo paralelo y la integraremos con la rama main resolviendo cualquier conflicto que haya podido surgir.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#tareas","title":"Tareas","text":"<p>Si ha realizado la entrega anterior, puede saltar directamente al paso 7.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-1-creacion-de-repositorio-remoto","title":"Paso 1: Creaci\u00f3n de repositorio remoto","text":"<p>El primer paso a seguir es crear una cuenta en Github, si no se tiene. A continuaci\u00f3n, creamos un nuevo repositorio con el nombre ID_XXXX_my_calculator.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-2-creacion-de-repositorio-local","title":"Paso 2: Creaci\u00f3n de repositorio local","text":"<p>En un terminal de nuestro ordenador iniciamos un repositorio local de git. Si se tiene el sistema operativo Windows, se recomienda emplear Git Bash como terminal. <pre><code>$ git init my_calculator\n$ cd my_calculator\n</code></pre> y le asignamos el repositorio remoto que acabamos de crear <pre><code>$ git remote add origin git@github.com:&lt;mi usuario de github&gt;/my_calculator.git\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-3-anadir-ficheros-al-repositorio","title":"Paso 3: A\u00f1adir ficheros al repositorio","text":"<p>A\u00f1adir al directorio de trabajo un fichero con el nombre \"index.html\". Este fichero contendr\u00e1 una calculadora web con un bot\u00f3n para calcular el cubo del n\u00famero introducido:</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> En la etiqueta h1 debes modificar el texto para incluir tu nombre y apellidos</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-4-registrar-cambios","title":"Paso 4: Registrar cambios","text":"<p>A continuaci\u00f3n, hay que registrar los ficheros en el \u00edndice y crear el primer commit en la rama main. Se recuerda que antes de crear un commit hay que probar siempre que el programa que se va a guardar funciona correctamente (en este caso, abri\u00e9ndolo en el navegador web y probando que funciona la calculadora).</p> <pre><code>$ git add index.html # A\u00f1adir el fichero creado\n$ git commit -m \"x^3 button\" # Congelar los cambios en un commit\n$ git log --oneline # Ver la lista de commits\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-5-crear-un-segundo-commit","title":"Paso 5: Crear un segundo commit","text":"<p>Debe crear un segundo commit en la rama en la que est\u00e1 trabajando (main). El commit debe a\u00f1adir a la calculadora (fichero index.html) un segundo bot\u00f3n (elemento HTML <code>&lt;button ..&gt;</code>) que eleve un n\u00famero a la cuarta potencia (x^4) invocando una funci\u00f3n (power_4 ()) que calcula x^4 al hacer click en \u00e9l.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;button onclick=\"power_4()\"&gt; x^4&lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\nfunction power_4() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 4);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y despu\u00e9s de probar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^4 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-6-subir-el-repositorio-a-github","title":"Paso 6: Subir el repositorio a Github","text":"<p>Para finalizar, hay que subir el repositorio local al repositorio remoto creado en Github inicialmente.</p> <pre><code>$ git push origin main\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-7-crear-nueva-rama","title":"Paso 7: Crear nueva rama","text":"<p>Imaginemos que un miembro de nuestro equipo comenzase el desarrollo de una nueva funcionalidad partiendo de la versi\u00f3n inicial (sin el bot\u00f3n x^4). Para ello, creamos una rama de nombre \"sine\" que salga del primer commit (con mensaje \"x^3 button\") y nos movemos a la rama \"sine\" en el directorio de trabajo, para poder trabajar sobre ella. Primero tenemos que averiguar cual es el id del commit de nombre \"x^3 button\" y despu\u00e9s crear la rama nueva a partir de \u00e9l.</p> <pre><code>$ git log --oneline                  # Ver la lista de commits (incluye &lt;commit_id&gt;, p.e. 71e69ce)\n$ git checkout -b sine &lt;commit_id&gt;   # Crea rama en commit y realiza checkout a rama\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-8-crear-nuevo-commit","title":"Paso 8: Crear nuevo commit","text":"<p>Crear un nuevo commit en la rama sine que a\u00f1ada un segundo bot\u00f3n sin(x) a la calculadora en el fichero index.html (adem\u00e1s del bot\u00f3n x^3 que ya existe). El nuevo bot\u00f3n debe calcular el seno de un n\u00famero utilizando la funci\u00f3n JavaScript:  Math.sin(x).</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;button onclick=\"sine()\"&gt; sin &lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\nfunction sine() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.sin(num.value);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Estando en la rama sine, se a\u00f1ade el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora y una vez comprobado que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit con el nombre \"sin(x) button\".</p> <pre><code>$ git add index.html\n$ git commit -m \"sin(x) button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-9-integrar-la-rama-main-en-sine","title":"Paso 9: Integrar la rama \"main\" en \"sine\"","text":"<p>Ahora se debe integrar la rama \"main\" en la rama \"sine\", para crear una calculadora con tres botones: x^3, x^4 y sin(x).</p> <pre><code>$ git merge main\n</code></pre> <p>La integraci\u00f3n tiene conflictos, que se deben resolver con el editor. Una vez resueltos y despu\u00e9s de comprobar que el programa integrado funciona correctamente, se debe finalizar la integraci\u00f3n (merge) creando el commit de integraci\u00f3n.</p> <pre><code>$ git add index.html\n$ git merge --continue # o git commit -m \"Integrate main\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-10-integrar-la-rama-sine-en-main","title":"Paso 10: Integrar la rama \"sine\" en \"main\"","text":"<p>Ahora que la rama \"sine\" est\u00e1 correcta y contiene todas las funcionalidades, podemos integrar los cambios en la rama principal \"main\", Para ello, nos cambiamos a la rama \"main\"</p> <pre><code>git checkout main\n</code></pre> <p>y nos traemos los cambios de \"sine\".</p> <pre><code>git merge sine\n</code></pre> <p>Si queremos podemos ver la historia de integraciones de todas las ramas: <pre><code>git log --oneline --graph --all\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#paso-11-subir-todas-las-ramas-del-repositorio-local-al-nuevo-repositorio-en-github","title":"Paso 11: Subir todas las ramas del repositorio local al nuevo repositorio en GitHub.","text":"<p>Por \u00faltimo, subimos los cambios realizados en ambas ramas a Github</p> <pre><code>git push --all\n</code></pre> <p>La opci\u00f3n --force o -f permite subir un repositorio incompatible, pero \u00a1Cuidado borra el existente! Se debe utilizar solo en casos en que no hay otra soluci\u00f3n.</p> <p>Si accedemos al repositorio creado en Github podemos ver que est\u00e1n ambas ramas con el contenido que hemos subido.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL del repositorio a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_my_calculator donde</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> <ul> <li>10%:  Existe el repositorio my_calculator con el contenido pedido en la entrega anterior (hasta el paso 7)</li> <li>40%:  Existe la rama sine con el commit \u201csin(x) button\u201d con el contenido y origen pedidos</li> <li>50%:  La integraci\u00f3n de las ramas main y sine se ha realizado correctamente y la calculadora funciona bien</li> </ul> </li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica002/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/","title":"UD 4 - P3: Git/Github Rebase I","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#relacion-413-integracion-de-ramas-rebase-i","title":"Relaci\u00f3n 4.1.3: Integraci\u00f3n de ramas - Rebase I","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#objetivos","title":"Objetivos","text":"<ul> <li>Continuar practicando con repositorios locales y remotos, commits y ramas, pero integrando con rebase.</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>Reutilizar la cuenta y el repositorio my_calculator en GitHub tal y como qued\u00f3 en la entrega anterior. Crear una nueva rama que parta del primer commit de main \"x^3 button\" con el nombre \"ops\". Crear dos commits en la nueva rama \"ops\", el primero a\u00f1ade el bot\u00f3n x^2 y el segundo con el bot\u00f3n 1/x. Integrar la nueva rama ops en la rama main utilizando \"git rebase ...\".</p> <p>Para terminar se deben subir los nuevos commits integrados en la rama \"main\" a un nuevo repositorio en su cuenta de GitHub, denominado \"my_calculator_2\".</p> <p>El grafo de commits es m\u00e1s f\u00e1cil de seguir cuando se integra con rebase, ya que todos los commits de la rama lateral pasan a main y todo queda en main. En cambio se pierde algo de la historia del proyecto, porque desaparecen las ramas laterales donde se suelen desarrollar las nuevas funcionalidades. Rebase tiene adem\u00e1s la opci\u00f3n interactiva que permite rehacer la rama que se integra y sus commits. Por esta raz\u00f3n hay personas que prefieren el rebase frente al merge para integrar desarrollos.</p> <p>\u00a1Cuidado! Las ramas que se hayan compartido con terceros no deben modificarse con rebase, porque si un tercero ha descargado la rama, deber\u00e1 repetir el rebase en su repositorio local.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#tareas-a-realizar","title":"Tareas a realizar","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-1-clonar-el-repositorio-my-calculator","title":"Paso 1: Clonar el repositorio \"my calculator\"","text":"<p>El primer paso ser\u00e1 clonar en un repositorio local el repositorio \"my_calculator\" de GitHub en un directorio \"my_calculator_2\". Se debe haber terminado el desarrollo de la pr\u00e1ctica anterior previamente a la realizaci\u00f3n de esta entrega.</p> <pre><code>$ git clone git@github.com:&lt;mi_usuario_de_github&gt;/my_calculator   my_calculator_2 \n$ cd my_calculator_2\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-2-nueva-rama","title":"Paso 2: Nueva rama","text":"<p>El siguiente paso ser\u00e1 crear una rama de nombre \"ops\" que comience despu\u00e9s del primer commit (con mensaje \"x^3 button\") de la rama \"main\" y restaurarla en el directorio de trabajo, para poder trabajar sobre ella. Es necesario consultar el id del commit \"x^3 button\" para poder crear la rama a partir del mismo</p> <pre><code>$ git log --oneline # Lista los commits existentes incluyendo su id\n$ git checkout -b ops &lt;id_de_commit&gt; # Crea una nueva rama llamada \"ops\" a partir del commit indicado\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-3-funcionalidad-x2","title":"Paso 3: Funcionalidad x^2","text":"<p>Crear un commit en la rama \"ops\", que a\u00f1ada a la calculadora del fichero index.html el bot\u00f3n x^2 que eleve un n\u00famero al cuadrado.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"square()\"&gt; x^2 &lt;/button&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\nfunction square() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 2);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora, comprobar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"x^2 button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-4-funcionalidad-1x","title":"Paso 4: Funcionalidad 1/x","text":"<p>Crear un commit en la rama \"ops\", que a\u00f1ada a la calculadora del fichero index.html el bot\u00f3n 1/x que divida 1 entre el n\u00famero introducido.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Calculator&lt;/title&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Calculadora de \u2026\u2026su nombre y apellidos\u2026\u2026&lt;/h1&gt;\n        Number:\n        &lt;input type=\"text\" id=\"n1\"&gt;\n&lt;p&gt;\n&lt;button onclick=\"inverse()\"&gt; 1/x &lt;/button&gt;\n&lt;button onclick=\"square()\"&gt; x^2 &lt;/button&gt;\n&lt;button onclick=\"cube()\"&gt; x^3 &lt;/button&gt;\n&lt;/p&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction cube() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 3);\n}\nfunction square() {\nvar num = document.getElementById(\"n1\");\nnum.value = Math.pow(num.value, 2);\n}\nfunction inverse() {\nvar num = document.getElementById(\"n1\");\nnum.value = 1/num.value;\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una vez a\u00f1adido el c\u00f3digo del nuevo nuevo bot\u00f3n a la calculadora, comprobar que funciona correctamente, registrar los cambios en el \u00edndice y crear el nuevo commit.</p> <pre><code>$ git add index.html\n$ git commit -m \"1/x button\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-5-integrar-la-rama-ops-en-main","title":"Paso 5: Integrar la rama \"ops\" en \"main\"","text":"<p>Integrar la rama ops en la rama main con \"git rebase\" para crear una calculadora con cinco botones: x^2, x^3, x^4, sin(x) y 1/x.</p> <p>\"git rebase \u2026\" realiza la integraci\u00f3n ejecutando un bucle, donde cada iteraci\u00f3n traslada un commit de la rama origen a su nueva base. El traslado implica integrar el c\u00f3digo del commit con el de su nueva base. Si la integraci\u00f3n tiene conflictos, git indica el error y finaliza.</p> <p>\"git status\" muestra los ficheros con conflictos. Los conflictos deben resolverse entonces con el editor.</p> <p>Primero comprobamos el id del commit que queremos integrar en main (el de \"1/x button\") <pre><code>git log --oneline\n</code></pre></p> <p>Nos cambiamos a la rama \"main\" y ejecutamos</p> <pre><code>$ git checkout main\n$ git rebase &lt;id del commit&gt;\n</code></pre> <p>Como hemos modificado el mismo fichero y las mismas l\u00edneas que en los commits posteriores de la rama \"main\" surgir\u00e1n conflictos. Debemos editar el fichero index.html para eliminar los conflictos.</p> <p>Una vez resueltos, se debe comprobar primero que la integraci\u00f3n funciona correctamente. Despu\u00e9s se debe continuar la integraci\u00f3n (rebase) a\u00f1adiendo los cambios al \u00edndice y continuando el rebase:</p> <pre><code>$ git add index.html\n$ git rebase --continue\n</code></pre> <p>Una vez generado un commit, git pasa a intentar integrar el siguiente de la rama origen. Y as\u00ed hasta el \u00faltimo de la rama origen. Es necesario guardar los cambios en el editor que sale al hacer el rebase para que se apliquen.</p> <p>Este proceso habr\u00e1 que repetirlo dos veces: la primera vez para el bot\u00f3n x^4 y la segunda para el bot\u00f3n sin(x).</p> <p>El resultado final de index.html tendr\u00e1 los 5 botones: x^2, x^3, x^4, sin(x) y 1/x.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#paso-6-subir-todas-las-ramas-del-repositorio-local-a-un-nuevo-repositorio-en-github","title":"Paso 6: Subir todas las ramas del repositorio local a un nuevo repositorio en GitHub.","text":"<p>Creamos un nuevo repositorio en Github llamado \"my_calculator_2\". Por \u00faltimo, subimos los cambios realizados en ambas ramas a Github.</p> <pre><code>$ git remote set-url origin git@github.com:&lt;mi_usuario_de_github&gt;/my_calculator_2\n$ git push --all\n</code></pre> <p>La opci\u00f3n --force o -f permite subir un repositorio incompatible, pero \u00a1Cuidado borra el existente! Se debe utilizar solo en casos en que no hay otra soluci\u00f3n.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL de los repositorios a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_my_calculator y ID_XXXX_my_calculator_2 donde</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> <ul> <li>10%:  Existe el repositorio my_calculator2</li> <li>30%:  Los tres primeros commits de main son los originales: \"x^3 button\", \"x^4 button\" y \"sin(x) button\"</li> <li>30%:  El cuarto commit de la rama main es \"x^2 button\" y contiene lo pedido</li> <li>30%:  El quinto commit de la rama main es \"1/x button\" y contiene lo pedido</li> </ul> </li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica003/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/","title":"UD 4 - P4: Git/Github Rebase II","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#relacion-414-integracion-de-ramas-rebase-ii","title":"Relaci\u00f3n 4.1.4: Integraci\u00f3n de ramas - Rebase II","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#objetivos","title":"Objetivos","text":"<ul> <li>Ver nuevos usos de GitHub y de \"git rebase\"</li> <li>Aprender a usar \"git fork\"</li> <li>Gestionar ficheros que no sean programas</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica vamos a duplicar el repositorio https://github.com/ging-moocs/MOOC_git_mod6-tf_agenda haciendo un \"fork\" en su cuenta de GitHub y clonarlo en un directorio local del mismo nombre. Este repositorio contiene solo el fichero tf-agenda.txt con texto plano. Es una agenda telef\u00f3nica muy sencilla, con 3 tel\u00e9fonos, creada en 4 commits, cuyo \u00fanico objetivo es practicar con \"git rebase --interactive ...\"</p> <p>Contenido de la agenda <pre><code>$ cat tf_agenda.txt \n  John: 913-677-899;\n  Eva:  915-768-455;\n  Mary: 918-789-221;\n</code></pre></p> <p>Lista de commits <pre><code>$ git log --oneline\n  9eaa103 Add Mary tf\n  71e69ce Add Eva tf\n  1204dc8 Add Eva pending-tf\n  f6e660e Add John tf\n</code></pre></p> <p>En el primer commit se introdujo el tel\u00e9fono de John. En el segundo solo el nombre de Eva, pero se dej\u00f3 el tel\u00e9fono pendiente tal y como indica el mensaje del commit. En el tercero se a\u00f1ade el tel\u00e9fono de Eva solamente. Y en el cuarto se introduce el tel\u00e9fono de Mary.</p> <p>En esta pr\u00e1ctica se rehacen los commits de la rama master utilizando \"git rebase --interactive \u2026\". Se deben juntar los commits 2 (1204dc8 Add Eva pending-tf) y 3 (71e69ce Add Eva tf) en uno solo, y corregir el tel\u00e9fono de Mary (918-789-221) por el n\u00famero 918-555-555. Debe quedar as\u00ed:</p> <pre><code>$ cat tf_agenda.txt \n  John: 913-677-899;\n  Eva:  915-768-455;\n  Mary: 918-555-555;\n</code></pre> <pre><code>$ git log --online\n2eb1703 Add Mary tf   fixed\n4716ce5 Add Eva tf    integrated\nf6e660e Add John tf\n</code></pre> <p>Finalizar subiendo la rama master local (regenerada) a la rama corrected_tf_agenda del repositorio origin, que se crear\u00e1 porque no existe. El repositorio origen en Github tendr\u00e1 ahora tanto la rama master, como la nueva corrected_tf_agenda.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#tareas-a-realizar","title":"Tareas a realizar","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-1-copiar-el-repositorio-a-tu-cuenta","title":"Paso 1: Copiar el repositorio a tu cuenta","text":"<p>Lo primero que debemos hacer es copiar el repositorio https://github.com/ging-moocs/MOOC_git_mod6-tf_agenda en nuestra cuenta. Para ello hacemos click sobre el bot\u00f3n \"Fork\" que se muestra en la web de Github en la esquina superior derecha de la p\u00e1gina del repositorio.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-2-clonar-el-repositorio","title":"Paso 2: Clonar el repositorio","text":"<p>A continuaci\u00f3n clonamos el repositorio copiado en nuestro ordenador</p> <pre><code>$ git clone  git@github.com:&lt;mi_usuario_de_github&gt;/MOOC_git_mod6-tf_agenda \n$ cd MOOC_git_mod6-tf_agenda \n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-3-juntar-los-commits-2-y-3-en-uno-solo","title":"Paso 3: Juntar los commits 2 y 3 en uno solo","text":"<p>Ahora vamos a utilizar \"git rebase --interactive f6e660e\" para juntar los commits 2 (1204dc8 Add Eva pending-tf) y 3 (71e69ce Add Eva tf) en uno solo, y corregir el tel\u00e9fono de Mary (918-789-221) por el n\u00famero 918-555-555.</p> <pre><code>$ git rebase -i f6e660e\n</code></pre> <p>La opci\u00f3n --interactive (equivalente a -i) permite rehacer interactivamente los 3 \u00faltimos commits de la rama master. f6e660e es equivalente a HEAD~3: referencia al tercer commit del grafo de commits, en direcci\u00f3n a la ra\u00edz, relativo al que est\u00e1 en el directorio de trabajo. Al invocar este comando, se abre el editor por defecto (normalmente nano o vi) con este script (los comentarios (empiezan por #) contienen instrucciones)</p> <p><pre><code>pick 1204dc8 Add Eva pending-tf\npick 71e69ce Add Eva tf\npick 9eaa103 Add Mary tf\n\n# Rebase f6e660e..9eaa103 onto f6e660e\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre> El script est\u00e1 en las 3 primeras l\u00edneas, que siguiendo las instrucciones (comentarios) modificamos para que junte los commits 2 y 3, y adem\u00e1s nos abra el editor en el commit 4.</p> <pre><code>pick 1204dc8 Add Eva pending-tf\nsquash 71e69ce Add Eva tf\nedit 9eaa103 Add Mary tf\n\n...\n</code></pre> <p>Al cerrar la edici\u00f3n del fichero con el nuevo script, Git integra los commits 2 y 3 autom\u00e1ticamente (sabe que tiene que dejar el c\u00f3digo del commit 3), pero nos abre el editor para que editemos el mensaje asociado al nuevo commit en la historia</p> <pre><code># This is a combination of 2 commits.\n# The first commit's message is:\n\nAdd Eva pending-tf\n\n# This is the 2nd commit message:\n\nAdd Eva tf\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Date:      Fri Jan 11 18:58:54 2019 +0100\n#\n# rebase in progress; onto f6e660e\n# You are currently editing a commit while rebasing branch 'master' on 'f6e660e'.\n#\n# Changes to be committed:\n#       modified:   tf_agenda.txt\n#\n</code></pre> <p>Dejamos el segundo mensaje a\u00f1adiendo la palabra \"integrated\" al final (para indicar que se han integrado los dos commits) y cerramos la edici\u00f3n para que el rebase contin\u00fae. El script indica que queremos editar el commit 4 por lo que Git devuelve control a la shell (sin finalizar el rebase) dando el siguiente mensaje</p> <pre><code>[detached HEAD 4716ce5] Add Eva tf    integrated\n Date: Fri Jan 11 18:58:54 2019 +0100\n 1 file changed, 1 insertion(+)\nStopped at 9eaa1031b1c5eb7d52a19970a3a0967193d0b5a3... Add Mary tf\nYou can amend the commit now, with\n\n    git commit --amend \n\nOnce you are satisfied with your changes, run\n\n    git rebase --continue\n</code></pre> <p>Git nos deja en el commit 4 de la rama master original, indic\u00e1ndonos que debemos modificar el c\u00f3digo de dicho commit con un \"amend\" y continuar el rebase. La opci\u00f3n --amend rehace el commit anterior, en vez de crear uno nuevo. Editamos el fichero tf_agenda.txt para cambiar el tel\u00e9fono de Mary por 918-555-555 y una vez modificado hacemos amend al commit 4 con:</p> <pre><code>$ git add tf_agenda.txt\n$ git commit --amend\n</code></pre> <p>Antes de cerrar el nuevo commit 4, Git nos abre el editor con el mensaje asociado al commit para que lo podamos modificar, le a\u00f1adimos la palabra  \"fixed\" al final (para indicar que hemos corregido el commit) y cerramos la edici\u00f3n para que el amend finalice</p> <pre><code>[detached HEAD 2eb1703] Add Mary tf   fixed\n Date: Fri Jan 11 19:01:44 2019 +0100\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Y con el commit 4 corregido con el amend, continuamos el rebase para que finalice</p> <pre><code>$  git rebase --continue\n   Successfully rebased and updated refs/heads/master.\n</code></pre> <p>Estado final de la rama master:</p> <p>Despu\u00e9s del rebase, tanto el contenido de la agenda en tf_agenda.txt, como los commits de la rama master han quedado tal y como se ped\u00eda: commits 2 y 3 integrados y commit 4 corregido</p> <pre><code>$ cat tf_agenda.txt \n  John: 913-677-899;\n  Eva:  915-768-455;\n  Mary: 918-555-555;\n</code></pre> <pre><code>$ git log --online\n  2eb1703 Add Mary tf fixed\n  4716ce5 Add Eva tf integrated\n  f6e660e Add John tf\n</code></pre> <p>Si alguna vez se equivoca uno al rehacer una rama, se puede utilizar el reflog para arreglarlo: https://git-scm.com/docs/git-reflog.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#paso-4-subir-los-cambios-a-una-nueva-rama","title":"Paso 4: Subir los cambios a una nueva rama","text":"<p>Para finalizar, vamos a subir la rama \"master\" local (regenerada) a la rama \"corrected_tf_agenda\" del repositorio origin, la cual se crear\u00e1 porque no existe. El repositorio \"origin\" en Github tendr\u00e1 ahora tanto la rama master, como la nueva \"corrected_tf_agenda\".</p> <pre><code>$ git checkout -b corrected_tf_agenda\n$ git push origin corrected_tf_agenda\n</code></pre> <p>Si hubi\u00e9semos querido subir la nueva rama master del repositorio local a la rama master del repositorio origin (repositorio origen de la clonaci\u00f3n) deber\u00edamos usar el comando \"git push --force \u2026\u201d porque los commits son incompatibles. Utilizando la opci\u00f3n --force o -f se sobre-escriben los commits antiguos.</p> <p>\u00a1Atencion! los commits antiguos se pierden al sobre-escribirlos y no podr\u00e1n ser recuperados en ese repositorio. En un desarrollo real no se deben compartir repositorios, ni ramas que vayan a ser sobre-escritas posteriormente. Los commits a\u00f1adidos por terceros a las copias del repositorio no sobreescrito ser\u00e1n incompatibles con los commits nuevos creados sobre las antiguas ramas.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL de los repositorios a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_tf_agenda</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> </li> <li>10%:  Existe el repositorio MOOC_git_mod6-tf_agenda</li> <li>20%:  El primer commit de la rama corrected_tf_agenda el original:    f6e660e Add John tf</li> <li>35%:  El segundo commit de la rama corrected_tf_agenda es \"Add Eva tf    integrated\" y contiene los 2 originales integrados</li> <li>35%:  El tercer commit de la rama corrected_tf_agenda es \"Add Mary tf   fixed\" y contiene el original corregido</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica004/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/","title":"UD 4 - P5: Git/Github Pull Request","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#relacion-415-contribuir-a-repositorios-de-terceros-con-pull-request-integracion-automatica-y-comandos-git-branch-clone-fetch-merge-pull-y-push-pull-request","title":"Relaci\u00f3n 4.1.5: Contribuir a repositorios de terceros con pull-request, integraci\u00f3n autom\u00e1tica, y comandos Git: branch, clone, fetch, merge, pull y push: Pull Request","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#objetivos","title":"Objetivos","text":"<ul> <li>Usar dos repositorios remotos, uno como respaldo del repositorio de trabajo local y otro como repositorio central donde las contribuciones se env\u00edan con pull-request.</li> <li>Practicar con ramas remotas de diversos tipos</li> <li>Realizar integraciones de desarrollos sencillos.</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#descripcion-de-la-practica","title":"Descripci\u00f3n de la pr\u00e1ctica","text":"<p>En esta pr\u00e1ctica vamos a duplicar el repositorio https://github.com/ging-moocs/MOOC_git_mod7-cal_2com en nuestra cuenta de GitHub, de nuevo usando el bot\u00f3n de \"Fork\". Este repositorio tiene 2 commits en la rama master. El primer commit a\u00f1ade los ficheros README.md y LICENSE, y el segundo commit a\u00f1ade el fichero calculator.html con una calculadora que tiene solo el bot\u00f3n x^2.</p> <p>Primero vamos a crear una organizaci\u00f3n o una segunda cuenta con un nombre diferente () en GitHub. A continuaci\u00f3n duplicamos el repositorio (https://github.com//MOOC_git_mod7-cal_2com), ya clonado en la primera cuenta, en esta \u00faltima. <p>Luego clonamos el repositorio \"MOOC_git_mod7-cal_2com\" de  en un repositorio local y creamos un nuevo commit en la rama \"master\" del repositorio local que a\u00f1ada al fichero calculator.html una cabecera HTML (&lt;h1&gt;) al comienzo del body con el texto \"Calculadora de \". <p>Copiamos la rama \"inverse\" del repositorio https://github.com/ging-moocs/https://github.com/ging-moocs/MOOC_git_mod7-cal_branches a nuestro repositorio local. Esta rama tiene 3 commits, el primero y el segundo son los mismos que los dos primeros de la rama master de \"cal_2com\" y el tercero a\u00f1ade el bot\u00f3n 1/x a la calculadora.</p> <p>Integramos primero la rama master en la rama inverse. La integraci\u00f3n debe incorporar el t\u00edtulo &lt;h1&gt; de la rama master y los dos los botones x^2 y 1/x de la rama inverse.</p> <p>Integramos a continuaci\u00f3n tambi\u00e9n la rama inverse en la rama master (con FF)y subimos ambas ramas al repositorio origen de la clonaci\u00f3n en la segunda cuenta.</p> <p>Una vez subidas env\u00ede la integraci\u00f3n realizada en la rama master con pull-request desde este repositorio al repositorio en la primera cuenta, del que copiamos este Fork. Aceptamos el pull-request y lo integramos en el repositorio en GitHub en la primera cuenta.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#tareas-a-realizar","title":"Tareas a realizar","text":"","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-1-copiar-repositorio","title":"Paso 1: Copiar repositorio","text":"<p>Primero vamos a copiar el repositorio https://github.com/ging-moocs/MOOC_git_mod7-cal_2com en su cuenta de GitHub usando el bot\u00f3n de Fork.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-2-copiar-repositorio-desde-una-segunda-cuenta","title":"Paso 2: Copiar repositorio desde una segunda cuenta","text":"<p>A continuaci\u00f3n, creamos una segunda cuenta () en GitHub y copiamos el repositorio de la primera cuenta (https://github.com//MOOC_git_mod7-cal_2com) en esta segunda cuenta usando el bot\u00f3n de Fork. El nombre de esta cuenta puede ser cualquiera que desees.","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-3-clonar-el-repositorio","title":"Paso 3: Clonar el repositorio","text":"<p>Clonamos el repositorio /MOOC_git_mod7-cal_2com (de cuenta en GitHub) en nuestro ordenador local. <pre><code>$ git clone git@github.com:&lt;tu_cuenta_2&gt;/MOOC_git_mod7-cal_2com\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-4-anadir-cambios","title":"Paso 4: A\u00f1adir cambios","text":"<p>Entramos en el directorio de trabajo del nuevo repositorio clonado y a\u00f1adir al fichero calculator.html, al principio del bloque &lt;body&gt; de HTML, un t\u00edtulo &lt;h1&gt; con su nombre y apellidos.</p> <p><pre><code>$ cd MOOC_git_mod7-cal_2com \n</code></pre> Creamos un nuevo commit \"T\u00edtulo con autor\" con esta modificaci\u00f3n.</p> <pre><code>$ git add calculator.html\n$ git commit -m \"T\u00edtulo con autor\"\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-5-copiar-rama-remota","title":"Paso 5: Copiar rama remota","text":"<p>Copiamos la rama remota inverse del repositorio https://github.com/ging-moocs/MOOC_git_mod7-cal_branches como una rama local con git fetch y la refspec correspondiente utilizando el comando: git fetch ..\u2026</p> <p><pre><code>$ git fetch git@github.com:ging-moocs/MOOC_git_mod7-cal_branches inverse:inverse\n</code></pre> Podemos comprobar que la rama \"inverse\" est\u00e1 disponible en local con el comando siguiente: <pre><code>$ git branch -v\n</code></pre></p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-6-integrar-la-rama-inverse-en-master","title":"Paso 6: Integrar la rama \"inverse\" en \"master\"","text":"<p>A continuaci\u00f3n vamos a integrar en la rama \"inverse\", copiada en el repositorio local, la rama \"master\" con (git merge) e identificamos el nuevo commit con el mensaje \"Integrar inverse y master\".</p> <p>Primero nos cambiamos a la rama \"inverse\"</p> <pre><code>$ git checkout inverse\n</code></pre> <p>A continuaci\u00f3n integramos la rama \"master\" en \"inverse\"</p> <pre><code>$ git merge -m \"Integrar inverse y master\" master\n</code></pre> <p>Al hacer la integraci\u00f3n surgir\u00e1n conflictos que debemos resolver manualmente con el editor de texto. La integraci\u00f3n debe incorporar el t\u00edtulo y los dos botones x^2 y 1/x. Una vez resueltos los conflictos a\u00f1adimos los ficheros modificados al commit y continuamos con el proceso de integraci\u00f3n</p> <pre><code>$ git add .\n$ git merge --continue\n</code></pre> <p>Podemos comprobar el grafo de commits con el siguiente comando:</p> <pre><code>$ git log --graph\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-8-integrar-inverse-en-master","title":"Paso 8: Integrar \"inverse\" en \"master\"","text":"<p>Integramos en \"master\" la rama \"inverse\" del repositorio local (integrada en el paso anterior) con git merge tambi\u00e9n. Primero tenemos que cambiarnos a la rama \"master\".</p> <pre><code>$ git checkoutmaster\n$ git merge inverse\n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-8-subir-los-cambios-a-github","title":"Paso 8: Subir los cambios a Github","text":"<p>Subimos al repositorio origin (origen de la clonaci\u00f3n en la segunda cuenta) las dos ramas locales (\"master\" e \"inverse\") con git push.</p> <pre><code>git push --all \n</code></pre>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-9-crear-pull-request","title":"Paso 9: Crear Pull Request","text":"<p>A continuaci\u00f3n, enviamos un Pull Request de la rama master desde el repositorio MOOC_git_mod7-cal_2com de la segunda cuenta al repositorio MOOC_git_mod7-cal_2com de la primera cuenta.</p> <p>Se deben utilizar las facilidades de GitHub para enviar un Pull Request, porque es la \u00fanica forma de hacerlo.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#paso-10-aceptar-pull-request","title":"Paso 10: Aceptar Pull Request","text":"<p>Por \u00faltimo, aceptamo el Pull Request desde la primera cuenta. Github permite aceptar el merge asociado a un Pull Request directamente en Github.</p> <p>Tambi\u00e9n se puede clonar el repositorio de la primera cuenta en local. Descargar la rama master asociada al pull-request con \"git fetch \u2026\" e integrarla en la rama master del repositorio local. Volver a subir la rama master ya integrada al repositorio en la primera cuenta.</p> <p>Utilizar los comandos ya vistos en los pasos anteriores y en las transparencias.</p>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#entrega","title":"Entrega","text":"<ul> <li>A\u00f1ade la URL de los repositorios a la tarea.</li> <li>Recuerda que el repositorio tiene que ser publico.</li> <li> <p>El nombre del repositorio sera: ID_XXXX_my_calculator y ID_XXXX_my_calculator_2 donde</p> <ul> <li>ID es el identificador de la tarea</li> <li>XXXX tus iniciales</li> </ul> </li> <li> <p>Asegurate que funciona y:</p> </li> <li>10%:  Existe el repositorio \"MOOC_git_mod7-cal_2com\" en cuenta 2</li> <li>10%:  Existe el repositorio \"MOOC_git_mod7-cal_2com\" en cuenta 1 y es el origen del Fork del repo de cuenta 2</li> <li>10%:  La rama master del repo de cuenta 2 tiene como tercer commit \"T\u00edtulo con autor\"</li> <li>10%:  El repo de cuenta 2 tiene una rama inverse integrada con master</li> <li>10%:  La rama master del repo de cuenta 2 tiene como \u00faltimo commit \"1/x button\"</li> <li>20%:  Que el fichero calculator.html de este \u00faltimo commit funciona, tiene el t\u00edtulo requerido y los botones x^2 y 1/x</li> <li>30%:  Que el repositorio MOOC_git_mod7-cal_2com en cuenta_1 tiene una rama master con los mismos commits de master del repo MOOC_git_mod7-cal_2com de cuenta 2</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#apoyo","title":"Apoyo","text":"<ul> <li>https://revilofe.github.io</li> </ul>","tags":["Software","git","github"]},{"location":"section3/u04/practica/EDES-U4.-Practica005/#fuente","title":"Fuente","text":"<p>Juan Quemada, DIT - UPM</p>","tags":["Software","git","github"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/","title":"UD 4 - 4.1 Sistemas de control de versiones","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#git-github","title":"Git &amp; GitHub","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#recursos","title":"Recursos","text":"<ul> <li>Git la gu\u00eda sencilla</li> <li>Git en entornos distribuidos</li> </ul>","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.1.-Git_Github/#fuente","title":"Fuente","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/","title":"UD 4 - 4.1 Sistemas de control de versiones","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#herramientas-de-desarrollo","title":"Herramientas de desarrollo","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#recursos","title":"Recursos","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.2.-Refactorizacion/#fuente","title":"Fuente","text":"","tags":["EDES","GIT","GitHub"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/","title":"UD 4 - 4.1 Sistemas de control de versiones","text":"","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#analisis-estatico-de-codigo","title":"An\u00e1lisis est\u00e1tico de c\u00f3digo","text":"<p>La relaci\u00f3n entre las personas, los ordenadores y el c\u00f3digo es bastante compleja. Aunque la mayor\u00eda de los c\u00f3digos se desarrollan para ser ejecutados en ordenadores, su prop\u00f3sito no se limita a eso. Tambi\u00e9n se desarrollan para ser le\u00eddos y comprendidos cuidadosamente, de hecho la mayor\u00eda de tu tiempo como programador lo dedicar\u00e1s a leer c\u00f3digo.</p> <p>Desgraciadamente, el desarrollo moderno de software no va de la mano de la comprensi\u00f3n del c\u00f3digo. Adem\u00e1s, los c\u00f3digos de software que no se pueden entender, mantener o mejorar tienen mayores tasas de defectos.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#que-es-el-analisis-estatico-de-codigo","title":"\u00bfQu\u00e9 es el an\u00e1lisis est\u00e1tico de c\u00f3digo?","text":"<p>El an\u00e1lisis est\u00e1tico de c\u00f3digo es una de las t\u00e9cnicas que los desarrolladores y programadores emplean para analizar el c\u00f3digo fuente en funci\u00f3n de criterios espec\u00edficos predeterminados. Esta t\u00e9cnica se lleva a cabo antes de la ejecuci\u00f3n del programa y se utiliza para detectar errores funcionales y vulnerabilidades en el software que se va a desplegar. En este caso, es f\u00e1cil mantener las convenciones de codificaci\u00f3n para los equipos de desarrollo debido a la presencia de criterios predeterminados. Adem\u00e1s, este tipo de an\u00e1lisis ayuda a identificar las vulnerabilidades, por lo que proporciona una herramienta importante para evitar fallos de seguridad y bugs.</p> <p>Los desarrolladores tambi\u00e9n pueden revisar el c\u00f3digo manualmente, pero esto puede dar lugar a que se produzcan fallos debido a un error humano. Y los errores de software acaban costando una cantidad significativa de tiempo y dinero, por lo que es imperativo producir c\u00f3digos sin errores. Adem\u00e1s, cada vez m\u00e1s empresas de desarrollo se suben al carro del an\u00e1lisis est\u00e1tico de c\u00f3digo. As\u00ed, el an\u00e1lisis est\u00e1tico de c\u00f3digo se considera ahora un aspecto clave a la hora de escribir c\u00f3digo para aplicaciones Android.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#ventajas-de-utilizar-el-analisis-estatico-de-codigo","title":"Ventajas de utilizar el an\u00e1lisis est\u00e1tico de c\u00f3digo","text":"<ul> <li>M\u00e1s r\u00e1pido, preciso y eficiente en comparaci\u00f3n con la revisi\u00f3n manual del c\u00f3digo.</li> <li>Ayuda a identificar posibles bugs, vulnerabilidades y errores que las pruebas unitarias o manuales podr\u00edan haber pasado por alto.</li> <li>Ayuda a imbuirse de pr\u00e1cticas de c\u00f3digo adecuadas.</li> <li>Analiza cada l\u00ednea de c\u00f3digo, ayudando as\u00ed a conseguir un c\u00f3digo de alta calidad.</li> <li>Ayuda a definir la estructura del proyecto que puede configurarse y personalizarse para las necesidades espec\u00edficas de un proyecto.</li> </ul>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#herramientas-populares-de-analisis-de-codigo-estatico","title":"Herramientas populares de an\u00e1lisis de c\u00f3digo est\u00e1tico","text":"","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#ktlint","title":"Ktlint","text":"<p>Ktlint requiere poca o ninguna personalizaci\u00f3n, por lo que es f\u00e1cil de usar. Esta herramienta permite centrarse en la importancia de la claridad del c\u00f3digo y las convenciones de la comunidad por encima de las preferencias personales. Este aspecto hace que el c\u00f3digo sea m\u00e1s legible y f\u00e1cil de entender. Ktlint s\u00ed ofrece caracter\u00edsticas de personalizaci\u00f3n; sin embargo, eso queda a discreci\u00f3n del desarrollador o programador. Tambi\u00e9n ofrece a los desarrolladores la opci\u00f3n de a\u00f1adir sus reglas para descubrir posibles errores, comprobar los antipatrones, etc.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#detekt","title":"Detekt","text":"<p>Kotlin, un lenguaje de programaci\u00f3n multiplataforma, tiene su versi\u00f3n de an\u00e1lisis est\u00e1tico de c\u00f3digo, conocida como Detekt. Esta herramienta se basa en el \u00e1rbol sint\u00e1ctico abstracto que proporciona el compilador de Kotlin. Detekt ofrece conjuntos de reglas altamente configurables, lo que la hace muy usada. Adem\u00e1s, Detekt tambi\u00e9n proporciona las caracter\u00edsticas de an\u00e1lisis de code smell*, informes de complejidad en las l\u00edneas del c\u00f3digo y complejidad ciclom\u00e1tica.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#findbugs","title":"FindBugs","text":"<p>FindBugs analiza los Bytecodes de Java, especialmente los archivos .class, para buscar posibles errores y fallos de dise\u00f1o. Esta herramienta necesita c\u00f3digo compilado para ser empleada. Los aspectos clave de FindBugs incluyen la correcci\u00f3n de malas pr\u00e1cticas, la correcci\u00f3n multihilo, la detecci\u00f3n de c\u00f3digo dudoso, el rendimiento malicioso, la vulnerabilidad del c\u00f3digo, la seguridad experimental y la internacionalizaci\u00f3n.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#checkstyle","title":"Checkstyle","text":"<p>Checkstyle analiza el c\u00f3digo fuente del proyecto en busca de errores y fallos, al tiempo que trabaja para mejorar el est\u00e1ndar del c\u00f3digo. Tambi\u00e9n ayuda a verificar el c\u00f3digo fuente para las convenciones de codificaci\u00f3n.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#android-lint","title":"Android Lint","text":"<p>Android Lint viene empaquetado por defecto con Android Studio. Esta herramienta comprueba los archivos fuente del proyecto para identificar posibles errores y optimizar la usabilidad, la correcci\u00f3n, la seguridad, la accesibilidad y la internacionalizaci\u00f3n.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#linting-en-el-analisis-estatico-de-codigo","title":"Linting en el an\u00e1lisis est\u00e1tico de c\u00f3digo","text":"<p>Te preguntar\u00e1s, \u00bfqu\u00e9 demonios es el linting? Bueno, en pocas palabras, linting es el proceso de analizar el c\u00f3digo en busca de errores potenciales. Veamos c\u00f3mo puedes usar linting para diagnosticar errores. Los desarrolladores utilizan varias gu\u00edas de estilo, como Java Code Style y Kotlin Style Guide.</p> <p>En este caso, vamos a utilizar Ktlint o Detekt, un linter que es sin\u00f3nimo de la plataforma Kotlin, ya que este formato ofrece simplicidad, extensibilidad y una comunidad de desarrolladores activa.</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#uso-de-ktlint","title":"Uso de Ktlint","text":"<ul> <li>A\u00f1ade al fichero <code>build.gradle</code> de tu proyecto la configuraci\u00f3n de ktling:</li> </ul> <pre><code>import org.jlleitschuh.gradle.ktlint.reporter.ReporterType\nplugins {\nid(\"org.jlleitschuh.gradle.ktlint\") version \"11.0.0\"\n}\n// Configuraci\u00f3n de klint\nktlint {\nverbose.set(true)\noutputToConsole.set(true)\ncoloredOutput.set(true)\nreporters {\nreporter(ReporterType.CHECKSTYLE)\nreporter(ReporterType.JSON)\nreporter(ReporterType.HTML)\n}\nfilter {\nexclude(\"**/style-violations.kt\")\n}\n}\n</code></pre> <p>Tambi\u00e9n existe un plugin no oficial que puedes instalar. En <code>File -&gt; Settings -&gt; Tools -&gt; ktlint</code> podr\u00e1s ver y trabajar en la configuraci\u00f3n</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#uso-de-detekt","title":"Uso de Detekt","text":"<p>Instala el plugin Detekt. En <code>File -&gt; Settings -&gt; Tools -&gt; Detekt</code> podr\u00e1s ver y trabajar en la configuraci\u00f3n</p>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#recursos","title":"Recursos","text":"<ul> <li>Detekt</li> <li>ktlint</li> </ul>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.3.-AnalizadorCodigo/#fuente","title":"Fuente","text":"<ul> <li>\u00bfQu\u00e9 es lo que pasa con el an\u00e1lisis est\u00e1tico del c\u00f3digo?</li> <li>Complejidad ciclom\u00e1tica</li> </ul>","tags":["EDES","Tools","ktlint","Detekt"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/","title":"UD 4 - 4.4 Documentaci\u00f3n y comentarios","text":"","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#documentacion-y-comentarios","title":"Documentaci\u00f3n y comentarios.","text":"<p>A la hora de comentar, hay dos escuelas:</p> <ol> <li>Usar los comentarios para clarificar lo que quisiste expresar con tu c\u00f3digo</li> <li>Evitarlos al m\u00e1ximo y que comentar tu c\u00f3digo es un mal necesario que s\u00f3lo denota tu falta de habilidad para no hacer c\u00f3digo lo suficientemente claro.</li> </ol> <p>\u00bfA cu\u00e1l de los dos consejos deber\u00edas hacerle caso?</p> <p>Un sistema sin documentaci\u00f3n est\u00e1 incompleto. Para tener calidad, necesita tener documentaci\u00f3n, pero esta tiene que tener sentido,  es decir, informaci\u00f3n acerca del sistema que comunique cosas, como la raz\u00f3n de existir de ciertos m\u00f3dulos, valores y funciones y c\u00f3mo usarlo.</p> <p>Si m\u00e1s tardes tienes que modificar el software, estos comentarios, facilitar\u00e1n la comprens\u00ed\u00f3n de lo que los programadores anteriores hicieron o intentar\u00f3n hacer.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#donde-situar-la-documentacion","title":"\u00bfD\u00f3nde situar la documentaci\u00f3n?","text":"<p>Por tanto la documentaci\u00f3n es totalmente necesaria, pero \u00bfdonde la ponemos? - En documentos separados del c\u00f3digo. Suelen olvidarse y no se mantienen. - Lo m\u00e1s cerca del c\u00f3digo, para eso tenemos los comentarios, facilitar\u00e1 encontrarlos y mantenerlos.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#que-documentar","title":"\u00bfQu\u00e9 documentar?","text":"<p>Puedes usar los comentarios para documentar: - Decisiones de dise\u00f1o. - Explicaciones sobre la existencia, funcionamiento o raz\u00f3n de ser de cierta parte del c\u00f3digo. - Las interfaces y su ejemplo de uso. - Efectos de usar cierto c\u00f3digo. - Partes no finalizadas o que se pueden mejorar (TODO\u2019s).</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#por-que-documentar","title":"\u00bfPor qu\u00e9 documentar?","text":"<p>Ten en cuenta que los comentarios pueden ayudarte en el futuro, ya que estar\u00e1n ahi para recordarte lo que hiciste y por qu\u00e9 lo hiciste. Por ejemplo ,seguramente tu mente haya borrado informaci\u00f3n valiosa de por qu\u00e9 una variable tiene un valor de inicio y no otro. Por tanto, tu yo futuro y tu equipo te agradecer\u00e1n los comentarios aclaratorios de tomas de decisiones.  </p> <p>Adem\u00e1s, los comentarios son una buena herramienta de dise\u00f1o. Existen gurus, como John Ousterhout, en \u201cA Philosophy of Software Design\u201d que recomienda empezar con los comentarios antes de programar. Pero, \u00bfpor qu\u00e9 lo recomienda? Escribir en un lenguaje humano c\u00f3mo funciona algo antes de implementarlo realmente, te da la capacidad de ver si es l\u00f3gico y suficiente, adem\u00e1s te permite ponerte en los zapatos del usuario para notar deficiencias sobre todo en la interfaz. Los comentarios de la interfaz es lo primero que deber\u00edas crear porque te servir\u00e1n de gu\u00eda para avanzar con tu dise\u00f1o y, sobre todo, que sea l\u00f3gico y f\u00e1cil de usar.  </p> <p>El lenguaje de programaci\u00f3n no es suficiente para expresar todo lo necesario. Todos los lenguajes de programaci\u00f3n est\u00e1n pensados para ser un subconjunto del lenguaje humano que elimine las ambig\u00fcedades, manteniendo el mayor poder expresivo posible. Esto nos lleva a sus limitantes: es imposible, o por lo menos impr\u00e1ctico, intentar expresar todas las ideas con el c\u00f3digo.  En la pr\u00e1ctica, el tiempo y los recursos para lograr algo son limitados, por lo que a veces es m\u00e1s conveniente y f\u00e1cil para todos explicar lenguaje humano algo que intentar expresarlo con c\u00f3digo, como los puristas afirman.  </p> <p>No te sientas mal si tienes que recurrir de vez en cuando a explicar la forma en que funciona algo, siempre y cuando no sea la pr\u00e1ctica com\u00fan.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#como-usar-los-comentarios-para-que-sean-valiosos","title":"\u00bfC\u00f3mo usar los comentarios para que sean valiosos?","text":"<p>Como una buena gu\u00eda, si no eres capaz de crear un comentario concreto y corto sobre c\u00f3mo funciona o por qu\u00e9 existe algo, lo m\u00e1s probable es que tengas que re-pensar tu dise\u00f1o.</p> <p>No todos los comentarios son valiosos, hay algunos que pueden estorbar m\u00e1s de lo que ayudan, por ejemplo, los que no aportan informaci\u00f3n a lo que es obvio en el c\u00f3digo.</p> <p>Hablemos de algunas formas de aprovecharlos lo mejor posible para que contribuyan positivamente a aumentar la calidad del proyecto:</p> <ul> <li> <p>Escribe los comentarios primero: Una de las partes m\u00e1s importantes de los comentarios como documentaci\u00f3n es que deben ser concretos, cercanos a la realidad y que proporcionen la mayor cantidad de informaci\u00f3n \u00fatil posible.  Para lograr esto, se tienen que crear lo m\u00e1s cerca que puedas a la creaci\u00f3n del c\u00f3digo. Pero como todos sabemos que despu\u00e9s de escribir y probar (b\u00e1sicamente) el c\u00f3digo vamos a sentir que ya est\u00e1 terminado, por tanto, es buena   pr\u00e1ctica obligarte a escribirlos antes, justo como propone TDD con las pruebas. De esta manera te asegurar\u00e1s que tu c\u00f3digo est\u00e9 documentado incluso antes de escribirlo y te servir\u00e1n como una herramienta de dise\u00f1o que te ayudar\u00e1 a pensar mejor en la usabilidad de tus m\u00f3dulos y piezas de software.  </p> </li> <li> <p>Crea comentarios sobre la interfaz: La interfaz es el medio de uso que tus m\u00f3dulos o funciones presentan para que las dem\u00e1s partes de tu sistema lo usen. Lo primero que deber\u00edas documentar y explicar es esta interfaz, para que m\u00e1s personas a parte de ti puedan usar este pedazo de c\u00f3digo.  </p> </li> <li> <p>Escribe comentarios claros sobre: </p> </li> <li>C\u00f3mo usar esa pieza de c\u00f3digo</li> <li>Por qu\u00e9 existe esa parte del sistema</li> <li>Qu\u00e9 efectos tiene usarla</li> </ul> <p>Este tipo de comentarios son los que aportan mayor valor al sistema y si est\u00e1n lo suficientemente completos, con ejemplos y explicaciones claras, son una documentaci\u00f3n v\u00e1lida que est\u00e1 en un muy buen lugar: es f\u00e1cil de encontrar y no se va a perder enterrada entre otros documentes que despu\u00e9s nadie va a consultar.  </p> <ul> <li>Evita los comentarios sobre la implementaci\u00f3n: Los comentarios sobre la implementaci\u00f3n son aquello que describen qu\u00e9 estas haciendo, como por ejemplo, sumar n\u00famero, abrir un archivo, etc. Estos comentarios normalmente son innecesarios, ya que lo que se est\u00e1 haciendo es obvio si el c\u00f3digo es lo suficientemente expresivo y siempre deber\u00edamos buscar que sea as\u00ed. De hecho, estos son los comentarios que hacen que la gente odie a los comentarios en general, pues en vez de proporcionar informaci\u00f3n extra son una carga que hay que mantener y pueden confundir si no son actualizados. Si realmente sientes que tienes que explicar qu\u00e9 est\u00e1s haciendo con cierta pieza de c\u00f3digo, primero preg\u00fantate si no hay una manera de reescribirlo para que sea obvio. Si no existe o no es pr\u00e1ctica esta soluci\u00f3n, entonces escribe el comentario de la manera m\u00e1s concisa posible, incluyendo la raz\u00f3n de la existencia de ese c\u00f3digo. Para hacer esto debes tomar muy en cuenta los recursos del proyecto: no te puedes tardar el triple del tiempo implementando la pieza de c\u00f3digo perfecta porque no quieres escribir un comentario que explique c\u00f3mo funciona.</li> </ul> <p>Escribir comentarios es una de las grandes tareas que los programadores debemos dominar. Los lenguajes de programaci\u00f3n y los entornos de programaci\u00f3n cada vez le dan m\u00e1s poder a esta parte de los programas y permiten incluso escribir pruebas en ellos, generar documentaci\u00f3n autom\u00e1tica y listar tareas a partir de ellos. Si pones el suficiente esmero en aprender a escribir buenos comentarios y mantenerlos, ser\u00e1n una gran herramienta de dise\u00f1o y documentaci\u00f3n de tu software.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#herramientas-para-documentar","title":"Herramientas para documentar","text":"","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#doka","title":"DOKA","text":"<p>Dokka</p> <ul> <li>Herramienta que nos permite generar la documentaci\u00f3n en distintos formatos.</li> <li>Configuraci\u00f3n b\u00e1sica y m\u00ednima: A\u00f1ade al fichero <code>build.gradle.kts:</code></li> </ul> <p><pre><code>plugins {\nid(\"org.jetbrains.dokka\") version \"1.6.10\"\n}\nrepositories {\nmavenCentral()\n}\n</code></pre> Ahora en aparecer\u00e1n nuevas tareas en la pesta\u00f1a de gradle.</p>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#kdoc","title":"KDOC","text":"<p>Sintaxis de KDoc</p> <ul> <li>Lenguaje que permite documentar.</li> <li>Documenta la interface de las clases, m\u00e9todos, propiedades, etc.</li> <li>Para genera la documentaci\u00f3n, en las opciones de <code>Gradle</code>, busca la tarea <code>Task-&gt;Documentaci\u00f3n-&gt;DokkaHtml</code> y p\u00falsala.</li> <li>La documentaci\u00f3n se genera en la carpeta <code>build</code> de tu proyecto.</li> </ul>","tags":["EDES","Dokka","KDoc"]},{"location":"section3/u04/teoria/EDES-U4.4.-Documentacion/#bibliografia-y-fuente","title":"Bibliograf\u00eda y fuente","text":"<ul> <li>Deber\u00edas comentar tu c\u00f3digo - H\u00e9ctor Patricio</li> <li>Head First Kotlin, A Brain-Friendly Guide; Dawn Griffiths &amp; David Griffiths; 2019 - O'Reilly Media</li> <li>A Philosophy of Software Design, John Ousterhout. (Le dedica 4 cap\u00edtulos a buen uso de los comentarios)</li> </ul>","tags":["EDES","Dokka","KDoc"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#bbdd","title":"BBDD","text":"<ul> <li>UD 9 - Acceso a base de datos relacionales</li> </ul>"},{"location":"tags/#case","title":"CASE","text":"<ul> <li>UD 2 - Entornos de desarrollo integrado</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 3 - Herramientas Git/Github</li> </ul>"},{"location":"tags/#cadenas","title":"Cadenas","text":"<ul> <li>UD 3 - P0: Cadenas</li> <li>UD 3 - 3.0 Cadenas</li> <li>UD 7 - 7.1 Sistemas de archivos</li> </ul>"},{"location":"tags/#ciberseguridad","title":"Ciberseguridad","text":"<ul> <li>Incidentes de ciberseguridad</li> <li>UD 1 - Planes de ciberseguridad</li> <li>UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad</li> <li>UD 3 - Detecci\u00f3n de incidentes</li> <li>UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad</li> <li>UD 5 - Implemetaci\u00f3n de medidas</li> <li>UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes</li> </ul>"},{"location":"tags/#conjuntos","title":"Conjuntos","text":"<ul> <li>UD 3 - P3: Conjuntos</li> </ul>"},{"location":"tags/#consola","title":"Consola","text":"<ul> <li>UD 7 - 7.2 Consola y teclado</li> </ul>"},{"location":"tags/#dao","title":"DAO","text":"<ul> <li>UD 9 - 9.1 Acceso a BBDD</li> <li>UD 9 - 9.2 JDBC y kotlin</li> <li>UD 9 - 9.3 JDBC Prepared Statement</li> <li>UD 9 - 9.3 Patron DAO</li> <li>UD 9 - 9.5 Otros aspectos</li> </ul>"},{"location":"tags/#debug","title":"Debug","text":"<ul> <li>UD 3 - 3.3 Depuraci\u00f3n</li> </ul>"},{"location":"tags/#depurar","title":"Depurar","text":"<ul> <li>UD 2 - 2.4 Depurar un programa</li> </ul>"},{"location":"tags/#detekt","title":"Detekt","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#diccionarios","title":"Diccionarios","text":"<ul> <li>UD 3 - P2: Diccionarios</li> </ul>"},{"location":"tags/#dinamica","title":"Dinamica","text":"<ul> <li>Din\u00e1mica de presentaci\u00f3n</li> </ul>"},{"location":"tags/#documentar","title":"Documentar","text":"<ul> <li>UD 2 - 2.5 Documentar el c\u00f3digo</li> </ul>"},{"location":"tags/#dokka","title":"Dokka","text":"<ul> <li>UD 4 - 4.4 Documentaci\u00f3n y comentarios</li> </ul>"},{"location":"tags/#edes","title":"EDES","text":"<ul> <li>Entornos de desarrollo</li> <li>UD 1 - Introducci\u00f3n al desarrollo de software</li> <li>UD 1 - 1.1 Relaci\u00f3n entre software y hardware</li> <li>UD 1 - 1.2 Lenguajes de programaci\u00f3n</li> <li>UD 1 - 1.3 Funcionalidades de herramientas usadas durante el desarrollo de software</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 2 - Entornos de desarrollo integrado</li> <li>UD 2 - 2.1 Relaci\u00f3n entre software y hardware</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 3 - 3.1 Pruebas</li> <li>UD 3 - 3.2 Test de unidad y TDD</li> <li>UD 3 - 3.3 Kotest</li> <li>UD 3 - 3.4 Mockk</li> <li>UD 3 - 3.3 Depuraci\u00f3n</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.4 Documentaci\u00f3n y comentarios</li> </ul>"},{"location":"tags/#ejercicios","title":"Ejercicios","text":"<ul> <li>UD 1 - P1: Mi primer programa</li> <li>UD 1 - P3: Control de versiones con Git y GitHub - Parte 1</li> <li>UD 2 - P1: Condicionales</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 3 - P0: Cadenas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P2: Diccionarios</li> <li>UD 3 - P3: Conjuntos</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> </ul>"},{"location":"tags/#file","title":"File","text":"<ul> <li>UD 7 - 7.3 Manejo de archivos: File</li> <li>UD 7 - 7.4 Lectura y escritura de archivos</li> </ul>"},{"location":"tags/#funciones","title":"Funciones","text":"<ul> <li>UD 3 - 3.5 Funciones</li> </ul>"},{"location":"tags/#git","title":"GIT","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#github","title":"GitHub","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#hardware","title":"Hardware","text":"<ul> <li>UD 1 - 1.1 Relaci\u00f3n entre software y hardware</li> <li>UD 2 - 2.1 Relaci\u00f3n entre software y hardware</li> <li>UD 3 - 3.2 Test de unidad y TDD</li> </ul>"},{"location":"tags/#is","title":"IS","text":"<ul> <li>Din\u00e1mica de presentaci\u00f3n</li> </ul>"},{"location":"tags/#incidentes","title":"Incidentes","text":"<ul> <li>Incidentes de ciberseguridad</li> <li>UD 1 - Planes de ciberseguridad</li> <li>UD 2 - Detecci\u00f3n de de incidentes de ciberseguridad</li> <li>UD 3 - Detecci\u00f3n de incidentes</li> <li>UD 4 - Investigaci\u00f3n de incidentes de ciberseguridad</li> <li>UD 5 - Implemetaci\u00f3n de medidas</li> <li>UD 6 - Documentaci\u00f3n y notificaci\u00f3n de incidentes</li> </ul>"},{"location":"tags/#jdbc","title":"JDBC","text":"<ul> <li>UD 9 - 9.1 Acceso a BBDD</li> <li>UD 9 - 9.2 JDBC y kotlin</li> <li>UD 9 - 9.3 JDBC Prepared Statement</li> <li>UD 9 - 9.3 Patron DAO</li> <li>UD 9 - 9.5 Otros aspectos</li> </ul>"},{"location":"tags/#kdoc","title":"KDoc","text":"<ul> <li>UD 4 - 4.4 Documentaci\u00f3n y comentarios</li> </ul>"},{"location":"tags/#lenguajes","title":"Lenguajes","text":"<ul> <li>UD 1 - 1.2 Lenguajes de programaci\u00f3n</li> </ul>"},{"location":"tags/#listas","title":"Listas","text":"<ul> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> </ul>"},{"location":"tags/#mock","title":"Mock","text":"<ul> <li>UD 3 - 3.4 Mockk</li> </ul>"},{"location":"tags/#presentacion","title":"Presentacion","text":"<ul> <li>Din\u00e1mica de presentaci\u00f3n</li> </ul>"},{"location":"tags/#pruebas","title":"Pruebas","text":"<ul> <li>UD 3 - 3.1 Pruebas</li> </ul>"},{"location":"tags/#software","title":"Software","text":"<ul> <li>Programaci\u00f3n</li> <li>UD 1 - Mi primer programa</li> <li>UD 1 - P1: Mi primer programa</li> <li>UD 1 - 1.1 Un programa inform\u00e1tico</li> <li>UD 1 - 1.2 Practica con un lenguaje</li> <li>UD 1 - 1.3 Tipos de datos</li> <li>UD 1 - P3: Control de versiones con Git y GitHub - Parte 1</li> <li>UD 2 - Sentencias condicionales y repetitivas</li> <li>UD 2 - P1: Condicionales</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - P2: Iterativas</li> <li>UD 2 - 2.1 Condicionales</li> <li>UD 2 - 2.2 Iterativas y salto</li> <li>UD 2 - 2.3 Captura de excepciones</li> <li>UD 2 - 2.4 Depurar un programa</li> <li>UD 2 - 2.5 Documentar el c\u00f3digo</li> <li>UD 3 - Estructuras de datos</li> <li>UD 3 - P0: Cadenas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P2: Diccionarios</li> <li>UD 3 - P3: Conjuntos</li> <li>UD 3 - 3.0 Cadenas</li> <li>UD 3 - 3.1 Listas</li> <li>UD 3 - 3.1 Tuplas</li> <li>UD 3 - 3.3 Diccionarios</li> <li>UD 3 - 3.4 Conjuntos</li> <li>UD 3 - 3.5 Funciones</li> <li>UD 3 - Estructuras de datos</li> <li>UD 3 - P1: Listas</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 3 - Estructuras de datos</li> <li>UD 3 - P1: Listas</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 6 - Pendiente</li> <li>UD 3 - P1: Listas</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 7 - Interfaces texto y gr\u00e1fica. Entrada/Salida</li> <li>UD 3 - P1: Listas</li> <li>UD 7 - 7.1 Sistemas de archivos</li> <li>UD 7 - 7.2 Consola y teclado</li> <li>UD 7 - 7.3 Manejo de archivos: File</li> <li>UD 7 - 7.4 Lectura y escritura de archivos</li> <li>UD 9 - Acceso a base de datos relacionales</li> <li>UD 3 - P1: Listas</li> <li>UD 9 - 9.1 Acceso a BBDD</li> <li>UD 9 - 9.2 JDBC y kotlin</li> <li>UD 9 - 9.3 JDBC Prepared Statement</li> <li>UD 9 - 9.3 Patron DAO</li> <li>UD 9 - 9.5 Otros aspectos</li> <li>Entornos de desarrollo</li> <li>UD 1 - Introducci\u00f3n al desarrollo de software</li> <li>UD 1 - P3: Aplica Scrum</li> <li>UD 1 - 1.1 Relaci\u00f3n entre software y hardware</li> <li>UD 2 - P1: Herramientas de desarrollo</li> <li>UD 2 - 2.1 Relaci\u00f3n entre software y hardware</li> <li>UD 3 - P1: Git/Github b\u00e1sico</li> <li>UD 3 - 3.1 Pruebas</li> <li>UD 3 - 3.2 Test de unidad y TDD</li> <li>UD 3 - 3.3 Kotest</li> <li>UD 3 - 3.4 Mockk</li> <li>UD 3 - 3.3 Depuraci\u00f3n</li> <li>UD 4 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P2: Git/Github Merge</li> <li>UD 4 - P3: Git/Github Rebase I</li> <li>UD 4 - P4: Git/Github Rebase II</li> <li>UD 4 - P5: Git/Github Pull Request</li> </ul>"},{"location":"tags/#teclado","title":"Teclado","text":"<ul> <li>UD 7 - 7.2 Consola y teclado</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>UD 1 - 1.3 Funcionalidades de herramientas usadas durante el desarrollo de software</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 1 - 1.4 Traductores.</li> <li>UD 2 - Entornos de desarrollo integrado</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 3 - Herramientas Git/Github</li> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#tuplas","title":"Tuplas","text":"<ul> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> <li>UD 3 - P1: Listas</li> </ul>"},{"location":"tags/#git_1","title":"git","text":"<ul> <li>UD 3 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P2: Git/Github Merge</li> <li>UD 4 - P3: Git/Github Rebase I</li> <li>UD 4 - P4: Git/Github Rebase II</li> <li>UD 4 - P5: Git/Github Pull Request</li> </ul>"},{"location":"tags/#github_1","title":"github","text":"<ul> <li>UD 3 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P1: Git/Github b\u00e1sico</li> <li>UD 4 - P2: Git/Github Merge</li> <li>UD 4 - P3: Git/Github Rebase I</li> <li>UD 4 - P4: Git/Github Rebase II</li> <li>UD 4 - P5: Git/Github Pull Request</li> </ul>"},{"location":"tags/#kotest","title":"kotest","text":"<ul> <li>UD 3 - 3.3 Kotest</li> </ul>"},{"location":"tags/#kotlin","title":"kotlin","text":"<ul> <li>Scope functions en kotlin, como usarlas.</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 4 - 4.1 kotlin</li> <li>UD 4 - 4.1 kotlin</li> </ul>"},{"location":"tags/#ktlint","title":"ktlint","text":"<ul> <li>UD 4 - 4.1 Sistemas de control de versiones</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>Porque en Python empiezan los programas con if name == main</li> </ul>"},{"location":"tags/#scope-functions","title":"scope functions","text":"<ul> <li>Scope functions en kotlin, como usarlas.</li> </ul>"},{"location":"tags/#test","title":"test","text":"<ul> <li>UD 3 - 3.1 Pruebas</li> </ul>"}]}